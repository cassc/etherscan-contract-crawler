{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/xShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n\\n ___    ___ ________  ___  ___  ________  ________  _______           ________ ___  ________   ________  ________   ________  _______      \\n|\\\\  \\\\  /  /|\\\\   ____\\\\|\\\\  \\\\|\\\\  \\\\|\\\\   __  \\\\|\\\\   __  \\\\|\\\\  ___ \\\\         |\\\\  _____\\\\\\\\  \\\\|\\\\   ___  \\\\|\\\\   __  \\\\|\\\\   ___  \\\\|\\\\   ____\\\\|\\\\  ___ \\\\     \\n\\\\ \\\\  \\\\/  / | \\\\  \\\\___|\\\\ \\\\  \\\\\\\\\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\   __/|        \\\\ \\\\  \\\\__/\\\\ \\\\  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\|\\\\  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\___|\\\\ \\\\   __/|    \\n \\\\ \\\\    / / \\\\ \\\\_____  \\\\ \\\\   __  \\\\ \\\\   __  \\\\ \\\\   _  _\\\\ \\\\  \\\\_|/__       \\\\ \\\\   __\\\\\\\\ \\\\  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\   __  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\    \\\\ \\\\  \\\\_|/__  \\n  /     \\\\/   \\\\|____|\\\\  \\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\\\\\  \\\\\\\\ \\\\  \\\\_|\\\\ \\\\       \\\\ \\\\  \\\\_| \\\\ \\\\  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\____\\\\ \\\\  \\\\_|\\\\ \\\\ \\n /  /\\\\   \\\\     ____\\\\_\\\\  \\\\ \\\\__\\\\ \\\\__\\\\ \\\\__\\\\ \\\\__\\\\ \\\\__\\\\\\\\ _\\\\\\\\ \\\\_______\\\\       \\\\ \\\\__\\\\   \\\\ \\\\__\\\\ \\\\__\\\\\\\\ \\\\__\\\\ \\\\__\\\\ \\\\__\\\\ \\\\__\\\\\\\\ \\\\__\\\\ \\\\_______\\\\ \\\\_______\\\\\\n/__/ /\\\\ __\\\\   |\\\\_________\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|__|\\\\|_______|        \\\\|__|    \\\\|__|\\\\|__| \\\\|__|\\\\|__|\\\\|__|\\\\|__| \\\\|__|\\\\|_______|\\\\|_______|\\n|__|/ \\\\|__|   \\\\|_________|                                                                                                                 \\n                                                                                                                                           \\n                                                           \\nTelegram: https://t.me/xSHAREFinance\\nWebsite: https://xshare.finance\\nDocs: https://xshare.gitbook.io/xshare-finance/\\nTwitter: https://twitter.com/xShareFinance\\n\\n\\n**/\\n\\n\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IERC20Metadata is IERC20{\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    \\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() external virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        return account.code.length > 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n}\\n\\ninterface ILpPair {\\n    function sync() external;\\n}\\n\\ninterface IDexRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IDexFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n    /**\\n     * @dev Multiplies two int256 variables and fails on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n\\n        // Detect overflow when multiplying MIN_INT256 with -1\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Division of two int256 variables and fails on overflow.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // Prevent overflow when dividing MIN_INT256 by -1\\n        require(b != -1 || a != MIN_INT256);\\n\\n        // Solidity already throws when dividing by 0.\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two int256 variables and fails on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two int256 variables and fails on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Converts to absolute value, and fails on overflow.\\n     */\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != MIN_INT256);\\n        return a < 0 ? -a : a;\\n    }\\n\\n\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a >= 0);\\n        return uint256(a);\\n    }\\n}\\n\\nlibrary SafeMathUint {\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\n    int256 b = int256(a);\\n    require(b >= 0);\\n    return b;\\n  }\\n}\\n\\ninterface DividendPayingContractOptionalInterface {\\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\\n}\\n\\ninterface DividendPayingContractInterface {\\n  function dividendOf(address _owner) external view returns(uint256);\\n  function distributeDividends() external payable;\\n  function withdrawDividend() external;\\n  event DividendsDistributed(\\n    address indexed from,\\n    uint256 weiAmount\\n  );\\n  event DividendWithdrawn(\\n    address indexed to,\\n    uint256 weiAmount\\n  );\\n}\\ncontract DividendPayingContract is DividendPayingContractInterface, DividendPayingContractOptionalInterface, Ownable {\\n    using SafeMath for uint256;\\n    using SafeMathUint for uint256;\\n    using SafeMathInt for int256;\\n\\n    uint256 constant internal magnitude = 2**128;\\n\\n    uint256 internal magnifiedDividendPerShare;\\n                                                                            \\n    mapping(address => int256) internal magnifiedDividendCorrections;\\n    mapping(address => uint256) internal withdrawnDividends;\\n    \\n    mapping (address => uint256) public holderBalance;\\n    uint256 public totalBalance;\\n\\n    uint256 public totalDividendsDistributed;\\n\\n    receive() external payable {\\n        distributeDividends();\\n    }\\n\\n    function distributeDividends() public override payable {\\n        if(totalBalance > 0 && msg.value > 0){\\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\n                (msg.value).mul(magnitude) / totalBalance\\n            );\\n\\n\\n            emit DividendsDistributed(msg.sender, msg.value);\\n\\n            totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\\n        }\\n    }\\n\\n\\n    function withdrawDividend() external virtual override {\\n        _withdrawDividendOfUser(payable(msg.sender));\\n    }\\n\\n    function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\\n        if (_withdrawableDividend > 0) {\\n        withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\\n\\n        emit DividendWithdrawn(user, _withdrawableDividend);\\n        (bool success,) = user.call{value: _withdrawableDividend}(\\\"\\\");\\n\\n        if(!success) {\\n            withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\\n            return 0;\\n        }\\n\\n        return _withdrawableDividend;\\n        }\\n        \\n        return 0;\\n    }\\n\\n\\n\\n    function withdrawDividendOfUserForCompound(address payable user) external onlyOwner returns (uint256 _withdrawableDividend) {\\n        _withdrawableDividend = withdrawableDividendOf(user);\\n        if (_withdrawableDividend > 0) {\\n            withdrawnDividends[user] = withdrawnDividends[user] + _withdrawableDividend;\\n            emit DividendWithdrawn(user, _withdrawableDividend);\\n        }\\n        (bool success,) = owner().call{value: _withdrawableDividend}(\\\"\\\");\\n        if(!success) {\\n            withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\\n            return 0;\\n        }\\n    }\\n\\n    function dividendOf(address _owner) external view override returns(uint256) {\\n        return withdrawableDividendOf(_owner);\\n    }\\n\\n    function withdrawableDividendOf(address _owner) public view override returns(uint256) {\\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\\n    }\\n\\n    function withdrawnDividendOf(address _owner) external view override returns(uint256) {\\n        return withdrawnDividends[_owner];\\n    }\\n\\n    function accumulativeDividendOf(address _owner) public view override returns(uint256) {\\n        return magnifiedDividendPerShare.mul(holderBalance[_owner]).toInt256Safe()\\n        .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\\n    }\\n\\n    function _increase(address account, uint256 value) internal {\\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\\n        .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\\n    }\\n\\n    function _reduce(address account, uint256 value) internal {\\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\\n        .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\\n    }\\n\\n\\n    function _setBalance(address account, uint256 newBalance) internal {\\n        uint256 currentBalance = holderBalance[account];\\n        holderBalance[account] = newBalance;\\n        if(newBalance > currentBalance) {\\n        uint256 increaseAmount = newBalance.sub(currentBalance);\\n        _increase(account, increaseAmount);\\n        totalBalance += increaseAmount;\\n        } else if(newBalance < currentBalance) {\\n        uint256 reduceAmount = currentBalance.sub(newBalance);\\n        _reduce(account, reduceAmount);\\n        totalBalance -= reduceAmount;\\n        }\\n    }\\n}\\n\\n\\n\\ncontract DividendTracker is DividendPayingContract {\\n\\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\\n\\n    mapping (address => bool) public excludedFromDividends;\\n\\n    function getAccount(address _account)\\n        public view returns (\\n            address account,\\n            uint256 withdrawableDividends,\\n            uint256 totalDividends,\\n            uint256 balance) {\\n        account = _account;\\n\\n        withdrawableDividends = withdrawableDividendOf(account);\\n        totalDividends = accumulativeDividendOf(account);\\n\\n        balance = holderBalance[account];\\n    }\\n\\n\\n\\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\\n        if(excludedFromDividends[account]) {\\n    \\t\\treturn;\\n    \\t}\\n        _setBalance(account, newBalance);\\n    \\tprocessAccount(account, true);\\n    }\\n    \\n    \\n\\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\\n        uint256 amount = _withdrawDividendOfUser(account);\\n\\n    \\tif(amount > 0) {\\n            emit Claim(account, amount, automatic);\\n    \\t\\treturn true;\\n    \\t}\\n\\n    \\treturn false;\\n    }\\n\\n    function getTotalDividendsDistributed() external view returns (uint256) {\\n        return totalDividendsDistributed;\\n    }\\n\\n\\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\\n\\t\\treturn holderBalance[account];\\n\\t}\\n\\n    function getNumberOfDividends() external view returns(uint256) {\\n        return totalBalance;\\n    }\\n\\n    function excludeFromDividends(address account) external onlyOwner {\\n    \\texcludedFromDividends[account] = true;\\n\\n    \\t_setBalance(account, 0);\\n    }\\n\\n    function includeInDividends(address account) external onlyOwner {\\n    \\trequire(excludedFromDividends[account]);\\n    \\texcludedFromDividends[account] = false;\\n        _setBalance(account, IERC20(owner()).balanceOf(account)); // sets balance back to token balance\\n    }\\n}\\n\\n\\n\\ncontract xShareToken is ERC20, Ownable {\\n\\n\\n\\n    mapping (address => bool) public exemptFromFees;\\n    mapping (address => bool) public exemptFromLimits;\\n\\n\\n    bool public tradingAllowed;\\n\\n    mapping (address => bool) public isAMMPair;\\n\\n    address public marketingAddress;\\n    address public devAddress;\\n\\n    DividendTracker public dividendTracker;\\n\\n    Taxes public buyTax;\\n    Taxes public sellTax;\\n\\n    TokensForTax public tokensForTax;\\n\\n    mapping(address => uint256) private _holderLastTransferBlock; // MEV protection\\n    bool public antiMevEnabled = true;\\n\\n    bool public limited = true;\\n\\n    uint256 public swapTokensAtAmt;\\n \\n\\n    address public lpPair;\\n    IDexRouter public dexRouter;\\n    address public immutable WETH;\\n\\n    TxLimits public txLimits;\\n\\n    uint64 public constant FEE_DIVISOR = 10000;\\n    uint256 public _buyCount;\\n\\n\\n    // structs\\n\\n\\n    struct LockedTokens {\\n        uint256 amount;\\n        uint256 unlockTimestamp;\\n        bool locker;\\n    }\\n\\n\\n    struct TxLimits {\\n        uint128 transactionLimit;\\n        uint128 walletLimit;\\n    }\\n\\n    struct Taxes {\\n        uint48 marketingTax;\\n        uint48 devTax;\\n        uint48 liquidityTax;\\n        uint48 revShareTax;\\n        uint48 totalTax;\\n    }\\n\\n    struct TokensForTax {\\n        uint64 tokensForMarketing;\\n        uint64 tokensForLiquidity;\\n        uint64 tokensForDev;\\n        uint64 tokensForRevShare;\\n        bool gasSaver;\\n    }\\n\\n    // events\\n\\n    event UpdatedTransactionLimit(uint newMax);\\n    event UpdatedWalletLimit(uint newMax);\\n    event SetExemptFromFees(address _address, bool _isExempt);\\n    event SetExemptFromLimits(address _address, bool _isExempt);\\n    event RemovedLimits();\\n    event UpdatedBuyTax(uint newAmt);\\n    event UpdatedSellTax(uint newAmt);\\n\\n    // constructor\\n\\n    constructor()\\n        ERC20(\\\"xSHARE\\\", \\\"xSHARE Finance\\\")\\n    {   \\n        _mint(msg.sender, 100_000_000 * 1e18);\\n\\n        address _v2Router;\\n\\n        // UniswapRouter\\n        _v2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n \\n\\n        dividendTracker = new DividendTracker();\\n\\n        dexRouter = IDexRouter(_v2Router);\\n\\n        txLimits.transactionLimit = uint128(totalSupply() * 2 / 100);\\n        txLimits.walletLimit = uint128(totalSupply() * 2 / 100);\\n        swapTokensAtAmt = totalSupply() * 25 / 10000;\\n\\n        marketingAddress = 0x9832dBe2A11DE717E122E4CdC53b7E6d2f3eDcE6; // update\\n        devAddress = 0xA92C0207Ba5a50Cd107Ea189C4Af975f786Cb141; // update\\n\\n\\n        buyTax.marketingTax = 200;\\n        buyTax.liquidityTax = 0;\\n        buyTax.devTax = 100;\\n        buyTax.revShareTax = 300;\\n        buyTax.totalTax = buyTax.marketingTax + buyTax.liquidityTax + buyTax.devTax + buyTax.revShareTax;\\n\\n        sellTax.marketingTax = 200;\\n        sellTax.liquidityTax = 0;\\n        sellTax.devTax = 100;\\n        sellTax.revShareTax = 300;\\n        sellTax.totalTax = sellTax.marketingTax + sellTax.liquidityTax + sellTax.devTax + buyTax.revShareTax + sellTax.revShareTax;\\n\\n        tokensForTax.gasSaver = true;\\n\\n        WETH = dexRouter.WETH();\\n        lpPair = IDexFactory(dexRouter.factory()).createPair(address(this), WETH);\\n\\n        isAMMPair[lpPair] = true;\\n\\n        exemptFromLimits[lpPair] = true;\\n        exemptFromLimits[msg.sender] = true;\\n        exemptFromLimits[address(this)] = true;\\n\\n        exemptFromFees[msg.sender] = true;\\n        exemptFromFees[address(this)] = true;\\n\\n        dividendTracker.excludeFromDividends(address(this));\\n        dividendTracker.excludeFromDividends(address(lpPair));\\n \\n        _approve(address(this), address(dexRouter), type(uint256).max);\\n        _approve(address(msg.sender), address(dexRouter), totalSupply());\\n    }\\n\\n\\n    function setTaxAddresses(address _marketingAddress, address _devAddress) external onlyOwner {\\n        marketingAddress = _marketingAddress;\\n        devAddress = _devAddress;\\n    }\\n\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        \\n        if(!exemptFromFees[from] && !exemptFromFees[to]){\\n            require(tradingAllowed, \\\"Trading not active\\\");\\n            checkLimits(from, to, amount);\\n            amount -= handleTax(from, to, amount);\\n        }\\n\\n        super._transfer(from,to,amount);\\n\\n        dividendTracker.setBalance(payable(to), balanceOf(to));\\n        dividendTracker.setBalance(payable(from), balanceOf(from));\\n    }\\n\\n\\n\\n\\n    function checkLimits(address from, address to, uint256 amount) internal {\\n        if(limited){\\n            bool exFromLimitsTo = exemptFromLimits[to];\\n            uint256 balanceOfTo = balanceOf(to);\\n            TxLimits memory _txLimits = txLimits;\\n            // buy\\n            if (isAMMPair[from] && !exFromLimitsTo) {\\n                require(amount <= _txLimits.transactionLimit, \\\"Max Txn\\\");\\n                require(amount + balanceOfTo <= _txLimits.walletLimit, \\\"Max Wallet\\\");\\n    \\n            } \\n            // sell\\n            else if (isAMMPair[to] && !exemptFromLimits[from]) {\\n                require(amount <= _txLimits.transactionLimit, \\\"Max Txn\\\");\\n        \\n            }\\n            else if(!exFromLimitsTo) {\\n                require(amount + balanceOfTo <= _txLimits.walletLimit, \\\"Max Wallet\\\");\\n            }\\n        }\\n\\n\\n        if (antiMevEnabled){\\n            if(isAMMPair[to]){\\n                require(_holderLastTransferBlock[from] < block.number, \\\"Anti MEV\\\");\\n            } else {\\n                _holderLastTransferBlock[to] = block.number;\\n                _holderLastTransferBlock[tx.origin] = block.number;\\n            }\\n        }\\n    }\\n\\n\\n    function handleTax(address from, address to, uint256 amount) internal returns (uint256){\\n\\n        if(balanceOf(address(this)) >= swapTokensAtAmt && !isAMMPair[from]) {\\n            convertTaxes();\\n        }\\n        \\n        uint128 tax = 0;\\n\\n        Taxes memory taxes;\\n\\n        if (isAMMPair[to]){\\n            taxes = sellTax;\\n        } else if(isAMMPair[from]){\\n            taxes = buyTax;\\n            _buyCount++;\\n        }\\n\\n\\n\\n        if(taxes.totalTax > 0){\\n            //initial taxes at launch\\n            if(_buyCount <= 20) {\\n                taxes.devTax = 1500;\\n                taxes.liquidityTax = 0;\\n                taxes.marketingTax = 100;\\n                taxes.revShareTax = 300;\\n                taxes.totalTax = 1900;\\n                \\n            } else {\\n            taxes.devTax = 100;\\n            taxes.liquidityTax = 0;\\n            taxes.marketingTax = 200;\\n            taxes.revShareTax = 300;\\n            taxes.totalTax = 600;\\n            }\\n\\n            TokensForTax memory tokensForTaxUpdate = tokensForTax;\\n            tax = uint128(amount * taxes.totalTax / FEE_DIVISOR);\\n            tokensForTaxUpdate.tokensForLiquidity += uint64(tax * taxes.liquidityTax / taxes.totalTax / 1e9);\\n            tokensForTaxUpdate.tokensForMarketing += uint64(tax * taxes.marketingTax / taxes.totalTax / 1e9);\\n            tokensForTaxUpdate.tokensForDev += uint64(tax * taxes.devTax / taxes.totalTax / 1e9);\\n            tokensForTaxUpdate.tokensForRevShare += uint64(tax * taxes.revShareTax / taxes.totalTax / 1e9);\\n            tokensForTax = tokensForTaxUpdate;\\n            super._transfer(from, address(this), tax);\\n            \\n        } \\n    \\n        return tax;\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmt) private {\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = WETH;\\n\\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmt,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function convertTaxes() private {\\n\\n        uint256 contractBalance = balanceOf(address(this));\\n        TokensForTax memory tokensForTaxMem = tokensForTax;\\n        uint256 totalTokensToSwap = tokensForTaxMem.tokensForLiquidity + tokensForTaxMem.tokensForMarketing + tokensForTaxMem.tokensForDev + tokensForTaxMem.tokensForRevShare;\\n        \\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\\n\\n        if(contractBalance > swapTokensAtAmt * 3){\\n            contractBalance = swapTokensAtAmt * 3;\\n        }\\n\\n\\n        if(contractBalance > 0 && _buyCount > 20){\\n\\n            swapTokensForETH(contractBalance);\\n            \\n            uint256 ethBalance = address(this).balance;\\n\\n            bool success;\\n\\n            if(tokensForTaxMem.tokensForDev > 0){\\n                (success,) = devAddress.call{value: ethBalance * tokensForTaxMem.tokensForDev / totalTokensToSwap}(\\\"\\\");  \\n            }\\n\\n            if(tokensForTaxMem.tokensForRevShare > 0){\\n                (success,) = address(dividendTracker).call{value: ethBalance * tokensForTaxMem.tokensForRevShare/ totalTokensToSwap}(\\\"\\\");  \\n            }\\n\\n            ethBalance = address(this).balance;\\n\\n            if(ethBalance > 0){\\n                (success,) = marketingAddress.call{value: ethBalance}(\\\"\\\");  \\n            }\\n        }\\n\\n        tokensForTaxMem.tokensForLiquidity = 0;\\n        tokensForTaxMem.tokensForMarketing = 0;\\n        tokensForTaxMem.tokensForDev = 0;\\n        tokensForTaxMem.tokensForRevShare = 0;\\n\\n        tokensForTax = tokensForTaxMem;\\n    }\\n\\n\\n\\n    // owner functions\\n    function setExemptFromFee(address _address, bool _isExempt) external onlyOwner {\\n        require(_address != address(0), \\\"Zero Address\\\");\\n        require(_address != address(this), \\\"Cannot unexempt contract\\\");\\n        exemptFromFees[_address] = _isExempt;\\n        emit SetExemptFromFees(_address, _isExempt);\\n    }\\n\\n    function setExemptFromLimit(address _address, bool _isExempt) external onlyOwner {\\n        require(_address != address(0), \\\"Zero Address\\\");\\n        if(!_isExempt){\\n            require(_address != lpPair, \\\"Cannot remove pair\\\");\\n        }\\n        exemptFromLimits[_address] = _isExempt;\\n        emit SetExemptFromLimits(_address, _isExempt);\\n    }\\n\\n    function updateTransactionLimit(uint128 newNumInTokens) external onlyOwner {\\n        require(newNumInTokens >= (totalSupply() * 1 / 1000)/(10**decimals()), \\\"Too low\\\");\\n        txLimits.transactionLimit = uint128(newNumInTokens * (10**decimals()));\\n        emit UpdatedTransactionLimit(txLimits.transactionLimit);\\n    }\\n\\n    function updateWalletLimit(uint128 newNumInTokens) external onlyOwner {\\n        require(newNumInTokens >= (totalSupply() * 1 / 1000)/(10**decimals()), \\\"Too low\\\");\\n        txLimits.walletLimit = uint128(newNumInTokens * (10**decimals()));\\n        emit UpdatedWalletLimit(txLimits.walletLimit);\\n    }\\n\\n    function updateSwapTokensAmt(uint256 newAmount) external onlyOwner {\\n        require(newAmount >= (totalSupply() * 1) / 100000, \\\"Swap amount cannot be lower than 0.001% total supply.\\\");\\n        require(newAmount <= (totalSupply() * 5) / 1000, \\\"Swap amount cannot be higher than 0.5% total supply.\\\");\\n        swapTokensAtAmt = newAmount;\\n    }\\n\\n    function updateBuyTax(uint48 _marketingTax, uint48 _liquidityTax, uint48 _devTax, uint48 _revShareTax) external onlyOwner {\\n        Taxes memory taxes;\\n        taxes.marketingTax = _marketingTax;\\n        taxes.liquidityTax = _liquidityTax;\\n        taxes.devTax = _devTax;\\n        taxes.revShareTax = _revShareTax;\\n        taxes.totalTax = _marketingTax + _liquidityTax + _devTax + _revShareTax;\\n        require(taxes.totalTax  <= 1000, \\\"Keep tax below 10%\\\");\\n        emit UpdatedBuyTax(taxes.totalTax);\\n        buyTax = taxes;\\n    }\\n\\n    function updateSellTax(uint48 _marketingTax, uint48 _liquidityTax, uint48 _devTax, uint48 _revShareTax) external onlyOwner {\\n        Taxes memory taxes;\\n        taxes.marketingTax = _marketingTax;\\n        taxes.liquidityTax = _liquidityTax;\\n        taxes.devTax = _devTax;\\n        taxes.revShareTax = _revShareTax;\\n        taxes.totalTax = _marketingTax + _liquidityTax + _devTax + _revShareTax;\\n        require(taxes.totalTax  <= 1000, \\\"Keep tax below 10%\\\");\\n        emit UpdatedSellTax(taxes.totalTax);\\n        sellTax = taxes;\\n    }\\n\\n    function enableTrading() external onlyOwner {\\n        require(!tradingAllowed, \\\"Trading already live\\\");\\n        tradingAllowed = true;\\n    }\\n\\n    function removeLimits() external onlyOwner {\\n        limited = false;\\n        TxLimits memory _txLimits;\\n        uint256 supply = totalSupply();\\n        _txLimits.transactionLimit = uint128(supply);\\n        _txLimits.walletLimit = uint128(supply);\\n        txLimits = _txLimits;\\n        emit RemovedLimits();\\n    }\\n\\n    function updateMevBlockerEnabled(bool _enabled) external onlyOwner {\\n        antiMevEnabled = _enabled;\\n    }\\n\\n\\n    function airdropToWallets(address[] calldata wallets, uint256[] calldata tokenAmount) external onlyOwner {\\n        require(wallets.length == tokenAmount.length, \\\"arrays length mismatch\\\");\\n        for(uint256 i = 0; i < wallets.length; i++){\\n            super._transfer(msg.sender, wallets[i], tokenAmount[i] * (10**18));\\n        }\\n    }\\n\\n    function rescueTokens(address _token, address _to) external onlyOwner {\\n        require(_token != address(0), \\\"_token address cannot be 0\\\");\\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\\n        SafeERC20.safeTransfer(IERC20(_token),_to, _contractBalance);\\n    }\\n\\n\\n    receive() payable external {}\\n\\n    // dividend functions\\n\\n    function claim() external {\\n        dividendTracker.processAccount(payable(msg.sender), false);\\n    }\\n\\n    function getTotalDividendsDistributed() external view returns (uint256) {\\n        return dividendTracker.totalDividendsDistributed();\\n    }\\n\\n    function withdrawableDividendOf(address account) public view returns(uint256) {\\n    \\treturn dividendTracker.withdrawableDividendOf(account);\\n  \\t}\\n\\n\\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\\n\\t\\treturn dividendTracker.holderBalance(account);\\n\\t}\\n\\n    function getAccountDividendsInfo(address account)\\n        external view returns (\\n            address,\\n            uint256,\\n            uint256,\\n            uint256) {\\n        return dividendTracker.getAccount(account);\\n    }\\n    \\n    function getNumberOfDividends() external view returns(uint256) {\\n        return dividendTracker.totalBalance();\\n    }\\n\\n    function excludeFromDividends(address _wallet) external onlyOwner {\\n        dividendTracker.excludeFromDividends(_wallet);\\n    }\\n\\n     function includeInDividends(address _wallet) external onlyOwner {\\n        dividendTracker.includeInDividends(_wallet);\\n    }\\n\\n    function compound(uint256 minOutput) external {\\n        uint256 amountEthForCompound = dividendTracker.withdrawDividendOfUserForCompound(payable(msg.sender));\\n        if(amountEthForCompound > 0){\\n            buyBackTokens(amountEthForCompound, minOutput, msg.sender);\\n        } else {\\n            revert(\\\"No rewards\\\");\\n        }\\n    }\\n\\n\\n    function buyBackTokens(uint256 ethAmountInWei, uint256 minOut, address to) internal {\\n        // generate the uniswap pair path of weth -> eth\\n        address[] memory path = new address[](2);\\n        path[0] = dexRouter.WETH();\\n        path[1] = address(this);\\n\\n        // make the swap\\n        dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmountInWei}(\\n            minOut,\\n            path,\\n            address(to),\\n            block.timestamp\\n        );\\n    }\\n\\n    // helper views\\n\\n    function getExpectedCompoundOutputByEthAmount(uint256 rewardAmount) external view returns(uint256) {\\n        address[] memory path = new address[](2);\\n        path[0] = dexRouter.WETH();\\n        path[1] = address(this);\\n        uint256[] memory amounts = dexRouter.getAmountsOut(rewardAmount, path);\\n        return amounts[1] - (amounts[1] * (buyTax.totalTax + 50) / FEE_DIVISOR);\\n    }\\n\\n    function getExpectedCompoundOutputByWallet(address wallet) external view returns(uint256) {\\n        uint256 rewardAmount = withdrawableDividendOf(wallet);\\n        address[] memory path = new address[](2);\\n        path[0] = dexRouter.WETH();\\n        path[1] = address(this);\\n        uint256[] memory amounts = dexRouter.getAmountsOut(rewardAmount, path);\\n        return amounts[1] - (amounts[1] * (buyTax.totalTax + 50) / FEE_DIVISOR);\\n    }\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"DividendWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"DividendsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"accumulativeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeDividends\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"dividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"}],\"name\":\"processAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"setBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawDividendOfUserForCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawableDividend\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawnDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DividendTracker", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}