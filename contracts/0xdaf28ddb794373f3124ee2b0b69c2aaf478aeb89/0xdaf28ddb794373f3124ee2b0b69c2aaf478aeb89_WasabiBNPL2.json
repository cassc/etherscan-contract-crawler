{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lending/interfaces/IFlashloan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title Flashloan Interface\\ninterface IFlashloan {\\n    /// @notice Flashloan Info Struct\\n    /// @param enabled Enabled flag\\n    /// @param flashloanPremiumValue;\\n    struct FlashLoanInfo {\\n        bool enabled;\\n        uint256 flashloanPremiumValue;\\n    }\\n\\n    /// @notice ETH Transfer Failed\\n    error EthTransferFailed();\\n\\n    /// @notice Borrow ETH\\n    /// @param amount Flashloan amount\\n    /// @return flashLoanRepayAmount Flashloan repayment amount\\n    function borrow(uint256 amount) external returns (uint256 flashLoanRepayAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/lending/interfaces/ILendingAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ILendingAddressProvider {\\n    event LendingAdded(address indexed lending);\\n\\n    event LendingRemoved(address indexed lending);\\n\\n    function isLending(address) external view returns (bool);\\n\\n    function addLending(address _lending) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lending/interfaces/INFTLending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @notice NFTLending Interface\\ninterface INFTLending {\\n    /// @notice Loan Details struct\\n    /// @param borrowAmount Borrow amount\\n    /// @param repayAmount Repay amount\\n    /// @param loanExpiration Loan expiration\\n    struct LoanDetails {\\n        uint256 borrowAmount;\\n        uint256 repayAmount;\\n        uint256 loanExpiration;\\n        address nftAddress;\\n        uint256 tokenId;\\n    }\\n\\n    /// @notice Get loan details for given loan id\\n    /// @param _loanId The loan id\\n    function getLoanDetails(\\n        uint256 _loanId\\n    ) external view returns (LoanDetails memory);\\n\\n    /// @notice Borrow WETH from the protocol\\n    /// @param _inputData Encoded input parameters\\n    /// @return _loanId The loan id\\n    function borrow(\\n        bytes calldata _inputData\\n    ) external payable returns (uint256 _loanId);\\n\\n    /// @notice Repay the loan\\n    /// @param _loanId The loan id to repay\\n    /// @param _receiver The user address to receive collateral NFT\\n    function repay(uint256 _loanId, address _receiver) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/lending/interfaces/IWasabiBNPL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"../../lib/WasabiStructs.sol\\\";\\n\\n/// @title WasabiBNPL Interface\\ninterface IWasabiBNPL {\\n    /// @notice Function Calldata Struct\\n    /// @param to to address\\n    /// @param value call value\\n    /// @param data call data\\n    struct FunctionCallData {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Loan Info Struct\\n    /// @param nftLending INFTLending address\\n    /// @param loanId loan id\\n    struct LoanInfo {\\n        address nftLending;\\n        uint256 loanId;\\n    }\\n\\n    /// @notice Function Call Failed\\n    error FunctionCallFailed();\\n\\n    /// @notice Loan Not Paid\\n    error FlashLoanNotPaid();\\n\\n    /// @notice ETH Transfer Failed\\n    error EthTransferFailed();\\n\\n    /// @notice Invalid Param\\n    error InvalidParam();\\n\\n    /// @dev Emitted when a new option is issued\\n    event OptionIssued(uint256 optionId);\\n\\n    /// @dev Emitted when an option is rolledover into a new one\\n    event OptionRolledOver(uint256 optionId, uint256 previousOptionId, uint256 refundAmount);\\n\\n    /// @dev Emitted when an option is executed\\n    event OptionExecuted(uint256 optionId);\\n\\n    /// @dev Emitted when an option is executed and the NFT is sold to the market\\n    event OptionExecutedWithArbitrage(uint256 optionId, uint256 payout);\\n\\n    /// @notice returns the OptionData for the given option id\\n    /// \\n    function getOptionData(uint256 _optionId) external view returns (WasabiStructs.OptionData memory optionData);\\n\\n    /// @notice Executes BNPL flow\\n    /// @dev BNLP flow\\n    ///      1. take flashloan\\n    ///      2. buy nft from marketplace\\n    ///      3. get loan from nft lending protocol\\n    /// @param _nftLending NFTLending contract address\\n    /// @param _borrowData Borrow data\\n    /// @param _flashLoanAmount Call value\\n    /// @param _marketplaceCallData List of marketplace calldata\\n    /// @param _signatures Signatures\\n    function bnpl(\\n        address _nftLending,\\n        bytes calldata _borrowData,\\n        uint256 _flashLoanAmount,\\n        FunctionCallData[] calldata _marketplaceCallData,\\n        bytes[] calldata _signatures\\n    ) external payable returns (uint256);\\n\\n    /// @notice Executes the given option\\n    /// @param _optionId the option id\\n    function executeOption(uint256 _optionId) external payable;\\n\\n    /// @notice Executes the given option and trades the underlying NFT to collect a payout\\n    /// @param _optionId the option id\\n    /// @param _marketplaceCallData marketplace calldata list\\n    /// @param _signatures the signatures for the marketplace call data\\n    function executeOptionWithArbitrage(\\n        uint256 _optionId,\\n        FunctionCallData[] calldata _marketplaceCallData,\\n        bytes[] calldata _signatures\\n    ) external payable;\\n\\n    /// @notice Rolls the given option over by repaying the loan and getting a new one (mints a new option)\\n    /// @param _optionId the option id\\n    /// @param _nftLending the nft lending contract address\\n    /// @param _borrowData  the borrow data\\n    function rolloverOption(uint256 _optionId, address _nftLending, bytes calldata _borrowData) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/lending/interfaces/IWasabiOption.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IWasabiOption {\\n    function mint(address, address) external returns (uint256);\\n\\n    function burn(uint256) external;\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n}\\n\"\r\n    },\r\n    \"contracts/lending/WasabiBNPL2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../lib/Signing.sol\\\";\\nimport {IWETH} from \\\"../IWETH.sol\\\";\\nimport \\\"./interfaces/IWasabiBNPL.sol\\\";\\nimport \\\"./interfaces/IWasabiOption.sol\\\";\\nimport \\\"./interfaces/IFlashloan.sol\\\";\\nimport \\\"./interfaces/ILendingAddressProvider.sol\\\";\\nimport \\\"./interfaces/INFTLending.sol\\\";\\n\\ncontract WasabiBNPL2 is IWasabiBNPL, Ownable, IERC721Receiver, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    /// @notice Wasabi Option\\n    IWasabiOption public wasabiOption;\\n\\n    /// @notice Wasabi Flashloan\\n    IFlashloan public flashloan;\\n\\n    /// @notice Wasabi Address Provider\\n    ILendingAddressProvider public addressProvider;\\n\\n    /// @notice Wasabi Pool Factory\\n    address public factory;\\n\\n    /// @notice Option ID to LoanInfo mapping\\n    mapping(uint256 => LoanInfo) public optionToLoan;\\n\\n    /// @notice\\n    address public wethAddress;\\n\\n    /// @notice WasabiBNPL Constructor\\n    /// @param _wasabiOption Wasabi Option address\\n    /// @param _flashloan Wasabi Flashloan address\\n    /// @param _addressProvider Wasabi Address Provider address\\n    /// @param _wethAddress Wrapped ETH address\\n    /// @param _factory Wasabi Pool Factory address\\n    constructor(\\n        IWasabiOption _wasabiOption,\\n        IFlashloan _flashloan,\\n        ILendingAddressProvider _addressProvider,\\n        address _wethAddress,\\n        address _factory\\n    ) {\\n        wasabiOption = _wasabiOption;\\n        flashloan = _flashloan;\\n        addressProvider = _addressProvider;\\n        wethAddress = _wethAddress;\\n        factory = _factory;\\n    }\\n\\n    /// @inheritdoc IWasabiBNPL\\n    function getOptionData(\\n        uint256 _optionId\\n    ) external view returns (WasabiStructs.OptionData memory optionData) {\\n        LoanInfo memory loanInfo = optionToLoan[_optionId];\\n        INFTLending.LoanDetails memory loanDetails = INFTLending(\\n            loanInfo.nftLending\\n        ).getLoanDetails(loanInfo.loanId);\\n        bool active = wasabiOption.ownerOf(_optionId) != address(0) &&\\n            loanDetails.loanExpiration > block.timestamp;\\n\\n        optionData = WasabiStructs.OptionData(\\n            active,\\n            WasabiStructs.OptionType.CALL,\\n            loanDetails.repayAmount,\\n            loanDetails.loanExpiration,\\n            loanDetails.tokenId\\n        );\\n    }\\n\\n    /// @inheritdoc IWasabiBNPL\\n    function bnpl(\\n        address _nftLending,\\n        bytes calldata _borrowData,\\n        uint256 _flashLoanAmount,\\n        FunctionCallData[] calldata _marketplaceCallData,\\n        bytes[] calldata _signatures\\n    ) external payable nonReentrant returns (uint256) {\\n        validate(_marketplaceCallData, _signatures);\\n\\n        if (!addressProvider.isLending(_nftLending)) {\\n            revert InvalidParam();\\n        }\\n\\n        // 1. Get flash loan\\n        uint256 flashLoanRepayAmount = flashloan.borrow(_flashLoanAmount);\\n\\n        // 2. Buy NFT\\n        executeFunctions(_marketplaceCallData);\\n\\n        // 3. Get loan\\n        bytes memory result = _nftLending.functionDelegateCall(\\n            abi.encodeWithSelector(INFTLending.borrow.selector, _borrowData)\\n        );\\n\\n        uint256 loanId = abi.decode(result, (uint256));\\n        uint256 optionId = wasabiOption.mint(_msgSender(), factory);\\n        optionToLoan[optionId] = LoanInfo({\\n            nftLending: _nftLending,\\n            loanId: loanId\\n        });\\n\\n        // 4. Repay flashloan\\n        if (address(this).balance < flashLoanRepayAmount) {\\n            revert FlashLoanNotPaid();\\n        }\\n        uint256 payout = address(this).balance - flashLoanRepayAmount;\\n        payETH(address(flashloan), flashLoanRepayAmount);\\n        if (payout > 0) {\\n            payETH(_msgSender(), payout);\\n        }\\n\\n        emit OptionIssued(optionId);\\n        return optionId;\\n    }\\n\\n    /// @inheritdoc IWasabiBNPL\\n    function executeOption(uint256 _optionId) external payable nonReentrant {\\n        require(\\n            wasabiOption.ownerOf(_optionId) == _msgSender(),\\n            \\\"Only owner can exercise option\\\"\\n        );\\n\\n        LoanInfo storage loanInfo = optionToLoan[_optionId];\\n        require(loanInfo.nftLending != address(0), \\\"Invalid Option\\\");\\n\\n        INFTLending.LoanDetails memory loanDetails = INFTLending(\\n            loanInfo.nftLending\\n        ).getLoanDetails(loanInfo.loanId);\\n        require(\\n            loanDetails.loanExpiration > block.timestamp,\\n            \\\"Loan has expired\\\"\\n        );\\n        require(\\n            msg.value >= loanDetails.repayAmount,\\n            \\\"Insufficient repay amount supplied\\\"\\n        );\\n\\n        loanInfo.nftLending.functionDelegateCall(\\n            abi.encodeWithSelector(\\n                INFTLending.repay.selector,\\n                loanInfo.loanId,\\n                _msgSender()\\n            )\\n        );\\n\\n        wasabiOption.burn(_optionId);\\n        emit OptionExecuted(_optionId);\\n    }\\n\\n    /// @inheritdoc IWasabiBNPL\\n    function executeOptionWithArbitrage(\\n        uint256 _optionId,\\n        FunctionCallData[] calldata _marketplaceCallData,\\n        bytes[] calldata _signatures\\n    ) external payable nonReentrant {\\n        validate(_marketplaceCallData, _signatures);\\n        require(wasabiOption.ownerOf(_optionId) == _msgSender(), \\\"Only owner can exercise option\\\");\\n\\n        LoanInfo storage loanInfo = optionToLoan[_optionId];\\n        require(loanInfo.nftLending != address(0), \\\"Invalid Option\\\");\\n\\n        INFTLending.LoanDetails memory loanDetails = INFTLending(\\n            loanInfo.nftLending\\n        ).getLoanDetails(loanInfo.loanId);\\n        require(\\n            loanDetails.loanExpiration > block.timestamp,\\n            \\\"Loan has expired\\\"\\n        );\\n\\n        uint256 initialBalance = address(this).balance;\\n\\n        // 1. Get flash loan\\n        uint256 flashLoanRepayAmount = flashloan.borrow(loanDetails.repayAmount);\\n\\n        // 2. Repay loan\\n        loanInfo.nftLending.functionDelegateCall(abi.encodeWithSelector(INFTLending.repay.selector, loanInfo.loanId, address(this)));\\n        wasabiOption.burn(_optionId);\\n\\n        // 3. Sell NFT\\n        executeFunctions(_marketplaceCallData);\\n\\n        // Withdraw any WETH received\\n        IWETH weth = IWETH(wethAddress);\\n        uint256 wethBalance = weth.balanceOf(address(this));\\n        if (wethBalance > 0) {\\n            weth.withdraw(wethBalance);\\n        }\\n\\n        uint256 balanceChange = address(this).balance - initialBalance;\\n\\n        // 4. Repay flashloan\\n        if (balanceChange < flashLoanRepayAmount) {\\n            revert FlashLoanNotPaid();\\n        }\\n        payETH(address(flashloan), flashLoanRepayAmount);\\n\\n        // 5. Give payout\\n        uint256 payout = balanceChange - flashLoanRepayAmount;\\n        if (payout > 0) {\\n            payETH(_msgSender(), payout);\\n        }\\n\\n        emit OptionExecutedWithArbitrage(_optionId, payout);\\n    }\\n\\n    /// @inheritdoc IWasabiBNPL\\n    function rolloverOption(uint256 _optionId, address _nftLending, bytes calldata _borrowData) external payable nonReentrant {\\n        if (!addressProvider.isLending(_nftLending)) {\\n            revert InvalidParam();\\n        }\\n        require(wasabiOption.ownerOf(_optionId) == _msgSender(), \\\"Only owner can rollover option\\\");\\n\\n        LoanInfo storage loanInfo = optionToLoan[_optionId];\\n        require(loanInfo.nftLending != address(0), \\\"Invalid Option\\\");\\n\\n        INFTLending.LoanDetails memory loanDetails = INFTLending(loanInfo.nftLending).getLoanDetails(loanInfo.loanId);\\n        require(loanDetails.loanExpiration > block.timestamp,\\\"Loan has expired\\\");\\n\\n        uint256 initialBalance = address(this).balance - msg.value;\\n\\n        // 1. Get flash loan\\n        uint256 flashLoanRepayAmount = flashloan.borrow(loanDetails.repayAmount);\\n\\n        // 2. Repay loan\\n        loanInfo.nftLending.functionDelegateCall(\\n            abi.encodeWithSelector(\\n                INFTLending.repay.selector, loanInfo.loanId, address(this)));\\n        wasabiOption.burn(_optionId);\\n        emit OptionExecuted(_optionId);\\n\\n        // 3. Get loan\\n        bytes memory result = _nftLending.functionDelegateCall(\\n            abi.encodeWithSelector(\\n                INFTLending.borrow.selector, _borrowData));\\n        uint256 loanId = abi.decode(result, (uint256));\\n        uint256 newOptionId = wasabiOption.mint(_msgSender(), factory);\\n        optionToLoan[newOptionId] = LoanInfo({\\n            nftLending: _nftLending,\\n            loanId: loanId\\n        });\\n        \\n        uint256 balanceChange = address(this).balance - initialBalance;\\n\\n        // 4. Repay flashloan\\n        if (balanceChange < flashLoanRepayAmount) {\\n            revert FlashLoanNotPaid();\\n        }\\n        payETH(address(flashloan), flashLoanRepayAmount);\\n\\n        // 5. Give payout\\n        uint256 payout = balanceChange - flashLoanRepayAmount;\\n        if (payout > 0) {\\n            payETH(_msgSender(), payout);\\n        }\\n\\n        emit OptionRolledOver(newOptionId, _optionId, payout);\\n    }\\n\\n    // Helper Functions \\n\\n    /// @dev Withdraws any stuck ETH in this contract\\n    function withdrawETH(uint256 _amount) external payable onlyOwner {\\n        if (_amount > address(this).balance) {\\n            _amount = address(this).balance;\\n        }\\n        payETH(owner(), _amount);\\n    }\\n\\n    /// @dev Withdraws any stuck ERC20 in this contract\\n    function withdrawERC20(IERC20 _token, uint256 _amount) external onlyOwner {\\n        _token.safeTransfer(_msgSender(), _amount);\\n    }\\n\\n    /// @dev Withdraws any stuck ERC721 in this contract\\n    function withdrawERC721(\\n        IERC721 _token,\\n        uint256 _tokenId\\n    ) external onlyOwner {\\n        _token.safeTransferFrom(address(this), owner(), _tokenId);\\n    }\\n\\n\\n    /// @notice Executes a given list of functions\\n    /// @param _marketplaceCallData List of marketplace calldata\\n    function executeFunctions(FunctionCallData[] memory _marketplaceCallData) internal {\\n        uint256 length = _marketplaceCallData.length;\\n        for (uint256 i; i != length; ++i) {\\n            _marketplaceCallData[i].to.functionCallWithValue(_marketplaceCallData[i].data, _marketplaceCallData[i].value);\\n        }\\n    }\\n\\n    /// @notice Validates if the FunctionCallData list has been approved\\n    /// @param _marketplaceCallData List of marketplace calldata\\n    /// @param _signatures Signatures\\n    function validate(\\n        FunctionCallData[] calldata _marketplaceCallData,\\n        bytes[] calldata _signatures\\n    ) internal view {\\n        uint256 calldataLength = _marketplaceCallData.length;\\n        require(calldataLength > 0, \\\"Need marketplace calls\\\");\\n        require(calldataLength == _signatures.length, \\\"Length is invalid\\\");\\n        for (uint256 i; i != calldataLength; ++i) {\\n            bytes32 ethSignedMessageHash = Signing.getEthSignedMessageHash(\\n                getMessageHash(_marketplaceCallData[i])\\n            );\\n            require(\\n                Signing.recoverSigner(ethSignedMessageHash, _signatures[i]) ==\\n                    owner(),\\n                \\\"Owner is not signer\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns the message hash for the given _data\\n    function getMessageHash(\\n        FunctionCallData calldata _data\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encode(_data.to, _data.value, _data.data));\\n    }\\n\\n    function onERC721Received(\\n        address /* operator */,\\n        address /* from */,\\n        uint256 /* tokenId */,\\n        bytes memory /* data */\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// Pays ETH to the target\\n    /// @param _target the target address\\n    /// @param _amount the amount to pay\\n    function payETH(address _target, uint256 _amount) private {\\n        (bool sent, ) = payable(_target).call{value: _amount}(\\\"\\\");\\n        if (!sent) {\\n            revert EthTransferFailed();\\n        }\\n    }\\n\\n    /// Receive function\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Signing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {WasabiStructs} from \\\"./WasabiStructs.sol\\\";\\n\\n/**\\n * @dev Signature Verification\\n */\\nlibrary Signing {\\n\\n    /**\\n     * @dev Returns the message hash for the given request\\n     */\\n    function getMessageHash(WasabiStructs.PoolAsk calldata _request) internal pure returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                _request.id,\\n                _request.poolAddress,\\n                _request.optionType,\\n                _request.strikePrice,\\n                _request.premium,\\n                _request.expiry,\\n                _request.tokenId,\\n                _request.orderExpiry));\\n    }\\n\\n    /**\\n     * @dev Returns the message hash for the given request\\n     */\\n    function getAskHash(WasabiStructs.Ask calldata _ask) internal pure returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                _ask.id,\\n                _ask.price,\\n                _ask.tokenAddress,\\n                _ask.orderExpiry,\\n                _ask.seller,\\n                _ask.optionId));\\n    }\\n\\n    function getBidHash(WasabiStructs.Bid calldata _bid) internal pure returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                _bid.id,\\n                _bid.price,\\n                _bid.tokenAddress,\\n                _bid.collection,\\n                _bid.orderExpiry,\\n                _bid.buyer,\\n                _bid.optionType,\\n                _bid.strikePrice,\\n                _bid.expiry,\\n                _bid.expiryAllowance));\\n    }\\n\\n    /**\\n     * @dev creates an ETH signed message hash\\n     */\\n    function getEthSignedMessageHash(bytes32 _messageHash) internal pure returns (bytes32) {\\n        /*\\n        Signature is produced by signing a keccak256 hash with the following format:\\n        \\\"\\\\x19Ethereum Signed Message\\\\n\\\" + len(msg) + msg\\n        */\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n    }\\n\\n    function getSigner(\\n        WasabiStructs.PoolAsk calldata _request,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        bytes32 messageHash = getMessageHash(_request);\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        return recoverSigner(ethSignedMessageHash, signature);\\n    }\\n\\n    function getAskSigner(\\n        WasabiStructs.Ask calldata _ask,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        bytes32 messageHash = getAskHash(_ask);\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        return recoverSigner(ethSignedMessageHash, signature);\\n    }\\n\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/WasabiStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nlibrary WasabiStructs {\\n    enum OptionType {\\n        CALL,\\n        PUT\\n    }\\n\\n    struct OptionData {\\n        bool active;\\n        OptionType optionType;\\n        uint256 strikePrice;\\n        uint256 expiry;\\n        uint256 tokenId; // Locked token for CALL options\\n    }\\n\\n    struct PoolAsk {\\n        uint256 id;\\n        address poolAddress;\\n        OptionType optionType;\\n        uint256 strikePrice;\\n        uint256 premium;\\n        uint256 expiry;\\n        uint256 tokenId; // Token to lock for CALL options\\n        uint256 orderExpiry;\\n    }\\n\\n    struct PoolBid {\\n        uint256 id;\\n        uint256 price;\\n        address tokenAddress;\\n        uint256 orderExpiry;\\n        uint256 optionId;\\n    }\\n\\n    struct Bid {\\n        uint256 id;\\n        uint256 price;\\n        address tokenAddress;\\n        address collection;\\n        uint256 orderExpiry;\\n        address buyer;\\n        OptionType optionType;\\n        uint256 strikePrice;\\n        uint256 expiry;\\n        uint256 expiryAllowance;\\n        address optionTokenAddress;\\n    }\\n\\n    struct Ask {\\n        uint256 id;\\n        uint256 price;\\n        address tokenAddress;\\n        uint256 orderExpiry;\\n        address seller;\\n        uint256 optionId;\\n    }\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IWasabiOption\",\"name\":\"_wasabiOption\",\"type\":\"address\"},{\"internalType\":\"contract IFlashloan\",\"name\":\"_flashloan\",\"type\":\"address\"},{\"internalType\":\"contract ILendingAddressProvider\",\"name\":\"_addressProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EthTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashLoanNotPaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"OptionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"OptionExecutedWithArbitrage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"OptionIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousOptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"OptionRolledOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract ILendingAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftLending\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_borrowData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_flashLoanAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IWasabiBNPL.FunctionCallData[]\",\"name\":\"_marketplaceCallData\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"bnpl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"executeOption\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IWasabiBNPL.FunctionCallData[]\",\"name\":\"_marketplaceCallData\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"}],\"name\":\"executeOptionWithArbitrage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashloan\",\"outputs\":[{\"internalType\":\"contract IFlashloan\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IWasabiBNPL.FunctionCallData\",\"name\":\"_data\",\"type\":\"tuple\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"}],\"name\":\"getOptionData\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"enum WasabiStructs.OptionType\",\"name\":\"optionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct WasabiStructs.OptionData\",\"name\":\"optionData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optionToLoan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftLending\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_optionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftLending\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_borrowData\",\"type\":\"bytes\"}],\"name\":\"rolloverOption\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wasabiOption\",\"outputs\":[{\"internalType\":\"contract IWasabiOption\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WasabiBNPL2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000fc68f2130e094c95b6c4f5494158cbeb172e18a0000000000000000000000000001a05856e823efdb78ddcf0cf209f69dd6e6f3d000000000000000000000000c399616937ebace9e45159a60cd77663c4a30e79000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000008e2b50413a53f50e2a059142a9be060294961e40", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}