{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RafldexCryptoCoins.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract RafldexCryptoCoins_V1_1 is Ownable, ReentrancyGuard, VRFConsumerBaseV2 {\\n    VRFCoordinatorV2Interface COORDINATOR;\\n    LinkTokenInterface LINKTOKEN;\\n    address constant vrfCoordinator =\\n        0x271682DEB8C4E0901D1a1550aD2e64D568E69909;\\n    address constant link_token_contract =\\n        0x514910771AF9Ca656af840dff83E8264EcF986CA;\\n    bytes32 private keyHash =\\n        0x8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef;\\n\\n    uint16 private requestConfirmations = 3;\\n    uint32 private callbackGasLimit = 2500000;\\n    uint32 private numWords = 1;\\n    uint64 private subscriptionId = 810;\\n\\n    struct RandomResult {\\n        uint256 randomNumber;\\n        uint256 nomalizedRandomNumber;\\n    }\\n    struct RaffleInfo {\\n        uint256 id;\\n        uint256 size;\\n    }\\n\\n    mapping(uint256 => RandomResult) public requests;\\n    mapping(uint256 => RaffleInfo) public chainlinkRaffleInfo;\\n\\n    event GotSubscription(address _address);\\n    event TokenAdded(address _address);\\n    event CollectionWhitelisted(address _collection, uint256 _rafflesnumber);\\n    event UserBlacklisted(address _address);\\n    event AddedTokenPayment(address _address);\\n    event RequestFulfilled(\\n        uint256 requestId,\\n        uint256 randomNumber,\\n        uint256 indexed raffleId\\n    );\\n    event RequestSent(uint256 requestId, uint32 numWords);\\n    event RaffleCreated(\\n        uint256 indexed raffleId,\\n        address[] coinAddress,\\n        uint256[] amount\\n    );\\n    event RaffleDrawn(\\n        uint256 indexed raffleId,\\n        address indexed winner,\\n        uint256 amountRaised,\\n        uint256 randomNumber\\n    );\\n    event EntryBought(\\n        uint256 indexed raffleId,\\n        address indexed buyer,\\n        uint256 currentSize,\\n        uint256 numberEntries\\n    );\\n\\n    event RaffleSetNotToCancel(uint256 indexed raffleId, address creator);\\n\\n    event RaffleCancelled(uint256 indexed raffleId, uint256 amountRaised);\\n    event SetWinnerTriggered(uint256 indexed raffleId, uint256 amountRaised);\\n\\n    struct EntriesBought {\\n        address player;\\n        uint256 currentEntriesLength;\\n        uint256 entries;\\n    }\\n    mapping(uint256 => EntriesBought[]) public entriesList;\\n\\n    enum STATUS {\\n        CREATED,\\n        PENDING_DRAW,\\n        DRAWING,\\n        DRAWN,\\n        CANCELLED\\n    }\\n\\n    struct RaffleStruct {\\n        STATUS status;\\n        uint256 endTime;\\n        address[] collateralAddress;\\n        uint256[] collateralAmount;\\n        uint256 entriesSupply;\\n        uint256 pricePerEntry;\\n        uint256 maxEntriesUser;\\n        address winner;\\n        uint256 randomNumber;\\n        address creator;\\n        uint256 platformPercentage;\\n        address tokenPayment;\\n        uint256 entriesSold;\\n        bool canCancel;\\n    }\\n\\n    RaffleStruct[] public raffles;\\n\\n    struct RaffleCreationHolder {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 countRaffles;\\n    }\\n\\n    mapping(bytes32 => RaffleCreationHolder) public raffleCreationData;\\n    mapping(address => uint256) public numberRafflesMonthCollection;\\n    mapping(bytes32 => uint256) public entriesInfo;\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR\\\");\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    address payable private platformWallet =\\n        payable(0x2300Ae69d7D1Ea0457aD79e822422888e3Ee3e87);\\n\\n    uint256 public CHAINLINK_RAFFLE_FEE = 0.015 ether;\\n    uint256 public HOLDER_CREATE_RAFFLE_FEE = 0.02 ether;\\n    uint256 public HOLDER_CREATE_RAFFLE_FEE_DISCOUNT = 0.01 ether;\\n    uint256 public CANCELATION_RAFFLE_FEE_BASE = 0.03 ether;\\n    uint256 public COMMISSION_HOLDERS = 500; //5 %\\n    uint256 public COMMISSION_HOLDERS_DISCOUNT = 350; //3.5%\\n    uint256 public COMMISSION_SUBSCRIBERS = 300; //3%\\n    uint256 public COMMISSION_SUBSCRIBERS_DISCOUNT = 150; //1.5%\\n\\n    mapping(address => bool) public Subscribers;\\n    mapping(address => bool) public TokenAddresses;\\n    mapping(address => bool) public TokenPaymentAddresses;\\n    mapping(address => bool) public DiscountTokenPayments;\\n\\n    bool public createEnabledHolders = true;\\n    bool public createEnabledSubscribers = true;\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    constructor() VRFConsumerBaseV2(vrfCoordinator) {\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n        LINKTOKEN = LinkTokenInterface(link_token_contract);\\n        _setupRole(OPERATOR_ROLE, msg.sender);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    modifier onlyRole(bytes32 role, address account) {\\n        _checkRole(role, account);\\n        _;\\n    }\\n\\n    function createRaffleOperator(\\n        uint256 _endTime,\\n        address[] memory _collateralAddress,\\n        uint256[] memory _collateralAmount,\\n        address _tokenPayment,\\n        uint256 _pricePerEntry,\\n        uint256 _maxEntriesRaffle,\\n        uint256 _maxEntriesUser\\n    ) external payable onlyRole(OPERATOR_ROLE, msg.sender) returns (uint256) {\\n        require(\\n            _endTime > getCurrentTime(),\\n            \\\"End time can't be < as current time.\\\"\\n        );\\n        require(_maxEntriesRaffle > 0, \\\"No entries\\\");\\n        require(\\n            _maxEntriesUser > 0 && _maxEntriesUser <= _maxEntriesRaffle,\\n            \\\"Min entries user > 0 and <= max entries raffle\\\"\\n        );\\n        require(\\n            _collateralAddress.length == _collateralAmount.length,\\n            \\\"Require same length\\\"\\n        );\\n\\n        if (_tokenPayment != address(0)) {\\n            require(\\n                TokenPaymentAddresses[_tokenPayment],\\n                \\\"Token Address not added \\\"\\n            );\\n        }\\n        uint256 totalEth;\\n        for (uint256 i = 0; i < _collateralAddress.length; i++) {\\n            require(_collateralAmount[i] > 0, \\\"Amount can't be null\\\");\\n            if (_collateralAddress[i] == address(0)) {\\n                totalEth += _collateralAmount[i];\\n            } else {\\n                require(\\n                    TokenAddresses[_collateralAddress[i]],\\n                    \\\"Token Address not added \\\"\\n                );\\n                /*\\n                require(\\n                    IERC20(_collateralAddress[i]).balanceOf(msg.sender) >=\\n                        _collateralAmount[i],\\n                    \\\"Need to have in wallet equal or more than ERC20 Token price\\\"\\n                );*/\\n                safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _collateralAddress[i],\\n                    _collateralAmount[i]\\n                );\\n            }\\n        }\\n\\n        require(msg.value == totalEth, \\\"Total mismatched\\\");\\n\\n        uint256 _commissionInBasicPoints = 0;\\n\\n        RaffleStruct memory raffle = RaffleStruct({\\n            status: STATUS.CREATED,\\n            endTime: _endTime,\\n            collateralAddress: _collateralAddress,\\n            collateralAmount: _collateralAmount,\\n            pricePerEntry: _pricePerEntry,\\n            entriesSupply: _maxEntriesRaffle,\\n            maxEntriesUser: _maxEntriesUser,\\n            winner: address(0),\\n            randomNumber: 0,\\n            creator: msg.sender,\\n            platformPercentage: _commissionInBasicPoints,\\n            tokenPayment: _tokenPayment,\\n            entriesSold: 0,\\n            canCancel: true\\n        });\\n\\n        raffles.push(raffle);\\n\\n        uint256 idRaffle = raffles.length - 1;\\n\\n        EntriesBought memory entryBought = EntriesBought({\\n            player: address(0),\\n            currentEntriesLength: 0,\\n            entries: 0\\n        });\\n        entriesList[idRaffle].push(entryBought);\\n\\n        delete entriesList[idRaffle][0];\\n\\n        emit RaffleCreated(idRaffle, _collateralAddress, _collateralAmount);\\n        return idRaffle;\\n    }\\n\\n    function createRaffleSubscriber(\\n        uint256 _endTime,\\n        address[] memory _collateralAddress,\\n        uint256[] memory _collateralAmount,\\n        address _tokenPayment,\\n        uint256 _pricePerEntry,\\n        uint256 _maxEntriesRaffle,\\n        uint256 _maxEntriesUser\\n    ) external payable nonReentrant returns (uint256) {\\n        require(\\n            _endTime > getCurrentTime(),\\n            \\\"End time can't be < as current time.\\\"\\n        );\\n        require(\\n            createEnabledSubscribers,\\n            \\\"Create raffle noot set for subscribers.\\\"\\n        );\\n        require(\\n            Subscribers[msg.sender],\\n            \\\"Need to be subscriber to create raffle.\\\"\\n        );\\n        require(msg.value >= CHAINLINK_RAFFLE_FEE, \\\"Invalid funds provided\\\");\\n\\n        require(_maxEntriesRaffle > 0, \\\"No entries\\\");\\n        require(\\n            _maxEntriesUser > 0 && _maxEntriesUser <= _maxEntriesRaffle,\\n            \\\"Min entries user > 0 and <= max entries raffle\\\"\\n        );\\n        require(\\n            _collateralAddress.length == _collateralAmount.length,\\n            \\\"Require same length\\\"\\n        );\\n\\n        if (_tokenPayment != address(0)) {\\n            require(\\n                TokenPaymentAddresses[_tokenPayment],\\n                \\\"Token Address not added \\\"\\n            );\\n        }\\n        uint256 totalEth;\\n        for (uint256 i = 0; i < _collateralAddress.length; i++) {\\n            require(_collateralAmount[i] > 0, \\\"Amount can't be null\\\");\\n            if (_collateralAddress[i] == address(0)) {\\n                totalEth += _collateralAmount[i];\\n            } else {\\n                require(\\n                    TokenAddresses[_collateralAddress[i]],\\n                    \\\"Token Address not added \\\"\\n                );\\n                /*\\n                require(\\n                    IERC20(_collateralAddress[i]).balanceOf(msg.sender) >=\\n                        _collateralAmount[i],\\n                    \\\"Need to have in wallet equal or more than ERC20 Token price\\\"\\n                );*/\\n                safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _collateralAddress[i],\\n                    _collateralAmount[i]\\n                );\\n            }\\n        }\\n        require(msg.value >= totalEth + CHAINLINK_RAFFLE_FEE , \\\"Total mismatched\\\");\\n\\n        uint256 _commissionInBasicPoints = 0;\\n\\n        if (DiscountTokenPayments[_tokenPayment]) {\\n            _commissionInBasicPoints = COMMISSION_SUBSCRIBERS_DISCOUNT;\\n        } else {\\n            _commissionInBasicPoints = COMMISSION_SUBSCRIBERS;\\n        }\\n        platformWallet.transfer(CHAINLINK_RAFFLE_FEE);\\n\\n        RaffleStruct memory raffle = RaffleStruct({\\n            status: STATUS.CREATED,\\n            endTime: _endTime,\\n            collateralAddress: _collateralAddress,\\n            collateralAmount: _collateralAmount,\\n            pricePerEntry: _pricePerEntry,\\n            entriesSupply: _maxEntriesRaffle,\\n            maxEntriesUser: _maxEntriesUser,\\n            winner: address(0),\\n            randomNumber: 0,\\n            creator: msg.sender,\\n            platformPercentage: _commissionInBasicPoints,\\n            tokenPayment: _tokenPayment,\\n            entriesSold: 0,\\n            canCancel: true\\n        });\\n\\n        raffles.push(raffle);\\n\\n        uint256 idRaffle = raffles.length - 1;\\n\\n        EntriesBought memory entryBought = EntriesBought({\\n            player: address(0),\\n            currentEntriesLength: 0,\\n            entries: 0\\n        });\\n        entriesList[idRaffle].push(entryBought);\\n\\n        delete entriesList[idRaffle][0];\\n\\n        emit RaffleCreated(idRaffle, _collateralAddress, _collateralAmount);\\n        return idRaffle;\\n    }\\n\\n    function createRaffleHolder(\\n        address createRaffleCollection,\\n        uint256 createRaffleTokenId,\\n        uint256 _endTime,\\n        address[] memory _collateralAddress,\\n        uint256[] memory _collateralAmount,\\n        address _tokenPayment,\\n        uint256 _pricePerEntry,\\n        uint256 _maxEntriesRaffle,\\n        uint256 _maxEntriesUser\\n    ) external payable nonReentrant returns (uint256) {\\n        require(\\n            _endTime > getCurrentTime(),\\n            \\\"End time can't be < as current time.\\\"\\n        );\\n        require(createEnabledHolders, \\\"Create raffle not set for holders.\\\");\\n\\n        require(_maxEntriesRaffle > 0, \\\"No entries\\\");\\n        require(\\n            _maxEntriesUser > 0 && _maxEntriesUser <= _maxEntriesRaffle,\\n            \\\"Min entries user > 0 and <= max entries raffle\\\"\\n        );\\n        require(\\n            _collateralAddress.length == _collateralAmount.length,\\n            \\\"Require same length\\\"\\n        );\\n\\n        if (_tokenPayment != address(0)) {\\n            require(\\n                TokenPaymentAddresses[_tokenPayment],\\n                \\\"Token Address not added \\\"\\n            );\\n        }\\n\\n\\n        IERC721 createraffleNFT = IERC721(createRaffleCollection);\\n        require(\\n            createraffleNFT.ownerOf(createRaffleTokenId) == msg.sender,\\n            \\\"Not the owner of tokenId\\\"\\n        );\\n\\n        bytes32 hash = keccak256(\\n            abi.encode(createRaffleCollection, createRaffleTokenId)\\n        );\\n\\n        if (raffleCreationData[hash].endTime > getCurrentTime()) {\\n            require(\\n                numberRafflesRemainingPerNFT(\\n                    createRaffleCollection,\\n                    createRaffleTokenId\\n                ) > 0,\\n                \\\"Created too many raffles with your NFT you hold.\\\"\\n            );\\n            raffleCreationData[hash].countRaffles++;\\n        } else {\\n            raffleCreationData[hash].startTime = getCurrentTime();\\n            raffleCreationData[hash].endTime = getCurrentTime() + 30 days;\\n            raffleCreationData[hash].countRaffles = 1;\\n        }\\n\\n        uint256 totalEth;\\n        for (uint256 i = 0; i < _collateralAddress.length; i++) {\\n            require(_collateralAmount[i] > 0, \\\"Amount can't be null\\\");\\n            if (_collateralAddress[i] == address(0)) {\\n                totalEth += _collateralAmount[i];\\n            } else {\\n                require(\\n                    TokenAddresses[_collateralAddress[i]],\\n                    \\\"Token Address not added \\\"\\n                );\\n                /*\\n                require(\\n                    IERC20(_collateralAddress[i]).balanceOf(msg.sender) >=\\n                        _collateralAmount[i],\\n                    \\\"Need to have in wallet equal or more than ERC20 Token price\\\"\\n                );*/\\n                safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _collateralAddress[i],\\n                    _collateralAmount[i]\\n                );\\n            }\\n        }\\n\\n\\n       uint256 _commissionInBasicPoints = 0;\\n        if (DiscountTokenPayments[_tokenPayment]) {\\n            require(\\n                msg.value >=\\n                    HOLDER_CREATE_RAFFLE_FEE_DISCOUNT + CHAINLINK_RAFFLE_FEE + totalEth,\\n                \\\"Invalid funds provided\\\"\\n            );\\n            platformWallet.transfer(HOLDER_CREATE_RAFFLE_FEE_DISCOUNT + CHAINLINK_RAFFLE_FEE);\\n\\n            _commissionInBasicPoints = COMMISSION_HOLDERS_DISCOUNT;\\n        } else {\\n            require(\\n                msg.value >= HOLDER_CREATE_RAFFLE_FEE + CHAINLINK_RAFFLE_FEE + totalEth,\\n                \\\"Invalid funds provided\\\"\\n            );\\n            platformWallet.transfer(HOLDER_CREATE_RAFFLE_FEE + CHAINLINK_RAFFLE_FEE);\\n\\n            _commissionInBasicPoints = COMMISSION_HOLDERS;\\n        }\\n\\n\\n        RaffleStruct memory raffle = RaffleStruct({\\n            status: STATUS.CREATED,\\n            endTime: _endTime,\\n            collateralAddress: _collateralAddress,\\n            collateralAmount: _collateralAmount,\\n            pricePerEntry: _pricePerEntry,\\n            entriesSupply: _maxEntriesRaffle,\\n            maxEntriesUser: _maxEntriesUser,\\n            winner: address(0),\\n            randomNumber: 0,\\n            creator: msg.sender,\\n            platformPercentage: _commissionInBasicPoints,\\n            tokenPayment: _tokenPayment,\\n            entriesSold: 0,\\n            canCancel: true\\n        });\\n\\n        raffles.push(raffle);\\n\\n        uint256 idRaffle = raffles.length - 1;\\n\\n        EntriesBought memory entryBought = EntriesBought({\\n            player: address(0),\\n            currentEntriesLength: 0,\\n            entries: 0\\n        });\\n        entriesList[idRaffle].push(entryBought);\\n\\n        delete entriesList[idRaffle][0];\\n\\n        emit RaffleCreated(idRaffle, _collateralAddress, _collateralAmount);\\n        return idRaffle;\\n    }\\n\\n    function buyEntry(\\n        uint256 _raffleId,\\n        uint256 _numberEntries,\\n        address _user\\n    ) external payable {\\n        RaffleStruct storage raffle = raffles[_raffleId];\\n\\n        require(raffle.endTime > getCurrentTime(), \\\"Raffle Closed on time\\\");\\n        require(raffle.status == STATUS.CREATED, \\\"Raffle is not in CREATED\\\");\\n        require(\\n            _numberEntries > 0 && _numberEntries <= raffle.maxEntriesUser,\\n            \\\"Number entries can't be 0 or more than max entries per user.\\\"\\n        );\\n        require(_user != address(0), \\\"Address cant't be null address\\\");\\n        require(\\n            raffle.entriesSold + _numberEntries <=\\n                raffles[_raffleId].entriesSupply,\\n            \\\"Raffle has reached max entries\\\"\\n        );\\n\\n        if (raffle.tokenPayment == address(0)) {\\n            require(\\n                msg.value == raffle.pricePerEntry * _numberEntries,\\n                \\\"msg.value must be equal to the price\\\"\\n            );\\n        } else {\\n            /*\\n            require(\\n                IERC20(raffle.tokenPayment).balanceOf(msg.sender) >=\\n                    raffle.pricePerEntry * _numberEntries,\\n                \\\"Need to have in wallet equal or more than ERC20 Token price\\\"\\n            );*/\\n            IERC20(raffle.tokenPayment).transferFrom(\\n                msg.sender,\\n                address(this),\\n                raffle.pricePerEntry * _numberEntries\\n            );\\n        }\\n\\n        bytes32 hash = keccak256(abi.encode(msg.sender, _raffleId));\\n        require(\\n            entriesInfo[hash] + _numberEntries <= raffle.maxEntriesUser,\\n            \\\"Max entries user reached.\\\"\\n        );\\n\\n        entriesInfo[hash] += _numberEntries;\\n        EntriesBought memory entryBought = EntriesBought({\\n            player: _user,\\n            currentEntriesLength: uint256(raffle.entriesSold + _numberEntries),\\n            entries: _numberEntries\\n        });\\n        entriesList[_raffleId].push(entryBought);\\n        raffle.entriesSold += _numberEntries;\\n\\n        emit EntryBought(_raffleId, _user, raffle.entriesSold, _numberEntries);\\n    }\\n\\n    function getCurrentTime() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function addorRemoveTokens(address[] memory _addresses, bool _isAdded)\\n        external\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n    {\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            TokenAddresses[_addresses[i]] = _isAdded;\\n            if (_isAdded == true) {\\n                emit TokenAdded(_addresses[i]);\\n            }\\n        }\\n    }\\n\\n    function giveorRemoveSubscriptionTo(\\n        address[] memory _addresses,\\n        bool _isSubscriber\\n    ) external onlyRole(OPERATOR_ROLE, msg.sender) {\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            Subscribers[_addresses[i]] = _isSubscriber;\\n            if (_isSubscriber == true) {\\n                emit GotSubscription(_addresses[i]);\\n            }\\n        }\\n    }\\n\\n    function ChangeCancellationFeeBase(uint256 _fee)\\n        external\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n    {\\n        CANCELATION_RAFFLE_FEE_BASE = _fee;\\n    }\\n\\n    function ChangeSubscriptionId(uint64 _id)\\n        external\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n    {\\n        subscriptionId = _id;\\n    }\\n\\n    function ChangecallbackGasLimit(uint32 _number)\\n        external\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n    {\\n        callbackGasLimit = _number;\\n    }\\n\\n    function ChangeKeyHash(bytes32 _hash)\\n        external\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n    {\\n        keyHash = _hash;\\n    }\\n\\n    function setNumberRafflesCollectionWhitelistedPerMonth(\\n        address _collection,\\n        uint256 _rafflesnumber\\n    ) external onlyRole(OPERATOR_ROLE, msg.sender) {\\n        numberRafflesMonthCollection[_collection] = _rafflesnumber;\\n        emit CollectionWhitelisted(_collection, _rafflesnumber);\\n    }\\n\\n    function ChangeUserHolderCreateRaffleFee(uint256 _rafflefee)\\n        external\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n    {\\n        HOLDER_CREATE_RAFFLE_FEE = _rafflefee;\\n    }\\n\\n    function ChangeUserHolderCreateRaffleFeeDiscount(uint256 _rafflefee)\\n        external\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n    {\\n        HOLDER_CREATE_RAFFLE_FEE_DISCOUNT = _rafflefee;\\n    }\\n\\n    function numberRafflesRemainingPerNFT(\\n        address _collectionaddress,\\n        uint256 _tokenid\\n    ) public view returns (uint256) {\\n        uint256 numberRafflesNFT = 0;\\n        if (numberRafflesMonthCollection[_collectionaddress] > 0) {\\n            bytes32 hashNFT = keccak256(\\n                abi.encode(_collectionaddress, _tokenid)\\n            );\\n            numberRafflesNFT =\\n                numberRafflesMonthCollection[_collectionaddress] -\\n                raffleCreationData[hashNFT].countRaffles;\\n        }\\n        return numberRafflesNFT;\\n    }\\n\\n    function changePlatformWalletAddress(address payable _address)\\n        external\\n        onlyOwner\\n    {\\n        platformWallet = _address;\\n    }\\n\\n    function getEntriesBought(uint256 _raffleId)\\n        public\\n        view\\n        returns (EntriesBought[] memory)\\n    {\\n        return entriesList[_raffleId];\\n    }\\n\\n    function addTokenPayments(address[] memory _address, bool _isAdded)\\n        external\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n    {\\n        for (uint256 i = 0; i < _address.length; i++) {\\n            TokenPaymentAddresses[_address[i]] = _isAdded;\\n            if (_isAdded == true) {\\n                emit AddedTokenPayment(_address[i]);\\n            }\\n        }\\n    }\\n\\n    function addDiscountTokenPayment(address _address, bool _isAdded)\\n        external\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n    {\\n        DiscountTokenPayments[_address] = _isAdded;\\n    }\\n\\n    function toggleCreateHoldersEnabled()\\n        external\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n    {\\n        createEnabledHolders = !createEnabledHolders;\\n    }\\n\\n    function toggleCreateSubscribersEnabled()\\n        external\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n    {\\n        createEnabledSubscribers = !createEnabledSubscribers;\\n    }\\n\\n    function getWinnerAddressFromRandom(\\n        uint256 _raffleId,\\n        uint256 _normalizedRandomNumber\\n    ) public view returns (address) {\\n        address winner;\\n        EntriesBought[] storage entries = entriesList[_raffleId];\\n        for (uint256 i = 0; i < entries.length; i++) {\\n            uint256 entriesIndex = entries[i].currentEntriesLength;\\n            if (entriesIndex >= _normalizedRandomNumber) {\\n                winner = entries[i].player;\\n                break;\\n            }\\n        }\\n        require(winner != address(0), \\\"Winner not found\\\");\\n        return winner;\\n    }\\n\\n    function requestRandomWords(uint256 _id, uint256 _entriesSold)\\n        internal\\n        returns (uint256 requestId)\\n    {\\n        requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n\\n        chainlinkRaffleInfo[requestId] = RaffleInfo({\\n            id: _id,\\n            size: _entriesSold\\n        });\\n        RaffleStruct storage raffle = raffles[_id];\\n        raffle.status = STATUS.DRAWING;\\n\\n        emit RequestSent(requestId, numWords);\\n\\n        return requestId;\\n    }\\n\\n    function requestRandomWordsRetry(uint256 _id)\\n        external\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n        returns (uint256 requestId)\\n    {\\n        RaffleStruct storage raffle = raffles[_id];\\n\\n        requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n\\n        chainlinkRaffleInfo[requestId] = RaffleInfo({\\n            id: _id,\\n            size: raffle.entriesSold\\n        });\\n        raffle.status = STATUS.DRAWING;\\n\\n        emit RequestSent(requestId, numWords);\\n\\n        return requestId;\\n    }\\n\\n    function transferNFTsAndFunds(\\n        uint256 _raffleId,\\n        uint256 _normalizedRandomNumber\\n    ) internal nonReentrant {\\n        RaffleStruct storage raffle = raffles[_raffleId];\\n        raffle.randomNumber = _normalizedRandomNumber;\\n        raffle.winner = (raffle.entriesSold == 0)\\n            ? raffle.creator\\n            : getWinnerAddressFromRandom(_raffleId, _normalizedRandomNumber);\\n\\n        safeMultipleTransfersFrom(\\n            address(this),\\n            raffle.winner,\\n            raffle.collateralAddress,\\n            raffle.collateralAmount\\n        );\\n\\n        uint256 amountRaised = raffle.entriesSold * raffle.pricePerEntry;\\n        uint256 amountForPlatform = (amountRaised * raffle.platformPercentage) /\\n            10000;\\n        uint256 amountForSeller = amountRaised - amountForPlatform;\\n\\n        if (raffle.tokenPayment == address(0)) {\\n            (bool sent, ) = raffle.creator.call{value: amountForSeller}(\\\"\\\");\\n            require(sent, \\\"Failed to send Eth\\\");\\n\\n            (bool sent2, ) = platformWallet.call{value: amountForPlatform}(\\\"\\\");\\n            require(sent2, \\\"Failed send Eth to Platform\\\");\\n        } else {\\n            IERC20(raffle.tokenPayment).approve(address(this), amountRaised);\\n            bool sent = IERC20(raffle.tokenPayment).transferFrom(\\n                address(this),\\n                raffle.creator,\\n                amountForSeller\\n            );\\n            require(sent, \\\"Failed to send ERC20 Token\\\");\\n            bool sent2 = IERC20(raffle.tokenPayment).transferFrom(\\n                address(this),\\n                platformWallet,\\n                amountForPlatform\\n            );\\n            require(sent2, \\\"Failed to send ERC20 Token to platform\\\");\\n        }\\n        raffle.status = STATUS.DRAWN;\\n\\n        emit RaffleDrawn(\\n            _raffleId,\\n            raffle.winner,\\n            amountRaised,\\n            raffle.randomNumber\\n        );\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        uint256 normalizedRandomNumber = (_randomWords[0] %\\n            chainlinkRaffleInfo[_requestId].size) + 1;\\n        RaffleStruct storage raffle = raffles[\\n            chainlinkRaffleInfo[_requestId].id\\n        ];\\n\\n        raffle.randomNumber = normalizedRandomNumber;\\n\\n        RandomResult memory result = RandomResult({\\n            randomNumber: _randomWords[0],\\n            nomalizedRandomNumber: normalizedRandomNumber\\n        });\\n\\n        requests[chainlinkRaffleInfo[_requestId].id] = result;\\n\\n        emit RequestFulfilled(\\n            _requestId,\\n            normalizedRandomNumber,\\n            chainlinkRaffleInfo[_requestId].id\\n        );\\n        transferNFTsAndFunds(\\n            chainlinkRaffleInfo[_requestId].id,\\n            normalizedRandomNumber\\n        );\\n    }\\n\\n    function setWinnerRaffle(uint256 _raffleId) external nonReentrant {\\n        RaffleStruct storage raffle = raffles[_raffleId];\\n        require(\\n            raffle.creator == msg.sender || hasRole(OPERATOR_ROLE, msg.sender),\\n            \\\"Not raffle creator or operator.\\\"\\n        );\\n        if (\\n            hasRole(OPERATOR_ROLE, msg.sender) && raffle.creator != msg.sender\\n        ) {\\n            require(\\n                raffle.entriesSold == raffle.entriesSupply ||\\n                    raffle.endTime <= getCurrentTime(),\\n                \\\"Raffle still opened or not sold out\\\"\\n            );\\n        }\\n        require(raffle.status == STATUS.CREATED, \\\"Raffle in wrong status\\\");\\n        raffle.status = STATUS.PENDING_DRAW;\\n        uint256 entriesSold = raffle.entriesSold;\\n        uint256 amountRaised = entriesSold * raffle.pricePerEntry;\\n        if (entriesSold == 0) {\\n            raffle.status = STATUS.DRAWING;\\n            transferNFTsAndFunds(_raffleId, raffle.randomNumber);\\n        } else {\\n            requestRandomWords(_raffleId, entriesSold);\\n        }\\n        emit SetWinnerTriggered(_raffleId, amountRaised);\\n    }\\n\\n    function setWinnerRaffleEmergency(uint256 _raffleId)\\n        external\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n    {\\n        //function in case that chainlink vrf2 doesnt work\\n        RaffleStruct storage raffle = raffles[_raffleId];\\n\\n        if (\\n            hasRole(OPERATOR_ROLE, msg.sender) && raffle.creator != msg.sender\\n        ) {\\n            require(\\n                raffle.entriesSold == raffle.entriesSupply ||\\n                    raffle.endTime <= getCurrentTime(),\\n                \\\"Raffle still opened or not sold out\\\"\\n            );\\n        }\\n\\n        uint256 entriesSold = raffle.entriesSold;\\n\\n        bytes32 baseHash = keccak256(\\n            abi.encodePacked(\\n                block.number,\\n                block.timestamp,\\n                block.gaslimit,\\n                block.coinbase\\n            )\\n        );\\n        uint256 normalizedRandomNumber = (uint256(baseHash) % entriesSold) + 1;\\n\\n        raffle.randomNumber = normalizedRandomNumber;\\n        transferNFTsAndFunds(_raffleId, normalizedRandomNumber);\\n    }\\n\\n    function cancelRaffle(uint256 _raffleId) external payable nonReentrant {\\n        RaffleStruct storage raffle = raffles[_raffleId];\\n        require(\\n            raffle.creator == msg.sender || hasRole(OPERATOR_ROLE, msg.sender),\\n            \\\"Not raffle creator or Operator.\\\"\\n        );\\n        require(\\n            raffle.endTime > getCurrentTime(),\\n            \\\"End time can't be < as current time.\\\"\\n        );\\n        require(raffle.status == STATUS.CREATED, \\\"Wrong status\\\");\\n\\n        if (!hasRole(OPERATOR_ROLE, msg.sender)) {\\n            require(raffle.canCancel, \\\"User Can't cancel\\\");\\n            if (raffle.entriesSold == 0) {\\n                require(msg.value == 0, \\\"Not cancelation fee value.\\\");\\n            } else {\\n                require(\\n                    msg.value >= CANCELATION_RAFFLE_FEE_BASE,\\n                    \\\"Not cancelation fee value.\\\"\\n                );\\n                platformWallet.transfer(CANCELATION_RAFFLE_FEE_BASE);\\n            }\\n        }\\n\\n        uint256 txLength = entriesList[_raffleId].length;\\n        require(\\n            txLength <= 200,\\n            \\\"Not cancelation available when it's more than 200 txs.\\\"\\n        );\\n\\n        uint256 amountRaised = raffle.entriesSold * raffle.pricePerEntry;\\n\\n        if (raffle.tokenPayment == address(0)) {\\n            for (uint256 i = 0; i < txLength; i++) {\\n                address user = entriesList[_raffleId][i].player;\\n                if (user != address(0)) {\\n                    uint256 amountToSend = raffle.pricePerEntry *\\n                        entriesList[_raffleId][i].entries;\\n                    payable(user).transfer(amountToSend);\\n                }\\n            }\\n        } else {\\n            IERC20(raffle.tokenPayment).approve(address(this), amountRaised);\\n            for (uint256 i = 0; i < txLength; i++) {\\n                address user = entriesList[_raffleId][i].player;\\n                if (user != address(0)) {\\n                    uint256 amountToSend = raffle.pricePerEntry *\\n                        entriesList[_raffleId][i].entries;\\n                    IERC20(raffle.tokenPayment).transferFrom(\\n                        address(this),\\n                        user,\\n                        amountToSend\\n                    );\\n                }\\n            }\\n        }\\n\\n        safeMultipleTransfersFrom(\\n            address(this),\\n            raffle.creator,\\n            raffle.collateralAddress,\\n            raffle.collateralAmount\\n        );\\n\\n        raffle.status = STATUS.CANCELLED;\\n        emit RaffleCancelled(_raffleId, amountRaised);\\n    }\\n\\n    function safeMultipleTransfersFrom(\\n        address from,\\n        address to,\\n        address[] memory tokenAddresses,\\n        uint256[] memory tokenAmounts\\n    ) internal virtual {\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            safeTransferFrom(from, to, tokenAddresses[i], tokenAmounts[i]);\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    ) internal virtual {\\n        if (tokenAddress == address(0)) {\\n            payable(to).transfer(tokenAmount);\\n        } else {\\n            if (from == address(this)) {\\n                IERC20(tokenAddress).approve(address(this), tokenAmount);\\n            }\\n            IERC20(tokenAddress).transferFrom(from, to, tokenAmount);\\n        }\\n    }\\n\\n    function setRaffleToNotCancel(uint256 _raffleId) external nonReentrant {\\n        RaffleStruct storage raffle = raffles[_raffleId];\\n        require(raffle.creator == msg.sender, \\\"Not raffle creator.\\\");\\n        if (raffle.canCancel == true) {\\n            raffle.canCancel = false;\\n            emit RaffleSetNotToCancel(_raffleId, msg.sender);\\n        }\\n    }\\n\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    function hasRole(bytes32 role, address account)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return _roles[role].members[account];\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function grantRole(bytes32 role, address account)\\n        public\\n        virtual\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n    {\\n        _grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account)\\n        public\\n        virtual\\n        onlyRole(OPERATOR_ROLE, msg.sender)\\n    {\\n        _revokeRole(role, account);\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n        }\\n    }\\n\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddedTokenPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rafflesnumber\",\"type\":\"uint256\"}],\"name\":\"CollectionWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberEntries\",\"type\":\"uint256\"}],\"name\":\"EntryBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"GotSubscription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"RaffleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"coinAddress\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"RaffleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"RaffleDrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"RaffleSetNotToCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"SetWinnerTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"UserBlacklisted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANCELATION_RAFFLE_FEE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAINLINK_RAFFLE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMISSION_HOLDERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMISSION_HOLDERS_DISCOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMISSION_SUBSCRIBERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMISSION_SUBSCRIBERS_DISCOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"ChangeCancellationFeeBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"ChangeKeyHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"ChangeSubscriptionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rafflefee\",\"type\":\"uint256\"}],\"name\":\"ChangeUserHolderCreateRaffleFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rafflefee\",\"type\":\"uint256\"}],\"name\":\"ChangeUserHolderCreateRaffleFeeDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_number\",\"type\":\"uint32\"}],\"name\":\"ChangecallbackGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"DiscountTokenPayments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOLDER_CREATE_RAFFLE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOLDER_CREATE_RAFFLE_FEE_DISCOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Subscribers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokenAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokenPaymentAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAdded\",\"type\":\"bool\"}],\"name\":\"addDiscountTokenPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isAdded\",\"type\":\"bool\"}],\"name\":\"addTokenPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isAdded\",\"type\":\"bool\"}],\"name\":\"addorRemoveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberEntries\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"buyEntry\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"cancelRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainlinkRaffleInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changePlatformWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createEnabledHolders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createEnabledSubscribers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"createRaffleCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createRaffleTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_collateralAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_collateralAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_tokenPayment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerEntry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEntriesRaffle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEntriesUser\",\"type\":\"uint256\"}],\"name\":\"createRaffleHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_collateralAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_collateralAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_tokenPayment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerEntry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEntriesRaffle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEntriesUser\",\"type\":\"uint256\"}],\"name\":\"createRaffleOperator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_collateralAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_collateralAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_tokenPayment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerEntry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEntriesRaffle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEntriesUser\",\"type\":\"uint256\"}],\"name\":\"createRaffleSubscriber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"entriesInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"entriesList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentEntriesLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entries\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"getEntriesBought\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentEntriesLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entries\",\"type\":\"uint256\"}],\"internalType\":\"struct RafldexCryptoCoins_V1_1.EntriesBought[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_normalizedRandomNumber\",\"type\":\"uint256\"}],\"name\":\"getWinnerAddressFromRandom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isSubscriber\",\"type\":\"bool\"}],\"name\":\"giveorRemoveSubscriptionTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numberRafflesMonthCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenid\",\"type\":\"uint256\"}],\"name\":\"numberRafflesRemainingPerNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"raffleCreationData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countRaffles\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffles\",\"outputs\":[{\"internalType\":\"enum RafldexCryptoCoins_V1_1.STATUS\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entriesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerEntry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEntriesUser\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenPayment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entriesSold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canCancel\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"requestRandomWordsRetry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nomalizedRandomNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rafflesnumber\",\"type\":\"uint256\"}],\"name\":\"setNumberRafflesCollectionWhitelistedPerMonth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"setRaffleToNotCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"setWinnerRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"setWinnerRaffleEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleCreateHoldersEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleCreateSubscribersEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RafldexCryptoCoins_V1_1", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}