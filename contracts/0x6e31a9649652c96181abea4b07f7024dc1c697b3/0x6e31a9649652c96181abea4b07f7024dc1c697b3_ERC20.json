{"SourceCode": "/*\r\n   \r\n   SPDX-License-Identifier: Unlicensed\r\n\r\n   \r\n   */\r\n   \r\n   pragma solidity 0.8.23;\r\n   \r\n   abstract contract Context {\r\n       function _msgSender() internal view virtual returns (address) {\r\n           return msg.sender;\r\n       }\r\n   }\r\n   \r\n   interface IERC20 {\r\n       function totalSupply() external view returns (uint256);\r\n   \r\n       function balanceOf(address account) external view returns (uint256);\r\n   \r\n       function transfer(\r\n           address recipient,\r\n           uint256 amount\r\n       ) external returns (bool);\r\n   \r\n       function allowance(\r\n           address owner,\r\n           address spender\r\n       ) external view returns (uint256);\r\n   \r\n       function approve(address spender, uint256 amount) external returns (bool);\r\n   \r\n       function transferFrom(\r\n           address sender,\r\n           address recipient,\r\n           uint256 amount\r\n       ) external returns (bool);\r\n   \r\n       event Transfer(address indexed from, address indexed to, uint256 value);\r\n       event Approval(\r\n           address indexed owner,\r\n           address indexed spender,\r\n           uint256 value\r\n       );\r\n   }\r\n   \r\n   contract Ownable is Context {\r\n       address private _owner;\r\n       address private _previousOwner;\r\n       event OwnershipTransferred(\r\n           address indexed previousOwner,\r\n           address indexed newOwner\r\n       );\r\n   \r\n       constructor() {\r\n           address msgSender = _msgSender();\r\n           _owner = msgSender;\r\n           emit OwnershipTransferred(address(0), msgSender);\r\n       }\r\n   \r\n       function owner() public view returns (address) {\r\n           return _owner;\r\n       }\r\n   \r\n       modifier onlyOwner() {\r\n           require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n           _;\r\n       }\r\n       \r\n       function renounceOwnership() public virtual onlyOwner {\r\n           emit OwnershipTransferred(_owner, address(0));\r\n           _owner = address(0);\r\n       }\r\n   }\r\n   \r\n   interface IUniswapV2Factory {\r\n       function createPair(\r\n           address tokenA,\r\n           address tokenB\r\n       ) external returns (address pair);\r\n   }\r\n   \r\n   interface IUniswapV2Router02 {\r\n       function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n           uint amountIn,\r\n           uint amountOutMin,\r\n           address[] calldata path,\r\n           address to,\r\n           uint deadline\r\n       ) external;\r\n   \r\n       function factory() external pure returns (address);\r\n   \r\n       function WETH() external pure returns (address);\r\n   \r\n       function addLiquidityETH(\r\n           address token,\r\n           uint amountTokenDesired,\r\n           uint amountTokenMin,\r\n           uint amountETHMin,\r\n           address to,\r\n           uint deadline\r\n       )\r\n           external\r\n           payable\r\n           returns (uint amountToken, uint amountETH, uint liquidity);\r\n   }\r\n   \r\n   contract ERC20 is Context, IERC20, Ownable {\r\n       uint256 private constant _totalSupply = 1_000_000e18;\r\n       uint256 private twoPercent = 20_000e18;\r\n       uint256 private constant minSwap = 1_0000e18;\r\n       uint8 private constant _decimals = 18;\r\n   \r\n       IUniswapV2Router02 immutable uniswapV2Router;\r\n       address immutable uniswapV2Pair;\r\n       address immutable WETH;\r\n       address payable immutable marketingWallet;\r\n   \r\n       uint256 public buyTax;\r\n       uint256 public sellTax;\r\n   \r\n       uint8 private launch;\r\n       uint8 private inSwapAndLiquify;\r\n   \r\n       uint256 private launchBlock;\r\n       uint256 public maxTxAmount = 20_000e18; //max Tx\r\n   \r\n       string public constant _name = \"tupelothedog\";\r\n       string public constant _symbol = \"tupelothedog\";\r\n   \r\n       mapping(address => uint256) private _balance;\r\n       mapping(address => mapping(address => uint256)) private _allowances;\r\n       mapping(address => bool) private _isExcludedFromFeeWallet;\r\n   \r\n       constructor() {\r\n           \r\n           uniswapV2Router = IUniswapV2Router02(\r\n               0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n           );\r\n           WETH = uniswapV2Router.WETH();\r\n           buyTax = 20;\r\n           sellTax = 20;\r\n   \r\n           uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n               address(this),\r\n               WETH\r\n           );\r\n   \r\n           marketingWallet = payable(msg.sender);\r\n           _balance[address(this)] = _totalSupply;\r\n           _isExcludedFromFeeWallet[marketingWallet] = true;\r\n           _isExcludedFromFeeWallet[msg.sender] = true;\r\n           _isExcludedFromFeeWallet[address(this)] = true;\r\n           _allowances[address(this)][address(uniswapV2Router)] = type(uint256)\r\n               .max;\r\n           _allowances[msg.sender][address(uniswapV2Router)] = type(uint256).max;\r\n           _allowances[marketingWallet][address(uniswapV2Router)] = type(uint256)\r\n               .max;\r\n   \r\n           emit Transfer(address(0), _msgSender(), _totalSupply);\r\n       }\r\n   \r\n       function name() public pure returns (string memory) {\r\n           return _name;\r\n       }\r\n   \r\n       function symbol() public pure returns (string memory) {\r\n           return _symbol;\r\n       }\r\n   \r\n       function decimals() public pure returns (uint8) {\r\n           return _decimals;\r\n       }\r\n   \r\n       function totalSupply() public pure override returns (uint256) {\r\n           return _totalSupply;\r\n       }\r\n   \r\n       function balanceOf(address account) public view override returns (uint256) {\r\n           return _balance[account];\r\n       }\r\n   \r\n       function transfer(\r\n           address recipient,\r\n           uint256 amount\r\n       ) public override returns (bool) {\r\n           _transfer(_msgSender(), recipient, amount);\r\n           return true;\r\n       }\r\n   \r\n       function allowance(\r\n           address owner,\r\n           address spender\r\n       ) public view override returns (uint256) {\r\n           return _allowances[owner][spender];\r\n       }\r\n   \r\n       function approve(\r\n           address spender,\r\n           uint256 amount\r\n       ) public override returns (bool) {\r\n           _approve(_msgSender(), spender, amount);\r\n           return true;\r\n       }\r\n   \r\n       function transferFrom(\r\n           address sender,\r\n           address recipient,\r\n           uint256 amount\r\n       ) public override returns (bool) {\r\n           _transfer(sender, recipient, amount);\r\n           _approve(\r\n               sender,\r\n               _msgSender(),\r\n               _allowances[sender][_msgSender()] - amount\r\n           );\r\n           return true;\r\n       }\r\n   \r\n       function _approve(address owner, address spender, uint256 amount) private {\r\n           require(owner != address(0), \"ERC20: approve from the zero address\");\r\n           require(spender != address(0), \"ERC20: approve to the zero address\");\r\n           _allowances[owner][spender] = amount;\r\n           emit Approval(owner, spender, amount);\r\n       }\r\n   \r\n       function addLp() external payable onlyOwner {\r\n           _approve(address(this), address(uniswapV2Router), type(uint).max);\r\n           uniswapV2Router.addLiquidityETH{value: msg.value}(\r\n               address(this),\r\n               balanceOf(address(this)),\r\n               0,\r\n               0,\r\n               owner(),\r\n               block.timestamp\r\n           );\r\n           IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n       }\r\n   \r\n       function openTrading() external onlyOwner {\r\n           launch = 1;\r\n           launchBlock = block.number;\r\n       }\r\n   \r\n       function removeLimits(uint256 finalTaxRate) external onlyOwner {\r\n           require(finalTaxRate <= 5, \"Cannot set tax greater than 5%\");\r\n           maxTxAmount = _totalSupply;\r\n           twoPercent = _totalSupply;\r\n           buyTax = finalTaxRate;\r\n           sellTax = finalTaxRate;\r\n       }\r\n   \r\n     \r\n   \r\n       function _transfer(address from, address to, uint256 amount) private {\r\n           require(from != address(0), \"ERC20: transfer from the zero address\");\r\n           require(amount > 1e9, \"Min transfer amt\");\r\n   \r\n           uint256 _tax;\r\n           if (_isExcludedFromFeeWallet[from] || _isExcludedFromFeeWallet[to]) {\r\n               _tax = 0;\r\n           } else {\r\n               require(\r\n                   launch != 0 && amount <= maxTxAmount,\r\n                   \"Launch / Max TxAmount 2% at launch\"\r\n               );\r\n   \r\n               if (inSwapAndLiquify == 1) {\r\n                   //No tax transfer\r\n                   _balance[from] -= amount;\r\n                   _balance[to] += amount;\r\n   \r\n                   emit Transfer(from, to, amount);\r\n                   return;\r\n               }\r\n   \r\n               if (from == uniswapV2Pair) {\r\n                   _tax = buyTax;\r\n               } else if (to == uniswapV2Pair) {\r\n                   uint256 tokensToSwap = _balance[address(this)];\r\n                   if (tokensToSwap > minSwap && inSwapAndLiquify == 0) {\r\n                       if (tokensToSwap > twoPercent) {\r\n                           tokensToSwap = twoPercent;\r\n                       }\r\n                       inSwapAndLiquify = 1;\r\n                       address[] memory path = new address[](2);\r\n                       path[0] = address(this);\r\n                       path[1] = WETH;\r\n                       uniswapV2Router\r\n                           .swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                               tokensToSwap,\r\n                               0,\r\n                               path,\r\n                               marketingWallet,\r\n                               block.timestamp\r\n                           );\r\n                       inSwapAndLiquify = 0;\r\n                   }\r\n                   _tax = sellTax;\r\n               } else {\r\n                   _tax = 0;\r\n               }\r\n           }\r\n   \r\n           //Is there tax for sender|receiver?\r\n           if (_tax != 0) {\r\n               //Tax transfer\r\n               uint256 taxTokens = (amount * _tax) / 100;\r\n               uint256 transferAmount = amount - taxTokens;\r\n   \r\n               _balance[from] -= amount;\r\n               _balance[to] += transferAmount;\r\n               _balance[address(this)] += taxTokens;\r\n               emit Transfer(from, address(this), taxTokens);\r\n               emit Transfer(from, to, transferAmount);\r\n           } else {\r\n               //No tax transfer\r\n               _balance[from] -= amount;\r\n               _balance[to] += amount;\r\n   \r\n               emit Transfer(from, to, amount);\r\n           }\r\n       }\r\n   \r\n       receive() external payable {}\r\n   }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"finalTaxRate\",\"type\":\"uint256\"}],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ERC20", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9f72e73d9c5247b1845fbc7724c284ccdfc7479ba3625548d929c2069c02882f"}