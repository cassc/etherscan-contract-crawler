{"SourceCode": "pragma solidity 0.8.7;\r\n\r\n// @TODO: Formatting\r\nlibrary LibBytes {\r\n  // @TODO: see if we can just set .length = \r\n  function trimToSize(bytes memory b, uint newLen)\r\n    internal\r\n    pure\r\n  {\r\n    require(b.length > newLen, \"BytesLib: only shrinking\");\r\n    assembly {\r\n      mstore(b, newLen)\r\n    }\r\n  }\r\n\r\n\r\n  /***********************************|\r\n  |        Read Bytes Functions       |\r\n  |__________________________________*/\r\n\r\n  /**\r\n   * @dev Reads a bytes32 value from a position in a byte array.\r\n   * @param b Byte array containing a bytes32 value.\r\n   * @param index Index in byte array of bytes32 value.\r\n   * @return result bytes32 value from byte array.\r\n   */\r\n  function readBytes32(\r\n    bytes memory b,\r\n    uint256 index\r\n  )\r\n    internal\r\n    pure\r\n    returns (bytes32 result)\r\n  {\r\n    // Arrays are prefixed by a 256 bit length parameter\r\n    index += 32;\r\n\r\n    require(b.length >= index, \"BytesLib: length\");\r\n\r\n    // Read the bytes32 from array memory\r\n    assembly {\r\n      result := mload(add(b, index))\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\n\r\n\r\ninterface IERC1271Wallet {\r\n\tfunction isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4 magicValue);\r\n}\r\n\r\nlibrary SignatureValidator {\r\n\tusing LibBytes for bytes;\r\n\r\n\tenum SignatureMode {\r\n\t\tEIP712,\r\n\t\tEthSign,\r\n\t\tSmartWallet,\r\n\t\tSpoof\r\n\t}\r\n\r\n\t// bytes4(keccak256(\"isValidSignature(bytes32,bytes)\"))\r\n\tbytes4 constant internal ERC1271_MAGICVALUE_BYTES32 = 0x1626ba7e;\r\n\r\n\tfunction recoverAddr(bytes32 hash, bytes memory sig) internal view returns (address) {\r\n\t\treturn recoverAddrImpl(hash, sig, false);\r\n\t}\r\n\r\n\tfunction recoverAddrImpl(bytes32 hash, bytes memory sig, bool allowSpoofing) internal view returns (address) {\r\n\t\trequire(sig.length >= 1, \"SV_SIGLEN\");\r\n\t\tuint8 modeRaw;\r\n\t\tunchecked { modeRaw = uint8(sig[sig.length - 1]); }\r\n\t\tSignatureMode mode = SignatureMode(modeRaw);\r\n\r\n\t\t// {r}{s}{v}{mode}\r\n\t\tif (mode == SignatureMode.EIP712 || mode == SignatureMode.EthSign) {\r\n\t\t\trequire(sig.length == 66, \"SV_LEN\");\r\n\t\t\tbytes32 r = sig.readBytes32(0);\r\n\t\t\tbytes32 s = sig.readBytes32(32);\r\n\t\t\tuint8 v = uint8(sig[64]);\r\n\t\t\t// Hesitant about this check: seems like this is something that has no business being checked on-chain\r\n\t\t\trequire(v == 27 || v == 28, \"SV_INVALID_V\");\r\n\t\t\tif (mode == SignatureMode.EthSign) hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n\t\t\taddress signer = ecrecover(hash, v, r, s);\r\n\t\t\trequire(signer != address(0), \"SV_ZERO_SIG\");\r\n\t\t\treturn signer;\r\n\t\t// {sig}{verifier}{mode}\r\n\t\t} else if (mode == SignatureMode.SmartWallet) {\r\n\t\t\t// 32 bytes for the addr, 1 byte for the type = 33\r\n\t\t\trequire(sig.length > 33, \"SV_LEN_WALLET\");\r\n\t\t\tuint newLen;\r\n\t\t\tunchecked {\r\n\t\t\t\tnewLen = sig.length - 33;\r\n\t\t\t}\r\n\t\t\tIERC1271Wallet wallet = IERC1271Wallet(address(uint160(uint256(sig.readBytes32(newLen)))));\r\n\t\t\tsig.trimToSize(newLen);\r\n\t\t\trequire(ERC1271_MAGICVALUE_BYTES32 == wallet.isValidSignature(hash, sig), \"SV_WALLET_INVALID\");\r\n\t\t\treturn address(wallet);\r\n\t\t// {address}{mode}; the spoof mode is used when simulating calls\r\n\t\t} else if (mode == SignatureMode.Spoof && allowSpoofing) {\r\n\t\t\trequire(tx.origin == address(1), \"SV_SPOOF_ORIGIN\");\r\n\t\t\trequire(sig.length == 33, \"SV_SPOOF_LEN\");\r\n\t\t\tsig.trimToSize(32);\r\n\t\t\treturn abi.decode(sig, (address));\r\n\t\t} else revert(\"SV_SIGMODE\");\r\n\t}\r\n}\r\n\r\n\r\ncontract Identity {\r\n\tmapping (address => bytes32) public privileges;\r\n\t// The next allowed nonce\r\n\tuint public nonce;\r\n\r\n\t// Events\r\n\tevent LogPrivilegeChanged(address indexed addr, bytes32 priv);\r\n\tevent LogErr(address indexed to, uint value, bytes data, bytes returnData); // only used in tryCatch\r\n\r\n\t// Transaction structure\r\n\t// we handle replay protection separately by requiring (address(this), chainID, nonce) as part of the sig\r\n\tstruct Transaction {\r\n\t\taddress to;\r\n\t\tuint value;\r\n\t\tbytes data;\r\n\t}\r\n\r\n\tconstructor(address[] memory addrs) {\r\n\t\tuint len = addrs.length;\r\n\t\tfor (uint i=0; i<len; i++) {\r\n\t\t\t// @TODO should we allow setting to any arb value here?\r\n\t\t\tprivileges[addrs[i]] = bytes32(uint(1));\r\n\t\t\temit LogPrivilegeChanged(addrs[i], bytes32(uint(1)));\r\n\t\t}\r\n\t}\r\n\r\n\t// This contract can accept ETH without calldata\r\n\treceive() external payable {}\r\n\r\n\t// This contract can accept ETH with calldata\r\n\t// However, to support EIP 721 and EIP 1155, we need to respond to those methods with their own method signature\r\n\tfallback() external payable {\r\n\t\tbytes4 method = msg.sig;\r\n\t\tif (\r\n\t\t\tmethod == 0x150b7a02 // bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))\r\n\t\t\t\t|| method == 0xf23a6e61 // bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\r\n\t\t\t\t|| method == 0xbc197c81 // bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\r\n\t\t) {\r\n\t\t\t// Copy back the method\r\n\t\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\t\tassembly {\r\n\t\t\t\tcalldatacopy(0, 0, 0x04)\r\n\t\t\t\treturn (0, 0x20)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setAddrPrivilege(address addr, bytes32 priv)\r\n\t\texternal\r\n\t{\r\n\t\trequire(msg.sender == address(this), 'ONLY_IDENTITY_CAN_CALL');\r\n\t\t// Anti-bricking measure: if the privileges slot is used for special data (not 0x01),\r\n\t\t// don't allow to set it to true\r\n\t\tif (uint(privileges[addr]) > 1) require(priv != bytes32(uint(1)), 'UNSETTING_SPECIAL_DATA');\r\n\t\tprivileges[addr] = priv;\r\n\t\temit LogPrivilegeChanged(addr, priv);\r\n\t}\r\n\r\n\tfunction tipMiner(uint amount)\r\n\t\texternal\r\n\t{\r\n\t\trequire(msg.sender == address(this), 'ONLY_IDENTITY_CAN_CALL');\r\n\t\t// See https://docs.flashbots.net/flashbots-auction/searchers/advanced/coinbase-payment/#managing-payments-to-coinbaseaddress-when-it-is-a-contract\r\n\t\t// generally this contract is reentrancy proof cause of the nonce\r\n\t\texecuteCall(block.coinbase, amount, new bytes(0));\r\n\t}\r\n\r\n\tfunction tryCatch(address to, uint value, bytes calldata data)\r\n\t\texternal\r\n\t{\r\n\t\trequire(msg.sender == address(this), 'ONLY_IDENTITY_CAN_CALL');\r\n\t\t(bool success, bytes memory returnData) = to.call{value: value, gas: gasleft()}(data);\r\n\t\tif (!success) emit LogErr(to, value, data, returnData);\r\n\t}\r\n\r\n\r\n\t// WARNING: if the signature of this is changed, we have to change IdentityFactory\r\n\tfunction execute(Transaction[] calldata txns, bytes calldata signature)\r\n\t\texternal\r\n\t{\r\n\t\trequire(txns.length > 0, 'MUST_PASS_TX');\r\n\t\tuint currentNonce = nonce;\r\n\t\t// NOTE: abi.encode is safer than abi.encodePacked in terms of collision safety\r\n\t\tbytes32 hash = keccak256(abi.encode(address(this), block.chainid, currentNonce, txns));\r\n\t\t// We have to increment before execution cause it protects from reentrancies\r\n\t\tnonce = currentNonce + 1;\r\n\r\n\t\taddress signer = SignatureValidator.recoverAddrImpl(hash, signature, true);\r\n\t\trequire(privileges[signer] != bytes32(0), 'INSUFFICIENT_PRIVILEGE');\r\n\t\tuint len = txns.length;\r\n\t\tfor (uint i=0; i<len; i++) {\r\n\t\t\tTransaction memory txn = txns[i];\r\n\t\t\texecuteCall(txn.to, txn.value, txn.data);\r\n\t\t}\r\n\t\t// The actual anti-bricking mechanism - do not allow a signer to drop their own priviledges\r\n\t\trequire(privileges[signer] != bytes32(0), 'PRIVILEGE_NOT_DOWNGRADED');\r\n\t}\r\n\r\n\t// no need for nonce management here cause we're not dealing with sigs\r\n\tfunction executeBySender(Transaction[] calldata txns) external {\r\n\t\trequire(txns.length > 0, 'MUST_PASS_TX');\r\n\t\trequire(privileges[msg.sender] != bytes32(0), 'INSUFFICIENT_PRIVILEGE');\r\n\t\tuint len = txns.length;\r\n\t\tfor (uint i=0; i<len; i++) {\r\n\t\t\tTransaction memory txn = txns[i];\r\n\t\t\texecuteCall(txn.to, txn.value, txn.data);\r\n\t\t}\r\n\t\t// again, anti-bricking\r\n\t\trequire(privileges[msg.sender] != bytes32(0), 'PRIVILEGE_NOT_DOWNGRADED');\r\n\t}\r\n\r\n\tfunction executeBySelf(Transaction[] calldata txns) external {\r\n\t\trequire(msg.sender == address(this), 'ONLY_IDENTITY_CAN_CALL');\r\n\t\trequire(txns.length > 0, 'MUST_PASS_TX');\r\n\t\tuint len = txns.length;\r\n\t\tfor (uint i=0; i<len; i++) {\r\n\t\t\tTransaction memory txn = txns[i];\r\n\t\t\texecuteCall(txn.to, txn.value, txn.data);\r\n\t\t}\r\n\t}\r\n\r\n\t// we shouldn't use address.call(), cause: https://github.com/ethereum/solidity/issues/2884\r\n\t// copied from https://github.com/uport-project/uport-identity/blob/develop/contracts/Proxy.sol\r\n\t// there's also\r\n\t// https://github.com/gnosis/MultiSigWallet/commit/e1b25e8632ca28e9e9e09c81bd20bf33fdb405ce\r\n\t// https://github.com/austintgriffith/bouncer-proxy/blob/master/BouncerProxy/BouncerProxy.sol\r\n\t// https://github.com/gnosis/safe-contracts/blob/7e2eeb3328bb2ae85c36bc11ea6afc14baeb663c/contracts/base/Executor.sol\r\n\tfunction executeCall(address to, uint256 value, bytes memory data)\r\n\t\tinternal\r\n\t{\r\n\t\tassembly {\r\n\t\t\tlet result := call(gas(), to, value, add(data, 0x20), mload(data), 0, 0)\r\n\r\n\t\t\tswitch result case 0 {\r\n\t\t\t\tlet size := returndatasize()\r\n\t\t\t\tlet ptr := mload(0x40)\r\n\t\t\t\treturndatacopy(ptr, 0, size)\r\n\t\t\t\trevert(ptr, size)\r\n\t\t\t}\r\n\t\t\tdefault {}\r\n\t\t}\r\n\t\t// A single call consumes around 477 more gas with the pure solidity version, for whatever reason\r\n\t\t// WARNING: do not use this, it corrupts the returnData string (returns it in a slightly different format)\r\n\t\t//(bool success, bytes memory returnData) = to.call{value: value, gas: gasleft()}(data);\r\n\t\t//if (!success) revert(string(data));\r\n\t}\r\n\r\n\t// EIP 1271 implementation\r\n\t// see https://eips.ethereum.org/EIPS/eip-1271\r\n\tfunction isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4) {\r\n\t\tif (privileges[SignatureValidator.recoverAddr(hash, signature)] != bytes32(0)) {\r\n\t\t\t// bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\r\n\t\t\treturn 0x1626ba7e;\r\n\t\t} else {\r\n\t\t\treturn 0xffffffff;\r\n\t\t}\r\n\t}\r\n\r\n\t// EIP 1155 implementation\r\n\t// we pretty much only need to signal that we support the interface for 165, but for 1155 we also need the fallback function\r\n\tfunction supportsInterface(bytes4 interfaceID) external pure returns (bool) {\r\n\t\treturn\r\n\t\t\tinterfaceID == 0x01ffc9a7 ||    // ERC-165 support (i.e. `bytes4(keccak256('supportsInterface(bytes4)'))`).\r\n\t\t\tinterfaceID == 0x4e2312e0;      // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\")) ^ bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`).\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"LogErr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"priv\",\"type\":\"bytes32\"}],\"name\":\"LogPrivilegeChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Identity.Transaction[]\",\"name\":\"txns\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Identity.Transaction[]\",\"name\":\"txns\",\"type\":\"tuple[]\"}],\"name\":\"executeBySelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Identity.Transaction[]\",\"name\":\"txns\",\"type\":\"tuple[]\"}],\"name\":\"executeBySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"privileges\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"priv\",\"type\":\"bytes32\"}],\"name\":\"setAddrPrivilege\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tipMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tryCatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Identity", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0dede40df9726d7985efffcc5c0bf01c06e95dd1a9e6738c040d26ac262ee2cf"}