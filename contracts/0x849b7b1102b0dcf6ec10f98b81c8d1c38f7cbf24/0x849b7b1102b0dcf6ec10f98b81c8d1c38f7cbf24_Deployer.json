{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-authorizer/contracts/Authorized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.17;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\nimport './AuthorizedHelpers.sol';\\nimport './interfaces/IAuthorized.sol';\\nimport './interfaces/IAuthorizer.sol';\\n\\n/**\\n * @title Authorized\\n * @dev Implementation using an authorizer as its access-control mechanism. It offers `auth` and `authP` modifiers to\\n * tag its own functions in order to control who can access them against the authorizer referenced.\\n */\\ncontract Authorized is IAuthorized, Initializable, AuthorizedHelpers {\\n    // Authorizer reference\\n    address public override authorizer;\\n\\n    /**\\n     * @dev Modifier that should be used to tag protected functions\\n     */\\n    modifier auth() {\\n        _authenticate(msg.sender, msg.sig);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that should be used to tag protected functions with params\\n     */\\n    modifier authP(uint256[] memory params) {\\n        _authenticate(msg.sender, msg.sig, params);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a new authorized contract. Note that initializers are disabled at creation time.\\n     */\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initializes the authorized contract. It does call upper contracts initializers.\\n     * @param _authorizer Address of the authorizer to be set\\n     */\\n    function __Authorized_init(address _authorizer) internal onlyInitializing {\\n        __Authorized_init_unchained(_authorizer);\\n    }\\n\\n    /**\\n     * @dev Initializes the authorized contract. It does not call upper contracts initializers.\\n     * @param _authorizer Address of the authorizer to be set\\n     */\\n    function __Authorized_init_unchained(address _authorizer) internal onlyInitializing {\\n        authorizer = _authorizer;\\n    }\\n\\n    /**\\n     * @dev Reverts if `who` is not allowed to call `what`\\n     * @param who Address to be authenticated\\n     * @param what Function selector to be authenticated\\n     */\\n    function _authenticate(address who, bytes4 what) internal view {\\n        _authenticate(who, what, new uint256[](0));\\n    }\\n\\n    /**\\n     * @dev Reverts if `who` is not allowed to call `what` with `how`\\n     * @param who Address to be authenticated\\n     * @param what Function selector to be authenticated\\n     * @param how Params to be authenticated\\n     */\\n    function _authenticate(address who, bytes4 what, uint256[] memory how) internal view {\\n        if (!_isAuthorized(who, what, how)) revert AuthSenderNotAllowed(who, what, how);\\n    }\\n\\n    /**\\n     * @dev Tells whether `who` has any permission on this contract\\n     * @param who Address asking permissions for\\n     */\\n    function _hasPermissions(address who) internal view returns (bool) {\\n        return IAuthorizer(authorizer).hasPermissions(who, address(this));\\n    }\\n\\n    /**\\n     * @dev Tells whether `who` is allowed to call `what`\\n     * @param who Address asking permission for\\n     * @param what Function selector asking permission for\\n     */\\n    function _isAuthorized(address who, bytes4 what) internal view returns (bool) {\\n        return _isAuthorized(who, what, new uint256[](0));\\n    }\\n\\n    /**\\n     * @dev Tells whether `who` is allowed to call `what` with `how`\\n     * @param who Address asking permission for\\n     * @param what Function selector asking permission for\\n     * @param how Params asking permission for\\n     */\\n    function _isAuthorized(address who, bytes4 what, uint256[] memory how) internal view returns (bool) {\\n        return IAuthorizer(authorizer).isAuthorized(who, address(this), what, how);\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-authorizer/contracts/AuthorizedHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title AuthorizedHelpers\\n * @dev Syntax sugar methods to operate with authorizer params easily\\n */\\ncontract AuthorizedHelpers {\\n    function authParams(address p1) internal pure returns (uint256[] memory r) {\\n        return authParams(uint256(uint160(p1)));\\n    }\\n\\n    function authParams(bytes32 p1) internal pure returns (uint256[] memory r) {\\n        return authParams(uint256(p1));\\n    }\\n\\n    function authParams(uint256 p1) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](1);\\n        r[0] = p1;\\n    }\\n\\n    function authParams(address p1, bool p2) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](2);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = p2 ? 1 : 0;\\n    }\\n\\n    function authParams(address p1, uint256 p2) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](2);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = p2;\\n    }\\n\\n    function authParams(address p1, address p2) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](2);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = uint256(uint160(p2));\\n    }\\n\\n    function authParams(bytes32 p1, bytes32 p2) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](2);\\n        r[0] = uint256(p1);\\n        r[1] = uint256(p2);\\n    }\\n\\n    function authParams(address p1, address p2, uint256 p3) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](3);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = uint256(uint160(p2));\\n        r[2] = p3;\\n    }\\n\\n    function authParams(address p1, address p2, address p3) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](3);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = uint256(uint160(p2));\\n        r[2] = uint256(uint160(p3));\\n    }\\n\\n    function authParams(address p1, address p2, bytes4 p3) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](3);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = uint256(uint160(p2));\\n        r[2] = uint256(uint32(p3));\\n    }\\n\\n    function authParams(address p1, uint256 p2, uint256 p3) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](3);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = p2;\\n        r[2] = p3;\\n    }\\n\\n    function authParams(address p1, address p2, uint256 p3, uint256 p4) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](4);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = uint256(uint160(p2));\\n        r[2] = p3;\\n        r[3] = p4;\\n    }\\n\\n    function authParams(address p1, uint256 p2, uint256 p3, uint256 p4) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](4);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = p2;\\n        r[2] = p3;\\n        r[3] = p4;\\n    }\\n\\n    function authParams(bytes32 p1, address p2, uint256 p3, bool p4) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](4);\\n        r[0] = uint256(p1);\\n        r[1] = uint256(uint160(p2));\\n        r[2] = p3;\\n        r[3] = p4 ? 1 : 0;\\n    }\\n\\n    function authParams(address p1, uint256 p2, uint256 p3, uint256 p4, uint256 p5)\\n        internal\\n        pure\\n        returns (uint256[] memory r)\\n    {\\n        r = new uint256[](5);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = p2;\\n        r[2] = p3;\\n        r[3] = p4;\\n        r[4] = p5;\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-authorizer/contracts/Authorizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.17;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport './AuthorizedHelpers.sol';\\nimport './interfaces/IAuthorizer.sol';\\n\\n/**\\n * @title Authorizer\\n * @dev Authorization mechanism based on permissions\\n */\\ncontract Authorizer is IAuthorizer, AuthorizedHelpers, Initializable, ReentrancyGuardUpgradeable {\\n    // Constant used to denote that a permission is open to anyone\\n    address public constant ANYONE = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    // Constant used to denote that a permission is open to anywhere\\n    address public constant ANYWHERE = address(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    // Param logic op types\\n    enum Op {\\n        NONE,\\n        EQ,\\n        NEQ,\\n        GT,\\n        LT,\\n        GTE,\\n        LTE\\n    }\\n\\n    /**\\n     * @dev Permission information\\n     * @param authorized Whether it is authorized or not\\n     * @param params List of params defined for each permission\\n     */\\n    struct Permission {\\n        bool authorized;\\n        Param[] params;\\n    }\\n\\n    /**\\n     * @dev Permissions list information\\n     * @param count Number of permissions\\n     * @param permissions List of permissions indexed by what\\n     */\\n    struct PermissionsList {\\n        uint256 count;\\n        mapping (bytes4 => Permission) permissions;\\n    }\\n\\n    // List of permissions indexed by who => where\\n    mapping (address => mapping (address => PermissionsList)) private _permissionsLists;\\n\\n    /**\\n     * @dev Creates a new authorizer contract. Note that initializers are disabled at creation time.\\n     */\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initialization function.\\n     * @param owners List of addresses that will be allowed to authorize and unauthorize permissions\\n     */\\n    function initialize(address[] memory owners) external virtual initializer {\\n        __ReentrancyGuard_init();\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            _authorize(owners[i], address(this), IAuthorizer.authorize.selector, new Param[](0));\\n            _authorize(owners[i], address(this), IAuthorizer.unauthorize.selector, new Param[](0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Tells whether `who` has any permission on `where`\\n     * @param who Address asking permission for\\n     * @param where Target address asking permission for\\n     */\\n    function hasPermissions(address who, address where) external view override returns (bool) {\\n        return _permissionsLists[who][where].count > 0;\\n    }\\n\\n    /**\\n     * @dev Tells the number of permissions `who` has on `where`\\n     * @param who Address asking permission for\\n     * @param where Target address asking permission for\\n     */\\n    function getPermissionsLength(address who, address where) external view override returns (uint256) {\\n        return _permissionsLists[who][where].count;\\n    }\\n\\n    /**\\n     * @dev Tells whether `who` is allowed to call `what` on `where` with `how`\\n     * @param who Address asking permission for\\n     * @param where Target address asking permission for\\n     * @param what Function selector asking permission for\\n     * @param how Params asking permission for\\n     */\\n    function isAuthorized(address who, address where, bytes4 what, uint256[] memory how)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (_isAuthorized(who, where, what, how)) return true; // direct permission\\n        if (_isAuthorized(ANYONE, where, what, how)) return true; // anyone is allowed\\n        if (_isAuthorized(who, ANYWHERE, what, how)) return true; // direct permission on anywhere\\n        if (_isAuthorized(ANYONE, ANYWHERE, what, how)) return true; // anyone allowed anywhere\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Tells the params set for a given permission\\n     * @param who Address asking permission params of\\n     * @param where Target address asking permission params of\\n     * @param what Function selector asking permission params of\\n     */\\n    function getPermissionParams(address who, address where, bytes4 what)\\n        external\\n        view\\n        override\\n        returns (Param[] memory)\\n    {\\n        return _permissionsLists[who][where].permissions[what].params;\\n    }\\n\\n    /**\\n     * @dev Executes a list of permission changes. Sender must be authorized.\\n     * @param changes List of permission changes to be executed\\n     */\\n    function changePermissions(PermissionChange[] memory changes) external override {\\n        for (uint256 i = 0; i < changes.length; i++) {\\n            PermissionChange memory change = changes[i];\\n            for (uint256 j = 0; j < change.grants.length; j++) {\\n                GrantPermission memory grant = change.grants[j];\\n                authorize(grant.who, change.where, grant.what, grant.params);\\n            }\\n            for (uint256 j = 0; j < change.revokes.length; j++) {\\n                RevokePermission memory revoke = change.revokes[j];\\n                unauthorize(revoke.who, change.where, revoke.what);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Authorizes `who` to call `what` on `where` restricted by `params`. Sender must be authorized.\\n     * @param who Address to be authorized\\n     * @param where Target address to be granted for\\n     * @param what Function selector to be granted\\n     * @param params Optional params to restrict a permission attempt\\n     */\\n    function authorize(address who, address where, bytes4 what, Param[] memory params) public override nonReentrant {\\n        uint256[] memory how = authParams(who, where, what);\\n        _authenticate(msg.sender, IAuthorizer.authorize.selector, how);\\n        _authorize(who, where, what, params);\\n    }\\n\\n    /**\\n     * @dev Unauthorizes `who` to call `what` on `where`. Sender must be authorized.\\n     * @param who Address to be authorized\\n     * @param where Target address to be revoked for\\n     * @param what Function selector to be revoked\\n     */\\n    function unauthorize(address who, address where, bytes4 what) public override nonReentrant {\\n        uint256[] memory how = authParams(who, where, what);\\n        _authenticate(msg.sender, IAuthorizer.unauthorize.selector, how);\\n        _unauthorize(who, where, what);\\n    }\\n\\n    /**\\n     * @dev Validates whether `who` is authorized to call `what` with `how`\\n     * @param who Address asking permission for\\n     * @param what Function selector asking permission for\\n     * @param how Params asking permission for\\n     */\\n    function _authenticate(address who, bytes4 what, uint256[] memory how) internal view {\\n        bool allowed = isAuthorized(who, address(this), what, how);\\n        if (!allowed) revert AuthorizerSenderNotAllowed(who, address(this), what, how);\\n    }\\n\\n    /**\\n     * @dev Tells whether `who` is allowed to call `what` on `where` with `how`\\n     * @param who Address asking permission for\\n     * @param where Target address asking permission for\\n     * @param what Function selector asking permission for\\n     * @param how Params asking permission for\\n     */\\n    function _isAuthorized(address who, address where, bytes4 what, uint256[] memory how) internal view returns (bool) {\\n        Permission storage permission = _permissionsLists[who][where].permissions[what];\\n        return permission.authorized && _evalParams(permission.params, how);\\n    }\\n\\n    /**\\n     * @dev Authorizes `who` to call `what` on `where` restricted by `params`\\n     * @param who Address to be authorized\\n     * @param where Target address to be granted for\\n     * @param what Function selector to be granted\\n     * @param params Optional params to restrict a permission attempt\\n     */\\n    function _authorize(address who, address where, bytes4 what, Param[] memory params) internal {\\n        PermissionsList storage list = _permissionsLists[who][where];\\n        Permission storage permission = list.permissions[what];\\n        if (!permission.authorized) list.count++;\\n        permission.authorized = true;\\n        delete permission.params;\\n        for (uint256 i = 0; i < params.length; i++) permission.params.push(params[i]);\\n        emit Authorized(who, where, what, params);\\n    }\\n\\n    /**\\n     * @dev Unauthorizes `who` to call `what` on `where`\\n     * @param who Address to be authorized\\n     * @param where Target address to be revoked for\\n     * @param what Function selector to be revoked\\n     */\\n    function _unauthorize(address who, address where, bytes4 what) internal {\\n        PermissionsList storage list = _permissionsLists[who][where];\\n        Permission storage permission = list.permissions[what];\\n        if (permission.authorized) list.count--;\\n        delete list.permissions[what];\\n        emit Unauthorized(who, where, what);\\n    }\\n\\n    /**\\n     * @dev Evaluates a list of params defined for a permission against a list of values given by a call\\n     * @param params List of expected params\\n     * @param how List of actual given values\\n     * @return True if all the given values hold against the list of params\\n     */\\n    function _evalParams(Param[] memory params, uint256[] memory how) private pure returns (bool) {\\n        for (uint256 i = 0; i < params.length; i++) {\\n            Param memory param = params[i];\\n            if ((i < how.length && !_evalParam(param, how[i])) || (i >= how.length && Op(param.op) != Op.NONE)) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Evaluates a single param defined for a permission against a single value\\n     * @param param Expected params\\n     * @param how Actual given value\\n     * @return True if the given value hold against the expected param\\n     */\\n    function _evalParam(Param memory param, uint256 how) private pure returns (bool) {\\n        if (Op(param.op) == Op.NONE) return true;\\n        if (Op(param.op) == Op.EQ) return how == param.value;\\n        if (Op(param.op) == Op.NEQ) return how != param.value;\\n        if (Op(param.op) == Op.GT) return how > param.value;\\n        if (Op(param.op) == Op.LT) return how < param.value;\\n        if (Op(param.op) == Op.GTE) return how >= param.value;\\n        if (Op(param.op) == Op.LTE) return how <= param.value;\\n        revert AuthorizerInvalidParamOp(param.op);\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-authorizer/contracts/interfaces/IAuthorized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Authorized interface\\n */\\ninterface IAuthorized {\\n    /**\\n     * @dev Sender `who` is not allowed to call `what` with `how`\\n     */\\n    error AuthSenderNotAllowed(address who, bytes4 what, uint256[] how);\\n\\n    /**\\n     * @dev Tells the address of the authorizer reference\\n     */\\n    function authorizer() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-authorizer/contracts/interfaces/IAuthorizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Authorizer interface\\n */\\ninterface IAuthorizer {\\n    /**\\n     * @dev Permission change\\n     * @param where Address of the contract to change a permission for\\n     * @param changes List of permission changes to be executed\\n     */\\n    struct PermissionChange {\\n        address where;\\n        GrantPermission[] grants;\\n        RevokePermission[] revokes;\\n    }\\n\\n    /**\\n     * @dev Grant permission data\\n     * @param who Address to be authorized\\n     * @param what Function selector to be authorized\\n     * @param params List of params to restrict the given permission\\n     */\\n    struct GrantPermission {\\n        address who;\\n        bytes4 what;\\n        Param[] params;\\n    }\\n\\n    /**\\n     * @dev Revoke permission data\\n     * @param who Address to be unauthorized\\n     * @param what Function selector to be unauthorized\\n     */\\n    struct RevokePermission {\\n        address who;\\n        bytes4 what;\\n    }\\n\\n    /**\\n     * @dev Params used to validate permissions params against\\n     * @param op ID of the operation to compute in order to validate a permission param\\n     * @param value Comparison value\\n     */\\n    struct Param {\\n        uint8 op;\\n        uint248 value;\\n    }\\n\\n    /**\\n     * @dev Sender is not authorized to call `what` on `where` with `how`\\n     */\\n    error AuthorizerSenderNotAllowed(address who, address where, bytes4 what, uint256[] how);\\n\\n    /**\\n     * @dev The operation param is invalid\\n     */\\n    error AuthorizerInvalidParamOp(uint8 op);\\n\\n    /**\\n     * @dev Emitted every time `who`'s permission to perform `what` on `where` is granted with `params`\\n     */\\n    event Authorized(address indexed who, address indexed where, bytes4 indexed what, Param[] params);\\n\\n    /**\\n     * @dev Emitted every time `who`'s permission to perform `what` on `where` is revoked\\n     */\\n    event Unauthorized(address indexed who, address indexed where, bytes4 indexed what);\\n\\n    /**\\n     * @dev Tells whether `who` has any permission on `where`\\n     * @param who Address asking permission for\\n     * @param where Target address asking permission for\\n     */\\n    function hasPermissions(address who, address where) external view returns (bool);\\n\\n    /**\\n     * @dev Tells the number of permissions `who` has on `where`\\n     * @param who Address asking permission for\\n     * @param where Target address asking permission for\\n     */\\n    function getPermissionsLength(address who, address where) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells whether `who` is allowed to call `what` on `where` with `how`\\n     * @param who Address asking permission for\\n     * @param where Target address asking permission for\\n     * @param what Function selector asking permission for\\n     * @param how Params asking permission for\\n     */\\n    function isAuthorized(address who, address where, bytes4 what, uint256[] memory how) external view returns (bool);\\n\\n    /**\\n     * @dev Tells the params set for a given permission\\n     * @param who Address asking permission params of\\n     * @param where Target address asking permission params of\\n     * @param what Function selector asking permission params of\\n     */\\n    function getPermissionParams(address who, address where, bytes4 what) external view returns (Param[] memory);\\n\\n    /**\\n     * @dev Executes a list of permission changes\\n     * @param changes List of permission changes to be executed\\n     */\\n    function changePermissions(PermissionChange[] memory changes) external;\\n\\n    /**\\n     * @dev Authorizes `who` to call `what` on `where` restricted by `params`\\n     * @param who Address to be authorized\\n     * @param where Target address to be granted for\\n     * @param what Function selector to be granted\\n     * @param params Optional params to restrict a permission attempt\\n     */\\n    function authorize(address who, address where, bytes4 what, Param[] memory params) external;\\n\\n    /**\\n     * @dev Unauthorizes `who` to call `what` on `where`. Sender must be authorized.\\n     * @param who Address to be authorized\\n     * @param where Target address to be revoked for\\n     * @param what Function selector to be revoked\\n     */\\n    function unauthorize(address who, address where, bytes4 what) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-fee-controller/contracts/interfaces/IFeeController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Fee controller interface\\n */\\ninterface IFeeController {\\n    /**\\n     * @dev The collector to be set is zero\\n     */\\n    error FeeControllerCollectorZero();\\n\\n    /**\\n     * @dev The requested max percentage to be set is zero\\n     */\\n    error FeeControllerMaxPctZero();\\n\\n    /**\\n     * @dev The requested max percentage to be set is above one\\n     */\\n    error FeeControllerMaxPctAboveOne();\\n\\n    /**\\n     * @dev No max percentage has been set for the requested smart vault\\n     */\\n    error FeeControllerMaxPctNotSet(address smartVault);\\n\\n    /**\\n     * @dev The requested percentage to be set is above the smart vault's max percentage\\n     */\\n    error FeeControllerPctAboveMax(address smartVault, uint256 pct, uint256 maxPct);\\n\\n    /**\\n     * @dev The requested max percentage to be set is above the previous max percentage set\\n     */\\n    error FeeControllerMaxPctAbovePrevious(address smartVault, uint256 requestedMaxPct, uint256 previousMaxPct);\\n\\n    /**\\n     * @dev Emitted every time a default fee collector is set\\n     */\\n    event DefaultFeeCollectorSet(address indexed collector);\\n\\n    /**\\n     * @dev Emitted every time a max fee percentage is set for a smart vault\\n     */\\n    event MaxFeePercentageSet(address indexed smartVault, uint256 maxPct);\\n\\n    /**\\n     * @dev Emitted every time a custom fee percentage is set\\n     */\\n    event FeePercentageSet(address indexed smartVault, uint256 pct);\\n\\n    /**\\n     * @dev Emitted every time a custom fee collector is set\\n     */\\n    event FeeCollectorSet(address indexed smartVault, address indexed collector);\\n\\n    /**\\n     * @dev Tells the default fee collector\\n     */\\n    function defaultFeeCollector() external view returns (address);\\n\\n    /**\\n     * @dev Tells if there is a fee set for a smart vault\\n     * @param smartVault Address of the smart vault being queried\\n     */\\n    function hasFee(address smartVault) external view returns (bool);\\n\\n    /**\\n     * @dev Tells the applicable fee information for a smart vault\\n     * @param smartVault Address of the smart vault being queried\\n     */\\n    function getFee(address smartVault) external view returns (uint256 max, uint256 pct, address collector);\\n\\n    /**\\n     * @dev Sets the default fee collector\\n     * @param collector Default fee collector to be set\\n     */\\n    function setDefaultFeeCollector(address collector) external;\\n\\n    /**\\n     * @dev Sets a max fee percentage for a smart vault\\n     * @param smartVault Address of smart vault to set a fee percentage for\\n     * @param maxPct Max fee percentage to be set\\n     */\\n    function setMaxFeePercentage(address smartVault, uint256 maxPct) external;\\n\\n    /**\\n     * @dev Sets a fee percentage for a smart vault\\n     * @param smartVault Address of smart vault to set a fee percentage for\\n     * @param pct Fee percentage to be set\\n     */\\n    function setFeePercentage(address smartVault, uint256 pct) external;\\n\\n    /**\\n     * @dev Sets a fee collector for a smart vault\\n     * @param smartVault Address of smart vault to set a fee collector for\\n     * @param collector Fee collector to be set\\n     */\\n    function setFeeCollector(address smartVault, address collector) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title FixedPoint\\n * @dev Math library to operate with fixed point values with 18 decimals\\n */\\nlibrary FixedPoint {\\n    // 1 in fixed point value: 18 decimal places\\n    uint256 internal constant ONE = 1e18;\\n\\n    /**\\n     * @dev Multiplication overflow\\n     */\\n    error FixedPointMulOverflow(uint256 a, uint256 b);\\n\\n    /**\\n     * @dev Division by zero\\n     */\\n    error FixedPointZeroDivision();\\n\\n    /**\\n     * @dev Division internal error\\n     */\\n    error FixedPointDivInternal(uint256 a, uint256 aInflated);\\n\\n    /**\\n     * @dev Multiplies two fixed point numbers rounding down\\n     */\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 product = a * b;\\n            if (a != 0 && product / a != b) revert FixedPointMulOverflow(a, b);\\n            return product / ONE;\\n        }\\n    }\\n\\n    /**\\n     * @dev Multiplies two fixed point numbers rounding up\\n     */\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 product = a * b;\\n            if (a != 0 && product / a != b) revert FixedPointMulOverflow(a, b);\\n            return product == 0 ? 0 : (((product - 1) / ONE) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two fixed point numbers rounding down\\n     */\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            if (b == 0) revert FixedPointZeroDivision();\\n            if (a == 0) return 0;\\n            uint256 aInflated = a * ONE;\\n            if (aInflated / a != ONE) revert FixedPointDivInternal(a, aInflated);\\n            return aInflated / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two fixed point numbers rounding up\\n     */\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            if (b == 0) revert FixedPointZeroDivision();\\n            if (a == 0) return 0;\\n            uint256 aInflated = a * ONE;\\n            if (aInflated / a != ONE) revert FixedPointDivInternal(a, aInflated);\\n            return ((aInflated - 1) / b) + 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-helpers/contracts/utils/BytesHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title BytesHelpers\\n * @dev Provides a list of Bytes helper methods\\n */\\nlibrary BytesHelpers {\\n    /**\\n     * @dev The length is shorter than start plus 32\\n     */\\n    error BytesOutOfBounds(uint256 start, uint256 length);\\n\\n    /**\\n     * @dev Concatenates an address to a bytes array\\n     */\\n    function concat(bytes memory self, address value) internal pure returns (bytes memory) {\\n        return abi.encodePacked(self, value);\\n    }\\n\\n    /**\\n     * @dev Concatenates an uint24 to a bytes array\\n     */\\n    function concat(bytes memory self, uint24 value) internal pure returns (bytes memory) {\\n        return abi.encodePacked(self, value);\\n    }\\n\\n    /**\\n     * @dev Decodes a bytes array into an uint256\\n     */\\n    function toUint256(bytes memory self) internal pure returns (uint256) {\\n        return toUint256(self, 0);\\n    }\\n\\n    /**\\n     * @dev Reads an uint256 from a bytes array starting at a given position\\n     */\\n    function toUint256(bytes memory self, uint256 start) internal pure returns (uint256 result) {\\n        if (self.length < start + 32) revert BytesOutOfBounds(start, self.length);\\n        assembly {\\n            result := mload(add(add(self, 0x20), start))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-helpers/contracts/utils/Denominations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Denominations\\n * @dev Provides a list of ground denominations for those tokens that cannot be represented by an ERC20.\\n * For now, the only needed is the native token that could be ETH, MATIC, or other depending on the layer being operated.\\n */\\nlibrary Denominations {\\n    address internal constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n    address internal constant USD = address(840);\\n\\n    function isNativeToken(address token) internal pure returns (bool) {\\n        return token == NATIVE_TOKEN;\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-helpers/contracts/utils/ERC20Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './Denominations.sol';\\n\\n/**\\n * @title ERC20Helpers\\n * @dev Provides a list of ERC20 helper methods\\n */\\nlibrary ERC20Helpers {\\n    function approve(address token, address to, uint256 amount) internal {\\n        SafeERC20.safeApprove(IERC20(token), to, 0);\\n        SafeERC20.safeApprove(IERC20(token), to, amount);\\n    }\\n\\n    function transfer(address token, address to, uint256 amount) internal {\\n        if (Denominations.isNativeToken(token)) Address.sendValue(payable(to), amount);\\n        else SafeERC20.safeTransfer(IERC20(token), to, amount);\\n    }\\n\\n    function balanceOf(address token, address account) internal view returns (uint256) {\\n        if (Denominations.isNativeToken(token)) return address(account).balance;\\n        else return IERC20(token).balanceOf(address(account));\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-helpers/contracts/utils/IWrappedNativeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title IWrappedNativeToken\\n */\\ninterface IWrappedNativeToken is IERC20 {\\n    /**\\n     * @dev Wraps msg.value into the wrapped-native token\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @dev Unwraps requested amount to the native token\\n     */\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-price-oracle/contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '@mimic-fi/v3-authorizer/contracts/interfaces/IAuthorized.sol';\\n\\n/**\\n * @title IPriceOracle\\n * @dev Price oracle interface\\n *\\n * Tells the price of a token (base) in a given quote based the following rule: the response is expressed using the\\n * corresponding number of decimals so that when performing a fixed point product of it by a `base` amount it results\\n * in a value expressed in `quote` decimals. For example, if `base` is ETH and `quote` is USDC, then the returned\\n * value is expected to be expressed using 6 decimals:\\n *\\n * FixedPoint.mul(X[ETH], price[USDC/ETH]) = FixedPoint.mul(X[18], price[6]) = X * price [6]\\n */\\ninterface IPriceOracle is IAuthorized {\\n    /**\\n     * @dev Price data\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     * @param rate Price of a token (base) expressed in `quote`\\n     * @param deadline Expiration timestamp until when the given quote is considered valid\\n     */\\n    struct PriceData {\\n        address base;\\n        address quote;\\n        uint256 rate;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev The signer is not allowed\\n     */\\n    error PriceOracleInvalidSigner(address signer);\\n\\n    /**\\n     * @dev The feed for the given (base, quote) pair doesn't exist\\n     */\\n    error PriceOracleMissingFeed(address base, address quote);\\n\\n    /**\\n     * @dev The price deadline is in the past\\n     */\\n    error PriceOracleOutdatedPrice(address base, address quote, uint256 deadline, uint256 currentTimestamp);\\n\\n    /**\\n     * @dev The base decimals are bigger than the quote decimals plus the fixed point decimals\\n     */\\n    error PriceOracleBaseDecimalsTooBig(address base, uint256 baseDecimals, address quote, uint256 quoteDecimals);\\n\\n    /**\\n     * @dev The inverse feed decimals are bigger than the maximum inverse feed decimals\\n     */\\n    error PriceOracleInverseFeedDecimalsTooBig(address inverseFeed, uint256 inverseFeedDecimals);\\n\\n    /**\\n     * @dev The quote feed decimals are bigger than the base feed decimals plus the fixed point decimals\\n     */\\n    error PriceOracleQuoteFeedDecimalsTooBig(uint256 quoteFeedDecimals, uint256 baseFeedDecimals);\\n\\n    /**\\n     * @dev Emitted every time a signer is changed\\n     */\\n    event SignerSet(address indexed signer, bool allowed);\\n\\n    /**\\n     * @dev Emitted every time a feed is set for (base, quote) pair\\n     */\\n    event FeedSet(address indexed base, address indexed quote, address feed);\\n\\n    /**\\n     * @dev Tells whether an address is as an allowed signer or not\\n     * @param signer Address of the signer being queried\\n     */\\n    function isSignerAllowed(address signer) external view returns (bool);\\n\\n    /**\\n     * @dev Tells the list of allowed signers\\n     */\\n    function getAllowedSigners() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Tells the digest expected to be signed by the off-chain oracle signers for a list of prices\\n     * @param prices List of prices to be signed\\n     */\\n    function getPricesDigest(PriceData[] memory prices) external view returns (bytes32);\\n\\n    /**\\n     * @dev Tells the price of a token `base` expressed in a token `quote`\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     */\\n    function getPrice(address base, address quote) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the price of a token `base` expressed in a token `quote`\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     * @param data Encoded data to validate in order to compute the requested rate\\n     */\\n    function getPrice(address base, address quote, bytes memory data) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the feed address for (base, quote) pair. It returns the zero address if there is no one set.\\n     * @param base Token to be rated\\n     * @param quote Token used for the price rate\\n     */\\n    function getFeed(address base, address quote) external view returns (address);\\n\\n    /**\\n     * @dev Sets a signer condition\\n     * @param signer Address of the signer to be set\\n     * @param allowed Whether the requested signer is allowed\\n     */\\n    function setSigner(address signer, bool allowed) external;\\n\\n    /**\\n     * @dev Sets a feed for a (base, quote) pair\\n     * @param base Token base to be set\\n     * @param quote Token quote to be set\\n     * @param feed Feed to be set\\n     */\\n    function setFeed(address base, address quote, address feed) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-price-oracle/contracts/PriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeCast.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport '@mimic-fi/v3-authorizer/contracts/Authorized.sol';\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-helpers/contracts/utils/BytesHelpers.sol';\\n\\nimport './interfaces/IPriceOracle.sol';\\n\\n/**\\n * @title OnChainOracle\\n * @dev Price oracle mixing both on-chain and off-chain oracle alternatives\\n *\\n * The on-chain oracle that interfaces with Chainlink feeds to provide rates between two tokens. This oracle only\\n * operates with ERC20 tokens, it does not allow querying quotes for any other denomination. Additionally, it only\\n * supports feeds that implement ChainLink's proposed `AggregatorV3Interface` interface.\\n *\\n *  The off-chain oracle that uses off-chain signatures to compute prices between two tokens\\n */\\ncontract PriceOracle is IPriceOracle, Authorized, ReentrancyGuardUpgradeable {\\n    using FixedPoint for uint256;\\n    using BytesHelpers for bytes;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Number of decimals used for fixed point operations: 18\\n    uint256 private constant FP_DECIMALS = 18;\\n\\n    // Maximum number of decimals supported for a token when computing inverse quotes: 36\\n    uint256 private constant INVERSE_FEED_MAX_DECIMALS = 36;\\n\\n    // It allows denoting a single token to pivot between feeds in case a direct path is not available\\n    address public pivot;\\n\\n    // Mapping of feeds from \\\"token A\\\" to \\\"token B\\\"\\n    mapping (address => mapping (address => address)) public override getFeed;\\n\\n    // Enumerable set of trusted signers\\n    EnumerableSet.AddressSet private _signers;\\n\\n    /**\\n     * @dev Feed data, only used during initialization\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     * @param feed Chainlink oracle to fetch the given pair price\\n     */\\n    struct FeedData {\\n        address base;\\n        address quote;\\n        address feed;\\n    }\\n\\n    /**\\n     * @dev Initializes the price oracle\\n     * @param _authorizer Address of the authorizer to be set\\n     * @param _signer Address of the initial allowed signer\\n     * @param _pivot Address of the token to be used as the pivot\\n     * @param _feeds List of feeds to be initialized with\\n     */\\n    function initialize(address _authorizer, address _signer, address _pivot, FeedData[] memory _feeds)\\n        external\\n        initializer\\n    {\\n        __PriceOracle_init(_authorizer, _signer, _pivot, _feeds);\\n    }\\n\\n    /**\\n     * @dev Initializes the price oracle. It does call upper contracts initializers.\\n     * @param _authorizer Address of the authorizer to be set\\n     * @param _signer Address of the initial allowed signer\\n     * @param _pivot Address of the token to be used as the pivot\\n     * @param _feeds List of feeds to be initialized with\\n     */\\n    function __PriceOracle_init(address _authorizer, address _signer, address _pivot, FeedData[] memory _feeds)\\n        internal\\n        onlyInitializing\\n    {\\n        __ReentrancyGuard_init();\\n        __Authorized_init(_authorizer);\\n        __PriceOracle_init_unchained(_authorizer, _signer, _pivot, _feeds);\\n    }\\n\\n    /**\\n     * @dev Initializes the price oracle. It does not call upper contracts initializers.\\n     * @param _signer Address of the initial allowed signer\\n     * @param _pivot Address of the token to be used as the pivot\\n     * @param _feeds List of feeds to be initialized with\\n     */\\n    function __PriceOracle_init_unchained(address, address _signer, address _pivot, FeedData[] memory _feeds)\\n        internal\\n        onlyInitializing\\n    {\\n        _setSigner(_signer, true);\\n        pivot = _pivot;\\n        for (uint256 i = 0; i < _feeds.length; i++) _setFeed(_feeds[i].base, _feeds[i].quote, _feeds[i].feed);\\n    }\\n\\n    /**\\n     * @dev Tells whether an address is as an allowed signer or not\\n     * @param signer Address of the signer being queried\\n     */\\n    function isSignerAllowed(address signer) public view override returns (bool) {\\n        return _signers.contains(signer);\\n    }\\n\\n    /**\\n     * @dev Tells the list of allowed signers\\n     */\\n    function getAllowedSigners() external view override returns (address[] memory) {\\n        return _signers.values();\\n    }\\n\\n    /**\\n     * @dev Tells the digest expected to be signed by the off-chain oracle signers for a list of prices\\n     * @param prices List of prices to be signed\\n     */\\n    function getPricesDigest(PriceData[] memory prices) public pure override returns (bytes32) {\\n        return ECDSA.toEthSignedMessageHash(keccak256(abi.encode(prices)));\\n    }\\n\\n    /**\\n     * @dev Tells the price of a token (base) in a given quote. The response is expressed using the corresponding\\n     * number of decimals so that when performing a fixed point product of it by a `base` amount it results in\\n     * a value expressed in `quote` decimals.\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     */\\n    function getPrice(address base, address quote) public view override returns (uint256) {\\n        if (base == quote) return FixedPoint.ONE;\\n\\n        // If `base * result / 1e18` must be expressed in `quote` decimals, then\\n        uint256 baseDecimals = IERC20Metadata(base).decimals();\\n        uint256 quoteDecimals = IERC20Metadata(quote).decimals();\\n\\n        bool areBaseDecimalsTooBig = baseDecimals > quoteDecimals + FP_DECIMALS;\\n        if (areBaseDecimalsTooBig) revert PriceOracleBaseDecimalsTooBig(base, baseDecimals, quote, quoteDecimals);\\n\\n        // No need for checked math as we are checking it manually beforehand\\n        uint256 resultDecimals = quoteDecimals + FP_DECIMALS - baseDecimals;\\n        (uint256 price, uint256 decimals) = _getPrice(base, quote);\\n        return _scalePrice(price, decimals, resultDecimals);\\n    }\\n\\n    /**\\n     /**\\n     * @dev Tries fetching a price for base/quote pair from an external encoded data. It fall-backs using the on-chain\\n     * oracle in case the require price is missing. It reverts in case the off-chain data verification fails.\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     * @param data Encoded prices data along with its corresponding signature\\n     */\\n    function getPrice(address base, address quote, bytes memory data) external view override returns (uint256) {\\n        if (base == quote) return FixedPoint.ONE;\\n\\n        PriceData[] memory prices = _decodePricesData(data);\\n        for (uint256 i = 0; i < prices.length; i++) {\\n            PriceData memory price = prices[i];\\n            if (price.base == base && price.quote == quote) {\\n                bool isPastDeadline = price.deadline < block.timestamp;\\n                if (isPastDeadline) revert PriceOracleOutdatedPrice(base, quote, price.deadline, block.timestamp);\\n                return price.rate;\\n            }\\n        }\\n\\n        return getPrice(base, quote);\\n    }\\n\\n    /**\\n     * @dev Sets a signer condition\\n     * @param signer Address of the signer to be set\\n     * @param allowed Whether the requested signer is allowed\\n     */\\n    function setSigner(address signer, bool allowed) external override nonReentrant authP(authParams(signer, allowed)) {\\n        _setSigner(signer, allowed);\\n    }\\n\\n    /**\\n     * @dev Sets a feed for a (base, quote) pair. Sender must be authorized.\\n     * @param base Token base to be set\\n     * @param quote Token quote to be set\\n     * @param feed Feed to be set\\n     */\\n    function setFeed(address base, address quote, address feed)\\n        external\\n        override\\n        nonReentrant\\n        authP(authParams(base, quote, feed))\\n    {\\n        _setFeed(base, quote, feed);\\n    }\\n\\n    /**\\n     * @dev Tells the price of a token (base) in a given quote.\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     * @return price Requested price rate\\n     * @return decimals Decimals of the requested price rate\\n     */\\n    function _getPrice(address base, address quote) internal view returns (uint256 price, uint256 decimals) {\\n        address feed = getFeed[base][quote];\\n        if (feed != address(0)) return _getFeedData(feed);\\n\\n        address inverseFeed = getFeed[quote][base];\\n        if (inverseFeed != address(0)) return _getInversePrice(inverseFeed);\\n\\n        address baseFeed = getFeed[base][pivot];\\n        address quoteFeed = getFeed[quote][pivot];\\n        if (baseFeed != address(0) && quoteFeed != address(0)) return _getPivotPrice(baseFeed, quoteFeed);\\n\\n        revert PriceOracleMissingFeed(base, quote);\\n    }\\n\\n    /**\\n     * @dev Fetches data from a Chainlink feed\\n     * @param feed Address of the Chainlink feed to fetch data from. It must support ChainLink `AggregatorV3Interface`.\\n     * @return price Requested price\\n     * @return decimals Decimals of the requested price\\n     */\\n    function _getFeedData(address feed) internal view returns (uint256 price, uint256 decimals) {\\n        decimals = AggregatorV3Interface(feed).decimals();\\n        (, int256 priceInt, , , ) = AggregatorV3Interface(feed).latestRoundData();\\n        price = SafeCast.toUint256(priceInt);\\n    }\\n\\n    /**\\n     * @dev Tells a price based on an inverse feed\\n     * @param inverseFeed Feed of the inverse pair\\n     * @return price Requested price rate\\n     * @return decimals Decimals of the requested price rate\\n     */\\n    function _getInversePrice(address inverseFeed) internal view returns (uint256 price, uint256 decimals) {\\n        (uint256 inversePrice, uint256 inverseFeedDecimals) = _getFeedData(inverseFeed);\\n        bool areInverseFeedDecimalsTooBig = inverseFeedDecimals > INVERSE_FEED_MAX_DECIMALS;\\n        if (areInverseFeedDecimalsTooBig) revert PriceOracleInverseFeedDecimalsTooBig(inverseFeed, inverseFeedDecimals);\\n\\n        // Prices are requested for different purposes, we are rounding down always to follow a single strategy\\n        price = FixedPoint.ONE.divDown(inversePrice);\\n        decimals = INVERSE_FEED_MAX_DECIMALS - inverseFeedDecimals;\\n    }\\n\\n    /**\\n     * @dev Report a price based on two relative feeds\\n     * @param baseFeed Feed of the base token\\n     * @param quoteFeed Feed of the quote token\\n     * @return price Requested price rate\\n     * @return decimals Decimals of the requested price rate\\n     */\\n    function _getPivotPrice(address baseFeed, address quoteFeed)\\n        internal\\n        view\\n        returns (uint256 price, uint256 decimals)\\n    {\\n        (uint256 basePrice, uint256 baseFeedDecimals) = _getFeedData(baseFeed);\\n        (uint256 quotePrice, uint256 quoteFeedDecimals) = _getFeedData(quoteFeed);\\n\\n        bool areQuoteFeedDecimalsTooBig = quoteFeedDecimals > baseFeedDecimals + FP_DECIMALS;\\n        if (areQuoteFeedDecimalsTooBig) revert PriceOracleQuoteFeedDecimalsTooBig(quoteFeedDecimals, baseFeedDecimals);\\n\\n        // Price is base/quote = (base/pivot) / (quote/pivot)\\n        // Prices are requested for different purposes, we are rounding down always to follow a single strategy\\n        price = basePrice.divDown(quotePrice);\\n        decimals = baseFeedDecimals + FP_DECIMALS - quoteFeedDecimals;\\n    }\\n\\n    /**\\n     * @dev Upscales or downscale a price rate\\n     * @param price Value to be scaled\\n     * @param priceDecimals Decimals in which `price` is originally represented\\n     * @return resultDecimals Decimals requested for the result\\n     */\\n    function _scalePrice(uint256 price, uint256 priceDecimals, uint256 resultDecimals) internal pure returns (uint256) {\\n        return\\n            resultDecimals >= priceDecimals\\n                ? (price * 10**(resultDecimals - priceDecimals))\\n                : (price / 10**(priceDecimals - resultDecimals));\\n    }\\n\\n    /**\\n     * @dev Decodes a list of off-chain encoded prices. It returns an empty array in case it is malformed. It reverts\\n     * if the data is considered properly encoded but the signer is not allowed.\\n     * @param data Data to be decoded\\n     */\\n    function _decodePricesData(bytes memory data) internal view returns (PriceData[] memory) {\\n        if (!_isOffChainDataEncodedProperly(data)) return new PriceData[](0);\\n\\n        (PriceData[] memory prices, bytes memory signature) = abi.decode(data, (PriceData[], bytes));\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(getPricesDigest(prices), signature);\\n\\n        bool isSignerValid = error == ECDSA.RecoverError.NoError && isSignerAllowed(recovered);\\n        if (!isSignerValid) revert PriceOracleInvalidSigner(recovered);\\n        return prices;\\n    }\\n\\n    /**\\n     * @dev Sets the off-chain oracle signer\\n     * @param signer Address of the signer to be set\\n     */\\n    function _setSigner(address signer, bool allowed) internal {\\n        allowed ? _signers.add(signer) : _signers.remove(signer);\\n        emit SignerSet(signer, allowed);\\n    }\\n\\n    /**\\n     * @dev Sets a new feed for a (base, quote) pair\\n     * @param base Token base to be set\\n     * @param quote Token quote to be set\\n     * @param feed Feed to be set\\n     */\\n    function _setFeed(address base, address quote, address feed) internal {\\n        getFeed[base][quote] = feed;\\n        emit FeedSet(base, quote, feed);\\n    }\\n\\n    /**\\n     * @dev Tells if a data array is encoded as expected for a list off-chain prices\\n     * @param data Data to be evaluated\\n     */\\n    function _isOffChainDataEncodedProperly(bytes memory data) private pure returns (bool) {\\n        // Check the minimum expected data length based on how ABI encoding works.\\n        // Considering the structure (PriceData[], bytes), the encoding should have the following pattern:\\n        //\\n        // [ PRICES OFFSET ][ SIG OFFSET ][ PRICES DATA LENGTH ][ PRICES DATA ][ SIG LENGTH ][ VRS SIG ]\\n        // [       32      ][     32     ][         32         ][   N * 128   ][     32     ][  32 * 3 ]\\n        //\\n        // Therefore the minimum length expected is:\\n        uint256 minimumLength = 32 + 32 + 32 + 32 + 96;\\n        if (data.length < minimumLength) return false;\\n\\n        // There must be at least the same number of bytes specified by the prices offset value:\\n        uint256 pricesOffset = data.toUint256(0);\\n        if (data.length < pricesOffset) return false;\\n\\n        // The exact expected data length can be now computed based on the prices length:\\n        uint256 pricesLength = data.toUint256(pricesOffset);\\n        if (data.length != minimumLength + (pricesLength * 128)) return false;\\n\\n        // The signature offset can be computed based on the prices length:\\n        uint256 signatureOffset = data.toUint256(32);\\n        if (signatureOffset != (32 * 3) + (pricesLength * 128)) return false;\\n\\n        // Finally the signature length must be 64 or 65:\\n        uint256 signatureLength = data.toUint256(signatureOffset);\\n        if (signatureLength != 64 && signatureLength != 65) return false;\\n\\n        // Finally confirm the data types for each of the price data attributes:\\n        for (uint256 i = 0; i < pricesLength; i++) {\\n            uint256 offset = i * 128;\\n\\n            // Base should be a valid address\\n            uint256 priceBase = data.toUint256(32 * 3 + offset);\\n            if (priceBase > type(uint160).max) return false;\\n\\n            // Quote should be a valid address\\n            uint256 priceQuote = data.toUint256(32 * 4 + offset);\\n            if (priceQuote > type(uint160).max) return false;\\n        }\\n\\n        // Otherwise the data can be decoded properly\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-registry/contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport './IRegistry.sol';\\n\\n/**\\n * @dev Registry interface\\n */\\ninterface IRegistry {\\n    /**\\n     * @dev The implementation address is zero\\n     */\\n    error RegistryImplementationAddressZero();\\n\\n    /**\\n     * @dev The implementation is already registered\\n     */\\n    error RegistryImplementationRegistered(address implementation);\\n\\n    /**\\n     * @dev The implementation is not registered\\n     */\\n    error RegistryImplementationNotRegistered(address implementation);\\n\\n    /**\\n     * @dev The implementation is already deprecated\\n     */\\n    error RegistryImplementationDeprecated(address implementation);\\n\\n    /**\\n     * @dev Emitted every time an implementation is registered\\n     */\\n    event Registered(address indexed implementation, string name, bool stateless);\\n\\n    /**\\n     * @dev Emitted every time an implementation is deprecated\\n     */\\n    event Deprecated(address indexed implementation);\\n\\n    /**\\n     * @dev Tells whether an implementation is registered\\n     * @param implementation Address of the implementation being queried\\n     */\\n    function isRegistered(address implementation) external view returns (bool);\\n\\n    /**\\n     * @dev Tells whether an implementation is stateless or not\\n     * @param implementation Address of the implementation being queried\\n     */\\n    function isStateless(address implementation) external view returns (bool);\\n\\n    /**\\n     * @dev Tells whether an implementation is deprecated\\n     * @param implementation Address of the implementation being queried\\n     */\\n    function isDeprecated(address implementation) external view returns (bool);\\n\\n    /**\\n     * @dev Creates and registers an implementation\\n     * @param name Name of the implementation\\n     * @param code Code of the implementation to create and register\\n     * @param stateless Whether the new implementation is considered stateless or not\\n     */\\n    function create(string memory name, bytes memory code, bool stateless) external;\\n\\n    /**\\n     * @dev Registers an implementation\\n     * @param name Name of the implementation\\n     * @param implementation Address of the implementation to be registered\\n     * @param stateless Whether the given implementation is considered stateless or not\\n     */\\n    function register(string memory name, address implementation, bool stateless) external;\\n\\n    /**\\n     * @dev Deprecates an implementation\\n     * @param implementation Address of the implementation to be deprecated\\n     */\\n    function deprecate(address implementation) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-smart-vault/contracts/interfaces/ISmartVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '@mimic-fi/v3-authorizer/contracts/interfaces/IAuthorized.sol';\\n\\n/**\\n * @dev Smart Vault interface\\n */\\ninterface ISmartVault is IAuthorized {\\n    /**\\n     * @dev The smart vault is paused\\n     */\\n    error SmartVaultPaused();\\n\\n    /**\\n     * @dev The smart vault is unpaused\\n     */\\n    error SmartVaultUnpaused();\\n\\n    /**\\n     * @dev The token is zero\\n     */\\n    error SmartVaultTokenZero();\\n\\n    /**\\n     * @dev The amount is zero\\n     */\\n    error SmartVaultAmountZero();\\n\\n    /**\\n     * @dev The recipient is zero\\n     */\\n    error SmartVaultRecipientZero();\\n\\n    /**\\n     * @dev The connector is deprecated\\n     */\\n    error SmartVaultConnectorDeprecated(address connector);\\n\\n    /**\\n     * @dev The connector is not registered\\n     */\\n    error SmartVaultConnectorNotRegistered(address connector);\\n\\n    /**\\n     * @dev The connector is not stateless\\n     */\\n    error SmartVaultConnectorNotStateless(address connector);\\n\\n    /**\\n     * @dev The connector ID is zero\\n     */\\n    error SmartVaultBalanceConnectorIdZero();\\n\\n    /**\\n     * @dev The balance connector's balance is lower than the requested amount to be deducted\\n     */\\n    error SmartVaultBalanceConnectorInsufficientBalance(bytes32 id, address token, uint256 balance, uint256 amount);\\n\\n    /**\\n     * @dev The smart vault's native token balance is lower than the requested amount to be deducted\\n     */\\n    error SmartVaultInsufficientNativeTokenBalance(uint256 balance, uint256 amount);\\n\\n    /**\\n     * @dev Emitted every time a smart vault is paused\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted every time a smart vault is unpaused\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted every time the price oracle is set\\n     */\\n    event PriceOracleSet(address indexed priceOracle);\\n\\n    /**\\n     * @dev Emitted every time a connector check is overridden\\n     */\\n    event ConnectorCheckOverridden(address indexed connector, bool ignored);\\n\\n    /**\\n     * @dev Emitted every time a balance connector is updated\\n     */\\n    event BalanceConnectorUpdated(bytes32 indexed id, address indexed token, uint256 amount, bool added);\\n\\n    /**\\n     * @dev Emitted every time `execute` is called\\n     */\\n    event Executed(address indexed connector, bytes data, bytes result);\\n\\n    /**\\n     * @dev Emitted every time `call` is called\\n     */\\n    event Called(address indexed target, bytes data, uint256 value, bytes result);\\n\\n    /**\\n     * @dev Emitted every time `wrap` is called\\n     */\\n    event Wrapped(uint256 amount);\\n\\n    /**\\n     * @dev Emitted every time `unwrap` is called\\n     */\\n    event Unwrapped(uint256 amount);\\n\\n    /**\\n     * @dev Emitted every time `collect` is called\\n     */\\n    event Collected(address indexed token, address indexed from, uint256 amount);\\n\\n    /**\\n     * @dev Emitted every time `withdraw` is called\\n     */\\n    event Withdrawn(address indexed token, address indexed recipient, uint256 amount, uint256 fee);\\n\\n    /**\\n     * @dev Tells if the smart vault is paused or not\\n     */\\n    function isPaused() external view returns (bool);\\n\\n    /**\\n     * @dev Tells the address of the price oracle\\n     */\\n    function priceOracle() external view returns (address);\\n\\n    /**\\n     * @dev Tells the address of the Mimic's registry\\n     */\\n    function registry() external view returns (address);\\n\\n    /**\\n     * @dev Tells the address of the Mimic's fee controller\\n     */\\n    function feeController() external view returns (address);\\n\\n    /**\\n     * @dev Tells the address of the wrapped native token\\n     */\\n    function wrappedNativeToken() external view returns (address);\\n\\n    /**\\n     * @dev Tells if a connector check is ignored\\n     * @param connector Address of the connector being queried\\n     */\\n    function isConnectorCheckIgnored(address connector) external view returns (bool);\\n\\n    /**\\n     * @dev Tells the balance to a balance connector for a token\\n     * @param id Balance connector identifier\\n     * @param token Address of the token querying the balance connector for\\n     */\\n    function getBalanceConnector(bytes32 id, address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells whether someone has any permission over the smart vault\\n     */\\n    function hasPermissions(address who) external view returns (bool);\\n\\n    /**\\n     * @dev Pauses a smart vault\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses a smart vault\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @dev Sets the price oracle\\n     * @param newPriceOracle Address of the new price oracle to be set\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @dev Overrides connector checks\\n     * @param connector Address of the connector to override its check\\n     * @param ignored Whether the connector check should be ignored\\n     */\\n    function overrideConnectorCheck(address connector, bool ignored) external;\\n\\n    /**\\n     * @dev Updates a balance connector\\n     * @param id Balance connector identifier to be updated\\n     * @param token Address of the token to update the balance connector for\\n     * @param amount Amount to be updated to the balance connector\\n     * @param add Whether the balance connector should be increased or decreased\\n     */\\n    function updateBalanceConnector(bytes32 id, address token, uint256 amount, bool add) external;\\n\\n    /**\\n     * @dev Executes a connector inside of the Smart Vault context\\n     * @param connector Address of the connector that will be executed\\n     * @param data Call data to be used for the delegate-call\\n     * @return result Call response if it was successful, otherwise it reverts\\n     */\\n    function execute(address connector, bytes memory data) external returns (bytes memory result);\\n\\n    /**\\n     * @dev Executes an arbitrary call from the Smart Vault\\n     * @param target Address where the call will be sent\\n     * @param data Call data to be used for the call\\n     * @param value Value in wei that will be attached to the call\\n     * @return result Call response if it was successful, otherwise it reverts\\n     */\\n    function call(address target, bytes memory data, uint256 value) external returns (bytes memory result);\\n\\n    /**\\n     * @dev Wrap an amount of native tokens to the wrapped ERC20 version of it\\n     * @param amount Amount of native tokens to be wrapped\\n     */\\n    function wrap(uint256 amount) external;\\n\\n    /**\\n     * @dev Unwrap an amount of wrapped native tokens\\n     * @param amount Amount of wrapped native tokens to unwrapped\\n     */\\n    function unwrap(uint256 amount) external;\\n\\n    /**\\n     * @dev Collect tokens from an external account to the Smart Vault\\n     * @param token Address of the token to be collected\\n     * @param from Address where the tokens will be transferred from\\n     * @param amount Amount of tokens to be transferred\\n     */\\n    function collect(address token, address from, uint256 amount) external;\\n\\n    /**\\n     * @dev Withdraw tokens to an external account\\n     * @param token Address of the token to be withdrawn\\n     * @param recipient Address where the tokens will be transferred to\\n     * @param amount Amount of tokens to withdraw\\n     */\\n    function withdraw(address token, address recipient, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-smart-vault/contracts/SmartVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport '@mimic-fi/v3-authorizer/contracts/Authorized.sol';\\nimport '@mimic-fi/v3-authorizer/contracts/interfaces/IAuthorizer.sol';\\nimport '@mimic-fi/v3-fee-controller/contracts/interfaces/IFeeController.sol';\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-helpers/contracts/utils/ERC20Helpers.sol';\\nimport '@mimic-fi/v3-helpers/contracts/utils/IWrappedNativeToken.sol';\\nimport '@mimic-fi/v3-price-oracle/contracts/interfaces/IPriceOracle.sol';\\nimport '@mimic-fi/v3-registry/contracts/interfaces/IRegistry.sol';\\n\\nimport './interfaces/ISmartVault.sol';\\n\\n/**\\n * @title Smart Vault\\n * @dev Core component where the interaction with the DeFi world occurs\\n */\\ncontract SmartVault is ISmartVault, Authorized, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using FixedPoint for uint256;\\n\\n    // Whether the smart vault is paused or not\\n    bool public override isPaused;\\n\\n    // Price oracle reference\\n    address public override priceOracle;\\n\\n    // Mimic registry reference\\n    address public immutable override registry;\\n\\n    // Mimic fee controller reference\\n    address public immutable override feeController;\\n\\n    // Wrapped native token reference\\n    address public immutable override wrappedNativeToken;\\n\\n    // Tells whether a connector check is ignored or not\\n    mapping (address => bool) public override isConnectorCheckIgnored;\\n\\n    // Balance connectors are used to define separate tasks workflows, indexed from id and token address\\n    mapping (bytes32 => mapping (address => uint256)) public override getBalanceConnector;\\n\\n    /**\\n     * @dev Modifier to tag smart vault functions in order to check if it is paused\\n     */\\n    modifier notPaused() {\\n        if (isPaused) revert SmartVaultPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a new Smart Vault implementation with the references that should be shared among all implementations\\n     * @param _registry Address of the Mimic registry to be referenced\\n     * @param _feeController Address of the Mimic fee controller to be referenced\\n     * @param _wrappedNativeToken Address of the wrapped native token to be used\\n     */\\n    constructor(address _registry, address _feeController, address _wrappedNativeToken) {\\n        registry = _registry;\\n        feeController = _feeController;\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n\\n    /**\\n     * @dev Initializes the smart vault\\n     * @param _authorizer Address of the authorizer to be linked\\n     * @param _priceOracle Address of the price oracle to be set, it is ignored in case it's zero\\n     */\\n    function initialize(address _authorizer, address _priceOracle) external virtual initializer {\\n        __SmartVault_init(_authorizer, _priceOracle);\\n    }\\n\\n    /**\\n     * @dev Initializes the smart vault. It does call upper contracts initializers.\\n     * @param _authorizer Address of the authorizer to be linked\\n     * @param _priceOracle Address of the price oracle to be set, it is ignored in case it's zero\\n     */\\n    function __SmartVault_init(address _authorizer, address _priceOracle) internal onlyInitializing {\\n        __ReentrancyGuard_init();\\n        __Authorized_init(_authorizer);\\n        __SmartVault_init_unchained(_authorizer, _priceOracle);\\n    }\\n\\n    /**\\n     * @dev Initializes the smart vault. It does not call upper contracts initializers.\\n     * @param _priceOracle Address of the price oracle to be set, it is ignored in case it's zero\\n     */\\n    function __SmartVault_init_unchained(address, address _priceOracle) internal onlyInitializing {\\n        _setPriceOracle(_priceOracle);\\n    }\\n\\n    /**\\n     * @dev It allows receiving native token transfers\\n     */\\n    receive() external payable {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Tells whether someone has any permission over the smart vault\\n     */\\n    function hasPermissions(address who) external view override returns (bool) {\\n        return _hasPermissions(who);\\n    }\\n\\n    /**\\n     * @dev Pauses a smart vault. Sender must be authorized.\\n     */\\n    function pause() external override auth {\\n        if (isPaused) revert SmartVaultPaused();\\n        isPaused = true;\\n        emit Paused();\\n    }\\n\\n    /**\\n     * @dev Unpauses a smart vault. Sender must be authorized.\\n     */\\n    function unpause() external override auth {\\n        if (!isPaused) revert SmartVaultUnpaused();\\n        isPaused = false;\\n        emit Unpaused();\\n    }\\n\\n    /**\\n     * @dev Sets the price oracle. Sender must be authorized. Smart vault must not be paused.\\n     * @param newPriceOracle Address of the new price oracle to be set\\n     */\\n    function setPriceOracle(address newPriceOracle)\\n        external\\n        override\\n        nonReentrant\\n        notPaused\\n        authP(authParams(newPriceOracle))\\n    {\\n        _setPriceOracle(newPriceOracle);\\n    }\\n\\n    /**\\n     * @dev Overrides connector checks. Sender must be authorized. Smart vault must not be paused.\\n     * @param connector Address of the connector to override its check\\n     * @param ignored Whether the connector check should be ignored\\n     */\\n    function overrideConnectorCheck(address connector, bool ignored)\\n        external\\n        override\\n        nonReentrant\\n        notPaused\\n        authP(authParams(connector, ignored))\\n    {\\n        isConnectorCheckIgnored[connector] = ignored;\\n        emit ConnectorCheckOverridden(connector, ignored);\\n    }\\n\\n    /**\\n     * @dev Updates a balance connector. Sender must be authorized. Smart vault must not be paused.\\n     * @param id Balance connector identifier to be updated\\n     * @param token Address of the token to update the balance connector for\\n     * @param amount Amount to be updated to the balance connector\\n     * @param add Whether the balance connector should be increased or decreased\\n     */\\n    function updateBalanceConnector(bytes32 id, address token, uint256 amount, bool add)\\n        external\\n        override\\n        nonReentrant\\n        notPaused\\n        authP(authParams(id, token, amount, add))\\n    {\\n        if (id == bytes32(0)) revert SmartVaultBalanceConnectorIdZero();\\n        if (token == address(0)) revert SmartVaultTokenZero();\\n        (add ? _increaseBalanceConnector : _decreaseBalanceConnector)(id, token, amount);\\n    }\\n\\n    /**\\n     * @dev Executes a connector inside of the Smart Vault context. Sender must be authorized. Smart vault must not be paused.\\n     * @param connector Address of the connector that will be executed\\n     * @param data Call data to be used for the delegate-call\\n     * @return result Call response if it was successful, otherwise it reverts\\n     */\\n    function execute(address connector, bytes memory data)\\n        external\\n        override\\n        nonReentrant\\n        notPaused\\n        authP(authParams(connector))\\n        returns (bytes memory result)\\n    {\\n        _validateConnector(connector);\\n        result = Address.functionDelegateCall(connector, data, 'SMART_VAULT_EXECUTE_FAILED');\\n        emit Executed(connector, data, result);\\n    }\\n\\n    /**\\n     * @dev Executes an arbitrary call from the Smart Vault. Sender must be authorized. Smart vault must not be paused.\\n     * @param target Address where the call will be sent\\n     * @param data Call data to be used for the call\\n     * @param value Value in wei that will be attached to the call\\n     * @return result Call response if it was successful, otherwise it reverts\\n     */\\n    function call(address target, bytes memory data, uint256 value)\\n        external\\n        override\\n        nonReentrant\\n        notPaused\\n        authP(authParams(target))\\n        returns (bytes memory result)\\n    {\\n        result = Address.functionCallWithValue(target, data, value, 'SMART_VAULT_CALL_FAILED');\\n        emit Called(target, data, value, result);\\n    }\\n\\n    /**\\n     * @dev Wrap an amount of native tokens to the wrapped ERC20 version of it. Sender must be authorized. Smart vault must not be paused.\\n     * @param amount Amount of native tokens to be wrapped\\n     */\\n    function wrap(uint256 amount) external override nonReentrant notPaused authP(authParams(amount)) {\\n        if (amount == 0) revert SmartVaultAmountZero();\\n        uint256 balance = address(this).balance;\\n        if (balance < amount) revert SmartVaultInsufficientNativeTokenBalance(balance, amount);\\n        IWrappedNativeToken(wrappedNativeToken).deposit{ value: amount }();\\n        emit Wrapped(amount);\\n    }\\n\\n    /**\\n     * @dev Unwrap an amount of wrapped native tokens. Sender must be authorized. Smart vault must not be paused.\\n     * @param amount Amount of wrapped native tokens to unwrapped\\n     */\\n    function unwrap(uint256 amount) external override nonReentrant notPaused authP(authParams(amount)) {\\n        if (amount == 0) revert SmartVaultAmountZero();\\n        IWrappedNativeToken(wrappedNativeToken).withdraw(amount);\\n        emit Unwrapped(amount);\\n    }\\n\\n    /**\\n     * @dev Collect tokens from an external account to the Smart Vault. Sender must be authorized. Smart vault must not be paused.\\n     * @param token Address of the token to be collected\\n     * @param from Address where the tokens will be transferred from\\n     * @param amount Amount of tokens to be transferred\\n     */\\n    function collect(address token, address from, uint256 amount)\\n        external\\n        override\\n        nonReentrant\\n        notPaused\\n        authP(authParams(token, from, amount))\\n    {\\n        if (amount == 0) revert SmartVaultAmountZero();\\n        IERC20(token).safeTransferFrom(from, address(this), amount);\\n        emit Collected(token, from, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw tokens to an external account. Sender must be authorized. Smart vault must not be paused.\\n     * @param token Address of the token to be withdrawn\\n     * @param recipient Address where the tokens will be transferred to\\n     * @param amount Amount of tokens to withdraw\\n     */\\n    function withdraw(address token, address recipient, uint256 amount)\\n        external\\n        override\\n        nonReentrant\\n        notPaused\\n        authP(authParams(token, recipient, amount))\\n    {\\n        if (amount == 0) revert SmartVaultAmountZero();\\n        if (recipient == address(0)) revert SmartVaultRecipientZero();\\n\\n        (, uint256 pct, address collector) = IFeeController(feeController).getFee(address(this));\\n        uint256 feeAmount = amount.mulDown(pct);\\n        _safeTransfer(token, collector, feeAmount);\\n\\n        uint256 withdrawn = amount - feeAmount;\\n        _safeTransfer(token, recipient, withdrawn);\\n        emit Withdrawn(token, recipient, withdrawn, feeAmount);\\n    }\\n\\n    /**\\n     * @dev Transfers ERC20 or native tokens from the Smart Vault to an external account\\n     * @param token Address of the ERC20 token to transfer\\n     * @param to Address transferring the tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function _safeTransfer(address token, address to, uint256 amount) internal {\\n        if (amount == 0) return;\\n        ERC20Helpers.transfer(token, to, amount);\\n    }\\n\\n    /**\\n     * @dev Sets the price oracle instance\\n     * @param newPriceOracle Address of the new price oracle to be set\\n     */\\n    function _setPriceOracle(address newPriceOracle) internal {\\n        priceOracle = newPriceOracle;\\n        emit PriceOracleSet(newPriceOracle);\\n    }\\n\\n    /**\\n     * @dev Increases a balance connector\\n     * @param id Balance connector id to be increased\\n     * @param token Address of the token to increase the balance connector for\\n     * @param amount Amount to be added to the connector\\n     */\\n    function _increaseBalanceConnector(bytes32 id, address token, uint256 amount) internal {\\n        getBalanceConnector[id][token] += amount;\\n        emit BalanceConnectorUpdated(id, token, amount, true);\\n    }\\n\\n    /**\\n     * @dev Decreases a balance connector\\n     * @param id Balance connector id\\n     * @param token Address of the token to decrease the balance connector for\\n     * @param amount Amount to be added to the connector\\n     */\\n    function _decreaseBalanceConnector(bytes32 id, address token, uint256 amount) internal {\\n        uint256 value = getBalanceConnector[id][token];\\n        if (value < amount) revert SmartVaultBalanceConnectorInsufficientBalance(id, token, value, amount);\\n        getBalanceConnector[id][token] = value - amount;\\n        emit BalanceConnectorUpdated(id, token, amount, false);\\n    }\\n\\n    /**\\n     * @dev Validates a connector against the Mimic Registry\\n     * @param connector Address of the connector to validate\\n     */\\n    function _validateConnector(address connector) private view {\\n        if (isConnectorCheckIgnored[connector]) return;\\n        if (!IRegistry(registry).isRegistered(connector)) revert SmartVaultConnectorNotRegistered(connector);\\n        if (!IRegistry(registry).isStateless(connector)) revert SmartVaultConnectorNotStateless(connector);\\n        if (IRegistry(registry).isDeprecated(connector)) revert SmartVaultConnectorDeprecated(connector);\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-tasks/contracts/base/BaseTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-authorizer/contracts/Authorized.sol';\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-helpers/contracts/utils/Denominations.sol';\\nimport '@mimic-fi/v3-price-oracle/contracts/interfaces/IPriceOracle.sol';\\nimport '@mimic-fi/v3-smart-vault/contracts/interfaces/ISmartVault.sol';\\n\\nimport '../interfaces/base/IBaseTask.sol';\\n\\n/**\\n * @title BaseTask\\n * @dev Base task implementation with a Smart Vault reference and using the Authorizer\\n */\\nabstract contract BaseTask is IBaseTask, Authorized {\\n    // Smart Vault reference\\n    address public override smartVault;\\n\\n    // Optional balance connector id for the previous task in the workflow\\n    bytes32 public override previousBalanceConnectorId;\\n\\n    // Optional balance connector id for the next task in the workflow\\n    bytes32 public override nextBalanceConnectorId;\\n\\n    /**\\n     * @dev Base task config. Only used in the initializer.\\n     * @param smartVault Address of the smart vault this task will reference, it cannot be changed once set\\n     * @param previousBalanceConnectorId Balance connector id for the previous task in the workflow\\n     * @param nextBalanceConnectorId Balance connector id for the next task in the workflow\\n     */\\n    struct BaseConfig {\\n        address smartVault;\\n        bytes32 previousBalanceConnectorId;\\n        bytes32 nextBalanceConnectorId;\\n    }\\n\\n    /**\\n     * @dev Initializes the base task. It does call upper contracts initializers.\\n     * @param config Base task config\\n     */\\n    function __BaseTask_init(BaseConfig memory config) internal onlyInitializing {\\n        __Authorized_init(ISmartVault(config.smartVault).authorizer());\\n        __BaseTask_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the base task. It does not call upper contracts initializers.\\n     * @param config Base task config\\n     */\\n    function __BaseTask_init_unchained(BaseConfig memory config) internal onlyInitializing {\\n        smartVault = config.smartVault;\\n        _setBalanceConnectors(config.previousBalanceConnectorId, config.nextBalanceConnectorId);\\n    }\\n\\n    /**\\n     * @dev Tells the address from where the token amounts to execute this task are fetched.\\n     * Since by default tasks are supposed to use balance connectors, the tokens source has to be the smart vault.\\n     * In case a task does not need to rely on a previous balance connector, it must override this function to specify\\n     * where it is getting its tokens from.\\n     */\\n    function getTokensSource() external view virtual override returns (address) {\\n        return smartVault;\\n    }\\n\\n    /**\\n     * @dev Tells the amount a task should use for a token. By default tasks are expected to use balance connectors.\\n     * In case a task relies on an external tokens source, it must override how the task amount is calculated.\\n     * @param token Address of the token being queried\\n     */\\n    function getTaskAmount(address token) public view virtual override returns (uint256) {\\n        return ISmartVault(smartVault).getBalanceConnector(previousBalanceConnectorId, token);\\n    }\\n\\n    /**\\n     * @dev Sets the balance connectors\\n     * @param previous Balance connector id of the previous task in the workflow\\n     * @param next Balance connector id of the next task in the workflow\\n     */\\n    function setBalanceConnectors(bytes32 previous, bytes32 next) external override authP(authParams(previous, next)) {\\n        _setBalanceConnectors(previous, next);\\n    }\\n\\n    /**\\n     * @dev Tells the wrapped native token address if the given address is the native token\\n     * @param token Address of the token to be checked\\n     */\\n    function _wrappedIfNative(address token) internal view returns (address) {\\n        return Denominations.isNativeToken(token) ? _wrappedNativeToken() : token;\\n    }\\n\\n    /**\\n     * @dev Tells whether a token is the native or the wrapped native token\\n     * @param token Address of the token to be checked\\n     */\\n    function _isWrappedOrNative(address token) internal view returns (bool) {\\n        return Denominations.isNativeToken(token) || token == _wrappedNativeToken();\\n    }\\n\\n    /**\\n     * @dev Tells the wrapped native token address\\n     */\\n    function _wrappedNativeToken() internal view returns (address) {\\n        return ISmartVault(smartVault).wrappedNativeToken();\\n    }\\n\\n    /**\\n     * @dev Fetches a base/quote price from the smart vault's price oracle\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     */\\n    function _getPrice(address base, address quote) internal view virtual returns (uint256) {\\n        address priceOracle = ISmartVault(smartVault).priceOracle();\\n        if (priceOracle == address(0)) revert TaskSmartVaultPriceOracleNotSet(smartVault);\\n        bytes memory extraCallData = _decodeExtraCallData();\\n        return\\n            extraCallData.length == 0\\n                ? IPriceOracle(priceOracle).getPrice(_wrappedIfNative(base), _wrappedIfNative(quote))\\n                : IPriceOracle(priceOracle).getPrice(_wrappedIfNative(base), _wrappedIfNative(quote), extraCallData);\\n    }\\n\\n    /**\\n     * @dev Before base task hook\\n     */\\n    function _beforeBaseTask(address token, uint256 amount) internal virtual {\\n        _decreaseBalanceConnector(token, amount);\\n    }\\n\\n    /**\\n     * @dev After base task hook\\n     */\\n    function _afterBaseTask(address, uint256) internal virtual {\\n        emit Executed();\\n    }\\n\\n    /**\\n     * @dev Decreases the previous balance connector in the smart vault if defined\\n     * @param token Address of the token to update the previous balance connector of\\n     * @param amount Amount to be updated\\n     */\\n    function _decreaseBalanceConnector(address token, uint256 amount) internal {\\n        if (previousBalanceConnectorId != bytes32(0)) {\\n            ISmartVault(smartVault).updateBalanceConnector(previousBalanceConnectorId, token, amount, false);\\n        }\\n    }\\n\\n    /**\\n     * @dev Increases the next balance connector in the smart vault if defined\\n     * @param token Address of the token to update the next balance connector of\\n     * @param amount Amount to be updated\\n     */\\n    function _increaseBalanceConnector(address token, uint256 amount) internal {\\n        if (nextBalanceConnectorId != bytes32(0)) {\\n            ISmartVault(smartVault).updateBalanceConnector(nextBalanceConnectorId, token, amount, true);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the balance connectors\\n     * @param previous Balance connector id of the previous task in the workflow\\n     * @param next Balance connector id of the next task in the workflow\\n     */\\n    function _setBalanceConnectors(bytes32 previous, bytes32 next) internal virtual {\\n        if (previous == next && previous != bytes32(0)) revert TaskSameBalanceConnectors(previous);\\n        previousBalanceConnectorId = previous;\\n        nextBalanceConnectorId = next;\\n        emit BalanceConnectorsSet(previous, next);\\n    }\\n\\n    /**\\n     * @dev Decodes any potential extra calldata stored in the calldata space. Tasks relying on the extra calldata\\n     * pattern, assume that the last word of the calldata stores the extra calldata length so it can be decoded. Note\\n     * that tasks relying on this pattern must contemplate this function may return bogus data if no extra calldata\\n     * was given.\\n     */\\n    function _decodeExtraCallData() private pure returns (bytes memory data) {\\n        uint256 length = uint256(_decodeLastCallDataWord());\\n        if (msg.data.length < length) return new bytes(0);\\n        data = new bytes(length);\\n        assembly {\\n            calldatacopy(add(data, 0x20), sub(sub(calldatasize(), length), 0x20), length)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the last calldata word. This function returns zero if the calldata is not long enough.\\n     */\\n    function _decodeLastCallDataWord() private pure returns (bytes32 result) {\\n        if (msg.data.length < 36) return bytes32(0);\\n        assembly {\\n            result := calldataload(sub(calldatasize(), 0x20))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-tasks/contracts/interfaces/base/IBaseTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '@mimic-fi/v3-authorizer/contracts/interfaces/IAuthorized.sol';\\n\\n/**\\n * @dev Base task interface\\n */\\ninterface IBaseTask is IAuthorized {\\n    // Execution type serves for relayers in order to distinguish how each task must be executed\\n    // solhint-disable-next-line func-name-mixedcase\\n    function EXECUTION_TYPE() external view returns (bytes32);\\n\\n    /**\\n     * @dev The balance connectors are the same\\n     */\\n    error TaskSameBalanceConnectors(bytes32 connectorId);\\n\\n    /**\\n     * @dev The smart vault's price oracle is not set\\n     */\\n    error TaskSmartVaultPriceOracleNotSet(address smartVault);\\n\\n    /**\\n     * @dev Emitted every time a task is executed\\n     */\\n    event Executed();\\n\\n    /**\\n     * @dev Emitted every time the balance connectors are set\\n     */\\n    event BalanceConnectorsSet(bytes32 indexed previous, bytes32 indexed next);\\n\\n    /**\\n     * @dev Tells the address of the Smart Vault tied to it, it cannot be changed\\n     */\\n    function smartVault() external view returns (address);\\n\\n    /**\\n     * @dev Tells the balance connector id of the previous task in the workflow\\n     */\\n    function previousBalanceConnectorId() external view returns (bytes32);\\n\\n    /**\\n     * @dev Tells the balance connector id of the next task in the workflow\\n     */\\n    function nextBalanceConnectorId() external view returns (bytes32);\\n\\n    /**\\n     * @dev Tells the address from where the token amounts to execute this task are fetched.\\n     * This address must the the Smart Vault in case the previous balance connector is set.\\n     */\\n    function getTokensSource() external view returns (address);\\n\\n    /**\\n     * @dev Tells the amount a task should use for a token\\n     * @param token Address of the token being queried\\n     */\\n    function getTaskAmount(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets the balance connector IDs\\n     * @param previous Balance connector id of the previous task in the workflow\\n     * @param next Balance connector id of the next task in the workflow\\n     */\\n    function setBalanceConnectors(bytes32 previous, bytes32 next) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Deployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at you[r option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport 'solmate/src/utils/CREATE3.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport '@mimic-fi/v3-authorizer/contracts/Authorizer.sol';\\nimport '@mimic-fi/v3-price-oracle/contracts/PriceOracle.sol';\\nimport '@mimic-fi/v3-smart-vault/contracts/SmartVault.sol';\\nimport '@mimic-fi/v3-registry/contracts/interfaces/IRegistry.sol';\\n\\nimport './interfaces/IDeployer.sol';\\n\\ncontract Deployer is IDeployer {\\n    using Address for address;\\n\\n    // Registry reference\\n    address public immutable override registry;\\n\\n    /**\\n     * @dev Creates a new Deployer contract\\n     * @param _registry Address of the Mimic Registry to be referenced\\n     */\\n    constructor(address _registry) {\\n        registry = _registry;\\n    }\\n\\n    /**\\n     * @dev Tells the deployed address for a given input\\n     */\\n    function getAddress(address sender, string memory namespace, string memory name)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return CREATE3.getDeployed(getSalt(sender, namespace, name));\\n    }\\n\\n    /**\\n     * @dev Tells the salt for a given input\\n     */\\n    function getSalt(address sender, string memory namespace, string memory name)\\n        public\\n        pure\\n        override\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(sender, namespace, name));\\n    }\\n\\n    /**\\n     * @dev Deploys a new authorizer instance\\n     */\\n    function deployAuthorizer(string memory namespace, string memory name, AuthorizerParams memory params)\\n        external\\n        override\\n    {\\n        _validateImplementation(params.impl);\\n        address instance = _deployClone(namespace, name, params.impl);\\n        Authorizer(instance).initialize(params.owners);\\n        emit AuthorizerDeployed(namespace, name, instance, params.impl);\\n    }\\n\\n    /**\\n     * @dev Deploys a new price oracle instance\\n     */\\n    function deployPriceOracle(string memory namespace, string memory name, PriceOracleParams memory params)\\n        external\\n        override\\n    {\\n        _validateImplementation(params.impl);\\n        address instance = _deployClone(namespace, name, params.impl);\\n        PriceOracle(instance).initialize(params.authorizer, params.signer, params.pivot, _castFeedsData(params.feeds));\\n        emit PriceOracleDeployed(namespace, name, instance, params.impl);\\n    }\\n\\n    /**\\n     * @dev Deploys a new smart vault instance\\n     */\\n    function deploySmartVault(string memory namespace, string memory name, SmartVaultParams memory params)\\n        external\\n        override\\n    {\\n        _validateImplementation(params.impl);\\n        address payable instance = payable(_deployClone(namespace, name, params.impl));\\n        SmartVault(instance).initialize(params.authorizer, params.priceOracle);\\n        emit SmartVaultDeployed(namespace, name, instance, params.impl);\\n    }\\n\\n    /**\\n     * @dev Deploys a new task instance\\n     */\\n    function deployTask(string memory namespace, string memory name, TaskParams memory params) external override {\\n        if (!params.custom) _validateImplementation(params.impl);\\n        address instance = _deployClone(namespace, name, params.impl);\\n        if (params.initializeData.length > 0) instance.functionCall(params.initializeData, 'DEPLOYER_TASK_INIT_FAILED');\\n        emit TaskDeployed(namespace, name, instance, params.impl);\\n    }\\n\\n    /**\\n     * @dev Validates if an implementation is registered, not deprecated, and considered stateful\\n     * @param implementation Address of the implementation to be checked\\n     */\\n    function _validateImplementation(address implementation) internal view {\\n        IRegistry reg = IRegistry(registry);\\n        if (!reg.isRegistered(implementation)) revert DeployerImplementationNotRegistered(implementation);\\n        if (reg.isStateless(implementation)) revert DeployerImplementationStateless(implementation);\\n        if (reg.isDeprecated(implementation)) revert DeployerImplementationDeprecated(implementation);\\n    }\\n\\n    /**\\n     * @dev Deploys a new clone using CREATE3\\n     */\\n    function _deployClone(string memory namespace, string memory name, address implementation)\\n        internal\\n        returns (address)\\n    {\\n        if (bytes(namespace).length == 0) revert DeployerNamespaceEmpty();\\n        if (bytes(name).length == 0) revert DeployerNameEmpty();\\n\\n        bytes memory bytecode = abi.encodePacked(\\n            hex'3d602d80600a3d3981f3363d3d373d3d3d363d73',\\n            implementation,\\n            hex'5af43d82803e903d91602b57fd5bf3'\\n        );\\n\\n        bytes32 salt = getSalt(msg.sender, namespace, name);\\n        return CREATE3.deploy(salt, bytecode, 0);\\n    }\\n\\n    /**\\n     * @dev Casts a feed data array into a price oracle's feed data array type\\n     */\\n    function _castFeedsData(FeedData[] memory feeds) private pure returns (PriceOracle.FeedData[] memory result) {\\n        assembly {\\n            result := feeds\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at you[r option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\ninterface IDeployer {\\n    /**\\n     * @dev The namespace is empty\\n     */\\n    error DeployerNamespaceEmpty();\\n\\n    /**\\n     * @dev The name is empty\\n     */\\n    error DeployerNameEmpty();\\n\\n    /**\\n     * @dev The implementation is not registered\\n     */\\n    error DeployerImplementationNotRegistered(address implementation);\\n\\n    /**\\n     * @dev The implementation is stateless\\n     */\\n    error DeployerImplementationStateless(address implementation);\\n\\n    /**\\n     * @dev The implementation is deprecated\\n     */\\n    error DeployerImplementationDeprecated(address implementation);\\n\\n    /**\\n     * @dev Emitted every time an authorizer is deployed\\n     */\\n    event AuthorizerDeployed(string namespace, string name, address instance, address implementation);\\n\\n    /**\\n     * @dev Emitted every time a price oracle is deployed\\n     */\\n    event PriceOracleDeployed(string namespace, string name, address instance, address implementation);\\n\\n    /**\\n     * @dev Emitted every time a smart vault is deployed\\n     */\\n    event SmartVaultDeployed(string namespace, string name, address instance, address implementation);\\n\\n    /**\\n     * @dev Emitted every time a task is deployed\\n     */\\n    event TaskDeployed(string namespace, string name, address instance, address implementation);\\n\\n    /**\\n     * @dev Tells the registry address\\n     */\\n    function registry() external view returns (address);\\n\\n    /**\\n     * @dev Authorizer params\\n     * @param impl Address of the Authorizer implementation to be used\\n     * @param owners List of addresses that will be allowed to authorize and unauthorize permissions\\n     */\\n    struct AuthorizerParams {\\n        address impl;\\n        address[] owners;\\n    }\\n\\n    /**\\n     * @dev Price oracle params\\n     * @param impl Address of the Price Oracle implementation to be used\\n     * @param authorizer Address of the authorizer to be linked\\n     * @param signer Address of the allowed signer\\n     * @param pivot Address of the token to be used as the pivot\\n     * @param feeds List of feeds to be set for the price oracle\\n     */\\n    struct PriceOracleParams {\\n        address impl;\\n        address authorizer;\\n        address signer;\\n        address pivot;\\n        FeedData[] feeds;\\n    }\\n\\n    /**\\n     * @dev Price oracle feed data\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     * @param feed Price feed address\\n     */\\n    struct FeedData {\\n        address base;\\n        address quote;\\n        address feed;\\n    }\\n\\n    /**\\n     * @dev Smart vault params\\n     * @param impl Address of the Smart Vault implementation to be used\\n     * @param authorizer Address of the authorizer to be linked\\n     * @param priceOracle Optional price Oracle to set for the Smart Vault\\n     */\\n    struct SmartVaultParams {\\n        address impl;\\n        address authorizer;\\n        address priceOracle;\\n    }\\n\\n    /**\\n     * @dev Task params\\n     * @param custom Whether the implementation is custom or not, if it is it won't be checked with Mimic's Registry\\n     * @param impl Address of the task implementation to be used\\n     * @param initializeData Call-data to initialize the new task instance\\n     */\\n    struct TaskParams {\\n        bool custom;\\n        address impl;\\n        bytes initializeData;\\n    }\\n\\n    /**\\n     * @dev Tells the deployed address for a given input\\n     */\\n    function getAddress(address sender, string memory namespace, string memory name) external view returns (address);\\n\\n    /**\\n     * @dev Tells the salt for a given input\\n     */\\n    function getSalt(address sender, string memory namespace, string memory name) external pure returns (bytes32);\\n\\n    /**\\n     * @dev Deploys a new authorizer instance\\n     */\\n    function deployAuthorizer(string memory namespace, string memory name, AuthorizerParams memory params) external;\\n\\n    /**\\n     * @dev Deploys a new price oracle instance\\n     */\\n    function deployPriceOracle(string memory namespace, string memory name, PriceOracleParams memory params) external;\\n\\n    /**\\n     * @dev Deploys a new smart vault instance\\n     */\\n    function deploySmartVault(string memory namespace, string memory name, SmartVaultParams memory params) external;\\n\\n    /**\\n     * @dev Deploys a new task instance\\n     */\\n    function deployTask(string memory namespace, string memory name, TaskParams memory params) external;\\n}\\n\"\r\n    },\r\n    \"contracts/test/TaskMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-tasks/contracts/base/BaseTask.sol';\\n\\ncontract TaskMock is BaseTask {\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('TASK');\\n\\n    function initialize(BaseConfig memory config) external virtual initializer {\\n        __BaseTask_init(config);\\n    }\\n}\\n\"\r\n    },\r\n    \"solmate/src/utils/Bytes32AddressLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Library for converting between addresses and bytes32 values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Bytes32AddressLib.sol)\\nlibrary Bytes32AddressLib {\\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\\n        return address(uint160(uint256(bytesValue)));\\n    }\\n\\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\\n        return bytes32(bytes20(addressValue));\\n    }\\n}\\n\"\r\n    },\r\n    \"solmate/src/utils/CREATE3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {Bytes32AddressLib} from \\\"./Bytes32AddressLib.sol\\\";\\n\\n/// @notice Deploy to deterministic addresses without an initcode factor.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/CREATE3.sol)\\n/// @author Modified from 0xSequence (https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol)\\nlibrary CREATE3 {\\n    using Bytes32AddressLib for bytes32;\\n\\n    //--------------------------------------------------------------------------------//\\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\\n    //--------------------------------------------------------------------------------//\\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 0 size               //\\n    // 0x37       |  0x37                 | CALLDATACOPY     |                        //\\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\\n    // 0x34       |  0x34                 | CALLVALUE        | value 0 size           //\\n    // 0xf0       |  0xf0                 | CREATE           | newContract            //\\n    //--------------------------------------------------------------------------------//\\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\\n    //--------------------------------------------------------------------------------//\\n    // 0x67       |  0x67XXXXXXXXXXXXXXXX | PUSH8 bytecode   | bytecode               //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 bytecode             //\\n    // 0x52       |  0x52                 | MSTORE           |                        //\\n    // 0x60       |  0x6008               | PUSH1 08         | 8                      //\\n    // 0x60       |  0x6018               | PUSH1 18         | 24 8                   //\\n    // 0xf3       |  0xf3                 | RETURN           |                        //\\n    //--------------------------------------------------------------------------------//\\n    bytes internal constant PROXY_BYTECODE = hex\\\"67_36_3d_3d_37_36_3d_34_f0_3d_52_60_08_60_18_f3\\\";\\n\\n    bytes32 internal constant PROXY_BYTECODE_HASH = keccak256(PROXY_BYTECODE);\\n\\n    function deploy(\\n        bytes32 salt,\\n        bytes memory creationCode,\\n        uint256 value\\n    ) internal returns (address deployed) {\\n        bytes memory proxyChildBytecode = PROXY_BYTECODE;\\n\\n        address proxy;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Deploy a new contract with our pre-made bytecode via CREATE2.\\n            // We start 32 bytes into the code to avoid copying the byte length.\\n            proxy := create2(0, add(proxyChildBytecode, 32), mload(proxyChildBytecode), salt)\\n        }\\n        require(proxy != address(0), \\\"DEPLOYMENT_FAILED\\\");\\n\\n        deployed = getDeployed(salt);\\n        (bool success, ) = proxy.call{value: value}(creationCode);\\n        require(success && deployed.code.length != 0, \\\"INITIALIZATION_FAILED\\\");\\n    }\\n\\n    function getDeployed(bytes32 salt) internal view returns (address) {\\n        address proxy = keccak256(\\n            abi.encodePacked(\\n                // Prefix:\\n                bytes1(0xFF),\\n                // Creator:\\n                address(this),\\n                // Salt:\\n                salt,\\n                // Bytecode hash:\\n                PROXY_BYTECODE_HASH\\n            )\\n        ).fromLast20Bytes();\\n\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    // 0xd6 = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x01)\\n                    // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)\\n                    hex\\\"d6_94\\\",\\n                    proxy,\\n                    hex\\\"01\\\" // Nonce of the proxy contract (1)\\n                )\\n            ).fromLast20Bytes();\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"DeployerImplementationDeprecated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"DeployerImplementationNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"DeployerImplementationStateless\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeployerNameEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeployerNamespaceEmpty\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"namespace\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"AuthorizerDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"namespace\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"PriceOracleDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"namespace\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"SmartVaultDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"namespace\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"TaskDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"namespace\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"}],\"internalType\":\"struct IDeployer.AuthorizerParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"deployAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"namespace\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pivot\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"}],\"internalType\":\"struct IDeployer.FeedData[]\",\"name\":\"feeds\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IDeployer.PriceOracleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"deployPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"namespace\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"}],\"internalType\":\"struct IDeployer.SmartVaultParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"deploySmartVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"namespace\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"custom\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initializeData\",\"type\":\"bytes\"}],\"internalType\":\"struct IDeployer.TaskParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"deployTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"namespace\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"namespace\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getSalt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Deployer", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000001675bf3f75046acd131cad845eb8ff3bed49a643", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}