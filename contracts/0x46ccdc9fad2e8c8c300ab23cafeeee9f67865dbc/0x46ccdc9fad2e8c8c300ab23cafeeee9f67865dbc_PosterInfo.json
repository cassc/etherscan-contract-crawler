{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/deca-posters/PosterInfo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport {IRoleAuthority} from \\\"../interfaces/internal/IRoleAuthority.sol\\\";\\n\\nimport {IPosterInfo} from \\\"../interfaces/internal/IPosterInfo.sol\\\";\\n\\n/**\\n * @title PosterInfo contract.\\n * @notice The contract handles Deca Posters hash.\\n * @author j6i, 0x-jj\\n */\\ncontract PosterInfo is IPosterInfo {\\n  /*//////////////////////////////////////////////////////////////\\n                                STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice The address of the RoleAuthority used to determine whether an address has some admin role.\\n   */\\n  IRoleAuthority private immutable _roleAuthority;\\n\\n  /**\\n   * @notice Is the poster hash used.\\n   */\\n  mapping(bytes32 => bool) public isPosterHashUsed;\\n\\n  /**\\n   * @notice Poster tokenId to expiry timestamp.\\n   */\\n  mapping(uint256 => uint256) public posterExpiryTimestamp;\\n\\n  /**\\n   * @notice Poster tokenId to whether the owner has claimed their free mint.\\n   */\\n  mapping(uint256 => bool) public ownerMinted;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                              CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n  constructor(IRoleAuthority _roleAuthority_) {\\n    _roleAuthority = _roleAuthority_;\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                              EXTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Check whether a poster can be minted.\\n   * @param tokenId The tokenId of the poster.\\n   * @return Whether a poster can be minted.\\n   */\\n  function isMintActive(uint256 tokenId) external view returns (bool) {\\n    return block.timestamp < posterExpiryTimestamp[tokenId];\\n  }\\n\\n  /**\\n   * @notice Set the poster info.\\n   * @param _mintHash The mint hash of the poster.\\n   * @param _tokenId The tokenId of the poster.\\n   * @param _ownerMint Whether the owner is minting.\\n   * @param _mintEndsAt When the mint ends.\\n   */\\n  function setPosterInfoWithMintPeriod(\\n    bytes32 _mintHash,\\n    uint256 _tokenId,\\n    bool _ownerMint,\\n    uint256 _mintEndsAt\\n  ) external {\\n    if (!_roleAuthority.isPosterMinter(msg.sender)) revert NotPosterMinter();\\n    if (_ownerMint) {\\n      if (ownerMinted[_tokenId]) revert OwnerAlreadyMinted();\\n\\n      ownerMinted[_tokenId] = true;\\n    }\\n    if (posterExpiryTimestamp[_tokenId] == 0) {\\n      posterExpiryTimestamp[_tokenId] = _mintEndsAt;\\n      emit FirstPosterMinted(_tokenId, _mintEndsAt);\\n    }\\n    isPosterHashUsed[_mintHash] = true;\\n  }\\n\\n  /**\\n   * @notice Set the poster info.\\n   * @param _mintHash The mint hash of the poster.\\n   * @param _tokenId The tokenId of the poster.\\n   * @param _ownerMint Whether the owner is minting.\\n   */\\n  function setPosterInfo(bytes32 _mintHash, uint256 _tokenId, bool _ownerMint) external {\\n    if (!_roleAuthority.isPosterMinter(msg.sender)) revert NotPosterMinter();\\n    if (_ownerMint) {\\n      if (ownerMinted[_tokenId]) revert OwnerAlreadyMinted();\\n\\n      ownerMinted[_tokenId] = true;\\n    }\\n    isPosterHashUsed[_mintHash] = true;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/internal/IPosterInfo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface IPosterInfo {\\n  error NotPosterMinter();\\n  error OwnerAlreadyMinted();\\n\\n  /**\\n   * @notice Emitted when the poster info is set for the first time.\\n   */\\n  event FirstPosterMinted(uint256 indexed tokenId, uint256 expiry);\\n\\n  function setPosterInfoWithMintPeriod(\\n    bytes32 _mintHash,\\n    uint256 _tokenId,\\n    bool _ownerMint,\\n    uint256 mintEndsAt\\n  ) external;\\n\\n  function setPosterInfo(bytes32 _mintHash, uint256 _tokenId, bool _ownerMint) external;\\n\\n  function isPosterHashUsed(bytes32 mintHash) external view returns (bool);\\n\\n  function posterExpiryTimestamp(uint256 tokenId) external view returns (uint256);\\n\\n  function isMintActive(uint256 tokenId) external view returns (bool);\\n\\n  function ownerMinted(uint256 tokenId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/internal/IRoleAuthority.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface IRoleAuthority {\\n  function isOperator(address _address) external view returns (bool);\\n\\n  function is721Minter(address _address) external view returns (bool);\\n\\n  function isMintPassSigner(address _address) external view returns (bool);\\n\\n  function isPosterMinter(address _address) external view returns (bool);\\n\\n  function isPosterSigner(address _address) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IRoleAuthority\",\"name\":\"_roleAuthority_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotPosterMinter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerAlreadyMinted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"FirstPosterMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isMintActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isPosterHashUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posterExpiryTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_mintHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_ownerMint\",\"type\":\"bool\"}],\"name\":\"setPosterInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_mintHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_ownerMint\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_mintEndsAt\",\"type\":\"uint256\"}],\"name\":\"setPosterInfoWithMintPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PosterInfo", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000007bcbbb69272937edd5b7b5bdd4a8ccd159c5dfbd", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}