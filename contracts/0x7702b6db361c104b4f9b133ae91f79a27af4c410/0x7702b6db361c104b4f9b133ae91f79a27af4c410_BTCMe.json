{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] memory path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n}\r\n\r\ncontract BTCMe {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    address private constant FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    address private constant ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n\r\n    address private constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address payable public owner;\r\n\r\n    address public tax = 0xc02D5a44038F9CEB266270FC098e8d951b52dA3D;\r\n\r\n    uint256 MAX_BTC = 35200 * (10 ** 6);\r\n\r\n    uint256 MIN_BTC = 11700 * (10 ** 6);\r\n\r\n    uint256 public Fee = 100; // 1%\r\n\r\n    bool isTrading = false;\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n\r\n    IUniswapV2Factory public uniswapFactory;\r\n\r\n    IUniswapV2Router public uniswapRouter;\r\n\r\n    address public pairAddress;\r\n\r\n    receive() external payable {}\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        uint256 _initialSupply\r\n    ) {\r\n        \r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        totalSupply = _initialSupply * (10 ** uint256(_decimals));\r\n\r\n        owner = payable(msg.sender);\r\n\r\n        balances[owner] = (10 * totalSupply) / 100;\r\n        balances[address(this)] = (90 * totalSupply) / 100;\r\n\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Must be creator\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrContract() {\r\n        require(msg.sender == owner || msg.sender == address(this), \"Only owner or contract can call this function\");\r\n        _;\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function renounceOnwership() public onlyOwner {\r\n        owner = payable(address(0));\r\n    }\r\n\r\n    function startTrading() public onlyOwner {\r\n\r\n        require(isTrading == false, \"Trading must have not started\");\r\n\r\n        uniswapFactory = IUniswapV2Factory(FACTORY);\r\n        pairAddress = uniswapFactory.createPair(address(this), WETH);\r\n        uniswapRouter = IUniswapV2Router(ROUTER);\r\n\r\n        uint256 ETHBalance = address(this).balance;\r\n\r\n        IERC20(address(this)).approve(ROUTER, balances[address(this)]);\r\n\r\n        uniswapRouter.addLiquidityETH{value:ETHBalance}(\r\n            address(this),\r\n            balances[address(this)],\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp + 20\r\n        );\r\n\r\n        isTrading = true;\r\n\r\n    }\r\n\r\n    function removeLiquidity() public onlyOwnerOrContract {\r\n\r\n        isTrading = false;\r\n\r\n        uint256 totalLiquidity = IERC20(pairAddress).balanceOf(address(this));\r\n        \r\n        IERC20(pairAddress).approve(address(uniswapRouter), totalLiquidity);\r\n\r\n        uniswapRouter.removeLiquidityETH(\r\n            address(this),\r\n            totalLiquidity,\r\n            0,\r\n            0,\r\n            owner,\r\n            block.timestamp + 20\r\n        );\r\n    }\r\n\r\n    function burnLiquidity() public onlyOwnerOrContract {\r\n        uint256 totalLiquidity = IERC20(pairAddress).balanceOf(address(this));\r\n        IERC20(pairAddress).transfer(DEAD, totalLiquidity);\r\n    }\r\n\r\n    function BTCPrice() public view returns (uint256) {\r\n        address[] memory path;\r\n        path = new address[](3);\r\n\r\n        path[0] = WBTC;\r\n        path[1] = WETH;\r\n        path[2] = USDT;        \r\n\r\n        uint256[] memory prices = uniswapRouter.getAmountsOut(10142 * (10 ** 4), path);\r\n\r\n        uint256 price = prices[path.length - 1];\r\n\r\n        return price;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n\r\n        _transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n\r\n        require(_to != address(0), \"Invalid recipient address\");\r\n        require(balances[_from] >= _value, \"Insufficient balance\");\r\n\r\n        uint256 _amount = _value;\r\n\r\n        if(!_isExcludedFromFees[_from] && !_isExcludedFromFees[_to]\r\n        ) {\r\n\r\n            uint256 fees = _value * Fee / 10000;\r\n\r\n            if(fees > 0) {\r\n                balances[tax] += fees;\r\n            }\r\n                _amount = _value - fees;\r\n\r\n        }\r\n\r\n        balances[_from] -= _value;\r\n        balances[_to] += _amount;\r\n\r\n\r\n        if (isTrading == true) {\r\n            \r\n            uint256 BTCToUSDT = BTCPrice();\r\n\r\n            if (BTCToUSDT >= MAX_BTC) {\r\n                burnLiquidity();\r\n            }\r\n            else if (BTCToUSDT <= MIN_BTC) {\r\n                removeLiquidity();\r\n            }\r\n\r\n        }\r\n\r\n        emit Transfer(_from, _to, _amount);\r\n\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\r\n        require(allowed[_from][msg.sender] >= _value, \"Allowance exceeded\");\r\n\r\n        _transfer(_from, _to, _value);\r\n\r\n        allowed[_from][msg.sender] -= _value;\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] += _addedValue;\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n        uint256 currentAllowance = allowed[msg.sender][_spender];\r\n        require(currentAllowance >= _subtractedValue, \"Allowance exceeded\");\r\n        allowed[msg.sender][_spender] = currentAllowance - _subtractedValue;\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function setFees(uint256 _Fee) public onlyOwner() {\r\n        require(_Fee <= 1000, \"buy tax too high\");\r\n        Fee = _Fee;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(_isExcludedFromFees[account] != excluded, \"Account is already the value of 'excluded'\");\r\n        _isExcludedFromFees[account] = excluded;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BTCPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOnwership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Fee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BTCMe", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000000000000000000000000000000000000000000f425443204d617267696e2045646765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054254434d45000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://39c6da2eaf8c919a43c301b3d111177e332f3588a6df659ba07579832d5f4edd"}