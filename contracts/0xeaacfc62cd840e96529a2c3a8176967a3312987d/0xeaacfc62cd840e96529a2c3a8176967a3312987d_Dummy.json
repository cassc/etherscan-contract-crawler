{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Dummy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\ncontract Dummy {\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address private immutable owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    function retrieve(uint256 am) external {\\n        address owner_ = owner;\\n        \\n        assembly {\\n            let ptr := mload(0x40)\\n            \\n            mstore(ptr, TRANSFER_SELECTOR)\\n            mstore(add(ptr, 0x04), owner_)\\n            mstore(add(ptr, 0x24), am)\\n\\n            let ans := call(gas(), WETH, 0, ptr, 0x44, 0, 0)\\n        }\\n    }\\n    \\n    receive() external payable {\\n        address WETH_ADDRESS = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n        assembly {\\n            // ---------------------------------------------------\\n            // 0. The value of the call\\n            // ---------------------------------------------------\\n            // callvalue = msg.value\\n            let _amount := callvalue()\\n\\n            // ---------------------------------------------------\\n            // 1. The Function Selector\\n            // ---------------------------------------------------\\n            // 0x2e1a7d4d (first 4 bytes of the keccak-256 hash of the string \\\"deposit()\\\")\\n            let functionSelector := 0x2e1a7d4d\\n\\n            // ---------------------------------------------------\\n            // 2. The Memory Layout\\n            // ---------------------------------------------------\\n            // Memory is divided into slots, and each slot is 32 bytes (256 bits).\\n            // The free memory pointer always points to the next available slot in memory.\\n            // mload(0x40) retrieves the current free memory pointer.\\n            let ptr := mload(0x40)\\n\\n            // ptr now points here (let's call this position A):\\n            // A: [            ???            ]\\n            // As you can see, it's uninitialized memory, indicated by ???.\\n\\n            // ---------------------------------------------------\\n            // 3. Creating Calldata\\n            // ---------------------------------------------------\\n            // Calldata for our call needs to be the function selector.\\n            // We store it at the position ptr (position A).\\n            mstore(ptr, functionSelector)\\n\\n            // Memory now looks like this:\\n            // A: [     functionSelector     ]\\n\\n            // But, Ethereum is big-endian, which means the most significant byte is stored at the smallest address.\\n            // So, our memory looks like this in a more detailed view:\\n            // A: [  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\\n            //      00 00 00 00 00 00 00 00 00 00 00 00 2e 1a 7d 4d  ]\\n\\n            // ---------------------------------------------------\\n            // 4. Making the External Call\\n            // ---------------------------------------------------\\n            // We are now ready to make the external call to the WETH contract.\\n            // call(gas, to, value, inOffset, inSize, outOffset, outSize) is the structure.\\n\\n            // gas() - Remaining gas for the transaction.\\n            // WETH_ADDRESS - The address of the WETH contract.\\n            // _amount - The ether value we're sending with the call.\\n            // add(functionSelector, 0x20) - Where our calldata starts in memory.\\n            // 0x04 - Size of our calldata (4 bytes for the function selector).\\n            // 0 - We don't expect any return data, so outOffset is 0.\\n            // 0 - We don't expect any return data, so outSize is 0.\\n            let result := call(gas(), WETH_ADDRESS, _amount, add(ptr, 0x20), 0x04, 0, 0)\\n\\n            // Check if the call was successful, if not revert.\\n            switch iszero(result)\\n            case 1 {\\n                // Store the error message in memory.\\n                let err := \\\"WETH: FAIL\\\"\\n\\n                mstore(ptr, err)\\n\\n                // Revert with our custom error message.\\n                revert(ptr, 10) // \\\"WETH: FAIL\\\" has 10 characters.\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@uniswap/v3-core/=lib/v3-core/\",\r\n      \"@uniswap/v3-periphery/=lib/v3-periphery/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"v3-core/=lib/v3-core/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/solmate:ds-test/=lib/solmate/lib/ds-test/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"am\",\"type\":\"uint256\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Dummy", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}