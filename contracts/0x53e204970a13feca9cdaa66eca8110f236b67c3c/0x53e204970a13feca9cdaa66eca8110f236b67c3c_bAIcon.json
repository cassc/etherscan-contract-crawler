{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bAIcon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.23;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"./EnE.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IdexRouter.sol\\\";\\r\\nimport \\\"./IdexFactory.sol\\\";\\r\\n\\r\\ncontract bAIcon is IERC20, AccessControl, EnE {\\r\\n    mapping (address => uint) private _balances;\\r\\n    mapping (address => mapping (address => uint)) private _allowances;\\r\\n    mapping(address => bool) private excludedFromWalletLimits;\\r\\n    mapping(address => bool) private excludedFromTransactionLimits;\\r\\n    mapping(address => bool) public excludedFromFees;\\r\\n    mapping(address=>bool) public isPair;\\r\\n\\r\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\r\\n\\r\\n    //strings\\r\\n    string private constant _name = 'bAIcon';\\r\\n    string private constant _symbol = 'bAIcon';\\r\\n\\r\\n    //uints\\r\\n    uint private constant InitialSupply= 916_000_000 * 10**_decimals;\\r\\n\\r\\n    //Tax by divisor of MAXTAXDENOMINATOR\\r\\n    uint public buyTax = 175;\\r\\n    uint public sellTax = 175;\\r\\n    uint public transferTax = 175;\\r\\n\\r\\n    //taxPct must equal TAX_DENOMINATOR\\r\\n    uint constant taxPct=10000;\\r\\n    uint constant TAX_DENOMINATOR=10000;\\r\\n    uint constant MAXBUYTAXDENOMINATOR=1000;\\r\\n    uint constant MAXTRANSFERTAXDENOMINATOR=1000;\\r\\n    uint constant MAXSELLTAXDENOMINATOR=1000;\\r\\n    //swapTreshold dynamic by LP pair balance\\r\\n    uint public swapTreshold=6;\\r\\n    uint private LaunchBlock;\\r\\n    uint8 private constant _decimals = 18;\\r\\n    uint256 public maxTransactionAmount;\\r\\n    uint256 public maxWalletBalance;\\r\\n\\r\\n    IdexRouter private  _dexRouter;\\r\\n\\r\\n    //addresses\\r\\n    address private dexRouter;\\r\\n    address private _dexPairAddress;\\r\\n    address constant deadWallet = 0x000000000000000000000000000000000000dEaD;\\r\\n    address private taxWallet;\\r\\n    address[] private path;\\r\\n\\r\\n    //bools\\r\\n    bool public tokenrcvr;\\r\\n    bool private _isSwappingContractModifier;\\r\\n    bool public manualSwap;\\r\\n\\r\\n    //modifiers\\r\\n    modifier lockTheSwap {\\r\\n        _isSwappingContractModifier = true;\\r\\n        _;\\r\\n        _isSwappingContractModifier = false;\\r\\n    }\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require(hasRole(MANAGER_ROLE, msg.sender), \\\"Not a manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor () {\\r\\n        _setupRole(MANAGER_ROLE, msg.sender);  // Setting up the manager role\\r\\n        \\r\\n        taxWallet = msg.sender;\\r\\n        dexRouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n\\r\\n        _balances[address(this)] = InitialSupply;\\r\\n\\r\\n        path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = WETH;\\r\\n\\r\\n        // Setting exclusions\\r\\n        SetExclusions(\\r\\n            [msg.sender, dexRouter, address(this)],\\r\\n            [msg.sender, deadWallet, address(this)],\\r\\n            [msg.sender, deadWallet, address(this)]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Set tax to receive tokens vs ETH\\r\\n    * @dev This function is for set tax to receive tokens vs ETH.\\r\\n    * @param yesNo The status of tax to receive tokens vs ETH.\\r\\n     */\\r\\n    function TokenTaxRCVRBool (\\r\\n        bool yesNo\\r\\n    ) external onlyManager {\\r\\n        tokenrcvr = yesNo;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n    * @notice Set Exclusions\\r\\n    * @dev This function is for set exclusions.\\r\\n    * @param feeExclusions The array of address to be excluded from fees.\\r\\n    * @param walletLimitExclusions The array of address to be excluded from wallet limits.\\r\\n    * @param transactionLimitExclusions The array of address to be excluded from transaction limits.\\r\\n     */\\r\\n    function SetExclusions(\\r\\n        address[3] memory feeExclusions, \\r\\n        address[3] memory walletLimitExclusions, \\r\\n        address[3] memory transactionLimitExclusions\\r\\n    ) internal {\\r\\n        for (uint256 i = 0; i < feeExclusions.length; ++i) {\\r\\n            excludedFromFees[feeExclusions[i]] = true;\\r\\n        }\\r\\n        for (uint256 i = 0; i < walletLimitExclusions.length; ++i) {\\r\\n            excludedFromWalletLimits[walletLimitExclusions[i]] = true;\\r\\n        }\\r\\n        for (uint256 i = 0; i < transactionLimitExclusions.length; ++i) {\\r\\n            excludedFromTransactionLimits[transactionLimitExclusions[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Internal function to transfer tokens from one address to another.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender, \\r\\n        address recipient, \\r\\n        uint amount\\r\\n    ) internal {\\r\\n        if(sender == address(0)) revert ZeroAddress();\\r\\n        if(recipient == address(0)) revert ZeroAddress();\\r\\n\\r\\n        if(excludedFromFees[sender] || excludedFromFees[recipient])\\r\\n            _feelessTransfer(sender, recipient, amount);\\r\\n        else {\\r\\n            require(LaunchBlock>0,\\\"trading not yet enabled\\\");\\r\\n            _taxedTransfer(sender,recipient,amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Transfer amount of tokens with fees.\\r\\n    * @param sender The address of user to send tokens.\\r\\n    * @param recipient The address of user to be recieved tokens.\\r\\n    * @param amount The token amount to transfer.\\r\\n    */\\r\\n    function _taxedTransfer(\\r\\n        address sender, \\r\\n        address recipient, \\r\\n        uint amount\\r\\n    ) internal {\\r\\n        uint senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"Transfer exceeds balance\\\");\\r\\n        bool excludedFromWalletLimitsAccount = excludedFromWalletLimits[sender] || excludedFromWalletLimits[recipient];\\r\\n        bool excludedFromTXNLimitsAccount = excludedFromTransactionLimits[sender] || excludedFromTransactionLimits[recipient];\\r\\n        if (\\r\\n            isPair[sender] &&\\r\\n            !excludedFromWalletLimitsAccount\\r\\n        ) {\\r\\n            if(!excludedFromTXNLimitsAccount){\\r\\n                require(\\r\\n                amount <= maxTransactionAmount,\\r\\n                \\\"Transfer amount exceeds the maxTxAmount.\\\"\\r\\n                );\\r\\n            }\\r\\n            uint256 contractBalanceRecepient = balanceOf(recipient);\\r\\n            require(\\r\\n                contractBalanceRecepient + amount <= maxWalletBalance,\\r\\n                \\\"Exceeds maximum wallet token amount.\\\"\\r\\n            );\\r\\n        } else if (\\r\\n            isPair[recipient] &&\\r\\n            !excludedFromTXNLimitsAccount\\r\\n        ) {\\r\\n            require(amount <= maxTransactionAmount, \\\"Sell transfer amount exceeds the maxSellTransactionAmount.\\\");\\r\\n        }\\r\\n\\r\\n        bool isBuy=isPair[sender];\\r\\n        bool isSell=isPair[recipient];\\r\\n        uint tax;\\r\\n\\r\\n        if(isSell) {  // in case that sender is dex token pair.\\r\\n            uint SellTaxDuration=10;\\r\\n            if(block.number<LaunchBlock+SellTaxDuration){\\r\\n                tax=_getStartTax();\\r\\n            } else tax=sellTax;\\r\\n        }\\r\\n        else if(isBuy) {    // in case that recieve is dex token pair.\\r\\n            uint BuyTaxDuration=10;\\r\\n            if(block.number<LaunchBlock+BuyTaxDuration){\\r\\n                tax=_getStartTax();\\r\\n            } else tax=buyTax;\\r\\n        } else { \\r\\n            uint256 contractBalanceRecepient = balanceOf(recipient);\\r\\n            if(!excludedFromWalletLimitsAccount){\\r\\n            require(\\r\\n                contractBalanceRecepient + amount <= maxWalletBalance,\\r\\n                \\\"Exceeds maximum wallet token amount.\\\"\\r\\n                );\\r\\n            }\\r\\n            uint TransferTaxDuration=10;\\r\\n            if(block.number<LaunchBlock+TransferTaxDuration){\\r\\n                tax=_getStartTax();\\r\\n            } else tax=transferTax;\\r\\n        }\\r\\n\\r\\n        if((sender!=_dexPairAddress)&&(!manualSwap)&&(!_isSwappingContractModifier))\\r\\n        _swapContractToken(false);\\r\\n        uint contractToken=_calculateFee(amount, tax, taxPct);\\r\\n        uint taxedAmount=amount-contractToken;\\r\\n\\r\\n        _balances[sender]-=amount;\\r\\n        _balances[address(this)] += contractToken;\\r\\n        _balances[recipient]+=taxedAmount;\\r\\n        \\r\\n        emit Transfer(sender,recipient,taxedAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Provides start tax to transfer function.\\r\\n    * @return The tax to calculate fee with.\\r\\n    */\\r\\n    function _getStartTax(\\r\\n    ) internal pure returns (uint){\\r\\n        uint startTax=3333;\\r\\n        return startTax;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Calculates fee based of set amounts\\r\\n    * @param amount The amount to calculate fee on\\r\\n    * @param tax The tax to calculate fee with\\r\\n    * @param taxPercent The tax percent to calculate fee with\\r\\n    */\\r\\n    function _calculateFee(\\r\\n        uint amount, \\r\\n        uint tax, \\r\\n        uint taxPercent\\r\\n    ) internal pure returns (uint) {\\r\\n        return (amount*tax*taxPercent) / (TAX_DENOMINATOR*TAX_DENOMINATOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Transfer amount of tokens without fees.\\r\\n    * @dev In feelessTransfer, there isn't limit as well.\\r\\n    * @param sender The address of user to send tokens.\\r\\n    * @param recipient The address of user to be recieveid tokens.\\r\\n    * @param amount The token amount to transfer.\\r\\n    */\\r\\n    function _feelessTransfer(\\r\\n        address sender, \\r\\n        address recipient, \\r\\n        uint amount\\r\\n    ) internal {\\r\\n        uint senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"Transfer exceeds balance\\\");\\r\\n        _balances[sender]-=amount;\\r\\n        _balances[recipient]+=amount;\\r\\n        emit Transfer(sender,recipient,amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Swap tokens for eth.\\r\\n    * @dev This function is for swap tokens for eth.\\r\\n    * @param newSwapTresholdImpact Set the swap % of LP pair holdings.\\r\\n     */\\r\\n    function setSwapTreshold(\\r\\n        uint newSwapTresholdImpact\\r\\n    ) external onlyManager{\\r\\n        require(newSwapTresholdImpact<=15);//Max Impact= 1.5%\\r\\n        swapTreshold=newSwapTresholdImpact;\\r\\n        emit SwapThresholdChange(newSwapTresholdImpact);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Set the current taxes. tax must equal TAX_DENOMINATOR. \\r\\n    * @notice buy must be less than MAXBUYTAXDENOMINATOR.\\r\\n    * @notice sell must be less than MAXSELLTAXDENOMINATOR.\\r\\n    * @notice transfer_ must be less than MAXTRANSFERTAXDENOMINATOR.\\r\\n    * @dev This function is for set the current taxes.\\r\\n    * @param buy The buy tax.\\r\\n    * @param sell The sell tax.\\r\\n    * @param transfer_ The transfer tax.\\r\\n     */\\r\\n    function SetTaxes(\\r\\n        uint buy, \\r\\n        uint sell, \\r\\n        uint transfer_\\r\\n    ) external onlyManager {\\r\\n        require(\\r\\n            buy<=MAXBUYTAXDENOMINATOR &&\\r\\n            sell<=MAXSELLTAXDENOMINATOR &&\\r\\n            transfer_<=MAXTRANSFERTAXDENOMINATOR,\\r\\n            \\\"Tax exceeds maxTax\\\"\\r\\n        );\\r\\n\\r\\n        buyTax=buy;\\r\\n        sellTax=sell;\\r\\n        transferTax=transfer_;\\r\\n        emit OnSetTaxes(buy, sell, transfer_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Swaps contract tokens based on various parameters.\\r\\n     * @param ignoreLimits Whether to ignore the token swap limits.\\r\\n     */\\r\\n    function _swapContractToken(\\r\\n        bool ignoreLimits\\r\\n    ) internal lockTheSwap {\\r\\n        uint contractBalance = _balances[address(this)];\\r\\n        uint totalTax = taxPct;\\r\\n        uint tokensToSwap = (_balances[_dexPairAddress] * swapTreshold) / 1000;\\r\\n\\r\\n        if (totalTax == 0) return;\\r\\n\\r\\n        if (ignoreLimits) {\\r\\n            tokensToSwap = _balances[address(this)];\\r\\n        } else if (contractBalance < tokensToSwap) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (tokensToSwap != 0) {\\r\\n            if (tokenrcvr) {\\r\\n                _balances[taxWallet] += tokensToSwap;\\r\\n                emit Transfer(address(this), taxWallet, tokensToSwap);\\r\\n            } else {\\r\\n                _swapTokenForETH(tokensToSwap);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Swap tokens for eth.\\r\\n    * @dev This function is for swap tokens for eth.\\r\\n    * @param amount The token amount to swap.\\r\\n    */\\r\\n    function _swapTokenForETH(\\r\\n        uint amount\\r\\n    ) private {\\r\\n        _approve(address(this), address(_dexRouter), amount);\\r\\n\\r\\n        try _dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amount,\\r\\n            0,\\r\\n            path,\\r\\n            taxWallet,\\r\\n            block.timestamp\\r\\n        ){}\\r\\n        catch{}\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Add initial liquidity to dex.\\r\\n    * @dev This function is for add liquidity to dex.\\r\\n     */\\r\\n    function _addInitLiquidity(\\r\\n    ) private {\\r\\n        uint tokenAmount = balanceOf(address(this));\\r\\n        _approve(address(this), address(_dexRouter), tokenAmount);\\r\\n        _dexRouter.addLiquidityETH{value: address(this).balance}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            0,\\r\\n            taxWallet,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Get Burned tokens.\\r\\n    * @dev This function is for get burned tokens.\\r\\n    */\\r\\n    function getBurnedTokens(\\r\\n    ) public view returns(uint) {\\r\\n        return _balances[address(0xdead)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Get circulating supply.\\r\\n    * @dev This function is for get circulating supply.\\r\\n     */\\r\\n    function getCirculatingSupply(\\r\\n    ) public view returns(uint) {\\r\\n        return InitialSupply-_balances[address(0xdead)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Set the current Pair.\\r\\n    * @dev This function is for set the current Pair.\\r\\n    * @param Pair The pair address.\\r\\n    * @param Add The status of add or remove.\\r\\n     */\\r\\n    function SetPair(\\r\\n        address Pair, \\r\\n        bool Add\\r\\n    ) internal {\\r\\n        if(Pair == address(0)) revert ZeroAddress();\\r\\n        if(Pair == address(_dexPairAddress)) revert PairAddress();    \\r\\n        require(Pair!=_dexPairAddress,\\\"can't readd pair\\\");\\r\\n        require(Pair != address(0),\\\"Address should not be 0\\\");\\r\\n        isPair[Pair]=Add;\\r\\n        emit NewPairSet(Pair,Add);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Add a pair.\\r\\n    * @dev This function is for add a pair.\\r\\n    * @param Pair The pair address.\\r\\n     */\\r\\n    function AddPair(\\r\\n        address Pair\\r\\n    ) external onlyManager {\\r\\n        SetPair(Pair,true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Add a pair.\\r\\n    * @dev This function is for add a pair.\\r\\n    * @param Pair The pair address.\\r\\n     */\\r\\n    function RemovePair(\\r\\n        address Pair\\r\\n    ) external onlyManager {\\r\\n        SetPair(Pair,false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Set Manual Swap Mode\\r\\n    * @dev This function is for set manual swap mode.\\r\\n    * @param manual The status of manual swap mode.\\r\\n     */\\r\\n    function SwitchManualSwap(\\r\\n        bool manual\\r\\n    ) external onlyManager {\\r\\n        manualSwap=manual;\\r\\n        emit ManualSwapChange(manual);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Swap contract tokens.\\r\\n    * @dev This function is for swap contract tokens.\\r\\n    * @param all The status of swap all tokens in contract.\\r\\n     */\\r\\n    function SwapContractToken(\\r\\n        bool all\\r\\n    ) external onlyManager {\\r\\n        _swapContractToken(all);\\r\\n        emit OwnerSwap();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Set a new router address\\r\\n    * @dev This function is for set a new router address.\\r\\n    * @param _newdex The new router address.\\r\\n     */\\r\\n    function SetNewRouter(\\r\\n        address _newdex\\r\\n    ) external onlyManager {\\r\\n        if(_newdex == address(0)) revert ZeroAddress();\\r\\n        if(_newdex == address(_dexRouter)) revert SameAddress();\\r\\n        dexRouter = _newdex;\\r\\n        emit NewRouterSet(_newdex);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Set new tax receiver wallets.\\r\\n    * @dev This function is for set new tax receiver wallets.\\r\\n    * @param NewTaxWallet The new tax wallet address.\\r\\n     */\\r\\n    function SetFeeWallets(\\r\\n        address NewTaxWallet\\r\\n    ) external onlyManager {\\r\\n        if (NewTaxWallet == address(0)) revert ZeroAddress();\\r\\n        taxWallet = NewTaxWallet;\\r\\n        emit NewFeeWalletSet(\\r\\n            NewTaxWallet\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Set Wallet Limits\\r\\n    * @dev This function is for set wallet limits.\\r\\n    * @param walPct The max wallet balance percent.\\r\\n    * @param txnPct The max transaction amount percent.\\r\\n     */\\r\\n    function SetLimits(\\r\\n        uint256 walPct, \\r\\n        uint256 txnPct\\r\\n    ) external onlyManager {\\r\\n        require(walPct >= 100, \\\"min 1%\\\");\\r\\n        require(walPct <= 10000, \\\"max 100%\\\");\\r\\n        maxWalletBalance = InitialSupply * walPct / 10000;\\r\\n        emit MaxWalletBalanceUpdated(walPct);\\r\\n\\r\\n        require(txnPct >= 100, \\\"min 1%\\\");\\r\\n        require(txnPct <= 10000, \\\"max 100%\\\");\\r\\n        maxTransactionAmount = InitialSupply * txnPct / 10000;\\r\\n        emit MaxTransactionAmountUpdated(txnPct);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Set to exclude an address from fees.\\r\\n    * @dev This function is for set to exclude an address from fees.\\r\\n    * @param account The address of user to be excluded from fees.\\r\\n    * @param exclude The status of exclude.\\r\\n    */\\r\\n    function ExcludeAccountFromFees(\\r\\n        address account, \\r\\n        bool exclude\\r\\n    ) external onlyManager {\\r\\n        if(account == address(0)) revert ZeroAddress();\\r\\n        if(account == address(this)) revert ContractAddress();\\r\\n        excludedFromFees[account]=exclude;\\r\\n        emit ExcludeAccount(account,exclude);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Set to exclude an address from transaction limits.\\r\\n    * @dev This function is for set to exclude an address from transaction limits.\\r\\n    * @param account The address of user to be excluded from transaction limits.\\r\\n    * @param exclude The status of exclude.\\r\\n    */\\r\\n    function ExcludedAccountFromTxnLimits(\\r\\n        address account, \\r\\n        bool exclude\\r\\n    ) external onlyManager {\\r\\n        if(account == address(0)) revert ZeroAddress();\\r\\n        excludedFromTransactionLimits[account]=exclude;\\r\\n        emit ExcludeFromTransactionLimits(account,exclude);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n    * @notice Set to exclude an address from wallet limits.\\r\\n    * @dev This function is for set to exclude an address from wallet limits.\\r\\n    * @param account The address of user to be excluded from wallet limits.\\r\\n    * @param exclude The status of exclude.\\r\\n    */\\r\\n    function ExcludeAccountFromWltLimits(\\r\\n        address account, \\r\\n        bool exclude\\r\\n    ) external onlyManager {\\r\\n        if(account == address(0)) revert ZeroAddress();\\r\\n        excludedFromWalletLimits[account]=exclude;\\r\\n        emit ExcludeFromWalletLimits(account,exclude);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Used to start trading.\\r\\n    * @dev This function is for used to start trading.\\r\\n    */\\r\\n    function SetupEnableTrading(\\r\\n    ) external onlyManager{\\r\\n        require(LaunchBlock==0,\\\"AlreadyLaunched\\\");\\r\\n\\r\\n        _dexRouter = IdexRouter(dexRouter);\\r\\n        _dexPairAddress = IdexFactory(_dexRouter.factory()).createPair(address(this), _dexRouter.WETH());\\r\\n        isPair[_dexPairAddress]=true;\\r\\n\\r\\n        _addInitLiquidity();\\r\\n\\r\\n        LaunchBlock=block.number;\\r\\n\\r\\n        maxWalletBalance = InitialSupply * 100 / 10000; // 0.12%\\r\\n        maxTransactionAmount = InitialSupply * 100 / 10000; // 0.12%\\r\\n        emit OnEnableTrading();\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n    function name() external pure override returns (string memory) {return _name;}\\r\\n    function symbol() external pure override returns (string memory) {return _symbol;}\\r\\n    function decimals() external pure override returns (uint8) {return _decimals;}\\r\\n    function totalSupply() external pure override returns (uint) {return InitialSupply;}\\r\\n    function balanceOf(address account) public view override returns (uint) {return _balances[account];}\\r\\n    function isExcludedFromWalletLimits(address account) public view returns(bool) {return excludedFromWalletLimits[account];}\\r\\n    function isExcludedFromTransferLimits(address account) public view returns(bool) {return excludedFromTransactionLimits[account];}\\r\\n    \\r\\n    function transfer(\\r\\n        address recipient, \\r\\n        uint amount\\r\\n    ) external override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function allowance(\\r\\n        address _owner, \\r\\n        address spender\\r\\n    ) external view override returns (uint) {\\r\\n        return _allowances[_owner][spender];\\r\\n    }\\r\\n    function approve(\\r\\n        address spender, \\r\\n        uint amount\\r\\n    ) external override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function _approve(\\r\\n        address _owner, \\r\\n        address spender, \\r\\n        uint amount\\r\\n    ) private {\\r\\n        if(_owner == address(0)) revert ZeroAddress();\\r\\n        if(spender == address(0)) revert ZeroAddress();\\r\\n        _allowances[_owner][spender] = amount;\\r\\n        emit Approval(_owner, spender, amount);\\r\\n    }\\r\\n    function transferFrom(\\r\\n        address sender, \\r\\n        address recipient, \\r\\n        uint amount\\r\\n    ) external override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        uint currentAllowance = _allowances[sender][msg.sender];\\r\\n        require(currentAllowance >= amount, \\\"Transfer > allowance\\\");\\r\\n        _approve(sender, msg.sender, currentAllowance - amount);\\r\\n        return true;\\r\\n    }\\r\\n    function increaseAllowance(\\r\\n        address spender, \\r\\n        uint addedValue\\r\\n    ) external returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n    function decreaseAllowance(\\r\\n        address spender, \\r\\n        uint subtractedValue\\r\\n    ) external returns (bool) {\\r\\n        uint currentAllowance = _allowances[msg.sender][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"<0 allowance\\\");\\r\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Used to remove excess ETH from contract\\r\\n    * @dev This function is for used to remove excess ETH from contract.\\r\\n    * @param amountPercentage The amount percentage to recover.\\r\\n     */\\r\\n    function emergencyETHrecovery(\\r\\n        uint256 amountPercentage\\r\\n    ) external onlyManager {\\r\\n        uint256 amountETH = address(this).balance;\\r\\n        (bool sent,)=msg.sender.call{value:amountETH * amountPercentage / 100}(\\\"\\\");\\r\\n            sent=true;\\r\\n        emit RecoverETH();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n    * @notice Used to remove excess Tokens from contract\\r\\n    * @dev This function is for used to remove excess Tokens from contract.\\r\\n    * @param tokenAddress The token address to recover.\\r\\n    * @param amountPercentage The amount percentage to recover.\\r\\n     */\\r\\n    function emergencyTokenrecovery(\\r\\n        address tokenAddress, \\r\\n        uint256 amountPercentage\\r\\n    ) external onlyManager {\\r\\n        if(tokenAddress == address(0)) revert ZeroAddress();\\r\\n        if(tokenAddress == address(_dexPairAddress)) {\\r\\n            revert PairAddress();\\r\\n        }\\r\\n        IERC20 token = IERC20(tokenAddress);\\r\\n        uint256 tokenAmount = token.balanceOf(address(this));\\r\\n        token.transfer(msg.sender, tokenAmount * amountPercentage / 100);\\r\\n\\r\\n        emit RecoverTokens(tokenAmount);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/EnE.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.23;\\r\\n\\r\\ninterface EnE {\\r\\n    //events\\r\\n    event SwapThresholdChange(uint threshold);\\r\\n    event OverLiquifiedThresholdChange(uint threshold);\\r\\n    event OnSetTaxes(\\r\\n        uint buy, \\r\\n        uint sell, \\r\\n        uint transfer_\\r\\n    );\\r\\n    event ManualSwapChange(bool status);\\r\\n    event MaxWalletBalanceUpdated(uint256 percent);\\r\\n    event MaxTransactionAmountUpdated(uint256 percent);\\r\\n    event ExcludeAccount(address indexed account, bool indexed exclude);\\r\\n    event ExcludeFromWalletLimits(address indexed account, bool indexed exclude);\\r\\n    event ExcludeFromTransactionLimits(address indexed account, bool indexed exclude);\\r\\n    event OwnerSwap();\\r\\n    event OnEnableTrading();\\r\\n    event OnProlongLPLock(uint UnlockTimestamp);\\r\\n    event OnReleaseLP();\\r\\n    event RecoverETH();\\r\\n    event NewPairSet(address Pair, bool Add);\\r\\n    event LimitTo20PercentLP();\\r\\n    event NewRouterSet(address _newdex);\\r\\n    event NewFeeWalletSet(address indexed NewTaxWallet);\\r\\n    event RecoverTokens(uint256 amount);\\r\\n    event TokensAirdroped(address indexed sender, uint256 total, uint256 amount);\\r\\n    //errors\\r\\n    error ZeroAddress();\\r\\n    error SameAddress();\\r\\n    error ContractAddress(); \\r\\n    error PairAddress();\\r\\n}\"\r\n    },\r\n    \"contracts/IdexFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.23;\\r\\n\\r\\ninterface IdexFactory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\"\r\n    },\r\n    \"contracts/IdexRouter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.23;\\r\\n\\r\\ninterface IdexRouter {\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity =0.8.23;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function name() external view returns (string memory);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ContractAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PairAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"ExcludeAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"ExcludeFromTransactionLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"ExcludeFromWalletLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LimitTo20PercentLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ManualSwapChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"MaxTransactionAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"MaxWalletBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"NewTaxWallet\",\"type\":\"address\"}],\"name\":\"NewFeeWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Add\",\"type\":\"bool\"}],\"name\":\"NewPairSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newdex\",\"type\":\"address\"}],\"name\":\"NewRouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OnEnableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UnlockTimestamp\",\"type\":\"uint256\"}],\"name\":\"OnProlongLPLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OnReleaseLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transfer_\",\"type\":\"uint256\"}],\"name\":\"OnSetTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"OverLiquifiedThresholdChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnerSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RecoverETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"SwapThresholdChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensAirdroped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Pair\",\"type\":\"address\"}],\"name\":\"AddPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"ExcludeAccountFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"ExcludeAccountFromWltLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"ExcludedAccountFromTxnLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Pair\",\"type\":\"address\"}],\"name\":\"RemovePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NewTaxWallet\",\"type\":\"address\"}],\"name\":\"SetFeeWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walPct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txnPct\",\"type\":\"uint256\"}],\"name\":\"SetLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newdex\",\"type\":\"address\"}],\"name\":\"SetNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer_\",\"type\":\"uint256\"}],\"name\":\"SetTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetupEnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"all\",\"type\":\"bool\"}],\"name\":\"SwapContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"manual\",\"type\":\"bool\"}],\"name\":\"SwitchManualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"yesNo\",\"type\":\"bool\"}],\"name\":\"TokenTaxRCVRBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"emergencyETHrecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenrecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromTransferLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromWalletLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapTresholdImpact\",\"type\":\"uint256\"}],\"name\":\"setSwapTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenrcvr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "bAIcon", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}