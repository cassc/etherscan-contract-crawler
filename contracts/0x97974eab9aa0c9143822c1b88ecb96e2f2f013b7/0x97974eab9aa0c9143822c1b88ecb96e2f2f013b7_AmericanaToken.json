{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2024-02-13\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2024-01-10\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n// ERC721A Contracts v4.2.3\r\n// Creator: Chiru Labs\r\n\r\n// ERC721A Contracts v4.2.3\r\n// Creator: Chiru Labs\r\n\r\n/**\r\n * @dev Interface of ERC721A.\r\n */\r\ninterface IERC721A {\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error ApprovalQueryForNonexistentToken();\r\n\r\n    /**\r\n     * Cannot query the balance for the zero address.\r\n     */\r\n    error BalanceQueryForZeroAddress();\r\n\r\n    /**\r\n     * Cannot mint to the zero address.\r\n     */\r\n    error MintToZeroAddress();\r\n\r\n    /**\r\n     * The quantity of tokens minted must be more than zero.\r\n     */\r\n    error MintZeroQuantity();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error OwnerQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token must be owned by `from`.\r\n     */\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /**\r\n     * Cannot safely transfer to a contract that does not implement the\r\n     * ERC721Receiver interface.\r\n     */\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /**\r\n     * Cannot transfer to the zero address.\r\n     */\r\n    error TransferToZeroAddress();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error URIQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\r\n     */\r\n    error MintERC2309QuantityExceedsLimit();\r\n\r\n    /**\r\n     * The `extraData` cannot be set on an unintialized ownership slot.\r\n     */\r\n    error OwnershipNotInitializedForExtraData();\r\n\r\n    // =============================================================\r\n    //                            STRUCTS\r\n    // =============================================================\r\n\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Stores the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\r\n        uint24 extraData;\r\n    }\r\n\r\n    // =============================================================\r\n    //                         TOKEN COUNTERS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens in existence.\r\n     * Burned tokens will reduce the count.\r\n     * To get the total number of tokens minted, please see {_totalMinted}.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // =============================================================\r\n    //                            IERC165\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    // =============================================================\r\n    //                            IERC721\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables\r\n     * (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\r\n     * checking first that contract recipients are aware of the ERC721 protocol\r\n     * to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move\r\n     * this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\r\n     * whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the\r\n     * zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external payable;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom}\r\n     * for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    // =============================================================\r\n    //                        IERC721Metadata\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    // =============================================================\r\n    //                           IERC2309\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\r\n     * (inclusive) is transferred from `from` to `to`, as defined in the\r\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\r\n     *\r\n     * See {_mintERC2309} for more details.\r\n     */\r\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\r\n}\r\n\r\n/**\r\n * @dev Interface of ERC721 token receiver.\r\n */\r\ninterface ERC721A__IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC721A\r\n *\r\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\r\n * Non-Fungible Token Standard, including the Metadata extension.\r\n * Optimized for lower gas during batch mints.\r\n *\r\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\r\n * starting from `_startTokenId()`.\r\n *\r\n * Assumptions:\r\n *\r\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\r\n */\r\ncontract ERC721A is IERC721A {\r\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\r\n    struct TokenApprovalRef {\r\n        address value;\r\n    }\r\n\r\n    // =============================================================\r\n    //                           CONSTANTS\r\n    // =============================================================\r\n\r\n    // Mask of an entry in packed address data.\r\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\r\n\r\n    // The bit position of `numberMinted` in packed address data.\r\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\r\n\r\n    // The bit position of `numberBurned` in packed address data.\r\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\r\n\r\n    // The bit position of `aux` in packed address data.\r\n    uint256 private constant _BITPOS_AUX = 192;\r\n\r\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\r\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\r\n\r\n    // The bit position of `startTimestamp` in packed ownership.\r\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\r\n\r\n    // The bit mask of the `burned` bit in packed ownership.\r\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\r\n\r\n    // The bit position of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\r\n\r\n    // The bit mask of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\r\n\r\n    // The bit position of `extraData` in packed ownership.\r\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\r\n\r\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\r\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\r\n\r\n    // The mask of the lower 160 bits for addresses.\r\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\r\n\r\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\r\n    // This limit is to prevent overflows on the address data entries.\r\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\r\n    // is required to cause an overflow, which is unrealistic.\r\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\r\n\r\n    // The `Transfer` event signature is given by:\r\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\r\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\r\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\r\n\r\n    // =============================================================\r\n    //                            STORAGE\r\n    // =============================================================\r\n\r\n    // The next token ID to be minted.\r\n    uint256 private _currentIndex;\r\n\r\n    // The number of tokens burned.\r\n    uint256 private _burnCounter;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned.\r\n    // See {_packedOwnershipOf} implementation for details.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..159]   `addr`\r\n    // - [160..223] `startTimestamp`\r\n    // - [224]      `burned`\r\n    // - [225]      `nextInitialized`\r\n    // - [232..255] `extraData`\r\n    mapping(uint256 => uint256) private _packedOwnerships;\r\n\r\n    // Mapping owner address to address data.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..63]    `balance`\r\n    // - [64..127]  `numberMinted`\r\n    // - [128..191] `numberBurned`\r\n    // - [192..255] `aux`\r\n    mapping(address => uint256) private _packedAddressData;\r\n\r\n    // Mapping from token ID to approved address.\r\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // =============================================================\r\n    //                          CONSTRUCTOR\r\n    // =============================================================\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _currentIndex = _startTokenId();\r\n    }\r\n\r\n    // =============================================================\r\n    //                   TOKEN COUNTING OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the starting token ID.\r\n     * To change the starting token ID, please override this function.\r\n     */\r\n    function _startTokenId() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the next token ID to be minted.\r\n     */\r\n    function _nextTokenId() internal view virtual returns (uint256) {\r\n        return _currentIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens in existence.\r\n     * Burned tokens will reduce the count.\r\n     * To get the total number of tokens minted, please see {_totalMinted}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        // Counter underflow is impossible as _burnCounter cannot be incremented\r\n        // more than `_currentIndex - _startTokenId()` times.\r\n        unchecked {\r\n            return _currentIndex - _burnCounter - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens minted in the contract.\r\n     */\r\n    function _totalMinted() internal view virtual returns (uint256) {\r\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\r\n        // and it is initialized to `_startTokenId()`.\r\n        unchecked {\r\n            return _currentIndex - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens burned.\r\n     */\r\n    function _totalBurned() internal view virtual returns (uint256) {\r\n        return _burnCounter;\r\n    }\r\n\r\n    // =============================================================\r\n    //                    ADDRESS DATA OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens minted by `owner`.\r\n     */\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens burned by or on behalf of `owner`.\r\n     */\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     */\r\n    function _getAux(address owner) internal view returns (uint64) {\r\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\r\n    }\r\n\r\n    /**\r\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     * If there are multiple variables, please pack them into a uint64.\r\n     */\r\n    function _setAux(address owner, uint64 aux) internal virtual {\r\n        uint256 packed = _packedAddressData[owner];\r\n        uint256 auxCasted;\r\n        // Cast `aux` with assembly to avoid redundant masking.\r\n        assembly {\r\n            auxCasted := aux\r\n        }\r\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\r\n        _packedAddressData[owner] = packed;\r\n    }\r\n\r\n    // =============================================================\r\n    //                            IERC165\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        // The interface IDs are constants representing the first 4 bytes\r\n        // of the XOR of all function selectors in the interface.\r\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\r\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\r\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\r\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\r\n    }\r\n\r\n    // =============================================================\r\n    //                        IERC721Metadata\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, it can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return '';\r\n    }\r\n\r\n    // =============================================================\r\n    //                     OWNERSHIPS OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        return address(uint160(_packedOwnershipOf(tokenId)));\r\n    }\r\n\r\n    /**\r\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around over time.\r\n     */\r\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\r\n     */\r\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnerships[index]);\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\r\n     */\r\n    function _initializeOwnershipAt(uint256 index) internal virtual {\r\n        if (_packedOwnerships[index] == 0) {\r\n            _packedOwnerships[index] = _packedOwnershipOf(index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the packed ownership data of `tokenId`.\r\n     */\r\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\r\n        uint256 curr = tokenId;\r\n\r\n        unchecked {\r\n            if (_startTokenId() <= curr)\r\n                if (curr < _currentIndex) {\r\n                    uint256 packed = _packedOwnerships[curr];\r\n                    // If not burned.\r\n                    if (packed & _BITMASK_BURNED == 0) {\r\n                        // Invariant:\r\n                        // There will always be an initialized ownership slot\r\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\r\n                        // before an unintialized ownership slot\r\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\r\n                        // Hence, `curr` will not underflow.\r\n                        //\r\n                        // We can directly compare the packed value.\r\n                        // If the address is zero, packed will be zero.\r\n                        while (packed == 0) {\r\n                            packed = _packedOwnerships[--curr];\r\n                        }\r\n                        return packed;\r\n                    }\r\n                }\r\n        }\r\n        revert OwnerQueryForNonexistentToken();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\r\n     */\r\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\r\n        ownership.addr = address(uint160(packed));\r\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\r\n        ownership.burned = packed & _BITMASK_BURNED != 0;\r\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\r\n    }\r\n\r\n    /**\r\n     * @dev Packs ownership data into a single uint256.\r\n     */\r\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\r\n        assembly {\r\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            owner := and(owner, _BITMASK_ADDRESS)\r\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\r\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\r\n     */\r\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\r\n        // For branchless setting of the `nextInitialized` flag.\r\n        assembly {\r\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\r\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                      APPROVAL OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the\r\n     * zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) public payable virtual override {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        if (_msgSenderERC721A() != owner)\r\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\r\n                revert ApprovalCallerNotOwnerNorApproved();\r\n            }\r\n\r\n        _tokenApprovals[tokenId].value = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId].value;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom}\r\n     * for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\r\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted. See {_mint}.\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return\r\n            _startTokenId() <= tokenId &&\r\n            tokenId < _currentIndex && // If within bounds,\r\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\r\n     */\r\n    function _isSenderApprovedOrOwner(\r\n        address approvedAddress,\r\n        address owner,\r\n        address msgSender\r\n    ) private pure returns (bool result) {\r\n        assembly {\r\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            owner := and(owner, _BITMASK_ADDRESS)\r\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\r\n            // `msgSender == owner || msgSender == approvedAddress`.\r\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\r\n     */\r\n    function _getApprovedSlotAndAddress(uint256 tokenId)\r\n        private\r\n        view\r\n        returns (uint256 approvedAddressSlot, address approvedAddress)\r\n    {\r\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\r\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\r\n        assembly {\r\n            approvedAddressSlot := tokenApproval.slot\r\n            approvedAddress := sload(approvedAddressSlot)\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                      TRANSFER OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public payable virtual override {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\r\n\r\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\r\n\r\n        // The nested ifs save around 20+ gas over a compound boolean condition.\r\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\r\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\r\n\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner.\r\n        assembly {\r\n            if approvedAddress {\r\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n                sstore(approvedAddressSlot, 0)\r\n            }\r\n        }\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\r\n        unchecked {\r\n            // We can directly increment and decrement the balances.\r\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\r\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\r\n\r\n            // Updates:\r\n            // - `address` to the next owner.\r\n            // - `startTimestamp` to the timestamp of transfering.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] = _packOwnershipData(\r\n                to,\r\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\r\n            );\r\n\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public payable virtual override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public payable virtual override {\r\n        transferFrom(from, to, tokenId);\r\n        if (to.code.length != 0)\r\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token IDs\r\n     * are about to be transferred. This includes minting.\r\n     * And also called before burning one token.\r\n     *\r\n     * `startTokenId` - the first token ID to be transferred.\r\n     * `quantity` - the amount to be transferred.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token IDs\r\n     * have been transferred. This includes minting.\r\n     * And also called after one token has been burned.\r\n     *\r\n     * `startTokenId` - the first token ID to be transferred.\r\n     * `quantity` - the amount to be transferred.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` has been minted for `to`.\r\n     * - When `to` is zero, `tokenId` has been burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\r\n     *\r\n     * `from` - Previous owner of the given token ID.\r\n     * `to` - Target address that will receive the token.\r\n     * `tokenId` - Token ID to be transferred.\r\n     * `_data` - Optional data to send along with the call.\r\n     *\r\n     * Returns whether the call correctly returned the expected magic value.\r\n     */\r\n    function _checkContractOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\r\n            bytes4 retval\r\n        ) {\r\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            } else {\r\n                assembly {\r\n                    revert(add(32, reason), mload(reason))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                        MINT OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event for each mint.\r\n     */\r\n    function _mint(address to, uint256 quantity) internal virtual {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\r\n        // `tokenId` has a maximum limit of 2**256.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the `balance` and `numberMinted`.\r\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\r\n\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] = _packOwnershipData(\r\n                to,\r\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n            );\r\n\r\n            uint256 toMasked;\r\n            uint256 end = startTokenId + quantity;\r\n\r\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\r\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\r\n            // The assembly, together with the surrounding Solidity code, have been\r\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\r\n            assembly {\r\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n                toMasked := and(to, _BITMASK_ADDRESS)\r\n                // Emit the `Transfer` event.\r\n                log4(\r\n                    0, // Start of data (0, since no data).\r\n                    0, // End of data (0, since no data).\r\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\r\n                    0, // `address(0)`.\r\n                    toMasked, // `to`.\r\n                    startTokenId // `tokenId`.\r\n                )\r\n\r\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\r\n                // that overflows uint256 will make the loop run out of gas.\r\n                // The compiler will optimize the `iszero` away for performance.\r\n                for {\r\n                    let tokenId := add(startTokenId, 1)\r\n                } iszero(eq(tokenId, end)) {\r\n                    tokenId := add(tokenId, 1)\r\n                } {\r\n                    // Emit the `Transfer` event. Similar to above.\r\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\r\n                }\r\n            }\r\n            if (toMasked == 0) revert MintToZeroAddress();\r\n\r\n            _currentIndex = end;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * This function is intended for efficient minting only during contract creation.\r\n     *\r\n     * It emits only one {ConsecutiveTransfer} as defined in\r\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\r\n     * instead of a sequence of {Transfer} event(s).\r\n     *\r\n     * Calling this function outside of contract creation WILL make your contract\r\n     * non-compliant with the ERC721 standard.\r\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\r\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {ConsecutiveTransfer} event.\r\n     */\r\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the `balance` and `numberMinted`.\r\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\r\n\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] = _packOwnershipData(\r\n                to,\r\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n            );\r\n\r\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\r\n\r\n            _currentIndex = startTokenId + quantity;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * See {_mint}.\r\n     *\r\n     * Emits a {Transfer} event for each mint.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, quantity);\r\n\r\n        unchecked {\r\n            if (to.code.length != 0) {\r\n                uint256 end = _currentIndex;\r\n                uint256 index = end - quantity;\r\n                do {\r\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\r\n                        revert TransferToNonERC721ReceiverImplementer();\r\n                    }\r\n                } while (index < end);\r\n                // Reentrancy protection.\r\n                if (_currentIndex != end) revert();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\r\n     */\r\n    function _safeMint(address to, uint256 quantity) internal virtual {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    // =============================================================\r\n    //                        BURN OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Equivalent to `_burn(tokenId, false)`.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        _burn(tokenId, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n        address from = address(uint160(prevOwnershipPacked));\r\n\r\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\r\n\r\n        if (approvalCheck) {\r\n            // The nested ifs save around 20+ gas over a compound boolean condition.\r\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\r\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner.\r\n        assembly {\r\n            if approvedAddress {\r\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n                sstore(approvedAddressSlot, 0)\r\n            }\r\n        }\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance -= 1`.\r\n            // - `numberBurned += 1`.\r\n            //\r\n            // We can directly decrement the balance, and increment the number burned.\r\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\r\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\r\n\r\n            // Updates:\r\n            // - `address` to the last owner.\r\n            // - `startTimestamp` to the timestamp of burning.\r\n            // - `burned` to `true`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] = _packOwnershipData(\r\n                from,\r\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\r\n            );\r\n\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, address(0), tokenId);\r\n        _afterTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n        unchecked {\r\n            _burnCounter++;\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                     EXTRA DATA OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Directly sets the extra data for the ownership data `index`.\r\n     */\r\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\r\n        uint256 packed = _packedOwnerships[index];\r\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\r\n        uint256 extraDataCasted;\r\n        // Cast `extraData` with assembly to avoid redundant masking.\r\n        assembly {\r\n            extraDataCasted := extraData\r\n        }\r\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\r\n        _packedOwnerships[index] = packed;\r\n    }\r\n\r\n    /**\r\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\r\n     * Intended to be overridden by the cosumer contract.\r\n     *\r\n     * `previousExtraData` - the value of `extraData` before transfer.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _extraData(\r\n        address from,\r\n        address to,\r\n        uint24 previousExtraData\r\n    ) internal view virtual returns (uint24) {}\r\n\r\n    /**\r\n     * @dev Returns the next extra data for the packed ownership data.\r\n     * The returned result is shifted into position.\r\n     */\r\n    function _nextExtraData(\r\n        address from,\r\n        address to,\r\n        uint256 prevOwnershipPacked\r\n    ) private view returns (uint256) {\r\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\r\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\r\n    }\r\n\r\n    // =============================================================\r\n    //                       OTHER OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the message sender (defaults to `msg.sender`).\r\n     *\r\n     * If you are writing GSN compatible contracts, you need to override this function.\r\n     */\r\n    function _msgSenderERC721A() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a uint256 to its ASCII string decimal representation.\r\n     */\r\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\r\n        assembly {\r\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\r\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\r\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\r\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\r\n            let m := add(mload(0x40), 0xa0)\r\n            // Update the free memory pointer to allocate.\r\n            mstore(0x40, m)\r\n            // Assign the `str` to the end.\r\n            str := sub(m, 0x20)\r\n            // Zeroize the slot after the string.\r\n            mstore(str, 0)\r\n\r\n            // Cache the end of the memory to calculate the length later.\r\n            let end := str\r\n\r\n            // We write the string from rightmost digit to leftmost digit.\r\n            // The following is essentially a do-while loop that also handles the zero case.\r\n            // prettier-ignore\r\n            for { let temp := value } 1 {} {\r\n                str := sub(str, 1)\r\n                // Write the character to the pointer.\r\n                // The ASCII index of the '0' character is 48.\r\n                mstore8(str, add(48, mod(temp, 10)))\r\n                // Keep dividing `temp` until zero.\r\n                temp := div(temp, 10)\r\n                // prettier-ignore\r\n                if iszero(temp) { break }\r\n            }\r\n\r\n            let length := sub(end, str)\r\n            // Move the pointer 32 bytes leftwards to make room for the length.\r\n            str := sub(str, 0x20)\r\n            // Store the length.\r\n            mstore(str, length)\r\n        }\r\n    }\r\n}\r\n\r\n/// @notice Gas optimized ECDSA wrapper.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/ECDSA.sol)\r\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ECDSA.sol)\r\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/ECDSA.sol)\r\nlibrary ECDSA {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                        CUSTOM ERRORS                       */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The signature is invalid.\r\n    error InvalidSignature();\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         CONSTANTS                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The number which `s` must not exceed in order for\r\n    /// the signature to be non-malleable.\r\n    bytes32 private constant _MALLEABILITY_THRESHOLD =\r\n        0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                    RECOVERY OPERATIONS                     */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    // Note: as of Solady version 0.0.68, these functions will\r\n    // revert upon recovery failure for more safety by default.\r\n\r\n    /// @dev Recovers the signer's address from a message digest `hash`,\r\n    /// and the `signature`.\r\n    ///\r\n    /// This function does NOT accept EIP-2098 short form signatures.\r\n    /// Use `recover(bytes32 hash, bytes32 r, bytes32 vs)` for EIP-2098\r\n    /// short form signatures instead.\r\n    function recover(bytes32 hash, bytes memory signature) internal view returns (address result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Copy the free memory pointer so that we can restore it later.\r\n            let m := mload(0x40)\r\n            // Copy `r` and `s`.\r\n            mstore(0x40, mload(add(signature, 0x20))) // `r`.\r\n            let s := mload(add(signature, 0x40))\r\n            mstore(0x60, s)\r\n            // Store the `hash` in the scratch space.\r\n            mstore(0x00, hash)\r\n            // Compute `v` and store it in the scratch space.\r\n            mstore(0x20, byte(0, mload(add(signature, 0x60))))\r\n            pop(\r\n                staticcall(\r\n                    gas(), // Amount of gas left for the transaction.\r\n                    and(\r\n                        // If the signature is exactly 65 bytes in length.\r\n                        eq(mload(signature), 65),\r\n                        // If `s` in lower half order, such that the signature is not malleable.\r\n                        lt(s, add(_MALLEABILITY_THRESHOLD, 1))\r\n                    ), // Address of `ecrecover`.\r\n                    0x00, // Start of input.\r\n                    0x80, // Size of input.\r\n                    0x00, // Start of output.\r\n                    0x20 // Size of output.\r\n                )\r\n            )\r\n            result := mload(0x00)\r\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\r\n            if iszero(returndatasize()) {\r\n                // Store the function selector of `InvalidSignature()`.\r\n                mstore(0x00, 0x8baa579f)\r\n                // Revert with (offset, size).\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Restore the zero slot.\r\n            mstore(0x60, 0)\r\n            // Restore the free memory pointer.\r\n            mstore(0x40, m)\r\n        }\r\n    }\r\n\r\n    /// @dev Recovers the signer's address from a message digest `hash`,\r\n    /// and the `signature`.\r\n    ///\r\n    /// This function does NOT accept EIP-2098 short form signatures.\r\n    /// Use `recover(bytes32 hash, bytes32 r, bytes32 vs)` for EIP-2098\r\n    /// short form signatures instead.\r\n    function recoverCalldata(bytes32 hash, bytes calldata signature)\r\n        internal\r\n        view\r\n        returns (address result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Copy the free memory pointer so that we can restore it later.\r\n            let m := mload(0x40)\r\n            // Directly copy `r` and `s` from the calldata.\r\n            calldatacopy(0x40, signature.offset, 0x40)\r\n            // Store the `hash` in the scratch space.\r\n            mstore(0x00, hash)\r\n            // Compute `v` and store it in the scratch space.\r\n            mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40))))\r\n            pop(\r\n                staticcall(\r\n                    gas(), // Amount of gas left for the transaction.\r\n                    and(\r\n                        // If the signature is exactly 65 bytes in length.\r\n                        eq(signature.length, 65),\r\n                        // If `s` in lower half order, such that the signature is not malleable.\r\n                        lt(mload(0x60), add(_MALLEABILITY_THRESHOLD, 1))\r\n                    ), // Address of `ecrecover`.\r\n                    0x00, // Start of input.\r\n                    0x80, // Size of input.\r\n                    0x00, // Start of output.\r\n                    0x20 // Size of output.\r\n                )\r\n            )\r\n            result := mload(0x00)\r\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\r\n            if iszero(returndatasize()) {\r\n                // Store the function selector of `InvalidSignature()`.\r\n                mstore(0x00, 0x8baa579f)\r\n                // Revert with (offset, size).\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Restore the zero slot.\r\n            mstore(0x60, 0)\r\n            // Restore the free memory pointer.\r\n            mstore(0x40, m)\r\n        }\r\n    }\r\n\r\n    /// @dev Recovers the signer's address from a message digest `hash`,\r\n    /// and the EIP-2098 short form signature defined by `r` and `vs`.\r\n    ///\r\n    /// This function only accepts EIP-2098 short form signatures.\r\n    /// See: https://eips.ethereum.org/EIPS/eip-2098\r\n    ///\r\n    /// To be honest, I do not recommend using EIP-2098 signatures\r\n    /// for simplicity, performance, and security reasons. Most if not\r\n    /// all clients support traditional non EIP-2098 signatures by default.\r\n    /// As such, this method is intentionally not fully inlined.\r\n    /// It is merely included for completeness.\r\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal view returns (address result) {\r\n        uint8 v;\r\n        bytes32 s;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            s := shr(1, shl(1, vs))\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        result = recover(hash, v, r, s);\r\n    }\r\n\r\n    /// @dev Recovers the signer's address from a message digest `hash`,\r\n    /// and the signature defined by `v`, `r`, `s`.\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\r\n        internal\r\n        view\r\n        returns (address result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Copy the free memory pointer so that we can restore it later.\r\n            let m := mload(0x40)\r\n            mstore(0x00, hash)\r\n            mstore(0x20, and(v, 0xff))\r\n            mstore(0x40, r)\r\n            mstore(0x60, s)\r\n            pop(\r\n                staticcall(\r\n                    gas(), // Amount of gas left for the transaction.\r\n                    // If `s` in lower half order, such that the signature is not malleable.\r\n                    lt(s, add(_MALLEABILITY_THRESHOLD, 1)), // Address of `ecrecover`.\r\n                    0x00, // Start of input.\r\n                    0x80, // Size of input.\r\n                    0x00, // Start of output.\r\n                    0x20 // Size of output.\r\n                )\r\n            )\r\n            result := mload(0x00)\r\n            // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\r\n            if iszero(returndatasize()) {\r\n                // Store the function selector of `InvalidSignature()`.\r\n                mstore(0x00, 0x8baa579f)\r\n                // Revert with (offset, size).\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Restore the zero slot.\r\n            mstore(0x60, 0)\r\n            // Restore the free memory pointer.\r\n            mstore(0x40, m)\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                   TRY-RECOVER OPERATIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    // WARNING!\r\n    // These functions will NOT revert upon recovery failure.\r\n    // Instead, they will return the zero address upon recovery failure.\r\n    // It is critical that the returned address is NEVER compared against\r\n    // a zero address (e.g. an uninitialized address variable).\r\n\r\n    /// @dev Recovers the signer's address from a message digest `hash`,\r\n    /// and the `signature`.\r\n    ///\r\n    /// This function does NOT accept EIP-2098 short form signatures.\r\n    /// Use `recover(bytes32 hash, bytes32 r, bytes32 vs)` for EIP-2098\r\n    /// short form signatures instead.\r\n    function tryRecover(bytes32 hash, bytes memory signature)\r\n        internal\r\n        view\r\n        returns (address result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if iszero(xor(mload(signature), 65)) {\r\n                // Copy the free memory pointer so that we can restore it later.\r\n                let m := mload(0x40)\r\n                // Copy `r` and `s`.\r\n                mstore(0x40, mload(add(signature, 0x20))) // `r`.\r\n                let s := mload(add(signature, 0x40))\r\n                mstore(0x60, s)\r\n                // If `s` in lower half order, such that the signature is not malleable.\r\n                if iszero(gt(s, _MALLEABILITY_THRESHOLD)) {\r\n                    // Store the `hash` in the scratch space.\r\n                    mstore(0x00, hash)\r\n                    // Compute `v` and store it in the scratch space.\r\n                    mstore(0x20, byte(0, mload(add(signature, 0x60))))\r\n                    pop(\r\n                        staticcall(\r\n                            gas(), // Amount of gas left for the transaction.\r\n                            0x01, // Address of `ecrecover`.\r\n                            0x00, // Start of input.\r\n                            0x80, // Size of input.\r\n                            0x40, // Start of output.\r\n                            0x20 // Size of output.\r\n                        )\r\n                    )\r\n                    // Restore the zero slot.\r\n                    mstore(0x60, 0)\r\n                    // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\r\n                    result := mload(xor(0x60, returndatasize()))\r\n                }\r\n                // Restore the free memory pointer.\r\n                mstore(0x40, m)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Recovers the signer's address from a message digest `hash`,\r\n    /// and the `signature`.\r\n    ///\r\n    /// This function does NOT accept EIP-2098 short form signatures.\r\n    /// Use `recover(bytes32 hash, bytes32 r, bytes32 vs)` for EIP-2098\r\n    /// short form signatures instead.\r\n    function tryRecoverCalldata(bytes32 hash, bytes calldata signature)\r\n        internal\r\n        view\r\n        returns (address result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if iszero(xor(signature.length, 65)) {\r\n                // Copy the free memory pointer so that we can restore it later.\r\n                let m := mload(0x40)\r\n                // Directly copy `r` and `s` from the calldata.\r\n                calldatacopy(0x40, signature.offset, 0x40)\r\n                // If `s` in lower half order, such that the signature is not malleable.\r\n                if iszero(gt(mload(0x60), _MALLEABILITY_THRESHOLD)) {\r\n                    // Store the `hash` in the scratch space.\r\n                    mstore(0x00, hash)\r\n                    // Compute `v` and store it in the scratch space.\r\n                    mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40))))\r\n                    pop(\r\n                        staticcall(\r\n                            gas(), // Amount of gas left for the transaction.\r\n                            0x01, // Address of `ecrecover`.\r\n                            0x00, // Start of input.\r\n                            0x80, // Size of input.\r\n                            0x40, // Start of output.\r\n                            0x20 // Size of output.\r\n                        )\r\n                    )\r\n                    // Restore the zero slot.\r\n                    mstore(0x60, 0)\r\n                    // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\r\n                    result := mload(xor(0x60, returndatasize()))\r\n                }\r\n                // Restore the free memory pointer.\r\n                mstore(0x40, m)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Recovers the signer's address from a message digest `hash`,\r\n    /// and the EIP-2098 short form signature defined by `r` and `vs`.\r\n    ///\r\n    /// This function only accepts EIP-2098 short form signatures.\r\n    /// See: https://eips.ethereum.org/EIPS/eip-2098\r\n    ///\r\n    /// To be honest, I do not recommend using EIP-2098 signatures\r\n    /// for simplicity, performance, and security reasons. Most if not\r\n    /// all clients support traditional non EIP-2098 signatures by default.\r\n    /// As such, this method is intentionally not fully inlined.\r\n    /// It is merely included for completeness.\r\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs)\r\n        internal\r\n        view\r\n        returns (address result)\r\n    {\r\n        uint8 v;\r\n        bytes32 s;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            s := shr(1, shl(1, vs))\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        result = tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /// @dev Recovers the signer's address from a message digest `hash`,\r\n    /// and the signature defined by `v`, `r`, `s`.\r\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\r\n        internal\r\n        view\r\n        returns (address result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Copy the free memory pointer so that we can restore it later.\r\n            let m := mload(0x40)\r\n            // If `s` in lower half order, such that the signature is not malleable.\r\n            if iszero(gt(s, _MALLEABILITY_THRESHOLD)) {\r\n                // Store the `hash`, `v`, `r`, `s` in the scratch space.\r\n                mstore(0x00, hash)\r\n                mstore(0x20, and(v, 0xff))\r\n                mstore(0x40, r)\r\n                mstore(0x60, s)\r\n                pop(\r\n                    staticcall(\r\n                        gas(), // Amount of gas left for the transaction.\r\n                        0x01, // Address of `ecrecover`.\r\n                        0x00, // Start of input.\r\n                        0x80, // Size of input.\r\n                        0x40, // Start of output.\r\n                        0x20 // Size of output.\r\n                    )\r\n                )\r\n                // Restore the zero slot.\r\n                mstore(0x60, 0)\r\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\r\n                result := mload(xor(0x60, returndatasize()))\r\n            }\r\n            // Restore the free memory pointer.\r\n            mstore(0x40, m)\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                     HASHING OPERATIONS                     */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns an Ethereum Signed Message, created from a `hash`.\r\n    /// This produces a hash corresponding to the one signed with the\r\n    /// [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\r\n    /// JSON-RPC method as part of EIP-191.\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Store into scratch space for keccak256.\r\n            mstore(0x20, hash)\r\n            mstore(0x00, \"\\x00\\x00\\x00\\x00\\x19Ethereum Signed Message:\\n32\")\r\n            // 0x40 - 0x04 = 0x3c\r\n            result := keccak256(0x04, 0x3c)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns an Ethereum Signed Message, created from `s`.\r\n    /// This produces a hash corresponding to the one signed with the\r\n    /// [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\r\n    /// JSON-RPC method as part of EIP-191.\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32 result) {\r\n        assembly {\r\n            // The length of \"\\x19Ethereum Signed Message:\\n\" is 26 bytes (i.e. 0x1a).\r\n            // If we reserve 2 words, we'll have 64 - 26 = 38 bytes to store the\r\n            // ASCII decimal representation of the length of `s` up to about 2 ** 126.\r\n\r\n            // Instead of allocating, we temporarily copy the 64 bytes before the\r\n            // start of `s` data to some variables.\r\n            let m := mload(sub(s, 0x20))\r\n            // The length of `s` is in bytes.\r\n            let sLength := mload(s)\r\n            let ptr := add(s, 0x20)\r\n            let w := not(0)\r\n            // `end` marks the end of the memory which we will compute the keccak256 of.\r\n            let end := add(ptr, sLength)\r\n            // Convert the length of the bytes to ASCII decimal representation\r\n            // and store it into the memory.\r\n            for { let temp := sLength } 1 {} {\r\n                ptr := add(ptr, w) // `sub(ptr, 1)`.\r\n                mstore8(ptr, add(48, mod(temp, 10)))\r\n                temp := div(temp, 10)\r\n                if iszero(temp) { break }\r\n            }\r\n            // Copy the header over to the memory.\r\n            mstore(sub(ptr, 0x20), \"\\x00\\x00\\x00\\x00\\x00\\x00\\x19Ethereum Signed Message:\\n\")\r\n            // Compute the keccak256 of the memory.\r\n            result := keccak256(sub(ptr, 0x1a), sub(end, sub(ptr, 0x1a)))\r\n            // Restore the previous memory.\r\n            mstore(s, sLength)\r\n            mstore(sub(s, 0x20), m)\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                   EMPTY CALLDATA HELPERS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns an empty calldata bytes.\r\n    function emptySignature() internal pure returns (bytes calldata signature) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            signature.length := 0\r\n        }\r\n    }\r\n}\r\n\r\n/// @notice Simple single owner authorization mixin.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\r\n/// @dev While the ownable portion follows [EIP-173](https://eips.ethereum.org/EIPS/eip-173)\r\n/// for compatibility, the nomenclature for the 2-step ownership handover\r\n/// may be unique to this codebase.\r\nabstract contract Ownable {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The caller is not authorized to call the function.\r\n    error Unauthorized();\r\n\r\n    /// @dev The `newOwner` cannot be the zero address.\r\n    error NewOwnerIsZeroAddress();\r\n\r\n    /// @dev The `pendingOwner` does not have a valid handover request.\r\n    error NoHandoverRequest();\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                           EVENTS                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\r\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\r\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\r\n    /// despite it not being as lightweight as a single argument event.\r\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n    /// @dev An ownership handover to `pendingOwner` has been requested.\r\n    event OwnershipHandoverRequested(address indexed pendingOwner);\r\n\r\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\r\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\r\n\r\n    /// @dev `keccak256(bytes(\"OwnershipTransferred(address,address)\"))`.\r\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\r\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\r\n\r\n    /// @dev `keccak256(bytes(\"OwnershipHandoverRequested(address)\"))`.\r\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\r\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\r\n\r\n    /// @dev `keccak256(bytes(\"OwnershipHandoverCanceled(address)\"))`.\r\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\r\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The owner slot is given by: `not(_OWNER_SLOT_NOT)`.\r\n    /// It is intentionally choosen to be a high value\r\n    /// to avoid collision with lower slots.\r\n    /// The choice of manual storage layout is to enable compatibility\r\n    /// with both regular and upgradeable contracts.\r\n    uint256 private constant _OWNER_SLOT_NOT = 0x8b78c6d8;\r\n\r\n    /// The ownership handover slot of `newOwner` is given by:\r\n    /// ```\r\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\r\n    ///     let handoverSlot := keccak256(0x00, 0x20)\r\n    /// ```\r\n    /// It stores the expiry timestamp of the two-step ownership handover.\r\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                     INTERNAL FUNCTIONS                     */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Initializes the owner directly without authorization guard.\r\n    /// This function must be called upon initialization,\r\n    /// regardless of whether the contract is upgradeable or not.\r\n    /// This is to enable generalization to both regular and upgradeable contracts,\r\n    /// and to save gas in case the initial owner is not the caller.\r\n    /// For performance reasons, this function will not check if there\r\n    /// is an existing owner.\r\n    function _initializeOwner(address newOwner) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Clean the upper 96 bits.\r\n            newOwner := shr(96, shl(96, newOwner))\r\n            // Store the new value.\r\n            sstore(not(_OWNER_SLOT_NOT), newOwner)\r\n            // Emit the {OwnershipTransferred} event.\r\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the owner directly without authorization guard.\r\n    function _setOwner(address newOwner) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ownerSlot := not(_OWNER_SLOT_NOT)\r\n            // Clean the upper 96 bits.\r\n            newOwner := shr(96, shl(96, newOwner))\r\n            // Emit the {OwnershipTransferred} event.\r\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\r\n            // Store the new value.\r\n            sstore(ownerSlot, newOwner)\r\n        }\r\n    }\r\n\r\n    /// @dev Throws if the sender is not the owner.\r\n    function _checkOwner() internal view virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // If the caller is not the stored owner, revert.\r\n            if iszero(eq(caller(), sload(not(_OWNER_SLOT_NOT)))) {\r\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\r\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if iszero(shl(96, newOwner)) {\r\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    /// @dev Allows the owner to renounce their ownership.\r\n    function renounceOwnership() public payable virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /// @dev Request a two-step ownership handover to the caller.\r\n    /// The request will be automatically expire in 48 hours (172800 seconds) by default.\r\n    function requestOwnershipHandover() public payable virtual {\r\n        unchecked {\r\n            uint256 expires = block.timestamp + ownershipHandoverValidFor();\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                // Compute and set the handover slot to `expires`.\r\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n                mstore(0x00, caller())\r\n                sstore(keccak256(0x0c, 0x20), expires)\r\n                // Emit the {OwnershipHandoverRequested} event.\r\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\r\n    function cancelOwnershipHandover() public payable virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute and set the handover slot to 0.\r\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            sstore(keccak256(0x0c, 0x20), 0)\r\n            // Emit the {OwnershipHandoverCanceled} event.\r\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\r\n        }\r\n    }\r\n\r\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\r\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\r\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute and set the handover slot to 0.\r\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n            mstore(0x00, pendingOwner)\r\n            let handoverSlot := keccak256(0x0c, 0x20)\r\n            // If the handover does not exist, or has expired.\r\n            if gt(timestamp(), sload(handoverSlot)) {\r\n                mstore(0x00, 0x6f5e8818) // `NoHandoverRequest()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n            // Set the handover slot to 0.\r\n            sstore(handoverSlot, 0)\r\n        }\r\n        _setOwner(pendingOwner);\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                   PUBLIC READ FUNCTIONS                    */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns the owner of the contract.\r\n    function owner() public view virtual returns (address result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := sload(not(_OWNER_SLOT_NOT))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\r\n    function ownershipHandoverExpiresAt(address pendingOwner)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256 result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the handover slot.\r\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\r\n            mstore(0x00, pendingOwner)\r\n            // Load the handover slot.\r\n            result := sload(keccak256(0x0c, 0x20))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\r\n    function ownershipHandoverValidFor() public view virtual returns (uint64) {\r\n        return 48 * 3600;\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         MODIFIERS                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Marks a function as only callable by the owner.\r\n    modifier onlyOwner() virtual {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n}\r\n\r\n/// @notice Simple single owner and multiroles authorization mixin.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\r\n/// @dev While the ownable portion follows [EIP-173](https://eips.ethereum.org/EIPS/eip-173)\r\n/// for compatibility, the nomenclature for the 2-step ownership handover and roles\r\n/// may be unique to this codebase.\r\nabstract contract OwnableRoles is Ownable {\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                           EVENTS                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The `user`'s roles is updated to `roles`.\r\n    /// Each bit of `roles` represents whether the role is set.\r\n    event RolesUpdated(address indexed user, uint256 indexed roles);\r\n\r\n    /// @dev `keccak256(bytes(\"RolesUpdated(address,uint256)\"))`.\r\n    uint256 private constant _ROLES_UPDATED_EVENT_SIGNATURE =\r\n        0x715ad5ce61fc9595c7b415289d59cf203f23a94fa06f04af7e489a0a76e1fe26;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev The role slot of `user` is given by:\r\n    /// ```\r\n    ///     mstore(0x00, or(shl(96, user), _ROLE_SLOT_SEED))\r\n    ///     let roleSlot := keccak256(0x00, 0x20)\r\n    /// ```\r\n    /// This automatically ignores the upper bits of the `user` in case\r\n    /// they are not clean, as well as keep the `keccak256` under 32-bytes.\r\n    ///\r\n    /// Note: This is equal to `_OWNER_SLOT_NOT` in for gas efficiency.\r\n    uint256 private constant _ROLE_SLOT_SEED = 0x8b78c6d8;\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                     INTERNAL FUNCTIONS                     */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Grants the roles directly without authorization guard.\r\n    /// Each bit of `roles` represents the role to turn on.\r\n    function _grantRoles(address user, uint256 roles) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the role slot.\r\n            mstore(0x0c, _ROLE_SLOT_SEED)\r\n            mstore(0x00, user)\r\n            let roleSlot := keccak256(0x0c, 0x20)\r\n            // Load the current value and `or` it with `roles`.\r\n            roles := or(sload(roleSlot), roles)\r\n            // Store the new value.\r\n            sstore(roleSlot, roles)\r\n            // Emit the {RolesUpdated} event.\r\n            log3(0, 0, _ROLES_UPDATED_EVENT_SIGNATURE, shr(96, mload(0x0c)), roles)\r\n        }\r\n    }\r\n\r\n    /// @dev Removes the roles directly without authorization guard.\r\n    /// Each bit of `roles` represents the role to turn off.\r\n    function _removeRoles(address user, uint256 roles) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the role slot.\r\n            mstore(0x0c, _ROLE_SLOT_SEED)\r\n            mstore(0x00, user)\r\n            let roleSlot := keccak256(0x0c, 0x20)\r\n            // Load the current value.\r\n            let currentRoles := sload(roleSlot)\r\n            // Use `and` to compute the intersection of `currentRoles` and `roles`,\r\n            // `xor` it with `currentRoles` to flip the bits in the intersection.\r\n            roles := xor(currentRoles, and(currentRoles, roles))\r\n            // Then, store the new value.\r\n            sstore(roleSlot, roles)\r\n            // Emit the {RolesUpdated} event.\r\n            log3(0, 0, _ROLES_UPDATED_EVENT_SIGNATURE, shr(96, mload(0x0c)), roles)\r\n        }\r\n    }\r\n\r\n    /// @dev Throws if the sender does not have any of the `roles`.\r\n    function _checkRoles(uint256 roles) internal view virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the role slot.\r\n            mstore(0x0c, _ROLE_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            // Load the stored value, and if the `and` intersection\r\n            // of the value and `roles` is zero, revert.\r\n            if iszero(and(sload(keccak256(0x0c, 0x20)), roles)) {\r\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Throws if the sender is not the owner,\r\n    /// and does not have any of the `roles`.\r\n    /// Checks for ownership first, then lazily checks for roles.\r\n    function _checkOwnerOrRoles(uint256 roles) internal view virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // If the caller is not the stored owner.\r\n            // Note: `_ROLE_SLOT_SEED` is equal to `_OWNER_SLOT_NOT`.\r\n            if iszero(eq(caller(), sload(not(_ROLE_SLOT_SEED)))) {\r\n                // Compute the role slot.\r\n                mstore(0x0c, _ROLE_SLOT_SEED)\r\n                mstore(0x00, caller())\r\n                // Load the stored value, and if the `and` intersection\r\n                // of the value and `roles` is zero, revert.\r\n                if iszero(and(sload(keccak256(0x0c, 0x20)), roles)) {\r\n                    mstore(0x00, 0x82b42900) // `Unauthorized()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Throws if the sender does not have any of the `roles`,\r\n    /// and is not the owner.\r\n    /// Checks for roles first, then lazily checks for ownership.\r\n    function _checkRolesOrOwner(uint256 roles) internal view virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the role slot.\r\n            mstore(0x0c, _ROLE_SLOT_SEED)\r\n            mstore(0x00, caller())\r\n            // Load the stored value, and if the `and` intersection\r\n            // of the value and `roles` is zero, revert.\r\n            if iszero(and(sload(keccak256(0x0c, 0x20)), roles)) {\r\n                // If the caller is not the stored owner.\r\n                // Note: `_ROLE_SLOT_SEED` is equal to `_OWNER_SLOT_NOT`.\r\n                if iszero(eq(caller(), sload(not(_ROLE_SLOT_SEED)))) {\r\n                    mstore(0x00, 0x82b42900) // `Unauthorized()`.\r\n                    revert(0x1c, 0x04)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Allows the owner to grant `user` `roles`.\r\n    /// If the `user` already has a role, then it will be an no-op for the role.\r\n    function grantRoles(address user, uint256 roles) public payable virtual onlyOwner {\r\n        _grantRoles(user, roles);\r\n    }\r\n\r\n    /// @dev Allows the owner to remove `user` `roles`.\r\n    /// If the `user` does not have a role, then it will be an no-op for the role.\r\n    function revokeRoles(address user, uint256 roles) public payable virtual onlyOwner {\r\n        _removeRoles(user, roles);\r\n    }\r\n\r\n    /// @dev Allow the caller to remove their own roles.\r\n    /// If the caller does not have a role, then it will be an no-op for the role.\r\n    function renounceRoles(uint256 roles) public payable virtual {\r\n        _removeRoles(msg.sender, roles);\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                   PUBLIC READ FUNCTIONS                    */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Returns whether `user` has any of `roles`.\r\n    function hasAnyRole(address user, uint256 roles) public view virtual returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the role slot.\r\n            mstore(0x0c, _ROLE_SLOT_SEED)\r\n            mstore(0x00, user)\r\n            // Load the stored value, and set the result to whether the\r\n            // `and` intersection of the value and `roles` is not zero.\r\n            result := iszero(iszero(and(sload(keccak256(0x0c, 0x20)), roles)))\r\n        }\r\n    }\r\n\r\n    /// @dev Returns whether `user` has all of `roles`.\r\n    function hasAllRoles(address user, uint256 roles) public view virtual returns (bool result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the role slot.\r\n            mstore(0x0c, _ROLE_SLOT_SEED)\r\n            mstore(0x00, user)\r\n            // Whether the stored value is contains all the set bits in `roles`.\r\n            result := eq(and(sload(keccak256(0x0c, 0x20)), roles), roles)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the roles of `user`.\r\n    function rolesOf(address user) public view virtual returns (uint256 roles) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Compute the role slot.\r\n            mstore(0x0c, _ROLE_SLOT_SEED)\r\n            mstore(0x00, user)\r\n            // Load the stored value.\r\n            roles := sload(keccak256(0x0c, 0x20))\r\n        }\r\n    }\r\n\r\n    /// @dev Convenience function to return a `roles` bitmap from an array of `ordinals`.\r\n    /// This is meant for frontends like Etherscan, and is therefore not fully optimized.\r\n    /// Not recommended to be called on-chain.\r\n    function rolesFromOrdinals(uint8[] memory ordinals) public pure returns (uint256 roles) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            for { let i := shl(5, mload(ordinals)) } i { i := sub(i, 0x20) } {\r\n                // We don't need to mask the values of `ordinals`, as Solidity\r\n                // cleans dirty upper bits when storing variables into memory.\r\n                roles := or(shl(mload(add(ordinals, i)), 1), roles)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Convenience function to return an array of `ordinals` from the `roles` bitmap.\r\n    /// This is meant for frontends like Etherscan, and is therefore not fully optimized.\r\n    /// Not recommended to be called on-chain.\r\n    function ordinalsFromRoles(uint256 roles) public pure returns (uint8[] memory ordinals) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Grab the pointer to the free memory.\r\n            ordinals := mload(0x40)\r\n            let ptr := add(ordinals, 0x20)\r\n            let o := 0\r\n            // The absence of lookup tables, De Bruijn, etc., here is intentional for\r\n            // smaller bytecode, as this function is not meant to be called on-chain.\r\n            for { let t := roles } 1 {} {\r\n                mstore(ptr, o)\r\n                // `shr` 5 is equivalent to multiplying by 0x20.\r\n                // Push back into the ordinals array if the bit is set.\r\n                ptr := add(ptr, shl(5, and(t, 1)))\r\n                o := add(o, 1)\r\n                t := shr(o, roles)\r\n                if iszero(t) { break }\r\n            }\r\n            // Store the length of `ordinals`.\r\n            mstore(ordinals, shr(5, sub(ptr, add(ordinals, 0x20))))\r\n            // Allocate the memory.\r\n            mstore(0x40, ptr)\r\n        }\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                         MODIFIERS                          */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    /// @dev Marks a function as only callable by an account with `roles`.\r\n    modifier onlyRoles(uint256 roles) virtual {\r\n        _checkRoles(roles);\r\n        _;\r\n    }\r\n\r\n    /// @dev Marks a function as only callable by the owner or by an account\r\n    /// with `roles`. Checks for ownership first, then lazily checks for roles.\r\n    modifier onlyOwnerOrRoles(uint256 roles) virtual {\r\n        _checkOwnerOrRoles(roles);\r\n        _;\r\n    }\r\n\r\n    /// @dev Marks a function as only callable by an account with `roles`\r\n    /// or the owner. Checks for roles first, then lazily checks for ownership.\r\n    modifier onlyRolesOrOwner(uint256 roles) virtual {\r\n        _checkRolesOrOwner(roles);\r\n        _;\r\n    }\r\n\r\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\r\n    /*                       ROLE CONSTANTS                       */\r\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\r\n\r\n    // IYKYK\r\n\r\n    uint256 internal constant _ROLE_0 = 1 << 0;\r\n    uint256 internal constant _ROLE_1 = 1 << 1;\r\n    uint256 internal constant _ROLE_2 = 1 << 2;\r\n    uint256 internal constant _ROLE_3 = 1 << 3;\r\n    uint256 internal constant _ROLE_4 = 1 << 4;\r\n    uint256 internal constant _ROLE_5 = 1 << 5;\r\n    uint256 internal constant _ROLE_6 = 1 << 6;\r\n    uint256 internal constant _ROLE_7 = 1 << 7;\r\n    uint256 internal constant _ROLE_8 = 1 << 8;\r\n    uint256 internal constant _ROLE_9 = 1 << 9;\r\n    uint256 internal constant _ROLE_10 = 1 << 10;\r\n    uint256 internal constant _ROLE_11 = 1 << 11;\r\n    uint256 internal constant _ROLE_12 = 1 << 12;\r\n    uint256 internal constant _ROLE_13 = 1 << 13;\r\n    uint256 internal constant _ROLE_14 = 1 << 14;\r\n    uint256 internal constant _ROLE_15 = 1 << 15;\r\n    uint256 internal constant _ROLE_16 = 1 << 16;\r\n    uint256 internal constant _ROLE_17 = 1 << 17;\r\n    uint256 internal constant _ROLE_18 = 1 << 18;\r\n    uint256 internal constant _ROLE_19 = 1 << 19;\r\n    uint256 internal constant _ROLE_20 = 1 << 20;\r\n    uint256 internal constant _ROLE_21 = 1 << 21;\r\n    uint256 internal constant _ROLE_22 = 1 << 22;\r\n    uint256 internal constant _ROLE_23 = 1 << 23;\r\n    uint256 internal constant _ROLE_24 = 1 << 24;\r\n    uint256 internal constant _ROLE_25 = 1 << 25;\r\n    uint256 internal constant _ROLE_26 = 1 << 26;\r\n    uint256 internal constant _ROLE_27 = 1 << 27;\r\n    uint256 internal constant _ROLE_28 = 1 << 28;\r\n    uint256 internal constant _ROLE_29 = 1 << 29;\r\n    uint256 internal constant _ROLE_30 = 1 << 30;\r\n    uint256 internal constant _ROLE_31 = 1 << 31;\r\n    uint256 internal constant _ROLE_32 = 1 << 32;\r\n    uint256 internal constant _ROLE_33 = 1 << 33;\r\n    uint256 internal constant _ROLE_34 = 1 << 34;\r\n    uint256 internal constant _ROLE_35 = 1 << 35;\r\n    uint256 internal constant _ROLE_36 = 1 << 36;\r\n    uint256 internal constant _ROLE_37 = 1 << 37;\r\n    uint256 internal constant _ROLE_38 = 1 << 38;\r\n    uint256 internal constant _ROLE_39 = 1 << 39;\r\n    uint256 internal constant _ROLE_40 = 1 << 40;\r\n    uint256 internal constant _ROLE_41 = 1 << 41;\r\n    uint256 internal constant _ROLE_42 = 1 << 42;\r\n    uint256 internal constant _ROLE_43 = 1 << 43;\r\n    uint256 internal constant _ROLE_44 = 1 << 44;\r\n    uint256 internal constant _ROLE_45 = 1 << 45;\r\n    uint256 internal constant _ROLE_46 = 1 << 46;\r\n    uint256 internal constant _ROLE_47 = 1 << 47;\r\n    uint256 internal constant _ROLE_48 = 1 << 48;\r\n    uint256 internal constant _ROLE_49 = 1 << 49;\r\n    uint256 internal constant _ROLE_50 = 1 << 50;\r\n    uint256 internal constant _ROLE_51 = 1 << 51;\r\n    uint256 internal constant _ROLE_52 = 1 << 52;\r\n    uint256 internal constant _ROLE_53 = 1 << 53;\r\n    uint256 internal constant _ROLE_54 = 1 << 54;\r\n    uint256 internal constant _ROLE_55 = 1 << 55;\r\n    uint256 internal constant _ROLE_56 = 1 << 56;\r\n    uint256 internal constant _ROLE_57 = 1 << 57;\r\n    uint256 internal constant _ROLE_58 = 1 << 58;\r\n    uint256 internal constant _ROLE_59 = 1 << 59;\r\n    uint256 internal constant _ROLE_60 = 1 << 60;\r\n    uint256 internal constant _ROLE_61 = 1 << 61;\r\n    uint256 internal constant _ROLE_62 = 1 << 62;\r\n    uint256 internal constant _ROLE_63 = 1 << 63;\r\n    uint256 internal constant _ROLE_64 = 1 << 64;\r\n    uint256 internal constant _ROLE_65 = 1 << 65;\r\n    uint256 internal constant _ROLE_66 = 1 << 66;\r\n    uint256 internal constant _ROLE_67 = 1 << 67;\r\n    uint256 internal constant _ROLE_68 = 1 << 68;\r\n    uint256 internal constant _ROLE_69 = 1 << 69;\r\n    uint256 internal constant _ROLE_70 = 1 << 70;\r\n    uint256 internal constant _ROLE_71 = 1 << 71;\r\n    uint256 internal constant _ROLE_72 = 1 << 72;\r\n    uint256 internal constant _ROLE_73 = 1 << 73;\r\n    uint256 internal constant _ROLE_74 = 1 << 74;\r\n    uint256 internal constant _ROLE_75 = 1 << 75;\r\n    uint256 internal constant _ROLE_76 = 1 << 76;\r\n    uint256 internal constant _ROLE_77 = 1 << 77;\r\n    uint256 internal constant _ROLE_78 = 1 << 78;\r\n    uint256 internal constant _ROLE_79 = 1 << 79;\r\n    uint256 internal constant _ROLE_80 = 1 << 80;\r\n    uint256 internal constant _ROLE_81 = 1 << 81;\r\n    uint256 internal constant _ROLE_82 = 1 << 82;\r\n    uint256 internal constant _ROLE_83 = 1 << 83;\r\n    uint256 internal constant _ROLE_84 = 1 << 84;\r\n    uint256 internal constant _ROLE_85 = 1 << 85;\r\n    uint256 internal constant _ROLE_86 = 1 << 86;\r\n    uint256 internal constant _ROLE_87 = 1 << 87;\r\n    uint256 internal constant _ROLE_88 = 1 << 88;\r\n    uint256 internal constant _ROLE_89 = 1 << 89;\r\n    uint256 internal constant _ROLE_90 = 1 << 90;\r\n    uint256 internal constant _ROLE_91 = 1 << 91;\r\n    uint256 internal constant _ROLE_92 = 1 << 92;\r\n    uint256 internal constant _ROLE_93 = 1 << 93;\r\n    uint256 internal constant _ROLE_94 = 1 << 94;\r\n    uint256 internal constant _ROLE_95 = 1 << 95;\r\n    uint256 internal constant _ROLE_96 = 1 << 96;\r\n    uint256 internal constant _ROLE_97 = 1 << 97;\r\n    uint256 internal constant _ROLE_98 = 1 << 98;\r\n    uint256 internal constant _ROLE_99 = 1 << 99;\r\n    uint256 internal constant _ROLE_100 = 1 << 100;\r\n    uint256 internal constant _ROLE_101 = 1 << 101;\r\n    uint256 internal constant _ROLE_102 = 1 << 102;\r\n    uint256 internal constant _ROLE_103 = 1 << 103;\r\n    uint256 internal constant _ROLE_104 = 1 << 104;\r\n    uint256 internal constant _ROLE_105 = 1 << 105;\r\n    uint256 internal constant _ROLE_106 = 1 << 106;\r\n    uint256 internal constant _ROLE_107 = 1 << 107;\r\n    uint256 internal constant _ROLE_108 = 1 << 108;\r\n    uint256 internal constant _ROLE_109 = 1 << 109;\r\n    uint256 internal constant _ROLE_110 = 1 << 110;\r\n    uint256 internal constant _ROLE_111 = 1 << 111;\r\n    uint256 internal constant _ROLE_112 = 1 << 112;\r\n    uint256 internal constant _ROLE_113 = 1 << 113;\r\n    uint256 internal constant _ROLE_114 = 1 << 114;\r\n    uint256 internal constant _ROLE_115 = 1 << 115;\r\n    uint256 internal constant _ROLE_116 = 1 << 116;\r\n    uint256 internal constant _ROLE_117 = 1 << 117;\r\n    uint256 internal constant _ROLE_118 = 1 << 118;\r\n    uint256 internal constant _ROLE_119 = 1 << 119;\r\n    uint256 internal constant _ROLE_120 = 1 << 120;\r\n    uint256 internal constant _ROLE_121 = 1 << 121;\r\n    uint256 internal constant _ROLE_122 = 1 << 122;\r\n    uint256 internal constant _ROLE_123 = 1 << 123;\r\n    uint256 internal constant _ROLE_124 = 1 << 124;\r\n    uint256 internal constant _ROLE_125 = 1 << 125;\r\n    uint256 internal constant _ROLE_126 = 1 << 126;\r\n    uint256 internal constant _ROLE_127 = 1 << 127;\r\n    uint256 internal constant _ROLE_128 = 1 << 128;\r\n    uint256 internal constant _ROLE_129 = 1 << 129;\r\n    uint256 internal constant _ROLE_130 = 1 << 130;\r\n    uint256 internal constant _ROLE_131 = 1 << 131;\r\n    uint256 internal constant _ROLE_132 = 1 << 132;\r\n    uint256 internal constant _ROLE_133 = 1 << 133;\r\n    uint256 internal constant _ROLE_134 = 1 << 134;\r\n    uint256 internal constant _ROLE_135 = 1 << 135;\r\n    uint256 internal constant _ROLE_136 = 1 << 136;\r\n    uint256 internal constant _ROLE_137 = 1 << 137;\r\n    uint256 internal constant _ROLE_138 = 1 << 138;\r\n    uint256 internal constant _ROLE_139 = 1 << 139;\r\n    uint256 internal constant _ROLE_140 = 1 << 140;\r\n    uint256 internal constant _ROLE_141 = 1 << 141;\r\n    uint256 internal constant _ROLE_142 = 1 << 142;\r\n    uint256 internal constant _ROLE_143 = 1 << 143;\r\n    uint256 internal constant _ROLE_144 = 1 << 144;\r\n    uint256 internal constant _ROLE_145 = 1 << 145;\r\n    uint256 internal constant _ROLE_146 = 1 << 146;\r\n    uint256 internal constant _ROLE_147 = 1 << 147;\r\n    uint256 internal constant _ROLE_148 = 1 << 148;\r\n    uint256 internal constant _ROLE_149 = 1 << 149;\r\n    uint256 internal constant _ROLE_150 = 1 << 150;\r\n    uint256 internal constant _ROLE_151 = 1 << 151;\r\n    uint256 internal constant _ROLE_152 = 1 << 152;\r\n    uint256 internal constant _ROLE_153 = 1 << 153;\r\n    uint256 internal constant _ROLE_154 = 1 << 154;\r\n    uint256 internal constant _ROLE_155 = 1 << 155;\r\n    uint256 internal constant _ROLE_156 = 1 << 156;\r\n    uint256 internal constant _ROLE_157 = 1 << 157;\r\n    uint256 internal constant _ROLE_158 = 1 << 158;\r\n    uint256 internal constant _ROLE_159 = 1 << 159;\r\n    uint256 internal constant _ROLE_160 = 1 << 160;\r\n    uint256 internal constant _ROLE_161 = 1 << 161;\r\n    uint256 internal constant _ROLE_162 = 1 << 162;\r\n    uint256 internal constant _ROLE_163 = 1 << 163;\r\n    uint256 internal constant _ROLE_164 = 1 << 164;\r\n    uint256 internal constant _ROLE_165 = 1 << 165;\r\n    uint256 internal constant _ROLE_166 = 1 << 166;\r\n    uint256 internal constant _ROLE_167 = 1 << 167;\r\n    uint256 internal constant _ROLE_168 = 1 << 168;\r\n    uint256 internal constant _ROLE_169 = 1 << 169;\r\n    uint256 internal constant _ROLE_170 = 1 << 170;\r\n    uint256 internal constant _ROLE_171 = 1 << 171;\r\n    uint256 internal constant _ROLE_172 = 1 << 172;\r\n    uint256 internal constant _ROLE_173 = 1 << 173;\r\n    uint256 internal constant _ROLE_174 = 1 << 174;\r\n    uint256 internal constant _ROLE_175 = 1 << 175;\r\n    uint256 internal constant _ROLE_176 = 1 << 176;\r\n    uint256 internal constant _ROLE_177 = 1 << 177;\r\n    uint256 internal constant _ROLE_178 = 1 << 178;\r\n    uint256 internal constant _ROLE_179 = 1 << 179;\r\n    uint256 internal constant _ROLE_180 = 1 << 180;\r\n    uint256 internal constant _ROLE_181 = 1 << 181;\r\n    uint256 internal constant _ROLE_182 = 1 << 182;\r\n    uint256 internal constant _ROLE_183 = 1 << 183;\r\n    uint256 internal constant _ROLE_184 = 1 << 184;\r\n    uint256 internal constant _ROLE_185 = 1 << 185;\r\n    uint256 internal constant _ROLE_186 = 1 << 186;\r\n    uint256 internal constant _ROLE_187 = 1 << 187;\r\n    uint256 internal constant _ROLE_188 = 1 << 188;\r\n    uint256 internal constant _ROLE_189 = 1 << 189;\r\n    uint256 internal constant _ROLE_190 = 1 << 190;\r\n    uint256 internal constant _ROLE_191 = 1 << 191;\r\n    uint256 internal constant _ROLE_192 = 1 << 192;\r\n    uint256 internal constant _ROLE_193 = 1 << 193;\r\n    uint256 internal constant _ROLE_194 = 1 << 194;\r\n    uint256 internal constant _ROLE_195 = 1 << 195;\r\n    uint256 internal constant _ROLE_196 = 1 << 196;\r\n    uint256 internal constant _ROLE_197 = 1 << 197;\r\n    uint256 internal constant _ROLE_198 = 1 << 198;\r\n    uint256 internal constant _ROLE_199 = 1 << 199;\r\n    uint256 internal constant _ROLE_200 = 1 << 200;\r\n    uint256 internal constant _ROLE_201 = 1 << 201;\r\n    uint256 internal constant _ROLE_202 = 1 << 202;\r\n    uint256 internal constant _ROLE_203 = 1 << 203;\r\n    uint256 internal constant _ROLE_204 = 1 << 204;\r\n    uint256 internal constant _ROLE_205 = 1 << 205;\r\n    uint256 internal constant _ROLE_206 = 1 << 206;\r\n    uint256 internal constant _ROLE_207 = 1 << 207;\r\n    uint256 internal constant _ROLE_208 = 1 << 208;\r\n    uint256 internal constant _ROLE_209 = 1 << 209;\r\n    uint256 internal constant _ROLE_210 = 1 << 210;\r\n    uint256 internal constant _ROLE_211 = 1 << 211;\r\n    uint256 internal constant _ROLE_212 = 1 << 212;\r\n    uint256 internal constant _ROLE_213 = 1 << 213;\r\n    uint256 internal constant _ROLE_214 = 1 << 214;\r\n    uint256 internal constant _ROLE_215 = 1 << 215;\r\n    uint256 internal constant _ROLE_216 = 1 << 216;\r\n    uint256 internal constant _ROLE_217 = 1 << 217;\r\n    uint256 internal constant _ROLE_218 = 1 << 218;\r\n    uint256 internal constant _ROLE_219 = 1 << 219;\r\n    uint256 internal constant _ROLE_220 = 1 << 220;\r\n    uint256 internal constant _ROLE_221 = 1 << 221;\r\n    uint256 internal constant _ROLE_222 = 1 << 222;\r\n    uint256 internal constant _ROLE_223 = 1 << 223;\r\n    uint256 internal constant _ROLE_224 = 1 << 224;\r\n    uint256 internal constant _ROLE_225 = 1 << 225;\r\n    uint256 internal constant _ROLE_226 = 1 << 226;\r\n    uint256 internal constant _ROLE_227 = 1 << 227;\r\n    uint256 internal constant _ROLE_228 = 1 << 228;\r\n    uint256 internal constant _ROLE_229 = 1 << 229;\r\n    uint256 internal constant _ROLE_230 = 1 << 230;\r\n    uint256 internal constant _ROLE_231 = 1 << 231;\r\n    uint256 internal constant _ROLE_232 = 1 << 232;\r\n    uint256 internal constant _ROLE_233 = 1 << 233;\r\n    uint256 internal constant _ROLE_234 = 1 << 234;\r\n    uint256 internal constant _ROLE_235 = 1 << 235;\r\n    uint256 internal constant _ROLE_236 = 1 << 236;\r\n    uint256 internal constant _ROLE_237 = 1 << 237;\r\n    uint256 internal constant _ROLE_238 = 1 << 238;\r\n    uint256 internal constant _ROLE_239 = 1 << 239;\r\n    uint256 internal constant _ROLE_240 = 1 << 240;\r\n    uint256 internal constant _ROLE_241 = 1 << 241;\r\n    uint256 internal constant _ROLE_242 = 1 << 242;\r\n    uint256 internal constant _ROLE_243 = 1 << 243;\r\n    uint256 internal constant _ROLE_244 = 1 << 244;\r\n    uint256 internal constant _ROLE_245 = 1 << 245;\r\n    uint256 internal constant _ROLE_246 = 1 << 246;\r\n    uint256 internal constant _ROLE_247 = 1 << 247;\r\n    uint256 internal constant _ROLE_248 = 1 << 248;\r\n    uint256 internal constant _ROLE_249 = 1 << 249;\r\n    uint256 internal constant _ROLE_250 = 1 << 250;\r\n    uint256 internal constant _ROLE_251 = 1 << 251;\r\n    uint256 internal constant _ROLE_252 = 1 << 252;\r\n    uint256 internal constant _ROLE_253 = 1 << 253;\r\n    uint256 internal constant _ROLE_254 = 1 << 254;\r\n    uint256 internal constant _ROLE_255 = 1 << 255;\r\n}\r\n\r\ncontract TokenData {\r\n    /// @dev OwnableRoles.sol role for being an approved contract.\r\n    uint256 public constant APPROVED_CONTRACT_ROLE = 1 << 1;\r\n\r\n    /// @dev OwnableRoles.sol role for being able to call auth functions.\r\n    uint256 public constant AUTH_ADDRESS_ROLE = 1 << 2;\r\n\r\n    /// @dev OwnableRoles.sol role for being able sign bundle/redemption/transfer authSigs.\r\n    uint256 public constant AUTHORIZED_MESSAGE_SIGNER_ROLE = 1 << 3;\r\n\r\n    /// @dev Struct for storing bundle token information.\r\n    struct BundleData {\r\n        address auxTokenAddress;\r\n        uint48 auxTokenId;\r\n        uint48 americanaTokenId;\r\n    }\r\n\r\n    /// @dev Emitted when a bundle token is created.\r\n    event BundleCreated(\r\n        address indexed auxTokenAddress,\r\n        uint48 auxTokenId,\r\n        uint48 indexed americanaTokenId,\r\n        uint256 indexed bundleTokenId,\r\n        address bundler\r\n    );\r\n\r\n    /// @dev Emitted when a bundle token is unwrapped and burned.\r\n    event BundleUnwrapped(\r\n        address auxTokenAddress,\r\n        uint48 auxTokenId,\r\n        uint48 indexed americanaTokenId,\r\n        address indexed redeemer,\r\n        uint256 indexed bundleTokenId\r\n    );\r\n\r\n    /// @dev Emitted when a bundle auth signature is revoked.\r\n    event SigCancelled(\r\n        address indexed bundler,\r\n        address indexed auxTokenAddress,\r\n        uint48 indexed auxTokenId,\r\n        uint48 americanaTokenId\r\n    );\r\n\r\n    /// @dev Emitted when an auth withdrawal call fails.\r\n    event FailedAuthWithdrawal();\r\n\r\n    /// @dev Emitted when token is redeemed.\r\n    event TokenRedeemed(address indexed redeemer, uint256 indexed tokenId);\r\n\r\n    /// @dev Emitted when contract pause status is updated.\r\n    event PauseStateUpdated(bool indexed newStatus);\r\n\r\n    /// @dev Emitted when contract redeemable status is updated.\r\n    event RedeemStateUpdated(bool indexed newStatus);\r\n\r\n    /// @dev Emitted when base URI is updated.\r\n    event BaseUriUpdate(string indexed newUri);\r\n\r\n    /// @dev Emitted when a bundle wrapper is burnt after auth unwrapping.\r\n    event WrapperBurnt(uint256 indexed _tokenId);\r\n\r\n    /// @dev Reverts when trying to set approval for an address that is\r\n    ///      not authorized.\r\n    error UnauthorizedContract();\r\n\r\n    /// @dev Reverts when trying to call certain function when contract\r\n    ///      is paused.\r\n    error ContractPaused();\r\n\r\n    /// @dev Reverts when trying to call certain function when redemption\r\n    ///      is paused.\r\n    error RedemptionPaused();\r\n\r\n    /// @dev Reverts when trying to redeem a token with an expired `_sigExpirationTimestamp`.\r\n    error RedeemSignatureExpired();\r\n\r\n    /// @dev Reverts when trying to call mint function with an expired `_sigExpirationTimestamp`.\r\n    error MintSignatureExpired();\r\n\r\n    /// @dev Reverts when trying to unwrap a bundle token from non owner.\r\n    error UnwrapByNonOwner();\r\n\r\n    /// @dev Reverts when trying to redeem a token from non owner.\r\n    error RedeemByNonOwner();\r\n\r\n    /// @dev Reverts when auth sigs do not recover to an auth address.\r\n    error InvalidSignerAddress();\r\n\r\n    /// @dev Reverts when trying to redeem a bundled tokenId.\r\n    error CannotRedeemBundleToken();\r\n\r\n    /// @dev Reverts when trying to bundle with an invalid aux token.\r\n    error InvalidAuxToken();\r\n\r\n    /// @dev Reverts when trying to bundle with an auth sig that has been\r\n    ///      used or cancelled.\r\n    error SignatureUsedOrCancelled();\r\n\r\n    /// @dev Reverts when trying to bundle with an auth sig that has expired.\r\n    error BundleSignatureExpired();\r\n\r\n    /// @dev Reverts when trying to transfer with an auth sig that has expired.\r\n    error TransferSignatureExpired();\r\n\r\n    /// @dev Reverts when burnWrapperToken is called with an invalid tokenId.\r\n    error CannotBurnToken();\r\n\r\n    /// @dev Reverts when trying to unwrap a bundle that has already done so.\r\n    error BundleAlreadyUnwrapped();\r\n\r\n    /// @dev Reverts when trying to bundle an already bundled token.\r\n    error CannotBundleAnAlreadyBundledToken();\r\n\r\n    /// @dev Reverts when calling transferFrom (without auth sig) from an\r\n    ///      unauthorized address.\r\n    error UnauthorizedCaller();\r\n}\r\n\r\n//              @@@@@\r\n//   @@@@@      @@@@@      @@@@@\r\n//     @@@@@@   @@@@@   @@@@@@\r\n//       @@@@@@ @@@@@ @@@@@@\r\n//           @@@@@@@@@@@               @@@@@@@@@@@@@@@@@@@@@@@@\r\n//  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@\r\n//  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@\r\n//           @@@@@@@@@@@                                  @@@@@\r\n//       @@@@@@ @@@@@ @@@@@@                              @@@@@\r\n//     @@@@@@   @@@@@   @@@@@@                            @@@@@\r\n//   @@@@@      @@@@@      @@@@@                          @@@@@\r\n//              @@@@@                                     @@@@@\r\n//                                                        @@@@@\r\n//                                                        @@@@@\r\n//              @@@@@                                     @@@@@\r\n//              @@@@@                                     @@@@@\r\n//              @@@@@                                     @@@@@\r\n//              @@@@@                                     @@@@@\r\n//              @@@@@                                     @@@@@\r\n//              @@@@@                                     @@@@@\r\n//              @@@@@                                     @@@@@\r\n//              @@@@@                                     @@@@@\r\n//              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//\r\n\r\n/// @notice ERC721A token contract to facilitate token bundling and redemption for Americana.\r\n/// @author Americana Technologies (https://Americana.io)\r\ncontract AmericanaToken is ERC721A, OwnableRoles, TokenData {\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol\r\n    ) ERC721A(name, symbol) {\r\n        isPaused = false;\r\n        redemptionPaused = false;\r\n        _baseTokenURI = \"https://americana.io/\";\r\n        _initializeOwner(msg.sender);\r\n    }\r\n\r\n    using ECDSA for bytes32;\r\n\r\n    // *************************************************************\r\n    //                         MODIFIERS\r\n    // *************************************************************\r\n\r\n    /**\r\n     * @dev Marks a function as only callable when the contract is not paused.\r\n     */\r\n    modifier active() {\r\n        if (isPaused) revert ContractPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Restricts token approvals to only authorized contracts.\r\n     */\r\n    modifier authorizedContract(address contractAddress) {\r\n        if (hasAnyRole(contractAddress, APPROVED_CONTRACT_ROLE)) {\r\n            _;\r\n        } else {\r\n            revert UnauthorizedContract();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Marks a function as only callable when redemption is not paused.\r\n     */\r\n    modifier redeemable() {\r\n        if (redemptionPaused) revert RedemptionPaused();\r\n        _;\r\n    }\r\n\r\n    // *************************************************************\r\n    //                          STORAGE\r\n    // *************************************************************\r\n\r\n    bool public isPaused;\r\n    bool public redemptionPaused;\r\n    string private _baseTokenURI;\r\n\r\n    /**\r\n     * @dev Mapping used to invalidate bundle digests.\r\n     */\r\n    mapping(bytes32 => bool) public isInvalidated;\r\n\r\n    /**\r\n     * @dev Mapping used to track active bundle token data.\r\n     */\r\n    mapping(uint256 => BundleData) public bundleDataByTokenId;\r\n\r\n    // *************************************************************\r\n    //                      EXTERNAL FUNCTIONS\r\n    // *************************************************************\r\n\r\n    /**\r\n     * @dev     Mints `_amount` Americana token(s) to the `_to` address.\r\n     *\r\n     *          Requirements:\r\n     *\r\n     *          - authSig must recover to an authorized address\r\n     *          - `_sigExpirationTimestamp` must be in the future\r\n     *\r\n     */\r\n    function mint(\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _sigExpirationTimestamp,\r\n        bytes memory _authSig\r\n    ) external {\r\n        bytes32 digest = keccak256(\r\n            abi.encode(\r\n                msg.sender,\r\n                _to,\r\n                _amount,\r\n                block.chainid,\r\n                _sigExpirationTimestamp\r\n            )\r\n        );\r\n        if (block.timestamp > _sigExpirationTimestamp) {\r\n            revert MintSignatureExpired();\r\n        }\r\n        if (\r\n            !hasAnyRole(\r\n                digest.toEthSignedMessageHash().recover(_authSig),\r\n                AUTHORIZED_MESSAGE_SIGNER_ROLE\r\n            )\r\n        ) {\r\n            revert InvalidSignerAddress();\r\n        }\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev     Burns `_tokenId` and emits a `TokenRedeemed` event.\r\n     *\r\n     *          Requirements:\r\n     *\r\n     *          - `redeemable` modifier must pass\r\n     *          - `_authSig` must recover to an authorized address\r\n     *          - `msg.sender` must be owner of `_tokenId`\r\n     *          - `_tokenId` must not be a bundle\r\n     */\r\n    function redeem(\r\n        uint256 _tokenId,\r\n        uint256 _sigExpirationTimestamp,\r\n        bytes memory _authSig\r\n    ) external active redeemable {\r\n        bytes32 digest = keccak256(\r\n            abi.encode(\r\n                _tokenId,\r\n                block.chainid,\r\n                _sigExpirationTimestamp,\r\n                msg.sender\r\n            )\r\n        );\r\n\r\n        address recoveredAuthAddress = ECDSA.tryRecover(\r\n            digest.toEthSignedMessageHash(),\r\n            _authSig\r\n        );\r\n\r\n        if (block.timestamp > _sigExpirationTimestamp) {\r\n            revert RedeemSignatureExpired();\r\n        }\r\n\r\n        if (!hasAnyRole(recoveredAuthAddress, AUTHORIZED_MESSAGE_SIGNER_ROLE)) {\r\n            revert InvalidSignerAddress();\r\n        }\r\n\r\n        if (ownerOf(_tokenId) != msg.sender) {\r\n            revert RedeemByNonOwner();\r\n        }\r\n\r\n        if (bundleDataByTokenId[_tokenId].auxTokenAddress != address(0)) {\r\n            revert CannotRedeemBundleToken();\r\n        }\r\n\r\n        _burn(_tokenId, false);\r\n\r\n        emit TokenRedeemed(msg.sender, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev     Bundles token `_auxTokenId` from the `_auxTokenAddress`\r\n     *          contract with the `_americanaTokenId` specified.\r\n     *\r\n     *          Requirements:\r\n     *\r\n     *          - The `_sig` recovers to an authorized address when compared\r\n     *            against the hash of the other encoded params.\r\n     *          - Msg.sender has approved Americana contract to transfer their aux token\r\n     *          - block.timestamp must be less than _sigExpirationDate\r\n     *          - The`_auxTokenAddress` cannot be address(0) or address(this)\r\n     *          - Sig digest must not be used or cancelled via isInvalidated mapping\r\n     */\r\n    function bundle(\r\n        uint256 _sigExpirationDate,\r\n        address _auxTokenAddress,\r\n        uint48 _auxTokenId,\r\n        uint48 _americanaTokenId,\r\n        uint256 _salt,\r\n        bytes calldata _authSig\r\n    ) external active {\r\n        if (\r\n            _auxTokenAddress == address(this) || _auxTokenAddress == address(0)\r\n        ) {\r\n            revert InvalidAuxToken();\r\n        }\r\n        // Generate sig digest for verification.\r\n        bytes32 digest = keccak256(\r\n            abi.encode(\r\n                msg.sender,\r\n                _sigExpirationDate,\r\n                _auxTokenAddress,\r\n                _auxTokenId,\r\n                _americanaTokenId,\r\n                block.chainid,\r\n                _salt\r\n            )\r\n        );\r\n        if (\r\n            bundleDataByTokenId[_americanaTokenId].auxTokenAddress != address(0)\r\n        ) {\r\n            revert CannotBundleAnAlreadyBundledToken();\r\n        }\r\n        if (\r\n            !hasAnyRole(\r\n                digest.toEthSignedMessageHash().recover(_authSig),\r\n                AUTHORIZED_MESSAGE_SIGNER_ROLE\r\n            )\r\n        ) {\r\n            revert InvalidSignerAddress();\r\n        }\r\n\r\n        if (isInvalidated[digest]) {\r\n            revert SignatureUsedOrCancelled();\r\n        }\r\n        if (_sigExpirationDate < block.timestamp) {\r\n            revert BundleSignatureExpired();\r\n        }\r\n\r\n        isInvalidated[digest] = true;\r\n\r\n        // Transfer Americana token to this contract.\r\n        ERC721A.transferFrom(msg.sender, address(this), _americanaTokenId);\r\n\r\n        // Transfer aux token to this contract.\r\n        IERC721A(_auxTokenAddress).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _auxTokenId\r\n        );\r\n\r\n        uint256 bundleTokenId = _nextTokenId();\r\n\r\n        // Store bundle data struct in `bundleDataByTokenId` mapping.\r\n        bundleDataByTokenId[bundleTokenId] = BundleData(\r\n            _auxTokenAddress,\r\n            _auxTokenId,\r\n            _americanaTokenId\r\n        );\r\n\r\n        _mint(msg.sender, 1);\r\n\r\n        emit BundleCreated(\r\n            _auxTokenAddress,\r\n            _auxTokenId,\r\n            _americanaTokenId,\r\n            bundleTokenId,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev     Unwraps the bundle specified by the `_tokenId`. Transfers\r\n     *          underlying tokens to msg.sender.\r\n     *\r\n     *          Requirements:\r\n     *\r\n     *          - Msg.sender is ownerOf(_tokenId)\r\n     */\r\n    function unwrap(uint256 _bundleTokenId) external active {\r\n        if (ownerOf(_bundleTokenId) != msg.sender) {\r\n            revert UnwrapByNonOwner();\r\n        }\r\n\r\n        // Burn bundle token\r\n        _burn(_bundleTokenId, false);\r\n\r\n        BundleData memory _bundle = bundleDataByTokenId[_bundleTokenId];\r\n\r\n        // Transfer Americana token to msg.sender\r\n        // Note, a check that `_bundleTokenId` is a bundle is not necessary because if it is not, this transfer call with tokenId 0 will revert with `OwnerQueryForNonexistentToken()` as there is no token with id 0.\r\n\r\n        this.transferFrom(address(this), msg.sender, _bundle.americanaTokenId);\r\n\r\n        // Transfer aux token to msg.sender.\r\n        IERC721A(_bundle.auxTokenAddress).transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            _bundle.auxTokenId\r\n        );\r\n\r\n        delete bundleDataByTokenId[_bundleTokenId];\r\n\r\n        emit BundleUnwrapped(\r\n            _bundle.auxTokenAddress,\r\n            _bundle.auxTokenId,\r\n            _bundle.americanaTokenId,\r\n            msg.sender,\r\n            _bundleTokenId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the next token id that will be minted.\r\n     */\r\n    function nextToken() external view returns (uint256) {\r\n        return _nextTokenId();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the contracts baseURI.\r\n     */\r\n    function baseURI() external view returns (string memory) {\r\n        return _baseURI();\r\n    }\r\n\r\n    // *************************************************************\r\n    //                        Auth Functions\r\n    // *************************************************************\r\n\r\n    /**\r\n     * @dev Updates paused state of contract to opposite.\r\n     *\r\n     *      Requirements:\r\n     *\r\n     *      - `msg.sender` must be owner\r\n     */\r\n    function flipPause() external onlyOwner {\r\n        isPaused = !isPaused;\r\n        emit PauseStateUpdated(isPaused);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates redeemable state of contract to opposite.\r\n     *\r\n     *      Requirements:\r\n     *\r\n     *      - `msg.sender` must be owner\r\n     */\r\n    function flipRedeemable() external onlyOwner {\r\n        redemptionPaused = !redemptionPaused;\r\n        emit RedeemStateUpdated(redemptionPaused);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `_baseTokenURI` to new `baseURI`.\r\n     *\r\n     *      Requirements:\r\n     *\r\n     *      - `msg.sender` must be authorized or owner\r\n     */\r\n    function setBaseURI(string memory baseURI) external onlyOwner {\r\n        _baseTokenURI = baseURI;\r\n\r\n        emit BaseUriUpdate(baseURI);\r\n    }\r\n\r\n    /**\r\n     * @dev  Force transfer out a bundles aux token in the case of emergency.\r\n     *\r\n     *       Requirements:\r\n     *\r\n     *       - `msg.sender` must be authorized or owner\r\n     *       - `_tokenId` must be a bundle\r\n     *\r\n     */\r\n    function authUnwrapExternalToken(uint256 _tokenId) external onlyOwner {\r\n        BundleData memory _bundle = bundleDataByTokenId[_tokenId];\r\n\r\n        if (_bundle.auxTokenAddress == address(0)) {\r\n            revert BundleAlreadyUnwrapped();\r\n        }\r\n\r\n        try\r\n            IERC721A(_bundle.auxTokenAddress).transferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                _bundle.auxTokenId\r\n            )\r\n        {} catch {\r\n            emit FailedAuthWithdrawal();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev  Force transfer out a bundles americana token in the case of emergency.\r\n     *\r\n     *       Requirements:\r\n     *\r\n     *       - `msg.sender` must be authorized or owner\r\n     *       - `_bundleTokenId` must be a bundle\r\n     *\r\n     */\r\n    function authUnwrapAmericanaToken(\r\n        uint256 _bundleTokenId\r\n    ) external onlyOwner {\r\n        BundleData memory _bundle = bundleDataByTokenId[_bundleTokenId];\r\n\r\n        if (_bundle.auxTokenAddress == address(0)) {\r\n            revert BundleAlreadyUnwrapped();\r\n        }\r\n\r\n        this.transferFrom(address(this), msg.sender, _bundle.americanaTokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev  Burns a bundle token after it is force unwrapped.\r\n     *\r\n     *       Requirements:\r\n     *\r\n     *       - `_bundleTokenId` must be a bundle\r\n     *       - both originally bundled tokens must not be held by this contract\r\n     *       - `msg.sender` must be authorized or owner\r\n     *\r\n     */\r\n    function burnWrapperToken(\r\n        uint256 _bundleTokenId\r\n    ) external onlyRolesOrOwner(AUTH_ADDRESS_ROLE) {\r\n        BundleData memory _bundle = bundleDataByTokenId[_bundleTokenId];\r\n\r\n        if (\r\n            ERC721A(_bundle.auxTokenAddress).ownerOf(_bundle.auxTokenId) !=\r\n            address(this) &&\r\n            ownerOf(_bundle.americanaTokenId) != address(this)\r\n        ) {\r\n            _burn(_bundleTokenId, false);\r\n            delete bundleDataByTokenId[_bundleTokenId];\r\n            emit WrapperBurnt(_bundleTokenId);\r\n        } else {\r\n            revert CannotBurnToken();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev     Cancels the digest of a bundle signature. This cancellation is checked upon bundling.\r\n     */\r\n    function cancelBundleDigest(\r\n        address _bundler,\r\n        uint256 _sigExpirationDate,\r\n        address _auxTokenAddress,\r\n        uint48 _auxTokenId,\r\n        uint48 _americanaTokenId,\r\n        uint256 _salt\r\n    ) external onlyRolesOrOwner(AUTH_ADDRESS_ROLE) {\r\n        bytes32 digest = keccak256(\r\n            abi.encode(\r\n                _bundler,\r\n                _sigExpirationDate,\r\n                _auxTokenAddress,\r\n                _auxTokenId,\r\n                _americanaTokenId,\r\n                block.chainid,\r\n                _salt\r\n            )\r\n        );\r\n        isInvalidated[digest] = true;\r\n\r\n        emit SigCancelled(\r\n            _bundler,\r\n            _auxTokenAddress,\r\n            _auxTokenId,\r\n            _americanaTokenId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if a bundle digest has been invalidated.\r\n     */\r\n    function checkIfInvalidated(\r\n        address _bundler,\r\n        uint256 _sigExpirationDate,\r\n        address _auxTokenAddress,\r\n        uint48 _auxTokenId,\r\n        uint48 _americanaTokenId,\r\n        uint256 _salt\r\n    ) external view returns (bool) {\r\n        bytes32 digest = keccak256(\r\n            abi.encode(\r\n                _bundler,\r\n                _sigExpirationDate,\r\n                _auxTokenAddress,\r\n                _auxTokenId,\r\n                _americanaTokenId,\r\n                block.chainid,\r\n                _salt\r\n            )\r\n        );\r\n        return isInvalidated[digest];\r\n    }\r\n\r\n    /**\r\n     * @dev  Additional transferFrom to allow for auth signature validation.\r\n     *\r\n     * @notice This is the transferFrom that should be called by all EOA's.\r\n     *\r\n     *       Requirements:\r\n     *\r\n     *       - `_authSig` must be from an authorized address\r\n     *\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 sigExpiration,\r\n        bytes memory _authSig\r\n    ) public {\r\n        if (block.timestamp > sigExpiration) {\r\n            revert TransferSignatureExpired();\r\n        }\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(from, to, tokenId, sigExpiration, block.chainid)\r\n        );\r\n\r\n        address recoveredAuthAddress = ECDSA.tryRecover(\r\n            digest.toEthSignedMessageHash(),\r\n            _authSig\r\n        );\r\n\r\n        if (!hasAnyRole(recoveredAuthAddress, AUTHORIZED_MESSAGE_SIGNER_ROLE)) {\r\n            revert InvalidSignerAddress();\r\n        }\r\n\r\n        ERC721A.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    // *************************************************************\r\n    //                           OVERRIDES\r\n    // *************************************************************\r\n\r\n    /**\r\n     * @dev  Override of ERC721A transferFrom to restrict access to authorized contracts.\r\n     *\r\n     * @notice This function is meant to allow transferFrom calls to occur where authSigs are\r\n     *         not available or necessary. EX external calls coming from this contract using the `this`\r\n     *         keyword in order to transfer tokens held by this contract.\r\n     *\r\n     *       Requirements:\r\n     *\r\n     *       - `msg.sender` must be have `APPROVED_CONTRACT_ROLE` role.\r\n     *\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public payable override {\r\n        if (!hasAnyRole(msg.sender, APPROVED_CONTRACT_ROLE)) {\r\n            revert UnauthorizedCaller();\r\n        }\r\n\r\n        ERC721A.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns the current base URI.\r\n     */\r\n    function _baseURI() internal view override returns (string memory) {\r\n        return _baseTokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev  Override of ERC721A approve to restrict access to authorized contracts.\r\n     *\r\n     * @notice This function is meant to control what addresses can be approved to transfer\r\n     *         tokens. This is to prevent unauthorized contracts from being approved to\r\n     *         transfer tokens, EX: a marketplace contract that does not abide by royalties.\r\n     *\r\n     *       Requirements:\r\n     *\r\n     *       - `operator` must be have `APPROVED_CONTRACT_ROLE` role.\r\n     *\r\n     */\r\n    function approve(\r\n        address operator,\r\n        uint256 tokenId\r\n    ) public payable override authorizedContract(operator) {\r\n        ERC721A.approve(operator, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev  Override of ERC721A setApprovalForAll to restrict access to authorized contracts.\r\n     *\r\n     * @notice This function is meant to control what addresses can be approved to transfer\r\n     *         tokens. This is to prevent unauthorized contracts from being approved to\r\n     *         transfer tokens, EX: a marketplace contract that does not abide by royalties.\r\n     *\r\n     *       Requirements:\r\n     *\r\n     *       - `operator` must be have `APPROVED_CONTRACT_ROLE` role.\r\n     *\r\n     */\r\n    function setApprovalForAll(\r\n        address operator,\r\n        bool _approved\r\n    ) public override authorizedContract(operator) {\r\n        ERC721A.setApprovalForAll(operator, _approved);\r\n    }\r\n\r\n    function _startTokenId() internal view override returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns ERC721A ownership data.\r\n     */\r\n    function ownershipOf(\r\n        uint256 tokenId\r\n    ) public view returns (TokenOwnership memory) {\r\n        return _ownershipOf(tokenId);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BundleAlreadyUnwrapped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BundleSignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotBundleAnAlreadyBundledToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotBurnToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRedeemBundleToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAuxToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintSignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHandoverRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemByNonOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemSignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedemptionPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureUsedOrCancelled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferSignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnwrapByNonOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"newUri\",\"type\":\"string\"}],\"name\":\"BaseUriUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auxTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"auxTokenId\",\"type\":\"uint48\"},{\"indexed\":true,\"internalType\":\"uint48\",\"name\":\"americanaTokenId\",\"type\":\"uint48\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bundleTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bundler\",\"type\":\"address\"}],\"name\":\"BundleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auxTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"auxTokenId\",\"type\":\"uint48\"},{\"indexed\":true,\"internalType\":\"uint48\",\"name\":\"americanaTokenId\",\"type\":\"uint48\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bundleTokenId\",\"type\":\"uint256\"}],\"name\":\"BundleUnwrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FailedAuthWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"PauseStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"RedeemStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roles\",\"type\":\"uint256\"}],\"name\":\"RolesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bundler\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auxTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint48\",\"name\":\"auxTokenId\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"americanaTokenId\",\"type\":\"uint48\"}],\"name\":\"SigCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"WrapperBurnt\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APPROVED_CONTRACT_ROLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTHORIZED_MESSAGE_SIGNER_ROLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUTH_ADDRESS_ROLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bundleTokenId\",\"type\":\"uint256\"}],\"name\":\"authUnwrapAmericanaToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"authUnwrapExternalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sigExpirationDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_auxTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_auxTokenId\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_americanaTokenId\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_authSig\",\"type\":\"bytes\"}],\"name\":\"bundle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bundleDataByTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"auxTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"auxTokenId\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"americanaTokenId\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bundleTokenId\",\"type\":\"uint256\"}],\"name\":\"burnWrapperToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bundler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sigExpirationDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_auxTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_auxTokenId\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_americanaTokenId\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"cancelBundleDigest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bundler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sigExpirationDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_auxTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_auxTokenId\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_americanaTokenId\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"checkIfInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"completeOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipRedeemable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roles\",\"type\":\"uint256\"}],\"name\":\"grantRoles\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roles\",\"type\":\"uint256\"}],\"name\":\"hasAllRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roles\",\"type\":\"uint256\"}],\"name\":\"hasAnyRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sigExpirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_authSig\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roles\",\"type\":\"uint256\"}],\"name\":\"ordinalsFromRoles\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"ordinals\",\"type\":\"uint8[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipHandoverValidFor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sigExpirationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_authSig\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roles\",\"type\":\"uint256\"}],\"name\":\"renounceRoles\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roles\",\"type\":\"uint256\"}],\"name\":\"revokeRoles\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"ordinals\",\"type\":\"uint8[]\"}],\"name\":\"rolesFromOrdinals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roles\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rolesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roles\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigExpiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_authSig\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bundleTokenId\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AmericanaToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000d416d65726963616e614e465473000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005414e465473000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cda718e2d65920e208d62119b988df9cef40dda9e342db738f977d626da5293e"}