{"SourceCode": "pragma solidity ^0.4.22;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(address(0) != _newOwner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, msg.sender);\r\n        owner = msg.sender;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n/** @author OVCode Switzerland AG */\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n    /**\r\n    * @dev constructor\r\n    */\r\n    function SafeMath() public {\r\n    }\r\n\r\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(a >= b);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/** @author OVCode Switzerland AG */\r\n\r\ncontract TokenERC20 is SafeMath {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    \r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event ReceiveApproval(address _from, uint256 _value, address _token);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n    * For the ERC20 short address attack.\r\n    */\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev constructor\r\n    */\r\n    function TokenERC20() public {\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(safeAdd(balanceOf[_to],_value) > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = safeAdd(balanceOf[_from],balanceOf[_to]);\r\n        // Subtract from the sender\r\n        balanceOf[_from] = safeSub(balanceOf[_from],_value);\r\n        // Add the same to the recipient\r\n        balanceOf[_to] = safeAdd(balanceOf[_to],_value);\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(32 * 3) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender],_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(32 * 2) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit ReceiveApproval(msg.sender, _value, this);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender],_value);  // Subtract from the sender\r\n        totalSupply = safeSub(totalSupply,_value);                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) onlyPayloadSize(32 * 2) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] = safeSub(balanceOf[_from],_value);                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender],_value);             // Subtract from the sender's allowance\r\n        totalSupply = safeSub(totalSupply,_value);                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/** @author OVCode Switzerland AG */\r\n\r\n\r\ncontract OVC is Ownable, TokenERC20 {\r\n\r\n    uint256 public ovcPerEther = 0;\r\n    uint256 public minOVC;\r\n    uint256 public constant ICO_START_TIME = 1526891400; // 05.21.2018 08:30:00 UTC\r\n    uint256 public constant ICO_END_TIME = 1532131199; // 07.20.2018 11:59:59 UTC\r\n\r\n    uint256 public totalOVCSold = 0;\r\n    \r\n    OVCLockAllocation public lockedAllocation;\r\n    mapping (address => bool) public frozenAccount;\r\n  \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n    event ChangeOvcEtherConversion(address owner, uint256 amount);\r\n    /* Initializes contract, Total Supply (83,875,000 OVC), name (OVCODE) and symbol (OVC), Min OVC Per Wallet\r\n    // Assign the 30,000,000 of the total supply to the presale account\r\n    // Assign the 10,500,000 of the total supply to the First ICO account\r\n    // Assign the 11,000,000 of the total supply to the Second ICO account\r\n    // Assign the 1,075,000 of the total supply to the bonus account\r\n    // Assign the 2,450,000 of the total supply to the bounty account\r\n    // Assign the 14,850,000 of the total supply to the first investor account\r\n    // Assign the 4,000,000 of the total supply to the second investor account\r\n    // Lock-in the 10,000,000 of the total supply to `OVCLockAllocation` contract within 36 months(unlock 1/3 every 12 months)\r\n    */\r\n    function OVC() public {\r\n\r\n        totalSupply = safeMul(83875000,(10 ** uint256(decimals) ));  // Update total supply(83,875,000) with the decimal amount\r\n        name = \"OVCODE\";  // Set the name for display purposes\r\n        symbol = \"OVC\";   // Set the symbol for display purposes\r\n        \r\n        // 30,000,000 tokens for Presale \r\n        balanceOf[msg.sender] = safeMul(30000000,(10 ** uint256(decimals))); \r\n\r\n        // 11,000,000 ICO tokens for direct buy on the smart contract\r\n        /* @notice Transfer this token to OVC Smart Contract Address \r\n          to enable the puchaser to buy directly on the contract */\r\n        address icoAccount1 = 0xe5aB5D1Da8817bFB4b0Af44eFDcCC850a47E477a;\r\n        balanceOf[icoAccount1] = safeMul(11000000,(10 ** uint256(decimals))); \r\n\r\n        // 10,500,000 ICO tokens for cash and btc purchaser\r\n        /* @notice This account will be used to send token \r\n            to the purchaser that used BTC or CASH */\r\n        address icoAccount2 = 0xfD382a7478ce3ddCd6a03F6c1848F31659753388;\r\n        balanceOf[icoAccount2] = safeMul(10500000,(10 ** uint256(decimals))); \r\n\r\n        // 1,075,000 tokens for bonus, referrals and discounts\r\n        address bonusAccount = 0xAde1Cf49c41919658132FF003C409fBcb2909472;\r\n        balanceOf[bonusAccount] = safeMul(1075000,(10 ** uint256(decimals)));\r\n        \r\n        // 2,450,000 tokens for bounty\r\n        address bountyAccount = 0xb690acb524BFBD968A91D614654aEEC5041597E0;\r\n        balanceOf[bountyAccount] = safeMul(2450000,(10 ** uint256(decimals)));\r\n\r\n        // 14,850,000 & 4,000,000 for our investors\r\n        address investor1 = 0x17dC8dD84bD8DbAC168209360EDc1E8539D965DA;\r\n        balanceOf[investor1] = safeMul(14850000,(10 ** uint256(decimals)));\r\n        address investor2 = 0x5B2213eeFc9b7939D863085f7F2D9D1f3a771D5f;\r\n        balanceOf[investor2] = safeMul(4000000,(10 ** uint256(decimals)));\r\n        \r\n        // Founder and Developer 10,000,000 of the total Supply / Lock-in within 36 months(unlock 1/3 every 12 months)\r\n        uint256 totalAllocation = safeMul(10000000,(10 ** uint256(decimals)));\r\n        \r\n        // Initilize the `OVCLockAllocation` contract with the totalAllocation and 3 allocated wallets\r\n        address firstAllocatedWallet = 0xD0427222388145a1A14F5FC4a376e8412C39c6a4;\r\n        address secondAllocatedWallet = 0xe141c480274376A4eB499ACEeD84c47b5FDF4B39;\r\n        address thirdAllocatedWallet = 0xD46811aBe15a53dd76b309E3e1f8f9C4550D3918;\r\n        lockedAllocation = new OVCLockAllocation(totalAllocation,firstAllocatedWallet,secondAllocatedWallet,thirdAllocatedWallet);\r\n        // Assign the 10,000,000 lock token to the `OVCLockAllocation` contract address\r\n        balanceOf[lockedAllocation] = totalAllocation;\r\n\r\n        // @notice Minimum token per wallet 10 OVC\r\n        minOVC = safeMul(10,(10 ** uint256(decimals)));\r\n    }\r\n    \r\n    /* @notice Allow user to send ether directly to the contract address */\r\n    function () public payable {\r\n        buyTokens();\r\n    }\r\n    \r\n    /* @notice private function for buy token, enable the purchaser to \r\n    // send Ether directly to the contract address */\r\n    function buyTokens() private {\r\n        require(now > ICO_START_TIME );\r\n        require(now < ICO_END_TIME );\r\n\r\n        uint256 _value = safeMul(msg.value,ovcPerEther);\r\n        uint256 futureBalance = safeAdd(balanceOf[msg.sender],_value);\r\n\r\n        require(futureBalance >= minOVC);\r\n        owner.transfer(address(this).balance);\r\n\r\n        _transfer(this, msg.sender, _value);\r\n        totalOVCSold = safeAdd(totalOVCSold,_value);\r\n    }\r\n    \r\n     /* @notice Change the current amount of OVC token per Ether */\r\n    function changeOVCPerEther(uint256 amount) onlyPayloadSize(1 * 32) onlyOwner public {\r\n        require(amount >= 0);\r\n        ovcPerEther = amount;\r\n        emit ChangeOvcEtherConversion(msg.sender, amount);\r\n    }\r\n\r\n    /* @notice Transfer all unsold token to the contract owner */\r\n    function transferUnsoldToken() onlyOwner public {\r\n        require(now > ICO_END_TIME );\r\n        require (balanceOf[this] > 0); \r\n        uint256 unsoldToken = balanceOf[this]; \r\n        _transfer(this, msg.sender, unsoldToken);\r\n    }\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough balance\r\n        require (safeAdd(balanceOf[_to],_value) > balanceOf[_to]); // Check for overflows\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        balanceOf[_from] = safeSub(balanceOf[_from],_value);// Subtract from the sender\r\n        balanceOf[_to] = safeAdd(balanceOf[_to],_value);// Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    function mintToken(address target, uint256 mintedAmount) onlyPayloadSize(32 * 2) onlyOwner public {\r\n        balanceOf[target] = safeAdd(balanceOf[target],mintedAmount);\r\n        totalSupply = safeAdd(totalSupply,mintedAmount);\r\n        emit Transfer(0, this, mintedAmount);\r\n        emit Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n}\r\n\r\n/** @author OVCode Switzerland AG */\r\n\r\n\r\ncontract OVCLockAllocation is SafeMath {\r\n\r\n    uint256 public totalLockAllocated;\r\n    OVC public ovc;\r\n    /**\r\n    * For the ERC20 short address attack.\r\n    */\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    struct Allocations {\r\n        uint256 allocated;\r\n        uint256 unlockedAt;\r\n        bool released;\r\n    }\r\n\r\n    mapping (address => Allocations) public allocations;\r\n\r\n    /* Initialize the total allocated OVC token */\r\n    // Initialize the 3 wallet address, allocated amount and date unlock\r\n    // @param `totalAllocated` Total allocated token from  `OVC` contract\r\n    // @param `firstAllocatedWallet` wallet address that allowed to unlock the first 1/3 allocated token\r\n    // @param `secondAllocatedWallet` wallet address that allowed to unlock the second 1/3 allocated token\r\n    // @param `thirdAllocatedWallet` wallet address that allowed to unlock the third 1/3 allocated token\r\n    function OVCLockAllocation(uint256 totalAllocated, address firstAllocatedWallet, address secondAllocatedWallet, address thirdAllocatedWallet) public {\r\n        ovc = OVC(msg.sender);\r\n        totalLockAllocated = totalAllocated;\r\n        Allocations memory allocation;\r\n\r\n        // Initialize the first allocation wallet address and date unlockedAt\r\n        // Unlock 1/3 or 33% of the token allocated after 12 months\r\n        allocation.allocated = safeDiv(safeMul(totalLockAllocated, 33),100);\r\n        allocation.unlockedAt = safeAdd(now,(safeMul(12,30 days)));\r\n        allocation.released = false;\r\n        allocations[firstAllocatedWallet] = allocation;\r\n        \r\n\r\n        // Initialize the second allocation wallet address and date unlockedAt\r\n        // Unlock 1/3 or 33% of the token allocated after 24 months\r\n        allocation.allocated = safeDiv(safeMul(totalLockAllocated, 33),100);\r\n        allocation.unlockedAt = safeAdd(now,(safeMul(24,30 days)));\r\n        allocation.released = false;\r\n        allocations[secondAllocatedWallet] = allocation;\r\n\r\n        // Initialize the third allocation wallet address and date unlockedAt\r\n        // Unlock last or 34% of the token allocated after 36 months\r\n        allocation.allocated = safeDiv(safeMul(totalLockAllocated, 34),100);\r\n        allocation.unlockedAt = safeAdd(now,(safeMul(36,30 days))); \r\n        allocation.released = false;\r\n        allocations[thirdAllocatedWallet] = allocation;\r\n    }\r\n    \r\n        /**\r\n    * @notice called by allocated address to release the token\r\n    */\r\n    function releaseTokens() public {\r\n        Allocations memory allocation;\r\n        allocation = allocations[msg.sender];\r\n        require(allocation.released == false);\r\n        require(allocation.allocated > 0);\r\n        require(allocation.unlockedAt > 0);\r\n        require(now >= allocation.unlockedAt);\r\n            \r\n        uint256 allocated = allocation.allocated;\r\n        ovc.transfer(msg.sender, allocated);\r\n\r\n        allocation.allocated = 0;\r\n        allocation.unlockedAt = 0;\r\n        allocation.released = true;\r\n        allocations[msg.sender] = allocation;\r\n    }\r\n} \r\n\r\n/** @author OVCode Switzerland AG */", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeOVCPerEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_END_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalOVCSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_START_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minOVC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ovcPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferUnsoldToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ChangeOvcEtherConversion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ReceiveApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "OVC", "CompilerVersion": "v0.4.23+commit.124ca40d", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://7834c36707f738976c86ec432324fce45b5acb64267a6ccd54aea58403f44afe"}