{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/YourContract.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// Useful for debugging. Remove when deploying to a live network.\\n//import \\\"hardhat/console.sol\\\";\\n\\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * A smart contract that allows changing a state variable of the contract and tracking the changes\\n * It also allows the owner to withdraw the Ether in the contract\\n * @author BuidlGuidl\\n */\\ncontract YourContract {\\n\\n\\t// yo chat gpt gimme a shitty splitter function for a smart contract plz: \\n\\n\\t// This function allows the owner to send specified amounts of Ether\\n    // to a list of addresses.\\n    function split(address[] memory recipients, uint[] memory amounts) public payable {\\n        // Sanity checks\\n        require(recipients.length == amounts.length, \\\"Array lengths do not match\\\");\\n        uint total = 0;\\n        for (uint i = 0; i < amounts.length; i++) {\\n            total += amounts[i];\\n        }\\n        require(total == msg.value, \\\"Sent value does not match the total amounts to be distributed\\\");\\n\\n        // Sending specified amounts of Ether to the list of addresses\\n        for (uint i = 0; i < recipients.length; i++) {\\n            // Using .call to send Ether\\n            // This is a low-level function and must be used with caution\\n            (bool success, ) = recipients[i].call{value: amounts[i]}(\\\"\\\");\\n            require(success, \\\"Failed to send Ether\\\");\\n        }\\n    }\\n\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"split\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "YourContract", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}