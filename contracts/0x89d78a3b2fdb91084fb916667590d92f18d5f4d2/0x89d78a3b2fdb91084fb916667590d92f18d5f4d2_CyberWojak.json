{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Cyberwojak.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/*\\r\\n\\r\\n \u2584\u2584\u00b7  \u2584\u00b7 \u2584\u258c\u2584\u2584\u2584\u2584\u00b7 \u2584\u2584\u2584 .\u2584\u2584\u2584      \u2584\u2584\u258c \u2590 \u2584\u258c       \u2590\u2584\u2584\u2584 \u2584\u2584\u2584\u00b7 \u2584 \u2022\u2584 \\r\\n\u2590\u2588 \u258c\u25aa\u2590\u2588\u25aa\u2588\u2588\u258c\u2590\u2588 \u2580\u2588\u25aa\u2580\u2584.\u2580\u00b7\u2580\u2584 \u2588\u00b7    \u2588\u2588\u00b7 \u2588\u258c\u2590\u2588\u25aa       \u00b7\u2588\u2588\u2590\u2588 \u2580\u2588 \u2588\u258c\u2584\u258c\u25aa\\r\\n\u2588\u2588 \u2584\u2584\u2590\u2588\u258c\u2590\u2588\u25aa\u2590\u2588\u2580\u2580\u2588\u2584\u2590\u2580\u2580\u25aa\u2584\u2590\u2580\u2580\u2584     \u2588\u2588\u25aa\u2590\u2588\u2590\u2590\u258c \u2584\u2588\u2580\u2584 \u25aa\u2584 \u2588\u2588\u2584\u2588\u2580\u2580\u2588 \u2590\u2580\u2580\u2584\u00b7\\r\\n\u2590\u2588\u2588\u2588\u258c \u2590\u2588\u2580\u00b7.\u2588\u2588\u2584\u25aa\u2590\u2588\u2590\u2588\u2584\u2584\u258c\u2590\u2588\u2022\u2588\u258c    \u2590\u2588\u258c\u2588\u2588\u2590\u2588\u258c\u2590\u2588\u258c.\u2590\u258c\u2590\u258c\u2590\u2588\u258c\u2590\u2588 \u25aa\u2590\u258c\u2590\u2588.\u2588\u258c\\r\\n\u00b7\u2580\u2580\u2580   \u2580 \u2022 \u00b7\u2580\u2580\u2580\u2580  \u2580\u2580\u2580 .\u2580  \u2580     \u2580\u2580\u2580\u2580 \u2580\u25aa \u2580\u2588\u2584\u2580\u25aa \u2580\u2580\u2580\u2022 \u2580  \u2580 \u00b7\u2580  \u2580\\r\\n                                                                             \\r\\nhttps://cyberwojak.com/\\r\\nhttps://twitter.com/CyberWojak\\r\\nhttps://t.me/cyberwojak69000\\r\\n\\r\\n*/\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Factory { event PairCreated( address indexed token0, address indexed token1, address pair, uint ); function feeTo() external view returns (address); function feeToSetter() external view returns (address); function getPair( address tokenA, address tokenB ) external view returns (address pair); function allPairs(uint) external view returns (address pair); function allPairsLength() external view returns (uint); function createPair( address tokenA, address tokenB ) external returns (address pair); function setFeeTo(address) external; function setFeeToSetter(address) external; }\\r\\ninterface IUniswapV2Router01 { function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity); function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity); function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB); function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH); function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB); function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH); function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); function swapExactETHForTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable returns (uint[] memory amounts); function swapTokensForExactETH( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); function swapExactTokensForETH( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); function swapETHForExactTokens( uint amountOut, address[] calldata path, address to, uint deadline ) external payable returns (uint[] memory amounts); function quote( uint amountA, uint reserveA, uint reserveB ) external pure returns (uint amountB); function getAmountOut( uint amountIn, uint reserveIn, uint reserveOut ) external pure returns (uint amountOut); function getAmountIn( uint amountOut, uint reserveIn, uint reserveOut ) external pure returns (uint amountIn); function getAmountsOut( uint amountIn, address[] calldata path ) external view returns (uint[] memory amounts); function getAmountsIn( uint amountOut, address[] calldata path ) external view returns (uint[] memory amounts); }\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 { function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH); function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH); function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable; function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; }\\r\\ninterface IUniswapV2Pair { event Approval(address indexed owner, address indexed spender, uint value); event Transfer(address indexed from, address indexed to, uint value); function name() external pure returns (string memory); function symbol() external pure returns (string memory); function decimals() external pure returns (uint8); function totalSupply() external view returns (uint); function balanceOf(address owner) external view returns (uint); function allowance( address owner, address spender ) external view returns (uint); function approve(address spender, uint value) external returns (bool); function transfer(address to, uint value) external returns (bool); function transferFrom( address from, address to, uint value ) external returns (bool); function DOMAIN_SEPARATOR() external view returns (bytes32); function PERMIT_TYPEHASH() external pure returns (bytes32); function nonces(address owner) external view returns (uint); function permit( address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s ) external; event Mint(address indexed sender, uint amount0, uint amount1); event Burn( address indexed sender, uint amount0, uint amount1, address indexed to ); event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to ); event Sync(uint112 reserve0, uint112 reserve1); function MINIMUM_LIQUIDITY() external pure returns (uint); function factory() external view returns (address); function token0() external view returns (address); function token1() external view returns (address); function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast); function price0CumulativeLast() external view returns (uint); function price1CumulativeLast() external view returns (uint); function kLast() external view returns (uint); function mint(address to) external returns (uint liquidity); function burn(address to) external returns (uint amount0, uint amount1); function swap( uint amount0Out, uint amount1Out, address to, bytes calldata data ) external; function skim(address to) external; function sync() external; function initialize(address, address) external; }\\r\\n\\r\\ninterface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer( address recipient, uint256 amount ) external returns (bool); function allowance( address owner, address spender ) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval( address indexed owner, address indexed spender, uint256 value ); }\\r\\ninterface IERC20Metadata is IERC20 { function name() external view returns (string memory); function symbol() external view returns (string memory); function decimals() external view returns (uint8); }\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function tryAdd( uint256 a, uint256 b ) internal pure returns (bool, uint256) { unchecked { uint256 c = a + b; if (c < a) return (false, 0); return (true, c); } }\\r\\n    function trySub( uint256 a, uint256 b ) internal pure returns (bool, uint256) { unchecked { if (b > a) return (false, 0); return (true, a - b); } }\\r\\n    function tryMul( uint256 a, uint256 b ) internal pure returns (bool, uint256) { unchecked { if (a == 0) return (true, 0); uint256 c = a * b; if (c / a != b) return (false, 0); return (true, c); } }\\r\\n    function tryDiv( uint256 a, uint256 b ) internal pure returns (bool, uint256) { unchecked { if (b == 0) return (false, 0); return (true, a / b); } }\\r\\n    function tryMod( uint256 a, uint256 b ) internal pure returns (bool, uint256) { unchecked { if (b == 0) return (false, 0); return (true, a % b); } }\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) { return a + b; }\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { return a - b; }\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) { return a * b; }\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) { return a / b; }\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) { return a % b; }\\r\\n    function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { unchecked { require(b <= a, errorMessage); return a - b; } }\\r\\n    function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { unchecked { require(b > 0, errorMessage); return a / b; } }\\r\\n    function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { unchecked { require(b > 0, errorMessage); return a % b; } }\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) { return msg.sender; }\\r\\n    function _msgData() internal view virtual returns (bytes calldata) { return msg.data; }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n    event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );\\r\\n    constructor() { _transferOwnership(_msgSender()); }\\r\\n    function owner() public view virtual returns (address) { return _owner; }\\r\\n    modifier onlyOwner() { require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\"); _; }\\r\\n    function renounceOwnership() public virtual onlyOwner { _transferOwnership(address(0)); }\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner { require( newOwner != address(0), \\\"Ownable: new owner is the zero address\\\" ); _transferOwnership(newOwner); }\\r\\n    function _transferOwnership(address newOwner) internal virtual { address oldOwner = _owner; _owner = newOwner; emit OwnershipTransferred(oldOwner, newOwner); }\\r\\n}\\r\\n\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    uint256 private _totalSupply;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    constructor(string memory name_, string memory symbol_) { _name = name_; _symbol = symbol_; }\\r\\n    function name() public view virtual override returns (string memory) { return _name; }\\r\\n    function symbol() public view virtual override returns (string memory) { return _symbol; }\\r\\n    function decimals() public view virtual override returns (uint8) { return 18; }\\r\\n    function totalSupply() public view virtual override returns (uint256) { return _totalSupply; }\\r\\n    function balanceOf( address account ) public view virtual override returns (uint256) { return _balances[account]; }\\r\\n    function transfer( address recipient, uint256 amount ) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; }\\r\\n    function allowance( address owner, address spender ) public view virtual override returns (uint256) { return _allowances[owner][spender]; }\\r\\n    function approve( address spender, uint256 amount ) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; }\\r\\n    function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) { _transfer(sender, recipient, amount); uint256 currentAllowance = _allowances[sender][_msgSender()]; require( currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\" ); unchecked { _approve(sender, _msgSender(), currentAllowance - amount); } return true; }\\r\\n    function increaseAllowance( address spender, uint256 addedValue ) public virtual returns (bool) { _approve( _msgSender(), spender, _allowances[_msgSender()][spender] + addedValue ); return true; }\\r\\n    function decreaseAllowance( address spender, uint256 subtractedValue ) public virtual returns (bool) { uint256 currentAllowance = _allowances[_msgSender()][spender]; require( currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\" ); unchecked { _approve(_msgSender(), spender, currentAllowance - subtractedValue); } return true; }\\r\\n    function _transfer( address sender, address recipient, uint256 amount ) internal virtual { require(sender != address(0), \\\"ERC20: transfer from the zero address\\\"); require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\"); _beforeTokenTransfer(sender, recipient, amount); uint256 senderBalance = _balances[sender]; require( senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\" ); unchecked { _balances[sender] = senderBalance - amount; } _balances[recipient] += amount; if (amount > 0) { emit Transfer(sender, recipient, amount); } _afterTokenTransfer(sender, recipient, amount); }\\r\\n    function _mint(address account, uint256 amount) internal virtual { require(account != address(0), \\\"ERC20: mint to the zero address\\\"); _beforeTokenTransfer(address(0), account, amount); _totalSupply += amount; _balances[account] += amount; emit Transfer(address(0), account, amount); _afterTokenTransfer(address(0), account, amount); }\\r\\n    function _burn(address account, uint256 amount) internal virtual { require(account != address(0), \\\"ERC20: burn from the zero address\\\"); _beforeTokenTransfer(account, address(0), amount); uint256 accountBalance = _balances[account]; require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\"); unchecked { _balances[account] = accountBalance - amount; } _totalSupply -= amount; emit Transfer(account, address(0), amount); _afterTokenTransfer(account, address(0), amount); }\\r\\n    function _approve( address owner, address spender, uint256 amount ) internal virtual { require(owner != address(0), \\\"ERC20: approve from the zero address\\\"); require(spender != address(0), \\\"ERC20: approve to the zero address\\\"); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); }\\r\\n    function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {}\\r\\n    function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {}\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ncontract CyberWojak is ERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\\r\\n\\r\\n    mapping(address => bool) public isExcludedFromFees;\\r\\n    mapping(address => bool) public isExcludedFromLimit;\\r\\n    mapping(address => bool) public isBlacklisted;\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n\\r\\n    address payable _marketingWallet = payable(address(0x9AE364edbF13EF4159182CB9DDbabae382071Be5));\\r\\n    address payable _devWallet = payable(address(0x9AE364edbF13EF4159182CB9DDbabae382071Be5));\\r\\n\\r\\n    bool public swapEnabled;\\r\\n    bool public isTradingEnabled;\\r\\n    uint256 public tradingStartBlock = 0;\\r\\n    uint8 public constant blockCount = 0;\\r\\n\\r\\n    uint16 public totalBuyFee;\\r\\n    uint16 public totalSellFee;\\r\\n    uint16 public marketingBuyFee;\\r\\n    uint16 public liquidityBuyFee;\\r\\n    uint16 public marketingSellFee;\\r\\n    uint16 public liquiditySellFee;\\r\\n\\r\\n    uint256 public maxBuyAmount = 10**6 * (10**18);\\r\\n    uint256 public maxWalletAmount = 10**7 * (10**18);\\r\\n\\r\\n    bool private swapping;\\r\\n\\r\\n    uint256 public swapTokensAtAmount = 10**5 * (10**18);\\r\\n\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public uniswapV2Pair;\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    constructor() ERC20(\\\"CYBER WOJAK 69000\\\", \\\"CWOJAK69\\\") {\\r\\n        marketingBuyFee = 19;\\r\\n        liquidityBuyFee = 1;\\r\\n        totalBuyFee = marketingBuyFee + liquidityBuyFee;\\r\\n\\r\\n        marketingSellFee = 34;\\r\\n        liquiditySellFee = 1;\\r\\n        totalSellFee = marketingSellFee + liquiditySellFee;\\r\\n\\r\\n        _connectRouter();\\r\\n\\r\\n        excludeFromFees(owner(), true);\\r\\n        excludeFromFees(address(this), true);\\r\\n\\r\\n        swapEnabled = true;\\r\\n\\r\\n        _mint(owner(), 10**9 * (10**18));\\r\\n    }\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        swapping = true;\\r\\n        _;\\r\\n        swapping = false;\\r\\n    }\\r\\n\\r\\n    function _connectRouter() private {\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        uniswapV2Pair = _uniswapV2Pair;\\r\\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\r\\n    }\\r\\n\\r\\n    function setBuyFee(uint16 marketing, uint16 liquidity) external onlyOwner {\\r\\n        require(marketing + liquidity <= 25, \\\"Tax too high\\\");\\r\\n        marketingBuyFee = marketing;\\r\\n        liquidityBuyFee = liquidity;\\r\\n\\r\\n        totalBuyFee = marketing+liquidity;\\r\\n    }\\r\\n\\r\\n    function setSellFee(uint16 marketing, uint16 liquidity) external onlyOwner {\\r\\n        require(marketing + liquidity <= 25, \\\"Tax too high\\\");\\r\\n        marketingSellFee = marketing;\\r\\n        liquiditySellFee = liquidity;\\r\\n\\r\\n        totalSellFee = marketing+liquidity;\\r\\n    }\\r\\n\\r\\n    function setMarketingWallet(address newWallet) external onlyOwner {\\r\\n        require(newWallet != address(0), \\\"Marketing wallet can not be a zero address\\\");\\r\\n\\r\\n        _marketingWallet = payable(newWallet);\\r\\n    }\\r\\n\\r\\n    function setSwapEnabled(bool value) external onlyOwner {\\r\\n        swapEnabled = value;\\r\\n    }\\r\\n\\r\\n    function setMaxWallet(uint256 amount) external onlyOwner {\\r\\n        maxWalletAmount = amount * 10 ** 18;\\r\\n    }\\r\\n\\r\\n    function setMaxBuyAmount(uint256 amount) external onlyOwner {\\r\\n        require(amount >= 100000, \\\"Can't set lower amount, No rugPull\\\");\\r\\n        maxBuyAmount = amount * 10 ** 18;\\r\\n    }\\r\\n\\r\\n    function setSwapTokensAtAmount(uint256 amount) external onlyOwner {\\r\\n        swapTokensAtAmount = amount * 10 ** 18;\\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\\r\\n        require(pair != uniswapV2Pair, \\\"Token: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\\\" );\\r\\n\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        require(automatedMarketMakerPairs[pair] != value, \\\"Token: Automated market maker pair is already set to that value\\\");\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function setBlacklist(address addr, bool value) external onlyOwner {\\r\\n        isBlacklisted[addr] = value;\\r\\n    }\\r\\n\\r\\n    function enableTrading() external onlyOwner {\\r\\n        isTradingEnabled = true;\\r\\n        if (tradingStartBlock == 0) tradingStartBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\r\\n        require(isExcludedFromFees[account] != excluded, \\\"Token: Account is already the value of 'excluded'\\\");\\r\\n        isExcludedFromFees[account] = excluded;\\r\\n\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n    function excludeFromLimit( address account, bool excluded) external onlyOwner {\\r\\n        isExcludedFromLimit[account] = excluded;\\r\\n    }\\r\\n\\r\\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\\r\\n        require(newAddress != address(uniswapV2Router), \\\"Token: The router already has that address\\\");\\r\\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\\r\\n        uniswapV2Router = IUniswapV2Router02(newAddress);\\r\\n    }\\r\\n\\r\\n    function claimStuckTokens(address _token) external onlyOwner {\\r\\n        require(_token != address(this), \\\"Can't remove the native token\\\");\\r\\n        if (_token == address(0x0)) {\\r\\n            payable(owner()).transfer(address(this).balance);\\r\\n            return;\\r\\n        }\\r\\n        IERC20 erc20token = IERC20(_token);\\r\\n        uint256 balance = erc20token.balanceOf(address(this));\\r\\n        erc20token.transfer(owner(), balance);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\\r\\n    }\\r\\n\\r\\n    function swapAndSendToMarketing(uint256 tokens) private lockTheSwap {\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        swapTokensForEth(tokens);\\r\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        uint256 devShare = newBalance.div(2);\\r\\n        uint256 marketingShare = newBalance - devShare;\\r\\n\\r\\n        _devWallet.transfer(devShare);\\r\\n        _marketingWallet.transfer(marketingShare);\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\\r\\n        uint256 half = tokens.div(2);\\r\\n        uint256 otherHalf = tokens.sub(half);\\r\\n\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        swapTokensForEth(half);\\r\\n\\r\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        addLiquidity(otherHalf, newBalance);\\r\\n\\r\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this), tokenAmount, 0, 0, address(0xdead), block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) internal override {\\r\\n        require(from != address(0), \\\"Token: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"Token: transfer to the zero address\\\");\\r\\n        require(!isBlacklisted[from] && !isBlacklisted[to],\\\"Blacklist: Account is blacklisted\\\");\\r\\n        require(isTradingEnabled || isExcludedFromFees[from],\\\"TradingEnabled: Trading not enabled yet\\\");\\r\\n\\r\\n        if (amount == 0) {\\r\\n            super._transfer(from, to, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        bool overMinimumTokenBalance = contractTokenBalance >= swapTokensAtAmount;\\r\\n\\r\\n        if (\\r\\n            swapEnabled &&\\r\\n            !swapping &&\\r\\n            from != uniswapV2Pair &&\\r\\n            overMinimumTokenBalance\\r\\n        ) {\\r\\n            contractTokenBalance = swapTokensAtAmount;\\r\\n            uint16 totalFee = totalBuyFee + totalSellFee;\\r\\n\\r\\n            uint256 swapTokens = contractTokenBalance.mul(liquidityBuyFee + liquiditySellFee).div(totalFee);\\r\\n            swapAndLiquify(swapTokens);\\r\\n\\r\\n            uint256 feeTokens = contractTokenBalance - swapTokens;\\r\\n            swapAndSendToMarketing(feeTokens);\\r\\n        }\\r\\n\\r\\n        bool takeFee = true;\\r\\n\\r\\n        if (isExcludedFromFees[from] || isExcludedFromFees[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        if (takeFee) {\\r\\n            uint256 fees;\\r\\n\\r\\n            if (automatedMarketMakerPairs[to]) {\\r\\n                fees = totalSellFee;\\r\\n            } else if (automatedMarketMakerPairs[from]) {\\r\\n                fees = totalBuyFee;\\r\\n            }\\r\\n\\r\\n            if (!isExcludedFromLimit[from] && !isExcludedFromLimit[to]) {\\r\\n                if (automatedMarketMakerPairs[from]) {\\r\\n                    require(amount <= maxBuyAmount, \\\"MaxBuyAmount: Buy exceeds limit\\\");\\r\\n                    if (block.number < tradingStartBlock + blockCount) {\\r\\n                        isBlacklisted[to] = true;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (!automatedMarketMakerPairs[to]) {\\r\\n                    require(balanceOf(to) + amount <= maxWalletAmount, \\\"MaxWalletAmount: Balance exceeds limit\\\");\\r\\n                }\\r\\n            }\\r\\n\\r\\n            uint256 feeAmount = amount.mul(fees).div(100);\\r\\n            amount = amount.sub(feeAmount);\\r\\n\\r\\n            super._transfer(from, address(this), feeAmount);\\r\\n        }\\r\\n\\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBuyFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySellFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBuyFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSellFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CyberWojak", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}