{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"iNNOVATOR lICENSE.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract InnovatorSale {\\r\\n    // State variables\\r\\n    address public owner;\\r\\n    uint256 public currentPrice = 0.15 ether;\\r\\n    uint256 public constant INCREASE_PERCENTAGE = 2; // 2%\\r\\n    mapping(address => uint256) public buyers;\\r\\n    uint256 public totalSales = 0; // New state variable to store total sales\\r\\n    bool public saleActive = true; // State variable to track if the sale is active\\r\\n\\r\\n    // Events\\r\\n    event ItemSold(address indexed buyer, uint256 price);\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Only the owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier saleIsActive() {\\r\\n        require(saleActive, \\\"Sale is not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier reentrancyGuard() {\\r\\n        require(!locked, \\\"Reentrant call detected!\\\");\\r\\n        locked = true;\\r\\n        _;\\r\\n        locked = false;\\r\\n    }\\r\\n\\r\\n    bool private locked = false;\\r\\n\\r\\n    // Constructor to set the owner of the contract\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    // Function to buy an item\\r\\n    function buy() external payable reentrancyGuard saleIsActive {\\r\\n        processPurchase(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    // Function to get the current price of the item\\r\\n    function getCurrentPrice() external view returns (uint256) {\\r\\n        return currentPrice;\\r\\n    }\\r\\n\\r\\n    // Function to withdraw the funds to the owner's address\\r\\n    function withdraw() external onlyOwner {\\r\\n        payable(owner).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    // Function to check the number of purchases by an address\\r\\n    function numberOfPurchases(address buyer) external view returns (uint256) {\\r\\n        return buyers[buyer];\\r\\n    }\\r\\n\\r\\n    // Fallback function to handle Ether sent to the contract with data\\r\\n    fallback() external payable {\\r\\n        processPurchase(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    // Receive function to handle plain Ether transfers\\r\\n    receive() external payable {\\r\\n        processPurchase(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    // Function to stop the sale\\r\\n    function stopSale() external onlyOwner {\\r\\n        saleActive = false;\\r\\n    }\\r\\n\\r\\n    // Function to start the sale\\r\\n    function startSale() external onlyOwner {\\r\\n        saleActive = true;\\r\\n    }\\r\\n\\r\\n    // Function to transfer ownership\\r\\n    function transferOwnership(address newOwner) external onlyOwner {\\r\\n        require(newOwner != address(0), \\\"New owner cannot be the zero address\\\");\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    // Internal function to process a purchase\\r\\n    function processPurchase(address buyer, uint256 amount) internal {\\r\\n        require(amount == currentPrice, \\\"Incorrect Ether sent\\\");\\r\\n\\r\\n        // Record the buyer's address and increment their purchase count\\r\\n        buyers[buyer] += 1;\\r\\n\\r\\n        // Increment total sales\\r\\n        totalSales += 1;\\r\\n\\r\\n        // Emit the event\\r\\n        emit ItemSold(buyer, currentPrice);\\r\\n\\r\\n        // Increase the price by 2%\\r\\n        currentPrice = currentPrice + (currentPrice * INCREASE_PERCENTAGE / 100);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"INCREASE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"numberOfPurchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "InnovatorSale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}