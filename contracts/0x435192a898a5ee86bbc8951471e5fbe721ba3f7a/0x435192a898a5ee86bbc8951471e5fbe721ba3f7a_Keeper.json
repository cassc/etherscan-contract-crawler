{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC5267.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ShortStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport {IKeeperOracles} from './IKeeperOracles.sol';\\nimport {IKeeperValidators} from './IKeeperValidators.sol';\\nimport {IKeeperRewards} from './IKeeperRewards.sol';\\n\\n/**\\n * @title IKeeper\\n * @author StakeWise\\n * @notice Defines the interface for the Keeper contract\\n */\\ninterface IKeeper is IKeeperOracles, IKeeperRewards, IKeeperValidators {\\n  /**\\n   * @notice Initializes the Keeper contract. Can only be called once.\\n   * @param _owner The address of the owner\\n   */\\n  function initialize(address _owner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKeeperOracles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport {IERC5267} from '@openzeppelin/contracts/interfaces/IERC5267.sol';\\n\\n/**\\n * @title IKeeperOracles\\n * @author StakeWise\\n * @notice Defines the interface for the KeeperOracles contract\\n */\\ninterface IKeeperOracles is IERC5267 {\\n  /**\\n   * @notice Event emitted on the oracle addition\\n   * @param oracle The address of the added oracle\\n   */\\n  event OracleAdded(address indexed oracle);\\n\\n  /**\\n   * @notice Event emitted on the oracle removal\\n   * @param oracle The address of the removed oracle\\n   */\\n  event OracleRemoved(address indexed oracle);\\n\\n  /**\\n   * @notice Event emitted on oracles config update\\n   * @param configIpfsHash The IPFS hash of the new config\\n   */\\n  event ConfigUpdated(string configIpfsHash);\\n\\n  /**\\n   * @notice Function for verifying whether oracle is registered or not\\n   * @param oracle The address of the oracle to check\\n   * @return `true` for the registered oracle, `false` otherwise\\n   */\\n  function isOracle(address oracle) external view returns (bool);\\n\\n  /**\\n   * @notice Total Oracles\\n   * @return The total number of oracles registered\\n   */\\n  function totalOracles() external view returns (uint256);\\n\\n  /**\\n   * @notice Function for adding oracle to the set\\n   * @param oracle The address of the oracle to add\\n   */\\n  function addOracle(address oracle) external;\\n\\n  /**\\n   * @notice Function for removing oracle from the set\\n   * @param oracle The address of the oracle to remove\\n   */\\n  function removeOracle(address oracle) external;\\n\\n  /**\\n   * @notice Function for updating the config IPFS hash\\n   * @param configIpfsHash The new config IPFS hash\\n   */\\n  function updateConfig(string calldata configIpfsHash) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKeeperRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport {IKeeperOracles} from './IKeeperOracles.sol';\\n\\n/**\\n * @title IKeeperRewards\\n * @author StakeWise\\n * @notice Defines the interface for the Keeper contract rewards\\n */\\ninterface IKeeperRewards is IKeeperOracles {\\n  /**\\n   * @notice Event emitted on rewards update\\n   * @param caller The address of the function caller\\n   * @param rewardsRoot The new rewards merkle tree root\\n   * @param avgRewardPerSecond The new average reward per second\\n   * @param updateTimestamp The update timestamp used for rewards calculation\\n   * @param nonce The nonce used for verifying signatures\\n   * @param rewardsIpfsHash The new rewards IPFS hash\\n   */\\n  event RewardsUpdated(\\n    address indexed caller,\\n    bytes32 indexed rewardsRoot,\\n    uint256 avgRewardPerSecond,\\n    uint64 updateTimestamp,\\n    uint64 nonce,\\n    string rewardsIpfsHash\\n  );\\n\\n  /**\\n   * @notice Event emitted on Vault harvest\\n   * @param vault The address of the Vault\\n   * @param rewardsRoot The rewards merkle tree root\\n   * @param totalAssetsDelta The Vault total assets delta since last sync. Can be negative in case of penalty/slashing.\\n   * @param unlockedMevDelta The Vault execution reward that can be withdrawn from shared MEV escrow. Only used by shared MEV Vaults.\\n   */\\n  event Harvested(\\n    address indexed vault,\\n    bytes32 indexed rewardsRoot,\\n    int256 totalAssetsDelta,\\n    uint256 unlockedMevDelta\\n  );\\n\\n  /**\\n   * @notice Event emitted on rewards min oracles number update\\n   * @param oracles The new minimum number of oracles required to update rewards\\n   */\\n  event RewardsMinOraclesUpdated(uint256 oracles);\\n\\n  /**\\n   * @notice A struct containing the last synced Vault's cumulative reward\\n   * @param assets The Vault cumulative reward earned since the start. Can be negative in case of penalty/slashing.\\n   * @param nonce The nonce of the last sync\\n   */\\n  struct Reward {\\n    int192 assets;\\n    uint64 nonce;\\n  }\\n\\n  /**\\n   * @notice A struct containing the last unlocked Vault's cumulative execution reward that can be withdrawn from shared MEV escrow. Only used by shared MEV Vaults.\\n   * @param assets The shared MEV Vault's cumulative execution reward that can be withdrawn\\n   * @param nonce The nonce of the last sync\\n   */\\n  struct UnlockedMevReward {\\n    uint192 assets;\\n    uint64 nonce;\\n  }\\n\\n  /**\\n   * @notice A struct containing parameters for rewards update\\n   * @param rewardsRoot The new rewards merkle root\\n   * @param avgRewardPerSecond The new average reward per second\\n   * @param updateTimestamp The update timestamp used for rewards calculation\\n   * @param rewardsIpfsHash The new IPFS hash with all the Vaults' rewards for the new root\\n   * @param signatures The concatenation of the Oracles' signatures\\n   */\\n  struct RewardsUpdateParams {\\n    bytes32 rewardsRoot;\\n    uint256 avgRewardPerSecond;\\n    uint64 updateTimestamp;\\n    string rewardsIpfsHash;\\n    bytes signatures;\\n  }\\n\\n  /**\\n   * @notice A struct containing parameters for harvesting rewards. Can only be called by Vault.\\n   * @param rewardsRoot The rewards merkle root\\n   * @param reward The Vault cumulative reward earned since the start. Can be negative in case of penalty/slashing.\\n   * @param unlockedMevReward The Vault cumulative execution reward that can be withdrawn from shared MEV escrow. Only used by shared MEV Vaults.\\n   * @param proof The proof to verify that Vault's reward is correct\\n   */\\n  struct HarvestParams {\\n    bytes32 rewardsRoot;\\n    int160 reward;\\n    uint160 unlockedMevReward;\\n    bytes32[] proof;\\n  }\\n\\n  /**\\n   * @notice Previous Rewards Root\\n   * @return The previous merkle tree root of the rewards accumulated by the Vaults\\n   */\\n  function prevRewardsRoot() external view returns (bytes32);\\n\\n  /**\\n   * @notice Rewards Root\\n   * @return The latest merkle tree root of the rewards accumulated by the Vaults\\n   */\\n  function rewardsRoot() external view returns (bytes32);\\n\\n  /**\\n   * @notice Rewards Nonce\\n   * @return The nonce used for updating rewards merkle tree root\\n   */\\n  function rewardsNonce() external view returns (uint64);\\n\\n  /**\\n   * @notice The last rewards update\\n   * @return The timestamp of the last rewards update\\n   */\\n  function lastRewardsTimestamp() external view returns (uint64);\\n\\n  /**\\n   * @notice The minimum number of oracles required to update rewards\\n   * @return The minimum number of oracles\\n   */\\n  function rewardsMinOracles() external view returns (uint256);\\n\\n  /**\\n   * @notice The rewards delay\\n   * @return The delay in seconds between rewards updates\\n   */\\n  function rewardsDelay() external view returns (uint256);\\n\\n  /**\\n   * @notice Get last synced Vault cumulative reward\\n   * @param vault The address of the Vault\\n   * @return assets The last synced reward assets\\n   * @return nonce The last synced reward nonce\\n   */\\n  function rewards(address vault) external view returns (int192 assets, uint64 nonce);\\n\\n  /**\\n   * @notice Get last unlocked shared MEV Vault cumulative reward\\n   * @param vault The address of the Vault\\n   * @return assets The last synced reward assets\\n   * @return nonce The last synced reward nonce\\n   */\\n  function unlockedMevRewards(address vault) external view returns (uint192 assets, uint64 nonce);\\n\\n  /**\\n   * @notice Checks whether Vault must be harvested\\n   * @param vault The address of the Vault\\n   * @return `true` if the Vault requires harvesting, `false` otherwise\\n   */\\n  function isHarvestRequired(address vault) external view returns (bool);\\n\\n  /**\\n   * @notice Checks whether the Vault can be harvested\\n   * @param vault The address of the Vault\\n   * @return `true` if Vault can be harvested, `false` otherwise\\n   */\\n  function canHarvest(address vault) external view returns (bool);\\n\\n  /**\\n   * @notice Checks whether rewards can be updated\\n   * @return `true` if rewards can be updated, `false` otherwise\\n   */\\n  function canUpdateRewards() external view returns (bool);\\n\\n  /**\\n   * @notice Checks whether the Vault has registered validators\\n   * @param vault The address of the Vault\\n   * @return `true` if Vault is collateralized, `false` otherwise\\n   */\\n  function isCollateralized(address vault) external view returns (bool);\\n\\n  /**\\n   * @notice Update rewards data\\n   * @param params The struct containing rewards update parameters\\n   */\\n  function updateRewards(RewardsUpdateParams calldata params) external;\\n\\n  /**\\n   * @notice Harvest rewards. Can be called only by Vault.\\n   * @param params The struct containing rewards harvesting parameters\\n   * @return totalAssetsDelta The total reward/penalty accumulated by the Vault since the last sync\\n   * @return unlockedMevDelta The Vault execution reward that can be withdrawn from shared MEV escrow. Only used by shared MEV Vaults.\\n   * @return harvested `true` when the rewards were harvested, `false` otherwise\\n   */\\n  function harvest(\\n    HarvestParams calldata params\\n  ) external returns (int256 totalAssetsDelta, uint256 unlockedMevDelta, bool harvested);\\n\\n  /**\\n   * @notice Set min number of oracles for confirming rewards update. Can only be called by the owner.\\n   * @param _rewardsMinOracles The new min number of oracles for confirming rewards update\\n   */\\n  function setRewardsMinOracles(uint256 _rewardsMinOracles) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKeeperValidators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport {IKeeperRewards} from './IKeeperRewards.sol';\\nimport {IKeeperOracles} from './IKeeperOracles.sol';\\n\\n/**\\n * @title IKeeperValidators\\n * @author StakeWise\\n * @notice Defines the interface for the Keeper validators\\n */\\ninterface IKeeperValidators is IKeeperOracles, IKeeperRewards {\\n  /**\\n   * @notice Event emitted on validators approval\\n   * @param vault The address of the Vault\\n   * @param exitSignaturesIpfsHash The IPFS hash with the validators' exit signatures\\n   */\\n  event ValidatorsApproval(address indexed vault, string exitSignaturesIpfsHash);\\n\\n  /**\\n   * @notice Event emitted on exit signatures update\\n   * @param caller The address of the function caller\\n   * @param vault The address of the Vault\\n   * @param nonce The nonce used for verifying Oracles' signatures\\n   * @param exitSignaturesIpfsHash The IPFS hash with the validators' exit signatures\\n   */\\n  event ExitSignaturesUpdated(\\n    address indexed caller,\\n    address indexed vault,\\n    uint256 nonce,\\n    string exitSignaturesIpfsHash\\n  );\\n\\n  /**\\n   * @notice Event emitted on validators min oracles number update\\n   * @param oracles The new minimum number of oracles required to approve validators\\n   */\\n  event ValidatorsMinOraclesUpdated(uint256 oracles);\\n\\n  /**\\n   * @notice Get nonce for the next vault exit signatures update\\n   * @param vault The address of the Vault to get the nonce for\\n   * @return The nonce of the Vault for updating signatures\\n   */\\n  function exitSignaturesNonces(address vault) external view returns (uint256);\\n\\n  /**\\n   * @notice Struct for approving registration of one or more validators\\n   * @param validatorsRegistryRoot The deposit data root used to verify that oracles approved validators\\n   * @param deadline The deadline for submitting the approval\\n   * @param validators The concatenation of the validators' public key, signature and deposit data root\\n   * @param signatures The concatenation of Oracles' signatures\\n   * @param exitSignaturesIpfsHash The IPFS hash with the validators' exit signatures\\n   */\\n  struct ApprovalParams {\\n    bytes32 validatorsRegistryRoot;\\n    uint256 deadline;\\n    bytes validators;\\n    bytes signatures;\\n    string exitSignaturesIpfsHash;\\n  }\\n\\n  /**\\n   * @notice The minimum number of oracles required to update validators\\n   * @return The minimum number of oracles\\n   */\\n  function validatorsMinOracles() external view returns (uint256);\\n\\n  /**\\n   * @notice Function for approving validators registration\\n   * @param params The parameters for approving validators registration\\n   */\\n  function approveValidators(ApprovalParams calldata params) external;\\n\\n  /**\\n   * @notice Function for updating exit signatures for every hard fork\\n   * @param vault The address of the Vault to update signatures for\\n   * @param deadline The deadline for submitting signatures update\\n   * @param exitSignaturesIpfsHash The IPFS hash with the validators' exit signatures\\n   * @param oraclesSignatures The concatenation of Oracles' signatures\\n   */\\n  function updateExitSignatures(\\n    address vault,\\n    uint256 deadline,\\n    string calldata exitSignaturesIpfsHash,\\n    bytes calldata oraclesSignatures\\n  ) external;\\n\\n  /**\\n   * @notice Function for updating validators min oracles number\\n   * @param _validatorsMinOracles The new minimum number of oracles required to approve validators\\n   */\\n  function setValidatorsMinOracles(uint256 _validatorsMinOracles) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOsTokenVaultController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\n/**\\n * @title IOsTokenVaultController\\n * @author StakeWise\\n * @notice Defines the interface for the OsTokenVaultController contract\\n */\\ninterface IOsTokenVaultController {\\n  /**\\n   * @notice Event emitted on minting shares\\n   * @param vault The address of the Vault\\n   * @param receiver The address that received the shares\\n   * @param assets The number of assets collateralized\\n   * @param shares The number of tokens the owner received\\n   */\\n  event Mint(address indexed vault, address indexed receiver, uint256 assets, uint256 shares);\\n\\n  /**\\n   * @notice Event emitted on burning shares\\n   * @param vault The address of the Vault\\n   * @param owner The address that owns the shares\\n   * @param assets The total number of assets withdrawn\\n   * @param shares The total number of shares burned\\n   */\\n  event Burn(address indexed vault, address indexed owner, uint256 assets, uint256 shares);\\n\\n  /**\\n   * @notice Event emitted on state update\\n   * @param profitAccrued The profit accrued since the last update\\n   * @param treasuryShares The number of shares minted for the treasury\\n   * @param treasuryAssets The number of assets minted for the treasury\\n   */\\n  event StateUpdated(uint256 profitAccrued, uint256 treasuryShares, uint256 treasuryAssets);\\n\\n  /**\\n   * @notice Event emitted on capacity update\\n   * @param capacity The amount after which the OsToken stops accepting deposits\\n   */\\n  event CapacityUpdated(uint256 capacity);\\n\\n  /**\\n   * @notice Event emitted on treasury address update\\n   * @param treasury The new treasury address\\n   */\\n  event TreasuryUpdated(address indexed treasury);\\n\\n  /**\\n   * @notice Event emitted on fee percent update\\n   * @param feePercent The new fee percent\\n   */\\n  event FeePercentUpdated(uint16 feePercent);\\n\\n  /**\\n   * @notice Event emitted on average reward per second update\\n   * @param avgRewardPerSecond The new average reward per second\\n   */\\n  event AvgRewardPerSecondUpdated(uint256 avgRewardPerSecond);\\n\\n  /**\\n   * @notice Event emitted on keeper address update\\n   * @param keeper The new keeper address\\n   */\\n  event KeeperUpdated(address keeper);\\n\\n  /**\\n   * @notice The OsToken capacity\\n   * @return The amount after which the OsToken stops accepting deposits\\n   */\\n  function capacity() external view returns (uint256);\\n\\n  /**\\n   * @notice The DAO treasury address that receives OsToken fees\\n   * @return The address of the treasury\\n   */\\n  function treasury() external view returns (address);\\n\\n  /**\\n   * @notice The fee percent (multiplied by 100)\\n   * @return The fee percent applied by the OsToken on the rewards\\n   */\\n  function feePercent() external view returns (uint64);\\n\\n  /**\\n   * @notice The address that can update avgRewardPerSecond\\n   * @return The address of the keeper contract\\n   */\\n  function keeper() external view returns (address);\\n\\n  /**\\n   * @notice The average reward per second used to mint OsToken rewards\\n   * @return The average reward per second earned by the Vaults\\n   */\\n  function avgRewardPerSecond() external view returns (uint256);\\n\\n  /**\\n   * @notice The fee per share used for calculating the fee for every position\\n   * @return The cumulative fee per share\\n   */\\n  function cumulativeFeePerShare() external view returns (uint256);\\n\\n  /**\\n   * @notice The total number of shares controlled by the OsToken\\n   * @return The total number of shares\\n   */\\n  function totalShares() external view returns (uint256);\\n\\n  /**\\n   * @notice Total assets controlled by the OsToken\\n   * @return The total amount of the underlying asset that is \\\"managed\\\" by OsToken\\n   */\\n  function totalAssets() external view returns (uint256);\\n\\n  /**\\n   * @notice Converts shares to assets\\n   * @param assets The amount of assets to convert to shares\\n   * @return shares The amount of shares that the OsToken would exchange for the amount of assets provided\\n   */\\n  function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Converts assets to shares\\n   * @param shares The amount of shares to convert to assets\\n   * @return assets The amount of assets that the OsToken would exchange for the amount of shares provided\\n   */\\n  function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n  /**\\n   * @notice Updates rewards and treasury fee checkpoint for the OsToken\\n   */\\n  function updateState() external;\\n\\n  /**\\n   * @notice Mint OsToken shares. Can only be called by the registered vault.\\n   * @param receiver The address that will receive the shares\\n   * @param shares The amount of shares to mint\\n   * @return assets The amount of assets minted\\n   */\\n  function mintShares(address receiver, uint256 shares) external returns (uint256 assets);\\n\\n  /**\\n   * @notice Burn shares for withdrawn assets. Can only be called by the registered vault.\\n   * @param owner The address that owns the shares\\n   * @param shares The amount of shares to burn\\n   * @return assets The amount of assets withdrawn\\n   */\\n  function burnShares(address owner, uint256 shares) external returns (uint256 assets);\\n\\n  /**\\n   * @notice Update treasury address. Can only be called by the owner.\\n   * @param _treasury The new treasury address\\n   */\\n  function setTreasury(address _treasury) external;\\n\\n  /**\\n   * @notice Update capacity. Can only be called by the owner.\\n   * @param _capacity The amount after which the OsToken stops accepting deposits\\n   */\\n  function setCapacity(uint256 _capacity) external;\\n\\n  /**\\n   * @notice Update fee percent. Can only be called by the owner. Cannot be larger than 10 000 (100%).\\n   * @param _feePercent The new fee percent\\n   */\\n  function setFeePercent(uint16 _feePercent) external;\\n\\n  /**\\n   * @notice Update keeper address. Can only be called by the owner.\\n   * @param _keeper The new keeper address\\n   */\\n  function setKeeper(address _keeper) external;\\n\\n  /**\\n   * @notice Updates average reward per second. Can only be called by the keeper.\\n   * @param _avgRewardPerSecond The new average reward per second\\n   */\\n  function setAvgRewardPerSecond(uint256 _avgRewardPerSecond) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IValidatorsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity =0.8.20;\\n\\n/**\\n * @title IValidatorsRegistry\\n * @author Ethereum Foundation\\n * @notice The validators deposit contract common interface\\n */\\ninterface IValidatorsRegistry {\\n  /// @notice A processed deposit event.\\n  event DepositEvent(\\n    bytes pubkey,\\n    bytes withdrawal_credentials,\\n    bytes amount,\\n    bytes signature,\\n    bytes index\\n  );\\n\\n  /// @notice Query the current deposit root hash.\\n  /// @return The deposit root hash.\\n  function get_deposit_root() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\n/**\\n * @title IVaultState\\n * @author StakeWise\\n * @notice Defines the interface for the VaultAdmin contract\\n */\\ninterface IVaultAdmin {\\n  /**\\n   * @notice Event emitted on metadata ipfs hash update\\n   * @param caller The address of the function caller\\n   * @param metadataIpfsHash The new metadata IPFS hash\\n   */\\n  event MetadataUpdated(address indexed caller, string metadataIpfsHash);\\n\\n  /**\\n   * @notice The Vault admin\\n   * @return The address of the Vault admin\\n   */\\n  function admin() external view returns (address);\\n\\n  /**\\n   * @notice Function for updating the metadata IPFS hash. Can only be called by Vault admin.\\n   * @param metadataIpfsHash The new metadata IPFS hash\\n   */\\n  function setMetadata(string calldata metadataIpfsHash) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport {IVaultAdmin} from './IVaultAdmin.sol';\\n\\n/**\\n * @title IVaultFee\\n * @author StakeWise\\n * @notice Defines the interface for the VaultFee contract\\n */\\ninterface IVaultFee is IVaultAdmin {\\n  /**\\n   * @notice Event emitted on fee recipient update\\n   * @param caller The address of the function caller\\n   * @param feeRecipient The address of the new fee recipient\\n   */\\n  event FeeRecipientUpdated(address indexed caller, address indexed feeRecipient);\\n\\n  /**\\n   * @notice The Vault's fee recipient\\n   * @return The address of the Vault's fee recipient\\n   */\\n  function feeRecipient() external view returns (address);\\n\\n  /**\\n   * @notice The Vault's fee percent in BPS\\n   * @return The fee percent applied by the Vault on the rewards\\n   */\\n  function feePercent() external view returns (uint16);\\n\\n  /**\\n   * @notice Function for updating the fee recipient address. Can only be called by the admin.\\n   * @param _feeRecipient The address of the new fee recipient\\n   */\\n  function setFeeRecipient(address _feeRecipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultMev.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport {IVaultState} from './IVaultState.sol';\\n\\n/**\\n * @title IVaultMev\\n * @author StakeWise\\n * @notice Common interface for the VaultMev contracts\\n */\\ninterface IVaultMev is IVaultState {\\n  /**\\n   * @notice The contract that accumulates MEV rewards\\n   * @return The MEV escrow contract address\\n   */\\n  function mevEscrow() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\n/**\\n * @title IVaultsRegistry\\n * @author StakeWise\\n * @notice Defines the interface for the VaultsRegistry\\n */\\ninterface IVaultsRegistry {\\n  /**\\n   * @notice Event emitted on a Vault addition\\n   * @param caller The address that has added the Vault\\n   * @param vault The address of the added Vault\\n   */\\n  event VaultAdded(address indexed caller, address indexed vault);\\n\\n  /**\\n   * @notice Event emitted on adding Vault implementation contract\\n   * @param impl The address of the new implementation contract\\n   */\\n  event VaultImplAdded(address indexed impl);\\n\\n  /**\\n   * @notice Event emitted on removing Vault implementation contract\\n   * @param impl The address of the removed implementation contract\\n   */\\n  event VaultImplRemoved(address indexed impl);\\n\\n  /**\\n   * @notice Event emitted on whitelisting the factory\\n   * @param factory The address of the whitelisted factory\\n   */\\n  event FactoryAdded(address indexed factory);\\n\\n  /**\\n   * @notice Event emitted on removing the factory from the whitelist\\n   * @param factory The address of the factory removed from the whitelist\\n   */\\n  event FactoryRemoved(address indexed factory);\\n\\n  /**\\n   * @notice Registered Vaults\\n   * @param vault The address of the vault to check whether it is registered\\n   * @return `true` for the registered Vault, `false` otherwise\\n   */\\n  function vaults(address vault) external view returns (bool);\\n\\n  /**\\n   * @notice Registered Vault implementations\\n   * @param impl The address of the vault implementation\\n   * @return `true` for the registered implementation, `false` otherwise\\n   */\\n  function vaultImpls(address impl) external view returns (bool);\\n\\n  /**\\n   * @notice Registered Factories\\n   * @param factory The address of the factory to check whether it is whitelisted\\n   * @return `true` for the whitelisted Factory, `false` otherwise\\n   */\\n  function factories(address factory) external view returns (bool);\\n\\n  /**\\n   * @notice Function for adding Vault to the registry. Can only be called by the whitelisted Factory.\\n   * @param vault The address of the Vault to add\\n   */\\n  function addVault(address vault) external;\\n\\n  /**\\n   * @notice Function for adding Vault implementation contract\\n   * @param newImpl The address of the new implementation contract\\n   */\\n  function addVaultImpl(address newImpl) external;\\n\\n  /**\\n   * @notice Function for removing Vault implementation contract\\n   * @param impl The address of the removed implementation contract\\n   */\\n  function removeVaultImpl(address impl) external;\\n\\n  /**\\n   * @notice Function for adding the factory to the whitelist\\n   * @param factory The address of the factory to add to the whitelist\\n   */\\n  function addFactory(address factory) external;\\n\\n  /**\\n   * @notice Function for removing the factory from the whitelist\\n   * @param factory The address of the factory to remove from the whitelist\\n   */\\n  function removeFactory(address factory) external;\\n\\n  /**\\n   * @notice Function for initializing the registry. Can only be called once during the deployment.\\n   * @param _owner The address of the owner of the contract\\n   */\\n  function initialize(address _owner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport {IKeeperRewards} from './IKeeperRewards.sol';\\nimport {IVaultFee} from './IVaultFee.sol';\\n\\n/**\\n * @title IVaultState\\n * @author StakeWise\\n * @notice Defines the interface for the VaultState contract\\n */\\ninterface IVaultState is IVaultFee {\\n  /**\\n   * @notice Event emitted on checkpoint creation\\n   * @param shares The number of burned shares\\n   * @param assets The amount of exited assets\\n   */\\n  event CheckpointCreated(uint256 shares, uint256 assets);\\n\\n  /**\\n   * @notice Event emitted on minting fee recipient shares\\n   * @param receiver The address of the fee recipient\\n   * @param shares The number of minted shares\\n   * @param assets The amount of minted assets\\n   */\\n  event FeeSharesMinted(address receiver, uint256 shares, uint256 assets);\\n\\n  /**\\n   * @notice Total assets in the Vault\\n   * @return The total amount of the underlying asset that is \\\"managed\\\" by Vault\\n   */\\n  function totalAssets() external view returns (uint256);\\n\\n  /**\\n   * @notice Function for retrieving total shares\\n   * @return The amount of shares in existence\\n   */\\n  function totalShares() external view returns (uint256);\\n\\n  /**\\n   * @notice The Vault's capacity\\n   * @return The amount after which the Vault stops accepting deposits\\n   */\\n  function capacity() external view returns (uint256);\\n\\n  /**\\n   * @notice Total assets available in the Vault. They can be staked or withdrawn.\\n   * @return The total amount of withdrawable assets\\n   */\\n  function withdrawableAssets() external view returns (uint256);\\n\\n  /**\\n   * @notice Queued Shares\\n   * @return The total number of shares queued for exit\\n   */\\n  function queuedShares() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the number of shares held by an account\\n   * @param account The account for which to look up the number of shares it has, i.e. its balance\\n   * @return The number of shares held by the account\\n   */\\n  function getShares(address account) external view returns (uint256);\\n\\n  /**\\n   * @notice Converts shares to assets\\n   * @param assets The amount of assets to convert to shares\\n   * @return shares The amount of shares that the Vault would exchange for the amount of assets provided\\n   */\\n  function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Converts assets to shares\\n   * @param shares The amount of shares to convert to assets\\n   * @return assets The amount of assets that the Vault would exchange for the amount of shares provided\\n   */\\n  function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n  /**\\n   * @notice Check whether state update is required\\n   * @return `true` if state update is required, `false` otherwise\\n   */\\n  function isStateUpdateRequired() external view returns (bool);\\n\\n  /**\\n   * @notice Updates the total amount of assets in the Vault and its exit queue\\n   * @param harvestParams The parameters for harvesting Keeper rewards\\n   */\\n  function updateState(IKeeperRewards.HarvestParams calldata harvestParams) external;\\n}\\n\"\r\n    },\r\n    \"contracts/keeper/Keeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport {IValidatorsRegistry} from '../interfaces/IValidatorsRegistry.sol';\\nimport {IVaultsRegistry} from '../interfaces/IVaultsRegistry.sol';\\nimport {IOsTokenVaultController} from '../interfaces/IOsTokenVaultController.sol';\\nimport {IKeeper} from '../interfaces/IKeeper.sol';\\nimport {KeeperValidators} from './KeeperValidators.sol';\\nimport {KeeperRewards} from './KeeperRewards.sol';\\nimport {KeeperOracles} from './KeeperOracles.sol';\\nimport {Errors} from '../libraries/Errors.sol';\\n\\n/**\\n * @title Keeper\\n * @author StakeWise\\n * @notice Defines the functionality for updating Vaults' rewards and approving validators registrations\\n */\\ncontract Keeper is KeeperOracles, KeeperRewards, KeeperValidators, IKeeper {\\n  bool private _initialized;\\n\\n  /**\\n   * @dev Constructor\\n   * @param sharedMevEscrow The address of the shared MEV escrow contract\\n   * @param vaultsRegistry The address of the VaultsRegistry contract\\n   * @param osTokenVaultController The address of the OsTokenVaultController contract\\n   * @param _rewardsDelay The delay in seconds between rewards updates\\n   * @param maxAvgRewardPerSecond The maximum possible average reward per second\\n   * @param validatorsRegistry The address of the beacon chain validators registry contract\\n   */\\n  constructor(\\n    address sharedMevEscrow,\\n    IVaultsRegistry vaultsRegistry,\\n    IOsTokenVaultController osTokenVaultController,\\n    uint256 _rewardsDelay,\\n    uint256 maxAvgRewardPerSecond,\\n    IValidatorsRegistry validatorsRegistry\\n  )\\n    KeeperOracles()\\n    KeeperRewards(\\n      sharedMevEscrow,\\n      vaultsRegistry,\\n      osTokenVaultController,\\n      _rewardsDelay,\\n      maxAvgRewardPerSecond\\n    )\\n    KeeperValidators(validatorsRegistry)\\n  {}\\n\\n  /// @inheritdoc IKeeper\\n  function initialize(address _owner) external override onlyOwner {\\n    if (_owner == address(0)) revert Errors.ZeroAddress();\\n    if (_initialized) revert Errors.AccessDenied();\\n\\n    // transfer ownership\\n    _transferOwnership(_owner);\\n    _initialized = true;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/keeper/KeeperOracles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport {Ownable2Step, Ownable} from '@openzeppelin/contracts/access/Ownable2Step.sol';\\nimport {EIP712} from '@openzeppelin/contracts/utils/cryptography/EIP712.sol';\\nimport {ECDSA} from '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport {Errors} from '../libraries/Errors.sol';\\nimport {IKeeperOracles} from '../interfaces/IKeeperOracles.sol';\\n\\n/**\\n * @title KeeperOracles\\n * @author StakeWise\\n * @notice Defines the functionality for verifying signatures of the whitelisted off-chain oracles\\n */\\nabstract contract KeeperOracles is Ownable2Step, EIP712, IKeeperOracles {\\n  uint256 internal constant _signatureLength = 65;\\n  uint256 private constant _maxOracles = 30;\\n\\n  /// @inheritdoc IKeeperOracles\\n  mapping(address => bool) public override isOracle;\\n\\n  /// @inheritdoc IKeeperOracles\\n  uint256 public override totalOracles;\\n\\n  /**\\n   * @dev Constructor\\n   */\\n  constructor() Ownable(msg.sender) EIP712('KeeperOracles', '1') {}\\n\\n  /// @inheritdoc IKeeperOracles\\n  function addOracle(address oracle) external override onlyOwner {\\n    if (isOracle[oracle]) revert Errors.AlreadyAdded();\\n\\n    // SLOAD to memory\\n    uint256 _totalOracles = totalOracles;\\n    unchecked {\\n      // capped with _maxOracles\\n      _totalOracles += 1;\\n    }\\n    if (_totalOracles > _maxOracles) revert Errors.MaxOraclesExceeded();\\n\\n    // update state\\n    isOracle[oracle] = true;\\n    totalOracles = _totalOracles;\\n\\n    emit OracleAdded(oracle);\\n  }\\n\\n  /// @inheritdoc IKeeperOracles\\n  function removeOracle(address oracle) external override onlyOwner {\\n    if (!isOracle[oracle]) revert Errors.AlreadyRemoved();\\n\\n    // SLOAD to memory\\n    uint256 _totalOracles;\\n    unchecked {\\n      // cannot underflow\\n      _totalOracles = totalOracles - 1;\\n    }\\n\\n    isOracle[oracle] = false;\\n    totalOracles = _totalOracles;\\n\\n    emit OracleRemoved(oracle);\\n  }\\n\\n  /// @inheritdoc IKeeperOracles\\n  function updateConfig(string calldata configIpfsHash) external override onlyOwner {\\n    emit ConfigUpdated(configIpfsHash);\\n  }\\n\\n  /**\\n   * @notice Internal function for verifying oracles' signatures\\n   * @param requiredSignatures The number of signatures required for the verification to pass\\n   * @param message The message that was signed\\n   * @param signatures The concatenation of the oracles' signatures\\n   */\\n  function _verifySignatures(\\n    uint256 requiredSignatures,\\n    bytes32 message,\\n    bytes calldata signatures\\n  ) internal view {\\n    if (requiredSignatures == 0) revert Errors.InvalidOracles();\\n\\n    // check whether enough signatures\\n    unchecked {\\n      // cannot realistically overflow\\n      if (signatures.length < requiredSignatures * _signatureLength)\\n        revert Errors.NotEnoughSignatures();\\n    }\\n\\n    bytes32 data = _hashTypedDataV4(message);\\n    address lastOracle;\\n    address currentOracle;\\n    uint256 startIndex;\\n    for (uint256 i = 0; i < requiredSignatures; ) {\\n      unchecked {\\n        // cannot overflow as signatures.length is checked above\\n        currentOracle = ECDSA.recover(data, signatures[startIndex:startIndex + _signatureLength]);\\n      }\\n      // signatures must be sorted by oracles' addresses and not repeat\\n      if (currentOracle <= lastOracle || !isOracle[currentOracle]) revert Errors.InvalidOracle();\\n\\n      // update last oracle\\n      lastOracle = currentOracle;\\n\\n      unchecked {\\n        // cannot realistically overflow\\n        ++i;\\n        startIndex += _signatureLength;\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/keeper/KeeperRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport {MerkleProof} from '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\nimport {IKeeperRewards} from '../interfaces/IKeeperRewards.sol';\\nimport {IVaultMev} from '../interfaces/IVaultMev.sol';\\nimport {Errors} from '../libraries/Errors.sol';\\nimport {IVaultsRegistry} from '../interfaces/IVaultsRegistry.sol';\\nimport {IOsTokenVaultController} from '../interfaces/IOsTokenVaultController.sol';\\nimport {KeeperOracles} from './KeeperOracles.sol';\\n\\n/**\\n * @title KeeperRewards\\n * @author StakeWise\\n * @notice Defines the functionality for updating Vaults' and OsToken rewards\\n */\\nabstract contract KeeperRewards is KeeperOracles, IKeeperRewards {\\n  bytes32 private constant _rewardsUpdateTypeHash =\\n    keccak256(\\n      'KeeperRewards(bytes32 rewardsRoot,string rewardsIpfsHash,uint256 avgRewardPerSecond,uint64 updateTimestamp,uint64 nonce)'\\n    );\\n\\n  uint256 private immutable _maxAvgRewardPerSecond;\\n\\n  address private immutable _sharedMevEscrow;\\n\\n  IOsTokenVaultController private immutable _osTokenVaultController;\\n\\n  IVaultsRegistry internal immutable _vaultsRegistry;\\n\\n  /// @inheritdoc IKeeperRewards\\n  uint256 public immutable override rewardsDelay;\\n\\n  /// @inheritdoc IKeeperRewards\\n  mapping(address => Reward) public override rewards;\\n\\n  /// @inheritdoc IKeeperRewards\\n  mapping(address => UnlockedMevReward) public override unlockedMevRewards;\\n\\n  /// @inheritdoc IKeeperRewards\\n  bytes32 public override prevRewardsRoot;\\n\\n  /// @inheritdoc IKeeperRewards\\n  bytes32 public override rewardsRoot;\\n\\n  /// @inheritdoc IKeeperRewards\\n  uint256 public override rewardsMinOracles;\\n\\n  /// @inheritdoc IKeeperRewards\\n  uint64 public override lastRewardsTimestamp;\\n\\n  /// @inheritdoc IKeeperRewards\\n  uint64 public override rewardsNonce;\\n\\n  /**\\n   * @dev Constructor\\n   * @param sharedMevEscrow The address of the shared MEV escrow contract\\n   * @param vaultsRegistry The address of the VaultsRegistry contract\\n   * @param osTokenVaultController The address of the OsTokenVaultController contract\\n   * @param _rewardsDelay The delay in seconds between rewards updates\\n   * @param maxAvgRewardPerSecond The maximum possible average reward per second\\n   */\\n  constructor(\\n    address sharedMevEscrow,\\n    IVaultsRegistry vaultsRegistry,\\n    IOsTokenVaultController osTokenVaultController,\\n    uint256 _rewardsDelay,\\n    uint256 maxAvgRewardPerSecond\\n  ) {\\n    _sharedMevEscrow = sharedMevEscrow;\\n    _vaultsRegistry = vaultsRegistry;\\n    _osTokenVaultController = osTokenVaultController;\\n    rewardsDelay = _rewardsDelay;\\n    _maxAvgRewardPerSecond = maxAvgRewardPerSecond;\\n\\n    // set rewardsNonce to 1 so that vaults collateralized\\n    // before first rewards update will not have 0 nonce\\n    rewardsNonce = 1;\\n  }\\n\\n  /// @inheritdoc IKeeperRewards\\n  function updateRewards(RewardsUpdateParams calldata params) external override {\\n    if (!canUpdateRewards()) revert Errors.TooEarlyUpdate();\\n\\n    if (params.avgRewardPerSecond > _maxAvgRewardPerSecond) {\\n      revert Errors.InvalidAvgRewardPerSecond();\\n    }\\n\\n    // SLOAD to memory\\n    uint64 nonce = rewardsNonce;\\n\\n    // verify rewards update signatures\\n    _verifySignatures(\\n      rewardsMinOracles,\\n      keccak256(\\n        abi.encode(\\n          _rewardsUpdateTypeHash,\\n          params.rewardsRoot,\\n          keccak256(bytes(params.rewardsIpfsHash)),\\n          params.avgRewardPerSecond,\\n          params.updateTimestamp,\\n          nonce\\n        )\\n      ),\\n      params.signatures\\n    );\\n\\n    // update state\\n    prevRewardsRoot = rewardsRoot;\\n    rewardsRoot = params.rewardsRoot;\\n    // cannot overflow on human timescales\\n    lastRewardsTimestamp = uint64(block.timestamp);\\n    unchecked {\\n      // cannot realistically overflow\\n      rewardsNonce = nonce + 1;\\n    }\\n\\n    _osTokenVaultController.setAvgRewardPerSecond(params.avgRewardPerSecond);\\n\\n    emit RewardsUpdated(\\n      msg.sender,\\n      params.rewardsRoot,\\n      params.avgRewardPerSecond,\\n      params.updateTimestamp,\\n      nonce,\\n      params.rewardsIpfsHash\\n    );\\n  }\\n\\n  /// @inheritdoc IKeeperRewards\\n  function canUpdateRewards() public view override returns (bool) {\\n    unchecked {\\n      // cannot overflow as lastRewardsTimestamp & rewardsDelay are uint64\\n      return lastRewardsTimestamp + rewardsDelay < block.timestamp;\\n    }\\n  }\\n\\n  /// @inheritdoc IKeeperRewards\\n  function isHarvestRequired(address vault) external view override returns (bool) {\\n    // vault is considered harvested in case it does not have any validators (nonce = 0)\\n    // or it is up to 1 rewards update behind\\n    uint256 nonce = rewards[vault].nonce;\\n    unchecked {\\n      // cannot overflow as nonce is uint64\\n      return nonce != 0 && nonce + 1 < rewardsNonce;\\n    }\\n  }\\n\\n  /// @inheritdoc IKeeperRewards\\n  function canHarvest(address vault) external view override returns (bool) {\\n    uint256 nonce = rewards[vault].nonce;\\n    return nonce != 0 && nonce < rewardsNonce;\\n  }\\n\\n  /// @inheritdoc IKeeperRewards\\n  function isCollateralized(address vault) public view override returns (bool) {\\n    return rewards[vault].nonce != 0;\\n  }\\n\\n  /// @inheritdoc IKeeperRewards\\n  function harvest(\\n    HarvestParams calldata params\\n  ) external override returns (int256 totalAssetsDelta, uint256 unlockedMevDelta, bool harvested) {\\n    if (!_vaultsRegistry.vaults(msg.sender)) revert Errors.AccessDenied();\\n\\n    // SLOAD to memory\\n    uint64 currentNonce = rewardsNonce;\\n\\n    // allow harvest for the past two updates\\n    if (params.rewardsRoot != rewardsRoot) {\\n      if (params.rewardsRoot != prevRewardsRoot) revert Errors.InvalidRewardsRoot();\\n      unchecked {\\n        // cannot underflow as after first merkle root update nonce will be \\\"2\\\"\\n        currentNonce -= 1;\\n      }\\n    }\\n\\n    // verify the proof\\n    if (\\n      !MerkleProof.verifyCalldata(\\n        params.proof,\\n        params.rewardsRoot,\\n        keccak256(\\n          bytes.concat(keccak256(abi.encode(msg.sender, params.reward, params.unlockedMevReward)))\\n        )\\n      )\\n    ) {\\n      revert Errors.InvalidProof();\\n    }\\n\\n    // SLOAD to memory\\n    Reward storage lastReward = rewards[msg.sender];\\n    // check whether Vault's nonce is smaller that the current, otherwise it's already harvested\\n    if (lastReward.nonce >= currentNonce) return (0, 0, false);\\n\\n    // calculate total assets delta\\n    totalAssetsDelta = params.reward - lastReward.assets;\\n    harvested = true;\\n\\n    // update state\\n    lastReward.nonce = currentNonce;\\n    lastReward.assets = params.reward;\\n\\n    // check whether Vault has unlocked execution reward\\n    if (IVaultMev(msg.sender).mevEscrow() == _sharedMevEscrow) {\\n      // calculate execution assets reward\\n      unlockedMevDelta = params.unlockedMevReward - unlockedMevRewards[msg.sender].assets;\\n\\n      // update state\\n      unlockedMevRewards[msg.sender] = UnlockedMevReward({\\n        nonce: currentNonce,\\n        assets: params.unlockedMevReward\\n      });\\n    }\\n\\n    // emit event\\n    emit Harvested(msg.sender, params.rewardsRoot, totalAssetsDelta, unlockedMevDelta);\\n  }\\n\\n  /// @inheritdoc IKeeperRewards\\n  function setRewardsMinOracles(uint256 _rewardsMinOracles) external override onlyOwner {\\n    _setRewardsMinOracles(_rewardsMinOracles);\\n  }\\n\\n  /**\\n   * @dev Internal function for updating rewardsMinOracles\\n   * @param _rewardsMinOracles The new value of rewardsMinOracles\\n   */\\n  function _setRewardsMinOracles(uint256 _rewardsMinOracles) private {\\n    if (_rewardsMinOracles == 0 || totalOracles < _rewardsMinOracles) {\\n      revert Errors.InvalidOracles();\\n    }\\n    rewardsMinOracles = _rewardsMinOracles;\\n    emit RewardsMinOraclesUpdated(_rewardsMinOracles);\\n  }\\n\\n  /**\\n   * @dev Collateralize Vault so that it must be harvested in future reward updates\\n   * @param vault The address of the Vault\\n   */\\n  function _collateralize(address vault) internal {\\n    // vault is already collateralized\\n    if (rewards[vault].nonce != 0) return;\\n    rewards[vault] = Reward({nonce: rewardsNonce, assets: 0});\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/keeper/KeeperValidators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\nimport {IValidatorsRegistry} from '../interfaces/IValidatorsRegistry.sol';\\nimport {IKeeperValidators} from '../interfaces/IKeeperValidators.sol';\\nimport {Errors} from '../libraries/Errors.sol';\\nimport {KeeperOracles} from './KeeperOracles.sol';\\nimport {KeeperRewards} from './KeeperRewards.sol';\\n\\n/**\\n * @title KeeperValidators\\n * @author StakeWise\\n * @notice Defines the functionality for approving validators' registrations and updating exit signatures\\n */\\nabstract contract KeeperValidators is KeeperOracles, KeeperRewards, IKeeperValidators {\\n  bytes32 private constant _registerValidatorsTypeHash =\\n    keccak256(\\n      'KeeperValidators(bytes32 validatorsRegistryRoot,address vault,bytes validators,string exitSignaturesIpfsHash,uint256 deadline)'\\n    );\\n\\n  bytes32 private constant _updateExitSigTypeHash =\\n    keccak256(\\n      'KeeperValidators(address vault,string exitSignaturesIpfsHash,uint256 nonce,uint256 deadline)'\\n    );\\n\\n  IValidatorsRegistry private immutable _validatorsRegistry;\\n\\n  /// @inheritdoc IKeeperValidators\\n  mapping(address => uint256) public override exitSignaturesNonces;\\n\\n  /// @inheritdoc IKeeperValidators\\n  uint256 public override validatorsMinOracles;\\n\\n  /**\\n   * @dev Constructor\\n   * @param validatorsRegistry The address of the beacon chain validators registry contract\\n   */\\n  constructor(IValidatorsRegistry validatorsRegistry) {\\n    _validatorsRegistry = validatorsRegistry;\\n  }\\n\\n  /// @inheritdoc IKeeperValidators\\n  function setValidatorsMinOracles(uint256 _validatorsMinOracles) external override onlyOwner {\\n    _setValidatorsMinOracles(_validatorsMinOracles);\\n  }\\n\\n  /// @inheritdoc IKeeperValidators\\n  function approveValidators(ApprovalParams calldata params) external override {\\n    if (params.deadline < block.timestamp) revert Errors.DeadlineExpired();\\n\\n    // verify oracles approved registration for the current validators registry contract state\\n    if (_validatorsRegistry.get_deposit_root() != params.validatorsRegistryRoot) {\\n      revert Errors.InvalidValidatorsRegistryRoot();\\n    }\\n    if (!_vaultsRegistry.vaults(msg.sender)) revert Errors.AccessDenied();\\n\\n    // verify oracles approved registration\\n    _verifySignatures(\\n      validatorsMinOracles,\\n      keccak256(\\n        abi.encode(\\n          _registerValidatorsTypeHash,\\n          params.validatorsRegistryRoot,\\n          msg.sender,\\n          keccak256(params.validators),\\n          keccak256(bytes(params.exitSignaturesIpfsHash)),\\n          params.deadline\\n        )\\n      ),\\n      params.signatures\\n    );\\n\\n    _collateralize(msg.sender);\\n\\n    emit ValidatorsApproval(msg.sender, params.exitSignaturesIpfsHash);\\n  }\\n\\n  /// @inheritdoc IKeeperValidators\\n  function updateExitSignatures(\\n    address vault,\\n    uint256 deadline,\\n    string calldata exitSignaturesIpfsHash,\\n    bytes calldata oraclesSignatures\\n  ) external override {\\n    if (!(_vaultsRegistry.vaults(vault) && isCollateralized(vault))) revert Errors.InvalidVault();\\n    if (deadline < block.timestamp) revert Errors.DeadlineExpired();\\n\\n    // SLOAD to memory\\n    uint256 nonce = exitSignaturesNonces[vault];\\n\\n    // verify oracles approved signatures update\\n    _verifySignatures(\\n      validatorsMinOracles,\\n      keccak256(\\n        abi.encode(\\n          _updateExitSigTypeHash,\\n          vault,\\n          keccak256(bytes(exitSignaturesIpfsHash)),\\n          nonce,\\n          deadline\\n        )\\n      ),\\n      oraclesSignatures\\n    );\\n\\n    // update state\\n    unchecked {\\n      // cannot realistically overflow\\n      exitSignaturesNonces[vault] = nonce + 1;\\n    }\\n\\n    // emit event\\n    emit ExitSignaturesUpdated(msg.sender, vault, nonce, exitSignaturesIpfsHash);\\n  }\\n\\n  /**\\n   * @dev Internal function to set the minimum number of oracles required to approve validators\\n   * @param _validatorsMinOracles The new minimum number of oracles required to approve validators\\n   */\\n  function _setValidatorsMinOracles(uint256 _validatorsMinOracles) private {\\n    if (_validatorsMinOracles == 0 || totalOracles < _validatorsMinOracles) {\\n      revert Errors.InvalidOracles();\\n    }\\n    validatorsMinOracles = _validatorsMinOracles;\\n    emit ValidatorsMinOraclesUpdated(_validatorsMinOracles);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.20;\\n\\n/**\\n * @title Errors\\n * @author StakeWise\\n * @notice Contains all the custom errors\\n */\\nlibrary Errors {\\n  error AccessDenied();\\n  error InvalidShares();\\n  error InvalidAssets();\\n  error ZeroAddress();\\n  error InsufficientAssets();\\n  error CapacityExceeded();\\n  error InvalidCapacity();\\n  error InvalidSecurityDeposit();\\n  error InvalidFeeRecipient();\\n  error InvalidFeePercent();\\n  error NotHarvested();\\n  error NotCollateralized();\\n  error Collateralized();\\n  error InvalidProof();\\n  error LowLtv();\\n  error RedemptionExceeded();\\n  error InvalidPosition();\\n  error InvalidLtv();\\n  error InvalidHealthFactor();\\n  error InvalidReceivedAssets();\\n  error InvalidTokenMeta();\\n  error UpgradeFailed();\\n  error InvalidValidator();\\n  error InvalidValidators();\\n  error WhitelistAlreadyUpdated();\\n  error DeadlineExpired();\\n  error PermitInvalidSigner();\\n  error InvalidValidatorsRegistryRoot();\\n  error InvalidVault();\\n  error AlreadyAdded();\\n  error AlreadyRemoved();\\n  error InvalidOracles();\\n  error NotEnoughSignatures();\\n  error InvalidOracle();\\n  error TooEarlyUpdate();\\n  error InvalidAvgRewardPerSecond();\\n  error InvalidRewardsRoot();\\n  error HarvestFailed();\\n  error InvalidRedeemFromLtvPercent();\\n  error InvalidLiqThresholdPercent();\\n  error InvalidLiqBonusPercent();\\n  error InvalidLtvPercent();\\n  error InvalidCheckpointIndex();\\n  error InvalidCheckpointValue();\\n  error MaxOraclesExceeded();\\n  error ClaimTooEarly();\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sharedMevEscrow\",\"type\":\"address\"},{\"internalType\":\"contract IVaultsRegistry\",\"name\":\"vaultsRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IOsTokenVaultController\",\"name\":\"osTokenVaultController\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAvgRewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"contract IValidatorsRegistry\",\"name\":\"validatorsRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRemoved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAvgRewardPerSecond\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOracles\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardsRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValidatorsRegistryRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxOraclesExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughSignatures\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooEarlyUpdate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"configIpfsHash\",\"type\":\"string\"}],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"exitSignaturesIpfsHash\",\"type\":\"string\"}],\"name\":\"ExitSignaturesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rewardsRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"totalAssetsDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedMevDelta\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracles\",\"type\":\"uint256\"}],\"name\":\"RewardsMinOraclesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rewardsRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgRewardPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"updateTimestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rewardsIpfsHash\",\"type\":\"string\"}],\"name\":\"RewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"exitSignaturesIpfsHash\",\"type\":\"string\"}],\"name\":\"ValidatorsApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracles\",\"type\":\"uint256\"}],\"name\":\"ValidatorsMinOraclesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"addOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"validatorsRegistryRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"validators\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"exitSignaturesIpfsHash\",\"type\":\"string\"}],\"internalType\":\"struct IKeeperValidators.ApprovalParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"approveValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canUpdateRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exitSignaturesNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"rewardsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"int160\",\"name\":\"reward\",\"type\":\"int160\"},{\"internalType\":\"uint160\",\"name\":\"unlockedMevReward\",\"type\":\"uint160\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IKeeperRewards.HarvestParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"totalAssetsDelta\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedMevDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"harvested\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"isCollateralized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"isHarvestRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardsTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevRewardsRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"removeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"int192\",\"name\":\"assets\",\"type\":\"int192\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsMinOracles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsMinOracles\",\"type\":\"uint256\"}],\"name\":\"setRewardsMinOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validatorsMinOracles\",\"type\":\"uint256\"}],\"name\":\"setValidatorsMinOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOracles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockedMevRewards\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"assets\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"configIpfsHash\",\"type\":\"string\"}],\"name\":\"updateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"exitSignaturesIpfsHash\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"oraclesSignatures\",\"type\":\"bytes\"}],\"name\":\"updateExitSignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"rewardsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"avgRewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"updateTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"rewardsIpfsHash\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"internalType\":\"struct IKeeperRewards.RewardsUpdateParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorsMinOracles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Keeper", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000007a98f01f5a91043f1396f101a21e91e90488a2f000000000000000000000000bbe532578979b8cb4ebb077b46442fc420ba0bc2000000000000000000000000fe7083e5f1002471cf6fcb19b17770625a44b521000000000000000000000000000000000000000000000000000000000000a8c0000000000000000000000000000000000000000000000000000000017a029afd00000000000000000000000000000000219ab540356cbb839cbe05303d7705fa", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}