{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"MintAndRepayZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"ITroveManager.sol\\\";\\nimport \\\"ISortedTroves.sol\\\";\\nimport \\\"IBorrowerOperations.sol\\\";\\n\\n/**\\n    @title Mint and Repay Zap\\n    @notice Mint and repay mkUSD in a single transaction\\n    @dev Untested, unofficial, use at your own risk\\n */\\ncontract MintAndRepayZap {\\n    using SafeERC20 for IERC20;\\n\\n    IBorrowerOperations public immutable borrowerOps;\\n    IERC20 public immutable debtToken;\\n    address public immutable tokenRecoveryReceiver;\\n\\n    constructor(IBorrowerOperations _bo, IERC20 _debt) {\\n        borrowerOps = _bo;\\n        debtToken = _debt;\\n        tokenRecoveryReceiver = msg.sender;\\n    }\\n\\n    function recoverToken(IERC20 token) external {\\n        uint256 amount = token.balanceOf(address(this));\\n        token.safeTransfer(tokenRecoveryReceiver, amount);\\n    }\\n\\n    function mintAndRepay(\\n        address troveManager,\\n        uint256 maxFeePercentage,\\n        uint256 debtChange,\\n        address[2] calldata mintHints,\\n        address[2] calldata repayHints\\n    ) external {\\n        borrowerOps.withdrawDebt(troveManager, msg.sender, maxFeePercentage, debtChange, mintHints[0], mintHints[1]);\\n        borrowerOps.repayDebt(troveManager, msg.sender, debtChange, repayHints[0], repayHints[1]);\\n    }\\n\\n    /// @dev Must have at least `repayAmount` balance of mkUSD and approve the zap to transfer\\n    function repayAndMint(\\n        address troveManager,\\n        uint256 maxFeePercentage,\\n        uint256 repayAmount,\\n        uint256 mintAmount,\\n        address[2] calldata repayHints,\\n        address[2] calldata mintHints\\n    ) external {\\n        debtToken.transferFrom(msg.sender, address(this), repayAmount);\\n        borrowerOps.repayDebt(troveManager, msg.sender, repayAmount, repayHints[0], repayHints[1]);\\n        borrowerOps.withdrawDebt(troveManager, msg.sender, maxFeePercentage, mintAmount, mintHints[0], mintHints[1]);\\n        debtToken.transfer(msg.sender, mintAmount);\\n    }\\n\\n    /// @dev call as a view method\\n    function getRepayAndMintHints(\\n        ITroveManager troveManager,\\n        address account,\\n        uint256 repayAmount,\\n        uint256 mintAmount\\n    ) external returns (address[2] memory repayHints, address[2] memory mintHints) {\\n        uint256 price = troveManager.fetchPrice();\\n        (uint256 coll, uint256 debt) = troveManager.getTroveCollAndDebt(account);\\n        mintAmount += troveManager.getBorrowingFee(mintAmount);\\n        uint256 repayCR = (coll * price) / (debt - repayAmount);\\n        uint256 mintCR = (coll * price) / (debt - repayAmount + mintAmount);\\n\\n        repayHints = _findHintWithHigherCR(account, account, troveManager, price, repayCR);\\n        if (repayAmount > mintAmount) mintHints = _findHintWithHigherCR(account, account, troveManager, price, mintCR);\\n        else mintHints = _findHintWithLowerCR(account, account, troveManager, price, mintCR);\\n\\n        return (repayHints, mintHints);\\n    }\\n\\n    /// @dev call as a view method\\n    function getMintAndRepayHints(\\n        ITroveManager troveManager,\\n        address account,\\n        uint256 debtChange\\n    ) external returns (address[2] memory mintHints, address[2] memory repayHints) {\\n        uint256 price = troveManager.fetchPrice();\\n        (uint256 coll, uint256 debt) = troveManager.getTroveCollAndDebt(account);\\n        uint256 mintAmount = debtChange + troveManager.getBorrowingFee(debtChange);\\n        uint256 mintCR = (coll * price) / (debt + mintAmount);\\n        uint256 repayCR = (coll * price) / (debt + mintAmount - debtChange);\\n\\n        mintHints = _findHintWithLowerCR(account, account, troveManager, price, mintCR);\\n        repayHints = _findHintWithHigherCR(account, account, troveManager, price, repayCR);\\n\\n        return (mintHints, repayHints);\\n    }\\n\\n    function _findHintWithLowerCR(\\n        address account,\\n        address traverseFrom,\\n        ITroveManager tm,\\n        uint256 price,\\n        uint256 collRatio\\n    ) internal view returns (address[2] memory hints) {\\n        address last = traverseFrom;\\n        ISortedTroves st = ISortedTroves(tm.sortedTroves());\\n        while (true) {\\n            last = st.getNext(last);\\n            if (last == address(0)) return [st.getLast(), st.getLast()];\\n            if (last == account) continue;\\n            if (collRatio > tm.getCurrentICR(last, price)) {\\n                address prev = st.getPrev(last);\\n                if (prev == account) prev = st.getPrev(prev);\\n                return [prev, last];\\n            }\\n        }\\n    }\\n\\n    function _findHintWithHigherCR(\\n        address account,\\n        address traverseFrom,\\n        ITroveManager tm,\\n        uint256 price,\\n        uint256 collRatio\\n    ) internal view returns (address[2] memory hints) {\\n        address last = traverseFrom;\\n        ISortedTroves st = ISortedTroves(tm.sortedTroves());\\n        while (true) {\\n            last = st.getPrev(last);\\n            if (last == address(0)) return [st.getFirst(), st.getFirst()];\\n            if (collRatio < tm.getCurrentICR(last, price)) {\\n                address next = st.getNext(last);\\n                if (next == account) next = st.getNext(next);\\n                return [last, next];\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC20Permit.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"ITroveManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITroveManager {\\n    event BaseRateUpdated(uint256 _baseRate);\\n    event CollateralSent(address _to, uint256 _amount);\\n    event LTermsUpdated(uint256 _L_collateral, uint256 _L_debt);\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\n    event Redemption(\\n        uint256 _attemptedDebtAmount,\\n        uint256 _actualDebtAmount,\\n        uint256 _collateralSent,\\n        uint256 _collateralFee\\n    );\\n    event RewardClaimed(address indexed account, address indexed recipient, uint256 claimed);\\n    event SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\n    event TroveSnapshotsUpdated(uint256 _L_collateral, uint256 _L_debt);\\n    event TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 _stake, uint8 _operation);\\n\\n    function addCollateralSurplus(address borrower, uint256 collSurplus) external;\\n\\n    function applyPendingRewards(address _borrower) external returns (uint256 coll, uint256 debt);\\n\\n    function claimCollateral(address _receiver) external;\\n\\n    function claimReward(address receiver) external returns (uint256);\\n\\n    function closeTrove(address _borrower, address _receiver, uint256 collAmount, uint256 debtAmount) external;\\n\\n    function closeTroveByLiquidation(address _borrower) external;\\n\\n    function collectInterests() external;\\n\\n    function decayBaseRateAndGetBorrowingFee(uint256 _debt) external returns (uint256);\\n\\n    function decreaseDebtAndSendCollateral(address account, uint256 debt, uint256 coll) external;\\n\\n    function fetchPrice() external returns (uint256);\\n\\n    function finalizeLiquidation(\\n        address _liquidator,\\n        uint256 _debt,\\n        uint256 _coll,\\n        uint256 _collSurplus,\\n        uint256 _debtGasComp,\\n        uint256 _collGasComp\\n    ) external;\\n\\n    function getEntireSystemBalances() external returns (uint256, uint256, uint256);\\n\\n    function movePendingTroveRewardsToActiveBalances(uint256 _debt, uint256 _collateral) external;\\n\\n    function notifyRegisteredId(uint256[] calldata _assignedIds) external returns (bool);\\n\\n    function openTrove(\\n        address _borrower,\\n        uint256 _collateralAmount,\\n        uint256 _compositeDebt,\\n        uint256 NICR,\\n        address _upperHint,\\n        address _lowerHint,\\n        bool _isRecoveryMode\\n    ) external returns (uint256 stake, uint256 arrayIndex);\\n\\n    function redeemCollateral(\\n        uint256 _debtAmount,\\n        address _firstRedemptionHint,\\n        address _upperPartialRedemptionHint,\\n        address _lowerPartialRedemptionHint,\\n        uint256 _partialRedemptionHintNICR,\\n        uint256 _maxIterations,\\n        uint256 _maxFeePercentage\\n    ) external;\\n\\n    function setAddresses(address _priceFeedAddress, address _sortedTrovesAddress, address _collateralToken) external;\\n\\n    function setParameters(\\n        uint256 _minuteDecayFactor,\\n        uint256 _redemptionFeeFloor,\\n        uint256 _maxRedemptionFee,\\n        uint256 _borrowingFeeFloor,\\n        uint256 _maxBorrowingFee,\\n        uint256 _interestRateInBPS,\\n        uint256 _maxSystemDebt,\\n        uint256 _MCR\\n    ) external;\\n\\n    function setPaused(bool _paused) external;\\n\\n    function setPriceFeed(address _priceFeedAddress) external;\\n\\n    function startSunset() external;\\n\\n    function updateBalances() external;\\n\\n    function updateTroveFromAdjustment(\\n        bool _isRecoveryMode,\\n        bool _isDebtIncrease,\\n        uint256 _debtChange,\\n        uint256 _netDebtChange,\\n        bool _isCollIncrease,\\n        uint256 _collChange,\\n        address _upperHint,\\n        address _lowerHint,\\n        address _borrower,\\n        address _receiver\\n    ) external returns (uint256, uint256, uint256);\\n\\n    function vaultClaimReward(address claimant, address) external returns (uint256);\\n\\n    function BOOTSTRAP_PERIOD() external view returns (uint256);\\n\\n    function CCR() external view returns (uint256);\\n\\n    function DEBT_GAS_COMPENSATION() external view returns (uint256);\\n\\n    function DECIMAL_PRECISION() external view returns (uint256);\\n\\n    function L_collateral() external view returns (uint256);\\n\\n    function L_debt() external view returns (uint256);\\n\\n    function MAX_INTEREST_RATE_IN_BPS() external view returns (uint256);\\n\\n    function MCR() external view returns (uint256);\\n\\n    function PERCENT_DIVISOR() external view returns (uint256);\\n\\n    function PRISMA_CORE() external view returns (address);\\n\\n    function SUNSETTING_INTEREST_RATE() external view returns (uint256);\\n\\n    function Troves(\\n        address\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 debt,\\n            uint256 coll,\\n            uint256 stake,\\n            uint8 status,\\n            uint128 arrayIndex,\\n            uint256 activeInterestIndex\\n        );\\n\\n    function accountLatestMint(address) external view returns (uint32 amount, uint32 week, uint32 day);\\n\\n    function activeInterestIndex() external view returns (uint256);\\n\\n    function baseRate() external view returns (uint256);\\n\\n    function borrowerOperationsAddress() external view returns (address);\\n\\n    function borrowingFeeFloor() external view returns (uint256);\\n\\n    function claimableReward(address account) external view returns (uint256);\\n\\n    function collateralToken() external view returns (address);\\n\\n    function dailyMintReward(uint256) external view returns (uint256);\\n\\n    function debtToken() external view returns (address);\\n\\n    function defaultedCollateral() external view returns (uint256);\\n\\n    function defaultedDebt() external view returns (uint256);\\n\\n    function emissionId() external view returns (uint16 debt, uint16 minting);\\n\\n    function getBorrowingFee(uint256 _debt) external view returns (uint256);\\n\\n    function getBorrowingFeeWithDecay(uint256 _debt) external view returns (uint256);\\n\\n    function getBorrowingRate() external view returns (uint256);\\n\\n    function getBorrowingRateWithDecay() external view returns (uint256);\\n\\n    function getCurrentICR(address _borrower, uint256 _price) external view returns (uint256);\\n\\n    function getEntireDebtAndColl(\\n        address _borrower\\n    ) external view returns (uint256 debt, uint256 coll, uint256 pendingDebtReward, uint256 pendingCollateralReward);\\n\\n    function getEntireSystemColl() external view returns (uint256);\\n\\n    function getEntireSystemDebt() external view returns (uint256);\\n\\n    function getNominalICR(address _borrower) external view returns (uint256);\\n\\n    function getPendingCollAndDebtRewards(address _borrower) external view returns (uint256, uint256);\\n\\n    function getRedemptionFeeWithDecay(uint256 _collateralDrawn) external view returns (uint256);\\n\\n    function getRedemptionRate() external view returns (uint256);\\n\\n    function getRedemptionRateWithDecay() external view returns (uint256);\\n\\n    function getTotalActiveCollateral() external view returns (uint256);\\n\\n    function getTotalActiveDebt() external view returns (uint256);\\n\\n    function getTotalMints(uint256 week) external view returns (uint32[7] memory);\\n\\n    function getTroveCollAndDebt(address _borrower) external view returns (uint256 coll, uint256 debt);\\n\\n    function getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\\n\\n    function getTroveOwnersCount() external view returns (uint256);\\n\\n    function getTroveStake(address _borrower) external view returns (uint256);\\n\\n    function getTroveStatus(address _borrower) external view returns (uint256);\\n\\n    function getWeek() external view returns (uint256 week);\\n\\n    function getWeekAndDay() external view returns (uint256, uint256);\\n\\n    function guardian() external view returns (address);\\n\\n    function hasPendingRewards(address _borrower) external view returns (bool);\\n\\n    function interestPayable() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function lastActiveIndexUpdate() external view returns (uint256);\\n\\n    function lastCollateralError_Redistribution() external view returns (uint256);\\n\\n    function lastDebtError_Redistribution() external view returns (uint256);\\n\\n    function lastFeeOperationTime() external view returns (uint256);\\n\\n    function lastUpdate() external view returns (uint32);\\n\\n    function liquidationManager() external view returns (address);\\n\\n    function maxBorrowingFee() external view returns (uint256);\\n\\n    function maxRedemptionFee() external view returns (uint256);\\n\\n    function maxSystemDebt() external view returns (uint256);\\n\\n    function minuteDecayFactor() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function paused() external view returns (bool);\\n\\n    function periodFinish() external view returns (uint32);\\n\\n    function priceFeed() external view returns (address);\\n\\n    function redemptionFeeFloor() external view returns (uint256);\\n\\n    function rewardIntegral() external view returns (uint256);\\n\\n    function rewardIntegralFor(address) external view returns (uint256);\\n\\n    function rewardRate() external view returns (uint128);\\n\\n    function rewardSnapshots(address) external view returns (uint256 collateral, uint256 debt);\\n\\n    function sortedTroves() external view returns (address);\\n\\n    function sunsetting() external view returns (bool);\\n\\n    function surplusBalances(address) external view returns (uint256);\\n\\n    function systemDeploymentTime() external view returns (uint256);\\n\\n    function totalCollateralSnapshot() external view returns (uint256);\\n\\n    function totalStakes() external view returns (uint256);\\n\\n    function totalStakesSnapshot() external view returns (uint256);\\n\\n    function vault() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"ISortedTroves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISortedTroves {\\n    event NodeAdded(address _id, uint256 _NICR);\\n    event NodeRemoved(address _id);\\n\\n    function insert(address _id, uint256 _NICR, address _prevId, address _nextId) external;\\n\\n    function reInsert(address _id, uint256 _newNICR, address _prevId, address _nextId) external;\\n\\n    function remove(address _id) external;\\n\\n    function setAddresses(address _troveManagerAddress) external;\\n\\n    function contains(address _id) external view returns (bool);\\n\\n    function data() external view returns (address head, address tail, uint256 size);\\n\\n    function findInsertPosition(\\n        uint256 _NICR,\\n        address _prevId,\\n        address _nextId\\n    ) external view returns (address, address);\\n\\n    function getFirst() external view returns (address);\\n\\n    function getLast() external view returns (address);\\n\\n    function getNext(address _id) external view returns (address);\\n\\n    function getPrev(address _id) external view returns (address);\\n\\n    function getSize() external view returns (uint256);\\n\\n    function isEmpty() external view returns (bool);\\n\\n    function troveManager() external view returns (address);\\n\\n    function validInsertPosition(uint256 _NICR, address _prevId, address _nextId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IBorrowerOperations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBorrowerOperations {\\n    struct Balances {\\n        uint256[] collaterals;\\n        uint256[] debts;\\n        uint256[] prices;\\n    }\\n\\n    event BorrowingFeePaid(address indexed borrower, uint256 amount);\\n    event CollateralConfigured(address troveManager, address collateralToken);\\n    event TroveCreated(address indexed _borrower, uint256 arrayIndex);\\n    event TroveManagerRemoved(address troveManager);\\n    event TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 stake, uint8 operation);\\n\\n    function addColl(\\n        address troveManager,\\n        address account,\\n        uint256 _collateralAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function adjustTrove(\\n        address troveManager,\\n        address account,\\n        uint256 _maxFeePercentage,\\n        uint256 _collDeposit,\\n        uint256 _collWithdrawal,\\n        uint256 _debtChange,\\n        bool _isDebtIncrease,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function closeTrove(address troveManager, address account) external;\\n\\n    function configureCollateral(address troveManager, address collateralToken) external;\\n\\n    function fetchBalances() external returns (Balances memory balances);\\n\\n    function getGlobalSystemBalances() external returns (uint256 totalPricedCollateral, uint256 totalDebt);\\n\\n    function getTCR() external returns (uint256 globalTotalCollateralRatio);\\n\\n    function openTrove(\\n        address troveManager,\\n        address account,\\n        uint256 _maxFeePercentage,\\n        uint256 _collateralAmount,\\n        uint256 _debtAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function removeTroveManager(address troveManager) external;\\n\\n    function repayDebt(\\n        address troveManager,\\n        address account,\\n        uint256 _debtAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function setDelegateApproval(address _delegate, bool _isApproved) external;\\n\\n    function setMinNetDebt(uint256 _minNetDebt) external;\\n\\n    function withdrawColl(\\n        address troveManager,\\n        address account,\\n        uint256 _collWithdrawal,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function withdrawDebt(\\n        address troveManager,\\n        address account,\\n        uint256 _maxFeePercentage,\\n        uint256 _debtAmount,\\n        address _upperHint,\\n        address _lowerHint\\n    ) external;\\n\\n    function checkRecoveryMode(uint256 TCR) external pure returns (bool);\\n\\n    function CCR() external view returns (uint256);\\n\\n    function DEBT_GAS_COMPENSATION() external view returns (uint256);\\n\\n    function DECIMAL_PRECISION() external view returns (uint256);\\n\\n    function PERCENT_DIVISOR() external view returns (uint256);\\n\\n    function PRISMA_CORE() external view returns (address);\\n\\n    function _100pct() external view returns (uint256);\\n\\n    function debtToken() external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function getCompositeDebt(uint256 _debt) external view returns (uint256);\\n\\n    function guardian() external view returns (address);\\n\\n    function isApprovedDelegate(address owner, address caller) external view returns (bool isApproved);\\n\\n    function minNetDebt() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function troveManagersData(address) external view returns (address collateralToken, uint16 index);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"MintAndRepayZap.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"_bo\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_debt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"borrowerOps\",\"outputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"troveManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtChange\",\"type\":\"uint256\"}],\"name\":\"getMintAndRepayHints\",\"outputs\":[{\"internalType\":\"address[2]\",\"name\":\"mintHints\",\"type\":\"address[2]\"},{\"internalType\":\"address[2]\",\"name\":\"repayHints\",\"type\":\"address[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"troveManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"getRepayAndMintHints\",\"outputs\":[{\"internalType\":\"address[2]\",\"name\":\"repayHints\",\"type\":\"address[2]\"},{\"internalType\":\"address[2]\",\"name\":\"mintHints\",\"type\":\"address[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"troveManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtChange\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"mintHints\",\"type\":\"address[2]\"},{\"internalType\":\"address[2]\",\"name\":\"repayHints\",\"type\":\"address[2]\"}],\"name\":\"mintAndRepay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"troveManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[2]\",\"name\":\"repayHints\",\"type\":\"address[2]\"},{\"internalType\":\"address[2]\",\"name\":\"mintHints\",\"type\":\"address[2]\"}],\"name\":\"repayAndMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRecoveryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MintAndRepayZap", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000072c590349535ad52e6953744cb2a36b4095427190000000000000000000000004591dbff62656e7859afe5e45f6f47d3669fbb28", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}