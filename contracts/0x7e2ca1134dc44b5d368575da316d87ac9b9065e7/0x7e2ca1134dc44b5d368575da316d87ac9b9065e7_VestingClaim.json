{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/VestingClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./interfaces/ITokenMinter.sol\\\";\\r\\nimport \\\"./interfaces/ITokenLocker.sol\\\";\\r\\nimport \\\"./interfaces/IPrismaVesting.sol\\\";\\r\\n\\r\\ncontract VestingClaim{\\r\\n\\r\\n    address public immutable escrow;\\r\\n    address public immutable prismaVesting;\\r\\n    address public immutable convexproxy;\\r\\n    address public immutable cvxprisma;\\r\\n\\r\\n    \\r\\n    event Claimed(address indexed _address, uint256 _amount);\\r\\n\\r\\n    constructor(address _proxy, address _cvxprisma, address _escrow, address _prismaVesting){\\r\\n        convexproxy = _proxy;\\r\\n        cvxprisma = _cvxprisma;\\r\\n        escrow = _escrow;\\r\\n        prismaVesting = _prismaVesting;\\r\\n    }\\r\\n\\r\\n    function claimToConvexFull() external{\\r\\n        claimToConvex(0);\\r\\n    }\\r\\n\\r\\n    function claimToConvex(uint256 _amount) public{\\r\\n        //get previous\\r\\n        (uint256 beforeAmount,) = ITokenLocker(escrow).getAccountBalances(convexproxy);\\r\\n        beforeAmount *= ITokenLocker(escrow).lockToTokenRatio();\\r\\n\\r\\n        //call claim\\r\\n        IPrismaVesting(prismaVesting).lockFutureClaimsWithReceiver(msg.sender, convexproxy, _amount);\\r\\n\\r\\n        //get difference\\r\\n        (uint256 afterAmount,) = ITokenLocker(escrow).getAccountBalances(convexproxy);\\r\\n        afterAmount *= ITokenLocker(escrow).lockToTokenRatio();\\r\\n\\r\\n        //mint\\r\\n        ITokenMinter(cvxprisma).mint(msg.sender, afterAmount - beforeAmount);\\r\\n\\r\\n        emit Claimed(msg.sender, afterAmount - beforeAmount);\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/ITokenMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface ITokenMinter{\\r\\n    function mint(address,uint256) external;\\r\\n    function burn(address,uint256) external;\\r\\n    function setOperator(address _operator, bool _active) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/ITokenLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface ITokenLocker {\\r\\n    struct LockData {\\r\\n        uint amount;\\r\\n        uint weeksToUnlock;\\r\\n    }\\r\\n\\r\\n    function lock(address _account, uint256 _amount, uint256 _weeks) external returns (bool);\\r\\n    function withdrawExpiredLocks(uint256 _weeks) external returns (bool);\\r\\n    function withdrawWithPenalty(uint amountToWithdraw) external returns (uint);\\r\\n\\r\\n    function getAccountBalances(address account) external view returns (uint256 locked, uint256 unlocked);\\r\\n    function getAccountActiveLocks(\\r\\n        address account,\\r\\n        uint minWeeks\\r\\n    ) external view returns (LockData[] memory lockData, uint frozenAmount);\\r\\n\\r\\n    function getAccountWeightAt(address account, uint week) external view returns (uint256);\\r\\n\\r\\n    function getTotalWeightAt(uint week) external view returns (uint256);\\r\\n\\r\\n    function getWithdrawWithPenaltyAmounts(address account, uint amountToWithdraw) external view returns (uint amountWithdrawn, uint penaltyAmountPaid);\\r\\n\\r\\n    function lockToTokenRatio() external view returns (uint256);\\r\\n\\r\\n    function freeze() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPrismaVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n//interface for Prisma Vesting.\\r\\ninterface IPrismaVesting {\\r\\n    function lockFutureClaimsWithReceiver(\\r\\n        address account,\\r\\n        address receiver,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function setDelegateApproval(address _delegate, bool _isApproved) external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvxprisma\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prismaVesting\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimToConvex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToConvexFull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexproxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxprisma\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prismaVesting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VestingClaim", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ad7a9e2b3cd9214f36cb871336d8ab34ddfdd5b00000000000000000000000034635280737b5bfe6c7dc2fc3065d60d66e781850000000000000000000000003f78544364c3eccdce4d9c89a630aea26122829d000000000000000000000000c72bc1a8cf9b1a218386df641d8be99b40436a0f", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}