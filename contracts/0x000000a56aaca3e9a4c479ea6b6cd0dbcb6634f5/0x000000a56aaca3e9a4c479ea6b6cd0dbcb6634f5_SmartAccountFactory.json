{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@account-abstraction/contracts/core/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\"\r\n    },\r\n    \"@account-abstraction/contracts/interfaces/IAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\"\r\n    },\r\n    \"@account-abstraction/contracts/interfaces/IAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\"\r\n    },\r\n    \"@account-abstraction/contracts/interfaces/IEntryPoint.sol\": {\r\n      \"content\": \"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * an event emitted by handleOps(), before starting the execution loop.\\n     * any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\n}\\n\\n\"\r\n    },\r\n    \"@account-abstraction/contracts/interfaces/INonceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\"\r\n    },\r\n    \"@account-abstraction/contracts/interfaces/IStakeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\"\r\n    },\r\n    \"@account-abstraction/contracts/interfaces/UserOperation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-account/BaseSmartAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport {IAccount} from \\\"@account-abstraction/contracts/interfaces/IAccount.sol\\\";\\nimport {IEntryPoint} from \\\"@account-abstraction/contracts/interfaces/IEntryPoint.sol\\\";\\nimport {UserOperationLib, UserOperation} from \\\"@account-abstraction/contracts/interfaces/UserOperation.sol\\\";\\nimport {BaseSmartAccountErrors} from \\\"./common/Errors.sol\\\";\\nimport \\\"@account-abstraction/contracts/core/Helpers.sol\\\";\\n\\n/**\\n * Basic account implementation.\\n * This contract provides the basic logic for implementing the IAccount interface: validateUserOp function\\n * Specific account implementation should inherit it and provide the account-specific logic\\n */\\nabstract contract BaseSmartAccount is IAccount, BaseSmartAccountErrors {\\n    using UserOperationLib for UserOperation;\\n\\n    //return value in case of signature failure, with no time-range.\\n    // equivalent to _packValidationData(true,0,0);\\n    uint256 internal constant SIG_VALIDATION_FAILED = 1;\\n\\n    /**\\n     * @dev Initialize the Smart Account with required states\\n     * @param handler Default fallback handler provided in Smart Account\\n     * @param moduleSetupContract Contract, that setups initial auth module for this smart account. It can be a module factory or\\n     *                            a registry module that serves several smart accounts.\\n     * @param moduleSetupData data containing address of the Setup Contract and a setup data\\n     * @notice devs need to make sure it is only callable once (use initializer modifier or state check restrictions)\\n     */\\n    function init(\\n        address handler,\\n        address moduleSetupContract,\\n        bytes calldata moduleSetupData\\n    ) external virtual returns (address);\\n\\n    /**\\n     * Validates the userOp.\\n     * @param userOp validate the userOp.signature field\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain id)\\n     * @param missingAccountFunds the amount of funds required to pay to EntryPoint to pay for the userOp execution.\\n     * @return validationData signature and time-range of this operation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    ) external virtual override returns (uint256);\\n\\n    /**\\n     * @return nonce the account nonce.\\n     * @dev This method returns the next sequential nonce.\\n     * @notice Provides 2D nonce functionality by allowing to use a nonce of a specific key.\\n     */\\n    function nonce(uint192 _key) public view virtual returns (uint256) {\\n        return entryPoint().getNonce(address(this), _key);\\n    }\\n\\n    /**\\n     * return the entryPoint used by this account.\\n     * subclass should return the current entryPoint used by this account.\\n     */\\n    function entryPoint() public view virtual returns (IEntryPoint);\\n\\n    /**\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\n     * subclass MAY override this method for better funds management\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\n     * it will not be required to send again)\\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n     */\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\n        if (missingAccountFunds != 0) {\\n            payable(msg.sender).call{\\n                value: missingAccountFunds,\\n                gas: type(uint256).max\\n            }(\\\"\\\");\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-account/common/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\ncontract BaseSmartAccountErrors {\\n    /**\\n     * @notice Throws at onlyEntryPoint when msg.sender is not an EntryPoint set for this Smart Account\\n     * @param caller address that tried to call onlyEntryPoint-protected method\\n     */\\n    error CallerIsNotAnEntryPoint(address caller);\\n}\\n\\ncontract FallbackManagerErrors {\\n    /**\\n     * @notice Throws if zero address has been provided as Fallback Handler address\\n     */\\n    error HandlerCannotBeZero();\\n}\\n\\ncontract ModuleManagerErrors {\\n    /**\\n     * @notice Throws when trying to initialize module manager that already been initialized\\n     */\\n    error ModulesAlreadyInitialized();\\n\\n    /**\\n     * @notice Throws when a delegatecall in course of module manager initialization has failed\\n     */\\n    error ModulesSetupExecutionFailed();\\n\\n    /**\\n     * @notice Throws when address(0) or SENTINEL_MODULES constant has been provided as a module address\\n     * @param module Module address provided\\n     */\\n    error ModuleCannotBeZeroOrSentinel(address module);\\n\\n    /**\\n     * @notice Throws when trying to enable module that has already been enabled\\n     * @param module Module address provided\\n     */\\n    error ModuleAlreadyEnabled(address module);\\n\\n    /**\\n     * @notice Throws when module and previous module mismatch\\n     * @param expectedModule expected module at modules[prevModule]\\n     * @param returnedModule the module that has been found at modules[prevModule]\\n     * @param prevModule previous module address provided at call\\n     */\\n    error ModuleAndPrevModuleMismatch(\\n        address expectedModule,\\n        address returnedModule,\\n        address prevModule\\n    );\\n\\n    /**\\n     * @notice Throws when trying to execute transaction from module that is not enabled\\n     * @param module Module address provided\\n     */\\n    error ModuleNotEnabled(address module);\\n\\n    /**\\n     * @notice Throws when data for executeBatchCall provided in wrong format (i.e. empty array or lengths mismatch)\\n     * @param destLength length of destination contracts array\\n     * @param valueLength length of txn values array\\n     * @param funcLength length of function signatures array\\n     * @param operationLength length of operation types array. 0 if there's no operations\\n     */\\n    error WrongBatchProvided(\\n        uint256 destLength,\\n        uint256 valueLength,\\n        uint256 funcLength,\\n        uint256 operationLength\\n    );\\n}\\n\\ncontract SmartAccountErrors is BaseSmartAccountErrors, ModuleManagerErrors {\\n    /**\\n     * @notice Throws if zero address has been provided as Entry Point address\\n     */\\n    error EntryPointCannotBeZero();\\n\\n    /**\\n     * @notice Throws at mixedAuth when msg.sender is not an owner neither _self\\n     * @param caller address that tried to call mixedAuth-protected method\\n     */\\n    error MixedAuthFail(address caller);\\n\\n    /**\\n     * @notice Throws if trying to change an owner of a SmartAccount to the zero address\\n     */\\n    error OwnerCannotBeZero();\\n\\n    /**\\n     * @notice Throws if zero address has been provided as Base Implementation address\\n     */\\n    error BaseImplementationCannotBeZero();\\n\\n    /**\\n     * @notice Throws if there is no code at implementationAddress\\n     * @param implementationAddress implementation address provided\\n     */\\n    error InvalidImplementation(address implementationAddress);\\n\\n    /**\\n     * @notice Throws at onlyOwner when msg.sender is not an owner\\n     * @param caller address that tried to call onlyOwner method\\n     */\\n    error CallerIsNotOwner(address caller);\\n\\n    /**\\n     * @notice Throws at _requireFromEntryPointOrOwner when msg.sender is not an EntryPoint neither an owner\\n     * @param caller address that tried to call _requireFromEntryPointOrOwner-protected method\\n     */\\n    error CallerIsNotEntryPointOrOwner(address caller);\\n\\n    /**\\n     * @notice Throws at _requireFromEntryPointOrSelf when msg.sender is not an EntryPoint neither self\\n     * @param caller address that tried to call _requireFromEntryPointOrSelf-protected method\\n     */\\n    error CallerIsNotEntryPointOrSelf(address caller);\\n\\n    /**\\n     * @notice Throws at _requireFromEntryPoint when msg.sender is not an EntryPoint\\n     * @param caller address that tried to call _requireFromEntryPoint-protected method\\n     */\\n    error CallerIsNotEntryPoint(address caller);\\n\\n    /**\\n     * @notice Throws if trying to initialize a Smart Account that has already been initialized\\n     */\\n    error AlreadyInitialized();\\n\\n    /**\\n     * @notice Throws if contract signature is provided in frong format\\n     * @param uintS s converted to uint256\\n     * @param contractSignatureLength length of a contract signature\\n     * @param signatureLength the whole signature length\\n     */\\n    error WrongContractSignatureFormat(\\n        uint256 uintS,\\n        uint256 contractSignatureLength,\\n        uint256 signatureLength\\n    );\\n\\n    /**\\n     * @notice Throws if isValidSignature for the conrtact signature and data hash differs from EIP1271 Magic Value\\n     * @param contractSignature the contract signature that has been verified\\n     */\\n    error WrongContractSignature(bytes contractSignature);\\n\\n    /**\\n     * @notice Throws when if trying to transfer to zero address\\n     */\\n    error TransferToZeroAddressAttempt();\\n\\n    /**\\n     * @notice Throws when module address taken from signature is not enabled\\n     * @param moduleAddressProvided module address taken from signature\\n     */\\n    error WrongValidationModule(address moduleAddressProvided);\\n\\n    /**\\n     * @notice Thrown when the function that must be called only via delegatecall is called directly\\n     */\\n    error DelegateCallsOnly();\\n\\n    /**\\n     * @notice Thrown when trying to use address of the Smart Account as an owner for itself\\n     */\\n    error OwnerCanNotBeSelf();\\n\\n    /**\\n     * @notice Thrown when trying to use current owner as a new owner in a _setOwner() call\\n     */\\n    error OwnerProvidedIsSame();\\n}\\n\\ncontract SmartAccountFactoryErrors is SmartAccountErrors {\\n    /**\\n     * @notice Throws when the new Proxy deployment fails\\n     * @param owner Owner of a Proxy (Smart Account)\\n     * @param index Deployment index\\n     */\\n    error ProxyDeploymentFailed(address owner, uint256 index);\\n}\\n\\ncontract SelfAuthorizedErrors {\\n    /**\\n     * @notice Throws when the caller is not address(this)\\n     * @param caller Caller address\\n     */\\n    error CallerIsNotSelf(address caller);\\n}\\n\\ncontract SingletonPaymasterErrors {\\n    /**\\n     * @notice Throws when the Entrypoint address provided is address(0)\\n     */\\n    error EntryPointCannotBeZero();\\n\\n    /**\\n     * @notice Throws when the verifiying signer address provided is address(0)\\n     */\\n    error VerifyingSignerCannotBeZero();\\n\\n    /**\\n     * @notice Throws when the paymaster address provided is address(0)\\n     */\\n    error PaymasterIdCannotBeZero();\\n\\n    /**\\n     * @notice Throws when the 0 has been provided as deposit\\n     */\\n    error DepositCanNotBeZero();\\n\\n    /**\\n     * @notice Throws when trying to withdraw to address(0)\\n     */\\n    error CanNotWithdrawToZeroAddress();\\n\\n    /**\\n     * @notice Throws when trying to withdraw more than balance available\\n     * @param amountRequired required balance\\n     * @param currentBalance available balance\\n     */\\n    error InsufficientBalance(uint256 amountRequired, uint256 currentBalance);\\n\\n    /**\\n     * @notice Throws when signature provided has invalid length\\n     * @param sigLength length oif the signature provided\\n     */\\n    error InvalidPaymasterSignatureLength(uint256 sigLength);\\n}\\n\\n//\\n\"\r\n    },\r\n    \"contracts/smart-account/common/Stakeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IEntryPoint} from \\\"@account-abstraction/contracts/interfaces/IEntryPoint.sol\\\";\\n\\n/**\\n * @title Stakeable Entity\\n * @author Fil Makarov - <filipp.makarov@biconomy.io>\\n */\\ncontract Stakeable is Ownable {\\n    constructor(address _newOwner) {\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    function addStake(\\n        address epAddress,\\n        uint32 unstakeDelaySec\\n    ) external payable onlyOwner {\\n        require(epAddress != address(0), \\\"Invalid EP address\\\");\\n        IEntryPoint(epAddress).addStake{value: msg.value}(unstakeDelaySec);\\n    }\\n\\n    function unlockStake(address epAddress) external onlyOwner {\\n        require(epAddress != address(0), \\\"Invalid EP address\\\");\\n        IEntryPoint(epAddress).unlockStake();\\n    }\\n\\n    function withdrawStake(\\n        address epAddress,\\n        address payable withdrawAddress\\n    ) external onlyOwner {\\n        require(epAddress != address(0), \\\"Invalid EP address\\\");\\n        IEntryPoint(epAddress).withdrawStake(withdrawAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-account/factory/SmartAccountFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../BaseSmartAccount.sol\\\";\\nimport {DefaultCallbackHandler} from \\\"../handler/DefaultCallbackHandler.sol\\\";\\nimport {Stakeable} from \\\"../common/Stakeable.sol\\\";\\n\\n/**\\n * @title Smart Account Factory - factory responsible for deploying Smart Accounts using CREATE2 and CREATE\\n * @dev It deploys Smart Accounts as proxies pointing to `basicImplementation` that is immutable.\\n *      This allows keeping the same address for the same Smart Account owner on various chains via CREATE2\\n * @author Chirag Titiya - <chirag@biconomy.io>\\n */\\ncontract SmartAccountFactory is Stakeable {\\n    address public immutable basicImplementation;\\n    DefaultCallbackHandler public immutable minimalHandler;\\n\\n    event AccountCreation(\\n        address indexed account,\\n        address indexed initialAuthModule,\\n        uint256 indexed index\\n    );\\n    event AccountCreationWithoutIndex(\\n        address indexed account,\\n        address indexed initialAuthModule\\n    );\\n\\n    constructor(\\n        address _basicImplementation,\\n        address _newOwner\\n    ) Stakeable(_newOwner) {\\n        require(\\n            _basicImplementation != address(0),\\n            \\\"implementation cannot be zero\\\"\\n        );\\n        basicImplementation = _basicImplementation;\\n        minimalHandler = new DefaultCallbackHandler();\\n    }\\n\\n    /**\\n     * @dev Allows to retrieve the creation code used for the Proxy deployment.\\n     * @return The creation code for the Proxy.\\n     */\\n    function accountCreationCode() public pure returns (bytes memory) {\\n        return type(Proxy).creationCode;\\n    }\\n\\n    /**\\n     * @notice Deploys account using create2 and points it to basicImplementation\\n     *\\n     * @param index extra salt that allows to deploy more account if needed for same EOA (default 0)\\n     */\\n    function deployCounterFactualAccount(\\n        address moduleSetupContract,\\n        bytes calldata moduleSetupData,\\n        uint256 index\\n    ) public returns (address proxy) {\\n        // create initializer data based on init method and parameters\\n        bytes memory initializer = _getInitializer(\\n            moduleSetupContract,\\n            moduleSetupData\\n        );\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(keccak256(initializer), index)\\n        );\\n\\n        bytes memory deploymentData = abi.encodePacked(\\n            type(Proxy).creationCode,\\n            uint256(uint160(basicImplementation))\\n        );\\n\\n        assembly {\\n            proxy := create2(\\n                0x0,\\n                add(0x20, deploymentData),\\n                mload(deploymentData),\\n                salt\\n            )\\n        }\\n        require(address(proxy) != address(0), \\\"Create2 call failed\\\");\\n\\n        address initialAuthorizationModule;\\n\\n        if (initializer.length > 0) {\\n            assembly {\\n                let success := call(\\n                    gas(),\\n                    proxy,\\n                    0,\\n                    add(initializer, 0x20),\\n                    mload(initializer),\\n                    0,\\n                    0\\n                )\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                if iszero(success) {\\n                    revert(ptr, returndatasize())\\n                }\\n                initialAuthorizationModule := mload(ptr)\\n            }\\n        }\\n        emit AccountCreation(proxy, initialAuthorizationModule, index);\\n    }\\n\\n    /**\\n     * @notice Deploys account using create and points it to _implementation\\n     \\n     * @return proxy address of the deployed account\\n     */\\n    function deployAccount(\\n        address moduleSetupContract,\\n        bytes calldata moduleSetupData\\n    ) public returns (address proxy) {\\n        bytes memory deploymentData = abi.encodePacked(\\n            type(Proxy).creationCode,\\n            uint256(uint160(basicImplementation))\\n        );\\n\\n        assembly {\\n            proxy := create(\\n                0x0,\\n                add(0x20, deploymentData),\\n                mload(deploymentData)\\n            )\\n        }\\n        require(address(proxy) != address(0), \\\"Create call failed\\\");\\n\\n        bytes memory initializer = _getInitializer(\\n            moduleSetupContract,\\n            moduleSetupData\\n        );\\n        address initialAuthorizationModule;\\n\\n        if (initializer.length > 0) {\\n            assembly {\\n                let success := call(\\n                    gas(),\\n                    proxy,\\n                    0,\\n                    add(initializer, 0x20),\\n                    mload(initializer),\\n                    0,\\n                    0\\n                )\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                if iszero(success) {\\n                    revert(ptr, returndatasize())\\n                }\\n                initialAuthorizationModule := mload(ptr)\\n            }\\n        }\\n        emit AccountCreationWithoutIndex(proxy, initialAuthorizationModule);\\n    }\\n\\n    /**\\n     * @dev Allows to retrieve the initializer data for the account.\\n     * @param moduleSetupContract Contract, that setups initial auth module for this smart account. It can be a module factory or\\n     *                            a registry module that serves several smart accounts\\n     * @param moduleSetupData modules setup data (a standard calldata for the module setup contract)\\n     * @return initializer bytes for init method\\n     */\\n    function _getInitializer(\\n        address moduleSetupContract,\\n        bytes calldata moduleSetupData\\n    ) internal view returns (bytes memory) {\\n        return\\n            abi.encodeCall(\\n                BaseSmartAccount.init,\\n                (address(minimalHandler), moduleSetupContract, moduleSetupData)\\n            );\\n    }\\n\\n    /**\\n     * @notice Allows to find out account address prior to deployment\\n     * @param index extra salt that allows to deploy more accounts if needed for same EOA (default 0)\\n     */\\n    function getAddressForCounterFactualAccount(\\n        address moduleSetupContract,\\n        bytes calldata moduleSetupData,\\n        uint256 index\\n    ) external view returns (address _account) {\\n        // create initializer data based on init method, _owner and minimalHandler\\n        bytes memory initializer = _getInitializer(\\n            moduleSetupContract,\\n            moduleSetupData\\n        );\\n        bytes memory code = abi.encodePacked(\\n            type(Proxy).creationCode,\\n            uint256(uint160(basicImplementation))\\n        );\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(keccak256(initializer), index)\\n        );\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(bytes1(0xff), address(this), salt, keccak256(code))\\n        );\\n        _account = address(uint160(uint256(hash)));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-account/handler/DefaultCallbackHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {IERC1155TokenReceiver} from \\\"../interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {IERC721TokenReceiver} from \\\"../interfaces/IERC721TokenReceiver.sol\\\";\\nimport {IERC777TokensRecipient} from \\\"../interfaces/IERC777TokensRecipient.sol\\\";\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\n\\n/** @title Default Callback Handler - returns true for known token callbacks\\n *   @dev Handles EIP-1271 compliant isValidSignature requests.\\n *  @notice inspired by Richard Meissner's <richard@gnosis.pm> implementation\\n */\\ncontract DefaultCallbackHandler is\\n    IERC1155TokenReceiver,\\n    IERC777TokensRecipient,\\n    IERC721TokenReceiver,\\n    IERC165\\n{\\n    string public constant NAME = \\\"Default Callback Handler\\\";\\n    string public constant VERSION = \\\"1.0.0\\\";\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC1155TokenReceiver).interfaceId ||\\n            interfaceId == type(IERC721TokenReceiver).interfaceId ||\\n            interfaceId == type(IERC777TokensRecipient).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155TokenReceiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC721TokenReceiver.onERC721Received.selector;\\n    }\\n\\n    function tokensReceived(\\n        address,\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata,\\n        bytes calldata\\n    ) external pure override {\\n        // We implement this for completeness, doesn't really have any value\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/smart-account/interfaces/IERC1155TokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\n/**\\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\n*/\\ninterface IERC1155TokenReceiver {\\n    /**\\n        @notice Handle the receipt of a single ERC1155 token type.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.        \\n        This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n        This function MUST revert if it rejects the transfer.\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\\n        @param _from      The address which previously owned the token\\n        @param _id        The ID of the token being transferred\\n        @param _value     The amount of tokens being transferred\\n        @param _data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @notice Handle the receipt of multiple ERC1155 token types.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.        \\n        This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n        This function MUST revert if it rejects the transfer(s).\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\\n        @param _from      The address which previously owned the token\\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\\n        @param _data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n    */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/smart-account/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/smart-account/interfaces/IERC721TokenReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721TokenReceiver {\\n    /// @notice Handle the receipt of an NFT\\n    /// @dev The ERC721 smart contract calls this function on the recipient\\n    ///  after a `transfer`. This function MAY throw to revert and reject the\\n    ///  transfer. Return of other than the magic value MUST result in the\\n    ///  transaction being reverted.\\n    ///  Note: the contract address is always the message sender.\\n    /// @param _operator The address which called `safeTransferFrom` function\\n    /// @param _from The address which previously owned the token\\n    /// @param _tokenId The NFT identifier which is being transferred\\n    /// @param _data Additional data with no specified format\\n    /// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    ///  unless throwing\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/smart-account/interfaces/IERC777TokensRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\ninterface IERC777TokensRecipient {\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/smart-account/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Proxy // This is the user's Smart Account\\n * @notice Basic proxy that delegates all calls to a fixed implementation contract.\\n * @dev    Implementation address is stored in the slot defined by the Proxy's address\\n */\\ncontract Proxy {\\n    constructor(address _implementation) {\\n        require(\\n            _implementation != address(0),\\n            \\\"Invalid implementation address\\\"\\n        );\\n        assembly {\\n            sstore(address(), _implementation)\\n        }\\n    }\\n\\n    fallback() external payable {\\n        address target;\\n        assembly {\\n            target := sload(address())\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), target, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basicImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initialAuthModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AccountCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initialAuthModule\",\"type\":\"address\"}],\"name\":\"AccountCreationWithoutIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountCreationCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"epAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basicImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"moduleSetupContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"moduleSetupData\",\"type\":\"bytes\"}],\"name\":\"deployAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"moduleSetupContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"moduleSetupData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deployCounterFactualAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"moduleSetupContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"moduleSetupData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAddressForCounterFactualAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalHandler\",\"outputs\":[{\"internalType\":\"contract DefaultCallbackHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"epAddress\",\"type\":\"address\"}],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"epAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SmartAccountFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000000000002512019dafb59528b82cb92d3c5d2423ac00000000000000000000000090f05c1e52fafb4577a4f5f869b804318d56a1ee", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}