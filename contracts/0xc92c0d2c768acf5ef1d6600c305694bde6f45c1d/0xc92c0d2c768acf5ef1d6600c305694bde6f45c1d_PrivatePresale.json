{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IBribeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBribeToken {\\n    function mint(address to, uint256 amount) external;\\n    function balanceOf(address who) external view returns (uint256);\\n    function burn(address to, uint256 amount) external;\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function transfer(address to, uint256 value) external returns (bool);\\n} \"\r\n    },\r\n    \"contracts/IDubai.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDubai {\\n    function depositPresaleUser(address _user, uint256 _amount) external;\\n}\"\r\n    },\r\n    \"contracts/IFraudToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFraudToken {\\n    function mint(address to, uint256 amount) external;\\n    function totalSupply() external view returns (uint256);\\n    function transferUnderlying(address to, uint256 value) external returns (bool);\\n    function fragmentToFraud(uint256 value) external view returns (uint256);\\n    function fraudToFragment(uint256 fraud) external view returns (uint256);\\n    function balanceOfUnderlying(address who) external view returns (uint256);\\n    function balanceOf(address who) external view returns (uint256);\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function getCurrentEpoch() external view returns (uint256);\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function burn(address from, uint256 amount) external;\\n    function rebase(\\n        uint256 epoch,\\n        uint256 indexDelta,\\n        bool positive\\n    ) external returns (uint256);\\n}\\n\\n\\n\"\r\n    },\r\n    \"contracts/PrivatePresale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n/*\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28c0\u28c0\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u281b\u28a6\u2840\u2809\u2819\u28a6\u2840\u2800\u2800\u28c0\u28e0\u28e4\u28c4\u28c0\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u2864\u2824\u2834\u2836\u2824\u2824\u28bd\u28e6\u2840\u2800\u28b9\u2874\u281a\u2801\u2800\u2880\u28c0\u28c8\u28f3\u28c4\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u28a0\u281e\u28c1\u2864\u2834\u2836\u2836\u28e6\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2836\u283f\u282d\u2824\u28c4\u28c8\u2819\u2833\u2800\\n\u2800\u2800\u2800\u2800\u28a0\u287f\u280b\u2800\u2800\u2880\u2874\u280b\u2801\u2800\u28c0\u2856\u281b\u28b3\u2834\u2836\u2844\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u28a6\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2874\u280b\u28e0\u2834\u281a\u2809\u2809\u28e7\u28c4\u28f7\u2840\u2880\u28ff\u2840\u2808\u2819\u283b\u284d\u2819\u2832\u28ae\u28e7\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u285e\u28e0\u281e\u2801\u2800\u2800\u2800\u28f0\u2803\u2800\u28f8\u2809\u2809\u2800\u2819\u28a6\u2840\u2800\u2838\u2844\u2800\u2808\u281f\\n\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u281f\u2801\u2800\u2800\u2800\u2800\u28a0\u280f\u2809\u2889\u2847\u2800\u2800\u2800\u2800\u2800\u2809\u2833\u28c4\u28b7\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u287e\u2824\u2824\u28bc\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28bf\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u2847\u2800\u2800\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2809\u2809\u2809\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28c0\u28c0\u28c0\u28fb\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u2864\u2824\u2824\u28ff\u2809\u2809\u2809\u2818\u28e7\u2824\u28a4\u28c4\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\n\u2800\u2800\u2880\u2864\u2816\u280b\u2809\u2800\u2800\u2800\u2800\u2800\u2819\u2832\u2824\u2824\u2834\u281a\u2801\u2800\u2800\u2800\u2809\u2809\u2813\u2826\u28c4\u2800\u2800\u2800\\n\u2880\u285e\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u28c4\u2800\\n\u2818\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u281a\u2800\\n  _____ ____      _   _   _ ____    ____  ____  _____ ____    _    _     _____ \\n |  ___|  _ \\\\    / \\\\ | | | |  _ \\\\  |  _ \\\\|  _ \\\\| ____/ ___|  / \\\\  | |   | ____|\\n | |_  | |_) |  / _ \\\\| | | | | | | | |_) | |_) |  _| \\\\___ \\\\ / _ \\\\ | |   |  _|  \\n |  _| |  _ <  / ___ \\\\ |_| | |_| | |  __/|  _ <| |___ ___) / ___ \\\\| |___| |___ \\n |_|   |_| \\\\_\\\\/_/   \\\\_\\\\___/|____/  |_|   |_| \\\\_\\\\_____|____/_/   \\\\_\\\\_____|_____|\\n                                                                               \\n    Twitter: https://twitter.com/fraudeth_gg\\n    Telegram: http://t.me/fraudportal\\n    Website: https://fraudeth.gg\\n    Docs: https://docs.fraudeth.gg                                                                              \\n\\n*/\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";  \\nimport \\\"./IFraudToken.sol\\\";\\nimport \\\"./IBribeToken.sol\\\";\\nimport \\\"./IDubai.sol\\\";\\ncontract PrivatePresale is Ownable {\\n\\n    using SafeMath for uint256;\\n    \\n    // FRAUD\\n    IFraudToken public fraud;\\n    // Bribe\\n    IBribeToken public bribe;\\n    // Dubai\\n    IDubai public dubai;\\n\\n    struct Allocation {\\n        uint256 bribeDelayed;\\n        uint256 fraudClaimable;\\n        uint256 fraudDelayed;\\n        uint256 fraudInDubai;\\n        uint256 ethAmount;\\n    }\\n    \\n    uint256 public claimOpenDate;\\n    uint256 public lockedInDubai;\\n    bool public claimOpen = false;\\n    uint256 public claimOpenEpoch;\\n    \\n    mapping(address => Allocation) public allocations;\\n    mapping(address => bool) public frozen;\\n\\n    event AllocationsAdded(address[] participants, uint256[] ethAmounts);\\n    event Claimed(address indexed user, uint256 fraudAmount);\\n    event DelayedClaimed(address indexed user, uint256 fraudAmount, uint256 bribeAmount);\\n\\n    constructor(address _fraud, address _bribe, address _dubai) {\\n        fraud = IFraudToken(_fraud);\\n        bribe = IBribeToken(_bribe);\\n        dubai = IDubai(_dubai);\\n    }\\n    \\n    function addAllocations(address[] calldata participants, uint256[] calldata ethAmounts, uint256[] calldata fraudAllocations, uint256[] calldata bribeAllocations) external onlyOwner(){\\n        require(participants.length == fraudAllocations.length, \\\"Mismatched participants and fraudAllocations\\\");\\n        require(participants.length == bribeAllocations.length, \\\"Mismatched participants and bribeAllocations\\\");\\n        require(participants.length == ethAmounts.length, \\\"Mismatched participants and ethAmounts\\\");\\n        \\n        for (uint256 i = 0; i < participants.length; i++) {\\n            uint256 ethAmount = ethAmounts[i];\\n            uint256 fraudAmount = fraudAllocations[i];\\n            uint256 bribeAmount = bribeAllocations[i];\\n            address participant = participants[i];\\n\\n            allocations[participant].ethAmount = ethAmount;\\n            allocations[participant].fraudClaimable = fraudAmount.mul(60).div(100);\\n            allocations[participant].fraudDelayed = fraudAmount.mul(20).div(100);\\n            allocations[participant].fraudInDubai = fraudAmount.mul(20).div(100);\\n            allocations[participant].bribeDelayed = bribeAmount;\\n\\n            lockedInDubai = lockedInDubai.add(allocations[participant].fraudInDubai);\\n\\n        }\\n        emit AllocationsAdded(participants, ethAmounts);\\n    }\\n    \\n    // Should we burn or not tokens ? Here virtual tokens are burned\\n    // Rebase \\n    function claim() external {\\n        require(claimOpen == true, \\\"Claiming not yet opened\\\");\\n        require(allocations[msg.sender].fraudClaimable > 0, \\\"No tokens to claim\\\");\\n        uint256 fraudClaimable = allocations[msg.sender].fraudClaimable;\\n        uint256 epochsElapsed = fraud.getCurrentEpoch().sub(claimOpenEpoch);\\n        if (epochsElapsed >= 1) {\\n            uint256 rebaseFactor = 1 ether;  \\n            for (uint256 i = 0; i < epochsElapsed; i++) {\\n                rebaseFactor = rebaseFactor.mul(900).div(1000); \\n            }\\n            fraudClaimable = fraudClaimable.mul(rebaseFactor).div(1 ether);\\n        }\\n\\n        fraud.mint(msg.sender, fraudClaimable);\\n        allocations[msg.sender].fraudClaimable = 0;\\n        emit Claimed(msg.sender, fraudClaimable);\\n    }\\n\\n    function claimLocked() external {\\n        require(claimOpen == true, \\\"Claiming not yet opened\\\");\\n        require(allocations[msg.sender].fraudDelayed > 0, \\\"No tokens to claim\\\");\\n        require(block.timestamp >= claimOpenDate.add(1 days), \\\"Claiming time not yet open\\\");\\n        require(!frozen[msg.sender],\\\"Not authorized\\\");\\n        uint256 fraudDelayed = allocations[msg.sender].fraudDelayed;\\n        uint256 openEpoch = claimOpenEpoch.add(1); // 1 day lock = 1 epoch\\n        uint256 epochsElapsed = fraud.getCurrentEpoch().sub(openEpoch);\\n\\n        if (epochsElapsed >= 1) {\\n            uint256 rebaseFactor = 1 ether;  \\n            for (uint256 i = 0; i < epochsElapsed; i++) {\\n                rebaseFactor = rebaseFactor.mul(900).div(1000); \\n            }\\n            fraudDelayed = fraudDelayed.mul(rebaseFactor).div(1 ether);\\n        }\\n        uint256 bribeDelayed = allocations[msg.sender].bribeDelayed;\\n        fraud.mint(msg.sender, fraudDelayed);\\n        bribe.mint(msg.sender, bribeDelayed);\\n        allocations[msg.sender].fraudDelayed = 0;\\n        allocations[msg.sender].bribeDelayed = 0;\\n        emit DelayedClaimed(msg.sender, fraudDelayed, bribeDelayed);\\n    }\\n    function setClaimOpen(bool _claimOpen) external onlyOwner {\\n        claimOpen = _claimOpen;\\n        claimOpenDate = block.timestamp;\\n        claimOpenEpoch = fraud.getCurrentEpoch();\\n    }\\n    function freeze(address target, bool isFrozen)external onlyOwner{\\n        frozen[target] = isFrozen;\\n    }\\n\\n    function getAllocationFraudInDubai(address _user) external view returns (uint256) {\\n        return allocations[_user].fraudInDubai;\\n    }\\n\\n    function getClaimOpenDate() external view returns (uint256) {\\n        return claimOpenDate;\\n    }\\n\\n    function getClaimOpenEpoch() external view returns (uint256) {\\n        return claimOpenEpoch;\\n    }\\n\\n    function getLockedInDubai() external view returns (uint256) {\\n        return lockedInDubai;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fraud\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dubai\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ethAmounts\",\"type\":\"uint256[]\"}],\"name\":\"AllocationsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fraudAmount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fraudAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bribeAmount\",\"type\":\"uint256\"}],\"name\":\"DelayedClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ethAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fraudAllocations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bribeAllocations\",\"type\":\"uint256[]\"}],\"name\":\"addAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bribeDelayed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fraudClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fraudDelayed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fraudInDubai\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribe\",\"outputs\":[{\"internalType\":\"contract IBribeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOpenDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOpenEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dubai\",\"outputs\":[{\"internalType\":\"contract IDubai\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fraud\",\"outputs\":[{\"internalType\":\"contract IFraudToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAllocationFraudInDubai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimOpenDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimOpenEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockedInDubai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedInDubai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claimOpen\",\"type\":\"bool\"}],\"name\":\"setClaimOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PrivatePresale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001a0120eab44157ba10d767e0f4a38a0a6452bcf900000000000000000000000085acb547000531d96fd64f6d87ee4df0965e592500000000000000000000000060c205be5c559e53a3501f2008589698d4e2f60a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}