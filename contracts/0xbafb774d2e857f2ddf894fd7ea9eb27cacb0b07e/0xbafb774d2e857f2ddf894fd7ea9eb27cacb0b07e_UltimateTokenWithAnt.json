{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity 0.8.18;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\n\r\ninterface IGemAntiBot {\r\n    function setTokenOwner(address owner) external;\r\n\r\n    function onPreTransferCheck(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Caller {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        address router,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\ninterface IFee {\r\n    function payFee(\r\n        uint256 _tokenType\r\n    ) external payable;\r\n}\r\ncontract UltimateTokenWithAntibot is IERC20, Ownable {\r\n    using SafeERC20 for IERC20;\r\n    IUniswapV2Caller public constant uniswapV2Caller =\r\n        IUniswapV2Caller(0x1CcFE8c40eF259566433716002E379dFfFbf5a3e);\r\n    IFee public constant feeContract = IFee(0xfd6439AEfF9d2389856B7486b9e74a6DacaDcDCe);\r\n    address public gemAntiBot;\r\n    bool public antiBotEnabled;\r\n    address public baseTokenForPair;\r\n    uint8 private _decimals;\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    uint256 private _rewardFee;\r\n    uint256 private _previousRewardFee;\r\n\r\n    uint256 private _liquidityFee;\r\n    uint256 private _previousLiquidityFee;\r\n\r\n    uint256 private _marketingFee;\r\n    uint256 private _previousMarketingFee;\r\n\r\n    uint256 private _treasuryFee;\r\n    uint256 private _previousTreasuryFee;\r\n\r\n    uint256 private _burnFee;\r\n    uint256 private _previousBurnFee;\r\n\r\n    bool private inSwapAndLiquify;\r\n    uint16 public sellRewardFee;\r\n    uint16 public buyRewardFee;\r\n    uint16 public sellLiquidityFee;\r\n    uint16 public buyLiquidityFee;\r\n\r\n    uint16 public sellMarketingFee;\r\n    uint16 public buyMarketingFee;\r\n\r\n    uint16 public sellTreasuryFee;\r\n    uint16 public buyTreasuryFee;\r\n\r\n    uint16 public sellBurnFee;\r\n    uint16 public buyBurnFee;\r\n\r\n    address public marketingWallet;\r\n    bool public isMarketingFeeBaseToken;\r\n    address public treasuryWallet;\r\n\r\n\r\n\r\n    uint256 public minAmountToTakeFee;\r\n    uint256 public maxWallet;\r\n    uint256 public maxTransactionAmount;\r\n\r\n\r\n    IUniswapV2Router02 public mainRouter;\r\n    address public mainPair;\r\n\r\n    mapping(address => bool) public isExcludedFromFee;\r\n    mapping(address => bool) public isExcludedFromMaxTransactionAmount;\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    uint256 private _liquidityFeeTokens;\r\n    uint256 private _marketingFeeTokens;\r\n    uint256 private _treasuryFeeTokens;\r\n\r\n    event UpdateLiquidityFee(\r\n        uint16 newSellLiquidityFee,\r\n        uint16 newBuyLiquidityFee,\r\n        uint16 oldSellLiquidityFee,\r\n        uint16 oldBuyLiquidityFee\r\n    );\r\n    event UpdateMarketingFee(\r\n        uint16 newSellMarketingFee,\r\n        uint16 newBuyMarketingFee,\r\n        uint16 oldSellMarketingFee,\r\n        uint16 oldBuyMarketingFee\r\n    );\r\n    event UpdateTreasuryFee(\r\n        uint16 newSellTreasuryFee,\r\n        uint16 newBuyTreasuryFee,\r\n        uint16 oldSellTreasuryFee,\r\n        uint16 oldBuyTreasuryFee\r\n    );\r\n    event UpdateBurnFee(\r\n        uint16 newSellBurnFee,\r\n        uint16 newBuyBurnFee,\r\n        uint16 oldSellBurnFee,\r\n        uint16 oldBuyBurnFee\r\n    );\r\n    event UpdateRewardFee(\r\n        uint16 newSellRewardFee,\r\n        uint16 newBuyRewardFee,\r\n        uint16 oldSellRewardFee,\r\n        uint16 oldBuyRewardFee\r\n    );  \r\n    event UpdateMarketingWallet(\r\n        address indexed newMarketingWallet,\r\n        bool newIsMarketingFeeBaseToken,\r\n        address indexed oldMarketingWallet,\r\n        bool oldIsMarketingFeeBaseToken\r\n    );\r\n    event UpdateTreasuryWallet(\r\n        address indexed newTreasuryWallet,\r\n        address indexed oldTreasuryWallet\r\n    );\r\n\r\n    event UpdateMinAmountToTakeFee(uint256 newMinAmountToTakeFee, uint256 oldMinAmountToTakeFee);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool value);\r\n    event ExcludedFromFee(address indexed account, bool isEx);\r\n    event SwapAndLiquify(uint256 tokensForLiquidity, uint256 baseTokenForLiquidity);\r\n    event MarketingFeeTaken(\r\n        uint256 marketingFeeTokens,\r\n        uint256 marketingFeeBaseTokenSwapped\r\n    );\r\n    event TreasuryFeeTaken(\r\n        uint256 amount\r\n    );\r\n    event ExcludedFromMaxTransactionAmount(address indexed account, bool isExcluded);\r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldRouter);\r\n    event UpdateMaxWallet(uint256 newMaxWallet, uint256 oldMaxWallet);\r\n    event UpdateMaxTransactionAmount(uint256 newMaxTransactionAmount, uint256 oldMaxTransactionAmount);\r\n    constructor(\r\n        string memory __name,\r\n        string memory __symbol,\r\n        uint8 __decimals,\r\n        uint256 _totalSupply,\r\n        uint256 _maxWallet,\r\n        uint256 _maxTransactionAmount,\r\n        address[5] memory _accounts,\r\n        bool _isMarketingFeeBaseToken,\r\n        uint16[10] memory _fees\r\n    ) payable {\r\n        feeContract.payFee{value: msg.value}(4);   \r\n        baseTokenForPair=_accounts[2];\r\n        _decimals = __decimals;\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n        _tTotal = _totalSupply ;\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        require(_accounts[0] != address(0), \"marketing wallet can not be 0\");\r\n        require(_accounts[1] != address(0), \"Router address can not be 0\");\r\n        require(_accounts[3] != address(0), \"Treasury wallet can not be 0\");\r\n        require(_accounts[3] != _accounts[0], \"Treasury wallet can not be same with marketing wallet\");\r\n        require(_fees[0]+(_fees[2])+(_fees[4]) + _fees[6] + _fees[8] <= 300, \"sell total fee <= 30%\");\r\n        require(_fees[1]+(_fees[3])+(_fees[5]) + _fees[7] + _fees[9] <= 300, \"buy total fee <= 30%\");\r\n        require(_fees[0] < 150, \"each fee < 15%\");\r\n        require(_fees[1] < 150, \"each fee < 15%\");\r\n        require(_fees[2] < 150, \"each fee < 15%\");\r\n        require(_fees[3] < 150, \"each fee < 15%\");\r\n        require(_fees[4] < 150, \"each fee < 15%\");\r\n        require(_fees[5] < 150, \"each fee < 15%\");\r\n        require(_fees[6] < 150, \"each fee < 15%\");\r\n        require(_fees[7] < 150, \"each fee < 15%\");\r\n        require(_fees[8] < 150, \"each fee < 15%\");\r\n        require(_fees[9] < 150, \"each fee < 15%\");\r\n        gemAntiBot = _accounts[4];\r\n        IGemAntiBot(gemAntiBot).setTokenOwner(msg.sender);\r\n        antiBotEnabled = true;\r\n        marketingWallet = _accounts[0];\r\n        treasuryWallet = _accounts[3];\r\n        isMarketingFeeBaseToken = _isMarketingFeeBaseToken;\r\n        emit UpdateMarketingWallet(\r\n            marketingWallet,\r\n            isMarketingFeeBaseToken,\r\n            address(0),\r\n            false\r\n        );\r\n        emit UpdateTreasuryWallet(\r\n            treasuryWallet,\r\n            address(0)\r\n        );\r\n        mainRouter = IUniswapV2Router02(_accounts[1]);\r\n        if(baseTokenForPair != mainRouter.WETH()){            \r\n            IERC20(baseTokenForPair).approve(address(mainRouter), MAX);            \r\n        }\r\n        _approve(address(this), address(uniswapV2Caller), MAX);\r\n        _approve(address(this), address(mainRouter), MAX);\r\n        emit UpdateUniswapV2Router(address(mainRouter), address(0));\r\n        mainPair = IUniswapV2Factory(mainRouter.factory()).createPair(\r\n            address(this),\r\n            baseTokenForPair\r\n        );\r\n        \r\n        sellLiquidityFee = _fees[0];\r\n        buyLiquidityFee = _fees[1];\r\n        emit UpdateLiquidityFee(\r\n            sellLiquidityFee,\r\n            buyLiquidityFee,\r\n            0,\r\n            0\r\n        );\r\n        sellMarketingFee = _fees[2];\r\n        buyMarketingFee = _fees[3];\r\n        emit UpdateMarketingFee(\r\n            sellMarketingFee,\r\n            buyMarketingFee,\r\n            0,\r\n            0\r\n        );\r\n        sellTreasuryFee = _fees[6];\r\n        buyTreasuryFee = _fees[7];\r\n        emit UpdateTreasuryFee(\r\n            sellTreasuryFee,\r\n            buyTreasuryFee,\r\n            0,\r\n            0\r\n        );\r\n        sellBurnFee = _fees[8];\r\n        buyBurnFee = _fees[9];\r\n        emit UpdateBurnFee(\r\n            sellBurnFee,\r\n            buyBurnFee,\r\n            0,\r\n            0\r\n        );\r\n        sellRewardFee = _fees[4];\r\n        buyRewardFee = _fees[5];\r\n        emit UpdateRewardFee(\r\n            sellRewardFee,\r\n            buyRewardFee,\r\n            0,\r\n            0\r\n        );\r\n        minAmountToTakeFee = _totalSupply/(10000);\r\n        emit UpdateMinAmountToTakeFee(minAmountToTakeFee, 0);\r\n        require(_maxTransactionAmount>=_totalSupply / 10000, \"maxTransactionAmount >= total supply / 10000\");\r\n        require(_maxWallet>=_totalSupply / 10000, \"maxWallet >= total supply / 10000\");\r\n        maxWallet=_maxWallet;\r\n        emit UpdateMaxWallet(maxWallet, 0);\r\n        maxTransactionAmount=_maxTransactionAmount;\r\n        emit UpdateMaxTransactionAmount(maxTransactionAmount, 0);\r\n        _isExcluded[address(0xdead)] = true;\r\n        _excluded.push(address(0xdead));\r\n        _isExcluded[address(this)] = true;\r\n        _excluded.push(address(this));\r\n        _isExcluded[treasuryWallet] = true;\r\n        _excluded.push(treasuryWallet);\r\n\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[marketingWallet] = true;\r\n        isExcludedFromFee[treasuryWallet] = true;\r\n        isExcludedFromFee[_msgSender()] = true;\r\n        isExcludedFromFee[address(0xdead)] = true;\r\n        isExcludedFromMaxTransactionAmount[address(0xdead)]=true;\r\n        isExcludedFromMaxTransactionAmount[address(this)]=true;\r\n        isExcludedFromMaxTransactionAmount[marketingWallet]=true;\r\n        isExcludedFromMaxTransactionAmount[treasuryWallet]=true;\r\n        isExcludedFromMaxTransactionAmount[_msgSender()]=true;\r\n        _setAutomatedMarketMakerPair(mainPair, true);\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n    function setUsingAntiBot(bool enabled_) external onlyOwner {\r\n        antiBotEnabled = enabled_;\r\n    }\r\n    function updateUniswapV2Pair(address _baseTokenForPair) external onlyOwner\r\n    {\r\n        require(\r\n            _baseTokenForPair != baseTokenForPair,\r\n            \"The baseTokenForPair already has that address\"\r\n        );\r\n        baseTokenForPair=_baseTokenForPair;\r\n        mainPair = IUniswapV2Factory(mainRouter.factory()).createPair(\r\n            address(this),\r\n            baseTokenForPair\r\n        );\r\n        if(baseTokenForPair != mainRouter.WETH()){\r\n            IERC20(baseTokenForPair).approve(address(mainRouter), MAX);            \r\n        }\r\n        _setAutomatedMarketMakerPair(mainPair, true);\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n        require(\r\n            newAddress != address(mainRouter),\r\n            \"The router already has that address\"\r\n        );\r\n        emit UpdateUniswapV2Router(newAddress, address(mainRouter));\r\n        mainRouter = IUniswapV2Router02(newAddress);\r\n        address _mainPair = IUniswapV2Factory(mainRouter.factory())\r\n            .createPair(address(this), baseTokenForPair);\r\n        mainPair = _mainPair;\r\n        _approve(address(this), address(mainRouter), MAX);\r\n        if(baseTokenForPair != mainRouter.WETH()){\r\n            IERC20(baseTokenForPair).approve(address(mainRouter), MAX);            \r\n        }   \r\n        _setAutomatedMarketMakerPair(mainPair, true);\r\n    }\r\n  \r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        (           \r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity,\r\n            uint256 tMarketing,\r\n            uint256 tTreasury,\r\n            uint256 tBurn\r\n        ) = _getTValues(amount);\r\n        uint256 currentRate = _getRate();\r\n        {\r\n            //burn\r\n            _tTotal = _tTotal - tBurn;\r\n            _rTotal = _rTotal - tBurn*currentRate;\r\n            emit Transfer(sender, address(0), tBurn);\r\n        }\r\n        {\r\n            //marketing & liquidity & treasury burn fee collected in the token contract\r\n            _liquidityFeeTokens = _liquidityFeeTokens+tLiquidity;\r\n            _marketingFeeTokens = _marketingFeeTokens+tMarketing;\r\n            _treasuryFeeTokens = _treasuryFeeTokens+tTreasury;\r\n            uint256 tTotalFee = tLiquidity+tMarketing+tTreasury;\r\n            _rOwned[address(this)] = _rOwned[address(this)]+tTotalFee * currentRate;\r\n            if (_isExcluded[address(this)])\r\n                _tOwned[address(this)] = _tOwned[address(this)]+tTotalFee;\r\n        }\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _tOwned[sender] = _tOwned[sender]-amount;\r\n            _rOwned[sender] = _rOwned[sender]-amount*currentRate;\r\n            _rOwned[recipient] = _rOwned[recipient]+tTransferAmount*currentRate;\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _rOwned[sender] = _rOwned[sender]-amount*currentRate;\r\n            _tOwned[recipient] = _tOwned[recipient]+tTransferAmount;\r\n            _rOwned[recipient] = _rOwned[recipient]+tTransferAmount*currentRate;\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _tOwned[sender] = _tOwned[sender]-amount;\r\n            _rOwned[sender] = _rOwned[sender]-amount*currentRate;\r\n            _tOwned[recipient] = _tOwned[recipient]+tTransferAmount;\r\n            _rOwned[recipient] = _rOwned[recipient]+tTransferAmount*currentRate;\r\n        } else {\r\n            _rOwned[sender] = _rOwned[sender]-amount*currentRate;\r\n            _rOwned[recipient] = _rOwned[recipient]+tTransferAmount*currentRate;\r\n        }\r\n        _reflectFee(tFee*currentRate, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n\r\n    function updateMaxWallet(uint256 _maxWallet) external onlyOwner {\r\n        require(_maxWallet>=_tTotal / 10000, \"maxWallet >= total supply / 10000\");\r\n        emit UpdateMaxWallet(_maxWallet, maxWallet);\r\n        maxWallet = _maxWallet;\r\n    }\r\n\r\n    function updateMaxTransactionAmount(uint256 _maxTransactionAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_maxTransactionAmount>=_tTotal / 10000, \"maxTransactionAmount >= total supply / 10000\");  \r\n        emit UpdateMaxTransactionAmount(_maxTransactionAmount, maxTransactionAmount);\r\n        maxTransactionAmount = _maxTransactionAmount;\r\n    }   \r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal-(rFee);\r\n        _tFeeTotal = _tFeeTotal+(tFee);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = calculateRewardFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tMarketing = calculateMarketingFee(tAmount);\r\n        uint256 tTreasury = calculateTreasuryFee(tAmount);\r\n        uint256 tBurn = calculateBurnFee(tAmount);\r\n        uint256 tTransferAmount = calculateTransferAmount(tAmount);\r\n        return (tTransferAmount, tFee, tLiquidity, tMarketing, tTreasury, tBurn);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply/(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] > rSupply ||\r\n                _tOwned[_excluded[i]] > tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply = rSupply-(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply-(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal/(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        _previousRewardFee = _rewardFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousMarketingFee = _marketingFee;\r\n        _previousTreasuryFee = _treasuryFee;\r\n        _previousBurnFee = _burnFee;\r\n\r\n        _burnFee = 0;\r\n        _treasuryFee = 0;\r\n        _marketingFee = 0;\r\n        _rewardFee = 0;\r\n        _liquidityFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _burnFee = _previousBurnFee;\r\n        _treasuryFee = _previousTreasuryFee;\r\n        _rewardFee = _previousRewardFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n        _marketingFee = _previousMarketingFee;\r\n    }\r\n\r\n    function calculateRewardFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount*(_rewardFee)/(10**3);\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount*(_liquidityFee)/(10**3);\r\n    }\r\n\r\n    function calculateMarketingFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount*(_marketingFee)/(10**3);\r\n    }\r\n\r\n    function calculateTreasuryFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount*(_treasuryFee)/(10**3);\r\n    }\r\n\r\n    function calculateBurnFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount*(_burnFee)/(10**3);\r\n    }\r\n    function calculateTransferAmount(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount*(1000 - _burnFee - _treasuryFee - _rewardFee - _liquidityFee - _marketingFee)/(10**3);\r\n    }\r\n    \r\n    /////////////////////////////////////////////////////////////////////////////////\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()]-amount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender]+(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender]-(\r\n                subtractedValue\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() external view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        uint256 currentRate = _getRate();\r\n        if (!deductTransferFee) {            \r\n            uint256 rAmount = tAmount*currentRate;\r\n            return rAmount;\r\n        } else {\r\n            (           \r\n                uint256 tTransferAmount,\r\n                ,\r\n                ,\r\n                ,\r\n                ,               \r\n            ) = _getTValues(tAmount);\r\n            uint256 rTransferAmount = tTransferAmount * currentRate;\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount/(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        require(\r\n            _excluded.length + 1 <= 50,\r\n            \"Cannot exclude more than 50 accounts.  Include a previously excluded address.\"\r\n        );\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) public onlyOwner {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                uint256 prev_rOwned=_rOwned[account];\r\n                _rOwned[account]=_tOwned[account]*_getRate();\r\n                _rTotal=_rTotal-prev_rOwned+_rOwned[account];\r\n                _isExcluded[account] = false;\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    function updateLiquidityFee(\r\n        uint16 _sellLiquidityFee,\r\n        uint16 _buyLiquidityFee\r\n    ) external onlyOwner {\r\n        require(\r\n            _sellLiquidityFee+(sellMarketingFee)+(sellRewardFee) + sellTreasuryFee + sellBurnFee <= 300,\r\n            \"sell total fee <= 30%\"\r\n        );\r\n        require(\r\n            _buyLiquidityFee+(buyMarketingFee)+(buyRewardFee) + buyTreasuryFee + buyBurnFee <= 300,\r\n            \"buy total fee <= 30%\"\r\n        );\r\n        require(_sellLiquidityFee<= 150, \"sell fee <= 15%\");\r\n        require(_buyLiquidityFee<= 150, \"buy fee <= 15%\");\r\n        emit UpdateLiquidityFee(\r\n            _sellLiquidityFee,\r\n            _buyLiquidityFee,\r\n            sellLiquidityFee,\r\n            buyLiquidityFee\r\n        );\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        buyLiquidityFee = _buyLiquidityFee;        \r\n    }\r\n\r\n    function updateMarketingFee(\r\n        uint16 _sellMarketingFee,\r\n        uint16 _buyMarketingFee\r\n    ) external onlyOwner {\r\n        require(\r\n            _sellMarketingFee+(sellLiquidityFee)+(sellRewardFee) + sellTreasuryFee + sellBurnFee <= 300,\r\n            \"sell total fee <= 30%\"\r\n        );\r\n        require(\r\n            _buyMarketingFee+(buyLiquidityFee)+(buyRewardFee) + buyTreasuryFee + buyBurnFee <= 300,\r\n            \"buy total fee <= 30%\"\r\n        );\r\n        require(_sellMarketingFee<= 150, \"sell fee <= 15%\");\r\n        require(_buyMarketingFee<= 150, \"buy fee <= 15%\");\r\n        emit UpdateMarketingFee(\r\n            _sellMarketingFee,\r\n            _buyMarketingFee,\r\n            sellMarketingFee,\r\n            buyMarketingFee\r\n        );\r\n        sellMarketingFee = _sellMarketingFee;\r\n        buyMarketingFee = _buyMarketingFee;        \r\n    }\r\n\r\n    function updateRewardFee(\r\n        uint16 _sellRewardFee,\r\n        uint16 _buyRewardFee\r\n    ) external onlyOwner {\r\n        require(\r\n            _sellRewardFee+(sellLiquidityFee)+(sellMarketingFee) + sellTreasuryFee + sellBurnFee <= 300,\r\n            \"sell total fee <= 30%\"\r\n        );\r\n        require(\r\n            _buyRewardFee+(buyLiquidityFee)+(buyMarketingFee) + buyTreasuryFee + buyBurnFee <= 300,\r\n            \"buy total fee <= 30%\"\r\n        );\r\n        require(_sellRewardFee<= 150, \"sell fee <= 15%\");\r\n        require(_buyRewardFee<= 150, \"buy fee <= 15%\");\r\n        emit UpdateRewardFee(\r\n            _sellRewardFee, \r\n            _buyRewardFee,\r\n            sellRewardFee, \r\n            buyRewardFee\r\n        );\r\n        sellRewardFee = _sellRewardFee;\r\n        buyRewardFee = _buyRewardFee;        \r\n    }\r\n\r\n    function updateTreasuryFee(\r\n        uint16 _sellTreasuryFee,\r\n        uint16 _buyTreasuryFee\r\n    ) external onlyOwner {\r\n        require(\r\n            _sellTreasuryFee+(sellLiquidityFee)+(sellMarketingFee) + sellRewardFee + sellBurnFee <= 300,\r\n            \"sell total fee <= 30%\"\r\n        );\r\n        require(\r\n            _buyTreasuryFee+(buyLiquidityFee)+(buyMarketingFee) + buyRewardFee + buyBurnFee <= 300,\r\n            \"buy total fee <= 30%\"\r\n        );\r\n        require(_sellTreasuryFee<= 150, \"sell fee <= 15%\");\r\n        require(_buyTreasuryFee<= 150, \"buy fee <= 15%\");\r\n        emit UpdateTreasuryFee(\r\n            _sellTreasuryFee, \r\n            _buyTreasuryFee,\r\n            sellTreasuryFee, \r\n            buyTreasuryFee\r\n        );\r\n        sellTreasuryFee = _sellTreasuryFee;\r\n        buyTreasuryFee = _buyTreasuryFee;        \r\n    }\r\n\r\n    function updateBurnFee(\r\n        uint16 _sellBurnFee,\r\n        uint16 _buyBurnFee\r\n    ) external onlyOwner {\r\n        require(\r\n            _sellBurnFee+(sellLiquidityFee)+(sellMarketingFee) + sellTreasuryFee + sellRewardFee <= 300,\r\n            \"sell total fee <= 30%\"\r\n        );\r\n        require(\r\n            _buyBurnFee+(buyLiquidityFee)+(buyMarketingFee) + buyTreasuryFee + buyRewardFee <= 300,\r\n            \"buy total fee <= 30%\"\r\n        );\r\n        require(_sellBurnFee<= 150, \"sell fee <= 15%\");\r\n        require(_buyBurnFee<= 150, \"buy fee <= 15%\");\r\n        emit UpdateBurnFee(\r\n            _sellBurnFee, \r\n            _buyBurnFee,\r\n            sellBurnFee, \r\n            buyBurnFee\r\n        );\r\n        sellBurnFee = _sellBurnFee;\r\n        buyBurnFee = _buyBurnFee;        \r\n    }\r\n\r\n    function updateMarketingWallet(\r\n        address _marketingWallet,\r\n        bool _isMarketingFeeBaseToken\r\n    ) external onlyOwner {\r\n        require(_marketingWallet != address(0), \"marketing wallet can't be 0\");\r\n        require(_marketingWallet != treasuryWallet, \"marketing wallet can't be same with Treasury wallet\");\r\n        emit UpdateMarketingWallet(_marketingWallet, _isMarketingFeeBaseToken,\r\n            marketingWallet, isMarketingFeeBaseToken);\r\n        marketingWallet = _marketingWallet;\r\n        isMarketingFeeBaseToken = _isMarketingFeeBaseToken;\r\n        isExcludedFromFee[_marketingWallet] = true;    \r\n        isExcludedFromMaxTransactionAmount[_marketingWallet]=true;    \r\n    }\r\n\r\n    function updateTreasuryWallet(\r\n        address _treasuryWallet\r\n    ) external onlyOwner {\r\n        require(_treasuryWallet != address(0), \"Treasury wallet can't be 0\");\r\n        require(_treasuryWallet != address(this), \"Treasury wallet can't be the same as token\");\r\n        require(marketingWallet != _treasuryWallet, \"marketing wallet can't be same with Treasury wallet\");\r\n        emit UpdateTreasuryWallet(_treasuryWallet,\r\n            treasuryWallet);\r\n        treasuryWallet = _treasuryWallet;\r\n        isExcludedFromFee[_treasuryWallet] = true;    \r\n        isExcludedFromMaxTransactionAmount[_treasuryWallet]=true;           \r\n    }\r\n\r\n    function updateMinAmountToTakeFee(uint256 _minAmountToTakeFee)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_minAmountToTakeFee > 0, \"minAmountToTakeFee > 0\");\r\n        emit UpdateMinAmountToTakeFee(_minAmountToTakeFee, minAmountToTakeFee);\r\n        minAmountToTakeFee = _minAmountToTakeFee;        \r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(\r\n            automatedMarketMakerPairs[pair] != value,\r\n            \"Automated market maker pair is already set to that value\"\r\n        );\r\n        automatedMarketMakerPairs[pair] = value;\r\n        if (value) excludeFromReward(pair);\r\n        else includeInReward(pair);\r\n        isExcludedFromMaxTransactionAmount[pair] = value;\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n\r\n    function excludeFromFee(address account, bool isEx) external onlyOwner {\r\n        require(isExcludedFromFee[account] != isEx, \"already\");\r\n        isExcludedFromFee[account] = isEx;\r\n        emit ExcludedFromFee(account, isEx);\r\n    }\r\n\r\n    function excludeFromMaxTransactionAmount(address account, bool isEx)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(isExcludedFromMaxTransactionAmount[account]!=isEx, \"already\");\r\n        isExcludedFromMaxTransactionAmount[account] = isEx;\r\n        emit ExcludedFromMaxTransactionAmount(account, isEx);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");       \r\n        if (!inSwapAndLiquify && antiBotEnabled && !isExcludedFromFee[from] && !isExcludedFromFee[to]) {\r\n            IGemAntiBot(gemAntiBot).onPreTransferCheck(from, to, amount);\r\n        }  \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >=\r\n            minAmountToTakeFee;\r\n\r\n        // Take Fee\r\n        if (\r\n            !inSwapAndLiquify &&\r\n            overMinimumTokenBalance &&\r\n            balanceOf(mainPair) > 0 &&\r\n            automatedMarketMakerPairs[to]\r\n        ) {\r\n            takeFee();\r\n        }\r\n        removeAllFee();\r\n\r\n        // If any account belongs to isExcludedFromFee account then remove the fee\r\n        if (\r\n            !inSwapAndLiquify &&\r\n            !isExcludedFromFee[from] &&\r\n            !isExcludedFromFee[to]\r\n        ) {\r\n            // Buy\r\n            if (automatedMarketMakerPairs[from]) {\r\n                _rewardFee = buyRewardFee;\r\n                _liquidityFee = buyLiquidityFee;\r\n                _marketingFee = buyMarketingFee;\r\n                _treasuryFee = buyTreasuryFee;\r\n                _burnFee = buyBurnFee;\r\n            }\r\n            // Sell\r\n            else if (automatedMarketMakerPairs[to]) {\r\n                _rewardFee = sellRewardFee;\r\n                _liquidityFee = sellLiquidityFee;\r\n                _marketingFee = sellMarketingFee;\r\n                _treasuryFee = sellTreasuryFee;\r\n                _burnFee = sellBurnFee;\r\n            }\r\n        }\r\n        _tokenTransfer(from, to, amount);\r\n        restoreAllFee();\r\n        if (!inSwapAndLiquify) {\r\n            if (!isExcludedFromMaxTransactionAmount[from]) {\r\n                require(\r\n                    amount < maxTransactionAmount,\r\n                    \"ERC20: exceeds transfer limit\"\r\n                );\r\n            }\r\n            if (!isExcludedFromMaxTransactionAmount[to]) {\r\n                require(\r\n                    balanceOf(to) < maxWallet,\r\n                    \"ERC20: exceeds max wallet limit\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function takeFee() private lockTheSwap {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensTaken = _liquidityFeeTokens + _marketingFeeTokens + _treasuryFeeTokens;\r\n        if (totalTokensTaken == 0 || contractBalance < totalTokensTaken) {\r\n            return;\r\n        }\r\n\r\n        // Halve the amount of liquidity tokens\r\n        uint256 tokensForLiquidity = _liquidityFeeTokens / 2;\r\n        uint256 initialBaseTokenBalance = baseTokenForPair==mainRouter.WETH() ? address(this).balance\r\n            : IERC20(baseTokenForPair).balanceOf(address(this));\r\n        uint256 baseTokenForLiquidity;\r\n        uint256 baseTokenForTreasury;\r\n        if (isMarketingFeeBaseToken) {\r\n            uint256 tokensForSwap=tokensForLiquidity+_marketingFeeTokens + _treasuryFeeTokens;\r\n            if(tokensForSwap>0)\r\n                swapTokensForBaseToken(tokensForSwap);\r\n            uint256 baseTokenBalance = baseTokenForPair==mainRouter.WETH() ? address(this).balance-initialBaseTokenBalance\r\n                : IERC20(baseTokenForPair).balanceOf(address(this))-initialBaseTokenBalance;\r\n            uint256 baseTokenForMarketing = baseTokenBalance*_marketingFeeTokens/tokensForSwap;\r\n            baseTokenForLiquidity = baseTokenBalance*tokensForLiquidity/tokensForSwap;\r\n            baseTokenForTreasury = baseTokenBalance - baseTokenForMarketing - baseTokenForLiquidity;\r\n            if(baseTokenForMarketing>0){\r\n                if(baseTokenForPair==mainRouter.WETH()){\r\n                    (bool success, )=address(marketingWallet).call{value: baseTokenForMarketing}(\"\");\r\n                    if(success){\r\n                        emit MarketingFeeTaken(0, baseTokenForMarketing);\r\n                    }\r\n                }else{\r\n                    IERC20(baseTokenForPair).safeTransfer(marketingWallet, baseTokenForMarketing);\r\n                    emit MarketingFeeTaken(0, baseTokenForMarketing);\r\n                }       \r\n            }            \r\n        } else {\r\n            uint256 tokensForSwap=tokensForLiquidity + _treasuryFeeTokens;\r\n            if(tokensForSwap>0)\r\n                swapTokensForBaseToken(tokensForSwap);\r\n            uint256 baseTokenBalance = baseTokenForPair==mainRouter.WETH() ? address(this).balance-initialBaseTokenBalance\r\n                : IERC20(baseTokenForPair).balanceOf(address(this))-initialBaseTokenBalance;\r\n            baseTokenForLiquidity = baseTokenBalance*tokensForLiquidity/tokensForSwap;\r\n            baseTokenForTreasury = baseTokenBalance - baseTokenForLiquidity;\r\n            \r\n            if(_marketingFeeTokens>0){\r\n                _transfer(address(this), marketingWallet, _marketingFeeTokens);\r\n                emit MarketingFeeTaken(_marketingFeeTokens, 0);\r\n            }            \r\n        }\r\n\r\n        if (tokensForLiquidity > 0 && baseTokenForLiquidity > 0) {\r\n            addLiquidity(tokensForLiquidity, baseTokenForLiquidity);\r\n            emit SwapAndLiquify(tokensForLiquidity, baseTokenForLiquidity);\r\n        }\r\n        if(baseTokenForTreasury>0){\r\n            if(baseTokenForPair==mainRouter.WETH()){\r\n                (bool success, )=address(treasuryWallet).call{value: baseTokenForTreasury}(\"\");\r\n                if(success){\r\n                    emit TreasuryFeeTaken(baseTokenForTreasury);\r\n                }\r\n            }else{\r\n                IERC20(baseTokenForPair).safeTransfer(treasuryWallet, baseTokenForTreasury);\r\n                emit TreasuryFeeTaken(baseTokenForTreasury);\r\n            }       \r\n        }\r\n        _marketingFeeTokens = 0;\r\n        _treasuryFeeTokens = 0;\r\n        _liquidityFeeTokens = 0;\r\n        if(owner()!=address(0))\r\n            _transfer(address(this), owner(), balanceOf(address(this)));  \r\n        else\r\n            _transfer(address(this), treasuryWallet, balanceOf(address(this)));   \r\n    }\r\n    \r\n    function swapTokensForBaseToken(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = baseTokenForPair;\r\n        if (path[1] == mainRouter.WETH()){\r\n            mainRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0, // accept any amount of BaseToken\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }else{\r\n            uniswapV2Caller.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    address(mainRouter),\r\n                    tokenAmount,\r\n                    0, // accept any amount of BaseToken\r\n                    path,\r\n                    block.timestamp\r\n                );\r\n        }\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 baseTokenAmount) private {  \r\n        if (baseTokenForPair == mainRouter.WETH()) \r\n            mainRouter.addLiquidityETH{value: baseTokenAmount}(\r\n                address(this),\r\n                tokenAmount,\r\n                0, // slippage is unavoidable\r\n                0, // slippage is unavoidable\r\n                address(0xdead),\r\n                block.timestamp\r\n            );\r\n        else\r\n            mainRouter.addLiquidity(\r\n                address(this),\r\n                baseTokenForPair,\r\n                tokenAmount,\r\n                baseTokenAmount,\r\n                0,\r\n                0,\r\n                address(0xdead),\r\n                block.timestamp\r\n            );\r\n    }\r\n    function treasuryBurn() payable external{\r\n        address[] memory path = new address[](2);\r\n        path[0] = baseTokenForPair;\r\n        path[1] = address(this);\r\n        \r\n        if (path[0] == mainRouter.WETH()){\r\n            mainRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value:msg.value}(\r\n                0, // accept any amount of BaseToken\r\n                path,\r\n                treasuryWallet,\r\n                block.timestamp\r\n            );\r\n        }else{\r\n            uint256 amount = IERC20(baseTokenForPair).balanceOf(_msgSender());\r\n            IERC20(baseTokenForPair).safeTransferFrom(_msgSender(), address(this), amount);\r\n            mainRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                amount,\r\n                0, // accept any amount of BaseToken\r\n                path,\r\n                treasuryWallet,\r\n                block.timestamp\r\n            );\r\n        }      \r\n        {\r\n            //burn\r\n            if(_isExcluded[treasuryWallet]){\r\n                _tTotal = _tTotal - _tOwned[treasuryWallet];\r\n                _rTotal = _rTotal - _rOwned[treasuryWallet];\r\n                emit Transfer(treasuryWallet, address(0), _tOwned[treasuryWallet]);\r\n                _rOwned[treasuryWallet] = 0;\r\n                _tOwned[treasuryWallet] = 0;      \r\n            }else{\r\n                uint256 _tBurn = tokenFromReflection(_rOwned[treasuryWallet]);\r\n                _tTotal = _tTotal - _tBurn;\r\n                _rTotal = _rTotal - _rOwned[treasuryWallet];\r\n                emit Transfer(treasuryWallet, address(0), _tBurn);\r\n                _rOwned[treasuryWallet] = 0;\r\n                _tOwned[treasuryWallet] = 0;  \r\n            }        \r\n        }\r\n    }\r\n    function withdrawETH() external onlyOwner {\r\n        (bool success, )=address(owner()).call{value: address(this).balance}(\"\");\r\n        require(success, \"Failed in withdrawal\");\r\n    }\r\n    function withdrawToken(address token) external onlyOwner{\r\n        require(address(this) != token, \"Not allowed\");\r\n        IERC20(token).safeTransfer(owner(), IERC20(token).balanceOf(address(this)));\r\n    }\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"__decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTransactionAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[5]\",\"name\":\"_accounts\",\"type\":\"address[5]\"},{\"internalType\":\"bool\",\"name\":\"_isMarketingFeeBaseToken\",\"type\":\"bool\"},{\"internalType\":\"uint16[10]\",\"name\":\"_fees\",\"type\":\"uint16[10]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludedFromMaxTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFeeTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFeeBaseTokenSwapped\",\"type\":\"uint256\"}],\"name\":\"MarketingFeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensForLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenForLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TreasuryFeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newSellBurnFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newBuyBurnFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldSellBurnFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldBuyBurnFee\",\"type\":\"uint16\"}],\"name\":\"UpdateBurnFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newSellLiquidityFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newBuyLiquidityFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldSellLiquidityFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldBuyLiquidityFee\",\"type\":\"uint16\"}],\"name\":\"UpdateLiquidityFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newSellMarketingFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newBuyMarketingFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldSellMarketingFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldBuyMarketingFee\",\"type\":\"uint16\"}],\"name\":\"UpdateMarketingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newIsMarketingFeeBaseToken\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldIsMarketingFeeBaseToken\",\"type\":\"bool\"}],\"name\":\"UpdateMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTransactionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTransactionAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxWallet\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinAmountToTakeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinAmountToTakeFee\",\"type\":\"uint256\"}],\"name\":\"UpdateMinAmountToTakeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newSellRewardFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newBuyRewardFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldSellRewardFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldBuyRewardFee\",\"type\":\"uint16\"}],\"name\":\"UpdateRewardFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newSellTreasuryFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newBuyTreasuryFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldSellTreasuryFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldBuyTreasuryFee\",\"type\":\"uint16\"}],\"name\":\"UpdateTreasuryFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTreasuryWallet\",\"type\":\"address\"}],\"name\":\"UpdateTreasuryWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenForPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBurnFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRewardFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTreasuryFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeContract\",\"outputs\":[{\"internalType\":\"contract IFee\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemAntiBot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMarketingFeeBaseToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToTakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRewardFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTreasuryFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled_\",\"type\":\"bool\"}],\"name\":\"setUsingAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryBurn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Caller\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Caller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sellBurnFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyBurnFee\",\"type\":\"uint16\"}],\"name\":\"updateBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyLiquidityFee\",\"type\":\"uint16\"}],\"name\":\"updateLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sellMarketingFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyMarketingFee\",\"type\":\"uint16\"}],\"name\":\"updateMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isMarketingFeeBaseToken\",\"type\":\"bool\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTransactionAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmountToTakeFee\",\"type\":\"uint256\"}],\"name\":\"updateMinAmountToTakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sellRewardFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyRewardFee\",\"type\":\"uint16\"}],\"name\":\"updateRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sellTreasuryFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyTreasuryFee\",\"type\":\"uint16\"}],\"name\":\"updateTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"updateTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseTokenForPair\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UltimateTokenWithAntibot", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000d1024ab8fb5cdcfb575efa123a8c2dd54b7b17e90000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000090e8ac725f8447aa13715f4e3fd38984cde8c47a0000000000000000000000005d73f4b0d6e65323af1955c5f7ceb9a8fa2f3d8e000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006426172626965000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d49440000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b7488a7385de18f75efb37a1ea8f2941950cf049256e05dce26f2ac80ed04935"}