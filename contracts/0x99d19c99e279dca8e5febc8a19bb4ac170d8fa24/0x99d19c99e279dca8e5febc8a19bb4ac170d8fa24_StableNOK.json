{"SourceCode": "{\"IERC20.sol\":{\"content\":\"pragma solidity 0.7.2;\\r\\n// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"StableNOK.sol\":{\"content\":\"pragma solidity 0.7.2;\\r\\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n//\\r\\n// Author: Bitnord\\r\\n// Website: https://bitnord.no\\r\\n//\\r\\n//===========================================================================================================\\r\\nimport \\\"IERC20.sol\\\";\\r\\n//===========================================================================================================\\r\\n/**\\r\\n * StableNOK ERC20 token contract\\r\\n * \\r\\n * \\r\\n */\\r\\ncontract StableNOK {\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n   * Global contract variables\\r\\n   * \\r\\n   */\\r\\n  address public admin;\\r\\n  mapping (address =\\u003e uint256) private balances;\\r\\n  mapping (address =\\u003e uint256) private frozen;\\r\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) private allowances;\\r\\n  string  public name;\\r\\n  string  public symbol;\\r\\n  uint8   public decimals;\\r\\n  uint256 public totalSupply;\\r\\n  bool    public paused = false;\\r\\n  uint256 public constant MAX_UINT = 2**256 - 1;\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n   * Contract events\\r\\n   * \\r\\n   */\\r\\n  event Transfer(address indexed _from,   address indexed _to,      uint256 _value);\\r\\n  event Approval(address indexed _owner,  address indexed _spender, uint256 _value);\\r\\n  event Paused();\\r\\n  event Unpaused();\\r\\n  event AdminPowersTransferred(address  indexed _previousAdmin, address indexed _newAdmin);\\r\\n  event AdminPowersRenounced(address    indexed _previousAdmin);\\r\\n  event FundsFrozen(address indexed _account, uint256 _amount);\\r\\n  event FundsUnFrozen(address indexed _account, uint256 _amount);\\r\\n  event FrozenFundsBurned(address indexed _account, uint256 _amount);\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Contract constructor\\r\\n  * \\r\\n  */\\r\\n  constructor() {\\r\\n    admin = msg.sender;\\r\\n    name = \\\"Stable NOK\\\";\\r\\n    symbol = \\\"NOK\\\";\\r\\n    decimals = 2;\\r\\n    totalSupply = 1000;\\r\\n    balances[admin] = totalSupply;\\r\\n    emit Transfer(address(0), admin, totalSupply);\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * ERC20 transfer function\\r\\n  * \\r\\n  */\\r\\n  function transfer(address _to, uint256 _value) public returns (bool success) {\\r\\n    require(!paused);\\r\\n    require(_to != address(0));\\r\\n    require(balances[msg.sender] \\u003e= _value);\\r\\n    balances[msg.sender] -= _value;\\r\\n    balances[_to] += _value;\\r\\n    emit Transfer(msg.sender, _to, _value);\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * ERC20 transferFrom function\\r\\n  * \\r\\n  */\\r\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\r\\n    require(!paused);\\r\\n    require(_from != address(0));\\r\\n    require(_to != address(0));\\r\\n    require(balances[_from] \\u003e= _value);\\r\\n    require(allowances[_from][msg.sender] \\u003e= _value);\\r\\n    balances[_to] += _value;\\r\\n    balances[_from] -= _value;\\r\\n    if(allowances[_from][msg.sender] != MAX_UINT) { // Allow for infinite allowance\\r\\n      allowances[_from][msg.sender] -= _value;\\r\\n    }\\r\\n    emit Transfer(_from, _to, _value);\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * ERC20 approve function\\r\\n  * \\r\\n  */\\r\\n  function approve(address _spender, uint256 _value) public returns (bool success) {\\r\\n    require(!paused);\\r\\n    require(_spender != address(0));\\r\\n    allowances[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * ERC20 allowance function\\r\\n  * \\r\\n  */\\r\\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\\r\\n    return allowances[_owner][_spender];\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * ERC20 balanceOf function\\r\\n  * \\r\\n  */\\r\\n  function balanceOf(address _owner) public view returns (uint256 balance) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Non-standard ERC20 safeApprove function\\r\\n  * Added as alternative approval management functions to avoid known front-running attacks.\\r\\n  * More info: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM\\r\\n  * \\r\\n  */\\r\\n  function safeApprove(address _spender, uint256 _value, uint256 _expectedAllowance) public returns (bool success) {\\r\\n    require(!paused);\\r\\n    require(_spender != address(0));\\r\\n    require(allowances[msg.sender][_spender] == _expectedAllowance);\\r\\n    allowances[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Non-standard ERC20 increaseApproval function\\r\\n  * Added as alternative approval management functions to avoid known front-running attacks.\\r\\n  * More info: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM\\r\\n  * \\r\\n  */\\r\\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\\r\\n    require(!paused);\\r\\n    require(_spender != address(0));\\r\\n    require((allowances[msg.sender][_spender] + _addedValue) \\u003e= allowances[msg.sender][_spender]);\\r\\n    allowances[msg.sender][_spender] += _addedValue;\\r\\n    emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Non-standard ERC20 decreaseApproval function\\r\\n  * Added as alternative approval management functions to avoid known front-running attacks.\\r\\n  * More info: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM\\r\\n  * \\r\\n  */\\r\\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\\r\\n    require(!paused);\\r\\n    require(_spender != address(0));\\r\\n    if(_subtractedValue \\u003e allowances[msg.sender][_spender]) {\\r\\n      allowances[msg.sender][_spender] = 0;\\r\\n    } else {\\r\\n      allowances[msg.sender][_spender] = allowances[msg.sender][_spender] - _subtractedValue;\\r\\n    }\\r\\n    emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Non-standard ERC20 mint function\\r\\n  * \\r\\n  */\\r\\n  function mint(address _account, uint256 _amount) public returns (bool success) {\\r\\n    require(msg.sender == admin);\\r\\n    totalSupply += _amount;\\r\\n    balances[_account] += _amount;\\r\\n    emit Transfer(address(0), _account, _amount);\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Non-standard ERC20 burn function\\r\\n  * \\r\\n  */\\r\\n  function burn(address _account, uint256 _amount) public returns (bool success) {\\r\\n    require(msg.sender == admin);\\r\\n    require(balances[_account] \\u003e= _amount);\\r\\n    totalSupply -= _amount;\\r\\n    balances[_account] -= _amount;\\r\\n    emit Transfer(_account, address(0), _amount);\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Non-standard ERC20 pause function\\r\\n  * \\r\\n  */\\r\\n  function pause() public returns (bool success) {\\r\\n    require(msg.sender == admin);\\r\\n    paused = true;\\r\\n    emit Paused();\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Non-standard ERC20 unpause function\\r\\n  * \\r\\n  */\\r\\n  function unpause() public returns (bool success) {\\r\\n    require(msg.sender == admin);\\r\\n    paused = false;\\r\\n    emit Unpaused();\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Non-standard ERC20 transferAdminPowers function\\r\\n  * \\r\\n  */\\r\\n  function transferAdminPowers(address _newAdmin) public returns (bool success) {\\r\\n    require(msg.sender == admin);\\r\\n    require(_newAdmin != address(0));\\r\\n    admin = _newAdmin;\\r\\n    emit AdminPowersTransferred(admin, _newAdmin);\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Non-standard ERC20 renounceAdminPowers function\\r\\n  * \\r\\n  */\\r\\n  function renounceAdminPowers() public returns (bool success) {\\r\\n    require(msg.sender == admin);\\r\\n    admin = address(0);\\r\\n    emit AdminPowersRenounced(admin);\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Non-standard ERC20 freeze function\\r\\n  * \\r\\n  */\\r\\n  function freeze(address _account, uint256 _amount) public returns (bool success) {\\r\\n    require(msg.sender == admin);\\r\\n    require(balances[_account] \\u003e= _amount);\\r\\n    balances[_account] -=_amount;\\r\\n    frozen[_account] += _amount;\\r\\n    emit FundsFrozen(_account, _amount);\\r\\n    emit Transfer(_account, address(0), _amount);\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Non-standard ERC20 unFreeze function\\r\\n  * \\r\\n  */\\r\\n  function unFreeze(address _account, uint256 _amount) public returns (bool success) {\\r\\n    require(msg.sender == admin);\\r\\n    require(frozen[_account] \\u003e= _amount);\\r\\n    frozen[_account] -= _amount;\\r\\n    balances[_account] += _amount;\\r\\n    emit FundsUnFrozen(_account, _amount);\\r\\n    emit Transfer(address(0), _account, _amount);\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Non-standard ERC20 burnFrozen function\\r\\n  * \\r\\n  */\\r\\n  function burnFrozen(address _account, uint256 _amount) public returns (bool success) {\\r\\n    require(msg.sender == admin);\\r\\n    require(frozen[_account] \\u003e= _amount);\\r\\n    totalSupply -= _amount;\\r\\n    frozen[_account] -= _amount;\\r\\n    emit FrozenFundsBurned(_account, _amount);\\r\\n    return true;\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Non-standard ERC20 recoverERC20 function\\r\\n  * Used to recover wrongly sent ERC20 tokens to the contract\\r\\n  * \\r\\n  */\\r\\n  function recoverERC20(address tokenAddress, uint256 tokenAmount) public returns (bool success) {\\r\\n    require(msg.sender == admin);\\r\\n    return IERC20(tokenAddress).transfer(admin, tokenAmount);\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n  /**\\r\\n  * Non-standard ERC20 receive function\\r\\n  * Disallows Ether transactions to the contract address\\r\\n  * \\r\\n  */\\r\\n  receive() external payable {\\r\\n    revert();\\r\\n  }\\r\\n  //-------------------------------------------------------------------------------------------------------\\r\\n\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminPowersRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"AdminPowersTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FrozenFundsBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FundsFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FundsUnFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceAdminPowers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedAllowance\",\"type\":\"uint256\"}],\"name\":\"safeApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminPowers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unFreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StableNOK", "CompilerVersion": "v0.7.2+commit.51b20bc0", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6309a7a36317fff6bd551f4f0bf7be6f9cec44e791d60508db5a5aac96eba53a"}