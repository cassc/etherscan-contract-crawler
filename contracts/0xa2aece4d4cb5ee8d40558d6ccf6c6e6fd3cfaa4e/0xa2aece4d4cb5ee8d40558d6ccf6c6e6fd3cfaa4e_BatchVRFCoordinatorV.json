{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/v0.8/dev/vrf/BatchVRFCoordinatorV2Plus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../../vrf/VRFTypes.sol\\\";\\n\\n/**\\n * @title BatchVRFCoordinatorV2Plus\\n * @notice The BatchVRFCoordinatorV2Plus contract acts as a proxy to write many random responses to the\\n * @notice provided VRFCoordinatorV2Plus contract efficiently in a single transaction.\\n */\\ncontract BatchVRFCoordinatorV2Plus {\\n  IVRFCoordinatorV2Plus public immutable COORDINATOR;\\n\\n  event ErrorReturned(uint256 indexed requestId, string reason);\\n  event RawErrorReturned(uint256 indexed requestId, bytes lowLevelData);\\n\\n  constructor(address coordinatorAddr) {\\n    COORDINATOR = IVRFCoordinatorV2Plus(coordinatorAddr);\\n  }\\n\\n  /**\\n   * @notice fulfills multiple randomness requests with the provided proofs and commitments.\\n   * @param proofs the randomness proofs generated by the VRF provider.\\n   * @param rcs the request commitments corresponding to the randomness proofs.\\n   */\\n  function fulfillRandomWords(VRFTypes.Proof[] memory proofs, VRFTypes.RequestCommitmentV2Plus[] memory rcs) external {\\n    require(proofs.length == rcs.length, \\\"input array arg lengths mismatch\\\");\\n    for (uint256 i = 0; i < proofs.length; i++) {\\n      try COORDINATOR.fulfillRandomWords(proofs[i], rcs[i]) returns (uint96 /* payment */) {\\n        continue;\\n      } catch Error(string memory reason) {\\n        uint256 requestId = getRequestIdFromProof(proofs[i]);\\n        emit ErrorReturned(requestId, reason);\\n      } catch (bytes memory lowLevelData) {\\n        uint256 requestId = getRequestIdFromProof(proofs[i]);\\n        emit RawErrorReturned(requestId, lowLevelData);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the proving key hash associated with this public key.\\n   * @param publicKey the key to return the hash of.\\n   */\\n  function hashOfKey(uint256[2] memory publicKey) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(publicKey));\\n  }\\n\\n  /**\\n   * @notice Returns the request ID of the request associated with the given proof.\\n   * @param proof the VRF proof provided by the VRF oracle.\\n   */\\n  function getRequestIdFromProof(VRFTypes.Proof memory proof) internal pure returns (uint256) {\\n    bytes32 keyHash = hashOfKey(proof.pk);\\n    return uint256(keccak256(abi.encode(keyHash, proof.seed)));\\n  }\\n}\\n\\ninterface IVRFCoordinatorV2Plus {\\n  function fulfillRandomWords(\\n    VRFTypes.Proof memory proof,\\n    VRFTypes.RequestCommitmentV2Plus memory rc\\n  ) external returns (uint96);\\n}\\n\"\r\n    },\r\n    \"src/v0.8/vrf/VRFTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n/**\\n * @title VRFTypes\\n * @notice The VRFTypes library is a collection of types that is required to fulfill VRF requests\\n * \\ton-chain. They must be ABI-compatible with the types used by the coordinator contracts.\\n */\\nlibrary VRFTypes {\\n  // ABI-compatible with VRF.Proof.\\n  // This proof is used for VRF V2 and V2Plus.\\n  struct Proof {\\n    uint256[2] pk;\\n    uint256[2] gamma;\\n    uint256 c;\\n    uint256 s;\\n    uint256 seed;\\n    address uWitness;\\n    uint256[2] cGammaWitness;\\n    uint256[2] sHashWitness;\\n    uint256 zInv;\\n  }\\n\\n  // ABI-compatible with VRFCoordinatorV2.RequestCommitment.\\n  // This is only used for VRF V2.\\n  struct RequestCommitment {\\n    uint64 blockNum;\\n    uint64 subId;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    address sender;\\n  }\\n\\n  // ABI-compatible with VRFCoordinatorV2Plus.RequestCommitment.\\n  // This is only used for VRF V2Plus.\\n  struct RequestCommitmentV2Plus {\\n    uint64 blockNum;\\n    uint256 subId;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    address sender;\\n    bytes extraArgs;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coordinatorAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"ErrorReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lowLevelData\",\"type\":\"bytes\"}],\"name\":\"RawErrorReturned\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2Plus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"pk\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"gamma\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uWitness\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"cGammaWitness\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"sHashWitness\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"zInv\",\"type\":\"uint256\"}],\"internalType\":\"struct VRFTypes.Proof[]\",\"name\":\"proofs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"internalType\":\"struct VRFTypes.RequestCommitmentV2Plus[]\",\"name\":\"rcs\",\"type\":\"tuple[]\"}],\"name\":\"fulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BatchVRFCoordinatorV2Plus", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000ba7148d83cde37ae1cdc23e5eceef5ad7aced9e6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}