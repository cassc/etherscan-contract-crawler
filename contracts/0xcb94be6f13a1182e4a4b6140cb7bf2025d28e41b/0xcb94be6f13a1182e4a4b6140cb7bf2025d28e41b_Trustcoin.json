{"SourceCode": "/**\r\n *  TRST Trustcoin contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\r\n *\r\n *  Code is based on multiple sources:\r\n *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20.sol\r\n *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts/StandardToken.sol\r\n *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts/HumanStandardToken.sol\r\n */\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\n// Based on https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts/Token.sol\r\npragma solidity 0.4.8;\r\n\r\ncontract ERC20TokenInterface {\r\n\r\n    /// @return The total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply);\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant public returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Trustcoin is ERC20TokenInterface {\r\n\r\n  //// Constants ////\r\n  string public constant name = 'Trustcoin';\r\n  uint256 public constant decimals = 6;\r\n  string public constant symbol = 'TRST';\r\n  string public constant version = 'TRST1.0';\r\n\r\n  // One hundred million coins, each divided to up to 10^decimals units.\r\n  uint256 private constant totalTokens = 100000000 * (10 ** decimals);\r\n\r\n  mapping (address => uint256) public balances; // (ERC20)\r\n  // A mapping from an account owner to a map from approved spender to their allowances.\r\n  // (see ERC20 for details about allowances).\r\n  mapping (address => mapping (address => uint256)) public allowed; // (ERC20)\r\n\r\n  //// Events ////\r\n  event MigrationInfoSet(string newMigrationInfo);\r\n\r\n  // This is to be used when migration to a new contract starts.\r\n  // This string can be used for any authorative information re the migration\r\n  // (e.g. address to use for migration, or URL to explain where to find more info)\r\n  string public migrationInfo = \"\";\r\n\r\n  // The only address that can set migrationContractAddress, a secure multisig.\r\n  address public migrationInfoSetter;\r\n\r\n  //// Modifiers ////\r\n  modifier onlyFromMigrationInfoSetter {\r\n    if (msg.sender != migrationInfoSetter) {\r\n      throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  //// Public functions ////\r\n  function Trustcoin(address _migrationInfoSetter) {\r\n    if (_migrationInfoSetter == 0) throw;\r\n    migrationInfoSetter = _migrationInfoSetter;\r\n    // Upon creation, all tokens belong to the deployer.\r\n    balances[msg.sender] = totalTokens;\r\n  }\r\n\r\n  // See ERC20\r\n  function totalSupply() constant returns (uint256) {\r\n    return totalTokens;\r\n  }\r\n\r\n  // See ERC20\r\n  // WARNING: If you call this with the address of a contract, the contract will receive the\r\n  // funds, but will have no idea where they came from. Furthermore, if the contract is\r\n  // not aware of TRST, the tokens will remain locked away in the contract forever.\r\n  // It is always recommended to call instead compareAndApprove() (or approve()) and have the\r\n  // receiving contract withdraw the money using transferFrom().\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    if (balances[msg.sender] >= _value) {\r\n      balances[msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // See ERC20\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {\r\n      balances[_from] -= _value;\r\n      allowed[_from][msg.sender] -= _value;\r\n      balances[_to] += _value;\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // See ERC20\r\n  function balanceOf(address _owner) constant public returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  // See ERC20\r\n  // NOTE: this method is vulnerable and is placed here only to follow the ERC20 standard.\r\n  // Before using, please take a look at the better compareAndApprove below.\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  // A vulernability of the approve method in the ERC20 standard was identified by\r\n  // Mikhail Vladimirov and Dmitry Khovratovich here:\r\n  // https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM\r\n  // It's better to use this method which is not susceptible to over-withdrawing by the approvee.\r\n  /// @param _spender The address to approve\r\n  /// @param _currentValue The previous value approved, which can be retrieved with allowance(msg.sender, _spender)\r\n  /// @param _newValue The new value to approve, this will replace the _currentValue\r\n  /// @return bool Whether the approval was a success (see ERC20's `approve`)\r\n  function compareAndApprove(address _spender, uint256 _currentValue, uint256 _newValue) public returns(bool) {\r\n    if (allowed[msg.sender][_spender] != _currentValue) {\r\n      return false;\r\n    }\r\n    return approve(_spender, _newValue);\r\n  }\r\n\r\n  // See ERC20\r\n  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  // Allows setting a descriptive string, which will aid any users in migrating their token\r\n  // to a newer version of the contract. This field provides a kind of 'double-layer' of\r\n  // authentication for any migration announcement, as it can only be set by WeTrust.\r\n  /// @param _migrationInfo The information string to be stored on the contract\r\n  function setMigrationInfo(string _migrationInfo) onlyFromMigrationInfoSetter public {\r\n    migrationInfo = _migrationInfo;\r\n    MigrationInfoSet(_migrationInfo);\r\n  }\r\n\r\n  // To be used if the migrationInfoSetter wishes to transfer the migrationInfoSetter\r\n  // permission to a new account, e.g. because of change in personnel, a concern that account\r\n  // may have been compromised etc.\r\n  /// @param _newMigrationInfoSetter The address of the new Migration Info Setter\r\n  function changeMigrationInfoSetter(address _newMigrationInfoSetter) onlyFromMigrationInfoSetter public {\r\n    migrationInfoSetter = _newMigrationInfoSetter;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMigrationInfoSetter\",\"type\":\"address\"}],\"name\":\"changeMigrationInfoSetter\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationInfoSetter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"compareAndApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_migrationInfo\",\"type\":\"string\"}],\"name\":\"setMigrationInfo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_migrationInfoSetter\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newMigrationInfo\",\"type\":\"string\"}],\"name\":\"MigrationInfoSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "Trustcoin", "CompilerVersion": "v0.4.8+commit.60cc1668", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000094D99A91f55259Ed93503f8711E79D71E6e913E2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://489dd7d5cf36a9167f27c4b5fc1de716a507db014dc96c3449957480bccff801"}