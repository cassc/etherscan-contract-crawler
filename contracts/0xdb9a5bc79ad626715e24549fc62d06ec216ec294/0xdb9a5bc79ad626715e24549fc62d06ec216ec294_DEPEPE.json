{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/depepe.sol\": {\r\n      \"content\": \"/**\\r\\n\\r\\nhttps://deflationarypepe.com\\r\\nhttps://t.me/DeflationaryPepe\\r\\nhttps://twitter.com/DEPEPEerc\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address UNISWAP_V2_PAIR);\\r\\n}\\r\\n\\r\\ncontract DEPEPE is IERC20, Ownable {\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                   events                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    event Reflect(uint256 amountReflected, uint256 newTotalProportion);\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                  constants                                 */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\\r\\n\\r\\n    uint256 constant MAX_FEE = 10;\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                   states                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\\r\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n    address public immutable UNISWAP_V2_PAIR;\\r\\n    mapping(address => bool) public automatedMarketMakerPairs;\\r\\n\\r\\n    struct Fee {\\r\\n        uint8 reflection;\\r\\n        uint8 marketing;\\r\\n        uint8 lp;\\r\\n        uint8 buyback;\\r\\n        uint8 burn;\\r\\n        uint128 total;\\r\\n    }\\r\\n\\r\\n    string _name = \\\"Deflationary Pepe\\\";\\r\\n    string _symbol = \\\"DEPEPE\\\";\\r\\n\\r\\n    uint256 _totalSupply = 1_000_000_000 ether;\\r\\n    uint256 public _maxTxAmount = _totalSupply * 1 / 100;\\r\\n    uint256 public _maxWalletAmount = _totalSupply * 2 / 100;\\r\\n\\r\\n    /* rOwned = ratio of tokens owned relative to circulating supply (NOT total supply, since circulating <= total) */\\r\\n    mapping(address => uint256) public _rOwned;\\r\\n    uint256 public _totalProportion = _totalSupply;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) _allowances;\\r\\n\\r\\n    bool public tradingActive = false;\\r\\n    bool public transferDelayEnabled = false;\\r\\n    bool public limitsEnabled = true;\\r\\n    mapping(address => bool) isFeeExempt;\\r\\n    mapping(address => bool) isLimitExempt;\\r\\n\\r\\n    Fee public buyFee = Fee({reflection: 0, marketing: 25, lp: 0, buyback: 0, burn: 0, total: 25}); // launch taxes only final tax will be 5%\\r\\n    Fee public sellFee = Fee({reflection: 0, marketing: 35, lp: 0, buyback: 0, burn: 0, total: 35});\\r\\n\\r\\n    address private marketingFeeReceiver;\\r\\n    address private lpFeeReceiver;\\r\\n    address private buybackFeeReceiver;\\r\\n\\r\\n    bool public claimingFees = false;\\r\\n    uint256 public swapThreshold = (_totalSupply * 4) / 1000;\\r\\n    bool inSwap;\\r\\n    mapping(address => bool) public blacklists;\\r\\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                  modifiers                                 */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    modifier swapping() {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                 constructor                                */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    constructor() {\\r\\n        // create uniswap pair\\r\\n        address _uniswapPair =\\r\\n            IUniswapV2Factory(UNISWAP_V2_ROUTER.factory()).createPair(address(this), UNISWAP_V2_ROUTER.WETH());\\r\\n        UNISWAP_V2_PAIR = _uniswapPair;\\r\\n        _setAutomatedMarketMakerPair(address(_uniswapPair), true);\\r\\n\\r\\n        _allowances[address(this)][address(UNISWAP_V2_ROUTER)] = type(uint256).max;\\r\\n        _allowances[address(this)][owner()] = type(uint256).max;\\r\\n\\r\\n        isLimitExempt[address(this)] = true;\\r\\n        isLimitExempt[DEAD] = true;\\r\\n        isLimitExempt[owner()] = true;\\r\\n        isLimitExempt[UNISWAP_V2_PAIR] = true;\\r\\n        \\r\\n        isFeeExempt[address(this)] = true;\\r\\n        isFeeExempt[DEAD] = true;\\r\\n        isFeeExempt[owner()] = true;\\r\\n\\r\\n        marketingFeeReceiver = 0x4053Da507C4AF72A655D6658b9EeEd113084465A;\\r\\n        lpFeeReceiver = 0x4053Da507C4AF72A655D6658b9EeEd113084465A;\\r\\n        buybackFeeReceiver = 0x4053Da507C4AF72A655D6658b9EeEd113084465A;\\r\\n\\r\\n        _rOwned[tx.origin] = _totalSupply;\\r\\n        emit Transfer(address(0), tx.origin, _totalSupply);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                    ERC20                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approveMax(address spender) external returns (bool) {\\r\\n        return approve(spender, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        return _transferFrom(msg.sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\\r\\n            require(_allowances[sender][msg.sender] >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\\r\\n        }\\r\\n\\r\\n        return _transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                    views                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function decimals() external pure returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function name() external view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() external view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function allowance(address holder, address spender) external view override returns (uint256) {\\r\\n        return _allowances[holder][spender];\\r\\n    }\\r\\n\\r\\n    function tokensToProportion(uint256 tokens) public view returns (uint256) {\\r\\n        return tokens * _totalProportion / _totalSupply;\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 proportion) public view returns (uint256) {\\r\\n        return proportion * _totalSupply / _totalProportion;\\r\\n    }\\r\\n\\r\\n    function getCirculatingSupply() public view returns (uint256) {\\r\\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                   owners                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    // once enabled, can never be turned off\\r\\n    function enableTrading() external onlyOwner {\\r\\n        tradingActive = true;\\r\\n        claimingFees = true;\\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            pair != UNISWAP_V2_PAIR,\\r\\n            \\\"The pair cannot be removed from automatedMarketMakerPairs\\\"\\r\\n        );\\r\\n\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\\r\\n        require(\\r\\n            newNum >= ((_totalSupply * 1) / 1000) / 1e18,\\r\\n            \\\"Cannot set maxTransactionAmount lower than 0.1%\\\"\\r\\n        );\\r\\n        _maxTxAmount = newNum * (10**18);\\r\\n    }\\r\\n\\r\\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\\r\\n        require(\\r\\n            newNum >= ((_totalSupply * 5) / 1000) / 1e18,\\r\\n            \\\"Cannot set maxWallet lower than 0.5%\\\"\\r\\n        );\\r\\n        _maxWalletAmount = newNum * (10**18);\\r\\n    }\\r\\n\\r\\n    function clearStuckBalance() external onlyOwner {\\r\\n        (bool success,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    function clearStuckToken() external onlyOwner {\\r\\n        _transferFrom(address(this), msg.sender, balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\\r\\n        claimingFees = _enabled;\\r\\n        swapThreshold = _amount;\\r\\n    }\\r\\n\\r\\n    function changeFees(\\r\\n        uint8 reflectionFeeBuy,\\r\\n        uint8 marketingFeeBuy,\\r\\n        uint8 lpFeeBuy,\\r\\n        uint8 buybackFeeBuy,\\r\\n        uint8 burnFeeBuy,\\r\\n        uint8 reflectionFeeSell,\\r\\n        uint8 marketingFeeSell,\\r\\n        uint8 lpFeeSell,\\r\\n        uint8 buybackFeeSell,\\r\\n        uint8 burnFeeSell\\r\\n    ) external onlyOwner {\\r\\n        uint128 __totalBuyFee = reflectionFeeBuy + marketingFeeBuy + lpFeeBuy + buybackFeeBuy + burnFeeBuy;\\r\\n        uint128 __totalSellFee = reflectionFeeSell + marketingFeeSell + lpFeeSell + buybackFeeSell + burnFeeSell;\\r\\n\\r\\n        buyFee = Fee({\\r\\n            reflection: reflectionFeeBuy,\\r\\n            marketing: marketingFeeBuy,\\r\\n            lp: lpFeeBuy,\\r\\n            buyback: buybackFeeBuy,\\r\\n            burn: burnFeeBuy,\\r\\n            total: __totalBuyFee\\r\\n        });\\r\\n\\r\\n        sellFee = Fee({\\r\\n            reflection: reflectionFeeSell,\\r\\n            marketing: marketingFeeSell,\\r\\n            lp: lpFeeSell,\\r\\n            buyback: buybackFeeSell,\\r\\n            burn: burnFeeSell,\\r\\n            total: __totalSellFee\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\\r\\n        isFeeExempt[holder] = exempt;\\r\\n    }\\r\\n\\r\\n    function setisLimitExempt(address holder, bool exempt) external onlyOwner {\\r\\n        isLimitExempt[holder] = exempt;\\r\\n    }\\r\\n\\r\\n    function setFeeReceivers(address m_, address lp_, address b_) external onlyOwner {\\r\\n        marketingFeeReceiver = m_;\\r\\n        lpFeeReceiver = lp_;\\r\\n        buybackFeeReceiver = b_;\\r\\n    }\\r\\n\\r\\n    function setLimitsEnabled(bool e_) external onlyOwner {\\r\\n        limitsEnabled = e_;\\r\\n    }\\r\\n\\r\\n    // Set Transfer delay\\r\\n    function disableTransferDelay(bool e_) external onlyOwner returns (bool) {\\r\\n        transferDelayEnabled = e_;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function blacklist(address _address, bool _isBlacklisting) external onlyOwner {\\r\\n        blacklists[_address] = _isBlacklisting;\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                   private                                  */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        require(!blacklists[recipient] && !blacklists[sender], \\\"Blacklisted\\\");\\r\\n\\r\\n        if (inSwap) {\\r\\n            return _basicTransfer(sender, recipient, amount);\\r\\n        }\\r\\n\\r\\n        if (limitsEnabled) {\\r\\n            if (!tradingActive) \\r\\n            {\\r\\n                require(\\r\\n                    isFeeExempt[sender] || isFeeExempt[recipient],\\r\\n                    \\\"Trading is not active.\\\"\\r\\n                );\\r\\n            }\\r\\n\\r\\n            //when buy\\r\\n            if (automatedMarketMakerPairs[sender] && !isLimitExempt[recipient]) \\r\\n            {\\r\\n                require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\r\\n                require(amount + balanceOf(recipient) <= _maxWalletAmount, \\\"Max wallet exceeded\\\");\\r\\n            }\\r\\n            //when sell\\r\\n            else if (automatedMarketMakerPairs[recipient] && !isLimitExempt[sender])\\r\\n            {\\r\\n                require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\r\\n            }\\r\\n            else if (!isLimitExempt[recipient]) \\r\\n            {\\r\\n                require(amount + balanceOf(recipient) <= _maxWalletAmount, \\\"Max wallet exceeded\\\");\\r\\n            }\\r\\n            \\r\\n            // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\\r\\n            if (transferDelayEnabled) {\\r\\n                if (\\r\\n                    recipient != owner() &&\\r\\n                    recipient != address(UNISWAP_V2_ROUTER) &&\\r\\n                    recipient != UNISWAP_V2_PAIR\\r\\n                ) {\\r\\n                    require(\\r\\n                        _holderLastTransferTimestamp[tx.origin] + 1 <\\r\\n                            block.number,\\r\\n                        \\\"_transfer:: Transfer Delay enabled.  Only one purchase per two blocks allowed.\\\"\\r\\n                    );\\r\\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_shouldSwapBack()) {\\r\\n            _swapBack();\\r\\n        }\\r\\n\\r\\n        uint256 proportionAmount = tokensToProportion(amount);\\r\\n        require(_rOwned[sender] >= proportionAmount, \\\"Insufficient Balance\\\");\\r\\n        _rOwned[sender] = _rOwned[sender] - proportionAmount;\\r\\n\\r\\n        uint256 proportionReceived = _shouldTakeFee(sender, recipient)\\r\\n            ? _takeFeeInProportions(sender == UNISWAP_V2_PAIR ? true : false, sender, proportionAmount)\\r\\n            : proportionAmount;\\r\\n        _rOwned[recipient] = _rOwned[recipient] + proportionReceived;\\r\\n\\r\\n        emit Transfer(sender, recipient, tokenFromReflection(proportionReceived));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        uint256 proportionAmount = tokensToProportion(amount);\\r\\n        require(_rOwned[sender] >= proportionAmount, \\\"Insufficient Balance\\\");\\r\\n        _rOwned[sender] = _rOwned[sender] - proportionAmount;\\r\\n        _rOwned[recipient] = _rOwned[recipient] + proportionAmount;\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _takeFeeInProportions(bool buying, address sender, uint256 proportionAmount) internal returns (uint256) {\\r\\n        Fee memory __buyFee = buyFee;\\r\\n        Fee memory __sellFee = sellFee;\\r\\n\\r\\n        uint256 proportionFeeAmount =\\r\\n            buying == true ? proportionAmount * __buyFee.total / 100 : proportionAmount * __sellFee.total / 100;\\r\\n\\r\\n        // reflect\\r\\n        uint256 proportionReflected = buying == true\\r\\n            ? proportionFeeAmount * __buyFee.reflection / __buyFee.total\\r\\n            : proportionFeeAmount * __sellFee.reflection / __sellFee.total;\\r\\n\\r\\n        _totalProportion = _totalProportion - proportionReflected;\\r\\n\\r\\n        // take fees\\r\\n        uint256 _proportionToContract = proportionFeeAmount - proportionReflected;\\r\\n        if (_proportionToContract > 0) {\\r\\n            _rOwned[address(this)] = _rOwned[address(this)] + _proportionToContract;\\r\\n\\r\\n            emit Transfer(sender, address(this), tokenFromReflection(_proportionToContract));\\r\\n        }\\r\\n        emit Reflect(proportionReflected, _totalProportion);\\r\\n        return proportionAmount - proportionFeeAmount;\\r\\n    }\\r\\n\\r\\n    function _shouldSwapBack() internal view returns (bool) {\\r\\n        return msg.sender != UNISWAP_V2_PAIR && !inSwap && claimingFees && balanceOf(address(this)) >= swapThreshold;\\r\\n    }\\r\\n\\r\\n    function _swapBack() internal swapping {\\r\\n        Fee memory __sellFee = sellFee;\\r\\n\\r\\n        uint256 __swapThreshold = swapThreshold;\\r\\n        uint256 amountToBurn = __swapThreshold * __sellFee.burn / __sellFee.total;\\r\\n        uint256 amountToSwap = __swapThreshold - amountToBurn;\\r\\n        approve(address(UNISWAP_V2_ROUTER), amountToSwap);\\r\\n\\r\\n        if(amountToBurn > 0)\\r\\n        {\\r\\n            // burn\\r\\n            _transferFrom(address(this), DEAD, amountToBurn);\\r\\n        }\\r\\n\\r\\n        // swap\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = UNISWAP_V2_ROUTER.WETH();\\r\\n\\r\\n        UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amountToSwap, 0, path, address(this), block.timestamp\\r\\n        );\\r\\n\\r\\n        uint256 amountETH = address(this).balance;\\r\\n\\r\\n        uint256 totalSwapFee = __sellFee.total - __sellFee.reflection - __sellFee.burn;\\r\\n        uint256 amountETHMarketing = amountETH * __sellFee.marketing / totalSwapFee;\\r\\n        uint256 amountETHLP = amountETH * __sellFee.lp / totalSwapFee;\\r\\n        uint256 amountETHBuyback = amountETH * __sellFee.buyback / totalSwapFee;\\r\\n\\r\\n        // send\\r\\n        (bool tmpSuccess,) = payable(lpFeeReceiver).call{value: amountETHLP}(\\\"\\\");\\r\\n        (tmpSuccess,) = payable(buybackFeeReceiver).call{value: amountETHBuyback}(\\\"\\\");\\r\\n        (tmpSuccess,) = address(marketingFeeReceiver).call{value: address(this).balance}(\\\"\\\");\\r\\n    }\\r\\n\\r\\n    function _shouldTakeFee(address sender, address recipient) internal view returns (bool) {\\r\\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReflected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalProportion\",\"type\":\"uint256\"}],\"name\":\"Reflect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_PAIR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlacklisting\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyback\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"reflectionFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketingFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lpFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buybackFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burnFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflectionFeeSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketingFeeSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lpFeeSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buybackFeeSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burnFeeSell\",\"type\":\"uint8\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"e_\",\"type\":\"bool\"}],\"name\":\"disableTransferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyback\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"m_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lp_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"b_\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"e_\",\"type\":\"bool\"}],\"name\":\"setLimitsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setisLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proportion\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DEPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}