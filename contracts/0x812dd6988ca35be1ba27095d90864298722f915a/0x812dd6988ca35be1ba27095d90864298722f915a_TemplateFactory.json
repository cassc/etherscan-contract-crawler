{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/soma/TemplateFactory/TemplateFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity =0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"../Lockdrop/extensions/TokenRecovery.sol\\\";\\n\\nimport \\\"../utils/Deployer.sol\\\";\\n\\nimport \\\"./ITemplateFactory.sol\\\";\\n\\n/**\\n * @notice Implementation of the {ITemplateFactory} interface.\\n */\\ncontract TemplateFactory is ITemplateFactory, ReentrancyGuard, TokenRecovery {\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeCast for uint256;\\n\\n    /**\\n     * @notice Returns the name of the contract.\\n     */\\n    string public constant name = \\\"TemplateFactory\\\";\\n\\n    /**\\n     * @notice Returns the Template Factory PUBLIC_ROLE.\\n     */\\n    // a PUBLIC_ROLE will allow anybody access\\n    bytes32 public constant PUBLIC_ROLE = keccak256(\\\"TemplateFactory.PUBLIC_ROLE\\\");\\n\\n    /**\\n     * @notice Returns the Template Factory MANAGE_TEMPLATE_ROLE.\\n     */\\n    bytes32 public constant MANAGE_TEMPLATE_ROLE = keccak256(\\\"TemplateFactory.MANAGE_TEMPLATE_ROLE\\\");\\n\\n    /**\\n     * @notice Returns the Template Factory FUNCTION_CALL_ROLE.\\n     */\\n    bytes32 public constant FUNCTION_CALL_ROLE = keccak256(\\\"TemplateFactory.FUNCTION_CALL_ROLE\\\");\\n\\n    // template address => template information\\n    mapping(bytes32 => Template) private _template;\\n    mapping(address => DeploymentInfo) private _deployed;\\n\\n    /**\\n     * @notice Checks if TemplateFactory inherits a given contract interface.\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(ITemplateFactory).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function version(bytes32 templateId, uint256 _version) external view override returns (Version memory version_) {\\n        Template storage template_ = _template[templateId];\\n        require(template_.versions.length > _version, \\\"TemplateFactory: INVALID_VERSION\\\");\\n        version_ = template_.versions[_version];\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function latestVersion(bytes32 templateId) external view override returns (uint256) {\\n        require(_template[templateId].versions.length > 0, \\\"TemplateFactory: INVALID_TEMPLATE_ID\\\");\\n        return _template[templateId].versions.length - 1;\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function templateInstances(bytes32 templateId) external view override returns (address[] memory) {\\n        return _template[templateId].instances;\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function deploymentInfo(address instance) external view override returns (DeploymentInfo memory) {\\n        return _deployed[instance];\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function deployRole(bytes32 templateId) external view override returns (bytes32) {\\n        return _template[templateId].deployRole;\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function deployedByFactory(address instance) external view override returns (bool) {\\n        return _deployed[instance].exists;\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function uploadTemplate(bytes32 templateId, bytes memory initialPart, uint256 totalParts, address implementation)\\n        external\\n        override\\n        onlyRole(MANAGE_TEMPLATE_ROLE)\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(templateId != bytes32(0), \\\"TemplateFactory: invalid template id\\\");\\n        require(initialPart.length > 0, \\\"TemplateFactory: creation code is empty\\\");\\n        require(totalParts > 0, \\\"TemplateFactory: total parts is zero\\\");\\n\\n        Version memory _version;\\n        uint256 _versionId = _template[templateId].versions.length;\\n\\n        _version.totalParts = totalParts;\\n        _version.creationCode = initialPart;\\n        _version.partsUploaded = 1;\\n        _version.implementation = implementation;\\n\\n        _template[templateId].versions.push(_version);\\n\\n        emit TemplateVersionCreated(templateId, _versionId, implementation, _msgSender());\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function uploadTemplatePart(bytes32 templateId, uint256 _version, bytes memory part)\\n        external\\n        override\\n        nonReentrant\\n        onlyRole(MANAGE_TEMPLATE_ROLE)\\n        returns (bool)\\n    {\\n        require(part.length > 0, \\\"TemplateFactory: creation code is empty\\\");\\n\\n        Version storage vsn = _template[templateId].versions[_version];\\n\\n        require(vsn.partsUploaded < vsn.totalParts, \\\"TemplateFactory: there are no more parts to upload\\\");\\n\\n        vsn.creationCode = abi.encodePacked(vsn.creationCode, part);\\n        vsn.partsUploaded++;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function updateDeployRole(bytes32 templateId, bytes32 _deployRole)\\n        external\\n        override\\n        onlyRole(MANAGE_TEMPLATE_ROLE)\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(_template[templateId].deployRole != _deployRole, \\\"TemplateFactory: deployRole has not updated\\\");\\n        emit DeployRoleUpdated(templateId, _template[templateId].deployRole, _deployRole, _msgSender());\\n        _template[templateId].deployRole = _deployRole;\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function disableTemplate(bytes32 templateId)\\n        external\\n        override\\n        onlyRole(MANAGE_TEMPLATE_ROLE)\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(!_template[templateId].disabled, \\\"TemplateFactory: this template is already disabled\\\");\\n        _template[templateId].disabled = true;\\n\\n        emit TemplateDisabled(templateId, _msgSender());\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function enableTemplate(bytes32 templateId)\\n        external\\n        override\\n        onlyRole(MANAGE_TEMPLATE_ROLE)\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(_template[templateId].disabled, \\\"TemplateFactory: this template is already enabled\\\");\\n        _template[templateId].disabled = false;\\n\\n        emit TemplateEnabled(templateId, _msgSender());\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function deprecateVersion(bytes32 templateId, uint256 _version)\\n        external\\n        override\\n        onlyRole(MANAGE_TEMPLATE_ROLE)\\n        nonReentrant\\n        returns (bool)\\n    {\\n        require(\\n            !_template[templateId].versions[_version].deprecated,\\n            \\\"TemplateFactory: this template version is already deprecated\\\"\\n        );\\n\\n        _template[templateId].versions[_version].deprecated = true;\\n\\n        emit TemplateVersionDeprecated(templateId, _version, _msgSender());\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function undeprecateVersion(bytes32 templateId, uint256 _version)\\n        external\\n        override\\n        onlyRole(MANAGE_TEMPLATE_ROLE)\\n        returns (bool)\\n    {\\n        require(\\n            _template[templateId].versions[_version].deprecated,\\n            \\\"TemplateFactory: this template version is not currently deprecated\\\"\\n        );\\n\\n        _template[templateId].versions[_version].deprecated = false;\\n\\n        emit TemplateVersionUndeprecated(templateId, _version, _msgSender());\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function initCodeHash(bytes32 templateId, uint256 _version, bytes memory args)\\n        public\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        Version storage vsn = _validateTemplateVersion(_template[templateId], _version);\\n        return keccak256(_deployCode(vsn.creationCode, args));\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function predictDeployAddress(bytes32 templateId, uint256 _version, bytes memory args, bytes32 salt)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return Deployer.predictAddress(address(this), initCodeHash(templateId, _version, args), salt);\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function predictCloneAddress(bytes32 templateId, uint256 _version, bytes32 salt)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return Clones.predictDeterministicAddress(_template[templateId].versions[_version].implementation, salt);\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function deployTemplate(\\n        bytes32 templateId,\\n        uint256 _version,\\n        bytes memory args,\\n        bytes[] memory functionCalls,\\n        bytes32 salt\\n    ) external override nonReentrant returns (address instance) {\\n        Template storage tpl = _template[templateId];\\n        bytes memory creationCode = _validateTemplateVersion(tpl, _version).creationCode;\\n        bytes memory deployCode = _deployCode(creationCode, args);\\n\\n        _validateDeployRole(tpl.deployRole, _msgSender());\\n        _validateDeploySalt(deployCode, salt);\\n\\n        instance = Deployer.deploy(deployCode, salt);\\n\\n        _registerInstance(templateId, _version, instance, args, functionCalls, false);\\n\\n        emit TemplateDeployed(instance, templateId, _version, args, functionCalls, _msgSender());\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function cloneTemplate(bytes32 templateId, uint256 _version, bytes[] memory functionCalls, bytes32 salt)\\n        external\\n        override\\n        nonReentrant\\n        returns (address instance)\\n    {\\n        Template storage tpl = _template[templateId];\\n        address implementation = _validateTemplateVersion(tpl, _version).implementation;\\n\\n        _validateCloneSalt(implementation, salt);\\n        _validateDeployRole(tpl.deployRole, _msgSender());\\n\\n        require(implementation != address(0), \\\"TemplateFactory: implementation or version does not exist\\\");\\n\\n        instance = Clones.cloneDeterministic(implementation, salt);\\n\\n        _registerInstance(templateId, _version, instance, \\\"\\\", functionCalls, true);\\n\\n        emit TemplateCloned(instance, templateId, _version, functionCalls, _msgSender());\\n    }\\n\\n    /**\\n     * @inheritdoc ITemplateFactory\\n     */\\n    function functionCall(address target, bytes memory data)\\n        external\\n        override\\n        onlyRole(FUNCTION_CALL_ROLE)\\n        nonReentrant\\n        returns (bytes memory result)\\n    {\\n        result = target.functionCall(data);\\n        emit FunctionCalled(target, data, result, _msgSender());\\n    }\\n\\n    function _deployCode(bytes memory creationCode, bytes memory args) private pure returns (bytes memory) {\\n        require(creationCode.length > 0, \\\"TemplateFactory: Version does not exist\\\");\\n        return abi.encodePacked(creationCode, args);\\n    }\\n\\n    function _validateTemplateVersion(Template storage tpl, uint256 _version)\\n        private\\n        view\\n        returns (Version storage vsn)\\n    {\\n        vsn = tpl.versions[_version];\\n\\n        require(!tpl.disabled, \\\"TemplateFactory: this template has been disabled\\\");\\n        require(!vsn.deprecated, \\\"TemplateFactory: this template version has been deprecated\\\");\\n        require(vsn.totalParts == vsn.partsUploaded, \\\"TemplateFactory: this is an incomplete version. (missing parts)\\\");\\n    }\\n\\n    function _validateDeployRole(bytes32 _deployRole, address sender) private view {\\n        require(\\n            _deployRole == PUBLIC_ROLE || hasRole(_deployRole, sender) || hasRole(MANAGE_TEMPLATE_ROLE, sender),\\n            \\\"TemplateFactory: missing required permissions to deploy this template\\\"\\n        );\\n    }\\n\\n    function _validateDeploySalt(bytes memory deployCode, bytes32 salt) private view {\\n        address predictedAddress = Deployer.predictAddress(address(this), keccak256(deployCode), salt);\\n        require(!predictedAddress.isContract(), \\\"TemplateFactory: duplicate salt\\\");\\n    }\\n\\n    function _validateCloneSalt(address implementation, bytes32 salt) private view {\\n        address predictedAddress = _predictCloneAddress(implementation, salt);\\n        require(!predictedAddress.isContract(), \\\"TemplateFactory: duplicate salt\\\");\\n    }\\n\\n    function _registerInstance(\\n        bytes32 templateId,\\n        uint256 _version,\\n        address instance,\\n        bytes memory args,\\n        bytes[] memory functionCalls,\\n        bool cloned\\n    ) private {\\n        _template[templateId].instances.push(instance);\\n        _template[templateId].versions[_version].instances.push(instance);\\n\\n        _deployed[instance] = DeploymentInfo({\\n            exists: true,\\n            templateId: templateId,\\n            block: block.number.toUint64(),\\n            sender: _msgSender(),\\n            timestamp: block.timestamp.toUint64(),\\n            version: _version,\\n            args: args,\\n            functionCalls: functionCalls,\\n            cloned: cloned\\n        });\\n\\n        for (uint256 i; i < functionCalls.length; ++i) {\\n            instance.functionCall(functionCalls[i]);\\n        }\\n    }\\n\\n    function _predictCloneAddress(address implementation, bytes32 salt) private view returns (address) {\\n        return Clones.predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/soma/Lockdrop/extensions/TokenRecovery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity =0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./ITokenRecovery.sol\\\";\\n\\nimport \\\"../../SomaAccessControl/utils/Accessible.sol\\\";\\n\\n/**\\n * @notice Implementation of the {ITokenRecovery} interface.\\n */\\nabstract contract TokenRecovery is ITokenRecovery, Accessible {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @inheritdoc ITokenRecovery\\n     */\\n    bytes32 public constant override TOKEN_RECOVERY_ROLE = keccak256(\\\"TokenRecovery.TOKEN_RECOVERY_ROLE\\\");\\n\\n    EnumerableSet.AddressSet private _disabledTokens;\\n\\n    /**\\n     * @notice Checks if TokenRecovery inherits a given contract interface.\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(ITokenRecovery).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc ITokenRecovery\\n     */\\n    function recoverTokens(address token, address to, uint256 amount) external override onlyRole(TOKEN_RECOVERY_ROLE) {\\n        require(!_disabledTokens.contains(token), \\\"TokenRecovery: INVALID_TOKEN\\\");\\n        IERC20(token).safeTransfer(to, amount);\\n        emit TokensRecovered(token, to, amount, _msgSender());\\n    }\\n\\n    function _disableTokenRecovery(address token) internal {\\n        _disabledTokens.add(token);\\n    }\\n\\n    function _enableTokenRecovery(address token) internal {\\n        _disabledTokens.remove(token);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/soma/utils/Deployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity =0.8.18;\\n\\n//\\n//abi.encode(\\n//    implTemplateTypes[implementation].templateAddress,\\n//    address(this),\\n//    args\\n//)\\n\\nlibrary Deployer {\\n    function deploy(bytes memory bytecode) internal returns (address addr) {\\n        return deploy(bytecode, keccak256(abi.encodePacked(block.number, bytecode)));\\n    }\\n\\n    function deploy(bytes memory bytecode, bytes32 salt) internal returns (address addr) {\\n        assembly {\\n            addr :=\\n                create2(\\n                    0, // wei sent with current call\\n                    // Actual code starts after skipping the first 32 bytes\\n                    add(bytecode, 0x20),\\n                    mload(bytecode), // Load the size of code contained in the first 32 bytes\\n                    salt // Salt from function arguments\\n                )\\n\\n            if iszero(extcodesize(addr)) { revert(0, 0) }\\n        }\\n    }\\n\\n    function predictAddress(address factory, bytes32 initCodeHash, bytes32 salt) internal pure returns (address addr) {\\n        bytes32 hash = keccak256(abi.encodePacked(bytes1(0xff), factory, salt, initCodeHash));\\n\\n        // NOTE: cast last 20 bytes of hash to address\\n        return address(uint160(uint256(hash)));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/soma/TemplateFactory/ITemplateFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title SOMA Template Factory Contract.\\n * @author SOMA.finance.\\n * @notice Interface of the {TemplateFactory} contract.\\n */\\ninterface ITemplateFactory {\\n    /**\\n     * @notice Emitted when a template version is created.\\n     * @param templateId The ID of the template added.\\n     * @param version The version of the template.\\n     * @param implementation The address of the implementation of the template.\\n     * @param sender The address of the message sender.\\n     */\\n    event TemplateVersionCreated(\\n        bytes32 indexed templateId, uint256 indexed version, address implementation, address indexed sender\\n    );\\n\\n    /**\\n     * @notice Emitted when a deploy role is updated.\\n     * @param templateId The ID of the template with the updated deploy role.\\n     * @param prevRole The previous role.\\n     * @param newRole The new role.\\n     * @param sender The address of the message sender.\\n     */\\n    event DeployRoleUpdated(bytes32 indexed templateId, bytes32 prevRole, bytes32 newRole, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when a template is enabled.\\n     * @param templateId The ID of the template.\\n     * @param sender The address of the message sender.\\n     */\\n    event TemplateEnabled(bytes32 indexed templateId, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when a template is disabled.\\n     * @param templateId The ID of the template.\\n     * @param sender The address of the message sender.\\n     */\\n    event TemplateDisabled(bytes32 indexed templateId, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when a template version is deprecated.\\n     * @param templateId The ID of the template.\\n     * @param version The version of the template deprecated.\\n     * @param sender The address of the message sender.\\n     */\\n    event TemplateVersionDeprecated(bytes32 indexed templateId, uint256 indexed version, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when a template version is undeprecated.\\n     * @param templateId The ID of the template.\\n     * @param version The version of the template undeprecated.\\n     * @param sender The address of the message sender.\\n     */\\n    event TemplateVersionUndeprecated(bytes32 indexed templateId, uint256 indexed version, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when a template is deployed.\\n     * @param instance The instance of the deployed template.\\n     * @param templateId The ID of the template.\\n     * @param version The version of the template.\\n     * @param args The abi-encoded constructor arguments.\\n     * @param functionCalls The abi-encoded function calls.\\n     * @param sender The address of the message sender.\\n     */\\n    event TemplateDeployed(\\n        address indexed instance,\\n        bytes32 indexed templateId,\\n        uint256 version,\\n        bytes args,\\n        bytes[] functionCalls,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @notice Emitted when a template is cloned.\\n     * @param instance The instance of the deployed template.\\n     * @param templateId The ID of the template.\\n     * @param version The version of the template.\\n     * @param functionCalls The abi-encoded function calls.\\n     * @param sender The address of the message sender.\\n     */\\n    event TemplateCloned(\\n        address indexed instance,\\n        bytes32 indexed templateId,\\n        uint256 version,\\n        bytes[] functionCalls,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @notice Emitted when a template function is called.\\n     * @param target The address of the target contract.\\n     * @param data The abi-encoded data.\\n     * @param result The abi-encoded result.\\n     * @param sender The address of the message sender.\\n     */\\n    event FunctionCalled(address indexed target, bytes data, bytes result, address indexed sender);\\n\\n    /**\\n     * @notice Structure of a template version.\\n     * @param exists True if the version exists, False if it does not.\\n     * @param deprecated True if the version is deprecated, False if it is not.\\n     * @param implementation The address of the version's implementation.\\n     * @param creationCode The abi-encoded creation code.\\n     * @param totalParts The total number of parts of the version.\\n     * @param partsUploaded The number of parts uploaded.\\n     * @param instances The array of instances.\\n     */\\n    struct Version {\\n        bool deprecated;\\n        address implementation;\\n        bytes creationCode;\\n        uint256 totalParts;\\n        uint256 partsUploaded;\\n        address[] instances;\\n    }\\n\\n    /**\\n     * @notice Structure of a template.\\n     * @param disabled Boolean value indicating if the template is enabled.\\n     * @param latestVersion The latest version of the template.\\n     * @param deployRole The deployer role of the template.\\n     * @param version The versions of the template.\\n     * @param instances The instances of the template.\\n     */\\n    struct Template {\\n        bool disabled;\\n        bytes32 deployRole;\\n        Version[] versions;\\n        address[] instances;\\n    }\\n\\n    /**\\n     * @notice Structure of deployment information.\\n     * @param exists Boolean value indicating if the deployment information exists.\\n     * @param templateId The id of the template.\\n     * @param version The version of the template.\\n     * @param args The abi-encoded arguments.\\n     * @param functionCalls The abi-encoded function calls.\\n     * @param cloned Boolean indicating if the deployment information is cloned.\\n     */\\n    struct DeploymentInfo {\\n        bool exists;\\n        uint64 block;\\n        uint64 timestamp;\\n        address sender;\\n        bytes32 templateId;\\n        uint256 version;\\n        bytes args;\\n        bytes[] functionCalls;\\n        bool cloned;\\n    }\\n\\n    /**\\n     * @notice Returns a version of a template.\\n     * @param templateId The id of the template to return the version of.\\n     * @param _version The version of the template to be returned.\\n     * @return The version of the template.\\n     */\\n    function version(bytes32 templateId, uint256 _version) external view returns (Version memory);\\n\\n    /**\\n     * @notice Returns the latest version of a template.\\n     * @param templateId The id of the template to return the latest version of.\\n     * @return The latest version of the template.\\n     */\\n    function latestVersion(bytes32 templateId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the instances of a template.\\n     * @param templateId The id of the template to return the latest instance of.\\n     * @return The instances of the template.\\n     */\\n    function templateInstances(bytes32 templateId) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the deployment information of an instance.\\n     * @param instance The instance of the template to return deployment information of.\\n     * @return The deployment information of the template.\\n     */\\n    function deploymentInfo(address instance) external view returns (DeploymentInfo memory);\\n\\n    /**\\n     * @notice Returns the deploy role of a template.\\n     * @param templateId The id of the template to return the deploy role of.\\n     * @return The deploy role of the template.\\n     */\\n    function deployRole(bytes32 templateId) external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns True if an instance has been deployed by the template factory, else returns False.\\n     * @dev Returns `true` if `instance` has been deployed by the template factory, else returns `false`.\\n     * @param instance The instance of the template to return True for, if it has been deployed by the factory, else False.\\n     * @return Boolean value indicating if the instance has been deployed by the template factory.\\n     */\\n    function deployedByFactory(address instance) external view returns (bool);\\n\\n    /**\\n     * @notice Uploads a new template and returns True.\\n     * @param templateId The id of the template to upload.\\n     * @param initialPart The initial part to upload.\\n     * @param totalParts The number of total parts of the template.\\n     * @param implementation The address of the implementation of the template.\\n     * @custom:emits TemplateVersionCreated\\n     * @custom:requirement `templateId` must not be equal to bytes32(0).\\n     * @custom:requirement The length of `initialPart` must be greater than zero.\\n     * @custom:requirement `totalParts` must be greater than zero.\\n     */\\n    function uploadTemplate(bytes32 templateId, bytes memory initialPart, uint256 totalParts, address implementation)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @notice Uploads a part of a template.\\n     * @param templateId The id of the template to upload a part to.\\n     * @param version The version of the template to upload a part to.\\n     * @param part The part to upload to the template.\\n     * @custom:requirement The length of part must be greater than zero.\\n     * @custom:requirement The version of the template must already exist.\\n     * @custom:requirement The version's number of parts uploaded must be less than the version's total number of parts.\\n     * @return Boolean value indicating if the operation was successful.\\n     */\\n    function uploadTemplatePart(bytes32 templateId, uint256 version, bytes memory part) external returns (bool);\\n\\n    /**\\n     * @notice Updates the deploy role of a template.\\n     * @param templateId The id of the template to update the deploy role for.\\n     * @param _deployRole The deploy role to update to.\\n     * @custom:emits DeployRoleUpdated\\n     * @custom:requirement The template's existing deploy role cannot be equal to `deployRole`.\\n     * @return Boolean value indicating if the operation was successful.\\n     */\\n    function updateDeployRole(bytes32 templateId, bytes32 _deployRole) external returns (bool);\\n\\n    /**\\n     * @notice Disables a template and returns True.\\n     * @dev Disables a template and returns `true`.\\n     * @param templateId The id of the template to disable.\\n     * @custom:emits TemplateDisabled\\n     * @custom:requirement The template must be enabled when the function call is made.\\n     * @return Boolean value indicating if the operation was successful.\\n     */\\n    function disableTemplate(bytes32 templateId) external returns (bool);\\n\\n    /**\\n     * @notice Enables a template and returns True.\\n     * @dev Enables a template and returns `true`.\\n     * @param templateId The id of the template to enable.\\n     * @custom:emits TemplateEnabled\\n     * @custom:requirement The template must be disabled when the function call is made.\\n     * @return Boolean value indicating if the operation was successful.\\n     */\\n    function enableTemplate(bytes32 templateId) external returns (bool);\\n\\n    /**\\n     * @notice Deprecates a version of a template. A deprecated template version cannot be deployed.\\n     * @param templateId The id of the template to deprecate the version for.\\n     * @param _version The version of the template to deprecate.\\n     * @custom:emits TemplateVersionDeprecated\\n     * @custom:requirement The version must already exist.\\n     * @custom:requirement The version must not be deprecated already.\\n     * @return Boolean value indicating if the operation was successful.\\n     */\\n    function deprecateVersion(bytes32 templateId, uint256 _version) external returns (bool);\\n\\n    /**\\n     * @notice Undeprecates a version of a template and returns True.\\n     * @param templateId The id of the template to undeprecate a version for.\\n     * @param _version The version of a template to undeprecate.\\n     * @custom:emits TemplateVersionUndeprecated\\n     * @custom:requirement The version must be deprecated already.\\n     * @return Boolean value indicating if the operation was successful.\\n     */\\n    function undeprecateVersion(bytes32 templateId, uint256 _version) external returns (bool);\\n\\n    /**\\n     * @notice Returns the Init Code Hash.\\n     * @dev Returns the keccak256 hash of `templateId`, `version` and `args`.\\n     * @param templateId The id of the template to return the init code hash of.\\n     * @param _version The version of the template to return the init code hash of.\\n     * @param args The abi-encoded constructor arguments.\\n     * @return The abi-encoded init code hash.\\n     */\\n    function initCodeHash(bytes32 templateId, uint256 _version, bytes memory args) external view returns (bytes32);\\n\\n    /**\\n     * @notice Overloaded predictDeployAddress function.\\n     * @dev See {ITemplateFactory-predictDeployAddress}.\\n     * @param templateId The id of the template to predict the deploy address for.\\n     * @param _version The version of the template to predict the deploy address for.\\n     * @param args The abi-encoded constructor arguments.\\n     * @param salt The unique hash ot identify the contract.\\n     */\\n    function predictDeployAddress(bytes32 templateId, uint256 _version, bytes memory args, bytes32 salt)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Predict the clone address.\\n     * @param templateId The id of the template to predict the clone address for.\\n     * @param _version The version of the template to predict the clone address for.\\n     * @param salt The unique hash ot identify the contract.\\n     * @return The predicted clone address.\\n     */\\n    function predictCloneAddress(bytes32 templateId, uint256 _version, bytes32 salt) external view returns (address);\\n\\n    /**\\n     * @notice Deploys a version of a template.\\n     * @param templateId The id of the template to deploy.\\n     * @param _version The version of the template to deploy.\\n     * @param args The abi-encoded constructor arguments.\\n     * @param functionCalls The abi-encoded function calls.\\n     * @param salt The unique hash to identify the contract.\\n     * @custom:emits TemplateDeployed\\n     * @custom:requirement The version's number of parts must be equal to the version's number of parts uploaded.\\n     * @custom:requirement The length of the version's creation code must be greater than zero.\\n     * @return instance The instance of the deployed template.\\n     */\\n    function deployTemplate(\\n        bytes32 templateId,\\n        uint256 _version,\\n        bytes memory args,\\n        bytes[] memory functionCalls,\\n        bytes32 salt\\n    ) external returns (address instance);\\n\\n    /**\\n     * @notice Clones a version of a template.\\n     * @param templateId The id of the template to clone.\\n     * @param _version The version of the template to clone.\\n     * @param functionCalls The abi-encoded function calls.\\n     * @param salt The unique hash to identify the contract.\\n     * @custom:emits TemplateCloned\\n     * @custom:requirement The version's implementation must not equal `address(0)`.\\n     * @return instance The address of the cloned template instance.\\n     */\\n    function cloneTemplate(bytes32 templateId, uint256 _version, bytes[] memory functionCalls, bytes32 salt)\\n        external\\n        returns (address instance);\\n\\n    /**\\n     * @notice Calls a function on the target contract.\\n     * @param target The target address of the function call.\\n     * @param data Miscalaneous data associated with the transfer.\\n     * @custom:emits FunctionCalled\\n     * @return result The result of the function call.\\n     */\\n    function functionCall(address target, bytes memory data) external returns (bytes memory result);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/soma/Lockdrop/extensions/ITokenRecovery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SOMA Token Rewards Contract.\\n * @author SOMA.finance\\n * @notice Interface for the {TokenRecovery} contract.\\n */\\ninterface ITokenRecovery {\\n    /**\\n     * @notice Emitted when tokens are recovered.\\n     * @param token The address of the recovered tokens.\\n     * @param to The address that the tokens are being sent to.\\n     * @param amount The amount of tokens recovered.\\n     * @param sender The address of the message sender.\\n     */\\n    event TokensRecovered(address indexed token, address indexed to, uint256 amount, address indexed sender);\\n\\n    /**\\n     * @notice Returns the Token Recovery Upgradeable TOKEN_RECOVERY_ROLE.\\n     */\\n    function TOKEN_RECOVERY_ROLE() external pure returns (bytes32);\\n\\n    /**\\n     * @notice Recovers tokens and transfers these tokens to `to`.\\n     * @param token The address of the recovered tokens.\\n     * @param to The address that the tokens are being sent to.\\n     * @param amount The amount of tokens recovered.\\n     * @custom:emits TokensRecovered\\n     * @custom:requirement The function caller must have the TOKEN_RECOVERY_ROLE.\\n     * @custom:requirement `token` must not be a disabled token.\\n     */\\n    function recoverTokens(address token, address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/soma/SomaAccessControl/utils/Accessible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity =0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport \\\"../../utils/security/IPausable.sol\\\";\\nimport \\\"../../utils/SomaContract.sol\\\";\\n\\nimport \\\"../ISomaAccessControl.sol\\\";\\nimport \\\"./IAccessible.sol\\\";\\n\\n/**\\n * @notice Implementation of the {IAccessible} interface.\\n */\\nabstract contract Accessible is IAccessible, SomaContract {\\n    /**\\n     * @notice The modifier that restricts a function caller to accounts that have been granted `role`.\\n     * @param role The role that an account must have to execute a function.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        require(hasRole(role, _msgSender()), \\\"SomaAccessControl: caller does not have the appropriate authority\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessible).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessible\\n     */\\n    // slither-disable-next-line external-function\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return IAccessControl(SOMA.access()).getRoleAdmin(role);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessible\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return IAccessControl(SOMA.access()).hasRole(role, account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/soma/utils/security/IPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\"\r\n    },\r\n    \"contracts/soma/utils/SomaContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity =0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Multicall.sol\\\";\\n\\nimport \\\"../ISOMA.sol\\\";\\nimport \\\"../SOMAlib.sol\\\";\\n\\nimport \\\"./ISomaContract.sol\\\";\\n\\ncontract SomaContract is ISomaContract, Pausable, ERC165, Multicall {\\n    event Initialized(uint8 version);\\n\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    ISOMA public immutable override SOMA = SOMAlib.SOMA;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        // matching the openzeppelin reinitializer\\n        emit Initialized(1);\\n    }\\n\\n    modifier onlyMaster() {\\n        address sender = _msgSender();\\n        require(SOMA.master() == sender, \\\"SOMA: MASTER\\\");\\n        _;\\n    }\\n\\n    modifier onlyMasterOrSubMaster() {\\n        address sender = _msgSender();\\n        require(SOMA.master() == sender || SOMA.subMaster() == sender, \\\"SOMA: MASTER or SUB MASTER only\\\");\\n        _;\\n    }\\n\\n    function pause() external virtual override onlyMasterOrSubMaster {\\n        _pause();\\n    }\\n\\n    function unpause() external virtual override onlyMasterOrSubMaster {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(ISomaContract).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function paused() public view virtual override returns (bool) {\\n        return Pausable(address(SOMA)).paused() || super.paused();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/soma/SomaAccessControl/ISomaAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SOMA Access Control Contract.\\n * @author SOMA.finance.\\n * @notice An access control contract that establishes a hierarchy of accounts and controls\\n * function call permissions.\\n */\\ninterface ISomaAccessControl {\\n    /**\\n     * @notice Sets the admin of a role.\\n     * @dev Sets the admin for the `role` role.\\n     * @param role The role to set the admin role of.\\n     * @param adminRole The admin of `role`.\\n     * @custom:emits RoleAdminChanged\\n     * @custom:requirement The function caller must have the DEFAULT_ADMIN_ROLE.\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\"\r\n    },\r\n    \"contracts/soma/SomaAccessControl/utils/IAccessible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SOMA Accessible Contract.\\n * @author SOMA.finance\\n * @notice Interface of the {Accessible} contract.\\n */\\ninterface IAccessible {\\n    /**\\n     * @notice Returns the role admin, given a role.\\n     * @param role The role to return the admin of.\\n     * @return The admin of the role.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns a boolean indicating if `account` has been granted `role`.\\n     * @param role The role to check against `account`.\\n     * @param account The account to check against `role`.\\n     * @return True if `account` has been granted `role`, False otherwise.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/soma/ISOMA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./SomaAccessControl/ISomaAccessControl.sol\\\";\\nimport \\\"./SomaSwap/periphery/ISomaSwapRouter.sol\\\";\\nimport \\\"./SomaSwap/core/interfaces/ISomaSwapFactory.sol\\\";\\nimport \\\"./SomaGuard/ISomaGuard.sol\\\";\\nimport \\\"./TemplateFactory/ITemplateFactory.sol\\\";\\nimport \\\"./Lockdrop/ILockdropFactory.sol\\\";\\n\\n/**\\n * @title SOMA Contract.\\n * @author SOMA.finance\\n * @notice Interface of the SOMA contract.\\n */\\ninterface ISOMA {\\n    /**\\n     * @notice Emitted when the SOMA snapshot is updated.\\n     * @param version The version of the new snapshot.\\n     * @param hash The hash of the new snapshot.\\n     * @param snapshot The new snapshot.\\n     */\\n    event SOMAUpgraded(bytes32 indexed version, bytes32 indexed hash, bytes snapshot);\\n\\n    /**\\n     * @notice Emitted when the `seizeTo` address is updated.\\n     * @param prevSeizeTo The address of the previous `seizeTo`.\\n     * @param newSeizeTo The address of the new `seizeTo`.\\n     * @param sender The address of the message sender.\\n     */\\n    event SeizeToUpdated(address indexed prevSeizeTo, address indexed newSeizeTo, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when the `mintTo` address is updated.\\n     * @param prevMintTo The address of the previous `mintTo`.\\n     * @param newMintTo The address of the new `mintTo`.\\n     * @param sender The address of the message sender.\\n     */\\n    event MintToUpdated(address indexed prevMintTo, address indexed newMintTo, address indexed sender);\\n\\n    /**\\n     * @notice Snapshot of the SOMA contracts.\\n     * @param master The master address.\\n     * @param subMaster The subMaster address.\\n     * @param access The ISomaAccessControl contract.\\n     * @param guard The ISomaGuard contract.\\n     * @param factory The ITemplateFactory contract.\\n     * @param token The IERC20 contract.\\n     */\\n    struct Snapshot {\\n        address master;\\n        address subMaster;\\n        address access;\\n        address guard;\\n        address factory;\\n        address token;\\n    }\\n\\n    /**\\n     * @notice Returns the address that has been assigned the master role.\\n     */\\n    function master() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address that has been assigned the subMaster role.\\n     */\\n    function subMaster() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the {ISomaAccessControl} contract.\\n     */\\n    function access() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the {ISomaGuard} contract.\\n     */\\n    function guard() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the {ITemplateFactory} contract.\\n     */\\n    function factory() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the {IERC20} contract.\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @notice Returns the hash of the latest snapshot.\\n     */\\n    function snapshotHash() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the latest snapshot version.\\n     */\\n    function snapshotVersion() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the snapshot, given a snapshot hash.\\n     * @param hash The snapshot hash.\\n     * @return _snapshot The snapshot matching the `hash`.\\n     */\\n    function snapshots(bytes32 hash) external view returns (bytes memory _snapshot);\\n\\n    /**\\n     * @notice Returns the hash when given a version, returns a version when given a hash.\\n     * @param versionOrHash The version or hash.\\n     * @return hashOrVersion The hash or version based on the input.\\n     */\\n    function versions(bytes32 versionOrHash) external view returns (bytes32 hashOrVersion);\\n\\n    /**\\n     * @notice Returns the address that receives all minted tokens.\\n     */\\n    function mintTo() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address that receives all seized tokens.\\n     */\\n    function seizeTo() external view returns (address);\\n\\n    /**\\n     * @notice Updates the current SOMA snapshot and is called after the proxy has been upgraded.\\n     * @param version The version to upgrade to.\\n     * @custom:emits SOMAUpgraded\\n     * @custom:requirement The incoming snapshot hash cannot be equal to the contract's existing snapshot hash.\\n     */\\n    function __upgrade(bytes32 version) external;\\n\\n    /**\\n     * @notice Triggers the SOMA paused state. Pauses all the SOMA contracts.\\n     * @custom:emits Paused\\n     * @custom:requirement SOMA must be already unpaused.\\n     * @custom:requirement The caller must be the master or subMaster.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @notice Triggers the SOMA unpaused state. Unpauses all the SOMA contracts.\\n     * @custom:emits Unpaused\\n     * @custom:requirement SOMA must be already paused.\\n     * @custom:requirement The caller must be the master or subMaster.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @notice Sets the `mintTo` address to `_mintTo`.\\n     * @param _mintTo The address to be set as the `mintTo` address.\\n     * @custom:emits MintToUpdated\\n     * @custom:requirement The caller must be the master.\\n     */\\n    function setMintTo(address _mintTo) external;\\n\\n    /**\\n     * @notice Sets the `seizeTo` address to `_seizeTo`.\\n     * @param _seizeTo The address to be set as the `seizeTo` address.\\n     * @custom:emits SeizeToUpdated\\n     * @custom:requirement The caller must be the master.\\n     */\\n    function setSeizeTo(address _seizeTo) external;\\n\\n    /**\\n     * @notice Returns the current snapshot of the SOMA contracts.\\n     */\\n    function snapshot() external view returns (Snapshot memory _snapshot);\\n}\\n\"\r\n    },\r\n    \"contracts/soma/SOMAlib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity =0.8.18;\\n\\nimport \\\"./ISOMA.sol\\\";\\n\\nlibrary SOMAlib {\\n    /**\\n     * @notice The fixed address where the SOMA contract will be located (this is a proxy).\\n     */\\n    ISOMA public constant SOMA = ISOMA(0x0F3dC00189dbCD1D0c574e48031270cAe04C4ADF);\\n}\\n\"\r\n    },\r\n    \"contracts/soma/utils/ISomaContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ISOMA.sol\\\";\\n\\ninterface ISomaContract {\\n    function pause() external;\\n    function unpause() external;\\n\\n    function SOMA() external view returns (ISOMA);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/soma/SomaSwap/periphery/ISomaSwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\n/**\\n * @title SOMA Swap Router Contract.\\n * @author SOMA.finance\\n * @notice Interface for the {SomaSwapRouter} contract.\\n */\\ninterface ISomaSwapRouter {\\n    /**\\n     * @notice Returns the address of the factory contract.\\n     */\\n    function factory() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the WETH token.\\n     */\\n    function WETH() external view returns (address);\\n\\n    /**\\n     * @notice Adds liquidity to the pool.\\n     * @param tokenA The token0 of the pair to add liquidity to.\\n     * @param tokenB The token1 of the pair to add liquidity to.\\n     * @param amountADesired The amount of token0 to add as liquidity.\\n     * @param amountBDesired The amount of token1 to add as liquidity.\\n     * @param amountAMin The bound of the tokenB / tokenA price can go up\\n     * before transaction reverts.\\n     * @param amountBMin The bound of the tokenA / tokenB price can go up\\n     * before transaction reverts.\\n     * @param to The address to receive the liquidity tokens.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @custom:requirement `tokenA` and `tokenB` pair must already exist.\\n     * @custom:requirement the router's expiration deadline must be greater than the timestamp of the\\n     * function call\\n     * @return amountA The amount of tokenA added as liquidity.\\n     * @return amountB The amount of tokenB added as liquidity.\\n     * @return liquidity The amount of liquidity tokens minted.\\n     */\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    /**\\n     * @notice Adds liquidity to the pool with ETH.\\n     * @param token The pool token.\\n     * @param amountTokenDesired The amount of token to add as liquidity if WETH/token price\\n     * is less or equal to the value of msg.value/amountTokenDesired (token depreciates).\\n     * @param amountTokenMin The bound that WETH/token price can go up before the transactions\\n     * reverts.\\n     * @param amountETHMin The bound that token/WETH price can go up before the transaction reverts.\\n     * @param to The recipient of the liquidity tokens.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @custom:requirement `tokenA` and `tokenB` pair must already exist.\\n     * @custom:requirement the router's expiration deadline must be greater than the timestamp of the\\n     * function call\\n     * @return amountToken The amount of token sent to the pool.\\n     * @return amountETH The amount of ETH converted to WETH and sent to the pool.\\n     * @return liquidity The amount of liquidity tokens minted.\\n     */\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    /**\\n     * @notice Removes liquidity from the pool.\\n     * @param tokenA The pool token.\\n     * @param tokenB The pool token.\\n     * @param liquidity The amount of liquidity tokens to remove.\\n     * @param amountAMin The minimum amount of tokenA that must be received\\n     * for the transaction not to revert.\\n     * @param amountBMin The minimum amount of tokenB that must be received\\n     * for the transaction not to revert.\\n     * @param to The recipient of the underlying asset.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @custom:requirement `amountA` must be greater than or equal to `amountAMin`.\\n     * @custom:requirement `amountB` must be greater than or equal to `amountBMin`.\\n     * @return amountA The amount of tokenA received.\\n     * @return amountB The amount of tokenB received.\\n     */\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    /**\\n     * @notice Removes liquidity from the pool and the caller receives ETH.\\n     * @param token The pool token.\\n     * @param liquidity The amount of liquidity tokens to remove.\\n     * @param amountTokenMin The minimum amount of tokens that must be received\\n     * for the transaction not to revert.\\n     * @param amountETHMin The minimum amount of ETH that must be received for the\\n     * transaction not to revert.\\n     * @param to The recipient of the underlying assets.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @custom:requirement `amountA` must be greater than or equal to `amountAMin`.\\n     * @custom:requirement `amountB` must be greater than or equal to `amountBMin`.\\n     * @return amountToken The amount of token received.\\n     * @return amountETH The amount of ETH received.\\n     */\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    /**\\n     * @notice Removes liquidity from the pool without pre-approval.\\n     * @param tokenA The pool token0.\\n     * @param tokenB The pool token1.\\n     * @param liquidity The amount of liquidity to remove.\\n     * @param amountAMin The minimum amount of tokenA that must be received for the\\n     * transaction not to revert.\\n     * @param amountBMin The minimum amount of tokenB that must be received for the\\n     * transaction not to revert.\\n     * @param to The recipient of the underlying asset.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @param approveMax Boolean value indicating if the approval amount in the signature\\n     * is for liquidity or uint(-1).\\n     * @param v The v component of the permit signature.\\n     * @param r The r component of the permit signature.\\n     * @param s The s component of the permit signature.\\n     * @custom:requirement `amountA` must be greater than or equal to `amountAMin`.\\n     * @custom:requirement `amountB` must be greater than or equal to `amountBMin`.\\n     * @return amountA The amount of tokenA received.\\n     * @return amountB The amount of tokenB received.\\n     */\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    /**\\n     * @notice Removes liquidity from the pool and the caller receives ETH without pre-approval.\\n     * @param token The pool token.\\n     * @param liquidity The amount of liquidity to remove.\\n     * @param amountTokenMin The minimum amount of token that must be received for the transaction\\n     * not to revert.\\n     * @param amountETHMin The minimum amount of ETH that must be received for the transaction not\\n     * to revert.\\n     * @param to The recipient of the underlying asset.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @param approveMax Boolean value indicating if the approval amount in the signature\\n     * is for liquidity or uint(-1).\\n     * @param v The v component of the permit signature.\\n     * @param r The r component of the permit signature.\\n     * @param s The s component of the permit signature.\\n     * @return amountToken The amount fo token received.\\n     * @return amountETH The amount of ETH received.\\n     */\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    /**\\n     * @notice Swaps an exact amount of input tokens for as many output tokens as possible, along\\n     * with the route determined by the path.\\n     * @param amountIn The amount of input tokens to send.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction\\n     * not to revert.\\n     * @param path The array of token addresses, where pools for each pair of addresses must exist and\\n     * have liquidity.\\n     * @param to The recipient of the output tokens.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @custom:requirement The value at the last index of `amounts` (from `SomaSwapLibrary.getAmountsOut()`) must be greater than or equal to `amountOutMin`.\\n     * @return amounts The input token amount and all subsequent output token amounts.\\n     */\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    /**\\n     * @notice Caller receives an exact amount of output tokens for as few input input tokens as possible, along\\n     * with the route determined by the path.\\n     * @param amountOut The amount of output tokens to receive.\\n     * @param amountInMax The maximum amount of input tokens that can be required before the transaction reverts.\\n     * @param path The array of token addresses, where pools for each pair of addresses must exist and\\n     * have liquidity.\\n     * @param to The recipient of the output tokens.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @custom:requirement The value of the first index of `amounts` (from `SomaSwapLibrary.getAmountsIn()`) must be less than or equal to `amountInMax`.\\n     * @return amounts The input token amount and all subsequent output token amounts.\\n     */\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    /**\\n     * @notice Swaps an exact amount of ETH for as many output tokens as possible, along with the route\\n     * determined by the path.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path The array of token addresses, where pools for each pair of addresses must exist and\\n     * have liquidity.\\n     * @param to The recipient of the output tokens.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @custom:requirement The first element of `path` must be equal to the WETH address.\\n     * @custom:requirement The last element of `amounts` (from `SomaSwapLibrary.getAmountsOut()`) must be greater than or equal to `amount0Min`.\\n     * @return amounts The input token amount and all subsequent output token amounts.\\n     */\\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amounts);\\n\\n    /**\\n     * @notice Caller receives an exact amount of ETH for as few input tokens as possible, along with the route\\n     * determined by the path.\\n     * @param amountOut The amount of ETH to receive.\\n     * @param amountInMax The maximum amount of input tokens that can be required before the transaction reverts.\\n     * @param path The array of token addresses, where pools for each pair of addresses must exist and\\n     * have liquidity.\\n     * @param to The recipient of the output tokens.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @custom:requirement The last element of `path` must be equal to the WETH address.\\n     * @custom:requirement The first element of `amounts` (from `SomaSwapLibrary.getAmountsIn()`) must be less than or equal to `amountInMax`.\\n     * @return amounts The input token amount and all subsequent output token amounts.\\n     */\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    /**\\n     * @notice Swaps an exact amount of tokens for as much ETH as possible, along with the route determined\\n     * by the path.\\n     * @param amountIn The amount of input tokens to send.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path The array of token addresses, where pools for each pair of addresses must exist and\\n     * have liquidity.\\n     * @param to The recipient of the output tokens.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @custom:requirement The last element of `path` must be equal to the WETH address.\\n     * @custom:requirement The last element of `amounts` (from `SomaSwapLibrary.getAmountsOut()`) must be greater than or\\n     * equal to `amountOutMin`.\\n     * @return amounts The input token amount and all subsequent output token amounts.\\n     */\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    /**\\n     * @notice Caller receives an exact amount of tokens for as little ETH as possible, along with the route determined\\n     * by the path.\\n     * @param amountOut The amount of tokens to receive.\\n     * @param path The array of token addresses, where pools for each pair of addresses must exist and\\n     * have liquidity.\\n     * @param to The recipient of the output tokens.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @custom:requirement The first element of `path` must be equal to the WETH address.\\n     * @custom:requirement The first element of `amounts` (from `SomaSwapLibrary.getAmountIn()`) must be less than or equal\\n     * to the `msg.value`.\\n     * @return amounts The input token amount and all subsequent output token amounts.\\n     */\\n    function swapETHForExactTokens(uint256 amountOut, address[] calldata path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amounts);\\n\\n    /**\\n     * @notice Given some asset amount and reserves, returns the amount of the other asset representing equivalent value.\\n     * @param amountA The amount of token0.\\n     * @param reserveA The reserves of token0.\\n     * @param reserveB The reserves of token1.\\n     * @custom:requirement `amountA` must be greater than zero.\\n     * @custom:requirement `reserveA` must be greater than zero.\\n     * @custom:requirement `reserveB` must be greater than zero.\\n     * @return amountB The amount of token1.\\n     */\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\n\\n    /**\\n     * @notice Given some asset amount and reserves, returns the maximum output amount of the other asset (accounting for fees).\\n     * @param amountIn The amount of the input token.\\n     * @param reserveIn The reserves of the input token.\\n     * @param reserveOut The reserves of the output token.\\n     * @custom:requirement `amountIn` must be greater than zero.\\n     * @custom:requirement `reserveIn` must be greater than zero.\\n     * @custom:requirement `reserveOut` must be greater than zero.\\n     * @return amountOut The amount of the output token.\\n     */\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut)\\n        external\\n        pure\\n        returns (uint256 amountOut);\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount (accounting for fees).\\n     * @param amountOut The amount of the output token.\\n     * @param reserveIn The reserves of the input token.\\n     * @param reserveOut The reserves of the output token.\\n     * @custom:requirement `amountOut` must be greater than zero.\\n     * @custom:requirement `reserveIn` must be greater than zero.\\n     * @custom:requirement `reserveOut` must be greater than zero.\\n     * @return amountIn The required input amount of the input asset.\\n     */\\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut)\\n        external\\n        pure\\n        returns (uint256 amountIn);\\n\\n    /**\\n     * @notice Given an input asset amount and an array of token addresses, calculates all subsequent maximum output token amounts\\n     * calling `getReserves()` for each pair of token addresses in the path in turn, and using these to call `getAmountOut()`.\\n     * @param amountIn The amount of the input token.\\n     * @param path The array of token addresses, where pools for each pair of addresses must exist and\\n     * have liquidity.\\n     * @custom:requirement `path` length must be greater than or equal to 2.\\n     * @return amounts The maximum output amounts.\\n     */\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    /**\\n     * @notice Given an output asset amount and an array of token addresses, calculates all preceding minimum input token amounts\\n     * by calling `getReserves()` for each pair of token addresses in the path in turn, and using these to call `getAmountIn()`.\\n     * @param amountOut The amount of the output token.\\n     * @param path The array of token addresses, where pools for each pair of addresses must exist and\\n     * have liquidity.\\n     * @custom:requirement `path` length must be greater than or equal to 2.\\n     * @return amounts The required input amounts.\\n     */\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    /**\\n     * @notice See {ISomaSwapRouter-removeLiquidityETH} - Identical but succeeds for tokens that take a fee on transfer.\\n     * @param token The pool token.\\n     * @param liquidity The amount of liquidity tokens to remove.\\n     * @param amountTokenMin The minimum amount of token that must be received for the transaction not to revert.\\n     * @param amountETHMin The minimum amount of ETH that must be received for the transaction not to revert.\\n     * @param to Recipient of the underlying assets.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @custom:requirement There must be enough liquidity for both token amounts to be removed.\\n     * @return amountETH The amount of ETH received.\\n     */\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    /**\\n     * @notice See {ISomaSwapRouter-removeLiquidityETHWithPermit} - Identical but succeeds for tokens that take a fee on transfer.\\n     * @param token The pool token.\\n     * @param liquidity The amount of liquidity tokens to remove.\\n     * @param amountTokenMin The minimum amount of token that must be received for the transaction not to revert.\\n     * @param amountETHMin The minimum amount of ETH that must be received for the transaction not to revert.\\n     * @param to The recipient of the underlying assets.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @param approveMax Whether or not the approval amount in the signature is for liquidity or uint(-1).\\n     * @param v The v component of the permit signature.\\n     * @param r The r component of the permit signature.\\n     * @param s The s component of the permit signature.\\n     * @custom:requirement There must be enough liquidity for both token amounts to be removed.\\n     * @return amountETH The amount of ETH received.\\n     */\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    /**\\n     * @notice See {ISomaSwapRouter-swapExactTokensForTokens} - Identical but succeeds for tokens that take a fee on transfer.\\n     * @param amountIn The amount of input tokens to send.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path The array of token addresses, where pools for each pair of addresses must exist and\\n     * have liquidity.\\n     * @param to The recipient of the underlying assets.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     */\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    /**\\n     * @notice See {ISomaSwapRouter-swapExactETHForTokens} - Identical but succeeds for tokens that take a fee on transfer.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path The array of token addresses, where pools for each pair of addresses must exist and\\n     * have liquidity.\\n     * @param to The recipient of the output tokens.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @custom:requirement The first element of `path` must be equal to the WETH address.\\n     * @custom:requirement The increase in balance of the last element of `path` for the `to` address must be greater than\\n     * or equal to `amountOutMin`.\\n     */\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    /**\\n     * @notice See {ISomaSwapRouter-swapExactTokensForETH} - Identical but succeeds for tokens that take a fee on transfer.\\n     * @param amountIn The amount of input tokens to send.\\n     * @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\\n     * @param path The array of token addresses, where pools for each pair of addresses must exist and\\n     * have liquidity.\\n     * @param to The recipient of the output tokens.\\n     * @param deadline The unix timestamp after which the transaction will revert.\\n     * @custom:requirement The last element of `path` must be equal to the WETH address.\\n     * @custom:requirement The WETH balance of the router must be greater than or equal to `amountOutMin`.\\n     */\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/soma/SomaSwap/core/interfaces/ISomaSwapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.18;\\n\\n/**\\n * @title SOMA Swap Factory Contract.\\n * @author SOMA.finance\\n * @notice Interface for the {SomaSwapFactory} contract.\\n */\\ninterface ISomaSwapFactory {\\n    /**\\n     * @notice Emitted when a pair is created via `createPair()`.\\n     * @param token0 The address of token0.\\n     * @param token1 The address of token1.\\n     * @param pair The address of the created pair.\\n     */\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    /**\\n     * @notice Emitted when the `feeTo` address is updated from `prevFeeTo` to `newFeeTo` by `sender`.\\n     * @param prevFeeTo The address of the previous fee to.\\n     * @param prevFeeTo The address of the new fee to.\\n     * @param sender The address of the message sender.\\n     */\\n    event FeeToUpdated(address indexed prevFeeTo, address indexed newFeeTo, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when a router is added by `sender`.\\n     * @param router The address of the router added.\\n     * @param sender The address of the message sender.\\n     */\\n    event RouterAdded(address indexed router, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when a router is removed by `sender`.\\n     * @param router The address of the router removed.\\n     * @param sender The address of the message sender.\\n     */\\n    event RouterRemoved(address indexed router, address indexed sender);\\n\\n    /**\\n     * @notice Returns SOMA Swap Factory Create Pair Role.\\n     * @dev Returns `keccak256('SomaSwapFactory.CREATE_PAIR_ROLE')`.\\n     */\\n    function CREATE_PAIR_ROLE() external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns SOMA Swap Factory Fee Setter Role.\\n     * @dev Returns `keccak256('SomaSwapFactory.FEE_SETTER_ROLE')`.\\n     */\\n    function FEE_SETTER_ROLE() external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns SOMA Swap Factory Manage Router Role.\\n     * @dev Returns `keccak256('SomaSwapFactory.MANAGE_ROUTER_ROLE')`.\\n     */\\n    function MANAGE_ROUTER_ROLE() external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the address where fees from the exchange get transferred to.\\n     */\\n    function feeTo() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the pair contract for tokenA and tokenB if it exists, else returns address(0).\\n     * @dev Returns the address of the pair for `tokenA` and `tokenB` if it exists, else returns `address(0)`.\\n     * @param tokenA The token0 of the pair.\\n     * @param tokenB The token1 of the pair.\\n     * @return pair The address of the pair.\\n     */\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    /**\\n     * @notice Returns the nth pair created through the factory, or address(0).\\n     * @dev Returns the `n-th` pair (0 indexed) created through the factory, or `address(0)`.\\n     * @return pair The address of the pair.\\n     */\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    /**\\n     * @notice Returns the total number of pairs created through the factory so far.\\n     */\\n    function allPairsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns True if an address is an existing router, else returns False.\\n     * @param target The address to return true if it an existing router, or false if it is not.\\n     * @return Boolean value indicating if the address is an existing router.\\n     */\\n    function isRouter(address target) external view returns (bool);\\n\\n    /**\\n     * @notice Adds an address as a new router. A router is able to tell a pair who is swapping.\\n     * @param router The address to add as a new router.\\n     * @custom:emits RouterAdded\\n     * @custom:requirement The function caller must have the MANAGE_ROUTER_ROLE.\\n     */\\n    function addRouter(address router) external;\\n\\n    /**\\n     * @notice Removes an address from the list of routers. A router is able to tell a pair who is swapping.\\n     * @param router The address to remove from the list of routers.\\n     * @custom:emits RouterRemoved\\n     * @custom:requirement The function caller must have the MANAGE_ROUTER_ROLE.\\n     */\\n    function removeRouter(address router) external;\\n\\n    /**\\n     * @notice Creates a new pair.\\n     * @dev Creates a pair for `tokenA` and `tokenB` if one does not exist already.\\n     * @param tokenA The address of token0 of the pair.\\n     * @param tokenB The address of token1 of the pair.\\n     * @custom:emits PairCreated\\n     * @custom:requirement The function caller must have the CREATE_PAIR_ROLE.\\n     * @custom:requirement `tokenA` must not be equal to `tokenB`.\\n     * @custom:requirement `tokenA` must not be equal to `address(0)`.\\n     * @custom:requirement `tokenA` and `tokenB` must not be an existing pair.\\n     * @custom:requirement The system must not be paused.\\n     * @return pair The address of the pair created.\\n     */\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    /**\\n     * @notice Sets a new `feeTo` address.\\n     * @param _feeTo The new address to receive the protocol fees.\\n     * @custom:emits FeeToUpdated\\n     * @custom:requirement The function caller must have the FEE_SETTER_ROLE.\\n     * @custom:requirement The system must not be paused.\\n     */\\n    function setFeeTo(address _feeTo) external;\\n}\\n\"\r\n    },\r\n    \"contracts/soma/SomaGuard/ISomaGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title SOMA Guard Contract.\\n * @author SOMA.finance\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n * @notice A contract to batch update account privileges.\\n */\\ninterface ISomaGuard {\\n    /**\\n     * @notice Emitted when privileges for a 2D array of accounts are updated.\\n     * @param accounts The 2D array of addresses.\\n     * @param privileges The array of privileges.\\n     * @param sender The address of the message sender.\\n     */\\n    event BatchUpdate(address[][] accounts, bytes32[] privileges, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when privileges for an array of accounts are updated.\\n     * @param accounts The array of addresses.\\n     * @param access The array of privileges.\\n     * @param sender The address of the message sender.\\n     */\\n    event BatchUpdateSingle(address[] accounts, bytes32[] access, address indexed sender);\\n\\n    /**\\n     * @notice Returns the default privileges of the SomaGuard contract.\\n     * @dev Returns bytes32(uint256(2 ** 64 - 1)).\\n     */\\n    function DEFAULT_PRIVILEGES() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the operator role of the SomaGuard contract.\\n     * @dev Returns keccak256('SomaGuard.OPERATOR_ROLE').\\n     */\\n    function OPERATOR_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the privilege of an account.\\n     * @param account The account to return the privilege of.\\n     */\\n    function privileges(address account) external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns True if an account passes a query, where query is the desired privileges.\\n     * @param account The account to check the privileges of.\\n     * @param query The desired privileges to check for.\\n     */\\n    function check(address account, bytes32 query) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the privileges for each account.\\n     * @param accounts_ The array of accounts return the privileges of.\\n     * @return privileges_ The array of privileges.\\n     */\\n    function batchFetch(address[] calldata accounts_) external view returns (bytes32[] memory privileges_);\\n\\n    /**\\n     * @notice Updates the privileges of an array of accounts.\\n     * @param accounts_ The array of addresses to accumulate privileges of.\\n     * @param privileges_ The array of privileges to update the array of accounts with.\\n     * @custom:emits BatchUpdateSingle\\n     * @custom:requirement The length of `accounts_` must be equal to the length of `privileges_`.\\n     * @custom:requirement The length of `accounts_` must be greater than zero.\\n     * @custom:requirement The function caller must have the OPERATOR_ROLE.\\n     * @return True if the batch update was successful.\\n     */\\n    function batchUpdate(address[] calldata accounts_, bytes32[] calldata privileges_) external returns (bool);\\n\\n    /**\\n     * @notice Updates the privileges of a 2D array of accounts, where the child array of accounts are all assigned to the\\n     * same privileges.\\n     * @param accounts_ The array of addresses to accumulate privileges of.\\n     * @param privileges_ The array of privileges to update the 2D array of accounts with.\\n     * @custom:emits BatchUpdate\\n     * @custom:requirement The length of `accounts_` must be equal to the length of `privileges_`.\\n     * @custom:requirement The length of `accounts_` must be greater than zero.\\n     * @custom:requirement The function caller must have the OPERATOR_ROLE.\\n     * @return True if the batch update was successful.\\n     */\\n    function batchUpdate(address[][] calldata accounts_, bytes32[] calldata privileges_) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/soma/Lockdrop/ILockdropFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ILockdrop.sol\\\";\\n\\n/**\\n * @title SOMA Lockdrop Factory Contract.\\n * @author SOMA.finance.\\n * @notice A factory that produces Lockdrop contracts.\\n */\\ninterface ILockdropFactory {\\n    /**\\n     * @notice Emitted when a Lockdrop is created.\\n     * @param id The ID of the Lockdrop.\\n     * @param asset The delegation asset of the Lockdrop.\\n     * @param instance The address of the created Lockdrop.\\n     */\\n    event LockdropCreated(uint256 id, address asset, address instance);\\n\\n    /**\\n     * @notice The Lockdrop's CREATE_ROLE.\\n     * @dev Returns keccak256('Lockdrop.CREATE_ROLE').\\n     */\\n    function CREATE_ROLE() external pure returns (bytes32);\\n\\n    /**\\n     * @notice Creates a Lockdrop instance.\\n     * @param asset The address of the delegation asset.\\n     * @param withdrawTo The address that delegated assets will be withdrawn to.\\n     * @param dateConfig The date configuration of the Lockdrop.\\n     * @custom:emits LockdropCreated\\n     * @custom:requirement `asset` must not be equal to address zero.\\n     * @custom:requirement `withdrawTo` must not be equal to address zero.\\n     * @custom:requirement The function caller must have the CREATE_ROLE.\\n     */\\n    function create(address asset, address withdrawTo, ILockdrop.DateConfig calldata dateConfig) external;\\n}\\n\"\r\n    },\r\n    \"contracts/soma/Lockdrop/ILockdrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SOMA Lockdrop Contract.\\n * @author SOMA.finance\\n * @notice A fund raising contract for bootstrapping DEX liquidity pools.\\n */\\ninterface ILockdrop {\\n    /**\\n     * @notice Emitted when the {DelegationConfig} is updated.\\n     * @param prevConfig The previous delegation configuration.\\n     * @param newConfig The new delegation configuration.\\n     * @param sender The message sender that triggered the event.\\n     */\\n    event DelegationConfigUpdated(DelegationConfig prevConfig, DelegationConfig newConfig, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when the {withdrawTo} address is updated.\\n     * @param prevTo The previous withdraw to address.\\n     * @param newTo The new withdraw to address.\\n     * @param sender The message sender that triggered the event.\\n     */\\n    event WithdrawToUpdated(address prevTo, address newTo, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when a delegation is added to a pool.\\n     * @param poolId The pool ID.\\n     * @param amount The delegation amount denominated in the delegation asset.\\n     * @param sender The message sender that triggered the event.\\n     */\\n    event DelegationAdded(bytes32 indexed poolId, uint256 amount, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when someone calls {moveDelegation}, transferring their delegation to a different pool.\\n     * @param fromPoolId The pool ID of the source pool.\\n     * @param toPoolId The pool ID of the destination pool.\\n     * @param amount The amount of the delegation asset to move.\\n     * @param sender TThe message sender that triggered the event.\\n     */\\n    event DelegationMoved(bytes32 indexed fromPoolId, bytes32 indexed toPoolId, uint256 amount, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when the {DateConfig} is updated.\\n     * @param prevDateConfig The previous date configuration.\\n     * @param newDateConfig The new date configuration.\\n     * @param sender The message sender that triggered the event.\\n     */\\n    event DatesUpdated(DateConfig prevDateConfig, DateConfig newDateConfig, address indexed sender);\\n\\n    /**\\n     * @notice Emitted when the {Pool} is updated.\\n     * @param poolId The pool ID.\\n     * @param requiredPrivileges The new required privileges.\\n     * @param enabled Boolean indicating if the pool is enabled.\\n     * @param sender The message sender that triggered the event.\\n     */\\n    event PoolUpdated(bytes32 indexed poolId, bytes32 requiredPrivileges, bool enabled, address indexed sender);\\n\\n    /**\\n     * @notice Date Configuration structure. These phases represent the 3 phases that the lockdrop\\n     * will go through, and will change the functionality of the lockdrop at each phase.\\n     * @param phase1 The unix timestamp for the start of phase1.\\n     * @param phase2 The unix timestamp for the start of phase2.\\n     * @param phase3 The unix timestamp for the start of phase3.\\n     */\\n    struct DateConfig {\\n        uint48 phase1;\\n        uint48 phase2;\\n        uint48 phase3;\\n    }\\n\\n    /**\\n     * @notice Pool structure. Each pool will bootstrap liquidity for an upcoming DEX pair.\\n     * E.g: sTSLA/USDC\\n     * @param enabled Boolean indicating if the pool is enabled.\\n     * @param requiredPrivileges The required privileges of the pool.\\n     * @param balances The mapping of user addresses to delegation balances.\\n     */\\n    struct Pool {\\n        bool enabled;\\n        bytes32 requiredPrivileges;\\n        mapping(address => uint256) balances;\\n    }\\n\\n    /**\\n     * @notice Delegation Configuration structure. Each user will specify their own Delegation Configuration.\\n     * @param percentLocked The percentage of user rewards to delegate to phase2.\\n     * @param lockDuration The lock duration of the user rewards.\\n     */\\n    struct DelegationConfig {\\n        uint8 percentLocked;\\n        uint8 lockDuration;\\n    }\\n\\n    /**\\n     * @notice Returns the Lockdrop Global Admin Role.\\n     * @dev Equivalent to `keccak256('Lockdrop.GLOBAL_ADMIN_ROLE')`.\\n     */\\n    function GLOBAL_ADMIN_ROLE() external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the Lockdrop Local Admin Role.\\n     * @dev Equivalent to `keccak256(abi.encodePacked(address(this), GLOBAL_ADMIN_ROLE))`.\\n     */\\n    function LOCAL_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the ID of the Lockdrop.\\n     */\\n    function id() external view returns (uint256);\\n\\n    /**\\n     * @notice The address of the Lockdrop's delegation asset.\\n     */\\n    function asset() external view returns (address);\\n\\n    /**\\n     * @notice The date configuration of the Lockdrop.\\n     */\\n    function dateConfig() external view returns (DateConfig memory);\\n\\n    /**\\n     * @notice The address where the delegated funds will be withdrawn to.\\n     */\\n    function withdrawTo() external view returns (address);\\n\\n    /**\\n     * @notice Initialize function for the Lockdrop contract.\\n     * @param _id The ID of the Lockdrop.\\n     * @param _asset The address of the delegation asset.\\n     * @param _withdrawTo The address that receives withdrawn assets.\\n     * @param _initDateConfig The initial date configuration.\\n     */\\n    function initialize(uint256 _id, address _asset, address _withdrawTo, DateConfig calldata _initDateConfig)\\n        external;\\n\\n    /**\\n     * @notice Updates the Lockdrop's date configuration.\\n     * @param newConfig The updated date configuration.\\n     * @custom:emits DatesUpdated\\n     * @custom:requirement The function caller must have the GLOBAL_ADMIN_ROLE or LOCAL_ADMIN_ROLE.\\n     */\\n    function updateDateConfig(DateConfig calldata newConfig) external;\\n\\n    /**\\n     * @notice Sets the `withdrawTo` address.\\n     * @param account The updated address to receive withdrawn funds.\\n     * @custom:emits WithdrawToUpdated\\n     * @custom:requirement The function caller must be the master or subMaster.\\n     * @custom:requirement `account` must not be equal to address zero.\\n     */\\n    function setWithdrawTo(address account) external;\\n\\n    /**\\n     * @notice Returns the delegation balance of an account, given a pool ID.\\n     * @param poolId The pool ID to return the account's balance of.\\n     * @param account The account to return the balance of.\\n     * @return The delegation balance of `account` for the `poolId` pool.\\n     */\\n    function balanceOf(bytes32 poolId, address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the delegation configuration of an account.\\n     * @param account The account to return the delegation configuration of.\\n     * @return The delegation configuration of the Lockdrop.\\n     */\\n    function delegationConfig(address account) external view returns (DelegationConfig memory);\\n\\n    /**\\n     * @notice Returns a boolean indicating if a pool is enabled.\\n     * @param poolId The pool ID to check the enabled status of.\\n     * @return True if the pool is enabled, False if the pool is disabled.\\n     */\\n    function enabled(bytes32 poolId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the required privileges of the pool. These privileges are required in order to\\n     * delegate.\\n     * @param poolId The pool ID to check the enabled status of.\\n     * @custom:requirement The pool must be enabled.\\n     * @return The required privileges of the pool.\\n     */\\n    function requiredPrivileges(bytes32 poolId) external view returns (bytes32);\\n\\n    /**\\n     * @notice Updates the lockdrop pool parameters.\\n     * @param _poolId The ID of the pool to update.\\n     * @param _requiredPrivileges The updated required privileges of the pool.\\n     * @param _enabled The updated enabled or disabled state of the pool.\\n     * @custom:emits PoolUpdated\\n     * @custom:requirement The function caller must have the GLOBAL_ADMIN_ROLE or LOCAL_ADMIN_ROLE.\\n     */\\n    function updatePool(bytes32 _poolId, bytes32 _requiredPrivileges, bool _enabled) external;\\n\\n    /**\\n     * @notice Withdraws tokens from the Lockdrop contract to the `withdrawTo` address.\\n     * @param amount The amount of tokens to be withdrawn.\\n     * @custom:requirement The function caller must have the GLOBAL_ADMIN_ROLE or LOCAL_ADMIN_ROLE.\\n     */\\n    function withdraw(uint256 amount) external;\\n\\n    /**\\n     * @notice Moves the accounts' delegated tokens from one pool to another.\\n     * @param fromPoolId The ID of the pool that the delegation will be moved from.\\n     * @param toPoolId The ID of the pool that the delegation will be moved to.\\n     * @param amount The amount of tokens to be moved.\\n     * @custom:emits DelegationMoved\\n     * @custom:requirement `fromPoolId` must not be equal to `toPoolId`.\\n     * @custom:requirement The Lockdrop's `phase1` must have started already.\\n     * @custom:requirement The Lockdrop's `phase2` must not have ended yet.\\n     * @custom:requirement `amount` must be greater than zero.\\n     * @custom:requirement The `fromPoolId` pool must be enabled.\\n     * @custom:requirement The `toPoolId` pool must be enabled.\\n     * @custom:requirement The delegation balance of the caller for the `fromPoolId` pool must be greater than\\n     * or equal to `amount`.\\n     * @custom:requirement The function caller must have the required privileges of the `fromPoolId` pool.\\n     * @custom:requirement The function caller must have the required privileges of the `toPoolId` pool.\\n     * @custom:requirement The contracts must not be paused.\\n     */\\n    function moveDelegation(bytes32 fromPoolId, bytes32 toPoolId, uint256 amount) external;\\n\\n    /**\\n     * @notice Delegates tokens to the a specific pool.\\n     * @param poolId The ID of the pool to receive the delegation.\\n     * @param amount The amount of tokens to be delegated.\\n     * @custom:emits DelegationAdded\\n     * @custom:requirement `amount` must be greater than zero.\\n     * @custom:requirement The `poolId` pool must be enabled.\\n     * @custom:requirement The `poolId` pool's phase1 must have started already.\\n     * @custom:requirement The `poolId` pool's phase2 must not have ended yet.\\n     * @custom:requirement The function caller must have the `poolId` pool's required privileges.\\n     * @custom:requirement The contracts must not be paused.\\n     */\\n    function delegate(bytes32 poolId, uint256 amount) external;\\n\\n    /**\\n     * @notice Updates the delegation configuration of an account.\\n     * @param newConfig The updated delegation configuration of the account.\\n     * @custom:emits DelegationConfigUpdated\\n     * @custom:requirement The ``newConfig``'s percent locked must be a valid percentage.\\n     * @custom:requirement The Lockdrop's phase1 must have started already.\\n     * @custom:requirement Given the Lockdrop's phase2 has ended, ``newConfig``'s percent locked must be\\n     * greater than the existing percent locked for the account.\\n     * @custom:requirement Given the Lockdrop's phase2 has ended, ``newConfig``'s lock duration must be equal\\n     * to the existing lock duration for the account.\\n     * @custom:requirement The contracts must not be paused.\\n     * @custom:requirement ``newConfig``'s phase1 must be less than or equal to phase2.\\n     * @custom:requirement ``newConfig``'s phase2 must be less than or equal to phase3.\\n     */\\n    function updateDelegationConfig(DelegationConfig calldata newConfig) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"prevRole\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DeployRoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"FunctionCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"functionCalls\",\"type\":\"bytes[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TemplateCloned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"functionCalls\",\"type\":\"bytes[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TemplateDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TemplateDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TemplateEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TemplateVersionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TemplateVersionDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TemplateVersionUndeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUNCTION_CALL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGE_TEMPLATE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOMA\",\"outputs\":[{\"internalType\":\"contract ISOMA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_RECOVERY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"functionCalls\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"cloneTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"}],\"name\":\"deployRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"functionCalls\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"deployTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"deployedByFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"deploymentInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"block\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"functionCalls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"cloned\",\"type\":\"bool\"}],\"internalType\":\"struct ITemplateFactory.DeploymentInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"deprecateVersion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"}],\"name\":\"disableTemplate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"}],\"name\":\"enableTemplate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"functionCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"initCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"}],\"name\":\"latestVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"predictCloneAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"predictDeployAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"}],\"name\":\"templateInstances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"undeprecateVersion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_deployRole\",\"type\":\"bytes32\"}],\"name\":\"updateDeployRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initialPart\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"totalParts\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"uploadTemplate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"part\",\"type\":\"bytes\"}],\"name\":\"uploadTemplatePart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"version\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"deprecated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"creationCode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"totalParts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partsUploaded\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"instances\",\"type\":\"address[]\"}],\"internalType\":\"struct ITemplateFactory.Version\",\"name\":\"version_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TemplateFactory", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}