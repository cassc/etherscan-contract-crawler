{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20PermitUpgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@quadrata/contracts/interfaces/IQuadPassportStore.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity >= 0.5.0;\\n\\ninterface IQuadPassportStore {\\n\\n    /// @dev Attribute store infomation as it relates to a single attribute\\n    /// `attrKeys` Array of keys defined by (wallet address/DID + data Type)\\n    /// `value` Attribute value\\n    /// `epoch` timestamp when the attribute has been verified by an Issuer\\n    /// `issuer` address of the issuer issuing the attribute\\n    struct Attribute {\\n        bytes32 value;\\n        uint256 epoch;\\n        address issuer;\\n    }\\n\\n    /// @dev AttributeSetterConfig contains configuration for setting attributes for a Passport holder\\n    /// @notice This struct is used to abstract setAttributes function parameters\\n    /// `attrKeys` Array of keys defined by (wallet address/DID + data Type)\\n    /// `attrValues` Array of attributes values\\n    /// `attrTypes` Array of attributes types (ex: [keccak256(\\\"DID\\\")]) used for validation\\n    /// `did` did of entity\\n    /// `tokenId` tokenId of the Passport\\n    /// `issuedAt` epoch when the passport has been issued by the Issuer\\n    /// `verifiedAt` epoch when the attribute has been attested by the Issuer\\n    /// `fee` Fee (in Native token) to pay the Issuer\\n    struct AttributeSetterConfig {\\n        bytes32[] attrKeys;\\n        bytes32[] attrValues;\\n        bytes32[] attrTypes;\\n        bytes32 did;\\n        uint256 tokenId;\\n        uint256 verifiedAt;\\n        uint256 issuedAt;\\n        uint256 fee;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IAuction {\\n  function bid(address pool, uint256 amount) external;\\n\\n  function ownerOfDebt(address pool) external view returns (address);\\n\\n  /// @notice States of auction\\n  /// @dev None: A pool is not default and auction can't be started\\n  /// @dev NotStarted: A pool is default and auction can be started\\n  /// @dev Active: An auction is started\\n  /// @dev Finished: An auction is finished but NFT is not claimed\\n  /// @dev Closed: An auction is finished and NFT is claimed\\n  enum State {\\n    None,\\n    NotStarted,\\n    Active,\\n    Finished,\\n    Closed\\n  }\\n\\n  function state(address pool) external view returns (State);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IInterestRateModel {\\n  function getBorrowRate(\\n    uint256 balance,\\n    uint256 totalBorrows,\\n    uint256 totalReserves\\n  ) external view returns (uint256);\\n\\n  function utilizationRate(\\n    uint256 balance,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) external pure returns (uint256);\\n\\n  function getSupplyRate(\\n    uint256 balance,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactor\\n  ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IQuadPassportStore} from '@quadrata/contracts/interfaces/IQuadPassportStore.sol';\\n\\ninterface IPoolFactory {\\n  function getPoolSymbol(address currency, address manager) external view returns (string memory);\\n\\n  function isPool(address pool) external view returns (bool);\\n\\n  function getPoolsByMarket(address market) external view returns (address[] memory);\\n\\n  function interestRateModel() external view returns (address);\\n\\n  function auction() external view returns (address);\\n\\n  function treasury() external view returns (address);\\n\\n  function reserveFactor() external view returns (uint256);\\n\\n  function insuranceFactor() external view returns (uint256);\\n\\n  function warningUtilization() external view returns (uint256);\\n\\n  function provisionalRepaymentUtilization() external view returns (uint256);\\n\\n  function provisionalDefaultUtilization() external view returns (uint256);\\n\\n  function warningGracePeriod() external view returns (uint256);\\n\\n  function maxInactivePeriod() external view returns (uint256);\\n\\n  function periodToStartAuction() external view returns (uint256);\\n\\n  function owner() external view returns (address);\\n\\n  function closePool() external;\\n\\n  function burnStake() external;\\n\\n  function getPools() external view returns (address[] memory);\\n\\n  function getKYCAttributes(\\n    address lender\\n  ) external returns (IQuadPassportStore.Attribute[] memory, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Decimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary Decimal {\\n  /// @notice Number one as 18-digit decimal\\n  uint256 internal constant ONE = 1e18;\\n\\n  /**\\n   * @notice Internal function for 10-digits decimal division\\n   * @param number Integer number\\n   * @param decimal Decimal number\\n   * @return Returns multiplied numbers\\n   */\\n  function mulDecimal(uint256 number, uint256 decimal) internal pure returns (uint256) {\\n    return (number * decimal) / ONE;\\n  }\\n\\n  /**\\n   * @notice Internal function for 10-digits decimal multiplication\\n   * @param number Integer number\\n   * @param decimal Decimal number\\n   * @return Returns integer number divided by second\\n   */\\n  function divDecimal(uint256 number, uint256 decimal) internal pure returns (uint256) {\\n    return (number * ONE) / decimal;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {MathUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol';\\nimport {SafeERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport {IERC20PermitUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol';\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport {PoolBaseInfo} from './PoolBaseInfo.sol';\\nimport {Decimal} from '../libraries/Decimal.sol';\\nimport {IAuction} from '../interfaces/IAuction.sol';\\n\\nerror NEL(uint256 available);\\nerror OG();\\nerror OM();\\nerror OA();\\nerror OF();\\nerror AZ();\\nerror MTB(uint256 borrowed, uint256 repay);\\n\\nerror CDC();\\n\\n/// @notice This contract describes basic logic of the Pool - everything related to borrowing\\nabstract contract PoolBase is PoolBaseInfo {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n  using Decimal for uint256;\\n\\n  // MODIFIERS\\n\\n  /// @notice Modifier to accrue interest and check that pool is currently active (possibly in warning)\\n  modifier onlyActiveAccrual() {\\n    _accrueInterest();\\n    State currentState = _state(_info);\\n    require(\\n      currentState == State.Active ||\\n        currentState == State.Warning ||\\n        currentState == State.ProvisionalDefault,\\n      'PIA'\\n    );\\n    _;\\n  }\\n\\n  /// @notice Modifier for functions restricted to manager\\n  modifier onlyManager() {\\n    if (msg.sender != manager) revert OM();\\n    _;\\n  }\\n\\n  /// @notice Modifier for functions restricted to protocol governor\\n  modifier onlyGovernor() {\\n    if (msg.sender != factory.owner()) revert OG();\\n    _;\\n  }\\n\\n  /// @notice Modifier for functions restricted to auction contract\\n  modifier onlyAuction() {\\n    if (msg.sender != factory.auction()) revert OA();\\n    _;\\n  }\\n\\n  /// @notice Modifier for the functions restricted to factory\\n  modifier onlyFactory() {\\n    if (msg.sender != address(factory)) revert OF();\\n    _;\\n  }\\n\\n  modifier onlyEligible(address lender) {\\n    _getKYCAttributes(lender);\\n    _;\\n  }\\n\\n  // PUBLIC FUNCTIONS\\n\\n  /// @notice Function is used to provide liquidity for Pool in exchange for cpTokens\\n  /// @dev Approval for desired amount of currency token should be given in prior\\n  /// @param currencyAmount Amount of currency token that user want to provide\\n  function provide(uint256 currencyAmount) external onlyEligible(msg.sender) {\\n    _provide(currencyAmount, msg.sender);\\n  }\\n\\n  /// @notice Function is used to provide liquidity in exchange for cpTokens to the given address\\n  /// @dev Approval for desired amount of currency token should be given in prior\\n  /// @param currencyAmount Amount of currency token that user want to provide\\n  /// @param receiver Receiver of cpTokens\\n  function provideFor(uint256 currencyAmount, address receiver) external onlyEligible(receiver) {\\n    _provide(currencyAmount, receiver);\\n  }\\n\\n  /// @notice Function is used to provide liquidity in exchange for cpTokens, using EIP2612 off-chain signed permit for currency\\n  /// @param currencyAmount Amount of currency token that user want to provide\\n  /// @param deadline Deadline for EIP2612 approval\\n  /// @param v V component of permit signature\\n  /// @param r R component of permit signature\\n  /// @param s S component of permit signature\\n  function provideWithPermit(\\n    uint256 currencyAmount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external onlyEligible(msg.sender) {\\n    IERC20PermitUpgradeable(address(currency)).permit(\\n      msg.sender,\\n      address(this),\\n      currencyAmount,\\n      deadline,\\n      v,\\n      r,\\n      s\\n    );\\n    _provide(currencyAmount, msg.sender);\\n  }\\n\\n  /// @notice Function is used to provide liquidity for Pool in exchange for cpTokens to given address, using EIP2612 off-chain signed permit for currency\\n  /// @param currencyAmount Amount of currency token that user want to provide\\n  /// @param receiver Receiver of cpTokens\\n  /// @param deadline Deadline for EIP2612 approval\\n  /// @param v V component of permit signature\\n  /// @param r R component of permit signature\\n  /// @param s S component of permit signature\\n  function provideForWithPermit(\\n    uint256 currencyAmount,\\n    address receiver,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external onlyEligible(receiver) {\\n    IERC20PermitUpgradeable(address(currency)).permit(\\n      msg.sender,\\n      address(this),\\n      currencyAmount,\\n      deadline,\\n      v,\\n      r,\\n      s\\n    );\\n    _provide(currencyAmount, receiver);\\n  }\\n\\n  /// @notice Function is used to redeem previously provided liquidity with interest, burning cpTokens\\n  /// @param tokens Amount of cpTokens to burn (MaxUint256 to burn maximal possible)\\n  function redeem(uint256 tokens) external onlyEligible(msg.sender) {\\n    _accrueInterest();\\n    uint256 exchangeRate = _storedExchangeRate();\\n    uint256 currencyAmount;\\n\\n    if (tokens == type(uint256).max) {\\n      (tokens, currencyAmount) = _maxWithdrawable(exchangeRate);\\n    } else {\\n      currencyAmount = tokens.mulDecimal(exchangeRate);\\n    }\\n\\n    _redeem(tokens, currencyAmount);\\n  }\\n\\n  /// @notice Function is used to redeem previously provided liquidity with interest, burning cpTokens\\n  /// @param currencyAmount Amount of currency to redeem (MaxUint256 to redeem maximal possible)\\n  function redeemCurrency(uint256 currencyAmount) external onlyEligible(msg.sender) {\\n    _accrueInterest();\\n\\n    uint256 exchangeRate = _storedExchangeRate();\\n    uint256 tokens;\\n    if (currencyAmount == type(uint256).max) {\\n      (tokens, currencyAmount) = _maxWithdrawable(exchangeRate);\\n    } else {\\n      tokens = currencyAmount.divDecimal(exchangeRate);\\n    }\\n    _redeem(tokens, currencyAmount);\\n  }\\n\\n  /// @notice Function is used to borrow from the pool\\n  /// @param amount Amount of currency to borrow (MaxUint256 to borrow everything available)\\n  /// @param receiver Address where to transfer currency\\n  function borrow(uint256 amount, address receiver) external onlyManager onlyActiveAccrual {\\n    uint256 available = _availableToBorrow(_info);\\n    if (amount == 0) revert AZ();\\n    if (amount == type(uint256).max) {\\n      amount = available;\\n    } else if (amount > available) {\\n      revert NEL(available);\\n    }\\n\\n    _info.principal += amount;\\n    _info.borrows += amount;\\n    _transferOut(receiver, amount);\\n\\n    _checkUtilization();\\n\\n    emit Borrowed(amount, receiver);\\n  }\\n\\n  /// @notice Function is used to repay borrowed funds\\n  /// @dev Manager can close the pool if all debt is repaid\\n  /// @param amount Amount to repay (MaxUint256 to repay all debt)\\n  function repay(uint256 amount) external onlyManager onlyActiveAccrual {\\n    uint256 borrows = _info.borrows;\\n    if (amount == type(uint256).max) {\\n      amount = borrows;\\n    } else {\\n      // require(amount <= _info.borrows, \\\"MTB\\\");\\n      if (amount > borrows) revert MTB(amount, borrows);\\n    }\\n\\n    _transferIn(msg.sender, amount);\\n\\n    if (amount > borrows - _info.principal) {\\n      _info.principal = borrows - amount;\\n    }\\n    _info.borrows -= amount;\\n\\n    _checkUtilization();\\n\\n    emit Repaid(amount);\\n  }\\n\\n  /// @notice Function is used to close pool\\n  /// @dev Governor can close the pool at anytime\\n  /// @dev Pool closes after auction ends by `processDebtClaim()` function\\n\\n  function close() external {\\n    _accrueInterest();\\n    /// @dev Link to governor address\\n    address governor = factory.owner();\\n\\n    bool governorClosing = msg.sender == governor;\\n\\n    require(governorClosing, 'SCC');\\n    _close();\\n  }\\n\\n  /// @notice Function is used to distribute insurance and close pool after period to start auction passed\\n  /// @dev If pool is defaulting, auction is not started and period to start auction passed, anyone can close the pool\\n  function allowWithdrawalAfterNoAuction() external {\\n    _accrueInterest();\\n\\n    /// @dev Check if pool is defaulting\\n    bool isDefaulting = _state(_info) == State.Default;\\n    /// @dev Check if auction is not started\\n    bool auctionNotStarted = IAuction(factory.auction()).state(address(this)) ==\\n      IAuction.State.NotStarted;\\n    /// @dev Check if auction can't be started now since [last accrual + period to start auction]\\n    bool periodToStartPassed = block.timestamp >= _info.lastAccrual + periodToStartAuction;\\n    /// @dev If all conditions are met, pool can be closed\\n    if (isDefaulting && auctionNotStarted && periodToStartPassed) {\\n      _info.insurance = 0;\\n      debtClaimed = true;\\n    } else {\\n      revert CDC();\\n    }\\n  }\\n\\n  /// @notice Function is called by governor to transfer reserves to the treasury\\n  function transferReserves() external onlyGovernor {\\n    _accrueInterest();\\n    _transferReserves();\\n  }\\n\\n  /// @notice Function used to account older reserve transfers via emitting event\\n  /// @param to Recipient of older reserve transfers\\n  /// @param amount Amount of reserves transferred before\\n  function accountOlderReserveTransfers(address to, uint256 amount) external onlyGovernor {\\n    emit ReservesTransferred(to, amount);\\n  }\\n\\n  /// @notice Function is called by governor to force pool default (in case of default in other chain)\\n  function forceDefault() external onlyGovernor onlyActiveAccrual {\\n    _info.state = State.Default;\\n  }\\n\\n  /// @notice Function is called by Auction contract when auction is started\\n  function processAuctionStart() external onlyAuction {\\n    _accrueInterest();\\n    _transferReserves();\\n    factory.burnStake();\\n  }\\n\\n  /// @notice Function is called by Auction contract to process pool debt claim\\n  /// @dev Closes pool after auction ends, regardless of auction result\\n  function processDebtClaim() external onlyAuction {\\n    _accrueInterest();\\n    _info.state = State.Default;\\n    address debtOwner = ownerOfDebt();\\n\\n    if (_info.insurance > 0 && debtOwner != address(0)) {\\n      _transferOut(debtOwner, _info.insurance);\\n    }\\n    _info.insurance = 0;\\n    debtClaimed = true;\\n    _close();\\n  }\\n\\n  // INTERNAL FUNCTIONS\\n\\n  /// @notice Internal function that processes providing liquidity for Pool in exchange for cpTokens\\n  /// @param currencyAmount Amount of currency token that user want to provide\\n  /// @param receiver Receiver of cpTokens\\n  function _provide(uint256 currencyAmount, address receiver) internal onlyActiveAccrual {\\n    _handleMaxCapacity(currencyAmount);\\n\\n    uint256 exchangeRate = _storedExchangeRate();\\n    _transferIn(msg.sender, currencyAmount);\\n    uint256 tokens = currencyAmount.divDecimal(exchangeRate);\\n\\n    if (totalSupply() == 0) {\\n      /// @dev On initialization, we lock MINIMUM_LIQUIDITY by minting it for the pool address. This amount acts as a\\n      /// minimum as it will never be burned, which reduces potential issues with rounding, and also prevents the\\n      /// Pool from ever being fully drained.\\n      require(tokens >= MINIMUM_LIQUIDITY, 'ZAM');\\n      tokens -= MINIMUM_LIQUIDITY;\\n      _mint(address(this), MINIMUM_LIQUIDITY);\\n    }\\n    _mint(receiver, tokens);\\n    _checkUtilization();\\n\\n    emit Provided(receiver, currencyAmount, tokens);\\n  }\\n\\n  /// @notice Internal function that processes token redemption\\n  /// @param tokensAmount Amount of tokens being redeemed\\n  /// @param currencyAmount Equivalent amount of currency\\n  function _redeem(uint256 tokensAmount, uint256 currencyAmount) internal {\\n    if (debtClaimed) {\\n      require(currencyAmount <= cash(), 'NEC');\\n    } else {\\n      require(\\n        currencyAmount <= _availableToProviders(_info) &&\\n          currencyAmount <= _availableProvisionalDefault(_info),\\n        'NEC'\\n      );\\n    }\\n\\n    _burn(msg.sender, tokensAmount);\\n    _transferOut(msg.sender, currencyAmount);\\n    if (!debtClaimed) {\\n      _checkUtilization();\\n    }\\n\\n    emit Redeemed(msg.sender, currencyAmount, tokensAmount);\\n  }\\n\\n  /// @notice Internal function to transfer reserves to the treasury\\n  function _transferReserves() internal {\\n    address treasury = factory.treasury();\\n    uint256 reserves = _info.reserves;\\n\\n    _transferOut(treasury, reserves);\\n    _info.reserves = 0;\\n\\n    emit ReservesTransferred(treasury, reserves);\\n  }\\n\\n  /// @notice Internal function for closing pool\\n  function _close() internal {\\n    require(_info.state != State.Closed, 'PIC');\\n\\n    _info.state = State.Closed;\\n    _transferReserves();\\n    if (_info.insurance > 0) {\\n      _transferOut(factory.treasury(), _info.insurance);\\n      _info.insurance = 0;\\n    }\\n    factory.closePool();\\n    emit Closed();\\n  }\\n\\n  /// @notice Internal function to accrue interest\\n  function _accrueInterest() internal {\\n    _info = _accrueInterestVirtual();\\n  }\\n\\n  /// @notice Internal function that is called at each action to check for zero/warning/default utilization\\n  function _checkUtilization() internal {\\n    if (_info.borrows == 0) {\\n      _info.enteredProvisionalDefault = 0;\\n      if (_info.enteredZeroUtilization == 0) {\\n        _info.enteredZeroUtilization = block.timestamp;\\n      }\\n      return;\\n    }\\n\\n    _info.enteredZeroUtilization = 0;\\n\\n    if (_info.enteredProvisionalDefault != 0) {\\n      // user entered provisional default\\n      if (_utilizationIsBelowProvisionalRepayment()) {\\n        _info.enteredProvisionalDefault = 0;\\n      }\\n    } else {\\n      // user may or may not enter the provisional default\\n      if (_info.borrows >= _poolSize(_info).mulDecimal(provisionalDefaultUtilization)) {\\n        _info.enteredProvisionalDefault = block.timestamp;\\n      }\\n    }\\n  }\\n\\n  /// @notice Internal function used for transfers of currency from given account to contract\\n  /// @param from Address to transfer from\\n  /// @param amount Amount to transfer\\n  function _transferIn(address from, uint256 amount) internal virtual {\\n    currency.safeTransferFrom(from, address(this), amount);\\n  }\\n\\n  /// @notice Internal function used for transfers of currency to given account from contract\\n  /// @param to Address to transfer to\\n  /// @param amount Amount to transfer\\n  function _transferOut(address to, uint256 amount) internal virtual {\\n    currency.safeTransfer(to, amount);\\n  }\\n\\n  // PUBLIC VIEW\\n\\n  /// @notice Function to get owner of the pool's debt\\n  /// @return Pool's debt owner\\n  function ownerOfDebt() public view returns (address) {\\n    return IAuction(factory.auction()).ownerOfDebt(address(this));\\n  }\\n\\n  /// @notice Function returns cash amount (balance of currency in the pool)\\n  /// @return Cash amount\\n  function cash() public view virtual returns (uint256) {\\n    return currency.balanceOf(address(this));\\n  }\\n\\n  // INTERNAL VIEW\\n\\n  /// @notice Function to get current pool state\\n  /// @return Pool state as State enumerable\\n  function _state(BorrowInfo memory info) internal view returns (State) {\\n    if (info.state == State.Closed || info.state == State.Default) {\\n      return info.state;\\n    }\\n    if (info.enteredProvisionalDefault != 0) {\\n      if (block.timestamp >= info.enteredProvisionalDefault + warningGracePeriod) {\\n        return State.Default;\\n      } else {\\n        return State.ProvisionalDefault;\\n      }\\n    }\\n    if (info.borrows > 0 && info.borrows >= _poolSize(info).mulDecimal(warningUtilization)) {\\n      return State.Warning;\\n    }\\n    return info.state;\\n  }\\n\\n  /// @notice Function returns interest value for given borrow info\\n  /// @param info Borrow info struct\\n  /// @return Interest for given info\\n  function _interest(BorrowInfo memory info) internal pure returns (uint256) {\\n    return info.borrows - info.principal;\\n  }\\n\\n  /// @notice Function returns amount of funds generally available for providers value for given borrow info\\n  /// @param info Borrow info struct\\n  /// @return Available to providers for given info\\n  function _availableToProviders(BorrowInfo memory info) internal view returns (uint256) {\\n    return cash() - info.reserves - info.insurance;\\n  }\\n\\n  /// @notice Function returns available to borrow value for given borrow info\\n  /// @param info Borrow info struct\\n  /// @return Available to borrow for given info\\n  function _availableToBorrow(BorrowInfo memory info) internal view returns (uint256) {\\n    uint256 basicAvailable = _availableToProviders(info) - _interest(info);\\n    uint256 borrowsForWarning = _poolSize(info).mulDecimal(warningUtilization);\\n    if (borrowsForWarning > info.borrows) {\\n      return MathUpgradeable.min(borrowsForWarning - info.borrows, basicAvailable);\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  /// @notice Function returns pool size for given borrow info\\n  /// @param info Borrow info struct\\n  /// @return Pool size for given info\\n  function _poolSize(BorrowInfo memory info) internal view returns (uint256) {\\n    return _availableToProviders(info) + info.principal;\\n  }\\n\\n  /// @notice Function returns funds available to be taken from pool before provisional default will be reached\\n  /// @param info Borrow info struct\\n  /// @return Pool size for given info\\n  function _availableProvisionalDefault(BorrowInfo memory info) internal view returns (uint256) {\\n    if (provisionalDefaultUtilization == 0) {\\n      return 0;\\n    }\\n    uint256 poolSizeForProvisionalDefault = info.borrows.divDecimal(provisionalDefaultUtilization);\\n    uint256 currentPoolSize = _poolSize(info);\\n    return\\n      currentPoolSize > poolSizeForProvisionalDefault\\n        ? currentPoolSize - poolSizeForProvisionalDefault\\n        : 0;\\n  }\\n\\n  /// @notice Function returns maximal redeemable amount for given exchange rate\\n  /// @param exchangeRate Exchange rate of cp-tokens to currency\\n  /// @return tokensAmount Maximal redeemable amount of pool tokens\\n  /// @return currencyAmount Maximal redeemable amount of currency tokens\\n  function _maxWithdrawable(\\n    uint256 exchangeRate\\n  ) internal view returns (uint256 tokensAmount, uint256 currencyAmount) {\\n    currencyAmount = _availableToProviders(_info); /// [total currency balance] - reserves - insurance\\n\\n    if (!debtClaimed) {\\n      uint256 availableProvisionalDefault = _availableProvisionalDefault(_info);\\n      if (availableProvisionalDefault < currencyAmount) {\\n        currencyAmount = availableProvisionalDefault;\\n      }\\n    }\\n    tokensAmount = currencyAmount.divDecimal(exchangeRate);\\n\\n    if (balanceOf(msg.sender) < tokensAmount) {\\n      tokensAmount = balanceOf(msg.sender);\\n      currencyAmount = tokensAmount.mulDecimal(exchangeRate);\\n    }\\n  }\\n\\n  /// @notice Function returns stored (without accruing) exchange rate of cpTokens for currency tokens\\n  /// @return Stored exchange rate as 10-digits decimal\\n  function _storedExchangeRate() internal view returns (uint256) {\\n    if (totalSupply() == 0) {\\n      return Decimal.ONE;\\n    } else if (debtClaimed) {\\n      return cash().divDecimal(totalSupply());\\n    } else {\\n      return (_availableToProviders(_info) + _info.borrows).divDecimal(totalSupply());\\n    }\\n  }\\n\\n  /// @notice Function returns timestamp when pool entered or will enter provisional default at given interest rate\\n  /// @param interestRate Borrows interest rate at current period\\n  /// @return Timestamp of entering provisional default (0 if won't ever enter)\\n  function _entranceOfProvisionalDefault(uint256 interestRate) internal view returns (uint256) {\\n    /// @dev If pool is already in provisional default, return its timestamp\\n    if (_info.enteredProvisionalDefault != 0) {\\n      return _info.enteredProvisionalDefault;\\n    }\\n    if (_info.borrows == 0 || interestRate == 0) {\\n      return 0;\\n    }\\n\\n    // Consider:\\n    // IFPD - Interest for provisional default\\n    // PSPD = Pool size at provisional default\\n    // IRPD = Reserves & insurance at provisional default\\n    // IR = Current reserves and insurance\\n    // PDU = Provisional default utilization\\n    // We have: Borrows + IFPD = PDU * PSPD\\n    // => Borrows + IFPD = PDU * (Principal + Cash + IRPD)\\n    // => Borrows + IFPD = PDU * (Principal + Cash + IR + IFPD * (insuranceFactor + reserveFactor))\\n    // => IFPD * (1 + PDU * (reserveFactor + insuranceFactor)) = PDU * PoolSize - Borrows\\n    // => IFPD = (PDU * PoolSize - Borrows) / (1 + PDU * (reserveFactor + insuranceFactor))\\n    uint256 numerator = _poolSize(_info).mulDecimal(provisionalDefaultUtilization) - _info.borrows;\\n    uint256 denominator = Decimal.ONE +\\n      provisionalDefaultUtilization.mulDecimal(reserveFactor + insuranceFactor);\\n    uint256 interestForProvisionalDefault = numerator.divDecimal(denominator);\\n\\n    uint256 interestPerSec = _info.borrows * interestRate;\\n    // Time delta is calculated as interest for provisional default divided by interest per sec (rounded up)\\n    uint256 timeDelta = (interestForProvisionalDefault * Decimal.ONE + interestPerSec - 1) /\\n      interestPerSec;\\n    uint256 entrance = _info.lastAccrual + timeDelta;\\n    return entrance <= block.timestamp ? entrance : 0;\\n  }\\n\\n  /// @notice Function virtually accrues interest and returns updated borrow info struct\\n  /// @return newInfo borrow info struct after accrual\\n  function _accrueInterestVirtual() internal view returns (BorrowInfo memory newInfo) {\\n    /// @dev Read info from storage to memory\\n    newInfo = _info;\\n\\n    /// @dev If last accrual was at current block or pool is closed or in default, return info as is\\n    if (\\n      block.timestamp == newInfo.lastAccrual ||\\n      newInfo.state == State.Default ||\\n      newInfo.state == State.Closed\\n    ) {\\n      return newInfo;\\n    }\\n\\n    /// @dev Get interest rate according to interest rate model\\n    uint256 interestRate = interestRateModel.getBorrowRate(\\n      cash(),\\n      newInfo.borrows,\\n      newInfo.reserves + newInfo.insurance + _interest(newInfo)\\n    );\\n\\n    newInfo.lastAccrual = block.timestamp;\\n    newInfo.enteredProvisionalDefault = _entranceOfProvisionalDefault(interestRate);\\n    if (\\n      newInfo.enteredProvisionalDefault != 0 &&\\n      newInfo.enteredProvisionalDefault + warningGracePeriod < newInfo.lastAccrual\\n    ) {\\n      newInfo.lastAccrual = newInfo.enteredProvisionalDefault + warningGracePeriod;\\n    }\\n    /// @dev Interest dealta == borrows * interest rate * time delta\\n    uint256 interestDelta = newInfo.borrows.mulDecimal(\\n      interestRate * (newInfo.lastAccrual - _info.lastAccrual)\\n    );\\n    uint256 reservesDelta = interestDelta.mulDecimal(reserveFactor);\\n    uint256 insuranceDelta = interestDelta.mulDecimal(insuranceFactor);\\n\\n    if (newInfo.borrows + interestDelta + reservesDelta + insuranceDelta > _poolSize(newInfo)) {\\n      interestDelta = (_poolSize(newInfo) - newInfo.borrows).divDecimal(\\n        Decimal.ONE + reserveFactor + insuranceFactor\\n      );\\n      uint256 interestPerSec = newInfo.borrows.mulDecimal(interestRate);\\n      if (interestPerSec > 0) {\\n        // Previous last accrual plus interest divided by interest speed (rounded up)\\n        newInfo.lastAccrual =\\n          _info.lastAccrual +\\n          (interestDelta + interestPerSec - 1) /\\n          interestPerSec;\\n      }\\n\\n      reservesDelta = interestDelta.mulDecimal(reserveFactor);\\n      insuranceDelta = interestDelta.mulDecimal(insuranceFactor);\\n      newInfo.state = State.Default;\\n    }\\n\\n    newInfo.borrows += interestDelta;\\n    newInfo.reserves += reservesDelta;\\n    newInfo.insurance += insuranceDelta;\\n\\n    return newInfo;\\n  }\\n\\n  function _handleMaxCapacity(uint256 amount) internal view virtual;\\n\\n  function _getKYCAttributes(address lender) internal virtual;\\n\\n  function _utilizationIsBelowProvisionalRepayment() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolBaseInfo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IERC20Upgradeable, ERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport {IPoolFactory} from '../interfaces/IPoolFactory.sol';\\nimport {IInterestRateModel} from '../interfaces/IInterestRateModel.sol';\\n\\nerror AIZ();\\n\\n/// @notice This contract describes Pool's storage, events and initializer\\nabstract contract PoolBaseInfo is ERC20Upgradeable {\\n  /// @notice Address of the pool's manager\\n  address public manager;\\n\\n  /// @notice Pool currency token\\n  IERC20Upgradeable public currency;\\n\\n  /// @notice PoolFactory contract\\n  IPoolFactory public factory;\\n\\n  /// @notice InterestRateModel contract address\\n  IInterestRateModel public interestRateModel;\\n\\n  /// @notice Reserve factor as 18-digit decimal\\n  uint256 public reserveFactor;\\n\\n  /// @notice Insurance factor as 18-digit decimal\\n  uint256 public insuranceFactor;\\n\\n  /// @notice Pool utilization that leads to warning state (as 18-digit decimal)\\n  uint256 public warningUtilization;\\n\\n  /// @notice Pool utilization that leads to provisional default (as 18-digit decimal)\\n  uint256 public provisionalDefaultUtilization;\\n\\n  /// @notice Grace period for warning state before pool goes to default (in seconds)\\n  uint256 public warningGracePeriod;\\n\\n  /// @notice Max period for which pool can stay not active before it can be closed by governor (in seconds)\\n  uint256 public maxInactivePeriod;\\n\\n  /// @notice Period after default to start auction after which pool can be closed by anyone (in seconds)\\n  uint256 public periodToStartAuction;\\n\\n  enum State {\\n    Active,\\n    Warning,\\n    ProvisionalDefault,\\n    Default,\\n    Closed\\n  }\\n\\n  /// @notice Indicator if debt has been claimed\\n  bool public debtClaimed;\\n\\n  /// @notice Structure describing all pool's borrows details\\n  struct BorrowInfo {\\n    uint256 principal;\\n    uint256 borrows;\\n    uint256 reserves;\\n    uint256 insurance;\\n    uint256 lastAccrual; // timestamp of last accrual\\n    uint256 enteredProvisionalDefault; // timestamp when pool entered provisional default state\\n    uint256 enteredZeroUtilization; // timestamp when pool entered zero utilization state\\n    State state;\\n  }\\n\\n  /// @notice Last updated borrow info\\n  BorrowInfo internal _info;\\n\\n  /// @notice Pool's symbol\\n  string internal _symbol;\\n\\n  uint public constant MINIMUM_LIQUIDITY = 10 ** 6;\\n\\n  // EVENTS\\n\\n  /// @notice Event emitted when pool is closed\\n  event Closed();\\n\\n  /// @notice Event emitted when liquidity is provided to the Pool\\n  /// @param provider Address who provided liquidity\\n  /// @param currencyAmount Amount of pool's currency provided\\n  /// @param tokens Amount of cp-tokens received by provider in response\\n  event Provided(address indexed provider, uint256 currencyAmount, uint256 tokens);\\n\\n  /// @notice Event emitted when liquidity is redeemed from the Pool\\n  /// @param redeemer Address who redeems liquidity\\n  /// @param currencyAmount Amount of currency received by redeemer\\n  /// @param tokens Amount of given and burned cp-tokens\\n  event Redeemed(address indexed redeemer, uint256 currencyAmount, uint256 tokens);\\n\\n  /// @notice Event emitted when manager assignes liquidity\\n  /// @param amount Amount of currency borrower\\n  /// @param receiver Address where borrow has been transferred\\n  event Borrowed(uint256 amount, address indexed receiver);\\n\\n  /// @notice Event emitted when manager returns liquidity assignment\\n  /// @param amount Amount of currency repaid\\n  event Repaid(uint256 amount);\\n\\n  /// @notice Event emitted when reserves are transferred to treasury\\n  /// @param treasury Recipient of the transferred reserves\\n  /// @param amount Amount transferred\\n  event ReservesTransferred(address treasury, uint256 amount);\\n\\n  // CONSTRUCTOR\\n\\n  /// @notice Upgradeable contract constructor\\n  /// @param manager_ Address of the Pool's manager\\n  /// @param currency_ Address of the currency token\\n  function __PoolBaseInfo_init(\\n    address manager_,\\n    IERC20Upgradeable currency_\\n  ) internal onlyInitializing nonZeroAddress(manager_) nonZeroAddress(address(currency_)) {\\n    manager = manager_;\\n    currency = currency_;\\n    factory = IPoolFactory(msg.sender);\\n\\n    interestRateModel = IInterestRateModel(factory.interestRateModel());\\n    (reserveFactor, insuranceFactor, warningUtilization) = (\\n      factory.reserveFactor(),\\n      factory.insuranceFactor(),\\n      factory.warningUtilization()\\n    );\\n\\n    provisionalDefaultUtilization = factory.provisionalDefaultUtilization();\\n    warningGracePeriod = factory.warningGracePeriod();\\n    maxInactivePeriod = factory.maxInactivePeriod();\\n    periodToStartAuction = factory.periodToStartAuction();\\n\\n    _symbol = factory.getPoolSymbol(address(currency), address(manager));\\n    __ERC20_init(string(bytes.concat(bytes('Pool '), bytes(_symbol))), '');\\n\\n    (_info.enteredZeroUtilization, _info.lastAccrual) = (block.timestamp, block.timestamp);\\n  }\\n\\n  /// @notice Modifier for the functions restricted to pool creator\\n  modifier nonZeroAddress(address addr) {\\n    if (addr == address(0)) revert AIZ();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {PoolBase} from './PoolBase.sol';\\nimport {IInterestRateModel} from '../interfaces/IInterestRateModel.sol';\\n\\nerror GTO(uint256 value);\\n\\n/// @notice This contract describes pool's configuration functions\\nabstract contract PoolConfiguration is PoolBase {\\n  /// @notice Pool maximum capacity, blocking overflow deposits\\n  uint256 public maximumCapacity;\\n\\n  /// @notice Pool utilization that to what borrower should repay after entering provisionalDefaultUtilization (as 18-digit decimal)\\n  uint256 public provisionalRepaymentUtilization;\\n\\n  /// @notice Event emitted when pool's capacity is updated\\n  /// @param newCapacity New capacity of the pool\\n  event MaximumCapacityChanged(uint256 newCapacity);\\n\\n  /// @notice Modifier to check if amount is not greater than 1e18\\n  modifier nonGTO(uint256 amount) {\\n    if (amount > 1e18) revert GTO(amount);\\n    _;\\n  }\\n\\n  /// @notice Function is used to update pool's manager (only called through factory)\\n  /// @param manager_ New manager of the pool\\n  function setManager(address manager_) external onlyFactory nonZeroAddress(manager_) {\\n    manager = manager_;\\n  }\\n\\n  /// @notice Function is used to update pool's interest rate model (only called by governor)\\n  /// @param interestRateModel_ New IRM of the pool\\n  function setInterestRateModel(\\n    IInterestRateModel interestRateModel_\\n  ) external onlyGovernor nonZeroAddress(address(interestRateModel_)) {\\n    _accrueInterest();\\n    interestRateModel = interestRateModel_;\\n  }\\n\\n  /// @notice Function is used to update pool's reserve factor (only called by governor)\\n  /// @param reserveFactor_ New reserve factor of the pool\\n  function setReserveFactor(\\n    uint256 reserveFactor_\\n  ) external onlyGovernor nonGTO(reserveFactor_ + insuranceFactor) {\\n    reserveFactor = reserveFactor_;\\n  }\\n\\n  /// @notice Function is used to update pool's insurance factor (only called by governor)\\n  /// @param insuranceFactor_ New insurance factor of the pool\\n  function setInsuranceFactor(\\n    uint256 insuranceFactor_\\n  ) external onlyGovernor nonGTO(reserveFactor + insuranceFactor_) {\\n    insuranceFactor = insuranceFactor_;\\n  }\\n\\n  /// @notice Function is used to update pool's warning utilization (only called by governor)\\n  /// @param warningUtilization_ New warning utilization of the pool\\n  function setWarningUtilization(\\n    uint256 warningUtilization_\\n  ) external onlyGovernor nonGTO(warningUtilization_) {\\n    _accrueInterest();\\n    warningUtilization = warningUtilization_;\\n    _checkUtilization();\\n  }\\n\\n  /// @notice Function is used to update pool's provisional repayment utilization (only called by governor)\\n  /// @param provisionalRepaymentUtilization_ New provisional repayment utilization of the pool\\n  function setProvisionalRepaymentUtilization(\\n    uint256 provisionalRepaymentUtilization_\\n  ) external onlyGovernor nonGTO(provisionalRepaymentUtilization_) {\\n    _accrueInterest();\\n    provisionalRepaymentUtilization = provisionalRepaymentUtilization_;\\n    _checkUtilization();\\n  }\\n\\n  /// @notice Function is used to update pool's provisional default utilization (only called by governor)\\n  /// @param provisionalDefaultUtilization_ New provisional default utilization of the pool\\n  function setProvisionalDefaultUtilization(\\n    uint256 provisionalDefaultUtilization_\\n  ) external onlyGovernor nonGTO(provisionalDefaultUtilization_) {\\n    _accrueInterest();\\n    provisionalDefaultUtilization = provisionalDefaultUtilization_;\\n    _checkUtilization();\\n  }\\n\\n  /// @notice Function is used to update pool's warning grace period (only called by governor)\\n  /// @param warningGracePeriod_ New warning grace period of the pool\\n  function setWarningGracePeriod(uint256 warningGracePeriod_) external onlyGovernor {\\n    _accrueInterest();\\n    warningGracePeriod = warningGracePeriod_;\\n    _checkUtilization();\\n  }\\n\\n  /// @notice Function is used to update pool's max inactive period (only called by governor)\\n  /// @param maxInactivePeriod_ New max inactive period of the pool\\n  function setMaxInactivePeriod(uint256 maxInactivePeriod_) external onlyGovernor {\\n    _accrueInterest();\\n    maxInactivePeriod = maxInactivePeriod_;\\n  }\\n\\n  /// @notice Function is used to update pool's period to start auction (only called by governor)\\n  /// @param periodToStartAuction_ New period to start auction of the pool\\n  function setPeriodToStartAuction(uint256 periodToStartAuction_) external onlyGovernor {\\n    periodToStartAuction = periodToStartAuction_;\\n  }\\n\\n  /// @notice Function is called by governor or manager to change max pool cap\\n  /// @param capacity New max pool capacity. 0 means no limit\\n  function setMaxCapacity(uint256 capacity) external {\\n    require(msg.sender == factory.owner() || msg.sender == manager, 'OGM');\\n\\n    maximumCapacity = capacity;\\n\\n    emit MaximumCapacityChanged(capacity);\\n  }\\n\\n  /// @notice Function is used to update pool's symbol (only called by governor)\\n  /// @param symbol_ New symbol of the pool\\n  function setSymbol(string memory symbol_) external onlyGovernor {\\n    _symbol = symbol_;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolDID.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IQuadPassportStore} from '@quadrata/contracts/interfaces/IQuadPassportStore.sol';\\nimport './PoolBase.sol';\\n\\n/// @notice This contract describes Pool's KYC checks\\nabstract contract PoolDID is PoolBase {\\n  bool public kycRequired;\\n\\n  function _getKYCAttributes(address lender) internal override {\\n    if (kycRequired && lender != manager) {\\n      (IQuadPassportStore.Attribute[] memory attr, uint256 queriedAttributes) = factory\\n        .getKYCAttributes(lender);\\n\\n      require(attr.length == queriedAttributes, 'ALM');\\n\\n      require(attr[0].value != bytes32(0), 'CAM');\\n      require(\\n        (attr[0].value != keccak256(abi.encodePacked('US')) && // United States of America\\n          attr[0].value != keccak256(abi.encodePacked('BY')) && // Belarus\\n          attr[0].value != keccak256(abi.encodePacked('CD')) && // Democratic Republic of the Congo\\n          attr[0].value != keccak256(abi.encodePacked('CU')) && // Cuba\\n          attr[0].value != keccak256(abi.encodePacked('KP')) && // Korea Democratic People's Republic\\n          attr[0].value != keccak256(abi.encodePacked('IR')) && // Iran\\n          attr[0].value != keccak256(abi.encodePacked('IQ')) && // Iraq\\n          attr[0].value != keccak256(abi.encodePacked('LB')) && // Lebanon\\n          attr[0].value != keccak256(abi.encodePacked('LY')) && // Libya\\n          attr[0].value != keccak256(abi.encodePacked('ML')) && // Mali\\n          attr[0].value != keccak256(abi.encodePacked('MM')) && // Myanmar\\n          attr[0].value != keccak256(abi.encodePacked('NI')) && // Nicaragua\\n          attr[0].value != keccak256(abi.encodePacked('RU')) && // Russia\\n          attr[0].value != keccak256(abi.encodePacked('SD')) && // Sudan\\n          attr[0].value != keccak256(abi.encodePacked('SO')) && // Somalia\\n          attr[0].value != keccak256(abi.encodePacked('SS')) && // South Sudan\\n          attr[0].value != keccak256(abi.encodePacked('SY'))), // Syria\\n        'RCT'\\n      );\\n\\n      require(uint256(attr[1].value) <= 5, 'HAS');\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport './PoolMetadata.sol';\\nimport './PoolRewards.sol';\\nimport './PoolConfiguration.sol';\\nimport './PoolDID.sol';\\nimport {ERC20Upgradeable, IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\n\\n/// @notice This is perimary protocol contract, describing borrowing Pool\\ncontract PoolMaster is PoolRewards, PoolConfiguration, PoolMetadata, PoolDID {\\n  // CONSTRUCTOR\\n  using Decimal for uint256;\\n\\n  /// @notice Upgradeable contract constructor\\n  /// @param manager_ Address of the Pool's manager\\n  /// @param currency_ Address of the currency token\\n  /// @param requireKYC Flag to enable KYC middleware for pool actions\\n  function initialize(\\n    address manager_,\\n    IERC20Upgradeable currency_,\\n    bool requireKYC\\n  ) public initializer {\\n    __PoolBaseInfo_init(manager_, currency_);\\n    kycRequired = requireKYC;\\n\\n    // add provisional repayment utilization\\n    provisionalRepaymentUtilization = factory.provisionalRepaymentUtilization();\\n  }\\n\\n  // VERSION\\n\\n  function version() external pure virtual returns (string memory) {\\n    return '1.1.0';\\n  }\\n\\n  // OVERRIDES\\n\\n  /// @notice Override of the mint function, see {IERC20-_mint}\\n  function _mint(address account, uint256 amount) internal override(ERC20Upgradeable, PoolRewards) {\\n    super._mint(account, amount);\\n  }\\n\\n  /// @notice Override of the mint function, see {IERC20-_burn}\\n  function _burn(address account, uint256 amount) internal override(ERC20Upgradeable, PoolRewards) {\\n    super._burn(account, amount);\\n  }\\n\\n  /// @notice Override of the transfer function, see {IERC20-_transfer}\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override(ERC20Upgradeable, PoolRewards) {\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /// @notice Override of the decimals function, see {IERC20Metadata-decimals}\\n  /// @return Cp-token decimals\\n  function decimals() public view override(ERC20Upgradeable, PoolMetadata) returns (uint8) {\\n    return super.decimals();\\n  }\\n\\n  /// @notice Override of the decimals function, see {IERC20Metadata-symbol}\\n  /// @return Pool's symbol\\n  function symbol() public view override(ERC20Upgradeable, PoolMetadata) returns (string memory) {\\n    return super.symbol();\\n  }\\n\\n  function _handleMaxCapacity(uint256 currencyAmount) internal view override {\\n    if (maximumCapacity != 0) {\\n      require(currencyAmount + _poolSize(_info) <= maximumCapacity, 'CPM');\\n    }\\n  }\\n\\n  function _utilizationIsBelowProvisionalRepayment() internal view override returns (bool) {\\n    return _info.borrows < _poolSize(_info).mulDecimal(provisionalRepaymentUtilization);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {MathUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol';\\nimport {IERC20MetadataUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol';\\nimport './PoolBase.sol';\\nimport {Decimal} from '../libraries/Decimal.sol';\\n\\n/// @notice This contract describes Pool's external view functions for observing it's current state\\nabstract contract PoolMetadata is PoolBase {\\n  using Decimal for uint256;\\n\\n  /// @notice Function that returns cp-token decimals\\n  /// @return Cp-token decimals\\n  function decimals() public view virtual override returns (uint8) {\\n    return IERC20MetadataUpgradeable(address(currency)).decimals();\\n  }\\n\\n  /// @notice Function returns pool's symbol\\n  /// @return Pool's symbol\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /// @notice Function returns current (with accrual) pool state\\n  /// @return Current state\\n  function state() external view returns (State) {\\n    return _state(_accrueInterestVirtual());\\n  }\\n\\n  /// @notice Function returns current (with accrual) last accrual timestamp\\n  /// @return Last accrual timestamp\\n  function lastAccrual() external view returns (uint256) {\\n    return _accrueInterestVirtual().lastAccrual;\\n  }\\n\\n  /// @notice Function returns current (with accrual) interest value\\n  /// @return Current interest\\n  function interest() external view returns (uint256) {\\n    return _interest(_accrueInterestVirtual());\\n  }\\n\\n  /// @notice Function returns current (with accrual) amount of funds available to LP for withdrawal\\n  /// @return Current available to withdraw funds\\n  function availableToWithdraw() external view returns (uint256) {\\n    if (debtClaimed) {\\n      return cash();\\n    } else {\\n      BorrowInfo memory info = _accrueInterestVirtual();\\n      return MathUpgradeable.min(_availableToProviders(info), _availableProvisionalDefault(info));\\n    }\\n  }\\n\\n  /// @notice Function returns current (with accrual) amount of funds available for manager to borrow\\n  /// @return Current available to borrow funds\\n  function availableToBorrow() external view returns (uint256) {\\n    return _availableToBorrow(_accrueInterestVirtual());\\n  }\\n\\n  /// @notice Function returns current (with accrual) pool size\\n  /// @return Current pool size\\n\\n  function poolSize() external view returns (uint256) {\\n    return _poolSize(_accrueInterestVirtual());\\n  }\\n\\n  /// @notice Function returns current principal value\\n  /// @return Current principal\\n  function principal() external view returns (uint256) {\\n    return _info.principal;\\n  }\\n\\n  /// @notice Function returns current (with accrual) total borrows value\\n  /// @return Current borrows\\n  function borrows() external view returns (uint256) {\\n    return _accrueInterestVirtual().borrows;\\n  }\\n\\n  /// @notice Function returns current (with accrual) reserves value\\n  /// @return Current reserves\\n  function reserves() public view returns (uint256) {\\n    return _accrueInterestVirtual().reserves;\\n  }\\n\\n  /// @notice Function returns current (with accrual) insurance value\\n  /// @return Current insurance\\n  function insurance() external view returns (uint256) {\\n    return _accrueInterestVirtual().insurance;\\n  }\\n\\n  /// @notice Function returns timestamp when pool entered zero utilization state (0 if didn't enter)\\n  /// @return Timestamp of entering zero utilization\\n  function enteredZeroUtilization() external view returns (uint256) {\\n    return _info.enteredZeroUtilization;\\n  }\\n\\n  /// @notice Function returns timestamp when pool entered warning utilization state (0 if didn't enter)\\n  /// @return Timestamp of entering warning utilization\\n  function enteredProvisionalDefault() external view returns (uint256) {\\n    return _accrueInterestVirtual().enteredProvisionalDefault;\\n  }\\n\\n  /// @notice Function returns current (with accrual) exchange rate of cpTokens for currency tokens\\n  /// @return Current exchange rate as 18-digits decimal\\n  function getCurrentExchangeRate() external view returns (uint256) {\\n    if (totalSupply() == 0) {\\n      return Decimal.ONE;\\n    } else if (debtClaimed) {\\n      return cash().divDecimal(totalSupply());\\n    } else {\\n      BorrowInfo memory info = _accrueInterestVirtual();\\n      return (_availableToProviders(info) + info.borrows).divDecimal(totalSupply());\\n    }\\n  }\\n\\n  /// @notice Function to get current borrow interest rate\\n  /// @return Borrow interest rate as 18-digit decimal\\n  function getBorrowRate() public view returns (uint256) {\\n    BorrowInfo memory info = _accrueInterestVirtual();\\n    return\\n      interestRateModel.getBorrowRate(\\n        cash(),\\n        info.borrows,\\n        info.reserves + info.insurance + (info.borrows - info.principal)\\n      );\\n  }\\n\\n  /// @notice Function to get current supply interest rate\\n  /// @return Supply interest rate as 18-digit decimal\\n  function getSupplyRate() external view returns (uint256) {\\n    BorrowInfo memory info = _accrueInterestVirtual();\\n    return\\n      interestRateModel.getSupplyRate(\\n        cash(),\\n        info.borrows,\\n        info.reserves + info.insurance + (info.borrows - info.principal),\\n        reserveFactor + insuranceFactor\\n      );\\n  }\\n\\n  /// @notice Function to get current utilization rate\\n  /// @return Utilization rate as 18-digit decimal\\n  function getUtilizationRate() external view returns (uint256) {\\n    BorrowInfo memory info = _accrueInterestVirtual();\\n    return\\n      interestRateModel.utilizationRate(\\n        cash(),\\n        info.borrows,\\n        info.insurance + info.reserves + _interest(info)\\n      );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/pool/PoolRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol';\\nimport './PoolBase.sol';\\n\\n/// @notice This contract describes everything related to Pool's reward logic\\nabstract contract PoolRewards is PoolBase {\\n  using SafeCastUpgradeable for uint256;\\n  using SafeCastUpgradeable for int256;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  /// @notice Amount of CPOOL rewards per second for liquidity providers in this pool\\n  uint256 public rewardPerSecond;\\n\\n  /// @notice Value by which all rewards are magnified for calculation\\n  uint256 internal constant REWARD_MAGNITUDE = 2 ** 128;\\n\\n  /// @notice Timestamp when last staking reward distribution occured\\n  uint256 internal _lastRewardDistribution;\\n\\n  /// @notice Reward per LP token, magnified by 2**128 for increased precision\\n  uint256 internal _magnifiedRewardPerShare;\\n\\n  /// @notice Reward corrections of accounts (to remain previous rewards unchanged when user's balance changes)\\n  mapping(address => int256) internal _magnifiedRewardCorrections;\\n\\n  /// @notice Reward withdrawals of accounts\\n  mapping(address => uint256) internal _withdrawals;\\n\\n  // EVENTS\\n\\n  /// @notice Event emitted when account withdraws his reward\\n  /// @param account Account who withdraws reward\\n  /// @param amount Amount of reward tokens withdrawn\\n  event RewardWithdrawn(address indexed account, uint256 amount);\\n\\n  /// @notice Event emitted when new reward per block is set\\n  /// @param newRewardPerSecond New amount of reward tokens distirbuted per second\\n  event RewardPerSecondSet(uint256 newRewardPerSecond);\\n\\n  // PUBLIC FUNCTIONS\\n\\n  /// @notice Function is called through Factory to withdraw reward for some user\\n  /// @param account Account to withdraw reward for\\n  /// @return  withdrawable amount\\n  function withdrawReward(\\n    address account\\n  ) external virtual onlyFactory onlyEligible(account) returns (uint256 withdrawable) {\\n    _accrueInterest();\\n    _distributeReward();\\n\\n    withdrawable = withdrawableRewardOf(account);\\n    if (withdrawable > 0) {\\n      _withdrawals[account] += withdrawable;\\n      emit RewardWithdrawn(account, withdrawable);\\n    }\\n\\n    return withdrawable;\\n  }\\n\\n  /// @notice Function is called by Factory to set new reward speed per second\\n  /// @param rewardPerSecond_ New reward per second\\n  function setRewardPerSecond(uint256 rewardPerSecond_) external onlyFactory {\\n    _accrueInterest();\\n    _distributeReward();\\n    if (_lastRewardDistribution == 0) {\\n      _lastRewardDistribution = _info.lastAccrual;\\n    }\\n    rewardPerSecond = rewardPerSecond_;\\n\\n    emit RewardPerSecondSet(rewardPerSecond_);\\n  }\\n\\n  // VIEW FUNCTIONS\\n\\n  /// @notice Gets total accumulated reward of some account\\n  /// @return Total accumulated reward of account\\n  function accumulativeRewardOf(address account) public view returns (uint256) {\\n    /// @dev Actual pool data structure\\n    BorrowInfo memory info = _accrueInterestVirtual();\\n    /// @dev Current reward per share link\\n    uint256 currentRewardPerShare = _magnifiedRewardPerShare;\\n    /// @dev If rewards were distributed since last accrual, updates reward per share value\\n    if (\\n      rewardPerSecond != 0 &&\\n      _lastRewardDistribution != 0 &&\\n      info.lastAccrual > _lastRewardDistribution &&\\n      totalSupply() != 0\\n    ) {\\n      uint256 period = info.lastAccrual - _lastRewardDistribution;\\n      currentRewardPerShare += (REWARD_MAGNITUDE * period * rewardPerSecond) / totalSupply();\\n    }\\n\\n    /// @dev Accumulated reward is calculated as [balance * reward per share] + previous rewards\\n    return\\n      ((balanceOf(account) * currentRewardPerShare).toInt256() +\\n        _magnifiedRewardCorrections[account]).toUint256() / REWARD_MAGNITUDE;\\n  }\\n\\n  /// @notice Gets withdrawn part of reward of some account\\n  /// @return Withdrawn reward of account\\n  function withdrawnRewardOf(address account) public view returns (uint256) {\\n    return _withdrawals[account];\\n  }\\n\\n  /// @notice Gets currently withdrawable reward of some account\\n  /// @return Withdrawable reward of account\\n  function withdrawableRewardOf(address account) public view returns (uint256) {\\n    return accumulativeRewardOf(account) - withdrawnRewardOf(account);\\n  }\\n\\n  // INTERNAL FUNCTIONS\\n\\n  /// @notice Internal function for rewards distribution\\n  /// @dev Updates `_magnifiedRewardPerShare` and `_lastRewardDistribution`\\n  function _distributeReward() internal {\\n    /// @dev Destribute rewards only if rewards are configured, the last distribution was,\\n    /// @dev the last accrual was after the last distribution and pool is not empty.\\n    if (\\n      rewardPerSecond != 0 &&\\n      _lastRewardDistribution != 0 &&\\n      _info.lastAccrual > _lastRewardDistribution &&\\n      totalSupply() != 0\\n    ) {\\n      uint256 period = _info.lastAccrual - _lastRewardDistribution;\\n      _magnifiedRewardPerShare += (REWARD_MAGNITUDE * period * rewardPerSecond) / totalSupply();\\n    }\\n    _lastRewardDistribution = _info.lastAccrual;\\n  }\\n\\n  /// @notice Override of mint function with rewards corrections\\n  /// @param account Account to mint for\\n  /// @param amount Amount to mint\\n  function _mint(address account, uint256 amount) internal virtual override {\\n    _distributeReward();\\n\\n    super._mint(account, amount);\\n    _magnifiedRewardCorrections[account] -= (_magnifiedRewardPerShare * amount).toInt256();\\n  }\\n\\n  /// @notice Override of burn function with rewards corrections\\n  /// @param account Account to burn from\\n  /// @param amount Amount to burn\\n  function _burn(address account, uint256 amount) internal virtual override {\\n    _distributeReward();\\n\\n    super._burn(account, amount);\\n    _magnifiedRewardCorrections[account] += (_magnifiedRewardPerShare * amount).toInt256();\\n  }\\n\\n  /// @notice Override of transfer function with rewards corrections\\n  /// @param from Account to transfer from\\n  /// @param to Account to transfer to\\n  /// @param amount Amount to transfer\\n  function _transfer(address from, address to, uint256 amount) internal virtual override {\\n    _accrueInterest();\\n    _distributeReward();\\n\\n    super._transfer(from, to, amount);\\n    _magnifiedRewardCorrections[from] += (_magnifiedRewardPerShare * amount).toInt256();\\n    _magnifiedRewardCorrections[to] -= (_magnifiedRewardPerShare * amount).toInt256();\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AIZ\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AZ\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CDC\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GTO\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repay\",\"type\":\"uint256\"}],\"name\":\"MTB\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"NEL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OF\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OG\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OM\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCapacity\",\"type\":\"uint256\"}],\"name\":\"MaximumCapacityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Provided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservesTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"RewardPerSecondSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"accountOlderReserveTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accumulativeRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowWithdrawalAfterNoAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enteredProvisionalDefault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enteredZeroUtilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUtilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"currency_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"requireKYC\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract IInterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kycRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAccrual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInactivePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerOfDebt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodToStartAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processAuctionStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processDebtClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"provide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"provideFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"provideForWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"provideWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provisionalDefaultUtilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provisionalRepaymentUtilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"redeemCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceFactor_\",\"type\":\"uint256\"}],\"name\":\"setInsuranceFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"}],\"name\":\"setInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager_\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"name\":\"setMaxCapacity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxInactivePeriod_\",\"type\":\"uint256\"}],\"name\":\"setMaxInactivePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"periodToStartAuction_\",\"type\":\"uint256\"}],\"name\":\"setPeriodToStartAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provisionalDefaultUtilization_\",\"type\":\"uint256\"}],\"name\":\"setProvisionalDefaultUtilization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provisionalRepaymentUtilization_\",\"type\":\"uint256\"}],\"name\":\"setProvisionalRepaymentUtilization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveFactor_\",\"type\":\"uint256\"}],\"name\":\"setReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSecond_\",\"type\":\"uint256\"}],\"name\":\"setRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"warningGracePeriod_\",\"type\":\"uint256\"}],\"name\":\"setWarningGracePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"warningUtilization_\",\"type\":\"uint256\"}],\"name\":\"setWarningUtilization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum PoolBaseInfo.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warningGracePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warningUtilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawable\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawnRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PoolMaster", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}