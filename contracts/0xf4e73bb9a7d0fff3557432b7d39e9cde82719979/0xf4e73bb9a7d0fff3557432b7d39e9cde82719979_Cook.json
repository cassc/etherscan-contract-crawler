{"SourceCode": "//SPDX-License-Identifier: MIT\r\n/*\r\n https://t.me/ChefPepeToken\r\n https://ChefPepeErc.com\r\n*/\r\n\r\npragma solidity 0.8.20;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address public owner;\r\n\r\n    constructor(address creatorOwner) {\r\n        owner = creatorOwner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(newOwner);\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        owner = address(0);\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ncontract Cook is IERC20, Ownable {\r\n    uint8 private constant   _decimals    = 9;\r\n    uint256 private constant _totalSupply = 100000000000 * (10**_decimals);\r\n    string private constant  _name        = \"CHEF PEPE\";\r\n    string private constant  _symbol      = \"COOK\";\r\n\r\n    uint8 private sniperBlacklistBlocks = 0;\r\n    mapping(address => bool) private blacklisted;\r\n\r\n    uint256 private _launchBlock;\r\n    uint256 private _maxTxAmount = _totalSupply;\r\n    uint256 private _maxWalletAmount = _totalSupply;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _noLimits;\r\n\r\n    address private liquidityProvider;\r\n\r\n    address private constant _swapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private _primarySwapRouter = IUniswapV2Router02(_swapRouterAddress);\r\n    address private _primaryLP;\r\n    mapping(address => bool) private _isLP;\r\n\r\n    bool private _tradingOpen;\r\n\r\n    bool private _inTaxSwap = false;\r\n    modifier lockTaxSwap() {\r\n        _inTaxSwap = true;\r\n        _;\r\n        _inTaxSwap = false;\r\n    }\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        _balances[owner] = _totalSupply * 5 / 100;\r\n        emit Transfer(address(0), owner, _balances[owner]);\r\n\r\n        _balances[address(this)] = _totalSupply - _balances[owner];\r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n\r\n        _noLimits[owner] = true;\r\n        _noLimits[address(this)] = true;\r\n        _noLimits[_swapRouterAddress] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(_checkTradingOpen(msg.sender), \"Trading not open\");\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        require(_checkTradingOpen(sender), \"Trading not open\");\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _approveRouter(uint256 _tokenAmount) internal {\r\n        if (_allowances[address(this)][_swapRouterAddress] < _tokenAmount) {\r\n            _allowances[address(this)][_swapRouterAddress] = type(uint256).max;\r\n            emit Approval(address(this), _swapRouterAddress, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function addLiquidity() external payable onlyOwner lockTaxSwap {\r\n        require(_primaryLP == address(0), \"LP exists\");\r\n        require(!_tradingOpen, \"trading is open\");\r\n        require(\r\n            msg.value > 0 || address(this).balance > 0,\r\n            \"No ETH in contract or message\"\r\n        );\r\n        require(_balances[address(this)] > 0, \"No tokens in contract\");\r\n        liquidityProvider = msg.sender;\r\n        _primaryLP = IUniswapV2Factory(_primarySwapRouter.factory()).createPair(\r\n            address(this),\r\n            _primarySwapRouter.WETH()\r\n        );\r\n        _addLiquidity(_balances[address(this)], address(this).balance, false);\r\n        _isLP[_primaryLP] = true;\r\n        _openTrading();\r\n    }\r\n\r\n    function _addLiquidity(\r\n        uint256 _tokenAmount,\r\n        uint256 _ethAmountWei,\r\n        bool autoburn\r\n    ) internal {\r\n        address lpTokenRecipient = liquidityProvider;\r\n        if (autoburn) {\r\n            lpTokenRecipient = address(0);\r\n        }\r\n        _approveRouter(_tokenAmount);\r\n        _primarySwapRouter.addLiquidityETH{value: _ethAmountWei}(\r\n            address(this),\r\n            _tokenAmount,\r\n            0,\r\n            0,\r\n            lpTokenRecipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _openTrading() internal {\r\n        _maxTxAmount     = _totalSupply * 1 / 100;\r\n        _maxWalletAmount = _totalSupply * 1 / 100;\r\n        _tradingOpen = true;\r\n        _launchBlock = block.number;\r\n    }\r\n \r\n    function blacklistSniper(address wallet) private {\r\n        if ( \r\n            wallet != _primaryLP && \r\n            wallet != owner && \r\n            wallet != address(this) && \r\n            wallet != _swapRouterAddress \r\n        ) {\r\n            blacklisted[wallet] = true;\r\n        }\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from Zero wallet\");\r\n        if (!_tradingOpen) {\r\n            require(_noLimits[sender], \"Trading not open\");\r\n        } else {\r\n            if ( block.number <= _launchBlock + sniperBlacklistBlocks ) {\r\n                blacklistSniper(recipient);\r\n            }\r\n        }\r\n        \r\n        require(!blacklisted[sender], \"Blacklisted wallet\");\r\n\r\n        if (\r\n            sender != address(this) &&\r\n            recipient != address(this) &&\r\n            sender != owner\r\n        ) {\r\n            require(\r\n                _checkLimits(sender, recipient, amount),\r\n                \"TX exceeds limits\"\r\n            );\r\n        }\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _checkLimits(\r\n        address sender,\r\n        address recipient,\r\n        uint256 transferAmount\r\n    ) internal view returns (bool) {\r\n        bool limitCheckPassed = true;\r\n        if (_tradingOpen && !_noLimits[sender] && !_noLimits[recipient]) {\r\n            if (transferAmount > _maxTxAmount) {\r\n                limitCheckPassed = false;\r\n            } else if (\r\n                !_isLP[recipient] &&\r\n                (_balances[recipient] + transferAmount > _maxWalletAmount)\r\n            ) {\r\n                limitCheckPassed = false;\r\n            }\r\n        }\r\n        return limitCheckPassed;\r\n    }\r\n\r\n    function _checkTradingOpen(address sender) private view returns (bool) {\r\n        bool checkResult = false;\r\n        if (_tradingOpen) {\r\n            checkResult = true;\r\n        } else if (_noLimits[sender]) {\r\n            checkResult = true;\r\n        }\r\n\r\n        return checkResult;\r\n    }\r\n\r\n    function isUnlimited(address wallet) external view returns (bool limits) {\r\n        return (_noLimits[wallet]);\r\n    }\r\n\r\n    function isBlacklisted(address wallet) external view returns (bool limits) {\r\n        return (blacklisted[wallet]);\r\n    }\r\n\r\n    function setUnlimited(\r\n        address wallet,\r\n        bool noLimits\r\n    ) external onlyOwner {\r\n        if (noLimits) {\r\n            require(!_isLP[wallet], \"Cannot exempt LP\");\r\n        }\r\n        _noLimits[wallet] = noLimits;\r\n    }\r\n\r\n\r\n    function maxWallet() external view returns (uint256) {\r\n        return _maxWalletAmount;\r\n    }\r\n\r\n    function maxTransaction() external view returns (uint256) {\r\n        return _maxTxAmount;\r\n    }\r\n\r\n    function setLimits(uint16 maxTransactionPermille, uint16 maxWalletPermille)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 newTxAmt = (_totalSupply * maxTransactionPermille) / 1000 + 1;\r\n        require(newTxAmt >= _maxTxAmount, \"tx too low\");\r\n        _maxTxAmount = newTxAmt;\r\n        uint256 newWalletAmt = (_totalSupply * maxWalletPermille) / 1000 + 1;\r\n        require(newWalletAmt >= _maxWalletAmount, \"wallet too low\");\r\n        _maxWalletAmount = newWalletAmt;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"limits\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isUnlimited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"limits\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTransactionPermille\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWalletPermille\",\"type\":\"uint16\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"noLimits\",\"type\":\"bool\"}],\"name\":\"setUnlimited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Cook", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://33d3bf15a3f4dfc540c67582d550179d79f962d83540a5a5c97bcbd350a344c5"}