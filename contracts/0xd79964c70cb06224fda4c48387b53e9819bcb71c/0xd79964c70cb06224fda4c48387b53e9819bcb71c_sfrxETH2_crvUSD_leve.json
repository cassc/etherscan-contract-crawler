{"SourceCode": "# @version 0.3.9\r\n\r\n\"\"\"\r\n@title sfrxETH2 crvUSD leverage zap\r\n@author Curve.Fi\r\n@license Copyright (c) Curve.Fi, 2020-2023 - all rights reserved\r\n@notice Creates leverage on crvUSD via CurveRouter. Does calculations for leverage.\r\n\"\"\"\r\n\r\ninterface ERC20:\r\n    def balanceOf(_for: address) -> uint256: view\r\n    def approve(_spender: address, _value: uint256) -> bool: nonpayable\r\n    def decimals() -> uint256: view\r\n\r\ninterface Router:\r\n    def exchange(_route: address[11], _swap_params: uint256[5][5], _amount: uint256, _expected: uint256, _pools: address[5]) -> uint256: payable\r\n    def get_dy(_route: address[11], _swap_params: uint256[5][5], _amount: uint256, _pools: address[5]) -> uint256: view\r\n\r\ninterface Controller:\r\n    def loan_discount() -> uint256: view\r\n    def amm() -> address: view\r\n    def calculate_debt_n1(collateral: uint256, debt: uint256, N: uint256) -> int256: view\r\n\r\ninterface LLAMMA:\r\n    def A() -> uint256: view\r\n    def active_band() -> int256: view\r\n    def can_skip_bands(n_end: int256) -> bool: view\r\n    def get_base_price() -> uint256: view\r\n    def price_oracle() -> uint256: view\r\n    def p_oracle_up(n: int256) -> uint256: view\r\n    def active_band_with_skip() -> int256: view\r\n\r\n\r\nDEAD_SHARES: constant(uint256) = 1000\r\nMAX_TICKS_UINT: constant(uint256) = 50\r\nMAX_P_BASE_BANDS: constant(int256) = 5\r\nMAX_SKIP_TICKS: constant(uint256) = 1024\r\n\r\nCRVUSD: constant(address) = 0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E\r\n\r\nCONTROLLER: immutable(address)\r\nROUTER: immutable(Router)\r\nAMM: immutable(LLAMMA)\r\nA: immutable(uint256)\r\nAminus1: immutable(uint256)\r\nLOG2_A_RATIO: immutable(int256)  # log(A / (A - 1))\r\nSQRT_BAND_RATIO: immutable(uint256)\r\nCOLLATERAL_PRECISION: immutable(uint256)\r\n\r\nroutes: public(HashMap[uint256, address[11]])\r\nroute_params: public(HashMap[uint256, uint256[5][5]])\r\nroute_pools: public(HashMap[uint256, address[5]])\r\nroute_names: public(HashMap[uint256, String[100]])\r\nroutes_count: public(constant(uint256)) = 5\r\n\r\n\r\n@external\r\ndef __init__(\r\n        _controller: address,\r\n        _collateral: address,\r\n        _router: address,\r\n        _routes: DynArray[address[11], 5],\r\n        _route_params: DynArray[uint256[5][5], 5],\r\n        _route_pools: DynArray[address[5], 5],\r\n        _route_names: DynArray[String[100], 5],\r\n):\r\n    CONTROLLER = _controller\r\n    ROUTER = Router(_router)\r\n\r\n    amm: address = Controller(_controller).amm()\r\n    AMM = LLAMMA(amm)\r\n    _A: uint256 = LLAMMA(amm).A()\r\n    A = _A\r\n    Aminus1 = _A - 1\r\n    LOG2_A_RATIO = self.log2(_A * 10 ** 18 / unsafe_sub(_A, 1))\r\n    SQRT_BAND_RATIO = isqrt(unsafe_div(10 ** 36 * _A, unsafe_sub(_A, 1)))\r\n    COLLATERAL_PRECISION = pow_mod256(10, 18 - ERC20(_collateral).decimals())\r\n\r\n    for i in range(5):\r\n        if i >= len(_routes):\r\n            break\r\n        self.routes[i] = _routes[i]\r\n        self.route_params[i] = _route_params[i]\r\n        self.route_pools[i] = _route_pools[i]\r\n        self.route_names[i] = _route_names[i]\r\n\r\n    ERC20(CRVUSD).approve(_router, max_value(uint256), default_return_value=True)\r\n    ERC20(_collateral).approve(_controller, max_value(uint256), default_return_value=True)\r\n\r\n\r\n@internal\r\n@pure\r\ndef log2(_x: uint256) -> int256:\r\n    \"\"\"\r\n    @notice int(1e18 * log2(_x / 1e18))\r\n    \"\"\"\r\n    # adapted from: https://medium.com/coinmonks/9aef8515136e\r\n    # and vyper log implementation\r\n    # Might use more optimal solmate's log\r\n    inverse: bool = _x < 10**18\r\n    res: uint256 = 0\r\n    x: uint256 = _x\r\n    if inverse:\r\n        x = 10**36 / x\r\n    t: uint256 = 2**7\r\n    for i in range(8):\r\n        p: uint256 = pow_mod256(2, t)\r\n        if x >= unsafe_mul(p, 10**18):\r\n            x = unsafe_div(x, p)\r\n            res = unsafe_add(unsafe_mul(t, 10**18), res)\r\n        t = unsafe_div(t, 2)\r\n    d: uint256 = 10**18\r\n    for i in range(34):  # 10 decimals: math.log(10**10, 2) == 33.2. Need more?\r\n        if (x >= 2 * 10**18):\r\n            res = unsafe_add(res, d)\r\n            x = unsafe_div(x, 2)\r\n        x = unsafe_div(unsafe_mul(x, x), 10**18)\r\n        d = unsafe_div(d, 2)\r\n    if inverse:\r\n        return -convert(res, int256)\r\n    else:\r\n        return convert(res, int256)\r\n\r\n\r\n@internal\r\n@view\r\ndef _get_k_effective(collateral: uint256, N: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Intermediary method which calculates k_effective defined as x_effective / p_base / y,\r\n            however discounted by loan_discount.\r\n            x_effective is an amount which can be obtained from collateral when liquidating\r\n    @param N Number of bands the deposit is made into\r\n    @return k_effective\r\n    \"\"\"\r\n    # x_effective = sum_{i=0..N-1}(y / N * p(n_{n1+i})) =\r\n    # = y / N * p_oracle_up(n1) * sqrt((A - 1) / A) * sum_{0..N-1}(((A-1) / A)**k)\r\n    # === d_y_effective * p_oracle_up(n1) * sum(...) === y * k_effective * p_oracle_up(n1)\r\n    # d_k_effective = N / sqrt(A / (A - 1))\r\n    # d_k_effective: uint256 = 10**18 * unsafe_sub(10**18, discount) / (SQRT_BAND_RATIO * N)\r\n    # Make some extra discount to always deposit lower when we have DEAD_SHARES rounding\r\n    discount: uint256 = Controller(CONTROLLER).loan_discount()\r\n    d_k_effective: uint256 = 10**18 * unsafe_sub(\r\n        10**18, min(discount + (DEAD_SHARES * 10**18) / max(collateral / N, DEAD_SHARES), 10**18)\r\n    ) / (SQRT_BAND_RATIO * N)\r\n    k_effective: uint256 = d_k_effective\r\n    for i in range(1, MAX_TICKS_UINT):\r\n        if i == N:\r\n            break\r\n        d_k_effective = unsafe_div(d_k_effective * Aminus1, A)\r\n        k_effective = unsafe_add(k_effective, d_k_effective)\r\n    return k_effective\r\n\r\n\r\n@internal\r\n@view\r\ndef _max_p_base() -> uint256:\r\n    \"\"\"\r\n    @notice Calculate max base price including skipping bands\r\n    \"\"\"\r\n    p_oracle: uint256 = AMM.price_oracle()\r\n    # Should be correct unless price changes suddenly by MAX_P_BASE_BANDS+ bands\r\n    n1: int256 = unsafe_div(self.log2(AMM.get_base_price() * 10**18 / p_oracle), LOG2_A_RATIO) + MAX_P_BASE_BANDS\r\n    p_base: uint256 = AMM.p_oracle_up(n1)\r\n    n_min: int256 = AMM.active_band_with_skip()\r\n\r\n    for i in range(MAX_SKIP_TICKS + 1):\r\n        n1 -= 1\r\n        if n1 <= n_min:\r\n            break\r\n        p_base_prev: uint256 = p_base\r\n        p_base = unsafe_div(p_base * A, Aminus1)\r\n        if p_base > p_oracle:\r\n            return p_base_prev\r\n\r\n    return p_base\r\n\r\n\r\n@view\r\n@internal\r\ndef _get_collateral(stablecoin: uint256, route_idx: uint256) -> uint256:\r\n    return ROUTER.get_dy(self.routes[route_idx], self.route_params[route_idx], stablecoin, self.route_pools[route_idx])\r\n\r\n\r\n@view\r\n@internal\r\ndef _get_collateral_and_avg_price(stablecoin: uint256, route_idx: uint256) -> uint256[2]:\r\n    collateral: uint256 = self._get_collateral(stablecoin, route_idx)\r\n    return [collateral, stablecoin * 10**18 / (collateral * COLLATERAL_PRECISION)]\r\n\r\n\r\n@view\r\n@external\r\n@nonreentrant('lock')\r\ndef get_collateral(stablecoin: uint256, route_idx: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate the expected amount of collateral by given stablecoin amount\r\n    @param stablecoin Amount of stablecoin\r\n    @param route_idx Index of the route to use\r\n    @return Amount of collateral\r\n    \"\"\"\r\n    return self._get_collateral(stablecoin, route_idx)\r\n\r\n\r\n@view\r\n@external\r\n@nonreentrant('lock')\r\ndef get_collateral_underlying(stablecoin: uint256, route_idx: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice This method is needed just to make ABI the same as ABI for sfrxETH and wstETH\r\n    \"\"\"\r\n    return self._get_collateral(stablecoin, route_idx)\r\n\r\n\r\n@external\r\n@view\r\ndef calculate_debt_n1(collateral: uint256, debt: uint256, N: uint256, route_idx: uint256) -> int256:\r\n    \"\"\"\r\n    @notice Calculate the upper band number for the deposit to sit in to support\r\n            the given debt with full leverage, which means that all borrowed\r\n            stablecoin is converted to collateral coin and deposited in addition\r\n            to collateral provided by user. Reverts if requested debt is too high.\r\n    @param collateral Amount of collateral (at its native precision)\r\n    @param debt Amount of requested debt\r\n    @param N Number of bands to deposit into\r\n    @param route_idx Index of the route which should be use for exchange stablecoin to collateral\r\n    @return Upper band n1 (n1 <= n2) to deposit into. Signed integer\r\n    \"\"\"\r\n    leverage_collateral: uint256 = self._get_collateral(debt, route_idx)\r\n    return Controller(CONTROLLER).calculate_debt_n1(collateral + leverage_collateral, debt, N)\r\n\r\n\r\n@internal\r\n@view\r\ndef _max_borrowable(collateral: uint256, N: uint256, route_idx: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Calculation of maximum which can be borrowed with leverage\r\n    @param collateral Amount of collateral (at its native precision)\r\n    @param N Number of bands to deposit into\r\n    @param route_idx Index of the route which should be use for exchange stablecoin to collateral\r\n    @return Maximum amount of stablecoin to borrow with leverage\r\n    \"\"\"\r\n    # max_borrowable = collateral / (1 / (k_effective * max_p_base) - 1 / p_avg)\r\n    user_collateral: uint256 = collateral * COLLATERAL_PRECISION\r\n    leverage_collateral: uint256 = 0\r\n    k_effective: uint256 = self._get_k_effective(user_collateral + leverage_collateral, N)\r\n    max_p_base: uint256 = self._max_p_base()\r\n    p_avg: uint256 = AMM.price_oracle()\r\n    max_borrowable_prev: uint256 = 0\r\n    max_borrowable: uint256 = 0\r\n    for i in range(10):\r\n        max_borrowable_prev = max_borrowable\r\n        max_borrowable = user_collateral * 10**18 / (10**36 / k_effective * 10**18 / max_p_base - 10**36 / p_avg)\r\n        if max_borrowable > max_borrowable_prev:\r\n            if max_borrowable - max_borrowable_prev <= 1:\r\n                return max_borrowable\r\n        else:\r\n            if max_borrowable_prev - max_borrowable <= 1:\r\n                return max_borrowable\r\n        res: uint256[2] = self._get_collateral_and_avg_price(max_borrowable, route_idx)\r\n        leverage_collateral = res[0]\r\n        p_avg = res[1]\r\n        k_effective = self._get_k_effective(user_collateral + leverage_collateral, N)\r\n\r\n    return min(max_borrowable * 999 / 1000, ERC20(CRVUSD).balanceOf(CONTROLLER)) # Cannot borrow beyond the amount of coins Controller has\r\n\r\n\r\n@external\r\n@view\r\ndef max_borrowable(collateral: uint256, N: uint256, route_idx: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Calculation of maximum which can be borrowed with leverage\r\n    @param collateral Amount of collateral (at its native precision)\r\n    @param N Number of bands to deposit into\r\n    @param route_idx Index of the route which should be use for exchange stablecoin to collateral\r\n    @return Maximum amount of stablecoin to borrow with leverage\r\n    \"\"\"\r\n    return self._max_borrowable(collateral, N ,route_idx)\r\n\r\n\r\n@external\r\n@view\r\ndef max_collateral(collateral: uint256, N: uint256, route_idx: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Calculation of maximum collateral position which can be created with leverage\r\n    @param collateral Amount of collateral (at its native precision)\r\n    @param N Number of bands to deposit into\r\n    @param route_idx Index of the route which should be use for exchange stablecoin to collateral\r\n    @return user_collateral + max_leverage_collateral\r\n    \"\"\"\r\n    max_borrowable: uint256 = self._max_borrowable(collateral, N, route_idx)\r\n    max_leverage_collateral: uint256 = self._get_collateral(max_borrowable, route_idx)\r\n    return collateral + max_leverage_collateral\r\n\r\n\r\n@external\r\n@view\r\ndef max_borrowable_and_collateral(collateral: uint256, N: uint256, route_idx: uint256) -> uint256[2]:\r\n    \"\"\"\r\n    @notice Calculation of maximum which can be borrowed with leverage and maximum collateral position which can be created then\r\n    @param collateral Amount of collateral (at its native precision)\r\n    @param N Number of bands to deposit into\r\n    @param route_idx Index of the route which should be use for exchange stablecoin to collateral\r\n    @return [max_borrowable, user_collateral + max_leverage_collateral]\r\n    \"\"\"\r\n    max_borrowable: uint256 = self._max_borrowable(collateral, N, route_idx)\r\n    max_leverage_collateral: uint256 = self._get_collateral(max_borrowable, route_idx)\r\n    return [max_borrowable, collateral + max_leverage_collateral]\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef callback_deposit(user: address, stablecoins: uint256, collateral: uint256, debt: uint256, callback_args: DynArray[uint256, 5]) -> uint256[2]:\r\n    \"\"\"\r\n    @notice Callback method which should be called by controller to create leveraged position\r\n    @param user Address of the user\r\n    @param stablecoins Amount of stablecoin (always = 0)\r\n    @param collateral Amount of collateral given by user\r\n    @param debt Borrowed amount\r\n    @param callback_args [route_idx, min_recv]\r\n    return [0, leverage_collateral], leverage_collateral is the amount of collateral got as a result of selling borrowed stablecoin\r\n    \"\"\"\r\n    assert msg.sender == CONTROLLER\r\n\r\n    route_idx: uint256 = callback_args[0]\r\n    min_recv: uint256 = callback_args[1]\r\n    leverage_collateral: uint256 = ROUTER.exchange(self.routes[route_idx], self.route_params[route_idx], debt, min_recv, self.route_pools[route_idx])\r\n\r\n    return [0, leverage_collateral]", "ABI": "[{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"},{\"name\":\"_collateral\",\"type\":\"address\"},{\"name\":\"_router\",\"type\":\"address\"},{\"name\":\"_routes\",\"type\":\"address[11][]\"},{\"name\":\"_route_params\",\"type\":\"uint256[5][5][]\"},{\"name\":\"_route_pools\",\"type\":\"address[5][]\"},{\"name\":\"_route_names\",\"type\":\"string[]\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_collateral\",\"inputs\":[{\"name\":\"stablecoin\",\"type\":\"uint256\"},{\"name\":\"route_idx\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_collateral_underlying\",\"inputs\":[{\"name\":\"stablecoin\",\"type\":\"uint256\"},{\"name\":\"route_idx\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calculate_debt_n1\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"uint256\"},{\"name\":\"debt\",\"type\":\"uint256\"},{\"name\":\"N\",\"type\":\"uint256\"},{\"name\":\"route_idx\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"max_borrowable\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"uint256\"},{\"name\":\"N\",\"type\":\"uint256\"},{\"name\":\"route_idx\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"max_collateral\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"uint256\"},{\"name\":\"N\",\"type\":\"uint256\"},{\"name\":\"route_idx\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"max_borrowable_and_collateral\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"uint256\"},{\"name\":\"N\",\"type\":\"uint256\"},{\"name\":\"route_idx\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"callback_deposit\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"stablecoins\",\"type\":\"uint256\"},{\"name\":\"collateral\",\"type\":\"uint256\"},{\"name\":\"debt\",\"type\":\"uint256\"},{\"name\":\"callback_args\",\"type\":\"uint256[]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"routes\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"},{\"name\":\"arg1\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"route_params\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"},{\"name\":\"arg1\",\"type\":\"uint256\"},{\"name\":\"arg2\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"route_pools\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"},{\"name\":\"arg1\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"route_names\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"routes_count\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]", "ContractName": "sfrxETH2 crvUSD leverage zap", "CompilerVersion": "vyper:0.3.9", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "000000000000000000000000ec0820efafc41d8943ee8de495fc9ba8495b15cf000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000f0d4c12a5768d806021f80a262b4d39d26c58b8d00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000007e000000000000000000000000000000000000000000000000000000000000017a00000000000000000000000000000000000000000000000000000000000001ae00000000000000000000000000000000000000000000000000000000000000005000000000000000000000000f939e0a03fb07f59a73314e73794be0e57ac1b4e0000000000000000000000004dece678ceceb27446b35c672dc7d61f30bad69e000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000d51a44d3fae010294c616388b506acda1bfaae46000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000bafa44efe7901e04e39dad13167d089c559c11380000000000000000000000005e8422345238f34275888049021821e8e08caa1f000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000f939e0a03fb07f59a73314e73794be0e57ac1b4e000000000000000000000000390f3595bca2df7d23783dfd126427cceb997bf4000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000d51a44d3fae010294c616388b506acda1bfaae46000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000bafa44efe7901e04e39dad13167d089c559c11380000000000000000000000005e8422345238f34275888049021821e8e08caa1f000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f939e0a03fb07f59a73314e73794be0e57ac1b4e000000000000000000000000ca978a0528116dda3cba9acd3e68bc6191ca53d00000000000000000000000008e870d67f660d95d5be530380d0ec0bd388289e1000000000000000000000000c270b3b858c335b6ba5d5b10e2da8a09976005ad000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000d51a44d3fae010294c616388b506acda1bfaae46000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000bafa44efe7901e04e39dad13167d089c559c11380000000000000000000000005e8422345238f34275888049021821e8e08caa1f000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000f939e0a03fb07f59a73314e73794be0e57ac1b4e00000000000000000000000034d655069f4cac1547e4c8ca284ffff5ad4a8db00000000000000000000000000000000000085d4780b73119b644ae5ecd22b376000000000000000000000000ecd5e75afb02efa118af914515d6521aabd189f1000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000d51a44d3fae010294c616388b506acda1bfaae46000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000bafa44efe7901e04e39dad13167d089c559c11380000000000000000000000005e8422345238f34275888049021821e8e08caa1f000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000f939e0a03fb07f59a73314e73794be0e57ac1b4e0000000000000000000000000cd6f267b2086bea681e922e19d40512511be538000000000000000000000000853d955acef822db058eb8505911ed77f175b99e000000000000000000000000d632f22692fac7611d2aa1c0d552930d43caed3b000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000d51a44d3fae010294c616388b506acda1bfaae46000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000bafa44efe7901e04e39dad13167d089c559c11380000000000000000000000005e8422345238f34275888049021821e8e08caa1f000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38f000000000000000000000000ac3e018457b222d93114458476f3e3416abbe38fdece678ceceb27446b35c672dc7d61f30bad69e000000000000000000000000bebc44782c7db0a1a60cb6fe97d0b483032ff1c7000000000000000000000000d51a44d3fae010294c616388b506acda1bfaae4600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000390f3595bca2df7d23783dfd126427cceb997bf4000000000000000000000000d51a44d3fae010294c616388b506acda1bfaae46000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ca978a0528116dda3cba9acd3e68bc6191ca53d0000000000000000000000000c270b3b858c335b6ba5d5b10e2da8a09976005ad000000000000000000000000d51a44d3fae010294c616388b506acda1bfaae460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d655069f4cac1547e4c8ca284ffff5ad4a8db0000000000000000000000000ecd5e75afb02efa118af914515d6521aabd189f1000000000000000000000000d51a44d3fae010294c616388b506acda1bfaae46000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cd6f267b2086bea681e922e19d40512511be538000000000000000000000000d632f22692fac7611d2aa1c0d552930d43caed3b000000000000000000000000d51a44d3fae010294c616388b506acda1bfaae4600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000466372765553442f55534443202d3e2033706f6f6c202d3e2074726963727970746f32202d3e20667278455448206d696e746572202d3e207366727845544820777261707065720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d6372765553442f55534454202d3e2074726963727970746f32202d3e20667278455448206d696e746572202d3e2073667278455448207772617070657200000000000000000000000000000000000000000000000000000000000000000000556372765553442f55534450202d3e20666163746f72792d76322d353920285553445029202d3e2074726963727970746f32202d3e20667278455448206d696e746572202d3e20736672784554482077726170706572000000000000000000000000000000000000000000000000000000000000000000000000000000000000456372765553442f54555344202d3e2074757364202d3e2074726963727970746f32202d3e20667278455448206d696e746572202d3e2073667278455448207772617070657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000456372765553442f46524158202d3e2066726178202d3e2074726963727970746f32202d3e20667278455448206d696e746572202d3e20736672784554482077726170706572000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}