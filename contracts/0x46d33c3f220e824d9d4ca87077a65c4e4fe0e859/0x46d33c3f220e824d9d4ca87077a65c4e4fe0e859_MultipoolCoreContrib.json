{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tokens/NFTMUL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract MultipoolCoreContributor {\\n    string private _name;\\n    string private _symbol;\\n    string private _baseURI;\\n\\n    mapping(uint256 => address) private _owners;\\n    mapping(address => uint256) private _balances;\\n    mapping(uint256 => address) private _tokenApprovals;\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    address private _admin;\\n    address private _mintAdmin;\\n\\n    uint256 private _currentTokenId = 0; // To keep track of tokenIDs\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    constructor(string memory name_, string memory symbol_, string memory baseURI_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _baseURI = baseURI_;\\n        _admin = msg.sender;\\n        _mintAdmin = msg.sender;\\n    }\\n\\n    // External functions\\n\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n        string memory base = _baseURI;\\n        return bytes(base).length > 0 ? _concatStrings(base, _uintToString(tokenId)) : \\\"\\\";\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"Multipool: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    function balanceOf(address owner) external view returns (uint256) {\\n        require(owner != address(0), \\\"Multipool: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    function approve(address to, uint256 tokenId) external {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"Multipool: approval to current owner\\\");\\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender), \\\"Multipool: approve caller is not owner nor approved for all\\\");\\n        _approve(to, tokenId);\\n    }\\n\\n    function getApproved(uint256 tokenId) external view returns (address) {\\n        require(_exists(tokenId), \\\"Multipool: approved query for nonexistent token\\\");\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    function setApprovalForAll(address operator, bool _approved) external {\\n        require(operator != msg.sender, \\\"Multipool: approve to caller\\\");\\n        _operatorApprovals[msg.sender][operator] = _approved;\\n        emit ApprovalForAll(msg.sender, operator, _approved);\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function mint(address to) external {\\n        require(msg.sender == _mintAdmin, \\\"Multipool: only the admin can mint\\\");\\n        _mint(to, _currentTokenId++);\\n    }\\n\\n    function superTransfer(address from, address to, uint256 tokenId) external {\\n        require(msg.sender == _admin, \\\"Multipool: only the admin can execute superTransfer\\\");\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function setBaseURI(string memory baseURI_) external {\\n        require(msg.sender == _admin, \\\"Multipool: only the admin can set baseURI\\\");\\n        _baseURI = baseURI_;\\n    }\\n\\n    function changeTransferAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"Multipool: only the current admin can change the admin\\\");\\n        _admin = newAdmin;\\n    }\\n\\n    function changeMintAdmin(address newAdmin) external {\\n        require(msg.sender == _mintAdmin, \\\"Multipool: only the current admin can change the admin\\\");\\n        _mintAdmin = newAdmin;\\n    }\\n\\n    // Internal functions\\n\\n    function _mint(address to, uint256 tokenId) internal {\\n        require(to != address(0), \\\"Multipool: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"Multipool: token already minted\\\");\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        require(ownerOf(tokenId) == from, \\\"Multipool: transfer of token that is not owned\\\");\\n        require(to != address(0), \\\"Multipool: transfer to the zero address\\\");\\n        _approve(address(0), tokenId);\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function _approve(address to, uint256 tokenId) internal {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    function _requireOwned(uint256 tokenId) internal view {\\n        require(_exists(tokenId), \\\"Multipool: operator query for nonexistent token\\\");\\n    }\\n\\n    function _concatStrings(string memory a, string memory b) internal pure returns (string memory) {\\n        return string(abi.encodePacked(a, b));\\n    }\\n\\n    function _uintToString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + value % 10));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeMintAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeTransferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"superTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MultipoolCoreContributor", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000001b4d756c7469706f6f6c20436f726520436f6e7472696275746f7273000000000000000000000000000000000000000000000000000000000000000000000000044d50434300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006468747470733a2f2f677261792d706572736f6e616c2d77656173656c2d3635352e6d7970696e6174612e636c6f75642f697066732f516d57615967326a694e7856525858666751786d373577585337683351724e415a697a46634c7657765041504d442f00000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}