{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Agora/IAgoraERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n// Powered by Agora\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport {IAgoraERC20Config} from \\\"./IAgoraERC20Config.sol\\\";\\r\\n\\r\\ninterface IAgoraERC20 is IAgoraERC20Config, IERC20, IERC20Metadata {\\r\\n    function addLiquidity() external payable returns (address);\\r\\n\\r\\n    event LiquidityLocked(uint256 lpTokens, uint256 daysLocked);\\r\\n    event TaxChanged(\\r\\n        uint256 previousBuyTax,\\r\\n        uint256 previousSellTax,\\r\\n        uint256 newBuyTax,\\r\\n        uint256 newSellTax\\r\\n    );\\r\\n    event LPTaxChanged(\\r\\n        uint256 previousBuyTax,\\r\\n        uint256 previousSellTax,\\r\\n        uint256 newBuyTax,\\r\\n        uint256 newSellTax\\r\\n    );\\r\\n    event LiquidityAdded(\\r\\n        uint256 tokensSupplied,\\r\\n        uint256 ethSupplied,\\r\\n        uint256 lpTokensIssued\\r\\n    );\\r\\n    event LimitsRaised(\\r\\n        uint128 oldBuyLimit,\\r\\n        uint128 oldSellLimit,\\r\\n        uint128 oldMaxWallet,\\r\\n        uint128 newBuyLimit,\\r\\n        uint128 newSellLimit,\\r\\n        uint128 newMaxWallet\\r\\n    );\\r\\n    event LiquidityBurned(uint256 liquidityBurned);\\r\\n    event LiquiditySupplied(uint256 tokens, uint256 eth);\\r\\n    event ExternalCallError(uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Agora/IAgoraERC20Config.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n// Powered by Agora\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\ninterface IAgoraERC20Config {\\r\\n\\r\\n    /**\\r\\n     * @dev information used to construct the token.\\r\\n     */\\r\\n    struct TokenConstructorParameters {\\r\\n        bytes baseParameters;\\r\\n        bytes taxParameters;\\r\\n        bytes tokenLPInfo;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Basic info of the token\\r\\n     */\\r\\n    struct TokenInfoParameters {\\r\\n        string name;\\r\\n        string symbol;\\r\\n        bool autoCreateLiquidity;\\r\\n        uint256 maxSupply;\\r\\n        address tokensRecepient;\\r\\n        uint256 maxTokensWallet;\\r\\n        bool payInTax;\\r\\n        bool protectLiquidity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @dev This struct express the taxes on per 1000, to allow percetanges between 0 and 1. \\r\\n     */\\r\\n    struct TaxParameters {\\r\\n        uint256 buyTax;\\r\\n        uint256 sellTax;\\r\\n        uint256 lpBuyTax;\\r\\n        uint256 lpSellTax;\\r\\n        uint256 maxTxBuy;\\r\\n        uint256 maxTxSell;\\r\\n        address taxSwapRecepient;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Liquidity pool supply information\\r\\n     */\\r\\n    struct TokenLpInfo {\\r\\n        uint256 lpTokensupply;\\r\\n        uint256 ethForSupply;\\r\\n        bool burnLP;\\r\\n        uint256 lockFee;\\r\\n        uint256 lpLockUpInDays;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/Agora/IAgoraErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n// Powered by Agora\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\ninterface IAgoraErrors {\\r\\n\\r\\n    error NotEnoughBalance();\\r\\n\\r\\n    error CallerIsNotTheOwner();\\r\\n    error CannotSetNewOwnerToTheZeroAddress();\\r\\n    error TaxesCanNotBeRaised();\\r\\n    error ApproveFromTheZeroAddress();\\r\\n    error ApproveToTheZeroAddress();\\r\\n    error OperationNotAllowed();\\r\\n    error BurnFromTheZeroAddress();\\r\\n    error BurnExceedsBalance();\\r\\n    error MintToZeroAddress();\\r\\n    error LpTokensExceedsTotalSupply();\\r\\n    error TooFewLPTokens();\\r\\n    error LPAlreadyCreated();\\r\\n    error NotEnoughFundsForLP();\\r\\n    error HardCapIsTooHigh();\\r\\n    error LPNotInit();\\r\\n    error TransactionIsTooBig();\\r\\n    error LimitsLoweringIsNotAllowed();\\r\\n    error MaxWalletExceeded();\\r\\n    error InsufficientAllowance();\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Agora/Security/Authoritative.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport {IAuthErrors} from \\\"./Errors.sol\\\";\\r\\nimport {Revertible} from \\\"../Utils/Revertible.sol\\\";\\r\\n\\r\\ncontract Authoritative is IAuthErrors, Revertible {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    EnumerableSet.AddressSet private _admins;\\r\\n    address public superAdmin;\\r\\n\\r\\n    event SuperAdminTransferred(address oldSuperAdmin, address newSuperAdmin);\\r\\n    event PlatformAdminAdded(address platformAdmin);\\r\\n    event PlatformAdminRevoked(address platformAdmin);\\r\\n\\r\\n    modifier onlySuperAdmin() {\\r\\n        if (!isSuperAdmin(msg.sender)) {\\r\\n            revert CallerIsNotSuperAdmin(msg.sender);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPlatformAdmin() {\\r\\n        if (!isPlatformAdmin(msg.sender))\\r\\n            revert CallerIsNotPlatformAdmin(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isSuperAdmin(address addressToCheck_) public view returns (bool) {\\r\\n        return (superAdmin == addressToCheck_);\\r\\n    }\\r\\n\\r\\n    function isPlatformAdmin(\\r\\n        address addressToCheck_\\r\\n    ) public view returns (bool) {\\r\\n        return (_admins.contains(addressToCheck_));\\r\\n    }\\r\\n\\r\\n    function grantPlatformAdmin(\\r\\n        address newPlatformAdmin_\\r\\n    ) public onlySuperAdmin {\\r\\n        if (newPlatformAdmin_ == address(0)) {\\r\\n            _revert(PlatformAdminCannotBeAddressZero.selector);\\r\\n        }\\r\\n        // Add this to the enumerated list:\\r\\n        _admins.add(newPlatformAdmin_);\\r\\n        emit PlatformAdminAdded(newPlatformAdmin_);\\r\\n    }\\r\\n\\r\\n    function revokePlatformAdmin(address oldAdmin_) public onlySuperAdmin {\\r\\n        _admins.remove(oldAdmin_);\\r\\n        emit PlatformAdminRevoked(oldAdmin_);\\r\\n    }\\r\\n\\r\\n    function transferSuperAdmin(address newSuperAdmin_) public onlySuperAdmin {\\r\\n        address oldSuperAdmin = superAdmin;\\r\\n        superAdmin = newSuperAdmin_;\\r\\n        emit SuperAdminTransferred(oldSuperAdmin, newSuperAdmin_);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Agora/Security/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\ninterface IAuthErrors {\\r\\n    error CallerIsNotSuperAdmin(address caller);\\r\\n    error CallerIsNotPlatformAdmin(address caller);\\r\\n    error PlatformAdminCannotBeAddressZero();\\r\\n}\"\r\n    },\r\n    \"contracts/Agora/Security/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n// Based on OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport {Revertible} from \\\"../Utils/Revertible.sol\\\";\\r\\nimport {IAgoraErrors} from \\\"../IAgoraErrors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Revertible, Context, IAgoraErrors {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        if (owner() != _msgSender()) {\\r\\n            _revert(CallerIsNotTheOwner.selector);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        if (newOwner == address(0)) {\\r\\n            _revert(CannotSetNewOwnerToTheZeroAddress.selector);\\r\\n        }\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Agora/Utils/Revertible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Powered by Agora\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nabstract contract Revertible {\\r\\n    function _revert(bytes4 errorSelector) internal pure {\\r\\n        assembly {\\r\\n            mstore(0x00, errorSelector)\\r\\n            revert(0x00, 0x04)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/StarShip/Interfaces/IStarShipDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n// Powered by Agora\\r\\n\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\n\\r\\ninterface IStarShipDeployer {\\r\\n    error DeploymentError();\\r\\n    error InvalidID();\\r\\n\\r\\n    function DeployNewToken(\\r\\n        bytes32 salt,\\r\\n        bytes32 hash,\\r\\n        bytes memory arguments\\r\\n    ) external payable returns (address erc20Address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/StarShip/StarBaseAbstractERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport {IUniswapV2Factory} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport {IUniswapV2Router02} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport {IUniswapV2Pair} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport {IUniswapV2Locker} from \\\"../ThirdParty/IUniswapV2Locker.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IAgoraERC20} from \\\"../Agora/IAgoraERC20.sol\\\";\\r\\nimport {Ownable} from \\\"../Agora/Security/Ownable.sol\\\";\\r\\n\\r\\nabstract contract StarBaseAbstractERC20 is IAgoraERC20, Ownable {\\r\\n    bytes32 public constant x_ID_HASH =\\r\\n    0x4D45544144524F504D45544144524F504D45544144524F504D45544144524F50;\\r\\n\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n\\r\\n    /** @dev {_balances} Addresses balances */\\r\\n    mapping(address => uint256) internal _balances;\\r\\n\\r\\n    /** @dev {_allowances} Addresses allocance details */\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    /** @dev {_unlimited} Enumerable set for addresses where limits do not apply */\\r\\n    EnumerableSet.AddressSet internal _excludedFromLimits;\\r\\n\\r\\n    // Config\\r\\n    IUniswapV2Router02 internal immutable _uniswapRouter;\\r\\n    uint256 internal constant MAX_SWAP_THRESHOLD_MULTIPLE = 20;\\r\\n    uint256 internal constant CALL_GAS_LIMIT = 50000;\\r\\n    address public immutable factory;\\r\\n    address public immutable startShipVault;\\r\\n    address public taxRecipient;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    uint128 private _totalSupply;\\r\\n\\r\\n    // Tax\\r\\n    bool private _hasTax;\\r\\n    uint16 public buyTax;\\r\\n    uint16 public sellTax;\\r\\n    bool private _hasLPTax;\\r\\n    uint16 public buyLPTax;\\r\\n    uint16 public sellLPTax;\\r\\n    uint128 public accumulatedTax;\\r\\n    uint128 public starShipAccumulatedTax;\\r\\n    uint128 public lpAccumulatedTax;\\r\\n    bool public autoConversion;\\r\\n    uint16 public starShipTaxPoints = 5;\\r\\n    bool public shouldPayInTax;\\r\\n\\r\\n    // Liquidty info\\r\\n    uint32 public lpCreatedDate;\\r\\n    address public pairAddress;\\r\\n    bool public burnLiquidity;\\r\\n    bool internal _IsInConversion;\\r\\n    uint16 public pctForSwap; // Per thousands\\r\\n    uint128 public tokensThreshHoldForSwap;\\r\\n    uint128 public lockFee;\\r\\n    uint256 public liquidityLockedInDays;\\r\\n    uint128 public initialLiquidityFunds;\\r\\n    uint256 public lockedUntil;\\r\\n\\r\\n    // Caps\\r\\n    uint128 public buyMaxTx;\\r\\n    uint128 public sellMaxTx;\\r\\n    uint128 public maxWallet;\\r\\n\\r\\n    modifier onlyFactoryOrOwner() {\\r\\n        if (msg.sender != factory && msg.sender != owner()) {\\r\\n            _revert(OperationNotAllowed.selector);\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address[5] memory addresses_,\\r\\n        bytes memory tokenInfo_,\\r\\n        bytes memory taxesInfo_,\\r\\n        bytes memory lpInfo_\\r\\n    ) {\\r\\n        pctForSwap = 5;\\r\\n        transferOwnership(addresses_[0]);\\r\\n        _uniswapRouter = IUniswapV2Router02(addresses_[1]);\\r\\n        factory = addresses_[3];\\r\\n        startShipVault = addresses_[4];\\r\\n        TokenInfoParameters memory tokenParameters = abi.decode(\\r\\n            tokenInfo_,\\r\\n            (TokenInfoParameters)\\r\\n        );\\r\\n\\r\\n        _name = tokenParameters.name;\\r\\n        _symbol = tokenParameters.symbol;\\r\\n\\r\\n        shouldPayInTax = tokenParameters.payInTax;\\r\\n\\r\\n        tokensThreshHoldForSwap = tokensThreshHoldForSwap;\\r\\n\\r\\n        if (type(uint128).max < tokenParameters.maxTokensWallet) {\\r\\n            _revert(HardCapIsTooHigh.selector);\\r\\n        }\\r\\n\\r\\n        maxWallet = uint128(tokenParameters.maxTokensWallet);\\r\\n        TaxParameters memory taxParams = abi.decode(taxesInfo_, (TaxParameters));\\r\\n        _processLimits(taxParams);\\r\\n\\r\\n        taxRecipient = taxParams.taxSwapRecepient;\\r\\n        TokenLpInfo memory tokenLpInfo = abi.decode(lpInfo_, (TokenLpInfo));\\r\\n        _processSupply(tokenParameters, tokenLpInfo);\\r\\n        burnLiquidity = tokenLpInfo.burnLP;\\r\\n        lockFee = uint128(tokenLpInfo.lockFee);\\r\\n        liquidityLockedInDays = tokenLpInfo.lpLockUpInDays;\\r\\n        initialLiquidityFunds = uint128(tokenLpInfo.ethForSupply);\\r\\n\\r\\n        _excludedFromLimits.add(address(_uniswapRouter));\\r\\n        pairAddress = IUniswapV2Factory(_uniswapRouter.factory()).createPair(\\r\\n            address(this),\\r\\n            _uniswapRouter.WETH()\\r\\n        );\\r\\n        _excludedFromLimits.add(pairAddress);\\r\\n        _excludedFromLimits.add(address(this));\\r\\n        _excludedFromLimits.add(address(0));\\r\\n        _excludedFromLimits.add(owner());\\r\\n        _approve(address(this), address(_uniswapRouter), type(uint256).max);\\r\\n        _approve(address(this), pairAddress, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    // ###########################################\\r\\n    // ERC 20 INTERFACE IMPLEMENTATION\\r\\n    // ###########################################\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        if (account == address(0)) {\\r\\n            _revert(MintToZeroAddress.selector);\\r\\n        }\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += uint128(amount);\\r\\n        unchecked {\\r\\n        // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 amount_\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 amount_\\r\\n    ) external returns (bool) {\\r\\n        // Approvals\\r\\n        _safeGuardAllowance(from_, _msgSender(), amount_);\\r\\n        return _transfer(from_, to_, amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 amount_\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        if (owner == address(0)) {\\r\\n            _revert(ApproveFromTheZeroAddress.selector);\\r\\n        }\\r\\n\\r\\n        if (spender == address(0)) {\\r\\n            _revert(ApproveToTheZeroAddress.selector);\\r\\n        }\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        if (account == address(0)) {\\r\\n            _revert(BurnFromTheZeroAddress.selector);\\r\\n        }\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        if (accountBalance < amount) {\\r\\n            _revert(BurnExceedsBalance.selector);\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        // Overflow not possible: amount <= accountBalance <= totalSupply.\\r\\n            _totalSupply -= uint128(amount);\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys a `value` amount of tokens from the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     */\\r\\n    function burn(uint256 value) public virtual {\\r\\n        _burn(_msgSender(), value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the default value returned by this function, unless\\r\\n     * it's overridden.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n   * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n   *\\r\\n   * This internal function is equivalent to {transfer}, and can be used to\\r\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `from` must have a balance of at least `amount`.\\r\\n   */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal returns (bool) {\\r\\n\\r\\n        _safeGuardTransfer(from, to, amount);\\r\\n\\r\\n        uint128 realAmount = _applyTaxes(from, to, amount);\\r\\n\\r\\n        _swapTaxes(from, to);\\r\\n\\r\\n        unchecked {\\r\\n            _balances[from] -= amount;\\r\\n            _balances[to] += realAmount;\\r\\n        }\\r\\n        emit Transfer(from, to, realAmount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool) {\\r\\n        return _transfer(msg.sender, to, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _applyTaxes(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 amount_\\r\\n    ) internal returns (uint128) {\\r\\n        uint128 taxedAmount = uint128(amount_);\\r\\n        uint128 taxAmount = 0;\\r\\n        uint128 starshipTax = 0;\\r\\n        uint128 lpTax = 0;\\r\\n        if (_shouldApplyTax() && !_IsInConversion) {\\r\\n            if (from_ == pairAddress && !_excludedFromLimits.contains(to_)) {\\r\\n                if (buyTax > 0) {\\r\\n                    taxAmount = (taxedAmount * buyTax) / 1000;\\r\\n                }\\r\\n\\r\\n                if (shouldPayInTax) {\\r\\n                    starshipTax = (taxedAmount * starShipTaxPoints) / 1000;\\r\\n                    starShipAccumulatedTax += starshipTax;\\r\\n                }\\r\\n\\r\\n                if (_hasLPTax && buyLPTax > 0) {\\r\\n                    lpTax += (taxedAmount * buyLPTax) / 1000;\\r\\n                    lpAccumulatedTax += lpTax;\\r\\n                }\\r\\n            } else if (\\r\\n                to_ == pairAddress && !_excludedFromLimits.contains(from_)\\r\\n            ) {\\r\\n                if (sellTax > 0) {\\r\\n                    taxAmount = (taxedAmount * sellTax) / 1000;\\r\\n                }\\r\\n                if (shouldPayInTax) {\\r\\n                    starshipTax = (taxedAmount * starShipTaxPoints) / 1000;\\r\\n                    starShipAccumulatedTax += starshipTax;\\r\\n                }\\r\\n\\r\\n                if (_hasLPTax && sellLPTax > 0) {\\r\\n                    lpTax += (taxedAmount * sellLPTax) / 1000;\\r\\n                    lpAccumulatedTax += lpTax;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (taxAmount > 0 || starshipTax > 0 || lpTax > 0) {\\r\\n                unchecked {\\r\\n                    accumulatedTax += taxAmount;\\r\\n                    _balances[address(this)] += taxAmount + starshipTax + lpTax;\\r\\n                }\\r\\n\\r\\n                emit Transfer(\\r\\n                    from_,\\r\\n                    address(this),\\r\\n                    taxAmount + starshipTax + lpTax\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return taxedAmount - starshipTax - taxAmount - lpTax;\\r\\n    }\\r\\n\\r\\n    function _shouldApplyTax() internal view returns (bool) {\\r\\n        return _hasTax || shouldPayInTax || _hasLPTax;\\r\\n    }\\r\\n\\r\\n    function _buyTax() internal view returns (uint16) {\\r\\n        return shouldPayInTax ? buyTax + starShipTaxPoints : buyTax;\\r\\n    }\\r\\n\\r\\n    function _sellTax() internal view returns (uint16) {\\r\\n        return shouldPayInTax ? sellTax + starShipTaxPoints : sellTax;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n     * Reads and stores the relevant information about the taxes.\\r\\n     * @param taxParams_ Tax configuration\\r\\n     */\\r\\n    function _processLimits(TaxParameters memory taxParams_) internal {\\r\\n        if (\\r\\n            type(uint128).max < taxParams_.maxTxSell ||\\r\\n            type(uint128).max < taxParams_.maxTxBuy\\r\\n        ) {\\r\\n            _revert(HardCapIsTooHigh.selector);\\r\\n        }\\r\\n\\r\\n        buyMaxTx = uint128(taxParams_.maxTxBuy);\\r\\n        sellMaxTx = uint128(taxParams_.maxTxSell);\\r\\n\\r\\n        if (taxParams_.buyTax == 0 && taxParams_.sellTax == 0) {\\r\\n            _hasTax = false;\\r\\n        } else {\\r\\n            _hasTax = true;\\r\\n            buyTax = uint16(taxParams_.buyTax);\\r\\n            sellTax = uint16(taxParams_.sellTax);\\r\\n        }\\r\\n\\r\\n        if (taxParams_.lpBuyTax == 0 && taxParams_.lpSellTax == 0) {\\r\\n            _hasLPTax = false;\\r\\n        } else {\\r\\n            _hasLPTax = true;\\r\\n            buyLPTax = uint16(taxParams_.lpBuyTax);\\r\\n            sellLPTax = uint16(taxParams_.lpSellTax);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _processSupply(\\r\\n        TokenInfoParameters memory tokenParameters_,\\r\\n        TokenLpInfo memory tokenLpInfo_\\r\\n    ) internal virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Safeguard method to withdraw all the remaining eth to the project address\\r\\n     *\\r\\n     */\\r\\n    function withdrawNative() external {\\r\\n        _transferNative(address(this).balance, taxRecipient);\\r\\n    }\\r\\n\\r\\n    function withdrawERC20() external {\\r\\n        this.transferFrom(\\r\\n            address(this),\\r\\n            taxRecipient,\\r\\n            this.balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _transferNative(\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) internal returns (bool) {\\r\\n        uint256 gas = (CALL_GAS_LIMIT == 0 || CALL_GAS_LIMIT > gasleft())\\r\\n            ? gasleft()\\r\\n            : CALL_GAS_LIMIT;\\r\\n        (bool success, ) = to.call{value: amount, gas: gas}(\\\"\\\");\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    function toggleConversion() external onlyOwner {\\r\\n        autoConversion = !autoConversion;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to change the buy and sell tax for marketing\\r\\n     * @param newBuyTax_ New buy tax in per thousand\\r\\n     * @param newSellTax_ New sell tax in per thousand\\r\\n     */\\r\\n    function changeTaxes(\\r\\n        uint256 newBuyTax_,\\r\\n        uint256 newSellTax_,\\r\\n        uint256 newBuyLPTax_,\\r\\n        uint256 newSellLPTax_\\r\\n    ) external onlyOwner {\\r\\n\\r\\n        uint16 oldBuyTax = buyTax;\\r\\n        uint16 oldSellTax = sellTax;\\r\\n        buyTax = uint16(newBuyTax_);\\r\\n        sellTax = uint16(newSellTax_);\\r\\n\\r\\n        _hasTax = buyTax > 0 && sellTax > 0;\\r\\n\\r\\n        emit TaxChanged(oldBuyTax, oldSellTax, buyTax, sellTax);\\r\\n\\r\\n        oldBuyTax = buyLPTax;\\r\\n        oldSellTax = sellLPTax;\\r\\n        buyLPTax = uint16(newBuyLPTax_);\\r\\n        sellLPTax = uint16(newSellLPTax_);\\r\\n\\r\\n        _hasLPTax = buyLPTax > 0 && sellLPTax > 0;\\r\\n\\r\\n        emit LPTaxChanged(oldBuyTax, oldSellTax, buyLPTax, sellLPTax);\\r\\n    }\\r\\n\\r\\n    function _safeGuardTransfer(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 amount_\\r\\n    ) internal view virtual {\\r\\n        uint256 fromBalance = _balances[from_];\\r\\n\\r\\n        if (fromBalance < amount_) {\\r\\n            _revert(NotEnoughBalance.selector);\\r\\n        }\\r\\n        if (\\r\\n            buyMaxTx > 0 &&\\r\\n            from_ == pairAddress &&\\r\\n            !_excludedFromLimits.contains(to_) &&\\r\\n            amount_ > buyMaxTx\\r\\n        ) {\\r\\n            _revert(TransactionIsTooBig.selector);\\r\\n        }\\r\\n        if (\\r\\n            sellMaxTx > 0 &&\\r\\n            to_ == pairAddress &&\\r\\n            !_excludedFromLimits.contains(from_) &&\\r\\n            amount_ > sellMaxTx\\r\\n        ) {\\r\\n            _revert(TransactionIsTooBig.selector);\\r\\n        }\\r\\n        uint256 toBalance = _balances[to_];\\r\\n        if (\\r\\n            maxWallet > 0 &&\\r\\n            maxWallet < toBalance + amount_ &&\\r\\n            !_excludedFromLimits.contains(to_)\\r\\n        ) {\\r\\n            _revert(MaxWalletExceeded.selector);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function changeTransactionHardCaps(\\r\\n        uint256 newBuyMaxTx_,\\r\\n        uint256 newSellMaxTx_,\\r\\n        uint256 newMaxWallet_\\r\\n    ) external onlyOwner {\\r\\n        if (\\r\\n            newBuyMaxTx_ < buyMaxTx ||\\r\\n            newSellMaxTx_ < sellMaxTx ||\\r\\n            newMaxWallet_ < maxWallet\\r\\n        ) {\\r\\n            _revert(LimitsLoweringIsNotAllowed.selector);\\r\\n        }\\r\\n        uint128 oldMaxWallet = maxWallet;\\r\\n        uint128 oldMaxSellTx = sellMaxTx;\\r\\n        uint128 oldMaxBuyTx = buyMaxTx;\\r\\n        buyMaxTx = uint128(newBuyMaxTx_);\\r\\n        sellMaxTx = uint128(newSellMaxTx_);\\r\\n        maxWallet = uint128(newMaxWallet_);\\r\\n\\r\\n        emit LimitsRaised(\\r\\n            oldMaxBuyTx,\\r\\n            oldMaxSellTx,\\r\\n            oldMaxWallet,\\r\\n            buyMaxTx,\\r\\n            sellMaxTx,\\r\\n            maxWallet\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _safeGuardAllowance(\\r\\n        address owner_,\\r\\n        address spender_,\\r\\n        uint256 amount_\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = this.allowance(owner_, spender_);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            if (currentAllowance < amount_) {\\r\\n                _revert(InsufficientAllowance.selector);\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                _approve(owner_, spender_, currentAllowance - amount_);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n\\r\\n    function _swapTaxes(address from_, address to_) internal {\\r\\n        if (_shouldApplyTax() && autoConversion) {\\r\\n            uint256 swapBalance = accumulatedTax +\\r\\n                        starShipAccumulatedTax +\\r\\n                        lpAccumulatedTax;\\r\\n\\r\\n            uint256 swapThresholdInTokens = (_totalSupply * pctForSwap) / 1000;\\r\\n            if (\\r\\n                swapBalance >= swapThresholdInTokens &&\\r\\n                !_IsInConversion &&\\r\\n                from_ != pairAddress &&\\r\\n                from_ != address(_uniswapRouter) &&\\r\\n                to_ != address(_uniswapRouter)\\r\\n            ) {\\r\\n                _IsInConversion = true;\\r\\n                if (\\r\\n                    swapBalance >\\r\\n                    swapThresholdInTokens * MAX_SWAP_THRESHOLD_MULTIPLE\\r\\n                ) {\\r\\n                    swapBalance =\\r\\n                        swapThresholdInTokens *\\r\\n                        MAX_SWAP_THRESHOLD_MULTIPLE;\\r\\n                }\\r\\n                // Perform the auto swap to native token:\\r\\n                _doSwap(swapBalance, this.balanceOf(address(this)));\\r\\n\\r\\n                // Flag that the autoswap is complete:\\r\\n                _IsInConversion = false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _doSwap(uint256 swapBalance_, uint256 contractBalance_) internal {\\r\\n        uint256 preSwapNativeBalance = address(this).balance;\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = _uniswapRouter.WETH();\\r\\n        uint256 lpTokensProportion = 0;\\r\\n        if (swapBalance_ < contractBalance_) {\\r\\n            lpTokensProportion =\\r\\n                (swapBalance_ * lpAccumulatedTax) /\\r\\n                contractBalance_;\\r\\n        } else {\\r\\n            lpTokensProportion = lpAccumulatedTax;\\r\\n        }\\r\\n\\r\\n        // Wrap external calls in try / catch to handle errors\\r\\n        try\\r\\n        _uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            swapBalance_ - (lpTokensProportion / 2),\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 600\\r\\n        )\\r\\n        {\\r\\n\\r\\n            uint256 postSwapBalance = address(this).balance;\\r\\n            uint256 lpTokens = (lpTokensProportion / 2);\\r\\n            uint256 totalPendingSwap = accumulatedTax +\\r\\n                        starShipAccumulatedTax +\\r\\n                        lpTokens;\\r\\n            uint256 balanceToDistribute = postSwapBalance -\\r\\n                        preSwapNativeBalance;\\r\\n            uint256 projectBalanceToDistribute = (balanceToDistribute *\\r\\n                accumulatedTax) / totalPendingSwap;\\r\\n            uint256 starShipBalance = (balanceToDistribute *\\r\\n                starShipAccumulatedTax) / totalPendingSwap;\\r\\n\\r\\n            uint256 lpBalance = (balanceToDistribute * lpTokens) /\\r\\n                        totalPendingSwap;\\r\\n\\r\\n            if (swapBalance_ < contractBalance_) {\\r\\n                accumulatedTax -= uint128(\\r\\n                    (accumulatedTax * swapBalance_) / contractBalance_\\r\\n                );\\r\\n                starShipAccumulatedTax -= uint128(\\r\\n                    (starShipAccumulatedTax * swapBalance_) / contractBalance_\\r\\n                );\\r\\n\\r\\n                lpAccumulatedTax -= uint128(\\r\\n                    (lpAccumulatedTax * swapBalance_) / contractBalance_\\r\\n                );\\r\\n\\r\\n            } else {\\r\\n                (accumulatedTax, starShipAccumulatedTax, lpAccumulatedTax) = (\\r\\n                    0,\\r\\n                    0,\\r\\n                    0\\r\\n                );\\r\\n            }\\r\\n            if (_hasLPTax) {\\r\\n                try\\r\\n                _uniswapRouter.addLiquidityETH{value: lpBalance}(\\r\\n                    address(this),\\r\\n                    lpTokens,\\r\\n                    0, // slippage is unavoidable\\r\\n                    0, // slippage is unavoidable\\r\\n                    owner(),\\r\\n                    block.timestamp\\r\\n                )\\r\\n                {\\r\\n                    emit LiquiditySupplied(lpTokens, lpBalance);\\r\\n                } catch {\\r\\n\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Distribute to treasuries:\\r\\n            bool success;\\r\\n            uint256 gas;\\r\\n            if (projectBalanceToDistribute > 0) {\\r\\n                _transferNative(projectBalanceToDistribute, taxRecipient);\\r\\n            }\\r\\n\\r\\n            if (starShipBalance > 0) {\\r\\n                _transferNative(starShipBalance, startShipVault);\\r\\n            }\\r\\n        } catch {\\r\\n            // Dont allow a failed external call (in this case to uniswap) to stop a transfer.\\r\\n            // Emit that this has occured and continue.\\r\\n            emit ExternalCallError(5);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/StarShip/StarBaseDeployerNoLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n// Powered by Agora\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nimport {StarBaseNoLockerERC20} from \\\"./StarBaseNoLockerERC20.sol\\\";\\r\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport {IStarShipDeployer} from \\\"./Interfaces/IStarShipDeployer.sol\\\";\\r\\nimport {Authoritative} from \\\"../Agora/Security/Authoritative.sol\\\";\\r\\n\\r\\ncontract StarShipDeployerNoLocker is Context, IStarShipDeployer, Authoritative {\\r\\n    address public immutable FactoryAddress;\\r\\n    uint256 public immutable bytesStartPosition;\\r\\n\\r\\n    constructor(address factory) {\\r\\n        FactoryAddress = factory;\\r\\n        superAdmin = _msgSender();\\r\\n        grantPlatformAdmin(factory);\\r\\n        (bool validStartPosition, uint256 startPosition) = GetStartPosition();\\r\\n\\r\\n        if (!validStartPosition) {\\r\\n            revert(\\\"Not a valid position found\\\");\\r\\n            // Revert(DeploymentError.selector);\\r\\n        } else {\\r\\n            bytesStartPosition = startPosition;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev function {_startsWithEmptyByte} Does the passed hash start with\\r\\n     * an empty byte?\\r\\n     *\\r\\n     * @param hash_ The bytes32 hash\\r\\n     * @return bool The hash does / doesn't start with an empty tybe\\r\\n     */\\r\\n    function IsHashValid(bytes32 hash_) internal pure returns (bool) {\\r\\n        return bytes1(hash_) == 0x00;\\r\\n    }\\r\\n\\r\\n    function DeployNewToken(\\r\\n        bytes32 salt,\\r\\n        bytes32 hash,\\r\\n        bytes memory arguments\\r\\n    ) external payable onlyPlatformAdmin returns (address erc20Address) {\\r\\n        if (IsHashValid(hash)) {\\r\\n            _revert(InvalidID.selector);\\r\\n        }\\r\\n\\r\\n        bytes memory deploymentBytecode = type(StarBaseNoLockerERC20).creationCode;\\r\\n\\r\\n        uint256 startPositionInMemoryForAssembly = bytesStartPosition;\\r\\n\\r\\n        // 2) Modify the bytecode, replacing the default metaIdHash with the received value.\\r\\n        // This allows us to verify the contract code (with comments) for every token,\\r\\n        // rather than matching the deployed code (and comments) of previous tokens.\\r\\n        assembly {\\r\\n            // Define the start position\\r\\n            let start := add(\\r\\n                deploymentBytecode,\\r\\n                startPositionInMemoryForAssembly\\r\\n            )\\r\\n\\r\\n            // Copy the bytes32 value to the specified position\\r\\n            mstore(add(start, 0x20), hash)\\r\\n        }\\r\\n\\r\\n        bytes memory deploymentData = abi.encodePacked(\\r\\n            deploymentBytecode,\\r\\n            arguments\\r\\n        );\\r\\n        assembly {\\r\\n            erc20Address := create2(\\r\\n                callvalue(),\\r\\n                add(deploymentData, 0x20),\\r\\n                mload(deploymentData),\\r\\n                salt\\r\\n            )\\r\\n            if iszero(extcodesize(erc20Address)) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (erc20Address);\\r\\n    }\\r\\n\\r\\n    function GetStartPosition() public pure returns (bool, uint256) {\\r\\n        bytes\\r\\n            memory bytesTarget = hex\\\"4D45544144524F504D45544144524F504D45544144524F504D45544144524F50\\\";\\r\\n        bytes memory deploymentCode = type(StarBaseNoLockerERC20).creationCode;\\r\\n\\r\\n        // Iterate through the bytecode to find the search bytes.\\r\\n        // Start at a reasonable position: byte 5000\\r\\n        for (\\r\\n            uint256 i = 5000;\\r\\n            i < deploymentCode.length - bytesTarget.length + 1;\\r\\n            i += 1\\r\\n        ) {\\r\\n            bool found = true;\\r\\n\\r\\n            // Check if the current chunk matches the search string\\r\\n            for (uint256 j = 0; j < bytesTarget.length; j++) {\\r\\n                if (deploymentCode[i + j] != bytesTarget[j]) {\\r\\n                    found = false;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (found) {\\r\\n                return (true, i);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (false, 0);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/StarShip/StarBaseNoLockerERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport {IUniswapV2Factory} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport {IUniswapV2Pair} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport {IUniswapV2Locker} from \\\"../ThirdParty/IUniswapV2Locker.sol\\\";\\r\\nimport {StarBaseAbstractERC20} from \\\"./StarBaseAbstractERC20.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract StarBaseNoLockerERC20 is StarBaseAbstractERC20 {\\r\\n    constructor(\\r\\n        address[5] memory addresses,\\r\\n        bytes memory tokenInfo,\\r\\n        bytes memory taxesInfo,\\r\\n        bytes memory lpInfo\\r\\n    ) StarBaseAbstractERC20(addresses, tokenInfo, taxesInfo, lpInfo) {\\r\\n        autoConversion = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This will mint the balances for the liquidity pool, which will be minted to the\\r\\n     * contract and the rest will be minted to the caller. Also, transaction will revert\\r\\n     * if less than 25% of the tokens are not designated to the liquidity pool.\\r\\n     *\\r\\n     * @param tokenParameters Token info parameters where the total supply is\\r\\n     * @param tokenLpInfo The information about the liquidity pool\\r\\n     */\\r\\n    function _processSupply(\\r\\n        TokenInfoParameters memory tokenParameters,\\r\\n        TokenLpInfo memory tokenLpInfo\\r\\n    ) internal override {\\r\\n        _mint(owner(), tokenParameters.maxSupply);\\r\\n    }\\r\\n\\r\\n    function addLiquidity() external payable override returns (address) {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ThirdParty/IUniswapV2Locker.sol\": {\r\n      \"content\": \"// Interface definition for UniswapV2Locker.sol\\r\\n\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\ninterface IERCBurn {\\r\\n  function burn(uint256 _amount) external;\\r\\n\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  function allowance(address owner, address spender) external returns (uint256);\\r\\n\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IMigrator {\\r\\n  function migrate(\\r\\n    address lpToken,\\r\\n    uint256 amount,\\r\\n    uint256 unlockDate,\\r\\n    address owner\\r\\n  ) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Locker {\\r\\n  struct UserInfo {\\r\\n    EnumerableSet.AddressSet lockedTokens; // records all tokens the user has locked\\r\\n    mapping(address => uint256[]) locksForToken; // map erc20 address to lock id for that token\\r\\n  }\\r\\n\\r\\n  struct TokenLock {\\r\\n    uint256 lockDate; // the date the token was locked\\r\\n    uint256 amount; // the amount of tokens still locked (initialAmount minus withdrawls)\\r\\n    uint256 initialAmount; // the initial lock amount\\r\\n    uint256 unlockDate; // the date the token can be withdrawn\\r\\n    uint256 lockID; // lockID nonce per uni pair\\r\\n    address owner;\\r\\n  }\\r\\n\\r\\n  struct FeeStruct {\\r\\n    uint256 ethFee; // Small eth fee to prevent spam on the platform\\r\\n    IERCBurn secondaryFeeToken; // UNCX or UNCL\\r\\n    uint256 secondaryTokenFee; // optional, UNCX or UNCL\\r\\n    uint256 secondaryTokenDiscount; // discount on liquidity fee for burning secondaryToken\\r\\n    uint256 liquidityFee; // fee on univ2 liquidity tokens\\r\\n    uint256 referralPercent; // fee for referrals\\r\\n    IERCBurn referralToken; // token the refferer must hold to qualify as a referrer\\r\\n    uint256 referralHold; // balance the referrer must hold to qualify as a referrer\\r\\n    uint256 referralDiscount; // discount on flatrate fees for using a valid referral address\\r\\n  }\\r\\n\\r\\n  function setDev(address payable _devaddr) external;\\r\\n\\r\\n  /**\\r\\n   * @notice set the migrator contract which allows locked lp tokens to be migrated to uniswap v3\\r\\n   */\\r\\n  function setMigrator(IMigrator _migrator) external;\\r\\n\\r\\n  function setSecondaryFeeToken(address _secondaryFeeToken) external;\\r\\n\\r\\n  /**\\r\\n   * @notice referrers need to hold the specified token and hold amount to be elegible for referral fees\\r\\n   */\\r\\n  function setReferralTokenAndHold(\\r\\n    IERCBurn _referralToken,\\r\\n    uint256 _hold\\r\\n  ) external;\\r\\n\\r\\n  function setFees(\\r\\n    uint256 _referralPercent,\\r\\n    uint256 _referralDiscount,\\r\\n    uint256 _ethFee,\\r\\n    uint256 _secondaryTokenFee,\\r\\n    uint256 _secondaryTokenDiscount,\\r\\n    uint256 _liquidityFee\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice whitelisted accounts dont pay flatrate fees on locking\\r\\n   */\\r\\n  function whitelistFeeAccount(address _user, bool _add) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Creates a new lock\\r\\n   * @param _lpToken the univ2 token address\\r\\n   * @param _amount amount of LP tokens to lock\\r\\n   * @param _unlock_date the unix timestamp (in seconds) until unlock\\r\\n   * @param _referral the referrer address if any or address(0) for none\\r\\n   * @param _fee_in_eth fees can be paid in eth or in a secondary token such as UNCX with a discount on univ2 tokens\\r\\n   * @param _withdrawer the user who can withdraw liquidity once the lock expires.\\r\\n   */\\r\\n  function lockLPToken(\\r\\n    address _lpToken,\\r\\n    uint256 _amount,\\r\\n    uint256 _unlock_date,\\r\\n    address payable _referral,\\r\\n    bool _fee_in_eth,\\r\\n    address payable _withdrawer\\r\\n  ) external payable;\\r\\n\\r\\n  /**\\r\\n   * @notice extend a lock with a new unlock date, _index and _lockID ensure the correct lock is changed\\r\\n   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\\r\\n   */\\r\\n  function relock(\\r\\n    address _lpToken,\\r\\n    uint256 _index,\\r\\n    uint256 _lockID,\\r\\n    uint256 _unlock_date\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is changed\\r\\n   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\\r\\n   */\\r\\n  function withdraw(\\r\\n    address _lpToken,\\r\\n    uint256 _index,\\r\\n    uint256 _lockID,\\r\\n    uint256 _amount\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice increase the amount of tokens per a specific lock, this is preferable to creating a new lock, less fees, and faster loading on our live block explorer\\r\\n   */\\r\\n  function incrementLock(\\r\\n    address _lpToken,\\r\\n    uint256 _index,\\r\\n    uint256 _lockID,\\r\\n    uint256 _amount\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice split a lock into two seperate locks, useful when a lock is about to expire and youd like to relock a portion\\r\\n   * and withdraw a smaller portion\\r\\n   */\\r\\n  function splitLock(\\r\\n    address _lpToken,\\r\\n    uint256 _index,\\r\\n    uint256 _lockID,\\r\\n    uint256 _amount\\r\\n  ) external payable;\\r\\n\\r\\n  /**\\r\\n   * @notice transfer a lock to a new owner, e.g. presale project -> project owner\\r\\n   */\\r\\n  function transferLockOwnership(\\r\\n    address _lpToken,\\r\\n    uint256 _index,\\r\\n    uint256 _lockID,\\r\\n    address payable _newOwner\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @notice migrates liquidity to uniswap v3\\r\\n   */\\r\\n  function migrate(\\r\\n    address _lpToken,\\r\\n    uint256 _index,\\r\\n    uint256 _lockID,\\r\\n    uint256 _amount\\r\\n  ) external;\\r\\n\\r\\n  function getNumLocksForToken(\\r\\n    address _lpToken\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function getNumLockedTokens() external view returns (uint256);\\r\\n\\r\\n  function getLockedTokenAtIndex(\\r\\n    uint256 _index\\r\\n  ) external view returns (address);\\r\\n\\r\\n  // user functions\\r\\n  function getUserNumLockedTokens(\\r\\n    address _user\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function getUserLockedTokenAtIndex(\\r\\n    address _user,\\r\\n    uint256 _index\\r\\n  ) external view returns (address);\\r\\n\\r\\n  function getUserNumLocksForToken(\\r\\n    address _user,\\r\\n    address _lpToken\\r\\n  ) external view returns (uint256);\\r\\n\\r\\n  function getUserLockForTokenAtIndex(\\r\\n    address _user,\\r\\n    address _lpToken,\\r\\n    uint256 _index\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (uint256, uint256, uint256, uint256, uint256, address);\\r\\n\\r\\n  // whitelist\\r\\n  function getWhitelistedUsersLength() external view returns (uint256);\\r\\n\\r\\n  function getWhitelistedUserAtIndex(\\r\\n    uint256 _index\\r\\n  ) external view returns (address);\\r\\n\\r\\n  function getUserWhitelistStatus(address _user) external view returns (bool);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotPlatformAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotSuperAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeploymentError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlatformAdminCannotBeAddressZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platformAdmin\",\"type\":\"address\"}],\"name\":\"PlatformAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platformAdmin\",\"type\":\"address\"}],\"name\":\"PlatformAdminRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSuperAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSuperAdmin\",\"type\":\"address\"}],\"name\":\"SuperAdminTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"}],\"name\":\"DeployNewToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetStartPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bytesStartPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPlatformAdmin_\",\"type\":\"address\"}],\"name\":\"grantPlatformAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToCheck_\",\"type\":\"address\"}],\"name\":\"isPlatformAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToCheck_\",\"type\":\"address\"}],\"name\":\"isSuperAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldAdmin_\",\"type\":\"address\"}],\"name\":\"revokePlatformAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSuperAdmin_\",\"type\":\"address\"}],\"name\":\"transferSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StarShipDeployerNoLocker", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007ce6a5b0513efc73d15dc4809b4bc51e76aea323", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}