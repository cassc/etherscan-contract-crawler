{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\n// Toil is used to create multiple uniswap V3 positions and allow for fee collections based on market volume and volatility across them\\r\\n//By creating 3 positions with each paired token the system allows for curvation of token value over time\\r\\n//With the ability of creating new V3 postions with unpaired token this consistently allows for liquidity to always be present with in\\r\\n\\r\\n//No webpage\\r\\n//No defined image atm\\r\\n//No community created from developer\\r\\n//TOIL stands for \\\"The One I Love\\\"\\r\\n//Through toil we are complete...\\r\\n\\r\\ninterface Router {\\r\\n\\tfunction factory() external view returns (address);\\r\\n\\tfunction positionManager() external view returns (address);\\r\\n\\tfunction WETH9() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface Factory {\\r\\n\\tfunction createPool(address tokenA, address tokenB, uint24 fee) external returns (address);\\r\\n}\\r\\n\\r\\ninterface Pool {\\r\\n\\tfunction initialize(uint160 _sqrtPriceX96) external;\\r\\n}\\r\\n\\r\\ninterface Params {\\r\\n\\tstruct MintParams {\\r\\n\\t\\taddress token0;\\r\\n\\t\\taddress token1;\\r\\n\\t\\tuint24 fee;\\r\\n\\t\\tint24 tickLower;\\r\\n\\t\\tint24 tickUpper;\\r\\n\\t\\tuint256 amount0Desired;\\r\\n\\t\\tuint256 amount1Desired;\\r\\n\\t\\tuint256 amount0Min;\\r\\n\\t\\tuint256 amount1Min;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 deadline;\\r\\n\\t}\\r\\n\\tstruct CollectParams {\\r\\n\\t\\tuint256 tokenId;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint128 amount0Max;\\r\\n\\t\\tuint128 amount1Max;\\r\\n\\t}\\r\\n\\r\\n}\\r\\n\\r\\ninterface PositionManager is Params {\\r\\n\\tfunction mint(MintParams calldata) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\r\\n\\tfunction collect(CollectParams calldata) external payable returns (uint256 amount0, uint256 amount1);\\r\\n\\t\\r\\n\\tfunction positions(uint256) external view returns (uint96 nonce, address operator, address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1);\\r\\n}\\r\\n\\r\\n\\r\\ncontract TickMath {\\r\\n\\r\\n\\tint24 internal constant MIN_TICK = -887272;\\r\\n\\tint24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\tuint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n\\tuint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n\\r\\n\\tfunction _getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tuint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\r\\n\\t\\t\\trequire(absTick <= uint256(int256(MAX_TICK)), 'T');\\r\\n\\r\\n\\t\\t\\tuint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\r\\n\\t\\t\\tif (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n\\t\\t\\tif (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n\\t\\t\\tif (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n\\t\\t\\tsqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\trequire(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\r\\n\\t\\t\\tuint256 ratio = uint256(sqrtPriceX96) << 32;\\r\\n\\r\\n\\t\\t\\tuint256 r = ratio;\\r\\n\\t\\t\\tuint256 msb = 0;\\r\\n\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tlet f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n\\t\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tlet f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n\\t\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tlet f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n\\t\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tlet f := shl(4, gt(r, 0xFFFF))\\r\\n\\t\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tlet f := shl(3, gt(r, 0xFF))\\r\\n\\t\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tlet f := shl(2, gt(r, 0xF))\\r\\n\\t\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tlet f := shl(1, gt(r, 0x3))\\r\\n\\t\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tlet f := gt(r, 0x1)\\r\\n\\t\\t\\t\\tmsb := or(msb, f)\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (msb >= 128) r = ratio >> (msb - 127);\\r\\n\\t\\t\\telse r = ratio << (127 - msb);\\r\\n\\r\\n\\t\\t\\tint256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(63, f))\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(62, f))\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(61, f))\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(60, f))\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(59, f))\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(58, f))\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(57, f))\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(56, f))\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(55, f))\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(54, f))\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(53, f))\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(52, f))\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(51, f))\\r\\n\\t\\t\\t\\tr := shr(f, r)\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\r\\n\\t\\t\\t\\tlet f := shr(128, r)\\r\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(50, f))\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tint256 log_sqrt10001 = log_2 * 255738958999603826347141;\\r\\n\\r\\n\\t\\t\\tint24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\r\\n\\t\\t\\tint24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\r\\n\\r\\n\\t\\t\\ttick = tickLow == tickHi ? tickLow : _getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _sqrt(uint256 _n) internal pure returns (uint256 result) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tuint256 _tmp = (_n + 1) / 2;\\r\\n\\t\\t\\tresult = _n;\\r\\n\\t\\t\\twhile (_tmp < result) {\\r\\n\\t\\t\\t\\tresult = _tmp;\\r\\n\\t\\t\\t\\t_tmp = (_n / _tmp + _tmp) / 2;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getPriceAndTickFromValues(bool _weth0, uint256 _tokens, uint256 _weth) internal pure returns (uint160 price, int24 tick) {\\r\\n\\t\\tuint160 _tmpPrice = uint160(_sqrt(2**192 / (!_weth0 ? _tokens : _weth) * (_weth0 ? _tokens : _weth)));\\r\\n\\t\\ttick = _getTickAtSqrtRatio(_tmpPrice);\\r\\n\\t\\ttick = tick - (tick % 200);\\r\\n\\t\\tprice = _getSqrtRatioAtTick(tick);\\r\\n\\t}\\r\\n}\\r\\n\\r\\ncontract Token is ERC20, Ownable, TickMath, Params{\\r\\n    \\r\\n\\r\\n    Router public constant ROUTER =Router(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\\r\\n\\r\\n    uint256[] initialMCs;\\r\\n    uint256[]  midMCs;\\r\\n    uint256[] upperMCs;\\r\\n    uint256 tokenSupply;\\r\\n    address[] pairedTokens;\\r\\n\\r\\n    uint256[] private liquidityPositions;\\r\\n\\r\\n    address[] public pools;\\r\\n\\r\\n    uint256 interval = 1 weeks;\\r\\n    uint256 nextClaim;\\r\\n\\r\\n    mapping(address => bool) public usedTokens;\\r\\n\\r\\n    constructor(\\r\\n        uint256[] memory _initialMCs,\\r\\n        uint256[] memory _midMCs,\\r\\n        uint256[] memory _upperMCs,\\r\\n        uint256 _tokenSupply,\\r\\n        address[] memory _pairedTokens\\r\\n\\r\\n        ) ERC20('Toil','Toil'){\\r\\n\\r\\n            require(_initialMCs.length == _midMCs.length && _midMCs.length == _upperMCs.length && _upperMCs.length == _pairedTokens.length, \\\"Arrays not equal length\\\");\\r\\n            tokenSupply = _tokenSupply;\\r\\n            address _this = address(this);\\r\\n\\r\\n\\r\\n\\r\\n            for(uint x =0; x< _initialMCs.length; x++){\\r\\n                address token = _pairedTokens[x];\\r\\n\\t\\t        (uint160 _initialSqrtPrice, ) = _getPriceAndTickFromValues(token < _this, _tokenSupply, _initialMCs[x]);//gets price\\r\\n\\t\\t\\r\\n                pools.push( Factory(ROUTER.factory()).createPool(_this, token, 10000));//starts pool with 1% fee\\r\\n\\t\\t        Pool(pools[x]).initialize(_initialSqrtPrice); //Set the pool pricing, needs looked into\\r\\n\\r\\n                //nonfungiblePositionManager = _nonfungiblePositionManager;\\r\\n                nextClaim = block.timestamp + interval;\\r\\n\\r\\n                require(_upperMCs[x] > _midMCs[x] && _midMCs[x] > _initialMCs[x], \\\"Fix MC\\\");\\r\\n                initialMCs.push(_initialMCs[x]);\\r\\n                midMCs.push(_midMCs[x]);\\r\\n                upperMCs.push(_upperMCs[x]);\\r\\n\\r\\n                pairedTokens.push(token);\\r\\n\\r\\n            }\\r\\n\\r\\n    }\\r\\n\\r\\n      function initialize() external {\\r\\n       \\r\\n\\t\\trequire(totalSupply() == 0);\\r\\n\\r\\n        \\r\\n        _mint(address(this), tokenSupply);\\r\\n\\r\\n\\t\\tuint256 amount = tokenSupply/pairedTokens.length;\\r\\n        for(uint i = 0; i < pairedTokens.length; i++){\\r\\n\\t\\t\\tif(totalSupply() >= amount){\\r\\n\\t\\t\\t\\t_threePositions(initialMCs[i], midMCs[i], upperMCs[i], tokenSupply/pairedTokens.length, pairedTokens[i]);\\r\\n\\t\\t\\t}\\r\\n        }\\r\\n\\t\\t\\r\\n\\t}\\r\\n\\r\\n    function _threePositions(uint256 lower, uint256 mid, uint256 up, uint256 supply, address _token) internal{\\r\\n\\t\\taddress _this = address(this);\\r\\n\\r\\n\\t\\tbool _token0 = _token < _this; //token0 is the lesser address()\\r\\n        nextClaim = block.timestamp + interval;\\r\\n\\r\\n\\t\\t( , int24 _minTick) = _getPriceAndTickFromValues(_token0, tokenSupply, lower);\\r\\n        (, int24 _midTick) = _getPriceAndTickFromValues(_token0, tokenSupply, mid);\\r\\n\\t\\t( , int24 _maxTick) = _getPriceAndTickFromValues(_token0, tokenSupply, up);\\r\\n\\r\\n        uint256 _concentratedTokens = 20 * supply / 100;\\r\\n\\r\\n        //First Step blue line\\r\\n        liquidityPositions.push(_createNewPosition(_token, _this, \\r\\n          _token0,\\r\\n          _token0 ? _minTick - 200 : _minTick,//LowerTick\\r\\n         !_token0 ? _minTick + 200 : _minTick,//UpperTick\\r\\n         _concentratedTokens\\r\\n         ));\\r\\n\\t\\t//Second step orange curve\\r\\n        liquidityPositions.push(_createNewPosition(_token, _this, \\r\\n          _token0,\\r\\n          _token0 ? _midTick: _minTick + 200,//LowerTick\\r\\n         !_token0 ? _midTick: _minTick - 200,//UpperTick\\r\\n         (3*_concentratedTokens)\\r\\n         ));\\r\\n        //Third Step blowoff\\r\\n        liquidityPositions.push(_createNewPosition(_token, _this, \\r\\n          _token0,\\r\\n          _token0 ? _maxTick : _midTick,//LowerTick\\r\\n         !_token0 ? _maxTick : _midTick,//UpperTick\\r\\n         _concentratedTokens > balanceOf(_this)? balanceOf(_this) : _concentratedTokens\\r\\n         ));\\r\\n\\r\\n    }\\r\\n\\r\\n    function _createNewPosition(address _token, address _this, bool _token0, int24 _tickLower, int24 _tickUpper, uint256 amount) internal returns(uint256 a){\\r\\n        PositionManager _pm = PositionManager(ROUTER.positionManager());\\r\\n        _approve(_this, address(_pm), amount);\\r\\n\\r\\n        (a, , , ) = _pm.mint(MintParams({\\r\\n\\t\\t\\ttoken0: _token0 ? _token : _this,\\r\\n\\t\\t\\ttoken1: !_token0 ? _token : _this,\\r\\n\\t\\t\\tfee: 10000,\\r\\n\\t\\t\\ttickLower: _tickLower,\\r\\n\\t\\t\\ttickUpper: _tickUpper,\\r\\n\\t\\t\\tamount0Desired: _token0 ? 0 : amount,\\r\\n\\t\\t\\tamount1Desired: !_token0 ? 0 : amount,\\r\\n\\t\\t\\tamount0Min: 0,\\r\\n\\t\\t\\tamount1Min: 0,\\r\\n\\t\\t\\trecipient: _this,\\r\\n\\t\\t\\tdeadline: block.timestamp\\r\\n\\t\\t}));\\r\\n    } \\r\\n\\r\\n    function createNewPosition(address token, uint256 lowerMC, uint256 midMC, uint256 upperMC)public onlyOwner{\\r\\n\\r\\n\\r\\n        require(upperMC > midMC && midMC > lowerMC, \\\"Fix MC\\\");\\r\\n        require(!usedTokens[token], \\\"Token Already Used\\\");\\r\\n        \\r\\n        address _this = address(this);\\r\\n\\r\\n        (uint160 _initialSqrtPrice, ) = _getPriceAndTickFromValues(token < _this, tokenSupply , lowerMC);\\r\\n        address npool = Factory(ROUTER.factory()).createPool(_this, token, 10000);//starts pool with 1% fee\\r\\n\\t\\tPool(npool).initialize(_initialSqrtPrice); //Set the pool pricing, needs looked into\\r\\n        pools.push(npool);\\r\\n\\r\\n        _threePositions(lowerMC, midMC, upperMC, balanceOf(_this), token);\\r\\n\\r\\n        pairedTokens.push(token);\\r\\n\\r\\n    }\\r\\n\\r\\n    function claimFees()public{\\r\\n        require(nextClaim < block.timestamp, \\\"Not enough time has passed\\\");\\r\\n        nextClaim = block.timestamp + interval;\\r\\n        _claimFees();\\r\\n        for(uint i =0; i < pairedTokens.length;){\\r\\n            IERC20 t = IERC20(pairedTokens[i]);\\r\\n            uint256 _amount = t.balanceOf(address(this));\\r\\n            if(_amount > 0){\\r\\n                t.transfer(msg.sender, _amount/50);\\r\\n                t.transfer(owner(), t.balanceOf(address(this)));\\r\\n            } \\r\\n            unchecked{i++;}\\r\\n        }\\r\\n\\r\\n        uint256 amount = address(this).balance;\\r\\n        if(amount >50){\\r\\n            address payable m = payable(msg.sender);\\r\\n            bool f;\\r\\n            f = m.send(amount/50);\\r\\n            address payable o = payable(owner());\\r\\n            f=o.send(address(this).balance);\\r\\n\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function _claimFees()internal{\\r\\n\\r\\n\\r\\n        for(uint i = 0; i < liquidityPositions.length;){\\r\\n\\t\\t\\t_claim(liquidityPositions[i]);\\r\\n            unchecked{i++;}\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\tfunction _claim(uint256 pos)internal{\\r\\n\\r\\n        PositionManager _pm = PositionManager(ROUTER.positionManager());\\r\\n        uint128 Uint128Max = type(uint128).max;\\r\\n        _pm.collect(CollectParams({\\r\\n                tokenId: pos,\\r\\n                recipient: address(this),\\r\\n                amount0Max: Uint128Max,\\r\\n                amount1Max: Uint128Max\\r\\n        }));\\r\\n\\r\\n\\t}\\r\\n\\r\\n    function claim()external onlyOwner{\\r\\n        _claimFees();\\r\\n        nextClaim = block.timestamp + interval;\\r\\n        for(uint i =0; i < pairedTokens.length;){\\r\\n            IERC20 t = IERC20(pairedTokens[i]);\\r\\n            if(t.balanceOf(address(this)) > 0) {\\r\\n                t.transfer(msg.sender, t.balanceOf(address(this)));\\r\\n            }\\r\\n            unchecked{i++;}\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n        uint256 amount = address(this).balance;\\r\\n        if(amount >0){\\r\\n            address payable o = payable(owner());\\r\\n            bool f;\\r\\n            f = o.send(amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n\\tfunction liquidityPositons()external view returns(uint256[] memory){\\r\\n\\r\\n\\t\\treturn liquidityPositions;\\r\\n\\t}\\r\\n\\r\\n\\tfunction claimSpecficPositions(uint256[] memory positions)external{\\r\\n\\r\\n\\t\\tfor(uint i =0; i < positions.length;){\\r\\n\\t\\t\\t_claim(positions[i]);\\r\\n\\t\\t\\tunchecked{i++;}\\r\\n\\t\\t}\\r\\n\\r\\n\\t} \\r\\n\\r\\n\\tfunction erc20Withdrawal(address[] memory tokens) external onlyOwner{\\r\\n\\r\\n\\t\\taddress _this = address(this);\\r\\n\\t\\tfor(uint i =0; i < tokens.length;){\\r\\n\\t\\t\\trequire(tokens[i] != _this, \\\"Cannot withdraw contract token\\\");\\r\\n\\t\\t\\tIERC20 t = IERC20(tokens[i]);\\r\\n\\t\\t\\tt.transfer(msg.sender, t.balanceOf(_this));\\r\\n\\t\\t\\tunchecked{i++;}\\r\\n\\t\\t}\\r\\n        uint256 amount = address(this).balance;\\r\\n        if(amount >0){\\r\\n            address payable o = payable(owner());\\r\\n            bool f;\\r\\n            f = o.send(amount);\\r\\n        }\\r\\n\\t}\\r\\n\\r\\n\\tfunction pairedTokensView() public view returns(address[]memory ){\\r\\n\\t\\treturn pairedTokens;\\r\\n\\t}\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_initialMCs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_midMCs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_upperMCs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_pairedTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"positions\",\"type\":\"uint256[]\"}],\"name\":\"claimSpecficPositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lowerMC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"midMC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperMC\",\"type\":\"uint256\"}],\"name\":\"createNewPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"erc20Withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPositons\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairedTokensView\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000813f3978f894098440000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000d8d726b7177a80000000000000000000000000000000000000000000000000121e4dbab336ee8000000000000000000000000000000000000000000000000e299b1f48c3159e80000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000044f0bacd9cb7a480000000000000000000000000000000000000000000000028a1de992260c9be80000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000000000000000000000000069f3e5d2accce6480000000000000000000000000000000000000000000000109a01c24dc1d44ce800000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca0000000000000000000000003d3d35bb9bec23b06ca00fe472b50e7a4c692c30", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}