{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/ConverterBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport { IWETH } from \\\"../../interfaces/IWETH.sol\\\";\\nimport { ITokenConverter } from \\\"./ITokenConverter.sol\\\";\\n\\nabstract contract ConverterBase is ITokenConverter {\\n  using SafeERC20 for IERC20;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @inheritdoc ITokenConverter\\n  address public immutable override registry;\\n\\n  /// @dev The address of ETH which is commonly used.\\n  address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /// @dev The address of WETH token.\\n  address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(address _registry) {\\n    registry = _registry;\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  receive() external payable {}\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @inheritdoc ITokenConverter\\n  function withdrawFund(address _token, address _recipient) external override {\\n    require(msg.sender == registry, \\\"only registry\\\");\\n\\n    if (_token == address(0)) {\\n      (bool success, ) = _recipient.call{ value: address(this).balance }(\\\"\\\");\\n      require(success, \\\"withdraw ETH failed\\\");\\n    } else {\\n      IERC20(_token).safeTransfer(_recipient, IERC20(_token).balanceOf(address(this)));\\n    }\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Internal function to get the pool type of the route.\\n  /// @param encoding The route encoding.\\n  function _getPoolType(uint256 encoding) internal pure returns (uint256) {\\n    return encoding & 255;\\n  }\\n\\n  /// @dev Internal function to get the action of the route.\\n  /// @param encoding The route encoding.\\n  function _getAction(uint256 encoding) internal pure returns (uint256) {\\n    return (encoding >> 8) & 3;\\n  }\\n\\n  function _isETH(address _token) internal pure returns (bool) {\\n    return _token == ETH || _token == address(0);\\n  }\\n\\n  function _wrapTokenIfNeeded(address _token, uint256 _amount) internal {\\n    if (_token == WETH && IERC20(_token).balanceOf(address(this)) < _amount) {\\n      IWETH(_token).deposit{ value: _amount }();\\n    }\\n  }\\n\\n  function _unwrapIfNeeded(uint256 _amount) internal {\\n    if (address(this).balance < _amount) {\\n      IWETH(WETH).withdraw(_amount);\\n    }\\n  }\\n\\n  function _approve(\\n    address _token,\\n    address _spender,\\n    uint256 _amount\\n  ) internal {\\n    if (!_isETH(_token) && IERC20(_token).allowance(address(this), _spender) < _amount) {\\n      // hBTC cannot approve 0\\n      if (_token != 0x0316EB71485b0Ab14103307bf65a021042c6d380) {\\n        IERC20(_token).safeApprove(_spender, 0);\\n      }\\n      IERC20(_token).safeApprove(_spender, uint256(-1));\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/ITokenConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ITokenConverter {\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice The address of Converter Registry.\\n  function registry() external view returns (address);\\n\\n  /// @notice Return the input token and output token for the route.\\n  /// @param route The encoding of the route.\\n  /// @return tokenIn The address of input token.\\n  /// @return tokenOut The address of output token.\\n  function getTokenPair(uint256 route) external view returns (address tokenIn, address tokenOut);\\n\\n  /// @notice Query the output token amount according to the encoding.\\n  ///\\n  /// @dev See the comments in `convert` for the meaning of encoding.\\n  ///\\n  /// @param encoding The encoding used to convert.\\n  /// @param amountIn The amount of input token.\\n  /// @param amountOut The amount of output token received.\\n  function queryConvert(uint256 encoding, uint256 amountIn) external returns (uint256 amountOut);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Convert input token to output token according to the encoding.\\n  /// Assuming that the input token is already in the contract.\\n  ///\\n  /// @dev encoding for single route\\n  /// |   8 bits  | 2 bits |  246 bits  |\\n  /// | pool_type | action | customized |\\n  ///\\n  /// + pool_type = 0: UniswapV2, only action = 0\\n  ///   customized = |   160 bits   | 24 bits |     1 bit    | 1 bit | ... |\\n  ///                | pool address | fee_num | zero_for_one | twamm | ... |\\n  /// + pool_type = 1: UniswapV3, only action = 0\\n  ///   customized = |   160 bits   | 24 bits |     1 bit    | ... |\\n  ///                | pool address | fee_num | zero_for_one | ... |\\n  /// + pool_type = 2: BalancerV1, only action = 0\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 3: BalancerV2, only action = 0\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 4: CurvePlainPool or CurveFactoryPlainPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |  1 bit  | ... |\\n  ///                | pool address | tokens | index in | index out | use_eth | ... |\\n  /// + pool_type = 5: CurveAPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |     1 bits     | ... |\\n  ///                | pool address | tokens | index in | index out | use_underlying | ... |\\n  /// + pool_type = 6: CurveYPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |     1 bits     | ... |\\n  ///                | pool address | tokens | index in | index out | use_underlying | ... |\\n  /// + pool_type = 7: CurveMetaPool or CurveFactoryMetaPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  | ... |\\n  ///                | pool address | tokens | index in | index out | ... |\\n  /// + pool_type = 8: CurveCryptoPool or CurveFactoryCryptoPool\\n  ///   customized = |   160 bits   | 3 bits |  3 bits  |   3 bits  |  1 bit  | ... |\\n  ///                | pool address | tokens | index in | index out | use_eth | ... |\\n  /// + pool_type = 9: ERC4626, no action 0\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  /// + pool_type = 10: Lido, no action 0\\n  ///   customized = |   160 bits   | ... |\\n  ///                | pool address | ... |\\n  ///\\n  /// Note: tokens + 1 is the number of tokens of the pool\\n  ///\\n  /// + action = 0: swap\\n  /// + action = 1: add liquidity / wrap / stake\\n  /// + action = 2: remove liquidity / unwrap / unstake\\n  ///\\n  /// @param encoding The encoding used to convert.\\n  /// @param amountIn The amount of input token.\\n  /// @param recipient The address of token receiver.\\n  /// @return amountOut The amount of output token received.\\n  function convert(\\n    uint256 encoding,\\n    uint256 amountIn,\\n    address recipient\\n  ) external payable returns (uint256 amountOut);\\n\\n  /// @notice Withdraw dust assets in this contract.\\n  /// @param token The address of token to withdraw.\\n  /// @param recipient The address of token receiver.\\n  function withdrawFund(address token, address recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/converter/LidoConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport { ILidoStETH } from \\\"../../interfaces/ILidoStETH.sol\\\";\\nimport { ILidoWstETH } from \\\"../../interfaces/ILidoWstETH.sol\\\";\\nimport { ITokenConverter } from \\\"./ITokenConverter.sol\\\";\\n\\nimport { ConverterBase } from \\\"./ConverterBase.sol\\\";\\n\\n// solhint-disable const-name-snakecase\\n// solhint-disable no-empty-blocks\\n\\ncontract LidoConverter is ConverterBase {\\n  using SafeERC20 for IERC20;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @dev The address of Lido's stETH token.\\n  address private constant stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n\\n  /// @dev The address of Lido's wstETH token.\\n  address private constant wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(address _registry) ConverterBase(_registry) {}\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @inheritdoc ITokenConverter\\n  function getTokenPair(uint256 _encoding) external pure override returns (address, address) {\\n    require(_getPoolType(_encoding) == 10, \\\"unsupported poolType\\\");\\n    uint256 _action = _getAction(_encoding);\\n    address _pool = address((_encoding >> 10) & 1461501637330902918203684832716283019655932542975);\\n    if (_pool == stETH) {\\n      if (_action == 1) return (WETH, stETH);\\n      else revert(\\\"unsupported action\\\");\\n    } else if (_pool == wstETH) {\\n      if (_action == 1) return (stETH, wstETH);\\n      else if (_action == 2) return (wstETH, stETH);\\n      else revert(\\\"unsupported action\\\");\\n    } else {\\n      revert(\\\"unsupported pool\\\");\\n    }\\n  }\\n\\n  /// @inheritdoc ITokenConverter\\n  function queryConvert(uint256 _encoding, uint256 _amountIn) external view override returns (uint256 _amountOut) {\\n    require(_getPoolType(_encoding) == 10, \\\"unsupported poolType\\\");\\n    uint256 _action = _getAction(_encoding);\\n    address _pool = address((_encoding >> 10) & 1461501637330902918203684832716283019655932542975);\\n    if (_pool == stETH) {\\n      if (_action == 1) _amountOut = _amountIn;\\n      else revert(\\\"unsupported action\\\");\\n    } else if (_pool == wstETH) {\\n      if (_action == 1) _amountOut = ILidoWstETH(_pool).getWstETHByStETH(_amountIn);\\n      else if (_action == 2) _amountOut = ILidoWstETH(_pool).getStETHByWstETH(_amountIn);\\n      else revert(\\\"unsupported action\\\");\\n    } else {\\n      revert(\\\"unsupported pool\\\");\\n    }\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @inheritdoc ITokenConverter\\n  function convert(\\n    uint256 _encoding,\\n    uint256 _amountIn,\\n    address _recipient\\n  ) external payable override returns (uint256 _amountOut) {\\n    require(_getPoolType(_encoding) == 10, \\\"unsupported poolType\\\");\\n    uint256 _action = _getAction(_encoding);\\n    address _pool = address((_encoding >> 10) & 1461501637330902918203684832716283019655932542975);\\n    address _token = _pool;\\n    if (_pool == stETH) {\\n      if (_action == 1) {\\n        _unwrapIfNeeded(_amountIn);\\n        uint256 _shares = ILidoStETH(_pool).submit{ value: _amountIn }(address(0));\\n        _amountOut = ILidoStETH(_pool).getPooledEthByShares(_shares);\\n      } else {\\n        revert(\\\"unsupported action\\\");\\n      }\\n    } else if (_pool == wstETH) {\\n      if (_action == 1) {\\n        _approve(stETH, _pool, _amountIn);\\n        _amountOut = ILidoWstETH(_pool).wrap(_amountIn);\\n      } else if (_action == 2) {\\n        _amountOut = ILidoWstETH(_pool).unwrap(_amountIn);\\n        _token = stETH;\\n      } else {\\n        revert(\\\"unsupported action\\\");\\n      }\\n    } else {\\n      revert(\\\"unsupported pool\\\");\\n    }\\n\\n    if (_recipient != address(this)) {\\n      IERC20(_token).safeTransfer(_recipient, _amountOut);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILidoStETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ILidoStETH {\\n  /**\\n   * @notice Send funds to the pool with optional _referral parameter\\n   * @dev This function is alternative way to submit funds. Supports optional referral address.\\n   * @return Amount of StETH shares generated\\n   */\\n  function submit(address _referral) external payable returns (uint256);\\n\\n  /**\\n   * @return the amount of Ether that corresponds to `_sharesAmount` token shares.\\n   */\\n  function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILidoWstETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ILidoWstETH {\\n  /**\\n   * @notice Exchanges stETH to wstETH\\n   * @param _stETHAmount amount of stETH to wrap in exchange for wstETH\\n   * @dev Requirements:\\n   *  - `_stETHAmount` must be non-zero\\n   *  - msg.sender must approve at least `_stETHAmount` stETH to this\\n   *    contract.\\n   *  - msg.sender must have at least `_stETHAmount` of stETH.\\n   * User should first approve _stETHAmount to the WstETH contract\\n   * @return Amount of wstETH user receives after wrap\\n   */\\n  function wrap(uint256 _stETHAmount) external returns (uint256);\\n\\n  /**\\n   * @notice Exchanges wstETH to stETH\\n   * @param _wstETHAmount amount of wstETH to uwrap in exchange for stETH\\n   * @dev Requirements:\\n   *  - `_wstETHAmount` must be non-zero\\n   *  - msg.sender must have at least `_wstETHAmount` wstETH.\\n   * @return Amount of stETH user receives after unwrap\\n   */\\n  function unwrap(uint256 _wstETHAmount) external returns (uint256);\\n\\n  /**\\n   * @notice Get amount of stETH for a given amount of wstETH\\n   * @param _wstETHAmount amount of wstETH\\n   * @return Amount of stETH for a given wstETH amount\\n   */\\n  function getStETHByWstETH(uint256 _wstETHAmount) external view returns (uint256);\\n\\n  /**\\n   * @notice Get amount of wstETH for a given amount of stETH\\n   * @param _stETHAmount amount of stETH\\n   * @return Amount of wstETH for a given stETH amount\\n   */\\n  function getWstETHByStETH(uint256 _stETHAmount) external view returns (uint256);\\n\\n  /**\\n   * @notice Get amount of stETH for a one wstETH\\n   * @return Amount of stETH for 1 wstETH\\n   */\\n  function stEthPerToken() external view returns (uint256);\\n\\n  /**\\n   * @notice Get amount of wstETH for a one stETH\\n   * @return Amount of wstETH for a 1 stETH\\n   */\\n  function tokensPerStEth() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 wad) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_encoding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_encoding\",\"type\":\"uint256\"}],\"name\":\"getTokenPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_encoding\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"queryConvert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LidoConverter", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a617206663343b6353acf27566586ee9b53dfb2b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}