{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ncontract Cock_COOP_Splitter_V2 {\r\n    address public owner;\r\n\r\n    // Initialize ratios and wallet addresses as  state variables\r\n    uint256 public xbcCoopRatio;\r\n    uint256 public bakaawRatio;\r\n    uint256 public futureBirdsRatio;\r\n    uint256 public gasWarsRatio;\r\n\r\n    address payable public xbcCoopAddress;\r\n    address payable public bakaawAddress;\r\n    address payable public futureBirdsAddress;\r\n    address payable public gasWarsAddress;\r\n\r\n    uint256 public constant MASTER_RATIO_DIVISOR = 1000;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Caller is not the owner.\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        // Set initial hardcoded values\r\n        xbcCoopRatio = 250; // Ratio for XBC Coop\r\n        bakaawRatio = 250; // Ratio for Bakaaw\r\n        futureBirdsRatio = 250; // Ratio for Future Birds\r\n        gasWarsRatio = 250;  // Ratio for GasWars\r\n\r\n        xbcCoopAddress = payable(0x6eB5A3fE3A73f8FddCc05714285d14B9770437e0); // XBC Coop Address\r\n        bakaawAddress = payable(0xE01c9dE5751b9f8EcE6F2D1B28B6444f0b0A3D14); // Bakaaw Address\r\n        futureBirdsAddress = payable(0xE01c9dE5751b9f8EcE6F2D1B28B6444f0b0A3D14); // Future Birds Address\r\n        gasWarsAddress = payable(0xE01c9dE5751b9f8EcE6F2D1B28B6444f0b0A3D14); // Future Gas Wars Address\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // Update the fee ratios, XBC COOP will always have atleast 25%\r\n    function updateRatios( uint256 newBakaawRatio, uint256 newFutureBirdsRatio, uint256 newGasWarRatio) public onlyOwner {\r\n        uint256 totalRatio = xbcCoopRatio + newBakaawRatio + newFutureBirdsRatio + gasWarsRatio;\r\n        require(totalRatio <= MASTER_RATIO_DIVISOR, \"Total ratio must be 1000.\");\r\n        \r\n        bakaawRatio = newBakaawRatio;\r\n        futureBirdsRatio = newFutureBirdsRatio;\r\n        gasWarsRatio = newGasWarRatio;\r\n    }\r\n\r\n    // Update the wallet addresses\r\n    function updateWalletAddresses(address payable newBakaaw, address payable newFutureBirds, address payable newGasWars) public onlyOwner {\r\n        bakaawAddress = newBakaaw;\r\n        futureBirdsAddress = newFutureBirds;\r\n        gasWarsAddress = newGasWars;\r\n\r\n    }\r\n\r\n    // Split ETH between XBC Coop, Bakaaw, and Future birds\r\n    function splitETH() public {\r\n        uint256 balance = address(this).balance;\r\n\r\n        uint256 xbcCoopShare = (balance * xbcCoopRatio) / MASTER_RATIO_DIVISOR;\r\n        uint256 bakaawShare = (balance * bakaawRatio) / MASTER_RATIO_DIVISOR;\r\n        uint256 gasWarShare = (balance * gasWarsRatio) / MASTER_RATIO_DIVISOR;\r\n        uint256 futureBirdsShare = balance - xbcCoopShare - bakaawShare - gasWarShare; // Remainder to avoid rounding errors\r\n\r\n        _safeTransfer(xbcCoopAddress, xbcCoopShare);\r\n        _safeTransfer(bakaawAddress, bakaawShare);\r\n        _safeTransfer(futureBirdsAddress, futureBirdsShare);\r\n        _safeTransfer(gasWarsAddress, gasWarShare);\r\n    }\r\n\r\n    function _safeTransfer(address payable recipient, uint256 amount) private {\r\n        (bool success, ) = recipient.call{value: amount, gas: 40000}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MASTER_RATIO_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bakaawAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bakaawRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureBirdsAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureBirdsRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasWarsAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasWarsRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBakaawRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFutureBirdsRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newGasWarRatio\",\"type\":\"uint256\"}],\"name\":\"updateRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newBakaaw\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"newFutureBirds\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"newGasWars\",\"type\":\"address\"}],\"name\":\"updateWalletAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xbcCoopAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xbcCoopRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Cock_COOP_Splitter_V2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2ba0c512bcdeb509bbcf97c132f72babe3e4393f3b50d3efc22e08f04a117b70"}