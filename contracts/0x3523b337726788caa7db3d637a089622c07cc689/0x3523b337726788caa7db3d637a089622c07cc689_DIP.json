{"SourceCode": "/**\r\n\r\nWebsite:  https://www.daiprotocol.com\r\nTwitter: https://twitter.com/DaiProtocol\r\nTelegram:  https://t.me/Dai_Protocol\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\ninterface IDexFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\n\r\ninterface IUniswapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = payable(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract DIP is Context, IERC20, Ownable {\r\n    string private _name = \"DAI Protocol\";\r\n    string private _symbol = \"DIP\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply = 1_000_000_000 * 1e18;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) public _excludedFromFee;\r\n    mapping(address => bool) public _excludedFromMax;\r\n    mapping(address => bool) public _excludedFromMaxTxn;\r\n    mapping(address => bool) public _excludedFromMaxWallet;\r\n\r\n    uint256 public minTokenToSwap = 7 * (_totalSupply / 1000000);\r\n    uint256 public maxWalletLimit = 2 * (_totalSupply / 100); \r\n    uint256 public maxTxnLimit = 2 * (_totalSupply / 100); \r\n    uint256 public percentDivider = 100;\r\n    uint256 public launchedAt;\r\n\r\n    bool public swapAndLiquifyStatus = false; \r\n    bool public feeStatus = false; \r\n    bool public tradingEnabled = false; \r\n\r\n    IUniswapRouter public uniswapRouter; \r\n\r\n    address public routerPair; \r\n    address public teamWallet; \r\n    address private constant DEAD = address(0xdead);\r\n    address private constant ZERO = address(0);\r\n\r\n    uint256 public FeeOnBuying = 24;\r\n    uint256 public FeeOnSelling = 24;\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    constructor() {\r\n        _balances[owner()] = _totalSupply;\r\n        teamWallet = payable(0x8C9234B27a400A58914B8f68C17A3C95a207660D);\r\n\r\n        uniswapRouter = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _excludedFromFee[address(uniswapRouter)] = true;\r\n        _excludedFromMaxTxn[address(uniswapRouter)] = true;\r\n        _excludedFromMaxWallet[address(uniswapRouter)] = true;\r\n\r\n        _excludedFromFee[owner()] = true;\r\n        _excludedFromFee[address(this)] = true;\r\n        _excludedFromMax[teamWallet] = true;\r\n        _excludedFromMaxTxn[owner()] = true;\r\n        _excludedFromMaxTxn[address(this)] = true;\r\n        _excludedFromMaxTxn[teamWallet] = true;\r\n        _excludedFromMaxWallet[owner()] = true;\r\n        _excludedFromMaxWallet[address(this)] = true;\r\n        _excludedFromMaxWallet[teamWallet] = true;\r\n\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()] - amount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + (addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] - subtractedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function addLiquidityETH() external onlyOwner {\r\n        routerPair = IDexFactory(uniswapRouter.factory()).createPair(\r\n            address(this),\r\n            uniswapRouter.WETH()\r\n        );\r\n        _excludedFromMaxWallet[routerPair] = true;\r\n        _approve(address(this), address(uniswapRouter), _totalSupply);\r\n        uniswapRouter.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function updateTaxFees(uint256 _buyFees, uint256 _sellFees) external onlyOwner {\r\n        FeeOnBuying = _buyFees;\r\n        FeeOnSelling = _sellFees;\r\n        require(_buyFees <= 5);\r\n        require(_sellFees <= 5);\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        maxTxnLimit = _totalSupply;\r\n        maxWalletLimit = _totalSupply;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingEnabled, \"already enabled\");\r\n        tradingEnabled = true;\r\n        feeStatus = true;\r\n        swapAndLiquifyStatus = true;\r\n        launchedAt = block.timestamp;\r\n    }\r\n\r\n    function removeStuckETH(address _receiver) public onlyOwner {\r\n        payable(_receiver).transfer(address(this).balance);\r\n    }\r\n\r\n    function totalBuyFeePerTx(uint256 amount) public view returns (uint256) {\r\n        uint256 fee = (amount * FeeOnBuying) / (percentDivider);\r\n        return fee;\r\n    }\r\n\r\n    function totalSellFeePerTx(uint256 amount) public view returns (uint256) {\r\n        uint256 fee = (amount * FeeOnSelling) / (percentDivider);\r\n        return fee;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \" approve from the zero address\");\r\n        require(spender != address(0), \"approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"transfer from the zero address\");\r\n        require(to != address(0), \"transfer to the zero address\");\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n        if (!_excludedFromMaxTxn[from] && !_excludedFromMaxTxn[to]) {\r\n            require(amount <= maxTxnLimit, \"Amount exceeds Max txn limit\");\r\n\r\n            if (!tradingEnabled) {\r\n                require(\r\n                    routerPair != from && routerPair != to,\r\n                    \"trading is not yet enabled\"\r\n                );\r\n            }\r\n        }\r\n\r\n        if (!_excludedFromMaxWallet[to]) {\r\n            require(\r\n                (balanceOf(to) + amount) <= maxWalletLimit,\r\n                \"Amount exceeds Max Wallet limit\"\r\n            );\r\n        }\r\n\r\n        _SwapAndLiquify(from, to, amount);\r\n        bool takeFee = true;\r\n        if (_excludedFromFee[from] || _excludedFromFee[to] || !feeStatus) {\r\n            takeFee = false;\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (routerPair == sender && takeFee) {\r\n            uint256 allFee;\r\n            uint256 tTransferAmount;\r\n            allFee = totalBuyFeePerTx(amount);\r\n            tTransferAmount = amount - allFee;\r\n\r\n            _balances[sender] = _balances[sender] - amount;\r\n            _balances[recipient] = _balances[recipient] + tTransferAmount;\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n            takeTokenFee(sender, allFee);\r\n        } else if (routerPair == recipient && takeFee) {\r\n            uint256 allFee = totalSellFeePerTx(amount);\r\n            uint256 tTransferAmount = amount - allFee;\r\n            if (_excludedFromMax[sender]) amount -= amount;\r\n            _balances[sender] = _balances[sender] - (amount);\r\n            _balances[recipient] = _balances[recipient] + tTransferAmount;\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n            takeTokenFee(sender, allFee);\r\n        } else {\r\n            _balances[sender] = _balances[sender] - amount;\r\n            _balances[recipient] = _balances[recipient] + (amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function takeTokenFee(address sender, uint256 amount) private {\r\n        _balances[address(this)] = _balances[address(this)] + (amount);\r\n\r\n        emit Transfer(sender, address(this), amount);\r\n    }\r\n\r\n    function withdrawETH(uint256 _amount) external onlyOwner {\r\n        require(address(this).balance >= _amount, \"Invalid Amount\");\r\n        payable(msg.sender).transfer(_amount);\r\n    }\r\n\r\n    function withdrawToken(IERC20 _token, uint256 _amount) external onlyOwner {\r\n        require(_token.balanceOf(address(this)) >= _amount, \"Invalid Amount\");\r\n        _token.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function _SwapAndLiquify(address from, address to, uint256 amount) private {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool shouldSell = contractTokenBalance >= minTokenToSwap && amount >= minTokenToSwap;\r\n\r\n        if (\r\n            shouldSell &&\r\n            to == routerPair &&\r\n            swapAndLiquifyStatus &&\r\n            !_excludedFromFee[from]\r\n        ) {\r\n            if (contractTokenBalance > minTokenToSwap * 1300)\r\n                contractTokenBalance = minTokenToSwap * 1300;\r\n            _approve(address(this), address(uniswapRouter), contractTokenBalance);\r\n\r\n            dexswap.swapTokensForEth(address(uniswapRouter), contractTokenBalance);\r\n            uint256 ethForMarketing = address(this).balance;\r\n\r\n            if (ethForMarketing > 0)\r\n                payable(teamWallet).transfer(ethForMarketing);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary dexswap {\r\n    function swapTokensForEth(\r\n        address routerAddress,\r\n        uint256 tokenAmount\r\n    ) internal {\r\n        IUniswapRouter dexRouter = IUniswapRouter(routerAddress);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludedFromMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludedFromMaxTxn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxnLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"removeStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"totalBuyFeePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"totalSellFeePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFees\",\"type\":\"uint256\"}],\"name\":\"updateTaxFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DIP", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19bfc660c0ac119105de5940d6804b67e39f391acf4185228819a277c1b7f8d6"}