{"SourceCode": "pragma solidity 0.5.8;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Gives the possibility to delegate any call to a foreign implementation.\r\n */\r\ncontract Proxy {\r\n    /**\r\n    * @dev Tells the address of the implementation where every call will be delegated.\r\n    * @return address of the implementation to which it will be delegated\r\n    */\r\n    function _implementation() internal view returns(address);\r\n\r\n    /**\r\n    * @dev Fallback function.\r\n    * Implemented entirely in `_fallback`.\r\n    */\r\n    function _fallback() internal {\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n    * This function will return whatever the implementation call returns\r\n    */\r\n    function _delegate(address implementation) internal {\r\n        /*solium-disable-next-line security/no-inline-assembly*/\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize)\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize)\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize) }\r\n            default { return(0, returndatasize) }\r\n        }\r\n    }\r\n\r\n    function() external payable {\r\n        _fallback();\r\n    }\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n    // Version name of the current implementation\r\n    string internal __version;\r\n\r\n    // Address of the current implementation\r\n    address internal __implementation;\r\n\r\n    /**\r\n    * @dev This event will be emitted every time the implementation gets upgraded\r\n    * @param _newVersion representing the version name of the upgraded implementation\r\n    * @param _newImplementation representing the address of the upgraded implementation\r\n    */\r\n    event Upgraded(string _newVersion, address indexed _newImplementation);\r\n\r\n    /**\r\n    * @dev Upgrades the implementation address\r\n    * @param _newVersion representing the version name of the new implementation to be set\r\n    * @param _newImplementation representing the address of the new implementation to be set\r\n    */\r\n    function _upgradeTo(string memory _newVersion, address _newImplementation) internal {\r\n        require(\r\n            __implementation != _newImplementation && _newImplementation != address(0),\r\n            \"Old address is not allowed and implementation address should not be 0x\"\r\n        );\r\n        require(Address.isContract(_newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\r\n        require(bytes(_newVersion).length > 0, \"Version should not be empty string\");\r\n        require(keccak256(abi.encodePacked(__version)) != keccak256(abi.encodePacked(_newVersion)), \"New version equals to current\");\r\n        __version = _newVersion;\r\n        __implementation = _newImplementation;\r\n        emit Upgraded(_newVersion, _newImplementation);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title OwnedUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\r\n */\r\ncontract OwnedUpgradeabilityProxy is UpgradeabilityProxy {\r\n    // Owner of the contract\r\n    address private __upgradeabilityOwner;\r\n\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param _previousOwner representing the address of the previous owner\r\n    * @param _newOwner representing the address of the new owner\r\n    */\r\n    event ProxyOwnershipTransferred(address _previousOwner, address _newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier ifOwner() {\r\n        if (msg.sender == _upgradeabilityOwner()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev the constructor sets the original owner of the contract to the sender account.\r\n    */\r\n    constructor() public {\r\n        _setUpgradeabilityOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function _upgradeabilityOwner() internal view returns(address) {\r\n        return __upgradeabilityOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the address of the owner\r\n    */\r\n    function _setUpgradeabilityOwner(address _newUpgradeabilityOwner) internal {\r\n        require(_newUpgradeabilityOwner != address(0), \"Address should not be 0x\");\r\n        __upgradeabilityOwner = _newUpgradeabilityOwner;\r\n    }\r\n\r\n    /**\r\n    * @notice Internal function to provide the address of the implementation contract\r\n    */\r\n    function _implementation() internal view returns(address) {\r\n        return __implementation;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the proxy owner\r\n    * @return the address of the proxy owner\r\n    */\r\n    function proxyOwner() external ifOwner returns(address) {\r\n        return _upgradeabilityOwner();\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the version name of the current implementation\r\n    * @return string representing the name of the current version\r\n    */\r\n    function version() external ifOwner returns(string memory) {\r\n        return __version;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the current implementation\r\n    * @return address of the current implementation\r\n    */\r\n    function implementation() external ifOwner returns(address) {\r\n        return _implementation();\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferProxyOwnership(address _newOwner) external ifOwner {\r\n        require(_newOwner != address(0), \"Address should not be 0x\");\r\n        emit ProxyOwnershipTransferred(_upgradeabilityOwner(), _newOwner);\r\n        _setUpgradeabilityOwner(_newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the upgradeability owner to upgrade the current version of the proxy.\r\n    * @param _newVersion representing the version name of the new implementation to be set.\r\n    * @param _newImplementation representing the address of the new implementation to be set.\r\n    */\r\n    function upgradeTo(string calldata _newVersion, address _newImplementation) external ifOwner {\r\n        _upgradeTo(_newVersion, _newImplementation);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the upgradeability owner to upgrade the current version of the proxy and call the new implementation\r\n    * to initialize whatever is needed through a low level call.\r\n    * @param _newVersion representing the version name of the new implementation to be set.\r\n    * @param _newImplementation representing the address of the new implementation to be set.\r\n    * @param _data represents the msg.data to bet sent in the low level call. This parameter may include the function\r\n    * signature of the implementation to be called with the needed payload\r\n    */\r\n    function upgradeToAndCall(string calldata _newVersion, address _newImplementation, bytes calldata _data) external payable ifOwner {\r\n        _upgradeToAndCall(_newVersion, _newImplementation, _data);\r\n    }\r\n\r\n    function _upgradeToAndCall(string memory _newVersion, address _newImplementation, bytes memory _data) internal {\r\n        _upgradeTo(_newVersion, _newImplementation);\r\n        bool success;\r\n        /*solium-disable-next-line security/no-call-value*/\r\n        (success, ) = address(this).call.value(msg.value)(_data);\r\n        require(success, \"Fail in executing the function of implementation contract\");\r\n    }\r\n\r\n}\r\n\r\n/* \r\n * @dev It is the contract that contains the storage items related to the ERC20 contract implementaiton\r\n * of the openzeppelin-solidity. Used to allow the storage declaration of ERC20 to the STGetter contract\r\n*/\r\n\r\ncontract OZStorage {\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    function totalSupply() internal view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _investor) internal view returns(uint256) {\r\n        return _balances[_investor];\r\n    }\r\n\r\n    function _allowance(address owner, address spender) internal view returns(uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n}\r\n\r\ninterface IDataStore {\r\n    /**\r\n     * @dev Changes security token atatched to this data store\r\n     * @param _securityToken address of the security token\r\n     */\r\n    function setSecurityToken(address _securityToken) external;\r\n\r\n    /**\r\n     * @dev Stores a uint256 data against a key\r\n     * @param _key Unique key to identify the data\r\n     * @param _data Data to be stored against the key\r\n     */\r\n    function setUint256(bytes32 _key, uint256 _data) external;\r\n\r\n    function setBytes32(bytes32 _key, bytes32 _data) external;\r\n\r\n    function setAddress(bytes32 _key, address _data) external;\r\n\r\n    function setString(bytes32 _key, string calldata _data) external;\r\n\r\n    function setBytes(bytes32 _key, bytes calldata _data) external;\r\n\r\n    function setBool(bytes32 _key, bool _data) external;\r\n\r\n    /**\r\n     * @dev Stores a uint256 array against a key\r\n     * @param _key Unique key to identify the array\r\n     * @param _data Array to be stored against the key\r\n     */\r\n    function setUint256Array(bytes32 _key, uint256[] calldata _data) external;\r\n\r\n    function setBytes32Array(bytes32 _key, bytes32[] calldata _data) external ;\r\n\r\n    function setAddressArray(bytes32 _key, address[] calldata _data) external;\r\n\r\n    function setBoolArray(bytes32 _key, bool[] calldata _data) external;\r\n\r\n    /**\r\n     * @dev Inserts a uint256 element to the array identified by the key\r\n     * @param _key Unique key to identify the array\r\n     * @param _data Element to push into the array\r\n     */\r\n    function insertUint256(bytes32 _key, uint256 _data) external;\r\n\r\n    function insertBytes32(bytes32 _key, bytes32 _data) external;\r\n\r\n    function insertAddress(bytes32 _key, address _data) external;\r\n\r\n    function insertBool(bytes32 _key, bool _data) external;\r\n\r\n    /**\r\n     * @dev Deletes an element from the array identified by the key.\r\n     * When an element is deleted from an Array, last element of that array is moved to the index of deleted element.\r\n     * @param _key Unique key to identify the array\r\n     * @param _index Index of the element to delete\r\n     */\r\n    function deleteUint256(bytes32 _key, uint256 _index) external;\r\n\r\n    function deleteBytes32(bytes32 _key, uint256 _index) external;\r\n\r\n    function deleteAddress(bytes32 _key, uint256 _index) external;\r\n\r\n    function deleteBool(bytes32 _key, uint256 _index) external;\r\n\r\n    /**\r\n     * @dev Stores multiple uint256 data against respective keys\r\n     * @param _keys Array of keys to identify the data\r\n     * @param _data Array of data to be stored against the respective keys\r\n     */\r\n    function setUint256Multi(bytes32[] calldata _keys, uint256[] calldata _data) external;\r\n\r\n    function setBytes32Multi(bytes32[] calldata _keys, bytes32[] calldata _data) external;\r\n\r\n    function setAddressMulti(bytes32[] calldata _keys, address[] calldata _data) external;\r\n\r\n    function setBoolMulti(bytes32[] calldata _keys, bool[] calldata _data) external;\r\n\r\n    /**\r\n     * @dev Inserts multiple uint256 elements to the array identified by the respective keys\r\n     * @param _keys Array of keys to identify the data\r\n     * @param _data Array of data to be inserted in arrays of the respective keys\r\n     */\r\n    function insertUint256Multi(bytes32[] calldata _keys, uint256[] calldata _data) external;\r\n\r\n    function insertBytes32Multi(bytes32[] calldata _keys, bytes32[] calldata _data) external;\r\n\r\n    function insertAddressMulti(bytes32[] calldata _keys, address[] calldata _data) external;\r\n\r\n    function insertBoolMulti(bytes32[] calldata _keys, bool[] calldata _data) external;\r\n\r\n    function getUint256(bytes32 _key) external view returns(uint256);\r\n\r\n    function getBytes32(bytes32 _key) external view returns(bytes32);\r\n\r\n    function getAddress(bytes32 _key) external view returns(address);\r\n\r\n    function getString(bytes32 _key) external view returns(string memory);\r\n\r\n    function getBytes(bytes32 _key) external view returns(bytes memory);\r\n\r\n    function getBool(bytes32 _key) external view returns(bool);\r\n\r\n    function getUint256Array(bytes32 _key) external view returns(uint256[] memory);\r\n\r\n    function getBytes32Array(bytes32 _key) external view returns(bytes32[] memory);\r\n\r\n    function getAddressArray(bytes32 _key) external view returns(address[] memory);\r\n\r\n    function getBoolArray(bytes32 _key) external view returns(bool[] memory);\r\n\r\n    function getUint256ArrayLength(bytes32 _key) external view returns(uint256);\r\n\r\n    function getBytes32ArrayLength(bytes32 _key) external view returns(uint256);\r\n\r\n    function getAddressArrayLength(bytes32 _key) external view returns(uint256);\r\n\r\n    function getBoolArrayLength(bytes32 _key) external view returns(uint256);\r\n\r\n    function getUint256ArrayElement(bytes32 _key, uint256 _index) external view returns(uint256);\r\n\r\n    function getBytes32ArrayElement(bytes32 _key, uint256 _index) external view returns(bytes32);\r\n\r\n    function getAddressArrayElement(bytes32 _key, uint256 _index) external view returns(address);\r\n\r\n    function getBoolArrayElement(bytes32 _key, uint256 _index) external view returns(bool);\r\n\r\n    function getUint256ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(uint256[] memory);\r\n\r\n    function getBytes32ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(bytes32[] memory);\r\n\r\n    function getAddressArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(address[] memory);\r\n\r\n    function getBoolArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(bool[] memory);\r\n}\r\n\r\n/**\r\n * @title Interface for the Polymath Module Registry contract\r\n */\r\ninterface IModuleRegistry {\r\n\r\n    ///////////\r\n    // Events\r\n    //////////\r\n\r\n    // Emit when network becomes paused\r\n    event Pause(address account);\r\n    // Emit when network becomes unpaused\r\n    event Unpause(address account);\r\n    // Emit when Module is used by the SecurityToken\r\n    event ModuleUsed(address indexed _moduleFactory, address indexed _securityToken);\r\n    // Emit when the Module Factory gets registered on the ModuleRegistry contract\r\n    event ModuleRegistered(address indexed _moduleFactory, address indexed _owner);\r\n    // Emit when the module gets verified by Polymath\r\n    event ModuleVerified(address indexed _moduleFactory);\r\n    // Emit when the module gets unverified by Polymath or the factory owner\r\n    event ModuleUnverified(address indexed _moduleFactory);\r\n    // Emit when a ModuleFactory is removed by Polymath\r\n    event ModuleRemoved(address indexed _moduleFactory, address indexed _decisionMaker);\r\n    // Emit when ownership gets transferred\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @notice Called by a security token (2.x) to notify the registry it is using a module\r\n     * @param _moduleFactory is the address of the relevant module factory\r\n     */\r\n    function useModule(address _moduleFactory) external;\r\n\r\n    /**\r\n     * @notice Called by a security token to notify the registry it is using a module\r\n     * @param _moduleFactory is the address of the relevant module factory\r\n     * @param _isUpgrade whether the use is part of an existing module upgrade\r\n     */\r\n    function useModule(address _moduleFactory, bool _isUpgrade) external;\r\n\r\n    /**\r\n     * @notice Called by the ModuleFactory owner to register new modules for SecurityToken to use\r\n     * @param _moduleFactory is the address of the module factory to be registered\r\n     */\r\n    function registerModule(address _moduleFactory) external;\r\n\r\n    /**\r\n     * @notice Called by the ModuleFactory owner or registry curator to delete a ModuleFactory\r\n     * @param _moduleFactory is the address of the module factory to be deleted\r\n     */\r\n    function removeModule(address _moduleFactory) external;\r\n\r\n    /**\r\n     * @notice Check that a module and its factory are compatible\r\n     * @param _moduleFactory is the address of the relevant module factory\r\n     * @param _securityToken is the address of the relevant security token\r\n     * @return bool whether module and token are compatible\r\n     */\r\n    function isCompatibleModule(address _moduleFactory, address _securityToken) external view returns(bool isCompatible);\r\n\r\n    /**\r\n    * @notice Called by Polymath to verify modules for SecurityToken to use.\r\n    * @notice A module can not be used by an ST unless first approved/verified by Polymath\r\n    * @notice (The only exception to this is that the author of the module is the owner of the ST - Only if enabled by the FeatureRegistry)\r\n    * @param _moduleFactory is the address of the module factory to be registered\r\n    */\r\n    function verifyModule(address _moduleFactory) external;\r\n\r\n    /**\r\n    * @notice Called by Polymath to unverify modules for SecurityToken to use.\r\n    * @notice A module can not be used by an ST unless first approved/verified by Polymath\r\n    * @notice (The only exception to this is that the author of the module is the owner of the ST - Only if enabled by the FeatureRegistry)\r\n    * @param _moduleFactory is the address of the module factory to be registered\r\n    */\r\n    function unverifyModule(address _moduleFactory) external;\r\n\r\n    /**\r\n     * @notice Returns the verified status, and reputation of the entered Module Factory\r\n     * @param _factoryAddress is the address of the module factory\r\n     * @return bool indicating whether module factory is verified\r\n     * @return address of the factory owner\r\n     * @return address array which contains the list of securityTokens that use that module factory\r\n     */\r\n    function getFactoryDetails(address _factoryAddress) external view returns(bool isVerified, address factoryOwner, address[] memory usingTokens);\r\n\r\n    /**\r\n     * @notice Returns all the tags related to the a module type which are valid for the given token\r\n     * @param _moduleType is the module type\r\n     * @param _securityToken is the token\r\n     * @return list of tags\r\n     * @return corresponding list of module factories\r\n     */\r\n    function getTagsByTypeAndToken(uint8 _moduleType, address _securityToken) external view returns(bytes32[] memory tags, address[] memory factories);\r\n\r\n    /**\r\n     * @notice Returns all the tags related to the a module type which are valid for the given token\r\n     * @param _moduleType is the module type\r\n     * @return list of tags\r\n     * @return corresponding list of module factories\r\n     */\r\n    function getTagsByType(uint8 _moduleType) external view returns(bytes32[] memory tags, address[] memory factories);\r\n\r\n    /**\r\n     * @notice Returns the list of addresses of all Module Factory of a particular type\r\n     * @param _moduleType Type of Module\r\n     * @return address array that contains the list of addresses of module factory contracts.\r\n     */\r\n    function getAllModulesByType(uint8 _moduleType) external view returns(address[] memory factories);\r\n    /**\r\n     * @notice Returns the list of addresses of Module Factory of a particular type\r\n     * @param _moduleType Type of Module\r\n     * @return address array that contains the list of addresses of module factory contracts.\r\n     */\r\n    function getModulesByType(uint8 _moduleType) external view returns(address[] memory factories);\r\n\r\n    /**\r\n     * @notice Returns the list of available Module factory addresses of a particular type for a given token.\r\n     * @param _moduleType is the module type to look for\r\n     * @param _securityToken is the address of SecurityToken\r\n     * @return address array that contains the list of available addresses of module factory contracts.\r\n     */\r\n    function getModulesByTypeAndToken(uint8 _moduleType, address _securityToken) external view returns(address[] memory factories);\r\n\r\n    /**\r\n     * @notice Use to get the latest contract address of the regstries\r\n     */\r\n    function updateFromRegistry() external;\r\n\r\n    /**\r\n     * @notice Get the owner of the contract\r\n     * @return address owner\r\n     */\r\n    function owner() external view returns(address ownerAddress);\r\n\r\n    /**\r\n     * @notice Check whether the contract operations is paused or not\r\n     * @return bool\r\n     */\r\n    function isPaused() external view returns(bool paused);\r\n\r\n    /**\r\n     * @notice Reclaims all ERC20Basic compatible tokens\r\n     * @param _tokenContract The address of the token contract\r\n     */\r\n    function reclaimERC20(address _tokenContract) external;\r\n\r\n    /**\r\n     * @notice Called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() external;\r\n\r\n    /**\r\n     * @notice Called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() external;\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) external;\r\n\r\n}\r\n\r\ninterface IPolymathRegistry {\r\n\r\n    event ChangeAddress(string _nameKey, address indexed _oldAddress, address indexed _newAddress);\r\n    \r\n    /**\r\n     * @notice Returns the contract address\r\n     * @param _nameKey is the key for the contract address mapping\r\n     * @return address\r\n     */\r\n    function getAddress(string calldata _nameKey) external view returns(address registryAddress);\r\n\r\n    /**\r\n     * @notice Changes the contract address\r\n     * @param _nameKey is the key for the contract address mapping\r\n     * @param _newAddress is the new contract address\r\n     */\r\n    function changeAddress(string calldata _nameKey, address _newAddress) external;\r\n\r\n}\r\n\r\n/**\r\n * @title Interface for the Polymath Security Token Registry contract\r\n */\r\ninterface ISecurityTokenRegistry {\r\n\r\n    // Emit when network becomes paused\r\n    event Pause(address account);\r\n    // Emit when network becomes unpaused\r\n    event Unpause(address account);\r\n    // Emit when the ticker is removed from the registry\r\n    event TickerRemoved(string _ticker, address _removedBy);\r\n    // Emit when the token ticker expiry is changed\r\n    event ChangeExpiryLimit(uint256 _oldExpiry, uint256 _newExpiry);\r\n    // Emit when changeSecurityLaunchFee is called\r\n    event ChangeSecurityLaunchFee(uint256 _oldFee, uint256 _newFee);\r\n    // Emit when changeTickerRegistrationFee is called\r\n    event ChangeTickerRegistrationFee(uint256 _oldFee, uint256 _newFee);\r\n    // Emit when Fee currency is changed\r\n    event ChangeFeeCurrency(bool _isFeeInPoly);\r\n    // Emit when ownership gets transferred\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    // Emit when ownership of the ticker gets changed\r\n    event ChangeTickerOwnership(string _ticker, address indexed _oldOwner, address indexed _newOwner);\r\n    // Emit at the time of launching a new security token of version 3.0+\r\n    event NewSecurityToken(\r\n        string _ticker,\r\n        string _name,\r\n        address indexed _securityTokenAddress,\r\n        address indexed _owner,\r\n        uint256 _addedAt,\r\n        address _registrant,\r\n        bool _fromAdmin,\r\n        uint256 _usdFee,\r\n        uint256 _polyFee,\r\n        uint256 _protocolVersion\r\n    );\r\n    // Emit at the time of launching a new security token v2.0.\r\n    // _registrationFee is in poly\r\n    event NewSecurityToken(\r\n        string _ticker,\r\n        string _name,\r\n        address indexed _securityTokenAddress,\r\n        address indexed _owner,\r\n        uint256 _addedAt,\r\n        address _registrant,\r\n        bool _fromAdmin,\r\n        uint256 _registrationFee\r\n    );\r\n    // Emit when new ticker get registers\r\n    event RegisterTicker(\r\n        address indexed _owner,\r\n        string _ticker,\r\n        uint256 indexed _registrationDate,\r\n        uint256 indexed _expiryDate,\r\n        bool _fromAdmin,\r\n        uint256 _registrationFeePoly,\r\n        uint256 _registrationFeeUsd\r\n    );\r\n    // Emit after ticker registration\r\n    // _registrationFee is in poly\r\n    // fee in usd is not being emitted to maintain backwards compatibility\r\n    event RegisterTicker(\r\n        address indexed _owner,\r\n        string _ticker,\r\n        string _name,\r\n        uint256 indexed _registrationDate,\r\n        uint256 indexed _expiryDate,\r\n        bool _fromAdmin,\r\n        uint256 _registrationFee\r\n    );\r\n    // Emit at when issuer refreshes exisiting token\r\n    event SecurityTokenRefreshed(\r\n        string _ticker,\r\n        string _name,\r\n        address indexed _securityTokenAddress,\r\n        address indexed _owner,\r\n        uint256 _addedAt,\r\n        address _registrant,\r\n        uint256 _protocolVersion\r\n    );\r\n    event ProtocolFactorySet(address indexed _STFactory, uint8 _major, uint8 _minor, uint8 _patch);\r\n    event LatestVersionSet(uint8 _major, uint8 _minor, uint8 _patch);\r\n    event ProtocolFactoryRemoved(address indexed _STFactory, uint8 _major, uint8 _minor, uint8 _patch);\r\n\r\n    /**\r\n     * @notice Deploys an instance of a new Security Token of version 2.0 and records it to the registry\r\n     * @dev this function is for backwards compatibilty with 2.0 dApp.\r\n     * @param _name is the name of the token\r\n     * @param _ticker is the ticker symbol of the security token\r\n     * @param _tokenDetails is the off-chain details of the token\r\n     * @param _divisible is whether or not the token is divisible\r\n     */\r\n    function generateSecurityToken(\r\n        string calldata _name,\r\n        string calldata _ticker,\r\n        string calldata _tokenDetails,\r\n        bool _divisible\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * @notice Deploys an instance of a new Security Token and records it to the registry\r\n     * @param _name is the name of the token\r\n     * @param _ticker is the ticker symbol of the security token\r\n     * @param _tokenDetails is the off-chain details of the token\r\n     * @param _divisible is whether or not the token is divisible\r\n     * @param _treasuryWallet Ethereum address which will holds the STs.\r\n     * @param _protocolVersion Version of securityToken contract\r\n     * - `_protocolVersion` is the packed value of uin8[3] array (it will be calculated offchain)\r\n     * - if _protocolVersion == 0 then latest version of securityToken will be generated\r\n     */\r\n    function generateNewSecurityToken(\r\n        string calldata _name,\r\n        string calldata _ticker,\r\n        string calldata _tokenDetails,\r\n        bool _divisible,\r\n        address _treasuryWallet,\r\n        uint256 _protocolVersion\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * @notice Deploys an instance of a new Security Token and replaces the old one in the registry\r\n     * This can be used to upgrade from version 2.0 of ST to 3.0 or in case something goes wrong with earlier ST\r\n     * @dev This function needs to be in STR 3.0. Defined public to avoid stack overflow\r\n     * @param _name is the name of the token\r\n     * @param _ticker is the ticker symbol of the security token\r\n     * @param _tokenDetails is the off-chain details of the token\r\n     * @param _divisible is whether or not the token is divisible\r\n     */\r\n    function refreshSecurityToken(\r\n        string calldata _name,\r\n        string calldata _ticker,\r\n        string calldata _tokenDetails,\r\n        bool _divisible,\r\n        address _treasuryWallet\r\n    )\r\n        external returns (address securityToken);\r\n\r\n    /**\r\n     * @notice Adds a new custom Security Token and saves it to the registry. (Token should follow the ISecurityToken interface)\r\n     * @param _name Name of the token\r\n     * @param _ticker Ticker of the security token\r\n     * @param _owner Owner of the token\r\n     * @param _securityToken Address of the securityToken\r\n     * @param _tokenDetails Off-chain details of the token\r\n     * @param _deployedAt Timestamp at which security token comes deployed on the ethereum blockchain\r\n     */\r\n    function modifySecurityToken(\r\n        string calldata _name,\r\n        string calldata _ticker,\r\n        address _owner,\r\n        address _securityToken,\r\n        string calldata _tokenDetails,\r\n        uint256 _deployedAt\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @notice Adds a new custom Security Token and saves it to the registry. (Token should follow the ISecurityToken interface)\r\n     * @param _ticker is the ticker symbol of the security token\r\n     * @param _owner is the owner of the token\r\n     * @param _securityToken is the address of the securityToken\r\n     * @param _tokenDetails is the off-chain details of the token\r\n     * @param _deployedAt is the timestamp at which the security token is deployed\r\n     */\r\n    function modifyExistingSecurityToken(\r\n        string calldata _ticker,\r\n        address _owner,\r\n        address _securityToken,\r\n        string calldata _tokenDetails,\r\n        uint256 _deployedAt\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * @notice Modifies the ticker details. Only Polymath has the ability to do so.\r\n     * @notice Only allowed to modify the tickers which are not yet deployed.\r\n     * @param _owner is the owner of the token\r\n     * @param _ticker is the token ticker\r\n     * @param _registrationDate is the date at which ticker is registered\r\n     * @param _expiryDate is the expiry date for the ticker\r\n     * @param _status is the token deployment status\r\n     */\r\n    function modifyExistingTicker(\r\n        address _owner,\r\n        string calldata _ticker,\r\n        uint256 _registrationDate,\r\n        uint256 _expiryDate,\r\n        bool _status\r\n    )\r\n        external;\r\n\r\n    /**\r\n     * @notice Registers the token ticker for its particular owner\r\n     * @notice once the token ticker is registered to its owner then no other issuer can claim\r\n     * @notice its ownership. If the ticker expires and its issuer hasn't used it, then someone else can take it.\r\n     * @param _owner Address of the owner of the token\r\n     * @param _ticker Token ticker\r\n     * @param _tokenName Name of the token\r\n     */\r\n    function registerTicker(address _owner, string calldata _ticker, string calldata _tokenName) external;\r\n\r\n    /**\r\n     * @notice Registers the token ticker to the selected owner\r\n     * @notice Once the token ticker is registered to its owner then no other issuer can claim\r\n     * @notice its ownership. If the ticker expires and its issuer hasn't used it, then someone else can take it.\r\n     * @param _owner is address of the owner of the token\r\n     * @param _ticker is unique token ticker\r\n     */\r\n    function registerNewTicker(address _owner, string calldata _ticker) external;\r\n\r\n    /**\r\n    * @notice Check that Security Token is registered\r\n    * @param _securityToken Address of the Scurity token\r\n    * @return bool\r\n    */\r\n    function isSecurityToken(address _securityToken) external view returns(bool isValid);\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) external;\r\n\r\n    /**\r\n     * @notice Get security token address by ticker name\r\n     * @param _ticker Symbol of the Scurity token\r\n     * @return address\r\n     */\r\n    function getSecurityTokenAddress(string calldata _ticker) external view returns(address tokenAddress);\r\n\r\n    /**\r\n    * @notice Returns the security token data by address\r\n    * @param _securityToken is the address of the security token.\r\n    * @return string is the ticker of the security Token.\r\n    * @return address is the issuer of the security Token.\r\n    * @return string is the details of the security token.\r\n    * @return uint256 is the timestamp at which security Token was deployed.\r\n    */\r\n    function getSecurityTokenData(address _securityToken) external view returns (\r\n        string memory tokenSymbol,\r\n        address tokenAddress,\r\n        string memory tokenDetails,\r\n        uint256 tokenTime\r\n    );\r\n\r\n    /**\r\n     * @notice Get the current STFactory Address\r\n     */\r\n    function getSTFactoryAddress() external view returns(address stFactoryAddress);\r\n\r\n    /**\r\n     * @notice Returns the STFactory Address of a particular version\r\n     * @param _protocolVersion Packed protocol version\r\n     */\r\n    function getSTFactoryAddressOfVersion(uint256 _protocolVersion) external view returns(address stFactory);\r\n\r\n    /**\r\n     * @notice Get Protocol version\r\n     */\r\n    function getLatestProtocolVersion() external view returns(uint8[] memory protocolVersion);\r\n\r\n    /**\r\n     * @notice Used to get the ticker list as per the owner\r\n     * @param _owner Address which owns the list of tickers\r\n     */\r\n    function getTickersByOwner(address _owner) external view returns(bytes32[] memory tickers);\r\n\r\n    /**\r\n     * @notice Returns the list of tokens owned by the selected address\r\n     * @param _owner is the address which owns the list of tickers\r\n     * @dev Intention is that this is called off-chain so block gas limit is not relevant\r\n     */\r\n    function getTokensByOwner(address _owner) external view returns(address[] memory tokens);\r\n\r\n    /**\r\n     * @notice Returns the list of all tokens\r\n     * @dev Intention is that this is called off-chain so block gas limit is not relevant\r\n     */\r\n    function getTokens() external view returns(address[] memory tokens);\r\n\r\n    /**\r\n     * @notice Returns the owner and timestamp for a given ticker\r\n     * @param _ticker ticker\r\n     * @return address\r\n     * @return uint256\r\n     * @return uint256\r\n     * @return string\r\n     * @return bool\r\n     */\r\n    function getTickerDetails(string calldata _ticker) external view returns(address tickerOwner, uint256 tickerRegistration, uint256 tickerExpiry, string memory tokenName, bool tickerStatus);\r\n\r\n    /**\r\n     * @notice Modifies the ticker details. Only polymath account has the ability\r\n     * to do so. Only allowed to modify the tickers which are not yet deployed\r\n     * @param _owner Owner of the token\r\n     * @param _ticker Token ticker\r\n     * @param _tokenName Name of the token\r\n     * @param _registrationDate Date on which ticker get registered\r\n     * @param _expiryDate Expiry date of the ticker\r\n     * @param _status Token deployed status\r\n     */\r\n    function modifyTicker(\r\n        address _owner,\r\n        string calldata _ticker,\r\n        string calldata _tokenName,\r\n        uint256 _registrationDate,\r\n        uint256 _expiryDate,\r\n        bool _status\r\n    )\r\n    external;\r\n\r\n    /**\r\n     * @notice Removes the ticker details and associated ownership & security token mapping\r\n     * @param _ticker Token ticker\r\n     */\r\n    function removeTicker(string calldata _ticker) external;\r\n\r\n    /**\r\n     * @notice Transfers the ownership of the ticker\r\n     * @dev _newOwner Address whom ownership to transfer\r\n     * @dev _ticker Ticker\r\n     */\r\n    function transferTickerOwnership(address _newOwner, string calldata _ticker) external;\r\n\r\n    /**\r\n     * @notice Changes the expiry time for the token ticker\r\n     * @param _newExpiry New time period for token ticker expiry\r\n     */\r\n    function changeExpiryLimit(uint256 _newExpiry) external;\r\n\r\n   /**\r\n    * @notice Sets the ticker registration fee in USD tokens. Only Polymath.\r\n    * @param _tickerRegFee is the registration fee in USD tokens (base 18 decimals)\r\n    */\r\n    function changeTickerRegistrationFee(uint256 _tickerRegFee) external;\r\n\r\n    /**\r\n    * @notice Sets the ticker registration fee in USD tokens. Only Polymath.\r\n    * @param _stLaunchFee is the registration fee in USD tokens (base 18 decimals)\r\n    */\r\n    function changeSecurityLaunchFee(uint256 _stLaunchFee) external;\r\n\r\n    /**\r\n    * @notice Sets the ticker registration and ST launch fee amount and currency\r\n    * @param _tickerRegFee is the ticker registration fee (base 18 decimals)\r\n    * @param _stLaunchFee is the st generation fee (base 18 decimals)\r\n    * @param _isFeeInPoly defines if the fee is in poly or usd\r\n    */\r\n    function changeFeesAmountAndCurrency(uint256 _tickerRegFee, uint256 _stLaunchFee, bool _isFeeInPoly) external;\r\n\r\n    /**\r\n    * @notice Changes the SecurityToken contract for a particular factory version\r\n    * @notice Used only by Polymath to upgrade the SecurityToken contract and add more functionalities to future versions\r\n    * @notice Changing versions does not affect existing tokens.\r\n    * @param _STFactoryAddress is the address of the proxy.\r\n    * @param _major Major version of the proxy.\r\n    * @param _minor Minor version of the proxy.\r\n    * @param _patch Patch version of the proxy\r\n    */\r\n    function setProtocolFactory(address _STFactoryAddress, uint8 _major, uint8 _minor, uint8 _patch) external;\r\n\r\n    /**\r\n    * @notice Removes a STFactory\r\n    * @param _major Major version of the proxy.\r\n    * @param _minor Minor version of the proxy.\r\n    * @param _patch Patch version of the proxy\r\n    */\r\n    function removeProtocolFactory(uint8 _major, uint8 _minor, uint8 _patch) external;\r\n\r\n    /**\r\n    * @notice Changes the default protocol version\r\n    * @notice Used only by Polymath to upgrade the SecurityToken contract and add more functionalities to future versions\r\n    * @notice Changing versions does not affect existing tokens.\r\n    * @param _major Major version of the proxy.\r\n    * @param _minor Minor version of the proxy.\r\n    * @param _patch Patch version of the proxy\r\n    */\r\n    function setLatestVersion(uint8 _major, uint8 _minor, uint8 _patch) external;\r\n\r\n    /**\r\n     * @notice Changes the PolyToken address. Only Polymath.\r\n     * @param _newAddress is the address of the polytoken.\r\n     */\r\n    function updatePolyTokenAddress(address _newAddress) external;\r\n\r\n    /**\r\n     * @notice Used to update the polyToken contract address\r\n     */\r\n    function updateFromRegistry() external;\r\n\r\n    /**\r\n     * @notice Gets the security token launch fee\r\n     * @return Fee amount\r\n     */\r\n    function getSecurityTokenLaunchFee() external returns(uint256 fee);\r\n\r\n    /**\r\n     * @notice Gets the ticker registration fee\r\n     * @return Fee amount\r\n     */\r\n    function getTickerRegistrationFee() external returns(uint256 fee);\r\n\r\n    /**\r\n     * @notice Set the getter contract address\r\n     * @param _getterContract Address of the contract\r\n     */\r\n    function setGetterRegistry(address _getterContract) external;\r\n\r\n    /**\r\n     * @notice Returns the usd & poly fee for a particular feetype\r\n     * @param _feeType Key corresponding to fee type\r\n     */\r\n    function getFees(bytes32 _feeType) external returns (uint256 usdFee, uint256 polyFee);\r\n\r\n    /**\r\n     * @notice Returns the list of tokens to which the delegate has some access\r\n     * @param _delegate is the address for the delegate\r\n     * @dev Intention is that this is called off-chain so block gas limit is not relevant\r\n     */\r\n    function getTokensByDelegate(address _delegate) external view returns(address[] memory tokens);\r\n\r\n    /**\r\n     * @notice Gets the expiry limit\r\n     * @return Expiry limit\r\n     */\r\n    function getExpiryLimit() external view returns(uint256 expiry);\r\n\r\n    /**\r\n     * @notice Gets the status of the ticker\r\n     * @param _ticker Ticker whose status need to determine\r\n     * @return bool\r\n     */\r\n    function getTickerStatus(string calldata _ticker) external view returns(bool status);\r\n\r\n    /**\r\n     * @notice Gets the fee currency\r\n     * @return true = poly, false = usd\r\n     */\r\n    function getIsFeeInPoly() external view returns(bool isInPoly);\r\n\r\n    /**\r\n     * @notice Gets the owner of the ticker\r\n     * @param _ticker Ticker whose owner need to determine\r\n     * @return address Address of the owner\r\n     */\r\n    function getTickerOwner(string calldata _ticker) external view returns(address owner);\r\n\r\n    /**\r\n     * @notice Checks whether the registry is paused or not\r\n     * @return bool\r\n     */\r\n    function isPaused() external view returns(bool paused);\r\n\r\n    /**\r\n    * @notice Called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() external;\r\n\r\n    /**\r\n     * @notice Called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() external;\r\n\r\n    /**\r\n     * @notice Reclaims all ERC20Basic compatible tokens\r\n     * @param _tokenContract is the address of the token contract\r\n     */\r\n    function reclaimERC20(address _tokenContract) external;\r\n\r\n    /**\r\n     * @notice Gets the owner of the contract\r\n     * @return address owner\r\n     */\r\n    function owner() external view returns(address ownerAddress);\r\n\r\n    /**\r\n     * @notice Checks if the entered ticker is registered and has not expired\r\n     * @param _ticker is the token ticker\r\n     * @return bool\r\n     */\r\n    function tickerAvailable(string calldata _ticker) external view returns(bool);\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract SecurityTokenStorage {\r\n\r\n    uint8 internal constant PERMISSION_KEY = 1;\r\n    uint8 internal constant TRANSFER_KEY = 2;\r\n    uint8 internal constant MINT_KEY = 3;\r\n    uint8 internal constant CHECKPOINT_KEY = 4;\r\n    uint8 internal constant BURN_KEY = 5;\r\n    uint8 internal constant DATA_KEY = 6;\r\n    uint8 internal constant WALLET_KEY = 7;\r\n\r\n    bytes32 internal constant INVESTORSKEY = 0xdf3a8dd24acdd05addfc6aeffef7574d2de3f844535ec91e8e0f3e45dba96731; //keccak256(abi.encodePacked(\"INVESTORS\"))\r\n    bytes32 internal constant TREASURY = 0xaae8817359f3dcb67d050f44f3e49f982e0359d90ca4b5f18569926304aaece6; //keccak256(abi.encodePacked(\"TREASURY_WALLET\"))\r\n    bytes32 internal constant LOCKED = \"LOCKED\";\r\n    bytes32 internal constant UNLOCKED = \"UNLOCKED\";\r\n\r\n    //////////////////////////\r\n    /// Document datastructure\r\n    //////////////////////////\r\n\r\n    struct Document {\r\n        bytes32 docHash; // Hash of the document\r\n        uint256 lastModified; // Timestamp at which document details was last modified\r\n        string uri; // URI of the document that exist off-chain\r\n    }\r\n\r\n    // Used to hold the semantic version data\r\n    struct SemanticVersion {\r\n        uint8 major;\r\n        uint8 minor;\r\n        uint8 patch;\r\n    }\r\n\r\n    // Struct for module data\r\n    struct ModuleData {\r\n        bytes32 name;\r\n        address module;\r\n        address moduleFactory;\r\n        bool isArchived;\r\n        uint8[] moduleTypes;\r\n        uint256[] moduleIndexes;\r\n        uint256 nameIndex;\r\n        bytes32 label;\r\n    }\r\n\r\n    // Structures to maintain checkpoints of balances for governance / dividends\r\n    struct Checkpoint {\r\n        uint256 checkpointId;\r\n        uint256 value;\r\n    }\r\n\r\n    //Naming scheme to match Ownable\r\n    address internal _owner;\r\n    address public tokenFactory;\r\n    bool public initialized;\r\n\r\n    // ERC20 Details\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    // Address of the controller which is a delegated entity\r\n    // set by the issuer/owner of the token\r\n    address public controller;\r\n\r\n    IPolymathRegistry public polymathRegistry;\r\n    IModuleRegistry public moduleRegistry;\r\n    ISecurityTokenRegistry public securityTokenRegistry;\r\n    IERC20 public polyToken;\r\n    address public getterDelegate;\r\n    // Address of the data store used to store shared data\r\n    IDataStore public dataStore;\r\n\r\n    uint256 public granularity;\r\n\r\n    // Value of current checkpoint\r\n    uint256 public currentCheckpointId;\r\n\r\n    // off-chain data\r\n    string public tokenDetails;\r\n\r\n    // Used to permanently halt controller actions\r\n    bool public controllerDisabled = false;\r\n\r\n    // Used to temporarily halt all transactions\r\n    bool public transfersFrozen;\r\n\r\n    // Number of investors with non-zero balance\r\n    uint256 public holderCount;\r\n\r\n    // Variable which tells whether issuance is ON or OFF forever\r\n    // Implementers need to implement one more function to reset the value of `issuance` variable\r\n    // to false. That function is not a part of the standard (EIP-1594) as it is depend on the various factors\r\n    // issuer, followed compliance rules etc. So issuers have the choice how they want to close the issuance.\r\n    bool internal issuance = true;\r\n\r\n    // Array use to store all the document name present in the contracts\r\n    bytes32[] _docNames;\r\n\r\n    // Times at which each checkpoint was created\r\n    uint256[] checkpointTimes;\r\n\r\n    SemanticVersion securityTokenVersion;\r\n\r\n    // Records added modules - module list should be order agnostic!\r\n    mapping(uint8 => address[]) modules;\r\n\r\n    // Records information about the module\r\n    mapping(address => ModuleData) modulesToData;\r\n\r\n    // Records added module names - module list should be order agnostic!\r\n    mapping(bytes32 => address[]) names;\r\n\r\n    // Mapping of checkpoints that relate to total supply\r\n    mapping (uint256 => uint256) checkpointTotalSupply;\r\n\r\n    // Map each investor to a series of checkpoints\r\n    mapping(address => Checkpoint[]) checkpointBalances;\r\n\r\n    // mapping to store the documents details in the document\r\n    mapping(bytes32 => Document) internal _documents;\r\n    // mapping to store the document name indexes\r\n    mapping(bytes32 => uint256) internal _docIndexes;\r\n    // Mapping from (investor, partition, operator) to approved status\r\n    mapping (address => mapping (bytes32 => mapping (address => bool))) partitionApprovals;\r\n\r\n}\r\n\r\n/**\r\n * @title USDTiered STO module Proxy\r\n */\r\ncontract SecurityTokenProxy is OZStorage, SecurityTokenStorage, OwnedUpgradeabilityProxy {\r\n\r\n    /**\r\n     * @notice constructor\r\n     * @param _name Name of the SecurityToken\r\n     * @param _symbol Symbol of the Token\r\n     * @param _decimals Decimals for the securityToken\r\n     * @param _granularity granular level of the token\r\n     * @param _tokenDetails Details of the token that are stored off-chain\r\n     * @param _polymathRegistry Contract address of the polymath registry\r\n     */\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        uint256 _granularity,\r\n        string memory _tokenDetails,\r\n        address _polymathRegistry\r\n    )\r\n        public\r\n    {\r\n        //Set storage variables - NB implementation not yet set\r\n        require(_polymathRegistry != address(0), \"Invalid Address\");\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        polymathRegistry = IPolymathRegistry(_polymathRegistry);\r\n        tokenDetails = _tokenDetails;\r\n        granularity = _granularity;\r\n        _owner = msg.sender;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getterDelegate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCheckpointId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVersion\",\"type\":\"string\"},{\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataStore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polyToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"polymathRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVersion\",\"type\":\"string\"},{\"name\":\"_newImplementation\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moduleRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityTokenRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_granularity\",\"type\":\"uint256\"},{\"name\":\"_tokenDetails\",\"type\":\"string\"},{\"name\":\"_polymathRegistry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ProxyOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newVersion\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]", "ContractName": "SecurityTokenProxy", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000140000000000000000000000000dfabf3e4793cd30affb47ab6fa4cf4eef26bbc27000000000000000000000000000000000000000000000000000000000000000f56332e30205465737420546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000095633444f545a45524f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8621bb0f101cf3719369b604835a0300091bc8385f39e6d0263ebd6ba6b3a92d"}