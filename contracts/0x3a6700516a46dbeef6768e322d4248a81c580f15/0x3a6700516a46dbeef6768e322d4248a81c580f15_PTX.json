{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Manager is Ownable {\r\n    \r\n    address[] managers;\r\n\r\n    modifier onlyManagers() {\r\n        bool exist = false;\r\n        if(owner == msg.sender) {\r\n            exist = true;\r\n        } else {\r\n            uint index = 0;\r\n            (exist, index) = existManager(msg.sender);\r\n        }\r\n        require(exist);\r\n        _;\r\n    }\r\n    \r\n    function getManagers() public view returns (address[] memory){\r\n        return managers;\r\n    }\r\n    \r\n    function existManager(address _to) private view returns (bool, uint) {\r\n        for (uint i = 0 ; i < managers.length; i++) {\r\n            if (managers[i] == _to) {\r\n                return (true, i);\r\n            }\r\n        }\r\n        return (false, 0);\r\n    }\r\n    function addManager(address _to) onlyOwner public {\r\n        bool exist = false;\r\n        uint index = 0;\r\n        (exist, index) = existManager(_to);\r\n        \r\n        require(!exist);\r\n        \r\n        managers.push(_to);\r\n    }\r\n    function deleteManager(address _to) onlyOwner public {\r\n        bool exist = false;\r\n        uint index = 0;\r\n        (exist, index) = existManager(_to);\r\n        \r\n        require(exist);\r\n   \r\n        uint lastElementIndex = managers.length - 1; \r\n        managers[index] = managers[lastElementIndex];\r\n\r\n        delete managers[managers.length - 1];\r\n        managers.length--;\r\n    }\r\n\r\n}\r\n\r\ncontract Pausable is Manager {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() onlyManagers whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause() onlyManagers whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\ncontract ProtectAddress is Ownable {\r\n    \r\n    address[] protect;\r\n\r\n\r\n    function getProtect() public view returns (address[] memory){\r\n        return protect;\r\n    }\r\n    function isProtect(address _to) public view returns (bool) {\r\n        for (uint i = 0 ; i < protect.length; i++) {\r\n            if (protect[i] == _to) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function isProtectIndex(address _to) internal view returns (bool, uint) {\r\n        for (uint i = 0 ; i < protect.length; i++) {\r\n            if (protect[i] == _to) {\r\n                return (true, i);\r\n            }\r\n        }\r\n        return (false, 0);\r\n    }\r\n    function addProtect(address _to) onlyOwner public {\r\n        bool exist = false;\r\n        uint index = 0;\r\n        (exist, index) = isProtectIndex(_to);\r\n        \r\n        require(!exist);\r\n        \r\n        protect.push(_to);\r\n    }\r\n    function deleteProtect(address _to) onlyOwner public {\r\n        bool exist = false;\r\n        uint index = 0;\r\n        (exist, index) = isProtectIndex(_to);\r\n        \r\n        require(exist);\r\n   \r\n        uint lastElementIndex = protect.length - 1; \r\n        protect[index] = protect[lastElementIndex];\r\n\r\n        delete protect[protect.length - 1];\r\n        protect.length--;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Token is ERC20, Pausable, ProtectAddress {\r\n\r\n    struct sUserInfo {\r\n        uint256 balance;\r\n        bool lock;\r\n        mapping(address => uint256) allowed;\r\n    }\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n  \r\n\r\n    mapping(address => sUserInfo) user;\r\n\r\n    event Mint(uint256 value);\r\n    event Burn(uint256 value);\r\n\r\n   \r\n    \r\n    function () public payable {\r\n        revert();\r\n    }\r\n    \r\n    function validTransfer(address _from, address _to, uint256 _value, bool _lockCheck) internal view returns (bool) {\r\n        require(_to != address(this));\r\n        require(_to != address(0));\r\n        require(user[_from].balance >= _value);\r\n        if(_lockCheck) {\r\n            require(user[_from].lock == false);\r\n        }\r\n    }\r\n\r\n    function lock(address _owner) public onlyManagers returns (bool) {\r\n        require(user[_owner].lock == false);\r\n        require(!isProtect(_owner));\r\n        \r\n        user[_owner].lock = true;\r\n        return true;\r\n    }\r\n    function unlock(address _owner) public onlyManagers returns (bool) {\r\n        require(user[_owner].lock == true);\r\n        user[_owner].lock = false;\r\n       return true;\r\n    }\r\n \r\n    function burn(uint256 _value) public onlyOwner returns (bool) {\r\n        require(_value <= user[msg.sender].balance);\r\n        user[msg.sender].balance = user[msg.sender].balance.sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(_value);\r\n        return true;\r\n    }\r\n   \r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(_value == 0 || user[msg.sender].allowed[_spender] == 0); \r\n        user[msg.sender].allowed[_spender] = _value; \r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        validTransfer(_from, _to, _value, true);\r\n        require(_value <=  user[_from].allowed[msg.sender]);\r\n\r\n        user[_from].balance = user[_from].balance.sub(_value);\r\n        user[_to].balance = user[_to].balance.add(_value);\r\n\r\n        user[_from].allowed[msg.sender] = user[_from].allowed[msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        validTransfer(msg.sender, _to, _value, true);\r\n\r\n        user[msg.sender].balance = user[msg.sender].balance.sub(_value);\r\n        user[_to].balance = user[_to].balance.add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return user[_owner].balance;\r\n    }\r\n    function lockState(address _owner) public view returns (bool) {\r\n        return user[_owner].lock;\r\n    }\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return user[_owner].allowed[_spender];\r\n    }\r\n    \r\n}\r\n\r\ncontract LockBalance is Manager {\r\n    \r\n    enum eLockType {None, Individual, GroupA, GroupB}\r\n    struct sGroupLockDate {\r\n        uint256[] lockTime;\r\n        uint256[] lockPercent;\r\n    }\r\n    struct sLockInfo {\r\n        uint256[] lockType;\r\n        uint256[] lockBalanceStandard;\r\n        uint256[] startTime;\r\n        uint256[] endTime;\r\n    }\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    mapping(uint => sGroupLockDate) groupLockDate;\r\n    \r\n    mapping(address => sLockInfo) lockUser;\r\n\r\n    event Lock(address indexed from, uint256 value, uint256 endTime);\r\n    \r\n    function setLockUser(address _to, eLockType _lockType, uint256 _value, uint256 _endTime) internal {\r\n        require(_endTime > now); \r\n        require(_value > 0); \r\n        lockUser[_to].lockType.push(uint256(_lockType));\r\n        lockUser[_to].lockBalanceStandard.push(_value);\r\n        lockUser[_to].startTime.push(now);\r\n        lockUser[_to].endTime.push(_endTime);\r\n\r\n        emit Lock(_to, _value, _endTime);\r\n    }\r\n\r\n    function lockBalanceGroup(address _owner, uint _index) internal view returns (uint256) {\r\n        uint256 percent = 0;\r\n        uint256 key = uint256(lockUser[_owner].lockType[_index]);\r\n\r\n        uint256 time = 99999999999;\r\n        for(uint256 i = 0 ; i < groupLockDate[key].lockTime.length; i++) {\r\n            if(now < groupLockDate[key].lockTime[i]) {\r\n                if(groupLockDate[key].lockTime[i] < time) {\r\n                    time = groupLockDate[key].lockTime[i];\r\n                    percent = groupLockDate[key].lockPercent[i];    \r\n                }\r\n            }\r\n        }\r\n        \r\n        if(percent == 0){\r\n            return 0;\r\n        } else {\r\n            return lockUser[_owner].lockBalanceStandard[_index].div(100).mul(uint256(percent));\r\n        }\r\n    }\r\n\r\n    function lockBalanceIndividual(address _owner, uint _index) internal view returns (uint256) {\r\n        if(now < lockUser[_owner].endTime[_index]) {\r\n            return lockUser[_owner].lockBalanceStandard[_index];\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n        \r\n    function addLockDate(eLockType _lockType, uint256 _second, uint256 _percent) onlyManagers public {\r\n        sGroupLockDate storage lockInfo = groupLockDate[uint256(_lockType)];\r\n        bool isExists = false;\r\n        for(uint256 i = 0; i < lockInfo.lockTime.length; i++) {\r\n            if(lockInfo.lockTime[i] == _second) {\r\n                revert();\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if(isExists) {\r\n           revert();\r\n        } else {\r\n            lockInfo.lockTime.push(_second);\r\n            lockInfo.lockPercent.push(_percent);\r\n        }\r\n    }\r\n    \r\n    function deleteLockDate(eLockType _lockType, uint256 _lockTime) onlyManagers public {\r\n        sGroupLockDate storage lockDate = groupLockDate[uint256(_lockType)];\r\n        \r\n        bool isExists = false;\r\n        uint256 index = 0;\r\n        for(uint256 i = 0; i < lockDate.lockTime.length; i++) {\r\n            if(lockDate.lockTime[i] == _lockTime) {\r\n                isExists = true;\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if(isExists) {\r\n            for(uint256 k = index; k < lockDate.lockTime.length - 1; k++){\r\n                lockDate.lockTime[k] = lockDate.lockTime[k + 1];\r\n                lockDate.lockPercent[k] = lockDate.lockPercent[k + 1];\r\n            }\r\n            delete lockDate.lockTime[lockDate.lockTime.length - 1];\r\n            lockDate.lockTime.length--;\r\n            delete lockDate.lockPercent[lockDate.lockPercent.length - 1];\r\n            lockDate.lockPercent.length--;\r\n        } else {\r\n            revert();\r\n        }\r\n        \r\n    }\r\n    function deleteLockUserInfo(address _to, eLockType _lockType, uint256 _startTime, uint256 _endTime) onlyManagers public {\r\n\r\n        bool isExists = false;\r\n        uint256 index = 0;\r\n        for(uint256 i = 0; i < lockUser[_to].lockType.length; i++) {\r\n            if(lockUser[_to].lockType[i] == uint256(_lockType) &&\r\n                lockUser[_to].startTime[i] == _startTime &&\r\n                lockUser[_to].endTime[i] == _endTime) {\r\n                isExists = true;\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        require(isExists);\r\n\r\n        for(uint256 k = index; k < lockUser[_to].lockType.length - 1; k++){\r\n            lockUser[_to].lockType[k] = lockUser[_to].lockType[k + 1];\r\n            lockUser[_to].lockBalanceStandard[k] = lockUser[_to].lockBalanceStandard[k + 1];\r\n            lockUser[_to].startTime[k] = lockUser[_to].startTime[k + 1];\r\n            lockUser[_to].endTime[k] = lockUser[_to].endTime[k + 1];\r\n        }\r\n        \r\n        delete lockUser[_to].lockType[lockUser[_to].lockType.length - 1];\r\n        lockUser[_to].lockType.length--;\r\n        \r\n        delete lockUser[_to].lockBalanceStandard[lockUser[_to].lockBalanceStandard.length - 1];\r\n        lockUser[_to].lockBalanceStandard.length--;\r\n        \r\n        delete lockUser[_to].startTime[lockUser[_to].startTime.length - 1];\r\n        lockUser[_to].startTime.length--;\r\n        \r\n        delete lockUser[_to].endTime[lockUser[_to].endTime.length - 1];\r\n        lockUser[_to].endTime.length--;\r\n        \r\n    }\r\n\r\n    function lockTypeInfoGroup(eLockType _type) public view returns (uint256[], uint256[]) {\r\n        uint256 key = uint256(_type);\r\n        return (groupLockDate[key].lockTime, groupLockDate[key].lockPercent);\r\n    }\r\n    function lockUserInfo(address _owner) public view returns (uint256[], uint256[], uint256[], uint256[], uint256[]) {\r\n        \r\n        uint256[] memory balance = new uint256[](lockUser[_owner].lockType.length);\r\n        for(uint256 i = 0; i < lockUser[_owner].lockType.length; i++){\r\n            if(lockUser[_owner].lockType[i] == uint256(eLockType.Individual)) {\r\n                balance[i] = balance[i].add(lockBalanceIndividual(_owner, i));\r\n            } else if(lockUser[_owner].lockType[i] != uint256(eLockType.None)) {\r\n                balance[i] = balance[i].add(lockBalanceGroup(_owner, i));\r\n            }\r\n        }\r\n        \r\n        return (lockUser[_owner].lockType,\r\n        lockUser[_owner].lockBalanceStandard,\r\n        balance,\r\n        lockUser[_owner].startTime,\r\n        lockUser[_owner].endTime);\r\n    }\r\n    function lockBalanceAll(address _owner) public view returns (uint256) {\r\n        uint256 lockBalance = 0;\r\n        for(uint256 i = 0; i < lockUser[_owner].lockType.length; i++){\r\n            if(lockUser[_owner].lockType[i] == uint256(eLockType.Individual)) {\r\n                lockBalance = lockBalance.add(lockBalanceIndividual(_owner, i));\r\n            } else if(lockUser[_owner].lockType[i] != uint256(eLockType.None)) {\r\n                lockBalance = lockBalance.add(lockBalanceGroup(_owner, i));\r\n            }\r\n        }\r\n        return lockBalance;\r\n    }\r\n    \r\n}\r\n\r\ncontract PTX is Token, LockBalance {\r\n\r\n    constructor() public {\r\n        name = \"Pass token\";\r\n        symbol = \"PTX\";\r\n        decimals = 18;\r\n        uint256 initialSupply = 1000000000;//1,000,000,000\r\n        totalSupply = initialSupply * 10 ** uint(decimals);\r\n        user[owner].balance = totalSupply;\r\n        emit Transfer(address(0), owner, totalSupply);\r\n    }\r\n\r\n\r\n    bool public finishRestore = false; \r\n    \r\n    function isFinishRestore() public onlyOwner { \r\n        finishRestore = true; \r\n    }     \r\n  \r\n    function validTransfer(address _from, address _to, uint256 _value, bool _lockCheck) internal view returns (bool) {\r\n        super.validTransfer(_from, _to, _value, _lockCheck);\r\n        if(_lockCheck) {\r\n            require(_value <= useBalanceOf(_from));\r\n        }\r\n    }\r\n\r\n    function setLockUsers(eLockType _type, address[] _to, uint256[] _value, uint256[] _endTime) onlyManagers public {  \r\n        require(_to.length > 0);\r\n        require(_to.length == _value.length);\r\n        require(_to.length == _endTime.length);\r\n        require(_type != eLockType.None);\r\n        \r\n        \r\n        for(uint256 i = 0; i < _to.length; i++){\r\n            require(!isProtect(_to[i]));\r\n            setLockUser(_to[i], _type, _value[i], _endTime[i]);\r\n        }\r\n    }\r\n    \r\n    function transferRestore(address _from, address _to, uint256 _value) public onlyOwner returns (bool) {\r\n        require(!finishRestore);\r\n        require(!isProtect(_from));\r\n        \r\n        require(_to != address(this));\r\n        require(_to != address(0));\r\n        require(user[_from].balance >= _value);\r\n        \r\n        user[_from].balance = user[_from].balance.sub(_value);\r\n        user[_to].balance = user[_to].balance.add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    function useBalanceOf(address _owner) public view returns (uint256) {\r\n        return balanceOf(_owner).sub(lockBalanceAll(_owner));\r\n    }\r\n  \r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockBalanceAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockType\",\"type\":\"uint8\"},{\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"deleteLockDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"addProtect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"isFinishRestore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferRestore\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProtect\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_lockType\",\"type\":\"uint8\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"deleteLockUserInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"useBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"deleteProtect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"lockTypeInfoGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishRestore\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockState\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"deleteManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"},{\"name\":\"_endTime\",\"type\":\"uint256[]\"}],\"name\":\"setLockUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockType\",\"type\":\"uint8\"},{\"name\":\"_second\",\"type\":\"uint256\"},{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"addLockDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManagers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockUserInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"isProtect\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "PTX", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://b88bfe271524ebf8d6ea0fcf19c717e02acd957b3e699872b779bc672dca215e"}