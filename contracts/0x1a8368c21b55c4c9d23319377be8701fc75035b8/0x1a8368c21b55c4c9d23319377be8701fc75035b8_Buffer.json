{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Buffer.sol\": {\r\n      \"content\": \"/////////////////////////////////////////////////////////////////////////////////////\\n//\\n//  SPDX-License-Identifier: MIT\\n//\\n//  \u2588\u2588\u2588\u2001   \u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//  \u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2001 \u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2001\\n//  \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2001 \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2001   \u2001\u2588\u2588\u2588\u2588\u2001\u2001 \u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2588\u2588\u2588\u2588\u2588\u2001 \\n//  \u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001    \u2001\u2588\u2588\u2001\u2001  \u2588\u2588\u2001\u2001\u2001\u2001\u2001 \u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2001 \u2588\u2588\u2001\u2001\u2001\u2001 \\n//  \u2588\u2588\u2001 \u2001\u2001\u2001 \u2588\u2588\u2001\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2588\u2588\u2001 \u2001\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001   \u2588\u2588\u2001   \u2588\u2588\u2001     \u2588\u2588\u2001\u2588\u2588\u2001     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n//\\n//  \u2588\u2588\u2588\u2588\u2588\u2588\u2001 \u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001 \\n//  \u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2001\u2001\u2001\u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2001\\n//  \u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2588\u2588\u2588\u2001  \u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\\n//  \u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2001\u2588\u2588\u2001   \u2588\u2588\u2001\u2588\u2588\u2001\u2001\u2001\u2001  \u2588\u2588\u2001\u2001\u2001\u2001  \u2588\u2588\u2001\u2001\u2001\u2001  \u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2001\\n//  \u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2001\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2001\u2588\u2588\u2001     \u2588\u2588\u2001     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2001\u2588\u2588\u2001  \u2588\u2588\u2001\\n//\\n//  https://moneypipe.xyz\\n//\\n/////////////////////////////////////////////////////////////////////////////////////\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\ncontract Buffer is Initializable {\\n  mapping (address => uint) public withdrawn;\\n  bytes32 public root;\\n  uint public totalReceived;\\n  function initialize(bytes32 _root) initializer public {\\n    root = _root;\\n  }\\n  receive () external payable {\\n    totalReceived += msg.value;\\n  }\\n  function withdraw(address account, uint256 amount, bytes32[] calldata proof) external payable {\\n    // 1. verify proof\\n    bytes32 hash = keccak256(abi.encodePacked(account, amount));\\n    for (uint256 i = 0; i < proof.length; i++) {\\n      bytes32 proofElement = proof[i];\\n      if (hash <= proofElement) {\\n        hash = _hash(hash, proofElement);\\n      } else {\\n        hash = _hash(proofElement, hash);\\n      }\\n    }\\n    require(hash == root, \\\"1\\\");\\n    // 2. calculate amount to withdraw based on \\\"amount\\\" (out of 1,000,000,000,000)\\n    uint payment = totalReceived * amount / 10**12 - withdrawn[account];\\n    withdrawn[account] += payment;\\n    _transfer(account, payment);\\n  }\\n  // memory optimization from: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3039\\n  function _hash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n    assembly {\\n      mstore(0x00, a)\\n      mstore(0x20, b)\\n      value := keccak256(0x00, 0x40)\\n    }\\n  }\\n  // adopted from https://github.com/lexDAO/Kali/blob/main/contracts/libraries/SafeTransferLib.sol\\n  error TransferFailed();\\n  function _transfer(address to, uint256 amount) internal {\\n    bool callStatus;\\n    assembly {\\n      callStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n    }\\n    if (!callStatus) revert TransferFailed();\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Buffer", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}