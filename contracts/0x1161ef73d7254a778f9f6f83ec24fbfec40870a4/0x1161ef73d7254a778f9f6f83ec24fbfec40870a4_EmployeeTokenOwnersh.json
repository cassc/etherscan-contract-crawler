{"SourceCode": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.7.0;\r\n// File: contracts/Ownable.sol\r\n\r\n\r\n\r\n/// @title Ownable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev The Ownable contract has an owner address, and provides basic\r\n///      authorization control functions, this simplifies the implementation of\r\n///      \"user permissions\".\r\ncontract Ownable\r\n{\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract\r\n    ///      to the sender.\r\n    constructor()\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the owner.\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a\r\n    ///      new owner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0), \"ZERO_ADDRESS\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership()\r\n        public\r\n        onlyOwner\r\n    {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/Claimable.sol\r\n\r\n\r\n\r\n\r\n/// @title Claimable\r\n/// @author Brecht Devos - <brecht@loopring.org>\r\n/// @dev Extension for the Ownable contract, where the ownership needs\r\n///      to be claimed. This allows the new owner to accept the transfer.\r\ncontract Claimable is Ownable\r\n{\r\n    address public pendingOwner;\r\n\r\n    /// @dev Modifier throws if called by any account other than the pendingOwner.\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner, \"UNAUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to set the pendingOwner address.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(\r\n        address newOwner\r\n        )\r\n        public\r\n        override\r\n        onlyOwner\r\n    {\r\n        require(newOwner != address(0) && newOwner != owner, \"INVALID_ADDRESS\");\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /// @dev Allows the pendingOwner address to finalize the transfer.\r\n    function claimOwnership()\r\n        public\r\n        onlyPendingOwner\r\n    {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n\r\n\r\n/// @title ERC20 Token Interface\r\n/// @dev see https://github.com/ethereum/EIPs/issues/20\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nabstract contract ERC20\r\n{\r\n    function totalSupply()\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint);\r\n\r\n    function balanceOf(\r\n        address who\r\n        )\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n        )\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint);\r\n\r\n    function transfer(\r\n        address to,\r\n        uint value\r\n        )\r\n        public\r\n        virtual\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint    value\r\n        )\r\n        public\r\n        virtual\r\n        returns (bool);\r\n\r\n    function approve(\r\n        address spender,\r\n        uint    value\r\n        )\r\n        public\r\n        virtual\r\n        returns (bool);\r\n}\r\n\r\n// File: contracts/MathUint.sol\r\n\r\n\r\n\r\n/// @title Utility Functions for uint\r\n/// @author Daniel Wang - <daniel@loopring.org>\r\nlibrary MathUint\r\n{\r\n    function mul(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"MUL_OVERFLOW\");\r\n    }\r\n\r\n    function sub(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint)\r\n    {\r\n        require(b <= a, \"SUB_UNDERFLOW\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(\r\n        uint a,\r\n        uint b\r\n        )\r\n        internal\r\n        pure\r\n        returns (uint c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"ADD_OVERFLOW\");\r\n    }\r\n}\r\n\r\n// File: contracts/BaseTokenOwnershipPlan.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title EmployeeTokenOwnershipPlan\r\n/// @author Freeman Zhong - <kongliang@loopring.org>\r\n/// added at 2021-02-19\r\nabstract contract BaseTokenOwnershipPlan is Claimable\r\n{\r\n    using MathUint for uint;\r\n\r\n    struct Record {\r\n        uint lastWithdrawTime;\r\n        uint rewarded;\r\n        uint withdrawn;\r\n    }\r\n\r\n    uint    public constant vestPeriod = 2 * 365 days;\r\n    address public constant lrcAddress = 0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD;\r\n\r\n    uint public totalReward;\r\n    uint public vestStart;\r\n    mapping (address => Record) public records;\r\n\r\n    event Withdrawal(\r\n        address indexed transactor,\r\n        address indexed member,\r\n        uint            amount\r\n    );\r\n    event MemberAddressChanged(\r\n        address oldAddress,\r\n        address newAddress\r\n    );\r\n\r\n    function withdrawFor(address recipient)\r\n        external\r\n    {\r\n        _withdraw(recipient);\r\n    }\r\n\r\n    function updateRecipient(address oldRecipient, address newRecipient)\r\n        external\r\n    {\r\n        require(canChangeAddressFor(oldRecipient), \"UNAUTHORIZED\");\r\n        require(newRecipient != address(0), \"INVALID_ADDRESS\");\r\n        require(records[newRecipient].rewarded == 0, \"INVALID_NEW_RECIPIENT\");\r\n\r\n        Record storage r = records[oldRecipient];\r\n        require(r.rewarded > 0, \"INVALID_OLD_RECIPIENT\");\r\n\r\n        records[newRecipient] = r;\r\n        delete records[oldRecipient];\r\n        emit MemberAddressChanged(oldRecipient, newRecipient);\r\n    }\r\n\r\n    function vested(address recipient)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        if (block.timestamp.sub(vestStart) < vestPeriod) {\r\n            return records[recipient].rewarded.mul(block.timestamp.sub(vestStart)) / vestPeriod;\r\n        } else {\r\n            return records[recipient].rewarded;\r\n        }\r\n    }\r\n\r\n    function withdrawable(address recipient)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return vested(recipient).sub(records[recipient].withdrawn);\r\n    }\r\n\r\n    function _withdraw(address recipient)\r\n        internal\r\n    {\r\n        uint amount = withdrawable(recipient);\r\n        require(amount > 0, \"INVALID_AMOUNT\");\r\n\r\n        Record storage r = records[recipient];\r\n        r.lastWithdrawTime = block.timestamp;\r\n        r.withdrawn = r.withdrawn.add(amount);\r\n\r\n        require(ERC20(lrcAddress).transfer(recipient, amount), \"transfer failed\");\r\n\r\n        emit Withdrawal(msg.sender, recipient, amount);\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.value == 0, \"INVALID_VALUE\");\r\n        _withdraw(msg.sender);\r\n    }\r\n\r\n    function collect()\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(block.timestamp > vestStart + vestPeriod + 60 days, \"TOO_EARLY\");\r\n        uint amount = ERC20(lrcAddress).balanceOf(address(this));\r\n        require(ERC20(lrcAddress).transfer(msg.sender, amount), \"transfer failed\");\r\n    }\r\n\r\n    function canChangeAddressFor(address who)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (bool);\r\n}\r\n\r\n// File: contracts/EmployeeTokenOwnershipPlan2020.sol\r\n\r\n\r\n\r\n\r\n/// @title EmployeeTokenOwnershipPlan\r\n/// @author Freeman Zhong - <kongliang@loopring.org>\r\n/// added at 2021-02-17\r\ncontract EmployeeTokenOwnershipPlan2020 is BaseTokenOwnershipPlan\r\n{\r\n    using MathUint for uint;\r\n\r\n    constructor()\r\n    {\r\n        owner = 0x96f16FdB8Cd37C02DEeb7025C1C7618E1bB34d97;\r\n\r\n        address payable[45] memory _members = [\r\n            0xFF6f7B2afdd33671503705098dd3c4c26a0F0705,\r\n            0xF5E2359644f61cDeEcFbD068294EB0d2ff7Dc706,\r\n            0xf493af7DFd0e47869Aac4770B2221a259CA77Ac8,\r\n            0xf21e66578372Ea62BCb0D1cDfC070f231CF56898,\r\n            0xEBE85822e75D2B4716e228818B54154E4AfFD202,\r\n            0xeB4c50dF06cEb2Ea700ea127eA589A99a3aAe1Ec,\r\n            0xe0807d8E14F2BCbF3Cc58637259CCF3fDd1D3ce5,\r\n            0xDB5C4078eC50Ad4Cdc47F4597a377528B1d7bcdB,\r\n            0xD984D096B4bF9DCF5fd75D9cBaf052D00EBe74c4,\r\n            0xd3725C997B580E36707f73880aC006B6757b5009,\r\n            0xBe4C1cb10C2Be76798c4186ADbbC34356b358b52,\r\n            0xbd860737F32b7a43e197370606f7eb32c5caD347,\r\n            0xBc5F996840118B580C4452440351b601862c5672,\r\n            0xad05c57e06a80b8EC92383b3e10Fea0E2b4e571D,\r\n            0xaBad5427278F99c9b9393Cc46FDb0Cb4CB6C33f5,\r\n            0xa817c7a0690F17029b756b2EedAA089E0C94c900,\r\n            0xa26cFCeCb07e401547be07eEe26E6FD608f77d1a,\r\n            0x933650184994CFce9D64A9F3Ed14F1Fd017fF89A,\r\n            0x87adb1BEa935649E607f615F41ae8f4cA96566fa,\r\n            0x813C12326A0E8C2aC91d584f025E50072CDb4467,\r\n            0x7F81D533B2ea31BE2591d89394ADD9A12499ff17,\r\n            0x7F6Dd0c1BeB26CFf8ABA5B020E78D7C0Ed54B8Cc,\r\n            0x7b3B1F252169Ff83E3E91106230c36bE672aFdE3,\r\n            0x7809D08edBBBC401c430e5D3862a1Fdfcb8094A2,\r\n            0x7414eA41bd1844f61e8990b209a1Dc301489baa9,\r\n            0x7154a02BA6eEaB9300D056e25f3EEA3481680f87,\r\n            0x6D0228303D0608CACc8a262deA95932DCAc12c8D,\r\n            0x6b1029C9AE8Aa5EEA9e045E8ba3C93d380D5BDDa,\r\n            0x650EACf9AD1576680f1af6eC6cC598A484d796Ad,\r\n            0x5a03a928b332EC269f68684A8e9c1881b4Da5f3d,\r\n            0x55634e271BCa62dDFb9B5f7eae19f3Ae94Fb96b7,\r\n            0x4c381276F4847255C675Eab90c3409FA2fce68bC,\r\n            0x4bA63ac57b45087d03Abfd8E98987705Fa56B1ab,\r\n            0x49c268e3F2119fCf71f70dF987432689dd4145Ad,\r\n            0x41cDd7034AD6b2a5d24397189802048E97b6532D,\r\n            0x33CDbeB3e060bf6973e28492BE3D469C05D32786,\r\n            0x2a791a837D70E6D6e35073Dd61a9Af878Ac231A5,\r\n            0x24C08921717bf5C0029e2b8013B70f1D203cCDac,\r\n            0x2234C96681E9533FDfD122baCBBc634EfbafA0F0,\r\n            0x21870650F40Fe8249DECc96525249a43829E9A32,\r\n            0x1F28F10176F89F4E9985873B84d14e75751BB3D1,\r\n            0x11a8632b5089c6a061760F0b03285e2cC1388E36,\r\n            0x10Bd72a6AfbF8860ec90f7aeCdB8e937a758f351,\r\n            0x07A7191de1BA70dBe875F12e744B020416a5712b,\r\n            0x067eceAd820BC54805A2412B06946b184d11CB4b\r\n        ];\r\n\r\n        uint80[45] memory _amounts = [\r\n            187520 ether,\r\n            500053 ether,\r\n            384004 ether,\r\n            538180 ether,\r\n            340060 ether,\r\n            433972 ether,\r\n            530065 ether,\r\n            482910 ether,\r\n            308310 ether,\r\n            398740 ether,\r\n            120010 ether,\r\n            750079 ether,\r\n            31254 ether,\r\n            667795 ether,\r\n            824272 ether,\r\n            750079 ether,\r\n            435961 ether,\r\n            459366 ether,\r\n            750083 ether,\r\n            453078 ether,\r\n            775175 ether,\r\n            500972 ether,\r\n            375040 ether,\r\n            425292 ether,\r\n            692576 ether,\r\n            180661 ether,\r\n            797479 ether,\r\n            517196 ether,\r\n            475260 ether,\r\n            730172 ether,\r\n            549381 ether,\r\n            150834 ether,\r\n            501058 ether,\r\n            1076356 ether,\r\n            145641 ether,\r\n            519363 ether,\r\n            573806 ether,\r\n            162000 ether,\r\n            539577 ether,\r\n            330598 ether,\r\n            470891 ether,\r\n            398740 ether,\r\n            561055 ether,\r\n            221724 ether,\r\n            485991 ether\r\n        ];\r\n\r\n        uint _totalReward = 21502629 ether;\r\n        vestStart = block.timestamp;\r\n\r\n        for (uint i = 0; i < _members.length; i++) {\r\n            require(records[_members[i]].rewarded == 0, \"DUPLICATED_MEMBER\");\r\n\r\n            Record memory record = Record(block.timestamp, _amounts[i], 0);\r\n            records[_members[i]] = record;\r\n            totalReward = totalReward.add(_amounts[i]);\r\n        }\r\n        require(_totalReward == totalReward, \"VALUE_MISMATCH\");\r\n    }\r\n\r\n    function canChangeAddressFor(address who)\r\n        internal\r\n        view\r\n        override\r\n        returns (bool) {\r\n        return msg.sender == who;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"MemberAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transactor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lrcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewarded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"updateRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"vested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EmployeeTokenOwnershipPlan2020", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7389d1db5f3b8b4e2a6781eba123122588dbcca55a6b8bc067a441b703b6e035"}