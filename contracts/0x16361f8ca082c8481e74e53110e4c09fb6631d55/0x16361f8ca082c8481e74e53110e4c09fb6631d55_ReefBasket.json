{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/Babylonian.sol\r\n\r\n// import \"@uniswap/lib/contracts/libraries/Babylonian.sol\";\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary Babylonian {\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n        // else z = 0\r\n    }\r\n}\r\n\r\n// File: interfaces/IUniswapV2Router.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n    function approve(address guy, uint wad) external returns (bool);\r\n}\r\n\r\n// File: interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\n// File: interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IUniswapV2Pair {\r\n    function token0() external pure returns (address);\r\n\r\n    function token1() external pure returns (address);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        );\r\n}\r\n\r\n// File: interfaces/TransferHelper.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/ReefUniswap.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary ReefUniswap {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    address public constant uniswapV2RouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private constant wethTokenAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    IUniswapV2Router private constant uniswapV2Router = IUniswapV2Router(\r\n        uniswapV2RouterAddress\r\n    );\r\n\r\n    IUniswapV2Factory private constant UniSwapV2FactoryAddress = IUniswapV2Factory(\r\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n    );\r\n\r\n\r\n    function _investIntoUniswapPool(\r\n        address _FromTokenContractAddress,\r\n        address _ToUnipoolToken0,\r\n        address _ToUnipoolToken1,\r\n        address _toAccount,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        uint256 token0Bought;\r\n        uint256 token1Bought;\r\n\r\n        if (canSwapFromV2(_ToUnipoolToken0, _ToUnipoolToken1)) {\r\n            (token0Bought, token1Bought) = exchangeTokensV2(\r\n                _FromTokenContractAddress,\r\n                _ToUnipoolToken0,\r\n                _ToUnipoolToken1,\r\n                _amount\r\n            );\r\n        }\r\n\r\n        require(token0Bought > 0 && token1Bought > 0, \"Could not exchange\");\r\n\r\n        TransferHelper.safeApprove(\r\n            _ToUnipoolToken0,\r\n            address(uniswapV2Router),\r\n            token0Bought\r\n        );\r\n\r\n        TransferHelper.safeApprove(\r\n            _ToUnipoolToken1,\r\n            address(uniswapV2Router),\r\n            token1Bought\r\n        );\r\n\r\n        (uint256 amountA, uint256 amountB, uint256 LP) = uniswapV2Router\r\n            .addLiquidity(\r\n            _ToUnipoolToken0,\r\n            _ToUnipoolToken1,\r\n            token0Bought,\r\n            token1Bought,\r\n            1,\r\n            1,\r\n            _toAccount,\r\n            now + 60\r\n        );\r\n\r\n        uint256 residue;\r\n        if (SafeMath.sub(token0Bought, amountA) > 0) {\r\n            if (canSwapFromV2(_ToUnipoolToken0, _FromTokenContractAddress)) {\r\n                residue = swapFromV2(\r\n                    _ToUnipoolToken0,\r\n                    _FromTokenContractAddress,\r\n                    SafeMath.sub(token0Bought, amountA)\r\n                );\r\n            } else {\r\n                TransferHelper.safeTransfer(\r\n                    _ToUnipoolToken0,\r\n                    msg.sender,\r\n                    SafeMath.sub(token0Bought, amountA)\r\n                );\r\n            }\r\n        }\r\n\r\n        if (SafeMath.sub(token1Bought, amountB) > 0) {\r\n            if (canSwapFromV2(_ToUnipoolToken1, _FromTokenContractAddress)) {\r\n                residue += swapFromV2(\r\n                    _ToUnipoolToken1,\r\n                    _FromTokenContractAddress,\r\n                    SafeMath.sub(token1Bought, amountB)\r\n                );\r\n            } else {\r\n                TransferHelper.safeTransfer(\r\n                    _ToUnipoolToken1,\r\n                    msg.sender,\r\n                    SafeMath.sub(token1Bought, amountB)\r\n                );\r\n            }\r\n        }\r\n\r\n        if (residue > 0) {\r\n            TransferHelper.safeTransfer(\r\n                _FromTokenContractAddress,\r\n                msg.sender,\r\n                residue\r\n            );\r\n        }\r\n\r\n        return LP;\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to zapout of given Uniswap pair in the bounded tokens\r\n    @param _token0 Token 0 address\r\n    @param _token1 Token 1 address\r\n    @param _IncomingLP The amount of LP\r\n    @return amountA the amount of first token received after zapout\r\n    @return amountB the amount of second token received after zapout\r\n     */\r\n    function _disinvestFromUniswapPool(\r\n        address _ToTokenContractAddress,\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _IncomingLP\r\n    ) internal returns (uint256 amountA, uint256 amountB) {\r\n        address _FromUniPoolAddress = UniSwapV2FactoryAddress.getPair(\r\n            _token0,\r\n            _token1\r\n        );\r\n        IUniswapV2Pair pair = IUniswapV2Pair(_FromUniPoolAddress);\r\n        require(address(pair) != address(0), \"Error: Invalid Unipool Address\");\r\n\r\n        TransferHelper.safeApprove(\r\n            _FromUniPoolAddress,\r\n            address(uniswapV2Router),\r\n            _IncomingLP\r\n        );\r\n\r\n        if (_token0 == wethTokenAddress || _token1 == wethTokenAddress) {\r\n            address _token = _token0 == wethTokenAddress ? _token1 : _token0;\r\n            address _wethToken = _token0 != wethTokenAddress\r\n                ? _token1\r\n                : _token0;\r\n            (amountA, amountB) = uniswapV2Router.removeLiquidityETH(\r\n                _token,\r\n                _IncomingLP,\r\n                1,\r\n                1,\r\n                address(this),\r\n                now + 60\r\n            );\r\n\r\n            if (canSwapFromV2(_token1, _ToTokenContractAddress)) {\r\n                swapFromV2(_token, _ToTokenContractAddress, amountA);\r\n            } else {\r\n                TransferHelper.safeTransfer(_token, msg.sender, amountA);\r\n            }\r\n        } else {\r\n            (amountA, amountB) = uniswapV2Router.removeLiquidity(\r\n                _token0,\r\n                _token1,\r\n                _IncomingLP,\r\n                1,\r\n                1,\r\n                address(this),\r\n                now + 60\r\n            );\r\n\r\n            if (canSwapFromV2(_token0, _ToTokenContractAddress)) {\r\n                swapFromV2(_token0, _ToTokenContractAddress, amountA);\r\n            } else {\r\n                TransferHelper.safeTransfer(_token0, msg.sender, amountA);\r\n            }\r\n\r\n            if (canSwapFromV2(_token1, _ToTokenContractAddress)) {\r\n                swapFromV2(_token1, _ToTokenContractAddress, amountB);\r\n            } else {\r\n                TransferHelper.safeTransfer(_token1, msg.sender, amountB);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function exchangeTokensV2(\r\n        address _FromTokenContractAddress,\r\n        address _ToUnipoolToken0,\r\n        address _ToUnipoolToken1,\r\n        uint256 _amount\r\n    ) internal returns (uint256 token0Bought, uint256 token1Bought) {\r\n        IUniswapV2Pair pair = IUniswapV2Pair(\r\n            UniSwapV2FactoryAddress.getPair(_ToUnipoolToken0, _ToUnipoolToken1)\r\n        );\r\n        (uint256 res0, uint256 res1, ) = pair.getReserves();\r\n        if (\r\n            canSwapFromV2(_FromTokenContractAddress, _ToUnipoolToken0) &&\r\n            canSwapFromV2(_ToUnipoolToken0, _ToUnipoolToken1)\r\n        ) {\r\n            token0Bought = swapFromV2(\r\n                _FromTokenContractAddress,\r\n                _ToUnipoolToken0,\r\n                _amount\r\n            );\r\n            uint256 amountToSwap = calculateSwapInAmount(res0, token0Bought);\r\n            //if no reserve or a new pair is created\r\n            if (amountToSwap <= 0) amountToSwap = SafeMath.div(token0Bought, 2);\r\n            token1Bought = swapFromV2(\r\n                _ToUnipoolToken0,\r\n                _ToUnipoolToken1,\r\n                amountToSwap\r\n            );\r\n            token0Bought = SafeMath.sub(token0Bought, amountToSwap);\r\n        } else if (\r\n            canSwapFromV2(_FromTokenContractAddress, _ToUnipoolToken1) &&\r\n            canSwapFromV2(_ToUnipoolToken0, _ToUnipoolToken1)\r\n        ) {\r\n            token1Bought = swapFromV2(\r\n                _FromTokenContractAddress,\r\n                _ToUnipoolToken1,\r\n                _amount\r\n            );\r\n            uint256 amountToSwap = calculateSwapInAmount(res1, token1Bought);\r\n            //if no reserve or a new pair is created\r\n            if (amountToSwap <= 0) amountToSwap = SafeMath.div(token1Bought, 2);\r\n            token0Bought = swapFromV2(\r\n                _ToUnipoolToken1,\r\n                _ToUnipoolToken0,\r\n                amountToSwap\r\n            );\r\n            token1Bought = SafeMath.sub(token1Bought, amountToSwap);\r\n        }\r\n    }\r\n\r\n    function canSwapFromV2(address _fromToken, address _toToken)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _fromToken != address(0) || _toToken != address(0),\r\n            \"Invalid Exchange values\"\r\n        );\r\n\r\n        if (_fromToken == _toToken) return true;\r\n\r\n        if (_fromToken == address(0) || _fromToken == wethTokenAddress) {\r\n            if (_toToken == wethTokenAddress || _toToken == address(0))\r\n                return true;\r\n            IUniswapV2Pair pair = IUniswapV2Pair(\r\n                UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress)\r\n            );\r\n            if (_haveReserve(pair)) return true;\r\n        } else if (_toToken == address(0) || _toToken == wethTokenAddress) {\r\n            if (_fromToken == wethTokenAddress || _fromToken == address(0))\r\n                return true;\r\n            IUniswapV2Pair pair = IUniswapV2Pair(\r\n                UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress)\r\n            );\r\n            if (_haveReserve(pair)) return true;\r\n        } else {\r\n            IUniswapV2Pair pair1 = IUniswapV2Pair(\r\n                UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress)\r\n            );\r\n            IUniswapV2Pair pair2 = IUniswapV2Pair(\r\n                UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress)\r\n            );\r\n            IUniswapV2Pair pair3 = IUniswapV2Pair(\r\n                UniSwapV2FactoryAddress.getPair(_fromToken, _toToken)\r\n            );\r\n            if (_haveReserve(pair1) && _haveReserve(pair2)) return true;\r\n            if (_haveReserve(pair3)) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //checks if the UNI v2 contract have reserves to swap tokens\r\n    function _haveReserve(IUniswapV2Pair pair) internal view returns (bool) {\r\n        if (address(pair) != address(0)) {\r\n            (uint256 res0, uint256 res1, ) = pair.getReserves();\r\n            if (res0 > 0 && res1 > 0) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function calculateSwapInAmount(uint256 reserveIn, uint256 userIn)\r\n        public\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return\r\n            Babylonian\r\n                .sqrt(\r\n                reserveIn.mul(userIn.mul(3988000) + reserveIn.mul(3988009))\r\n            )\r\n                .sub(reserveIn.mul(1997)) / 1994;\r\n    }\r\n\r\n    //swaps _fromToken for _toToken\r\n    //for eth, address(0) otherwise ERC token address\r\n    function swapFromV2(\r\n        address _fromToken,\r\n        address _toToken,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        require(\r\n            _fromToken != address(0) || _toToken != address(0),\r\n            \"Invalid Exchange values\"\r\n        );\r\n        if (_fromToken == _toToken) return amount;\r\n\r\n        require(canSwapFromV2(_fromToken, _toToken), \"Cannot be exchanged\");\r\n        require(amount > 0, \"Invalid amount\");\r\n\r\n        if (_fromToken == address(0)) {\r\n            if (_toToken == wethTokenAddress) {\r\n                IWETH(wethTokenAddress).deposit{value: amount}();\r\n                return amount;\r\n            }\r\n            address[] memory path = new address[](2);\r\n            path[0] = wethTokenAddress;\r\n            path[1] = _toToken;\r\n\r\n            uint256[] memory amounts = uniswapV2Router.swapExactETHForTokens{\r\n                value: amount\r\n            }(0, path, address(this), now + 180);\r\n            return amounts[1];\r\n        } else if (_toToken == address(0)) {\r\n            if (_fromToken == wethTokenAddress) {\r\n                IWETH(wethTokenAddress).withdraw(amount);\r\n                return amount;\r\n            }\r\n            address[] memory path = new address[](2);\r\n            TransferHelper.safeApprove(\r\n                _fromToken,\r\n                address(uniswapV2Router),\r\n                amount\r\n            );\r\n            path[0] = _fromToken;\r\n            path[1] = wethTokenAddress;\r\n\r\n            uint256[] memory amounts = uniswapV2Router.swapExactTokensForETH(\r\n                amount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                now + 180\r\n            );\r\n            return amounts[1];\r\n        } else {\r\n            TransferHelper.safeApprove(\r\n                _fromToken,\r\n                address(uniswapV2Router),\r\n                amount\r\n            );\r\n            uint256 returnedAmount = _swapTokenToTokenV2(\r\n                _fromToken,\r\n                _toToken,\r\n                amount\r\n            );\r\n            require(returnedAmount > 0, \"Error in swap\");\r\n            return returnedAmount;\r\n        }\r\n    }\r\n\r\n    //swaps 2 ERC tokens (UniV2)\r\n    function _swapTokenToTokenV2(\r\n        address _fromToken,\r\n        address _toToken,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        IUniswapV2Pair pair1 = IUniswapV2Pair(\r\n            UniSwapV2FactoryAddress.getPair(_fromToken, wethTokenAddress)\r\n        );\r\n        IUniswapV2Pair pair2 = IUniswapV2Pair(\r\n            UniSwapV2FactoryAddress.getPair(_toToken, wethTokenAddress)\r\n        );\r\n        IUniswapV2Pair pair3 = IUniswapV2Pair(\r\n            UniSwapV2FactoryAddress.getPair(_fromToken, _toToken)\r\n        );\r\n\r\n        uint256[] memory amounts;\r\n\r\n        if (_haveReserve(pair3)) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = _fromToken;\r\n            path[1] = _toToken;\r\n\r\n            amounts = uniswapV2Router.swapExactTokensForTokens(\r\n                amount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                now + 180\r\n            );\r\n            return amounts[1];\r\n        } else if (_haveReserve(pair1) && _haveReserve(pair2)) {\r\n            address[] memory path = new address[](3);\r\n            path[0] = _fromToken;\r\n            path[1] = wethTokenAddress;\r\n            path[2] = _toToken;\r\n\r\n            amounts = uniswapV2Router.swapExactTokensForTokens(\r\n                amount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                now + 180\r\n            );\r\n            return amounts[2];\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: interfaces/IBPool.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IBPool {\r\n\r\n    function exitswapPoolAmountIn(\r\n        address tokenOut,\r\n        uint256 poolAmountIn,\r\n        uint256 minAmountOut\r\n    ) external payable returns (uint256 tokenAmountOut);\r\n\r\n    function joinswapExternAmountIn(\r\n        address tokenIn,\r\n        uint256 tokenAmountIn,\r\n        uint256 minPoolAmountOut\r\n    ) external payable returns (uint256 poolAmountOut);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function getFinalTokens() external view returns (address[] memory tokens);\r\n\r\n    function getDenormalizedWeight(address token)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTotalDenormalizedWeight() external view returns (uint256);\r\n\r\n    function getSwapFee() external view returns (uint256);\r\n\r\n    function isBound(address t) external view returns (bool);\r\n\r\n    function calcPoolOutGivenSingleIn(\r\n        uint256 tokenBalanceIn,\r\n        uint256 tokenWeightIn,\r\n        uint256 poolSupply,\r\n        uint256 totalWeight,\r\n        uint256 tokenAmountIn,\r\n        uint256 swapFee\r\n    ) external pure returns (uint256 poolAmountOut);\r\n\r\n    function calcSingleOutGivenPoolIn(\r\n        uint256 tokenBalanceOut,\r\n        uint256 tokenWeightOut,\r\n        uint256 poolSupply,\r\n        uint256 totalWeight,\r\n        uint256 poolAmountIn,\r\n        uint256 swapFee\r\n    ) external pure returns (uint256 tokenAmountOut);\r\n\r\n    function getBalance(address token) external view returns (uint256);\r\n    function balanceOf(address whom) external view returns (uint);\r\n    function approve(address dst, uint amt) external returns (bool);\r\n\r\n}\r\n\r\n// File: interfaces/IBFactory.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IBFactory {\r\n\r\n    function isBPool(address b) external view returns (bool);\r\n    function newBPool() external returns (IBPool);\r\n}\r\n\r\n// File: contracts/ReefBalancer.sol\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n\r\n///@author Reef\r\n///@notice This contract adds and removes liquidity from Balancer Pools into\r\n//ETH/ERC/Underlying Tokens. Based on Zaper implementation.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary ReefBalancer {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IUniswapV2Factory\r\n        private constant UniSwapV2FactoryAddress = IUniswapV2Factory(\r\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\r\n    );\r\n    IUniswapV2Router private constant uniswapRouter = IUniswapV2Router(\r\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    );\r\n    IBFactory private constant BalancerFactory = IBFactory(\r\n        0x9424B1412450D0f8Fc2255FAf6046b98213B76Bd\r\n    );\r\n\r\n    address\r\n        private constant wethTokenAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    uint256\r\n        private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    /**\r\n    @notice This function for investing into BalancerPool\r\n    @param _toWhomToIssue The user address who want to invest\r\n    @param _FromTokenContractAddress The token used for investment (address(0x00) if ether)\r\n    @param _ToBalancerPoolAddress The address of balancer pool to zapin\r\n    @param _amount The amount of ETH/ERC to invest\r\n    @param _minPoolTokens for slippage\r\n    @return tokensBought The quantity of Balancer Pool tokens returned\r\n    */\r\n    function investIntoBalancerPool(\r\n        address _toWhomToIssue,\r\n        address _FromTokenContractAddress,\r\n        address _ToBalancerPoolAddress,\r\n        uint256 _amount,\r\n        uint256 _minPoolTokens\r\n    ) public returns (uint256 tokensBought) {\r\n\r\n        address _IntermediateToken = _getBestDeal(\r\n            _ToBalancerPoolAddress,\r\n            _amount,\r\n            _FromTokenContractAddress\r\n        );\r\n\r\n        // check if isBound()\r\n        bool isBound = IBPool(_ToBalancerPoolAddress).isBound(\r\n            _FromTokenContractAddress\r\n        );\r\n\r\n        uint256 balancerTokens;\r\n\r\n        if (isBound) {\r\n            balancerTokens = _enter2Balancer(\r\n                _ToBalancerPoolAddress,\r\n                _FromTokenContractAddress,\r\n                _amount,\r\n                _minPoolTokens\r\n            );\r\n        } else {\r\n            // swap tokens or eth\r\n            uint256 tokenBought;\r\n            if (_FromTokenContractAddress == address(0)) {\r\n                tokenBought = ReefUniswap.swapFromV2(_FromTokenContractAddress,\r\n                                                     _IntermediateToken, _amount);\r\n            } else {\r\n                tokenBought = _token2Token(\r\n                    _FromTokenContractAddress,\r\n                    address(this),\r\n                    _IntermediateToken,\r\n                    _amount\r\n                );\r\n            }\r\n\r\n            //get BPT\r\n            balancerTokens = _enter2Balancer(\r\n                _ToBalancerPoolAddress,\r\n                _IntermediateToken,\r\n                tokenBought,\r\n                _minPoolTokens\r\n            );\r\n        }\r\n\r\n        //transfer tokens to user\r\n        IERC20(_ToBalancerPoolAddress).safeTransfer(\r\n            _toWhomToIssue,\r\n            balancerTokens\r\n        );\r\n\r\n        return balancerTokens;\r\n    }\r\n\r\n    /**\r\n    @notice This function is used for zapping out of balancer pools\r\n    @param _ToTokenContractAddress The token in which we want zapout (for ethers, its zero address)\r\n    @param _FromBalancerPoolAddress The address of balancer pool to zap out\r\n    @param _IncomingBPT The quantity of balancer pool tokens\r\n    @param _minTokensRec slippage user wants\r\n    @return success or failure\r\n    */\r\n    function disinvestFromBalancerPool(\r\n        address payable _toWhomToIssue,\r\n        address _ToTokenContractAddress,\r\n        address _FromBalancerPoolAddress,\r\n        uint256 _IncomingBPT,\r\n        uint256 _minTokensRec\r\n    ) public returns (uint256) {\r\n        require(\r\n            BalancerFactory.isBPool(_FromBalancerPoolAddress),\r\n            \"Invalid Balancer Pool\"\r\n        );\r\n\r\n        address _FromTokenAddress;\r\n        if (IBPool(_FromBalancerPoolAddress).isBound(_ToTokenContractAddress)) {\r\n            _FromTokenAddress = _ToTokenContractAddress;\r\n        } else if (\r\n            _ToTokenContractAddress == address(0) &&\r\n            IBPool(_FromBalancerPoolAddress).isBound(wethTokenAddress)\r\n        ) {\r\n            _FromTokenAddress = wethTokenAddress;\r\n        } else {\r\n            _FromTokenAddress = _getBestDeal(\r\n                _FromBalancerPoolAddress,\r\n                _IncomingBPT\r\n            );\r\n        }\r\n        return (\r\n            _performZapOut(\r\n                _toWhomToIssue,\r\n                _ToTokenContractAddress,\r\n                _FromBalancerPoolAddress,\r\n                _IncomingBPT,\r\n                _FromTokenAddress,\r\n                _minTokensRec\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n    @notice This method is called by disinvestFromBalancerPool()\r\n    @param _toWhomToIssue is the address of user\r\n    @param _ToTokenContractAddress is the address of the token to which you want to convert to\r\n    @param _FromBalancerPoolAddress the address of the Balancer Pool from which you want to ZapOut\r\n    @param _IncomingBPT is the quantity of Balancer Pool tokens that the user wants to ZapOut\r\n    @param _IntermediateToken is the token to which the Balancer Pool should be Zapped Out\r\n    @notice this is only used if the outgoing token is not amongst the Balancer Pool tokens\r\n    @return success or failure\r\n    */\r\n    function _performZapOut(\r\n        address payable _toWhomToIssue,\r\n        address _ToTokenContractAddress,\r\n        address _FromBalancerPoolAddress,\r\n        uint256 _IncomingBPT,\r\n        address _IntermediateToken,\r\n        uint256 _minTokensRec\r\n    ) internal returns (uint256) {\r\n        if (IBPool(_FromBalancerPoolAddress).isBound(_ToTokenContractAddress)) {\r\n            return (\r\n                _directZapout(\r\n                    _FromBalancerPoolAddress,\r\n                    _ToTokenContractAddress,\r\n                    _toWhomToIssue,\r\n                    _IncomingBPT,\r\n                    _minTokensRec\r\n                )\r\n            );\r\n        }\r\n\r\n        //exit balancer\r\n        uint256 _returnedTokens = _exitBalancer(\r\n            _FromBalancerPoolAddress,\r\n            _IntermediateToken,\r\n            _IncomingBPT\r\n        );\r\n\r\n        if (_ToTokenContractAddress == address(0)) {\r\n            uint256 ethBought = ReefUniswap.swapFromV2(_IntermediateToken, address(0),\r\n                                               _returnedTokens);\r\n\r\n            require(ethBought >= _minTokensRec, \"High slippage\");\r\n\r\n            _toWhomToIssue.transfer(ethBought);\r\n            return ethBought;\r\n        } else {\r\n            uint256 tokenBought = _token2Token(\r\n                _IntermediateToken,\r\n                _toWhomToIssue,\r\n                _ToTokenContractAddress,\r\n                _returnedTokens\r\n            );\r\n            require(tokenBought >= _minTokensRec, \"High slippage\");\r\n            return tokenBought;\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice This function is used for zapping out of balancer pool\r\n    @param _FromBalancerPoolAddress The address of balancer pool to zap out\r\n    @param _ToTokenContractAddress The token in which we want to zapout (for ethers, its zero address)\r\n    @param _toWhomToIssue The address of user\r\n    @param tokens2Trade The quantity of balancer pool tokens\r\n    @return returnedTokens success or failure\r\n    */\r\n    function _directZapout(\r\n        address _FromBalancerPoolAddress,\r\n        address _ToTokenContractAddress,\r\n        address _toWhomToIssue,\r\n        uint256 tokens2Trade,\r\n        uint256 _minTokensRec\r\n    ) internal returns (uint256 returnedTokens) {\r\n        returnedTokens = _exitBalancer(\r\n            _FromBalancerPoolAddress,\r\n            _ToTokenContractAddress,\r\n            tokens2Trade\r\n        );\r\n\r\n        require(returnedTokens >= _minTokensRec, \"High slippage\");\r\n\r\n        IERC20(_ToTokenContractAddress).transfer(\r\n            _toWhomToIssue,\r\n            returnedTokens\r\n        );\r\n    }\r\n\r\n    /**\r\n    @notice This function gives the amount of tokens on zapping out from given\r\n    IBPool\r\n    @param _FromBalancerPoolAddress Address of balancer pool to zapout from\r\n    @param _IncomingBPT The amount of BPT to zapout\r\n    @param _toToken Address of token to zap out with\r\n    @return tokensReturned Amount of ERC token\r\n     */\r\n    function _getBPT2Token(\r\n        address _FromBalancerPoolAddress,\r\n        uint256 _IncomingBPT,\r\n        address _toToken\r\n    ) internal view returns (uint256 tokensReturned) {\r\n        uint256 totalSupply = IBPool(_FromBalancerPoolAddress).totalSupply();\r\n        uint256 swapFee = IBPool(_FromBalancerPoolAddress).getSwapFee();\r\n        uint256 totalWeight = IBPool(_FromBalancerPoolAddress)\r\n            .getTotalDenormalizedWeight();\r\n        uint256 balance = IBPool(_FromBalancerPoolAddress).getBalance(_toToken);\r\n        uint256 denorm = IBPool(_FromBalancerPoolAddress).getDenormalizedWeight(\r\n            _toToken\r\n        );\r\n\r\n        tokensReturned = IBPool(_FromBalancerPoolAddress)\r\n            .calcSingleOutGivenPoolIn(\r\n            balance,\r\n            denorm,\r\n            totalSupply,\r\n            totalWeight,\r\n            _IncomingBPT,\r\n            swapFee\r\n        );\r\n    }\r\n\r\n    /**\r\n    @notice Function gives the expected amount of pool tokens on investing\r\n    @param _ToBalancerPoolAddress Address of balancer pool to zapin\r\n    @param _IncomingERC The amount of ERC to invest\r\n    @param _FromToken Address of token to zap in with\r\n    @return tokensReturned Amount of BPT token\r\n    */\r\n    function getToken2BPT(\r\n        address _ToBalancerPoolAddress,\r\n        uint256 _IncomingERC,\r\n        address _FromToken\r\n    ) internal view returns (uint256 tokensReturned) {\r\n        uint256 totalSupply = IBPool(_ToBalancerPoolAddress).totalSupply();\r\n        uint256 swapFee = IBPool(_ToBalancerPoolAddress).getSwapFee();\r\n        uint256 totalWeight = IBPool(_ToBalancerPoolAddress)\r\n            .getTotalDenormalizedWeight();\r\n        uint256 balance = IBPool(_ToBalancerPoolAddress).getBalance(_FromToken);\r\n        uint256 denorm = IBPool(_ToBalancerPoolAddress).getDenormalizedWeight(\r\n            _FromToken\r\n        );\r\n\r\n        tokensReturned = IBPool(_ToBalancerPoolAddress)\r\n            .calcPoolOutGivenSingleIn(\r\n            balance,\r\n            denorm,\r\n            totalSupply,\r\n            totalWeight,\r\n            _IncomingERC,\r\n            swapFee\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n    @notice This function is used to zapin to balancer pool\r\n    @param _ToBalancerPoolAddress The address of balancer pool to zap in\r\n    @param _FromTokenContractAddress The token used to zap in\r\n    @param tokens2Trade The amount of tokens to invest\r\n    @return poolTokensOut The quantity of Balancer Pool tokens returned\r\n    */\r\n    function _enter2Balancer(\r\n        address _ToBalancerPoolAddress,\r\n        address _FromTokenContractAddress,\r\n        uint256 tokens2Trade,\r\n        uint256 _minPoolTokens\r\n    ) internal returns (uint256 poolTokensOut) {\r\n        require(\r\n            IBPool(_ToBalancerPoolAddress).isBound(_FromTokenContractAddress),\r\n            \"Token not bound\"\r\n        );\r\n\r\n        uint256 allowance = IERC20(_FromTokenContractAddress).allowance(\r\n            address(this),\r\n            _ToBalancerPoolAddress\r\n        );\r\n\r\n        if (allowance < tokens2Trade) {\r\n            IERC20(_FromTokenContractAddress).safeApprove(\r\n                _ToBalancerPoolAddress,\r\n                uint256(-1)\r\n            );\r\n        }\r\n\r\n        poolTokensOut = IBPool(_ToBalancerPoolAddress).joinswapExternAmountIn(\r\n            _FromTokenContractAddress,\r\n            tokens2Trade,\r\n            _minPoolTokens\r\n        );\r\n\r\n        require(poolTokensOut > 0, \"Error in entering balancer pool\");\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to zap out of the given balancer pool\r\n    @param _FromBalancerPoolAddress The address of balancer pool to zap out\r\n    @param _ToTokenContractAddress The Token address which will be zapped out\r\n    @param _amount The amount of token for zapout\r\n    @return returnedTokens The amount of tokens received after zap out\r\n     */\r\n    function _exitBalancer(\r\n        address _FromBalancerPoolAddress,\r\n        address _ToTokenContractAddress,\r\n        uint256 _amount\r\n    ) internal returns (uint256 returnedTokens) {\r\n        require(\r\n            IBPool(_FromBalancerPoolAddress).isBound(_ToTokenContractAddress),\r\n            \"Token not bound\"\r\n        );\r\n\r\n        uint256 minTokens = _getBPT2Token(\r\n            _FromBalancerPoolAddress,\r\n            _amount,\r\n            _ToTokenContractAddress\r\n        );\r\n        minTokens = SafeMath.div(SafeMath.mul(minTokens, 98), 100);\r\n\r\n        returnedTokens = IBPool(_FromBalancerPoolAddress).exitswapPoolAmountIn(\r\n            _ToTokenContractAddress,\r\n            _amount,\r\n            minTokens\r\n        );\r\n\r\n        require(returnedTokens > 0, \"Error in exiting balancer pool\");\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to swap tokens\r\n    @param _FromTokenContractAddress The token address to swap from\r\n    @param _ToWhomToIssue The address to transfer after swap\r\n    @param _ToTokenContractAddress The token address to swap to\r\n    @param tokens2Trade The quantity of tokens to swap\r\n    @return tokenBought The amount of tokens returned after swap\r\n     */\r\n    function _token2Token(\r\n        address _FromTokenContractAddress,\r\n        address _ToWhomToIssue,\r\n        address _ToTokenContractAddress,\r\n        uint256 tokens2Trade\r\n    ) internal returns (uint256 tokenBought) {\r\n        IERC20(_FromTokenContractAddress).approve(\r\n            address(uniswapRouter),\r\n            tokens2Trade\r\n        );\r\n\r\n        if (_FromTokenContractAddress != wethTokenAddress) {\r\n            if (_ToTokenContractAddress != wethTokenAddress) {\r\n                address[] memory path = new address[](3);\r\n                path[0] = _FromTokenContractAddress;\r\n                path[1] = wethTokenAddress;\r\n                path[2] = _ToTokenContractAddress;\r\n                tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                    tokens2Trade,\r\n                    1,\r\n                    path,\r\n                    _ToWhomToIssue,\r\n                    deadline\r\n                )[path.length - 1];\r\n            } else {\r\n                address[] memory path = new address[](2);\r\n                path[0] = _FromTokenContractAddress;\r\n                path[1] = wethTokenAddress;\r\n\r\n                tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                    tokens2Trade,\r\n                    1,\r\n                    path,\r\n                    _ToWhomToIssue,\r\n                    deadline\r\n                )[path.length - 1];\r\n            }\r\n        } else {\r\n            address[] memory path = new address[](2);\r\n            path[0] = wethTokenAddress;\r\n            path[1] = _ToTokenContractAddress;\r\n            tokenBought = uniswapRouter.swapExactTokensForTokens(\r\n                tokens2Trade,\r\n                1,\r\n                path,\r\n                _ToWhomToIssue,\r\n                deadline\r\n            )[path.length - 1];\r\n        }\r\n\r\n        require(tokenBought > 0, \"Error in swapping ERC: 1\");\r\n    }\r\n\r\n    /**\r\n    @notice This function finds best token from the final tokens of balancer pool\r\n    @param _ToBalancerPoolAddress The address of balancer pool to zap in\r\n    @param _amount amount of eth/erc to invest\r\n    @param _FromTokenContractAddress the token address which is used to invest\r\n    @return _token The token address having max liquidity\r\n    */\r\n    function _getBestDeal(\r\n        address _ToBalancerPoolAddress,\r\n        uint256 _amount,\r\n        address _FromTokenContractAddress\r\n    ) internal view returns (address _token) {\r\n        // If input is not eth or weth\r\n        if (\r\n            _FromTokenContractAddress != address(0) &&\r\n            _FromTokenContractAddress != wethTokenAddress\r\n        ) {\r\n            // check if input token or weth is bound and if so return it as intermediate\r\n            bool isBound = IBPool(_ToBalancerPoolAddress).isBound(\r\n                _FromTokenContractAddress\r\n            );\r\n            if (isBound) return _FromTokenContractAddress;\r\n        }\r\n\r\n        bool wethIsBound = IBPool(_ToBalancerPoolAddress).isBound(\r\n            wethTokenAddress\r\n        );\r\n        if (wethIsBound) return wethTokenAddress;\r\n\r\n        //get token list\r\n        address[] memory tokens = IBPool(_ToBalancerPoolAddress)\r\n            .getFinalTokens();\r\n\r\n        uint256 amount = _amount;\r\n        address[] memory path = new address[](2);\r\n\r\n        if (\r\n            _FromTokenContractAddress != address(0) &&\r\n            _FromTokenContractAddress != wethTokenAddress\r\n        ) {\r\n            path[0] = _FromTokenContractAddress;\r\n            path[1] = wethTokenAddress;\r\n            //get eth value for given token\r\n            amount = uniswapRouter.getAmountsOut(_amount, path)[1];\r\n        }\r\n\r\n        uint256 maxBPT;\r\n        path[0] = wethTokenAddress;\r\n\r\n        for (uint256 index = 0; index < tokens.length; index++) {\r\n            uint256 expectedBPT;\r\n\r\n            if (tokens[index] != wethTokenAddress) {\r\n                if (\r\n                    UniSwapV2FactoryAddress.getPair(\r\n                        tokens[index],\r\n                        wethTokenAddress\r\n                    ) == address(0)\r\n                ) {\r\n                    continue;\r\n                }\r\n\r\n                //get qty of tokens\r\n                path[1] = tokens[index];\r\n                uint256 expectedTokens = uniswapRouter.getAmountsOut(\r\n                    amount,\r\n                    path\r\n                )[1];\r\n\r\n                //get bpt for given tokens\r\n                expectedBPT = getToken2BPT(\r\n                    _ToBalancerPoolAddress,\r\n                    expectedTokens,\r\n                    tokens[index]\r\n                );\r\n\r\n                //get token giving max BPT\r\n                if (maxBPT < expectedBPT) {\r\n                    maxBPT = expectedBPT;\r\n                    _token = tokens[index];\r\n                }\r\n            } else {\r\n                //get bpt for given weth tokens\r\n                expectedBPT = getToken2BPT(\r\n                    _ToBalancerPoolAddress,\r\n                    amount,\r\n                    tokens[index]\r\n                );\r\n            }\r\n\r\n            //get token giving max BPT\r\n            if (maxBPT < expectedBPT) {\r\n                maxBPT = expectedBPT;\r\n                _token = tokens[index];\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    @notice This function finds best token from the final tokens of balancer pool\r\n    @param _FromBalancerPoolAddress The address of balancer pool to zap out\r\n    @param _IncomingBPT The amount of balancer pool token to covert\r\n    @return _token The token address having max liquidity\r\n     */\r\n    function _getBestDeal(\r\n        address _FromBalancerPoolAddress,\r\n        uint256 _IncomingBPT\r\n    ) internal view returns (address _token) {\r\n        //get token list\r\n        address[] memory tokens = IBPool(_FromBalancerPoolAddress)\r\n            .getFinalTokens();\r\n\r\n        uint256 maxEth;\r\n\r\n        for (uint256 index = 0; index < tokens.length; index++) {\r\n            //get token for given bpt amount\r\n            uint256 tokensForBPT = _getBPT2Token(\r\n                _FromBalancerPoolAddress,\r\n                _IncomingBPT,\r\n                tokens[index]\r\n            );\r\n\r\n            //get eth value for each token\r\n            if (tokens[index] != wethTokenAddress) {\r\n                if (\r\n                    UniSwapV2FactoryAddress.getPair(\r\n                        tokens[index],\r\n                        wethTokenAddress\r\n                    ) == address(0)\r\n                ) {\r\n                    continue;\r\n                }\r\n\r\n                address[] memory path = new address[](2);\r\n                path[0] = tokens[index];\r\n                path[1] = wethTokenAddress;\r\n                uint256 ethReturned = uniswapRouter.getAmountsOut(\r\n                    tokensForBPT,\r\n                    path\r\n                )[1];\r\n\r\n                //get max eth value\r\n                if (maxEth < ethReturned) {\r\n                    maxEth = ethReturned;\r\n                    _token = tokens[index];\r\n                }\r\n            } else {\r\n                //get max eth value\r\n                if (maxEth < tokensForBPT) {\r\n                    maxEth = tokensForBPT;\r\n                    _token = tokens[index];\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: interfaces/IMooniswap.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IMooniswap {\r\n    function swap(address src, address dst, uint256 amount, uint256 minReturn, address referral) external payable returns(uint256 result);\r\n    function deposit(uint256[] calldata amounts, uint256[] calldata minAmounts) external payable returns(uint256 fairSupply);\r\n    function withdraw(uint256 amount, uint256[] memory minReturns) external;\r\n\r\n    function getTokens() external view returns(IERC20[] memory);\r\n\r\n    function balanceOf(address whom) external view returns (uint);\r\n    function getReturn(IERC20 src, IERC20 dst, uint256 amount) external view returns(uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/libraries/UniERC20.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary UniERC20 {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    function isETH(IERC20 token) internal pure returns(bool) {\r\n        return (address(token) == address(0));\r\n    }\r\n\r\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return account.balance;\r\n        } else {\r\n            return token.balanceOf(account);\r\n        }\r\n    }\r\n\r\n    function uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            if (isETH(token)) {\r\n                to.transfer(amount);\r\n            } else {\r\n                token.safeTransfer(to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function uniTransferFromSenderToThis(IERC20 token, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            if (isETH(token)) {\r\n                require(msg.value >= amount, \"UniERC20: not enough value\");\r\n                if (msg.value > amount) {\r\n                    // Return remainder if exist\r\n                    msg.sender.transfer(msg.value.sub(amount));\r\n                }\r\n            } else {\r\n                token.safeTransferFrom(msg.sender, address(this), amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function uniSymbol(IERC20 token) internal view returns(string memory) {\r\n        if (isETH(token)) {\r\n            return \"ETH\";\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall{ gas: 20000 }(\r\n            abi.encodeWithSignature(\"symbol()\")\r\n        );\r\n        if (!success) {\r\n            (success, data) = address(token).staticcall{ gas: 20000 }(\r\n                abi.encodeWithSignature(\"SYMBOL()\")\r\n            );\r\n        }\r\n\r\n        if (success && data.length >= 96) {\r\n            (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\r\n            if (offset == 0x20 && len > 0 && len <= 256) {\r\n                return string(abi.decode(data, (bytes)));\r\n            }\r\n        }\r\n\r\n        if (success && data.length == 32) {\r\n            uint len = 0;\r\n            while (len < data.length && data[len] >= 0x20 && data[len] <= 0x7E) {\r\n                len++;\r\n            }\r\n\r\n            if (len > 0) {\r\n                bytes memory result = new bytes(len);\r\n                for (uint i = 0; i < len; i++) {\r\n                    result[i] = data[i];\r\n                }\r\n                return string(result);\r\n            }\r\n        }\r\n\r\n        return _toHex(address(token));\r\n    }\r\n\r\n    function _toHex(address account) private pure returns(string memory) {\r\n        return _toHex(abi.encodePacked(account));\r\n    }\r\n\r\n    function _toHex(bytes memory data) private pure returns(string memory) {\r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        uint j = 2;\r\n        for (uint i = 0; i < data.length; i++) {\r\n            uint a = uint8(data[i]) >> 4;\r\n            uint b = uint8(data[i]) & 0x0f;\r\n            str[j++] = byte(uint8(a + 48 + (a/10)*39));\r\n            str[j++] = byte(uint8(b + 48 + (b/10)*39));\r\n        }\r\n\r\n        return string(str);\r\n    }\r\n}\r\n\r\n// File: contracts/ReefMooniswapV1.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary ReefMooniswapV1 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using UniERC20 for IERC20;\r\n\r\n    function investIntoMooniswapPool(\r\n        address _FromTokenContractAddress,\r\n        address poolAddress,\r\n        uint256 _amount\r\n    ) public returns(uint256 fairSupply) {\r\n        IMooniswap pool = IMooniswap(poolAddress);\r\n        IERC20[] memory ercTokens = pool.getTokens();\r\n\r\n        uint256[] memory amounts = new uint256[](2);\r\n        uint256[] memory minAmounts = new uint256[](2);\r\n\r\n        if (ercTokens[0].isETH() || ercTokens[1].isETH()) {\r\n            IERC20 token = ercTokens[0].isETH() ? ercTokens[1] : ercTokens[0];\r\n\r\n            //uint256 rate = pool.getReturn(ercTokens[0], ercTokens[1], _amount);\r\n            uint256 halfAmount = _amount.mul(50).div(100);\r\n            uint256 tokenBought = ReefUniswap.swapFromV2(_FromTokenContractAddress,\r\n                                                 address(token), halfAmount);\r\n\r\n            amounts[0] = halfAmount;\r\n            amounts[1] = tokenBought;\r\n\r\n            token.approve(\r\n                poolAddress,\r\n                tokenBought\r\n            );\r\n\r\n            fairSupply = pool.deposit{value: halfAmount}(\r\n                amounts,\r\n                minAmounts\r\n            );\r\n        } else {\r\n            (uint256 token0Bought, uint256 token1Bought) = ReefUniswap.exchangeTokensV2(\r\n                _FromTokenContractAddress,\r\n                address(ercTokens[0]),\r\n                address(ercTokens[1]),\r\n                _amount\r\n            );\r\n\r\n            amounts[0] = token0Bought;\r\n            amounts[1] = token1Bought;\r\n\r\n            ercTokens[0].approve(\r\n                poolAddress,\r\n                token0Bought\r\n            );\r\n\r\n            TransferHelper.safeApprove(address(ercTokens[1]),\r\n                poolAddress,\r\n                token1Bought\r\n            );\r\n\r\n            fairSupply = pool.deposit(\r\n                amounts,\r\n                minAmounts\r\n            );\r\n\r\n            // Check for change and return it (there must be a better way for\r\n            // this)\r\n            uint256 token0Balance = ercTokens[0].balanceOf((address(this)));\r\n            uint256 token1Balance = ercTokens[1].balanceOf((address(this)));\r\n\r\n            if (token0Balance > 0) {\r\n                ReefUniswap.swapFromV2(address(ercTokens[0]),\r\n                                       _FromTokenContractAddress, token0Balance);\r\n            }\r\n\r\n            if (token1Balance > 0) {\r\n                ReefUniswap.swapFromV2(address(ercTokens[1]),\r\n                                       _FromTokenContractAddress, token1Balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    function disinvestFromMooniswapPool(\r\n        address _ToTokenContractAddress,\r\n        address poolAddress,\r\n        uint256 _amount\r\n    ) public {\r\n        IMooniswap pool = IMooniswap(poolAddress);\r\n        IERC20[] memory ercTokens = pool.getTokens();\r\n        uint256 totalSupply = pool.totalSupply();\r\n\r\n        uint256[] memory minAmounts = new uint256[](2);\r\n        uint256[] memory tokenReturns = new uint256[](2);\r\n\r\n        for (uint i = 0; i < ercTokens.length; i++) {\r\n            uint256 preBalance = ercTokens[i].uniBalanceOf(poolAddress);\r\n            tokenReturns[i] = preBalance.mul(_amount).div(totalSupply);\r\n        }\r\n\r\n        pool.withdraw(\r\n            _amount,\r\n            minAmounts\r\n        );\r\n\r\n        for (uint i = 0; i < tokenReturns.length; i++) {\r\n            if (!ercTokens[i].isETH()) {\r\n                ReefUniswap.swapFromV2(address(ercTokens[i]),\r\n                                       _ToTokenContractAddress,\r\n                                       tokenReturns[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ReefBasket.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ncontract ReefBasket is ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    bool private stopped = false;\r\n    uint16 public protocolTokenDisinvestPercentage;\r\n    address public protocolTokenAddress;\r\n    uint256 public minimalInvestment = 1 ether;\r\n\r\n    // Limit how much funds we can handle\r\n    uint256 public maxInvestedFunds = 100 ether;\r\n    uint256 public currentInvestedFunds;\r\n\r\n    // Define baskets\r\n    struct UniswapV2Pool {\r\n        uint8 weight;\r\n        address uniswapToken0;\r\n        address uniswapToken1;\r\n    }\r\n\r\n    struct Token {\r\n        uint8 weight;\r\n        address tokenAddress;\r\n    }\r\n\r\n    struct Pool {\r\n        uint8 weight;\r\n        address poolAddress;\r\n    }\r\n\r\n    struct Basket {\r\n        string name;\r\n        address referrer;\r\n        UniswapV2Pool[] uniswapPools;\r\n        Token[] tokens;\r\n        Pool[] balancerPools;\r\n        Pool[] mooniswapPools;\r\n    }\r\n\r\n    struct BasketBalance {\r\n        uint256 investedAmount;\r\n        mapping(uint256 => uint256) uniswapPools;\r\n        mapping(uint256 => uint256) balancerPools;\r\n        mapping(uint256 => uint256) mooniswapPools;\r\n        mapping(uint256 => uint256) tokens;\r\n    }\r\n\r\n    struct UserBalance {\r\n        mapping(uint256 => BasketBalance) basketBalances;\r\n    }\r\n\r\n    event Invest(\r\n        address indexed user,\r\n        uint256 indexed basketId,\r\n        uint256 investedAmount\r\n    );\r\n\r\n    event Disinvest(\r\n        address indexed user,\r\n        uint256 indexed basketId,\r\n        uint256 disinvestedAmount\r\n    );\r\n\r\n    event BasketCreated(uint256 indexed basketId, address indexed user);\r\n\r\n    uint256 public availableBasketsSize;\r\n    mapping(uint256 => Basket) public availableBaskets;\r\n\r\n    mapping(address => UserBalance) private userBalance;\r\n\r\n    address wethTokenAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    constructor(\r\n        uint16 _protocolTokenDisinvestPercentage,\r\n        address _protocolTokenAddress\r\n    ) public {\r\n        protocolTokenDisinvestPercentage = _protocolTokenDisinvestPercentage;\r\n        protocolTokenAddress = _protocolTokenAddress;\r\n    }\r\n\r\n    function balanceOfUniswapPools(address _owner, uint256 _basketIndex)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        Basket storage basket = availableBaskets[_basketIndex];\r\n\r\n        uint256[] memory uniswapBalances = new uint256[](\r\n            basket.uniswapPools.length\r\n        );\r\n        for (uint256 i = 0; i < basket.uniswapPools.length; i++) {\r\n            uniswapBalances[i] = userBalance[_owner]\r\n                .basketBalances[_basketIndex]\r\n                .uniswapPools[i];\r\n        }\r\n\r\n        return uniswapBalances;\r\n    }\r\n\r\n    function balanceOfTokens(address _owner, uint256 _basketIndex)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        Basket storage basket = availableBaskets[_basketIndex];\r\n\r\n        uint256[] memory tokenBalances = new uint256[](basket.tokens.length);\r\n        for (uint256 i = 0; i < basket.tokens.length; i++) {\r\n            tokenBalances[i] = userBalance[_owner].basketBalances[_basketIndex]\r\n                .tokens[i];\r\n        }\r\n\r\n        return tokenBalances;\r\n    }\r\n\r\n    function balanceOfBalancerPools(address _owner, uint256 _basketIndex)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        Basket storage basket = availableBaskets[_basketIndex];\r\n\r\n        uint256[] memory balancerBalances = new uint256[](\r\n            basket.balancerPools.length\r\n        );\r\n        for (uint256 i = 0; i < basket.balancerPools.length; i++) {\r\n            balancerBalances[i] = userBalance[_owner]\r\n                .basketBalances[_basketIndex]\r\n                .balancerPools[i];\r\n        }\r\n\r\n        return balancerBalances;\r\n    }\r\n\r\n    function balanceOfMooniswapPools(address _owner, uint256 _basketIndex)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        Basket storage basket = availableBaskets[_basketIndex];\r\n\r\n        uint256[] memory mooniswapBalances = new uint256[](\r\n            basket.mooniswapPools.length\r\n        );\r\n        for (uint256 i = 0; i < basket.mooniswapPools.length; i++) {\r\n            mooniswapBalances[i] = userBalance[_owner]\r\n                .basketBalances[_basketIndex]\r\n                .mooniswapPools[i];\r\n        }\r\n\r\n        return mooniswapBalances;\r\n    }\r\n\r\n    function investedAmountInBasket(address _owner, uint256 _basketIndex)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return userBalance[_owner].basketBalances[_basketIndex].investedAmount;\r\n    }\r\n\r\n    function getAvailableBasketUniswapPools(uint256 _basketIndex)\r\n        public\r\n        view\r\n        returns (address[2][] memory, uint8[] memory)\r\n    {\r\n        Basket storage basket = availableBaskets[_basketIndex];\r\n\r\n        address[2][] memory uniswapPools = new address[2][](\r\n            basket.uniswapPools.length\r\n        );\r\n        uint8[] memory uniswapWeights = new uint8[](basket.uniswapPools.length);\r\n\r\n        for (uint256 i = 0; i < basket.uniswapPools.length; i++) {\r\n            uniswapPools[i][0] = basket.uniswapPools[i].uniswapToken0;\r\n            uniswapPools[i][1] = basket.uniswapPools[i].uniswapToken1;\r\n\r\n            uniswapWeights[i] = basket.uniswapPools[i].weight;\r\n        }\r\n\r\n        return (uniswapPools, uniswapWeights);\r\n    }\r\n\r\n    function getAvailableBasketTokens(uint8 _basketIndex)\r\n        public\r\n        view\r\n        returns (address[] memory, uint8[] memory)\r\n    {\r\n        Basket storage basket = availableBaskets[_basketIndex];\r\n\r\n        address[] memory tokens = new address[](basket.tokens.length);\r\n        uint8[] memory tokensWeights = new uint8[](basket.tokens.length);\r\n        for (uint256 i = 0; i < basket.tokens.length; i++) {\r\n            tokens[i] = basket.tokens[i].tokenAddress;\r\n\r\n            tokensWeights[i] = basket.tokens[i].weight;\r\n        }\r\n\r\n        return (tokens, tokensWeights);\r\n    }\r\n\r\n    function getAvailableBasketBalancerPools(uint256 _basketIndex)\r\n        public\r\n        view\r\n        returns (address[] memory, uint8[] memory)\r\n    {\r\n        Basket storage basket = availableBaskets[_basketIndex];\r\n\r\n        address[] memory balancerPools = new address[](\r\n            basket.balancerPools.length\r\n        );\r\n        uint8[] memory balancerWeights = new uint8[](\r\n            basket.balancerPools.length\r\n        );\r\n        for (uint256 i = 0; i < basket.balancerPools.length; i++) {\r\n            balancerPools[i] = basket.balancerPools[i].poolAddress;\r\n\r\n            balancerWeights[i] = basket.balancerPools[i].weight;\r\n        }\r\n\r\n        return (balancerPools, balancerWeights);\r\n    }\r\n\r\n    function getAvailableBasketMooniswapPools(uint256 _basketIndex)\r\n        public\r\n        view\r\n        returns (address[] memory, uint8[] memory)\r\n    {\r\n        Basket storage basket = availableBaskets[_basketIndex];\r\n\r\n        address[] memory mooniswapPools = new address[](\r\n            basket.mooniswapPools.length\r\n        );\r\n        uint8[] memory mooniswapWeights = new uint8[](\r\n            basket.mooniswapPools.length\r\n        );\r\n        for (uint256 i = 0; i < basket.mooniswapPools.length; i++) {\r\n            mooniswapPools[i] = basket.mooniswapPools[i].poolAddress;\r\n\r\n            mooniswapWeights[i] = basket.mooniswapPools[i].weight;\r\n        }\r\n\r\n        return (mooniswapPools, mooniswapWeights);\r\n    }\r\n\r\n    function createBasket(\r\n        string memory _name,\r\n        address[2][] memory _uniswapPools,\r\n        uint8[] memory _uniswapPoolsWeights,\r\n        address[] memory _tokens,\r\n        uint8[] memory _tokensWeights,\r\n        address[] memory _balancerPools,\r\n        uint8[] memory _balancerPoolsWeights,\r\n        address[] memory _mooniswapPools,\r\n        uint8[] memory _mooniswapPoolsWeights\r\n    ) public payable nonReentrant stopInEmergency returns (uint256) {\r\n        require(\r\n            _uniswapPoolsWeights.length > 0 ||\r\n                _tokensWeights.length > 0 ||\r\n                _balancerPoolsWeights.length > 0 ||\r\n                _mooniswapPoolsWeights.length > 0,\r\n            \"0 assets given\"\r\n        );\r\n        require(_uniswapPools.length == _uniswapPoolsWeights.length);\r\n        require(_tokens.length == _tokensWeights.length);\r\n        require(_balancerPools.length == _balancerPoolsWeights.length);\r\n        require(_mooniswapPools.length == _mooniswapPoolsWeights.length);\r\n\r\n        uint256 totalWeights;\r\n        Basket storage basket = availableBaskets[availableBasketsSize];\r\n        availableBasketsSize++;\r\n\r\n        basket.name = _name;\r\n        basket.referrer = msg.sender;\r\n\r\n        for (uint256 i = 0; i < _uniswapPoolsWeights.length; i++) {\r\n            totalWeights = (totalWeights).add(_uniswapPoolsWeights[i]);\r\n        }\r\n        for (uint256 i = 0; i < _tokensWeights.length; i++) {\r\n            totalWeights = (totalWeights).add(_tokensWeights[i]);\r\n        }\r\n        for (uint256 i = 0; i < _balancerPoolsWeights.length; i++) {\r\n            totalWeights = (totalWeights).add(_balancerPoolsWeights[i]);\r\n        }\r\n        for (uint256 i = 0; i < _mooniswapPoolsWeights.length; i++) {\r\n            totalWeights = (totalWeights).add(_mooniswapPoolsWeights[i]);\r\n        }\r\n\r\n        require(totalWeights == 100, \"Basket weights have to sum up to 100.\");\r\n\r\n        for (uint256 i = 0; i < _uniswapPools.length; i++) {\r\n            UniswapV2Pool memory pool = UniswapV2Pool(\r\n                _uniswapPoolsWeights[i],\r\n                _uniswapPools[i][0],\r\n                _uniswapPools[i][1]\r\n            );\r\n\r\n            basket.uniswapPools.push(pool);\r\n        }\r\n\r\n        for (uint256 i = 0; i < _tokensWeights.length; i++) {\r\n            Token memory token = Token(_tokensWeights[i], _tokens[i]);\r\n\r\n            basket.tokens.push(token);\r\n        }\r\n\r\n        for (uint256 i = 0; i < _balancerPools.length; i++) {\r\n            Pool memory balancerPool = Pool(\r\n                _balancerPoolsWeights[i],\r\n                _balancerPools[i]\r\n            );\r\n\r\n            basket.balancerPools.push(balancerPool);\r\n        }\r\n\r\n        for (uint256 i = 0; i < _mooniswapPools.length; i++) {\r\n            Pool memory mooniswapPool = Pool(\r\n                _mooniswapPoolsWeights[i],\r\n                _mooniswapPools[i]\r\n            );\r\n\r\n            basket.mooniswapPools.push(mooniswapPool);\r\n        }\r\n\r\n        emit BasketCreated(availableBasketsSize - 1, msg.sender);\r\n\r\n        uint256[] memory baskets = new uint256[](1);\r\n        uint256[] memory weights = new uint256[](1);\r\n        baskets[0] = availableBasketsSize - 1;\r\n        weights[0] = 100;\r\n\r\n        return _multiInvest(baskets, weights, 1);\r\n    }\r\n\r\n    /**\r\n    @notice This function is used to invest in given Uniswap V2 pair through ETH/ERC20 Tokens\r\n    @param _basketIndexes basket indexes to invest into\r\n    @param _weights corresponding basket weights (percentage) how much to invest\r\n    @param _minPoolTokens Reverts if less tokens received than this\r\n    @return Amount of LP bought\r\n     */\r\n    function invest(\r\n        uint256[] memory _basketIndexes,\r\n        uint256[] memory _weights,\r\n        uint256 _minPoolTokens\r\n    ) public payable nonReentrant stopInEmergency returns (uint256) {\r\n        return _multiInvest(_basketIndexes, _weights, _minPoolTokens);\r\n    }\r\n\r\n    function _multiInvest(\r\n        uint256[] memory _basketIndexes,\r\n        uint256[] memory _weights,\r\n        uint256 _minPoolTokens\r\n    ) internal returns (uint256) {\r\n        require(msg.value > 0, \"Error: ETH not sent\");\r\n\r\n        // Check weights\r\n        require(_basketIndexes.length == _weights.length);\r\n        uint256 totalWeights;\r\n        for (uint256 i = 0; i < _weights.length; i++) {\r\n            totalWeights = (totalWeights).add(_weights[i]);\r\n        }\r\n\r\n        require(totalWeights == 100, \"Basket _weights have to sum up to 100.\");\r\n\r\n        for (uint256 i = 0; i < _weights.length; i++) {\r\n            uint256 basketInvestAmount = (msg.value).mul(_weights[i]).div(100);\r\n            require(\r\n                basketInvestAmount >= minimalInvestment,\r\n                \"Too low invest amount.\"\r\n            );\r\n\r\n            _invest(_basketIndexes[i], basketInvestAmount, _minPoolTokens);\r\n        }\r\n\r\n        // Return change\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function _invest(\r\n        uint256 _basketIndex,\r\n        uint256 _amount,\r\n        uint256 _minPoolTokens\r\n    ) internal returns (uint256) {\r\n        require(\r\n            _basketIndex < availableBasketsSize,\r\n            \"Error: basket index out of bounds\"\r\n        );\r\n        uint256 startBalance = address(this).balance;\r\n\r\n        // Invest into pools\r\n        for (\r\n            uint256 i = 0;\r\n            i < availableBaskets[_basketIndex].uniswapPools.length;\r\n            i++\r\n        ) {\r\n            UniswapV2Pool memory pool = availableBaskets[_basketIndex]\r\n                .uniswapPools[i];\r\n\r\n            uint256 investAmount = (_amount).mul(pool.weight).div(100);\r\n\r\n            uint256 LPBought = ReefUniswap._investIntoUniswapPool(\r\n                address(0),\r\n                pool.uniswapToken0,\r\n                pool.uniswapToken1,\r\n                address(this),\r\n                investAmount\r\n            );\r\n\r\n            require(LPBought >= _minPoolTokens, \"ERR: High Slippage\");\r\n\r\n            userBalance[msg.sender].basketBalances[_basketIndex]\r\n                .uniswapPools[i] = userBalance[msg.sender]\r\n                .basketBalances[_basketIndex]\r\n                .uniswapPools[i]\r\n                .add(LPBought);\r\n        }\r\n\r\n        // Invest into tokens\r\n        for (\r\n            uint256 i = 0;\r\n            i < availableBaskets[_basketIndex].tokens.length;\r\n            i++\r\n        ) {\r\n            Token memory token = availableBaskets[_basketIndex].tokens[i];\r\n            uint256 investAmount = (_amount).mul(token.weight).div(100);\r\n\r\n            uint256 tokenBought = ReefUniswap.swapFromV2(\r\n                address(0),\r\n                token.tokenAddress,\r\n                investAmount\r\n            );\r\n\r\n            userBalance[msg.sender].basketBalances[_basketIndex]\r\n                .tokens[i] = userBalance[msg.sender]\r\n                .basketBalances[_basketIndex]\r\n                .tokens[i]\r\n                .add(tokenBought);\r\n        }\r\n\r\n        // Invest into balancer pool\r\n        for (\r\n            uint256 i = 0;\r\n            i < availableBaskets[_basketIndex].balancerPools.length;\r\n            i++\r\n        ) {\r\n            Pool memory balancerPool = availableBaskets[_basketIndex]\r\n                .balancerPools[i];\r\n            uint256 investAmount = (_amount).mul(balancerPool.weight).div(100);\r\n\r\n            uint256 balancerTokens = ReefBalancer.investIntoBalancerPool(\r\n                address(this),\r\n                address(0),\r\n                balancerPool.poolAddress,\r\n                investAmount,\r\n                _minPoolTokens\r\n            );\r\n\r\n            userBalance[msg.sender].basketBalances[_basketIndex]\r\n                .balancerPools[i] = userBalance[msg.sender]\r\n                .basketBalances[_basketIndex]\r\n                .balancerPools[i]\r\n                .add(balancerTokens);\r\n        }\r\n\r\n        // Invest into Mooniswap pool\r\n        for (\r\n            uint256 i = 0;\r\n            i < availableBaskets[_basketIndex].mooniswapPools.length;\r\n            i++\r\n        ) {\r\n            Pool memory mooniswapPool = availableBaskets[_basketIndex]\r\n                .mooniswapPools[i];\r\n            uint256 investAmount = (_amount).mul(mooniswapPool.weight).div(100);\r\n\r\n            uint256 fairSupply = ReefMooniswapV1.investIntoMooniswapPool(\r\n                address(0),\r\n                mooniswapPool.poolAddress,\r\n                investAmount\r\n            );\r\n\r\n            userBalance[msg.sender].basketBalances[_basketIndex]\r\n                .mooniswapPools[i] = userBalance[msg.sender]\r\n                .basketBalances[_basketIndex]\r\n                .mooniswapPools[i]\r\n                .add(fairSupply);\r\n        }\r\n\r\n        // Update user balance\r\n        uint256 diffBalance = startBalance.sub(address(this).balance);\r\n\r\n        userBalance[msg.sender].basketBalances[_basketIndex]\r\n            .investedAmount = userBalance[msg.sender]\r\n            .basketBalances[_basketIndex]\r\n            .investedAmount\r\n            .add(diffBalance);\r\n\r\n        // Update current funds\r\n        currentInvestedFunds = currentInvestedFunds.add(diffBalance);\r\n        require(\r\n            currentInvestedFunds <= maxInvestedFunds,\r\n            \"Max invested funds exceeded\"\r\n        );\r\n\r\n        emit Invest(\r\n            msg.sender,\r\n            _basketIndex,\r\n            userBalance[msg.sender].basketBalances[_basketIndex].investedAmount\r\n        );\r\n\r\n        return\r\n            userBalance[msg.sender].basketBalances[_basketIndex].investedAmount;\r\n    }\r\n\r\n    function disinvest(\r\n        uint256 _basketIndex,\r\n        uint256 _percent,\r\n        uint256 _protocolYieldRatio,\r\n        bool shouldRestake\r\n    ) public payable nonReentrant stopInEmergency returns (uint256) {\r\n        require(\r\n            _basketIndex < availableBasketsSize,\r\n            \"Basket index out of bounds\"\r\n        );\r\n\r\n        require(\r\n            _percent > 0 && _percent <= 100,\r\n            \"Percent has to in interval (0, 100]\"\r\n        );\r\n        require(\r\n            _protocolYieldRatio <= 100,\r\n            \"Protocol yield ratio not in interval (0, 100]\"\r\n        );\r\n\r\n        // Disinvest uniswap pools\r\n        for (\r\n            uint256 p = 0;\r\n            p < availableBaskets[_basketIndex].uniswapPools.length;\r\n            p++\r\n        ) {\r\n            uint256 currentBalance = userBalance[msg.sender]\r\n                .basketBalances[_basketIndex]\r\n                .uniswapPools[p];\r\n\r\n            require(currentBalance > 0, \"balance must be positive\");\r\n\r\n            UniswapV2Pool memory pool = availableBaskets[_basketIndex]\r\n                .uniswapPools[p];\r\n            uint256 disinvestAmount = (currentBalance).mul(_percent).div(100);\r\n\r\n            (uint256 amountA, uint256 amountB) = ReefUniswap\r\n                ._disinvestFromUniswapPool(\r\n                address(0),\r\n                pool.uniswapToken0,\r\n                pool.uniswapToken1,\r\n                disinvestAmount\r\n            );\r\n\r\n            userBalance[msg.sender].basketBalances[_basketIndex]\r\n                .uniswapPools[p] = userBalance[msg.sender]\r\n                .basketBalances[_basketIndex]\r\n                .uniswapPools[p]\r\n                .sub(disinvestAmount);\r\n        }\r\n\r\n        // Disinvest tokens\r\n        for (\r\n            uint256 t = 0;\r\n            t < availableBaskets[_basketIndex].tokens.length;\r\n            t++\r\n        ) {\r\n            uint256 currentBalance = userBalance[msg.sender]\r\n                .basketBalances[_basketIndex]\r\n                .tokens[t];\r\n\r\n            require(currentBalance > 0, \"balance must be positive\");\r\n\r\n            Token memory token = availableBaskets[_basketIndex].tokens[t];\r\n            uint256 disinvestAmount = (currentBalance).mul(_percent).div(100);\r\n\r\n            if (ReefUniswap.canSwapFromV2(token.tokenAddress, address(0))) {\r\n                uint256 tokenBought = ReefUniswap.swapFromV2(\r\n                    token.tokenAddress,\r\n                    address(0),\r\n                    disinvestAmount\r\n                );\r\n\r\n                TransferHelper.safeTransfer(\r\n                    address(0),\r\n                    msg.sender,\r\n                    tokenBought\r\n                );\r\n            }\r\n\r\n            userBalance[msg.sender].basketBalances[_basketIndex]\r\n                .tokens[t] = userBalance[msg.sender]\r\n                .basketBalances[_basketIndex]\r\n                .tokens[t]\r\n                .sub(disinvestAmount);\r\n        }\r\n\r\n        // Disinvest Balancer pools\r\n        for (\r\n            uint256 b = 0;\r\n            b < availableBaskets[_basketIndex].balancerPools.length;\r\n            b++\r\n        ) {\r\n            require(\r\n                userBalance[msg.sender].basketBalances[_basketIndex]\r\n                    .balancerPools[b] > 0,\r\n                \"balance must be positive\"\r\n            );\r\n\r\n            uint256 disinvestAmount = (\r\n                userBalance[msg.sender].basketBalances[_basketIndex]\r\n                    .balancerPools[b]\r\n            )\r\n                .mul(_percent)\r\n                .div(100);\r\n\r\n            IERC20(availableBaskets[_basketIndex].balancerPools[b].poolAddress)\r\n                .approve(address(ReefBalancer), disinvestAmount);\r\n\r\n            // TODO: figure out slippage\r\n            uint256 balancerTokens = ReefBalancer.disinvestFromBalancerPool(\r\n                payable(address(this)),\r\n                address(0),\r\n                availableBaskets[_basketIndex].balancerPools[b].poolAddress,\r\n                disinvestAmount,\r\n                1\r\n            );\r\n\r\n            userBalance[msg.sender].basketBalances[_basketIndex]\r\n                .balancerPools[b] = userBalance[msg.sender]\r\n                .basketBalances[_basketIndex]\r\n                .balancerPools[b]\r\n                .sub(disinvestAmount);\r\n        }\r\n\r\n        // Disinvest Mooniswap pools\r\n        for (\r\n            uint256 b = 0;\r\n            b < availableBaskets[_basketIndex].mooniswapPools.length;\r\n            b++\r\n        ) {\r\n            require(\r\n                userBalance[msg.sender].basketBalances[_basketIndex]\r\n                    .mooniswapPools[b] > 0,\r\n                \"balance must be positive\"\r\n            );\r\n\r\n            uint256 disinvestAmount = (\r\n                userBalance[msg.sender].basketBalances[_basketIndex]\r\n                    .mooniswapPools[b]\r\n            )\r\n                .mul(_percent)\r\n                .div(100);\r\n\r\n            // TODO: figure out slippage\r\n            ReefMooniswapV1.disinvestFromMooniswapPool(\r\n                address(0),\r\n                availableBaskets[_basketIndex].mooniswapPools[b].poolAddress,\r\n                disinvestAmount\r\n            );\r\n\r\n            userBalance[msg.sender].basketBalances[_basketIndex]\r\n                .mooniswapPools[b] = userBalance[msg.sender]\r\n                .basketBalances[_basketIndex]\r\n                .mooniswapPools[b]\r\n                .sub(disinvestAmount);\r\n        }\r\n\r\n        // Update user balance\r\n        uint256 basketDisinvestAmount = (\r\n            userBalance[msg.sender].basketBalances[_basketIndex].investedAmount\r\n        )\r\n            .mul(_percent)\r\n            .div(100);\r\n\r\n        userBalance[msg.sender].basketBalances[_basketIndex]\r\n            .investedAmount = userBalance[msg.sender]\r\n            .basketBalances[_basketIndex]\r\n            .investedAmount\r\n            .sub(basketDisinvestAmount);\r\n\r\n        emit Disinvest(msg.sender, _basketIndex, basketDisinvestAmount);\r\n\r\n        // Update current funds\r\n        currentInvestedFunds = currentInvestedFunds.sub(basketDisinvestAmount);\r\n\r\n        // Stake the profit into REEF tokens\r\n        if (address(this).balance > basketDisinvestAmount) {\r\n            uint256 profit = address(this).balance - basketDisinvestAmount;\r\n\r\n            // Return the liquidation\r\n            uint256 yieldRatio = protocolTokenDisinvestPercentage >\r\n                _protocolYieldRatio\r\n                ? protocolTokenDisinvestPercentage\r\n                : _protocolYieldRatio;\r\n\r\n            if (yieldRatio > 0) {\r\n                // Check if we restake into the ETH/protocolToken pool\r\n                if (shouldRestake) {\r\n                    ReefUniswap._investIntoUniswapPool(\r\n                        address(0),\r\n                        wethTokenAddress,\r\n                        protocolTokenAddress,\r\n                        msg.sender,\r\n                        profit.mul(yieldRatio).div(100)\r\n                    );\r\n                } else {\r\n                    uint256 protocolTokenAmount = ReefUniswap.swapFromV2(\r\n                        address(0),\r\n                        protocolTokenAddress,\r\n                        profit.mul(yieldRatio).div(100)\r\n                    );\r\n\r\n                    if (protocolTokenAmount > 0) {\r\n                        TransferHelper.safeTransfer(\r\n                            protocolTokenAddress,\r\n                            msg.sender,\r\n                            protocolTokenAmount\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the remaining ETH\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function setProtocolTokenDisinvestPercentage(uint16 _newPercentage)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _newPercentage >= 0 && _newPercentage < 100,\r\n            \"_newPercentage must be between 0 and 100.\"\r\n        );\r\n        protocolTokenDisinvestPercentage = _newPercentage;\r\n    }\r\n\r\n    function setProtocolTokenAddress(address _newProtocolTokenAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        protocolTokenAddress = _newProtocolTokenAddress;\r\n    }\r\n\r\n    function setMinimalInvestment(uint256 _minimalInvestment) public onlyOwner {\r\n        minimalInvestment = _minimalInvestment;\r\n    }\r\n\r\n    function setMaxInvestedFunds(uint256 _maxInvestedFunds) public onlyOwner {\r\n        require(\r\n            _maxInvestedFunds >= currentInvestedFunds,\r\n            \"Max funds lower than current funds.\"\r\n        );\r\n        maxInvestedFunds = _maxInvestedFunds;\r\n    }\r\n\r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert(\"Temporarily Paused\");\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {\r\n        uint256 qty = _TokenAddress.balanceOf(address(this));\r\n        TransferHelper.safeTransfer(address(_TokenAddress), owner(), qty);\r\n    }\r\n\r\n    // to Pause the contract\r\n    function toggleContractActive() public onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    // to withdraw any ETH balance sitting in the contract\r\n    function withdraw() public onlyOwner {\r\n        uint256 contractBalance = address(this).balance;\r\n        address payable _to = payable(owner());\r\n        _to.transfer(contractBalance);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolTokenDisinvestPercentage\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_protocolTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"basketId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"BasketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"basketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disinvestedAmount\",\"type\":\"uint256\"}],\"name\":\"Disinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"basketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableBaskets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableBasketsSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_basketIndex\",\"type\":\"uint256\"}],\"name\":\"balanceOfBalancerPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_basketIndex\",\"type\":\"uint256\"}],\"name\":\"balanceOfMooniswapPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_basketIndex\",\"type\":\"uint256\"}],\"name\":\"balanceOfTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_basketIndex\",\"type\":\"uint256\"}],\"name\":\"balanceOfUniswapPools\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address[2][]\",\"name\":\"_uniswapPools\",\"type\":\"address[2][]\"},{\"internalType\":\"uint8[]\",\"name\":\"_uniswapPoolsWeights\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_tokensWeights\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_balancerPools\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_balancerPoolsWeights\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_mooniswapPools\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_mooniswapPoolsWeights\",\"type\":\"uint8[]\"}],\"name\":\"createBasket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentInvestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_basketIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolYieldRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldRestake\",\"type\":\"bool\"}],\"name\":\"disinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_basketIndex\",\"type\":\"uint256\"}],\"name\":\"getAvailableBasketBalancerPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_basketIndex\",\"type\":\"uint256\"}],\"name\":\"getAvailableBasketMooniswapPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_basketIndex\",\"type\":\"uint8\"}],\"name\":\"getAvailableBasketTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_basketIndex\",\"type\":\"uint256\"}],\"name\":\"getAvailableBasketUniswapPools\",\"outputs\":[{\"internalType\":\"address[2][]\",\"name\":\"\",\"type\":\"address[2][]\"},{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_TokenAddress\",\"type\":\"address\"}],\"name\":\"inCaseTokengetsStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_basketIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minPoolTokens\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_basketIndex\",\"type\":\"uint256\"}],\"name\":\"investedAmountInBasket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxInvestedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTokenDisinvestPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxInvestedFunds\",\"type\":\"uint256\"}],\"name\":\"setMaxInvestedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimalInvestment\",\"type\":\"uint256\"}],\"name\":\"setMinimalInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProtocolTokenAddress\",\"type\":\"address\"}],\"name\":\"setProtocolTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newPercentage\",\"type\":\"uint16\"}],\"name\":\"setProtocolTokenDisinvestPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ReefBasket", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000894a180cf0bdf32ff6b3268a1ae95d2fbc5500ab", "EVMVersion": "Default", "Library": "ReefUniswap:43b2474b8a63a1740771a101ccef1a38ece016c5;ReefMooniswapV1:8ef8c25a772e755e987a4e74fe5c72f909eff7e6;ReefBalancer:dc1cbabbfc80d035af3589384ddde9b981266934", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f8e0a7e1a3238f508c2be97af9b376cc71fcbfd5648d60e486385ae6e1413e12"}