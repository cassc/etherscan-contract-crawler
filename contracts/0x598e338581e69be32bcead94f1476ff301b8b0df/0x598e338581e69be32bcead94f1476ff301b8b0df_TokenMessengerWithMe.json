{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/TokenMessengerWithMetadataWrapper.sol\": {\r\n      \"content\": \"pragma solidity 0.8.22;\\n\\nimport \\\"lib/evm-cctp-contracts/src/TokenMessenger.sol\\\";\\nimport \\\"lib/cctp-contracts/src/TokenMessengerWithMetadata.sol\\\";\\nimport \\\"lib/solmate/src/auth/Owned.sol\\\";\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\n\\n/**\\n * @title TokenMessengerWithMetadataWrapper\\n * @notice A wrapper for a CCTP TokenMessengerWithMetadata contract that collects fees from USDC transfers.\\n *  This contract -> TokenMessengerWithMetadata -> TokenMessenger\\n *\\n * depositForBurn allows users to specify any destination domain.\\n * depositForBurnIBC is for minting and forwarding from Noble.\\n *  It allows users to supply additional IBC forwarding metadata after initiating a transfer to Noble.\\n * \\n */\\ncontract TokenMessengerWithMetadataWrapper is Owned(msg.sender) {\\n    // ============ Events ============\\n    event Collect(\\n        bytes32 mintRecipient,\\n        uint256 amountBurned, \\n        uint256 fee,\\n        uint32 source,\\n        uint32 dest\\n    );\\n\\n    // ============ Errors ============\\n    error TokenMessengerNotSet();\\n    error TokenNotSupported();\\n    error FeeNotFound();\\n    error BurnAmountTooLow();\\n    error Unauthorized();\\n    error PercFeeTooHigh();\\n    \\n    // ============ State Variables ============\\n    // Circle contract for burning tokens\\n    TokenMessenger public immutable tokenMessenger;\\n    // Noble contract for including IBC forwarding metadata\\n    TokenMessengerWithMetadata public tokenMessengerWithMetadata;\\n    // the domain id this contract is deployed on\\n    uint32 public immutable currentDomainId;\\n    // noble domain id\\n    uint32 public constant nobleDomainId = 4;\\n    // address that can collect fees\\n    address public collector;\\n    // address that can update fees\\n    address public feeUpdater;\\n    // USDC address for this domain\\n    address public immutable tokenAddress;\\n\\n    struct Fee {\\n        // percentage fee in bips\\n        uint16 percFee;\\n        // flat fee in uusdc (1 uusdc = 10^-6 usdc)\\n        uint64 flatFee;\\n        // needed for null check\\n        bool isInitialized;\\n    }\\n\\n    // destination domain id -> fee\\n    mapping(uint32 => Fee) public feeMap;\\n\\n    // ============ Constructor ============\\n    /**\\n     * @param _tokenMessenger TokenMessenger address\\n     * @param _tokenMessengerWithMetadata TokenMessengerWithMetadata address\\n     * @param _currentDomainId the domain id this contract is deployed on\\n     * @param _collector address that can collect fees\\n     * @param _feeUpdater address that can update fees\\n     * @param _tokenAddress USDC erc20 token address for this domain\\n     */\\n    constructor(\\n        address _tokenMessenger,\\n        address _tokenMessengerWithMetadata,\\n        uint32 _currentDomainId,\\n        address _collector,\\n        address _feeUpdater,\\n        address _tokenAddress\\n    ) {\\n        if (_tokenMessenger == address(0)) {\\n            revert TokenMessengerNotSet();\\n        }\\n        tokenMessenger = TokenMessenger(_tokenMessenger);\\n        tokenMessengerWithMetadata = TokenMessengerWithMetadata(_tokenMessengerWithMetadata);\\n\\n        currentDomainId = _currentDomainId;\\n        collector = _collector;\\n        feeUpdater = _feeUpdater;\\n        tokenAddress = _tokenAddress;\\n\\n        ERC20 token = ERC20(tokenAddress);\\n        token.approve(_tokenMessenger, type(uint256).max);\\n        token.approve(_tokenMessengerWithMetadata, type(uint256).max);\\n    }\\n\\n    // ============ External Functions ============\\n    /**\\n     * @notice Wrapper function for TokenMessenger.depositForBurn()\\n     * Can specify any destination domain, including invalid ones.\\n     *\\n     * @param amount - the burn amount\\n     * @param destinationDomain - domain id the funds will be minted on\\n     * @param mintRecipient - address receiving minted tokens on destination domain\\n     */\\n    function depositForBurn(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient\\n    ) external {\\n        // collect fee\\n        (uint256 fee, uint256 remainder) = calculateFee(amount, destinationDomain);\\n        ERC20 token = ERC20(tokenAddress);\\n        token.transferFrom(msg.sender, address(this), amount);\\n\\n        tokenMessenger.depositForBurn(\\n            remainder,\\n            destinationDomain,\\n            mintRecipient,\\n            tokenAddress\\n        );\\n\\n        emit Collect(mintRecipient, remainder, fee, currentDomainId, destinationDomain);\\n    }\\n\\n    /**\\n     * @notice Wrapper function for TokenMessenger.depositForBurn().\\n     * Supports EIP-20 approvals via EIP-712 secp256k1 signatures\\n     * Can specify any destination domain, including invalid ones.\\n     *\\n     * @param amount - the burn amount\\n     * @param destinationDomain - domain id the funds will be minted on\\n     * @param mintRecipient - address receiving minted tokens on destination domain\\n     * @param deadline - a timestamp after which the signature is invalid\\n     * @param v, r, s - components of the EIP-712 signature that proves the owner\u2019s consent\\n     */\\n    function depositForBurnPermit(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        // collect fee\\n        (uint256 fee, uint256 remainder) = calculateFee(amount, destinationDomain);\\n        _transferAndPermit(amount, deadline, v, r, s);\\n\\n        tokenMessenger.depositForBurn(\\n            remainder,\\n            destinationDomain,\\n            mintRecipient,\\n            tokenAddress\\n        );\\n\\n        emit Collect(mintRecipient, remainder, fee, currentDomainId, destinationDomain);\\n    }\\n\\n    /**\\n     * @notice Wrapper function for \\\"depositForBurn\\\" that includes metadata.\\n     * Only for minting to Noble (destination domain is hardcoded).\\n     *\\n     * @param channel channel id to be used when ibc forwarding\\n     * @param destinationBech32Prefix bech32 prefix used for address encoding once ibc forwarded\\n     * @param destinationRecipient address of recipient once ibc forwarded\\n     * @param amount amount of tokens to burn\\n     * @param mintRecipient address of mint recipient on destination domain\\n     * @param memo arbitrary memo to be included when ibc forwarding\\n     */\\n    function depositForBurnIBC(\\n        uint64 channel,\\n        bytes32 destinationBech32Prefix,\\n        bytes32 destinationRecipient,\\n        uint256 amount,\\n        bytes32 mintRecipient,\\n        bytes calldata memo\\n    ) external {\\n        // collect fee\\n        (uint256 fee, uint256 remainder) = calculateFee(amount, nobleDomainId);\\n\\n        ERC20 token = ERC20(tokenAddress);\\n        token.transferFrom(msg.sender, address(this), amount);\\n\\n        tokenMessengerWithMetadata.depositForBurn(\\n            channel,\\n            destinationBech32Prefix,\\n            destinationRecipient,\\n            remainder,\\n            mintRecipient,\\n            tokenAddress,\\n            memo\\n        );\\n\\n        emit Collect(mintRecipient, remainder, fee, currentDomainId, nobleDomainId);\\n    }\\n\\n    /**\\n     * @notice Wrapper function for \\\"depositForBurn\\\" that includes metadata.\\n     * Only for minting to Noble (destination domain is hardcoded).\\n     * Supports EIP-20 approvals via EIP-712 secp256k1 signatures\\n     *\\n     * @param channel channel id to be used when ibc forwarding\\n     * @param destinationBech32Prefix bech32 prefix used for address encoding once ibc forwarded\\n     * @param destinationRecipient address of recipient once ibc forwarded\\n     * @param amount amount of tokens to burn\\n     * @param mintRecipient address of mint recipient on destination domain\\n     * @param memo arbitrary memo to be included when ibc forwarding\\n     * @param deadline - a timestamp after which the signature is invalid\\n     * @param v, r, s - components of the EIP-712 signature that proves the owner\u2019s consent\\n     */\\n    function depositForBurnIBCPermit(\\n        uint64 channel,\\n        bytes32 destinationBech32Prefix,\\n        bytes32 destinationRecipient,\\n        uint256 amount,\\n        bytes32 mintRecipient,\\n        bytes calldata memo,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        // collect fee\\n        (uint256 fee, uint256 remainder) = calculateFee(amount, nobleDomainId);\\n        _transferAndPermit(amount, deadline, v, r, s);\\n\\n        tokenMessengerWithMetadata.depositForBurn(\\n            channel,\\n            destinationBech32Prefix,\\n            destinationRecipient,\\n            remainder,\\n            mintRecipient,\\n            tokenAddress,\\n            memo\\n        );\\n\\n        emit Collect(mintRecipient, remainder, fee, currentDomainId, nobleDomainId);\\n    }\\n\\n    function _transferAndPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) private {\\n        ERC20 token = ERC20(tokenAddress);\\n        token.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        token.transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function updateTokenMessengerWithMetadata(address newTokenMessengerWithMetadata) external onlyOwner {\\n        ERC20 token = ERC20(tokenAddress);\\n        token.approve(address(tokenMessengerWithMetadata), 0);\\n\\n        tokenMessengerWithMetadata = TokenMessengerWithMetadata(newTokenMessengerWithMetadata);\\n        token.approve(newTokenMessengerWithMetadata, type(uint256).max);\\n    }\\n\\n    function calculateFee(uint256 amount, uint32 destinationDomain) private view returns (uint256, uint256) {\\n        Fee memory entry = feeMap[destinationDomain];\\n        if (!entry.isInitialized) {\\n            revert FeeNotFound();\\n        }\\n\\n        uint256 fee = (amount * entry.percFee) / 10000 + entry.flatFee;\\n        if (amount <= fee) {\\n            revert BurnAmountTooLow();\\n        }\\n        // fee, remainder\\n        return (fee, amount-fee);\\n    }\\n\\n    /**\\n     * Set fee for a given destination domain.\\n     */\\n    function setFee(uint32 destinationDomain, uint16 percFee, uint64 flatFee) external {\\n        if (msg.sender != feeUpdater) {\\n            revert Unauthorized();\\n        }\\n        if (percFee > 100) { // 1%\\n            revert PercFeeTooHigh();\\n        }\\n        feeMap[destinationDomain] = Fee(percFee, flatFee, true);\\n    }\\n\\n    function updateOwner(address newOwner) external onlyOwner {\\n        owner = newOwner;\\n    }\\n\\n    function updateCollector(address newCollector) external onlyOwner {\\n        collector = newCollector;\\n    }\\n\\n    function updateFeeUpdater(address newFeeUpdater) external onlyOwner {\\n        feeUpdater = newFeeUpdater;\\n    }\\n\\n    function withdrawFees() external {\\n        if (msg.sender != collector) {\\n            revert Unauthorized();\\n        }\\n        uint256 balance = ERC20(tokenAddress).balanceOf(address(this));\\n        ERC20 token = ERC20(tokenAddress);\\n        token.transfer(collector, balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/TokenMessenger.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\nimport \\\"./interfaces/IMessageHandler.sol\\\";\\nimport \\\"./interfaces/ITokenMinter.sol\\\";\\nimport \\\"./interfaces/IMintBurnToken.sol\\\";\\nimport \\\"./interfaces/IMessageTransmitter.sol\\\";\\nimport \\\"./messages/BurnMessage.sol\\\";\\nimport \\\"./messages/Message.sol\\\";\\nimport \\\"./roles/Rescuable.sol\\\";\\n\\n/**\\n * @title TokenMessenger\\n * @notice Sends messages and receives messages to/from MessageTransmitters\\n * and to/from TokenMinters\\n */\\ncontract TokenMessenger is IMessageHandler, Rescuable {\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a DepositForBurn message is sent\\n     * @param nonce unique nonce reserved by message\\n     * @param burnToken address of token burnt on source domain\\n     * @param amount deposit amount\\n     * @param depositor address where deposit is transferred from\\n     * @param mintRecipient address receiving minted tokens on destination domain as bytes32\\n     * @param destinationDomain destination domain\\n     * @param destinationTokenMessenger address of TokenMessenger on destination domain as bytes32\\n     * @param destinationCaller authorized caller as bytes32 of receiveMessage() on destination domain, if not equal to bytes32(0).\\n     * If equal to bytes32(0), any address can call receiveMessage().\\n     */\\n    event DepositForBurn(\\n        uint64 indexed nonce,\\n        address indexed burnToken,\\n        uint256 amount,\\n        address indexed depositor,\\n        bytes32 mintRecipient,\\n        uint32 destinationDomain,\\n        bytes32 destinationTokenMessenger,\\n        bytes32 destinationCaller\\n    );\\n\\n    /**\\n     * @notice Emitted when tokens are minted\\n     * @param mintRecipient recipient address of minted tokens\\n     * @param amount amount of minted tokens\\n     * @param mintToken contract address of minted token\\n     */\\n    event MintAndWithdraw(\\n        address indexed mintRecipient,\\n        uint256 amount,\\n        address indexed mintToken\\n    );\\n\\n    /**\\n     * @notice Emitted when a remote TokenMessenger is added\\n     * @param domain remote domain\\n     * @param tokenMessenger TokenMessenger on remote domain\\n     */\\n    event RemoteTokenMessengerAdded(uint32 domain, bytes32 tokenMessenger);\\n\\n    /**\\n     * @notice Emitted when a remote TokenMessenger is removed\\n     * @param domain remote domain\\n     * @param tokenMessenger TokenMessenger on remote domain\\n     */\\n    event RemoteTokenMessengerRemoved(uint32 domain, bytes32 tokenMessenger);\\n\\n    /**\\n     * @notice Emitted when the local minter is added\\n     * @param localMinter address of local minter\\n     * @notice Emitted when the local minter is added\\n     */\\n    event LocalMinterAdded(address localMinter);\\n\\n    /**\\n     * @notice Emitted when the local minter is removed\\n     * @param localMinter address of local minter\\n     * @notice Emitted when the local minter is removed\\n     */\\n    event LocalMinterRemoved(address localMinter);\\n\\n    // ============ Libraries ============\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using BurnMessage for bytes29;\\n    using Message for bytes29;\\n\\n    // ============ State Variables ============\\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\\n    IMessageTransmitter public immutable localMessageTransmitter;\\n\\n    // Version of message body format\\n    uint32 public immutable messageBodyVersion;\\n\\n    // Minter responsible for minting and burning tokens on the local domain\\n    ITokenMinter public localMinter;\\n\\n    // Valid TokenMessengers on remote domains\\n    mapping(uint32 => bytes32) public remoteTokenMessengers;\\n\\n    // ============ Modifiers ============\\n    /**\\n     * @notice Only accept messages from a registered TokenMessenger contract on given remote domain\\n     * @param domain The remote domain\\n     * @param tokenMessenger The address of the TokenMessenger contract for the given remote domain\\n     */\\n    modifier onlyRemoteTokenMessenger(uint32 domain, bytes32 tokenMessenger) {\\n        require(\\n            _isRemoteTokenMessenger(domain, tokenMessenger),\\n            \\\"Remote TokenMessenger unsupported\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only accept messages from the registered message transmitter on local domain\\n     */\\n    modifier onlyLocalMessageTransmitter() {\\n        // Caller must be the registered message transmitter for this domain\\n        require(_isLocalMessageTransmitter(), \\\"Invalid message transmitter\\\");\\n        _;\\n    }\\n\\n    // ============ Constructor ============\\n    /**\\n     * @param _messageTransmitter Message transmitter address\\n     * @param _messageBodyVersion Message body version\\n     */\\n    constructor(address _messageTransmitter, uint32 _messageBodyVersion) {\\n        require(\\n            _messageTransmitter != address(0),\\n            \\\"MessageTransmitter not set\\\"\\n        );\\n        localMessageTransmitter = IMessageTransmitter(_messageTransmitter);\\n        messageBodyVersion = _messageBodyVersion;\\n    }\\n\\n    // ============ External Functions  ============\\n    /**\\n     * @notice Deposits and burns tokens from sender to be minted on destination domain.\\n     * Emits a `DepositForBurn` event.\\n     * @dev reverts if:\\n     * - given burnToken is not supported\\n     * - given destinationDomain has no TokenMessenger registered\\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\\n     * to this contract is less than `amount`.\\n     * - burn() reverts. For example, if `amount` is 0.\\n     * - MessageTransmitter returns false or reverts.\\n     * @param amount amount of tokens to burn\\n     * @param destinationDomain destination domain\\n     * @param mintRecipient address of mint recipient on destination domain\\n     * @param burnToken address of contract to burn deposited tokens, on local domain\\n     * @return _nonce unique nonce reserved by message\\n     */\\n    function depositForBurn(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken\\n    ) external returns (uint64 _nonce) {\\n        return\\n            _depositForBurn(\\n                amount,\\n                destinationDomain,\\n                mintRecipient,\\n                burnToken,\\n                // (bytes32(0) here indicates that any address can call receiveMessage()\\n                // on the destination domain, triggering mint to specified `mintRecipient`)\\n                bytes32(0)\\n            );\\n    }\\n\\n    /**\\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\\n     * on the destination domain must be called by `destinationCaller`.\\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\\n     * Emits a `DepositForBurn` event.\\n     * @dev reverts if:\\n     * - given destinationCaller is zero address\\n     * - given burnToken is not supported\\n     * - given destinationDomain has no TokenMessenger registered\\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\\n     * to this contract is less than `amount`.\\n     * - burn() reverts. For example, if `amount` is 0.\\n     * - MessageTransmitter returns false or reverts.\\n     * @param amount amount of tokens to burn\\n     * @param destinationDomain destination domain\\n     * @param mintRecipient address of mint recipient on destination domain\\n     * @param burnToken address of contract to burn deposited tokens, on local domain\\n     * @param destinationCaller caller on the destination domain, as bytes32\\n     * @return nonce unique nonce reserved by message\\n     */\\n    function depositForBurnWithCaller(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken,\\n        bytes32 destinationCaller\\n    ) external returns (uint64 nonce) {\\n        // Destination caller must be nonzero. To allow any destination caller, use depositForBurn().\\n        require(destinationCaller != bytes32(0), \\\"Invalid destination caller\\\");\\n\\n        return\\n            _depositForBurn(\\n                amount,\\n                destinationDomain,\\n                mintRecipient,\\n                burnToken,\\n                destinationCaller\\n            );\\n    }\\n\\n    /**\\n     * @notice Replace a BurnMessage to change the mint recipient and/or\\n     * destination caller. Allows the sender of a previous BurnMessage\\n     * (created by depositForBurn or depositForBurnWithCaller)\\n     * to send a new BurnMessage to replace the original.\\n     * The new BurnMessage will reuse the amount and burn token of the original,\\n     * without requiring a new deposit.\\n     * @dev The new message will reuse the original message's nonce. For a\\n     * given nonce, all replacement message(s) and the original message are\\n     * valid to broadcast on the destination domain, until the first message\\n     * at the nonce confirms, at which point all others are invalidated.\\n     * Note: The msg.sender of the replaced message must be the same as the\\n     * msg.sender of the original message.\\n     * @param originalMessage original message bytes (to replace)\\n     * @param originalAttestation original attestation bytes\\n     * @param newDestinationCaller the new destination caller, which may be the\\n     * same as the original destination caller, a new destination caller, or an empty\\n     * destination caller (bytes32(0), indicating that any destination caller is valid.)\\n     * @param newMintRecipient the new mint recipient, which may be the same as the\\n     * original mint recipient, or different.\\n     */\\n    function replaceDepositForBurn(\\n        bytes calldata originalMessage,\\n        bytes calldata originalAttestation,\\n        bytes32 newDestinationCaller,\\n        bytes32 newMintRecipient\\n    ) external {\\n        bytes29 _originalMsg = originalMessage.ref(0);\\n        _originalMsg._validateMessageFormat();\\n        bytes29 _originalMsgBody = _originalMsg._messageBody();\\n        _originalMsgBody._validateBurnMessageFormat();\\n\\n        bytes32 _originalMsgSender = _originalMsgBody._getMessageSender();\\n        // _originalMsgSender must match msg.sender of original message\\n        require(\\n            msg.sender == Message.bytes32ToAddress(_originalMsgSender),\\n            \\\"Invalid sender for message\\\"\\n        );\\n        require(\\n            newMintRecipient != bytes32(0),\\n            \\\"Mint recipient must be nonzero\\\"\\n        );\\n\\n        bytes32 _burnToken = _originalMsgBody._getBurnToken();\\n        uint256 _amount = _originalMsgBody._getAmount();\\n\\n        bytes memory _newMessageBody = BurnMessage._formatMessage(\\n            messageBodyVersion,\\n            _burnToken,\\n            newMintRecipient,\\n            _amount,\\n            _originalMsgSender\\n        );\\n\\n        localMessageTransmitter.replaceMessage(\\n            originalMessage,\\n            originalAttestation,\\n            _newMessageBody,\\n            newDestinationCaller\\n        );\\n\\n        emit DepositForBurn(\\n            _originalMsg._nonce(),\\n            Message.bytes32ToAddress(_burnToken),\\n            _amount,\\n            msg.sender,\\n            newMintRecipient,\\n            _originalMsg._destinationDomain(),\\n            _originalMsg._recipient(),\\n            newDestinationCaller\\n        );\\n    }\\n\\n    /**\\n     * @notice Handles an incoming message received by the local MessageTransmitter,\\n     * and takes the appropriate action. For a burn message, mints the\\n     * associated token to the requested recipient on the local domain.\\n     * @dev Validates the local sender is the local MessageTransmitter, and the\\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\\n     * @param remoteDomain The domain where the message originated from.\\n     * @param sender The sender of the message (remote TokenMessenger).\\n     * @param messageBody The message body bytes.\\n     * @return success Bool, true if successful.\\n     */\\n    function handleReceiveMessage(\\n        uint32 remoteDomain,\\n        bytes32 sender,\\n        bytes calldata messageBody\\n    )\\n        external\\n        override\\n        onlyLocalMessageTransmitter\\n        onlyRemoteTokenMessenger(remoteDomain, sender)\\n        returns (bool)\\n    {\\n        bytes29 _msg = messageBody.ref(0);\\n        _msg._validateBurnMessageFormat();\\n        require(\\n            _msg._getVersion() == messageBodyVersion,\\n            \\\"Invalid message body version\\\"\\n        );\\n\\n        bytes32 _mintRecipient = _msg._getMintRecipient();\\n        bytes32 _burnToken = _msg._getBurnToken();\\n        uint256 _amount = _msg._getAmount();\\n\\n        ITokenMinter _localMinter = _getLocalMinter();\\n\\n        _mintAndWithdraw(\\n            address(_localMinter),\\n            remoteDomain,\\n            _burnToken,\\n            Message.bytes32ToAddress(_mintRecipient),\\n            _amount\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Add the TokenMessenger for a remote domain.\\n     * @dev Reverts if there is already a TokenMessenger set for domain.\\n     * @param domain Domain of remote TokenMessenger.\\n     * @param tokenMessenger Address of remote TokenMessenger as bytes32.\\n     */\\n    function addRemoteTokenMessenger(uint32 domain, bytes32 tokenMessenger)\\n        external\\n        onlyOwner\\n    {\\n        require(tokenMessenger != bytes32(0), \\\"bytes32(0) not allowed\\\");\\n\\n        require(\\n            remoteTokenMessengers[domain] == bytes32(0),\\n            \\\"TokenMessenger already set\\\"\\n        );\\n\\n        remoteTokenMessengers[domain] = tokenMessenger;\\n        emit RemoteTokenMessengerAdded(domain, tokenMessenger);\\n    }\\n\\n    /**\\n     * @notice Remove the TokenMessenger for a remote domain.\\n     * @dev Reverts if there is no TokenMessenger set for `domain`.\\n     * @param domain Domain of remote TokenMessenger\\n     */\\n    function removeRemoteTokenMessenger(uint32 domain) external onlyOwner {\\n        // No TokenMessenger set for given remote domain.\\n        require(\\n            remoteTokenMessengers[domain] != bytes32(0),\\n            \\\"No TokenMessenger set\\\"\\n        );\\n\\n        bytes32 _removedTokenMessenger = remoteTokenMessengers[domain];\\n        delete remoteTokenMessengers[domain];\\n        emit RemoteTokenMessengerRemoved(domain, _removedTokenMessenger);\\n    }\\n\\n    /**\\n     * @notice Add minter for the local domain.\\n     * @dev Reverts if a minter is already set for the local domain.\\n     * @param newLocalMinter The address of the minter on the local domain.\\n     */\\n    function addLocalMinter(address newLocalMinter) external onlyOwner {\\n        require(newLocalMinter != address(0), \\\"Zero address not allowed\\\");\\n\\n        require(\\n            address(localMinter) == address(0),\\n            \\\"Local minter is already set.\\\"\\n        );\\n\\n        localMinter = ITokenMinter(newLocalMinter);\\n\\n        emit LocalMinterAdded(newLocalMinter);\\n    }\\n\\n    /**\\n     * @notice Remove the minter for the local domain.\\n     * @dev Reverts if the minter of the local domain is not set.\\n     */\\n    function removeLocalMinter() external onlyOwner {\\n        address _localMinterAddress = address(localMinter);\\n        require(_localMinterAddress != address(0), \\\"No local minter is set.\\\");\\n\\n        delete localMinter;\\n        emit LocalMinterRemoved(_localMinterAddress);\\n    }\\n\\n    // ============ Internal Utils ============\\n    /**\\n     * @notice Deposits and burns tokens from sender to be minted on destination domain.\\n     * Emits a `DepositForBurn` event.\\n     * @param _amount amount of tokens to burn (must be non-zero)\\n     * @param _destinationDomain destination domain\\n     * @param _mintRecipient address of mint recipient on destination domain\\n     * @param _burnToken address of contract to burn deposited tokens, on local domain\\n     * @param _destinationCaller caller on the destination domain, as bytes32\\n     * @return nonce unique nonce reserved by message\\n     */\\n    function _depositForBurn(\\n        uint256 _amount,\\n        uint32 _destinationDomain,\\n        bytes32 _mintRecipient,\\n        address _burnToken,\\n        bytes32 _destinationCaller\\n    ) internal returns (uint64 nonce) {\\n        require(_amount > 0, \\\"Amount must be nonzero\\\");\\n        require(_mintRecipient != bytes32(0), \\\"Mint recipient must be nonzero\\\");\\n\\n        bytes32 _destinationTokenMessenger = _getRemoteTokenMessenger(\\n            _destinationDomain\\n        );\\n\\n        ITokenMinter _localMinter = _getLocalMinter();\\n        IMintBurnToken _mintBurnToken = IMintBurnToken(_burnToken);\\n        require(\\n            _mintBurnToken.transferFrom(\\n                msg.sender,\\n                address(_localMinter),\\n                _amount\\n            ),\\n            \\\"Transfer operation failed\\\"\\n        );\\n        _localMinter.burn(_burnToken, _amount);\\n\\n        // Format message body\\n        bytes memory _burnMessage = BurnMessage._formatMessage(\\n            messageBodyVersion,\\n            Message.addressToBytes32(_burnToken),\\n            _mintRecipient,\\n            _amount,\\n            Message.addressToBytes32(msg.sender)\\n        );\\n\\n        uint64 _nonceReserved = _sendDepositForBurnMessage(\\n            _destinationDomain,\\n            _destinationTokenMessenger,\\n            _destinationCaller,\\n            _burnMessage\\n        );\\n\\n        emit DepositForBurn(\\n            _nonceReserved,\\n            _burnToken,\\n            _amount,\\n            msg.sender,\\n            _mintRecipient,\\n            _destinationDomain,\\n            _destinationTokenMessenger,\\n            _destinationCaller\\n        );\\n\\n        return _nonceReserved;\\n    }\\n\\n    /**\\n     * @notice Sends a BurnMessage through the local message transmitter\\n     * @dev calls local message transmitter's sendMessage() function if `_destinationCaller` == bytes32(0),\\n     * or else calls sendMessageWithCaller().\\n     * @param _destinationDomain destination domain\\n     * @param _destinationTokenMessenger address of registered TokenMessenger contract on destination domain, as bytes32\\n     * @param _destinationCaller caller on the destination domain, as bytes32. If `_destinationCaller` == bytes32(0),\\n     * any address can call receiveMessage() on destination domain.\\n     * @param _burnMessage formatted BurnMessage bytes (message body)\\n     * @return nonce unique nonce reserved by message\\n     */\\n    function _sendDepositForBurnMessage(\\n        uint32 _destinationDomain,\\n        bytes32 _destinationTokenMessenger,\\n        bytes32 _destinationCaller,\\n        bytes memory _burnMessage\\n    ) internal returns (uint64 nonce) {\\n        if (_destinationCaller == bytes32(0)) {\\n            return\\n                localMessageTransmitter.sendMessage(\\n                    _destinationDomain,\\n                    _destinationTokenMessenger,\\n                    _burnMessage\\n                );\\n        } else {\\n            return\\n                localMessageTransmitter.sendMessageWithCaller(\\n                    _destinationDomain,\\n                    _destinationTokenMessenger,\\n                    _destinationCaller,\\n                    _burnMessage\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Mints tokens to a recipient\\n     * @param _tokenMinter address of TokenMinter contract\\n     * @param _remoteDomain domain where burned tokens originate from\\n     * @param _burnToken address of token burned\\n     * @param _mintRecipient recipient address of minted tokens\\n     * @param _amount amount of minted tokens\\n     */\\n    function _mintAndWithdraw(\\n        address _tokenMinter,\\n        uint32 _remoteDomain,\\n        bytes32 _burnToken,\\n        address _mintRecipient,\\n        uint256 _amount\\n    ) internal {\\n        ITokenMinter _minter = ITokenMinter(_tokenMinter);\\n        address _mintToken = _minter.mint(\\n            _remoteDomain,\\n            _burnToken,\\n            _mintRecipient,\\n            _amount\\n        );\\n\\n        emit MintAndWithdraw(_mintRecipient, _amount, _mintToken);\\n    }\\n\\n    /**\\n     * @notice return the remote TokenMessenger for the given `_domain` if one exists, else revert.\\n     * @param _domain The domain for which to get the remote TokenMessenger\\n     * @return _tokenMessenger The address of the TokenMessenger on `_domain` as bytes32\\n     */\\n    function _getRemoteTokenMessenger(uint32 _domain)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        bytes32 _tokenMessenger = remoteTokenMessengers[_domain];\\n        require(_tokenMessenger != bytes32(0), \\\"No TokenMessenger for domain\\\");\\n        return _tokenMessenger;\\n    }\\n\\n    /**\\n     * @notice return the local minter address if it is set, else revert.\\n     * @return local minter as ITokenMinter.\\n     */\\n    function _getLocalMinter() internal view returns (ITokenMinter) {\\n        require(address(localMinter) != address(0), \\\"Local minter is not set\\\");\\n        return localMinter;\\n    }\\n\\n    /**\\n     * @notice Return true if the given remote domain and TokenMessenger is registered\\n     * on this TokenMessenger.\\n     * @param _domain The remote domain of the message.\\n     * @param _tokenMessenger The address of the TokenMessenger on remote domain.\\n     * @return true if a remote TokenMessenger is registered for `_domain` and `_tokenMessenger`,\\n     * on this TokenMessenger.\\n     */\\n    function _isRemoteTokenMessenger(uint32 _domain, bytes32 _tokenMessenger)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            _tokenMessenger != bytes32(0) &&\\n            remoteTokenMessengers[_domain] == _tokenMessenger;\\n    }\\n\\n    /**\\n     * @notice Returns true if the message sender is the local registered MessageTransmitter\\n     * @return true if message sender is the registered local message transmitter\\n     */\\n    function _isLocalMessageTransmitter() internal view returns (bool) {\\n        return\\n            address(localMessageTransmitter) != address(0) &&\\n            msg.sender == address(localMessageTransmitter);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/cctp-contracts/src/TokenMessengerWithMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.22;\\n\\nimport \\\"evm-cctp-contracts/src/interfaces/IMintBurnToken.sol\\\";\\nimport \\\"evm-cctp-contracts/src/MessageTransmitter.sol\\\";\\nimport \\\"evm-cctp-contracts/src/TokenMessenger.sol\\\";\\n\\n/**\\n * @title TokenMessengerWithMetadata\\n * @notice A wrapper for a CCTP TokenMessenger contract that allows users to\\n * supply additional metadata when initiating a transfer. This metadata is used\\n * to initiate IBC forwards after transferring to Noble (Destination Domain = 4).\\n */\\ncontract TokenMessengerWithMetadata {\\n    // ============ Events ============\\n    event DepositForBurnMetadata(\\n        uint64 indexed nonce, uint64 indexed metadataNonce, bytes metadata\\n    );\\n\\n    // ============ State Variables ============\\n    TokenMessenger public tokenMessenger;\\n    MessageTransmitter public immutable messageTransmitter;\\n\\n    uint32 public immutable domainNumber;\\n    bytes32 public immutable domainRecipient;\\n\\n    // ============ Constructor ============\\n    /**\\n     * @param _tokenMessenger Token messenger address\\n     * @param _domainNumber Noble's domain number\\n     * @param _domainRecipient Noble's domain recipient\\n     */\\n    constructor(\\n        address _tokenMessenger,\\n        uint32 _domainNumber,\\n        bytes32 _domainRecipient\\n    ) {\\n        require(_tokenMessenger != address(0), \\\"TokenMessenger not set\\\");\\n        tokenMessenger = TokenMessenger(_tokenMessenger);\\n        messageTransmitter = MessageTransmitter(\\n            address(tokenMessenger.localMessageTransmitter())\\n        );\\n\\n        domainNumber = _domainNumber;\\n        domainRecipient = _domainRecipient;\\n    }\\n\\n    // ============ External Functions ============\\n    /**\\n     * @notice Wrapper function for \\\"depositForBurn\\\" that includes metadata.\\n     * Emits a `DepositForBurnMetadata` event.\\n     * @param channel channel id to be used when ibc forwarding\\n     * @param destinationBech32Prefix bech32 prefix used for address encoding once ibc forwarded\\n     * @param destinationRecipient address of recipient once ibc forwarded\\n     * @param amount amount of tokens to burn\\n     * @param mintRecipient address of mint recipient on destination domain\\n     * @param burnToken address of contract to burn deposited tokens, on local domain\\n     * @param memo arbitrary memo to be included when ibc forwarding\\n     * @return nonce unique nonce reserved by message\\n     */\\n    function depositForBurn(\\n        uint64 channel,\\n        bytes32 destinationBech32Prefix,\\n        bytes32 destinationRecipient,\\n        uint256 amount,\\n        bytes32 mintRecipient,\\n        address burnToken,\\n        bytes calldata memo\\n    ) external returns (uint64 nonce) {\\n        uint64 reservedNonce = messageTransmitter.nextAvailableNonce();\\n        bytes32 sender = bytes32(uint256(uint160(msg.sender)));\\n        bytes memory metadata = abi.encodePacked(\\n            reservedNonce,\\n            sender,\\n            channel,\\n            destinationBech32Prefix,\\n            destinationRecipient,\\n            memo\\n        );\\n\\n        return rawDepositForBurn(amount, mintRecipient, burnToken, metadata);\\n    }\\n\\n    /**\\n     * @notice Wrapper function for \\\"depositForBurn\\\" that includes metadata.\\n     * Emits a `DepositForBurnMetadata` event.\\n     * @param amount amount of tokens to burn\\n     * @param mintRecipient address of mint recipient on destination domain\\n     * @param burnToken address of contract to burn deposited tokens, on local domain\\n     * @param metadata custom metadata to be included with transfer\\n     * @return nonce unique nonce reserved by message\\n     */\\n    function rawDepositForBurn(\\n        uint256 amount,\\n        bytes32 mintRecipient,\\n        address burnToken,\\n        bytes memory metadata\\n    ) public returns (uint64 nonce) {\\n        IMintBurnToken token = IMintBurnToken(burnToken);\\n        token.transferFrom(msg.sender, address(this), amount);\\n        token.approve(address(tokenMessenger), amount);\\n\\n        nonce = tokenMessenger.depositForBurn(\\n            amount, domainNumber, mintRecipient, burnToken\\n        );\\n\\n        uint64 metadataNonce = messageTransmitter.sendMessage(\\n            domainNumber, domainRecipient, metadata\\n        );\\n\\n        emit DepositForBurnMetadata(nonce, metadataNonce, metadata);\\n    }\\n\\n    /**\\n     * @notice Wrapper function for \\\"depositForBurnWithCaller\\\" that includes metadata.\\n     * Emits a `DepositForBurnMetadata` event.\\n     * @param channel channel id to be used when ibc forwarding\\n     * @param destinationBech32Prefix bech32 prefix used for address encoding once ibc forwarded\\n     * @param destinationRecipient address of recipient once ibc forwarded\\n     * @param amount amount of tokens to burn\\n     * @param mintRecipient address of mint recipient on destination domain\\n     * @param burnToken address of contract to burn deposited tokens, on local domain\\n     * @param destinationCaller caller on the destination domain, as bytes32\\n     * @param memo arbitrary memo to be included when ibc forwarding\\n     * @return nonce unique nonce reserved by message\\n     */\\n    function depositForBurnWithCaller(\\n        uint64 channel,\\n        bytes32 destinationBech32Prefix,\\n        bytes32 destinationRecipient,\\n        uint256 amount,\\n        bytes32 mintRecipient,\\n        address burnToken,\\n        bytes32 destinationCaller,\\n        bytes calldata memo\\n    ) external returns (uint64 nonce) {\\n        uint64 reservedNonce = messageTransmitter.nextAvailableNonce();\\n        bytes32 sender = bytes32(uint256(uint160(msg.sender)));\\n        bytes memory metadata = abi.encodePacked(\\n            reservedNonce,\\n            sender,\\n            channel,\\n            destinationBech32Prefix,\\n            destinationRecipient,\\n            memo\\n        );\\n\\n        return rawDepositForBurnWithCaller(\\n            amount, mintRecipient, burnToken, destinationCaller, metadata\\n        );\\n    }\\n\\n    /**\\n     * @notice Wrapper function for \\\"depositForBurnWithCaller\\\" that includes metadata.\\n     * Emits a `DepositForBurnMetadata` event.\\n     * @param amount amount of tokens to burn\\n     * @param mintRecipient address of mint recipient on destination domain\\n     * @param burnToken address of contract to burn deposited tokens, on local domain\\n     * @param destinationCaller caller on the destination domain, as bytes32\\n     * @param metadata custom metadata to be included with transfer\\n     * @return nonce unique nonce reserved by message\\n     */\\n    function rawDepositForBurnWithCaller(\\n        uint256 amount,\\n        bytes32 mintRecipient,\\n        address burnToken,\\n        bytes32 destinationCaller,\\n        bytes memory metadata\\n    ) public returns (uint64 nonce) {\\n        IMintBurnToken token = IMintBurnToken(burnToken);\\n        token.transferFrom(msg.sender, address(this), amount);\\n        token.approve(address(tokenMessenger), amount);\\n\\n        nonce = tokenMessenger.depositForBurnWithCaller(\\n            amount, domainNumber, mintRecipient, burnToken, destinationCaller\\n        );\\n\\n        uint64 metadataNonce = messageTransmitter.sendMessageWithCaller(\\n            domainNumber, domainRecipient, destinationCaller, metadata\\n        );\\n\\n        emit DepositForBurnMetadata(nonce, metadataNonce, metadata);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n\\n        balanceOf[from] -= amount;\\n\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/interfaces/IMessageHandler.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IMessageHandler\\n * @notice Handles messages on destination domain forwarded from\\n * an IReceiver\\n */\\ninterface IMessageHandler {\\n    /**\\n     * @notice handles an incoming message from a Receiver\\n     * @param sourceDomain the source domain of the message\\n     * @param sender the sender of the message\\n     * @param messageBody The message raw bytes\\n     * @return success bool, true if successful\\n     */\\n    function handleReceiveMessage(\\n        uint32 sourceDomain,\\n        bytes32 sender,\\n        bytes calldata messageBody\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/interfaces/ITokenMinter.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\n/**\\n * @title ITokenMinter\\n * @notice interface for minter of tokens that are mintable, burnable, and interchangeable\\n * across domains.\\n */\\ninterface ITokenMinter {\\n    /**\\n     * @notice Mints `amount` of local tokens corresponding to the\\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\\n     * map to a nonzero local token address. This mapping can be queried using\\n     * getLocalToken().\\n     * @param sourceDomain Source domain where `burnToken` was burned.\\n     * @param burnToken Burned token address as bytes32.\\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\\n     * on this domain.\\n     * @param amount Amount of tokens to mint. Must be less than or equal\\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\\n     * @return mintToken token minted.\\n     */\\n    function mint(\\n        uint32 sourceDomain,\\n        bytes32 burnToken,\\n        address to,\\n        uint256 amount\\n    ) external returns (address mintToken);\\n\\n    /**\\n     * @notice Burn tokens owned by this ITokenMinter.\\n     * @param burnToken burnable token.\\n     * @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\\n     * account balance of the given `_burnToken`.\\n     */\\n    function burn(address burnToken, uint256 amount) external;\\n\\n    /**\\n     * @notice Get the local token associated with the given remote domain and token.\\n     * @param remoteDomain Remote domain\\n     * @param remoteToken Remote token\\n     * @return local token address\\n     */\\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Set the token controller of this ITokenMinter. Token controller\\n     * is responsible for mapping local tokens to remote tokens, and managing\\n     * token-specific limits\\n     * @param newTokenController new token controller address\\n     */\\n    function setTokenController(address newTokenController) external;\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/interfaces/IMintBurnToken.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\nimport \\\"../../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IMintBurnToken\\n * @notice interface for mintable and burnable ERC20 token\\n */\\ninterface IMintBurnToken is IERC20 {\\n    /**\\n     * @dev Function to mint tokens\\n     * @param to The address that will receive the minted tokens.\\n     * @param amount The amount of tokens to mint. Must be less than or equal\\n     * to the minterAllowance of the caller.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function mint(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev allows a minter to burn some of its own tokens\\n     * Validates that caller is a minter and that sender is not blacklisted\\n     * amount is less than or equal to the minter's account balance\\n     * @param amount uint256 the amount of tokens to be burned\\n     */\\n    function burn(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/interfaces/IMessageTransmitter.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\nimport \\\"./IRelayer.sol\\\";\\nimport \\\"./IReceiver.sol\\\";\\n\\n/**\\n * @title IMessageTransmitter\\n * @notice Interface for message transmitters, which both relay and receive messages.\\n */\\ninterface IMessageTransmitter is IRelayer, IReceiver {\\n\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/messages/BurnMessage.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\nimport \\\"@memview-sol/contracts/TypedMemView.sol\\\";\\n\\n/**\\n * @title BurnMessage Library\\n * @notice Library for formatted BurnMessages used by TokenMessenger.\\n * @dev BurnMessage format:\\n * Field                 Bytes      Type       Index\\n * version               4          uint32     0\\n * burnToken             32         bytes32    4\\n * mintRecipient         32         bytes32    36\\n * amount                32         uint256    68\\n * messageSender         32         bytes32    100\\n **/\\nlibrary BurnMessage {\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    uint8 private constant VERSION_INDEX = 0;\\n    uint8 private constant VERSION_LEN = 4;\\n    uint8 private constant BURN_TOKEN_INDEX = 4;\\n    uint8 private constant BURN_TOKEN_LEN = 32;\\n    uint8 private constant MINT_RECIPIENT_INDEX = 36;\\n    uint8 private constant MINT_RECIPIENT_LEN = 32;\\n    uint8 private constant AMOUNT_INDEX = 68;\\n    uint8 private constant AMOUNT_LEN = 32;\\n    uint8 private constant MSG_SENDER_INDEX = 100;\\n    uint8 private constant MSG_SENDER_LEN = 32;\\n    // 4 byte version + 32 bytes burnToken + 32 bytes mintRecipient + 32 bytes amount + 32 bytes messageSender\\n    uint8 private constant BURN_MESSAGE_LEN = 132;\\n\\n    /**\\n     * @notice Formats Burn message\\n     * @param _version The message body version\\n     * @param _burnToken The burn token address on source domain as bytes32\\n     * @param _mintRecipient The mint recipient address as bytes32\\n     * @param _amount The burn amount\\n     * @param _messageSender The message sender\\n     * @return Burn formatted message.\\n     */\\n    function _formatMessage(\\n        uint32 _version,\\n        bytes32 _burnToken,\\n        bytes32 _mintRecipient,\\n        uint256 _amount,\\n        bytes32 _messageSender\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _version,\\n                _burnToken,\\n                _mintRecipient,\\n                _amount,\\n                _messageSender\\n            );\\n    }\\n\\n    /**\\n     * @notice Retrieves the burnToken from a DepositForBurn BurnMessage\\n     * @param _message The message\\n     * @return sourceToken address as bytes32\\n     */\\n    function _getMessageSender(bytes29 _message)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return _message.index(MSG_SENDER_INDEX, MSG_SENDER_LEN);\\n    }\\n\\n    /**\\n     * @notice Retrieves the burnToken from a DepositForBurn BurnMessage\\n     * @param _message The message\\n     * @return sourceToken address as bytes32\\n     */\\n    function _getBurnToken(bytes29 _message) internal pure returns (bytes32) {\\n        return _message.index(BURN_TOKEN_INDEX, BURN_TOKEN_LEN);\\n    }\\n\\n    /**\\n     * @notice Retrieves the mintRecipient from a BurnMessage\\n     * @param _message The message\\n     * @return mintRecipient\\n     */\\n    function _getMintRecipient(bytes29 _message)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return _message.index(MINT_RECIPIENT_INDEX, MINT_RECIPIENT_LEN);\\n    }\\n\\n    /**\\n     * @notice Retrieves the amount from a BurnMessage\\n     * @param _message The message\\n     * @return amount\\n     */\\n    function _getAmount(bytes29 _message) internal pure returns (uint256) {\\n        return _message.indexUint(AMOUNT_INDEX, AMOUNT_LEN);\\n    }\\n\\n    /**\\n     * @notice Retrieves the version from a Burn message\\n     * @param _message The message\\n     * @return version\\n     */\\n    function _getVersion(bytes29 _message) internal pure returns (uint32) {\\n        return uint32(_message.indexUint(VERSION_INDEX, VERSION_LEN));\\n    }\\n\\n    /**\\n     * @notice Reverts if burn message is malformed or invalid length\\n     * @param _message The burn message as bytes29\\n     */\\n    function _validateBurnMessageFormat(bytes29 _message) internal pure {\\n        require(_message.isValid(), \\\"Malformed message\\\");\\n        require(_message.len() == BURN_MESSAGE_LEN, \\\"Invalid message length\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/messages/Message.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\nimport \\\"@memview-sol/contracts/TypedMemView.sol\\\";\\n\\n/**\\n * @title Message Library\\n * @notice Library for formatted messages used by Relayer and Receiver.\\n *\\n * @dev The message body is dynamically-sized to support custom message body\\n * formats. Other fields must be fixed-size to avoid hash collisions.\\n * Each other input value has an explicit type to guarantee fixed-size.\\n * Padding: uintNN fields are left-padded, and bytesNN fields are right-padded.\\n *\\n * Field                 Bytes      Type       Index\\n * version               4          uint32     0\\n * sourceDomain          4          uint32     4\\n * destinationDomain     4          uint32     8\\n * nonce                 8          uint64     12\\n * sender                32         bytes32    20\\n * recipient             32         bytes32    52\\n * destinationCaller     32         bytes32    84\\n * messageBody           dynamic    bytes      116\\n *\\n **/\\nlibrary Message {\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // Indices of each field in message\\n    uint8 private constant VERSION_INDEX = 0;\\n    uint8 private constant SOURCE_DOMAIN_INDEX = 4;\\n    uint8 private constant DESTINATION_DOMAIN_INDEX = 8;\\n    uint8 private constant NONCE_INDEX = 12;\\n    uint8 private constant SENDER_INDEX = 20;\\n    uint8 private constant RECIPIENT_INDEX = 52;\\n    uint8 private constant DESTINATION_CALLER_INDEX = 84;\\n    uint8 private constant MESSAGE_BODY_INDEX = 116;\\n\\n    /**\\n     * @notice Returns formatted (packed) message with provided fields\\n     * @param _msgVersion the version of the message format\\n     * @param _msgSourceDomain Domain of home chain\\n     * @param _msgDestinationDomain Domain of destination chain\\n     * @param _msgNonce Destination-specific nonce\\n     * @param _msgSender Address of sender on source chain as bytes32\\n     * @param _msgRecipient Address of recipient on destination chain as bytes32\\n     * @param _msgDestinationCaller Address of caller on destination chain as bytes32\\n     * @param _msgRawBody Raw bytes of message body\\n     * @return Formatted message\\n     **/\\n    function _formatMessage(\\n        uint32 _msgVersion,\\n        uint32 _msgSourceDomain,\\n        uint32 _msgDestinationDomain,\\n        uint64 _msgNonce,\\n        bytes32 _msgSender,\\n        bytes32 _msgRecipient,\\n        bytes32 _msgDestinationCaller,\\n        bytes memory _msgRawBody\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _msgVersion,\\n                _msgSourceDomain,\\n                _msgDestinationDomain,\\n                _msgNonce,\\n                _msgSender,\\n                _msgRecipient,\\n                _msgDestinationCaller,\\n                _msgRawBody\\n            );\\n    }\\n\\n    // @notice Returns _message's version field\\n    function _version(bytes29 _message) internal pure returns (uint32) {\\n        return uint32(_message.indexUint(VERSION_INDEX, 4));\\n    }\\n\\n    // @notice Returns _message's sourceDomain field\\n    function _sourceDomain(bytes29 _message) internal pure returns (uint32) {\\n        return uint32(_message.indexUint(SOURCE_DOMAIN_INDEX, 4));\\n    }\\n\\n    // @notice Returns _message's destinationDomain field\\n    function _destinationDomain(bytes29 _message)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        return uint32(_message.indexUint(DESTINATION_DOMAIN_INDEX, 4));\\n    }\\n\\n    // @notice Returns _message's nonce field\\n    function _nonce(bytes29 _message) internal pure returns (uint64) {\\n        return uint64(_message.indexUint(NONCE_INDEX, 8));\\n    }\\n\\n    // @notice Returns _message's sender field\\n    function _sender(bytes29 _message) internal pure returns (bytes32) {\\n        return _message.index(SENDER_INDEX, 32);\\n    }\\n\\n    // @notice Returns _message's recipient field\\n    function _recipient(bytes29 _message) internal pure returns (bytes32) {\\n        return _message.index(RECIPIENT_INDEX, 32);\\n    }\\n\\n    // @notice Returns _message's destinationCaller field\\n    function _destinationCaller(bytes29 _message)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return _message.index(DESTINATION_CALLER_INDEX, 32);\\n    }\\n\\n    // @notice Returns _message's messageBody field\\n    function _messageBody(bytes29 _message) internal pure returns (bytes29) {\\n        return\\n            _message.slice(\\n                MESSAGE_BODY_INDEX,\\n                _message.len() - MESSAGE_BODY_INDEX,\\n                0\\n            );\\n    }\\n\\n    /**\\n     * @notice converts address to bytes32 (alignment preserving cast.)\\n     * @param addr the address to convert to bytes32\\n     */\\n    function addressToBytes32(address addr) external pure returns (bytes32) {\\n        return bytes32(uint256(uint160(addr)));\\n    }\\n\\n    /**\\n     * @notice converts bytes32 to address (alignment preserving cast.)\\n     * @dev Warning: it is possible to have different input values _buf map to the same address.\\n     * For use cases where this is not acceptable, validate that the first 12 bytes of _buf are zero-padding.\\n     * @param _buf the bytes32 to convert to address\\n     */\\n    function bytes32ToAddress(bytes32 _buf) public pure returns (address) {\\n        return address(uint160(uint256(_buf)));\\n    }\\n\\n    /**\\n     * @notice Reverts if message is malformed or incorrect length\\n     * @param _message The message as bytes29\\n     */\\n    function _validateMessageFormat(bytes29 _message) internal pure {\\n        require(_message.isValid(), \\\"Malformed message\\\");\\n        require(\\n            _message.len() >= MESSAGE_BODY_INDEX,\\n            \\\"Invalid message: too short\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/roles/Rescuable.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\nimport \\\"./Ownable2Step.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/**\\n * @notice Base contract which allows children to rescue ERC20 locked in their contract.\\n * @dev Forked from https://github.com/centrehq/centre-tokens/blob/0d3cab14ebd133a83fc834dbd48d0468bdf0b391/contracts/v1.1/Rescuable.sol\\n * Modifications:\\n * 1. Update Solidity version from 0.6.12 to 0.7.6 (8/23/2022)\\n */\\ncontract Rescuable is Ownable2Step {\\n    using SafeERC20 for IERC20;\\n\\n    address private _rescuer;\\n\\n    event RescuerChanged(address indexed newRescuer);\\n\\n    /**\\n     * @notice Returns current rescuer\\n     * @return Rescuer's address\\n     */\\n    function rescuer() external view returns (address) {\\n        return _rescuer;\\n    }\\n\\n    /**\\n     * @notice Revert if called by any account other than the rescuer.\\n     */\\n    modifier onlyRescuer() {\\n        require(msg.sender == _rescuer, \\\"Rescuable: caller is not the rescuer\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Rescue ERC20 tokens locked up in this contract.\\n     * @param tokenContract ERC20 token contract address\\n     * @param to        Recipient address\\n     * @param amount    Amount to withdraw\\n     */\\n    function rescueERC20(\\n        IERC20 tokenContract,\\n        address to,\\n        uint256 amount\\n    ) external onlyRescuer {\\n        tokenContract.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Assign the rescuer role to a given address.\\n     * @param newRescuer New rescuer's address\\n     */\\n    function updateRescuer(address newRescuer) external onlyOwner {\\n        require(\\n            newRescuer != address(0),\\n            \\\"Rescuable: new rescuer is the zero address\\\"\\n        );\\n        _rescuer = newRescuer;\\n        emit RescuerChanged(newRescuer);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/MessageTransmitter.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\nimport \\\"@memview-sol/contracts/TypedMemView.sol\\\";\\nimport \\\"./interfaces/IMessageTransmitter.sol\\\";\\nimport \\\"./interfaces/IMessageHandler.sol\\\";\\nimport \\\"./messages/Message.sol\\\";\\nimport \\\"./roles/Pausable.sol\\\";\\nimport \\\"./roles/Rescuable.sol\\\";\\nimport \\\"./roles/Attestable.sol\\\";\\n\\n/**\\n * @title MessageTransmitter\\n * @notice Contract responsible for sending and receiving messages across chains.\\n */\\ncontract MessageTransmitter is\\n    IMessageTransmitter,\\n    Pausable,\\n    Rescuable,\\n    Attestable\\n{\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a new message is dispatched\\n     * @param message Raw bytes of message\\n     */\\n    event MessageSent(bytes message);\\n\\n    /**\\n     * @notice Emitted when a new message is received\\n     * @param caller Caller (msg.sender) on destination domain\\n     * @param sourceDomain The source domain this message originated from\\n     * @param nonce The nonce unique to this message\\n     * @param sender The sender of this message\\n     * @param messageBody message body bytes\\n     */\\n    event MessageReceived(\\n        address indexed caller,\\n        uint32 sourceDomain,\\n        uint64 indexed nonce,\\n        bytes32 sender,\\n        bytes messageBody\\n    );\\n\\n    /**\\n     * @notice Emitted when max message body size is updated\\n     * @param newMaxMessageBodySize new maximum message body size, in bytes\\n     */\\n    event MaxMessageBodySizeUpdated(uint256 newMaxMessageBodySize);\\n\\n    // ============ Libraries ============\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using Message for bytes29;\\n\\n    // ============ State Variables ============\\n    // Domain of chain on which the contract is deployed\\n    uint32 public immutable localDomain;\\n\\n    // Message Format version\\n    uint32 public immutable version;\\n\\n    // Maximum size of message body, in bytes.\\n    // This value is set by owner.\\n    uint256 public maxMessageBodySize;\\n\\n    // Next available nonce from this source domain\\n    uint64 public nextAvailableNonce;\\n\\n    // Maps a bytes32 hash of (sourceDomain, nonce) -> uint256 (0 if unused, 1 if used)\\n    mapping(bytes32 => uint256) public usedNonces;\\n\\n    // ============ Constructor ============\\n    constructor(\\n        uint32 _localDomain,\\n        address _attester,\\n        uint32 _maxMessageBodySize,\\n        uint32 _version\\n    ) Attestable(_attester) {\\n        localDomain = _localDomain;\\n        maxMessageBodySize = _maxMessageBodySize;\\n        version = _version;\\n    }\\n\\n    // ============ External Functions  ============\\n    /**\\n     * @notice Send the message to the destination domain and recipient\\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\\n     * @param destinationDomain Domain of destination chain\\n     * @param recipient Address of message recipient on destination chain as bytes32\\n     * @param messageBody Raw bytes content of message\\n     * @return nonce reserved by message\\n     */\\n    function sendMessage(\\n        uint32 destinationDomain,\\n        bytes32 recipient,\\n        bytes calldata messageBody\\n    ) external override whenNotPaused returns (uint64) {\\n        bytes32 _emptyDestinationCaller = bytes32(0);\\n        uint64 _nonce = _reserveAndIncrementNonce();\\n        bytes32 _messageSender = Message.addressToBytes32(msg.sender);\\n\\n        _sendMessage(\\n            destinationDomain,\\n            recipient,\\n            _emptyDestinationCaller,\\n            _messageSender,\\n            _nonce,\\n            messageBody\\n        );\\n\\n        return _nonce;\\n    }\\n\\n    /**\\n     * @notice Replace a message with a new message body and/or destination caller.\\n     * @dev The `originalAttestation` must be a valid attestation of `originalMessage`.\\n     * Reverts if msg.sender does not match sender of original message, or if the source domain of the original message\\n     * does not match this MessageTransmitter's local domain.\\n     * @param originalMessage original message to replace\\n     * @param originalAttestation attestation of `originalMessage`\\n     * @param newMessageBody new message body of replaced message\\n     * @param newDestinationCaller the new destination caller, which may be the\\n     * same as the original destination caller, a new destination caller, or an empty\\n     * destination caller (bytes32(0), indicating that any destination caller is valid.)\\n     */\\n    function replaceMessage(\\n        bytes calldata originalMessage,\\n        bytes calldata originalAttestation,\\n        bytes calldata newMessageBody,\\n        bytes32 newDestinationCaller\\n    ) external override whenNotPaused {\\n        // Validate each signature in the attestation\\n        _verifyAttestationSignatures(originalMessage, originalAttestation);\\n\\n        bytes29 _originalMsg = originalMessage.ref(0);\\n\\n        // Validate message format\\n        _originalMsg._validateMessageFormat();\\n\\n        // Validate message sender\\n        bytes32 _sender = _originalMsg._sender();\\n        require(\\n            msg.sender == Message.bytes32ToAddress(_sender),\\n            \\\"Sender not permitted to use nonce\\\"\\n        );\\n\\n        // Validate source domain\\n        uint32 _sourceDomain = _originalMsg._sourceDomain();\\n        require(\\n            _sourceDomain == localDomain,\\n            \\\"Message not originally sent from this domain\\\"\\n        );\\n\\n        uint32 _destinationDomain = _originalMsg._destinationDomain();\\n        bytes32 _recipient = _originalMsg._recipient();\\n        uint64 _nonce = _originalMsg._nonce();\\n\\n        _sendMessage(\\n            _destinationDomain,\\n            _recipient,\\n            newDestinationCaller,\\n            _sender,\\n            _nonce,\\n            newMessageBody\\n        );\\n    }\\n\\n    /**\\n     * @notice Send the message to the destination domain and recipient, for a specified `destinationCaller` on the\\n     * destination domain.\\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\\n     * WARNING: if the `destinationCaller` does not represent a valid address, then it will not be possible\\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\\n     * @param destinationDomain Domain of destination chain\\n     * @param recipient Address of message recipient on destination domain as bytes32\\n     * @param destinationCaller caller on the destination domain, as bytes32\\n     * @param messageBody Raw bytes content of message\\n     * @return nonce reserved by message\\n     */\\n    function sendMessageWithCaller(\\n        uint32 destinationDomain,\\n        bytes32 recipient,\\n        bytes32 destinationCaller,\\n        bytes calldata messageBody\\n    ) external override whenNotPaused returns (uint64) {\\n        require(\\n            destinationCaller != bytes32(0),\\n            \\\"Destination caller must be nonzero\\\"\\n        );\\n\\n        uint64 _nonce = _reserveAndIncrementNonce();\\n        bytes32 _messageSender = Message.addressToBytes32(msg.sender);\\n\\n        _sendMessage(\\n            destinationDomain,\\n            recipient,\\n            destinationCaller,\\n            _messageSender,\\n            _nonce,\\n            messageBody\\n        );\\n\\n        return _nonce;\\n    }\\n\\n    /**\\n     * @notice Receive a message. Messages with a given nonce\\n     * can only be broadcast once for a (sourceDomain, destinationDomain)\\n     * pair. The message body of a valid message is passed to the\\n     * specified recipient for further processing.\\n     *\\n     * @dev Attestation format:\\n     * A valid attestation is the concatenated 65-byte signature(s) of exactly\\n     * `thresholdSignature` signatures, in increasing order of attester address.\\n     * ***If the attester addresses recovered from signatures are not in\\n     * increasing order, signature verification will fail.***\\n     * If incorrect number of signatures or duplicate signatures are supplied,\\n     * signature verification will fail.\\n     *\\n     * Message format:\\n     * Field                 Bytes      Type       Index\\n     * version               4          uint32     0\\n     * sourceDomain          4          uint32     4\\n     * destinationDomain     4          uint32     8\\n     * nonce                 8          uint64     12\\n     * sender                32         bytes32    20\\n     * recipient             32         bytes32    52\\n     * messageBody           dynamic    bytes      84\\n     * @param message Message bytes\\n     * @param attestation Concatenated 65-byte signature(s) of `message`, in increasing order\\n     * of the attester address recovered from signatures.\\n     * @return success bool, true if successful\\n     */\\n    function receiveMessage(bytes calldata message, bytes calldata attestation)\\n        external\\n        override\\n        whenNotPaused\\n        returns (bool success)\\n    {\\n        // Validate each signature in the attestation\\n        _verifyAttestationSignatures(message, attestation);\\n\\n        bytes29 _msg = message.ref(0);\\n\\n        // Validate message format\\n        _msg._validateMessageFormat();\\n\\n        // Validate domain\\n        require(\\n            _msg._destinationDomain() == localDomain,\\n            \\\"Invalid destination domain\\\"\\n        );\\n\\n        // Validate destination caller\\n        if (_msg._destinationCaller() != bytes32(0)) {\\n            require(\\n                _msg._destinationCaller() ==\\n                    Message.addressToBytes32(msg.sender),\\n                \\\"Invalid caller for message\\\"\\n            );\\n        }\\n\\n        // Validate version\\n        require(_msg._version() == version, \\\"Invalid message version\\\");\\n\\n        // Validate nonce is available\\n        uint32 _sourceDomain = _msg._sourceDomain();\\n        uint64 _nonce = _msg._nonce();\\n        bytes32 _sourceAndNonce = _hashSourceAndNonce(_sourceDomain, _nonce);\\n        require(usedNonces[_sourceAndNonce] == 0, \\\"Nonce already used\\\");\\n        // Mark nonce used\\n        usedNonces[_sourceAndNonce] = 1;\\n\\n        // Handle receive message\\n        bytes32 _sender = _msg._sender();\\n        bytes memory _messageBody = _msg._messageBody().clone();\\n        require(\\n            IMessageHandler(Message.bytes32ToAddress(_msg._recipient()))\\n                .handleReceiveMessage(_sourceDomain, _sender, _messageBody),\\n            \\\"handleReceiveMessage() failed\\\"\\n        );\\n\\n        // Emit MessageReceived event\\n        emit MessageReceived(\\n            msg.sender,\\n            _sourceDomain,\\n            _nonce,\\n            _sender,\\n            _messageBody\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets the max message body size\\n     * @dev This value should not be reduced without good reason,\\n     * to avoid impacting users who rely on large messages.\\n     * @param newMaxMessageBodySize new max message body size, in bytes\\n     */\\n    function setMaxMessageBodySize(uint256 newMaxMessageBodySize)\\n        external\\n        onlyOwner\\n    {\\n        maxMessageBodySize = newMaxMessageBodySize;\\n        emit MaxMessageBodySizeUpdated(maxMessageBodySize);\\n    }\\n\\n    // ============ Internal Utils ============\\n    /**\\n     * @notice Send the message to the destination domain and recipient. If `_destinationCaller` is not equal to bytes32(0),\\n     * the message can only be received on the destination chain when called by `_destinationCaller`.\\n     * @dev Format the message and emit `MessageSent` event with message information.\\n     * @param _destinationDomain Domain of destination chain\\n     * @param _recipient Address of message recipient on destination domain as bytes32\\n     * @param _destinationCaller caller on the destination domain, as bytes32\\n     * @param _sender message sender, as bytes32\\n     * @param _nonce nonce reserved for message\\n     * @param _messageBody Raw bytes content of message\\n     */\\n    function _sendMessage(\\n        uint32 _destinationDomain,\\n        bytes32 _recipient,\\n        bytes32 _destinationCaller,\\n        bytes32 _sender,\\n        uint64 _nonce,\\n        bytes calldata _messageBody\\n    ) internal {\\n        // Validate message body length\\n        require(\\n            _messageBody.length <= maxMessageBodySize,\\n            \\\"Message body exceeds max size\\\"\\n        );\\n\\n        require(_recipient != bytes32(0), \\\"Recipient must be nonzero\\\");\\n\\n        // serialize message\\n        bytes memory _message = Message._formatMessage(\\n            version,\\n            localDomain,\\n            _destinationDomain,\\n            _nonce,\\n            _sender,\\n            _recipient,\\n            _destinationCaller,\\n            _messageBody\\n        );\\n\\n        // Emit MessageSent event\\n        emit MessageSent(_message);\\n    }\\n\\n    /**\\n     * @notice hashes `_source` and `_nonce`.\\n     * @param _source Domain of chain where the transfer originated\\n     * @param _nonce The unique identifier for the message from source to\\n              destination\\n     * @return hash of source and nonce\\n     */\\n    function _hashSourceAndNonce(uint32 _source, uint64 _nonce)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(_source, _nonce));\\n    }\\n\\n    /**\\n     * Reserve and increment next available nonce\\n     * @return nonce reserved\\n     */\\n    function _reserveAndIncrementNonce() internal returns (uint64) {\\n        uint64 _nonceReserved = nextAvailableNonce;\\n        nextAvailableNonce = nextAvailableNonce + 1;\\n        return _nonceReserved;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/interfaces/IRelayer.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IRelayer\\n * @notice Sends messages from source domain to destination domain\\n */\\ninterface IRelayer {\\n    /**\\n     * @notice Sends an outgoing message from the source domain.\\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\\n     * @param destinationDomain Domain of destination chain\\n     * @param recipient Address of message recipient on destination domain as bytes32\\n     * @param messageBody Raw bytes content of message\\n     * @return nonce reserved by message\\n     */\\n    function sendMessage(\\n        uint32 destinationDomain,\\n        bytes32 recipient,\\n        bytes calldata messageBody\\n    ) external returns (uint64);\\n\\n    /**\\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\\n     * destination domain.\\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\\n     * @param destinationDomain Domain of destination chain\\n     * @param recipient Address of message recipient on destination domain as bytes32\\n     * @param destinationCaller caller on the destination domain, as bytes32\\n     * @param messageBody Raw bytes content of message\\n     * @return nonce reserved by message\\n     */\\n    function sendMessageWithCaller(\\n        uint32 destinationDomain,\\n        bytes32 recipient,\\n        bytes32 destinationCaller,\\n        bytes calldata messageBody\\n    ) external returns (uint64);\\n\\n    /**\\n     * @notice Replace a message with a new message body and/or destination caller.\\n     * @dev The `originalAttestation` must be a valid attestation of `originalMessage`.\\n     * @param originalMessage original message to replace\\n     * @param originalAttestation attestation of `originalMessage`\\n     * @param newMessageBody new message body of replaced message\\n     * @param newDestinationCaller the new destination caller\\n     */\\n    function replaceMessage(\\n        bytes calldata originalMessage,\\n        bytes calldata originalAttestation,\\n        bytes calldata newMessageBody,\\n        bytes32 newDestinationCaller\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/interfaces/IReceiver.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IReceiver\\n * @notice Receives messages on destination chain and forwards them to IMessageDestinationHandler\\n */\\ninterface IReceiver {\\n    /**\\n     * @notice Receives an incoming message, validating the header and passing\\n     * the body to application-specific handler.\\n     * @param message The message raw bytes\\n     * @param signature The message signature\\n     * @return success bool, true if successful\\n     */\\n    function receiveMessage(bytes calldata message, bytes calldata signature)\\n        external\\n        returns (bool success);\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/lib/memview-sol/contracts/TypedMemView.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.22;\\n\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\nlibrary TypedMemView {\\n    using SafeMath for uint256;\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        // abusing underflow here =_=\\n        for (uint8 i = 15; i < 255 ; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            second |= byteHex(_byte);\\n            if (i != 0) {\\n                second <<= 16;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        // ugly. redo without assembly?\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n                sub(_len, 1),\\n                0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc.add(_len);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower 24 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return uint256(len(memView)).add(32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc.add(_index).add(_len) > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc.add(_index);\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)).sub(_len), _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index.add(_bytes) > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        uint8 bitLength = _bytes * 8;\\n        uint256 _loc = loc(memView);\\n        uint256 _mask = leftMask(bitLength);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            result := and(mload(add(_loc, _index)), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n            // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n            // use the identity precompile to copy\\n            // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            // store the legnth\\n            mstore(ptr, _written)\\n            // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/roles/Ownable2Step.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev forked from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/7c5f6bc2c8743d83443fa46395d75f2f3f99054a/contracts/access/Ownable2Step.sol\\n * Modifications:\\n * 1. Update Solidity version from 0.8.0 to 0.7.6. Version 0.8.0 was used\\n * as base because this contract was added to OZ repo after version 0.8.0.\\n *\\n * Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(\\n            pendingOwner() == sender,\\n            \\\"Ownable2Step: caller is not the new owner\\\"\\n        );\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/roles/Pausable.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\nimport \\\"./Ownable2Step.sol\\\";\\n\\n/**\\n * @notice Base contract which allows children to implement an emergency stop\\n * mechanism\\n * @dev Forked from https://github.com/centrehq/centre-tokens/blob/0d3cab14ebd133a83fc834dbd48d0468bdf0b391/contracts/v1/Pausable.sol\\n * Modifications:\\n * 1. Update Solidity version from 0.6.12 to 0.7.6 (8/23/2022)\\n * 2. Change pauser visibility to private, declare external getter (11/19/22)\\n */\\ncontract Pausable is Ownable2Step {\\n    event Pause();\\n    event Unpause();\\n    event PauserChanged(address indexed newAddress);\\n\\n    address private _pauser;\\n    bool public paused = false;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev throws if called by any account other than the pauser\\n     */\\n    modifier onlyPauser() {\\n        require(msg.sender == _pauser, \\\"Pausable: caller is not the pauser\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns current pauser\\n     * @return Pauser's address\\n     */\\n    function pauser() external view returns (address) {\\n        return _pauser;\\n    }\\n\\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     */\\n    function pause() external onlyPauser {\\n        paused = true;\\n        emit Pause();\\n    }\\n\\n    /**\\n     * @dev called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() external onlyPauser {\\n        paused = false;\\n        emit Unpause();\\n    }\\n\\n    /**\\n     * @dev update the pauser role\\n     */\\n    function updatePauser(address _newPauser) external onlyOwner {\\n        require(\\n            _newPauser != address(0),\\n            \\\"Pausable: new pauser is the zero address\\\"\\n        );\\n        _pauser = _newPauser;\\n        emit PauserChanged(_pauser);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/roles/Attestable.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"./Ownable2Step.sol\\\";\\n\\ncontract Attestable is Ownable2Step {\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when an attester is enabled\\n     * @param attester newly enabled attester\\n     */\\n    event AttesterEnabled(address indexed attester);\\n\\n    /**\\n     * @notice Emitted when an attester is disabled\\n     * @param attester newly disabled attester\\n     */\\n    event AttesterDisabled(address indexed attester);\\n\\n    /**\\n     * @notice Emitted when threshold number of attestations (m in m/n multisig) is updated\\n     * @param oldSignatureThreshold old signature threshold\\n     * @param newSignatureThreshold new signature threshold\\n     */\\n    event SignatureThresholdUpdated(\\n        uint256 oldSignatureThreshold,\\n        uint256 newSignatureThreshold\\n    );\\n\\n    /**\\n     * @dev Emitted when attester manager address is updated\\n     * @param previousAttesterManager representing the address of the previous attester manager\\n     * @param newAttesterManager representing the address of the new attester manager\\n     */\\n    event AttesterManagerUpdated(\\n        address indexed previousAttesterManager,\\n        address indexed newAttesterManager\\n    );\\n\\n    // ============ Libraries ============\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // ============ State Variables ============\\n    // number of signatures from distinct attesters required for a message to be received (m in m/n multisig)\\n    uint256 public signatureThreshold;\\n\\n    // 65-byte ECDSA signature: v (32) + r (32) + s (1)\\n    uint256 internal constant signatureLength = 65;\\n\\n    // enabled attesters (message signers)\\n    // (length of enabledAttesters is n in m/n multisig of message signers)\\n    EnumerableSet.AddressSet private enabledAttesters;\\n\\n    // Attester Manager of the contract\\n    address private _attesterManager;\\n\\n    // ============ Modifiers ============\\n    /**\\n     * @dev Throws if called by any account other than the attester manager.\\n     */\\n    modifier onlyAttesterManager() {\\n        require(msg.sender == _attesterManager, \\\"Caller not attester manager\\\");\\n        _;\\n    }\\n\\n    // ============ Constructor ============\\n    /**\\n     * @dev The constructor sets the original attester manager of the contract to the sender account.\\n     * @param attester attester to initialize\\n     */\\n    constructor(address attester) {\\n        _setAttesterManager(msg.sender);\\n        // Initially 1 signature is required. Threshold can be increased by attesterManager.\\n        signatureThreshold = 1;\\n        enableAttester(attester);\\n    }\\n\\n    // ============ Public/External Functions  ============\\n    /**\\n     * @notice Enables an attester\\n     * @dev Only callable by attesterManager. New attester must be nonzero, and currently disabled.\\n     * @param newAttester attester to enable\\n     */\\n    function enableAttester(address newAttester) public onlyAttesterManager {\\n        require(newAttester != address(0), \\\"New attester must be nonzero\\\");\\n        require(enabledAttesters.add(newAttester), \\\"Attester already enabled\\\");\\n        emit AttesterEnabled(newAttester);\\n    }\\n\\n    /**\\n     * @notice returns true if given `attester` is enabled, else false\\n     * @param attester attester to check enabled status of\\n     * @return true if given `attester` is enabled, else false\\n     */\\n    function isEnabledAttester(address attester) public view returns (bool) {\\n        return enabledAttesters.contains(attester);\\n    }\\n\\n    /**\\n     * @notice returns the number of enabled attesters\\n     * @return number of enabled attesters\\n     */\\n    function getNumEnabledAttesters() public view returns (uint256) {\\n        return enabledAttesters.length();\\n    }\\n\\n    /**\\n     * @dev Allows the current attester manager to transfer control of the contract to a newAttesterManager.\\n     * @param newAttesterManager The address to update attester manager to.\\n     */\\n    function updateAttesterManager(address newAttesterManager)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            newAttesterManager != address(0),\\n            \\\"Invalid attester manager address\\\"\\n        );\\n        address _oldAttesterManager = _attesterManager;\\n        _setAttesterManager(newAttesterManager);\\n        emit AttesterManagerUpdated(_oldAttesterManager, newAttesterManager);\\n    }\\n\\n    /**\\n     * @notice Disables an attester\\n     * @dev Only callable by attesterManager. Disabling the attester is not allowed if there is only one attester\\n     * enabled, or if it would cause the number of enabled attesters to become less than signatureThreshold.\\n     * (Attester must be currently enabled.)\\n     * @param attester attester to disable\\n     */\\n    function disableAttester(address attester) external onlyAttesterManager {\\n        // Disallow disabling attester if there is only 1 active attester\\n        uint256 _numEnabledAttesters = getNumEnabledAttesters();\\n\\n        require(_numEnabledAttesters > 1, \\\"Too few enabled attesters\\\");\\n\\n        // Disallow disabling an attester if it would cause the n in m/n multisig to fall below m (threshold # of signers).\\n        require(\\n            _numEnabledAttesters > signatureThreshold,\\n            \\\"Signature threshold is too low\\\"\\n        );\\n\\n        require(enabledAttesters.remove(attester), \\\"Attester already disabled\\\");\\n        emit AttesterDisabled(attester);\\n    }\\n\\n    /**\\n     * @notice Sets the threshold of signatures required to attest to a message.\\n     * (This is the m in m/n multisig.)\\n     * @dev new signature threshold must be nonzero, and must not exceed number\\n     * of enabled attesters.\\n     * @param newSignatureThreshold new signature threshold\\n     */\\n    function setSignatureThreshold(uint256 newSignatureThreshold)\\n        external\\n        onlyAttesterManager\\n    {\\n        require(newSignatureThreshold != 0, \\\"Invalid signature threshold\\\");\\n\\n        // New signature threshold cannot exceed the number of enabled attesters\\n        require(\\n            newSignatureThreshold <= enabledAttesters.length(),\\n            \\\"New signature threshold too high\\\"\\n        );\\n\\n        require(\\n            newSignatureThreshold != signatureThreshold,\\n            \\\"Signature threshold already set\\\"\\n        );\\n\\n        uint256 _oldSignatureThreshold = signatureThreshold;\\n        signatureThreshold = newSignatureThreshold;\\n        emit SignatureThresholdUpdated(\\n            _oldSignatureThreshold,\\n            signatureThreshold\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the address of the attester manager\\n     * @return address of the attester manager\\n     */\\n    function attesterManager() external view returns (address) {\\n        return _attesterManager;\\n    }\\n\\n    /**\\n     * @notice gets enabled attester at given `index`\\n     * @param index index of attester to check\\n     * @return enabled attester at given `index`\\n     */\\n    function getEnabledAttester(uint256 index) external view returns (address) {\\n        return enabledAttesters.at(index);\\n    }\\n\\n    // ============ Internal Utils ============\\n    /**\\n     * @dev Sets a new attester manager address\\n     * @param _newAttesterManager attester manager address to set\\n     */\\n    function _setAttesterManager(address _newAttesterManager) internal {\\n        _attesterManager = _newAttesterManager;\\n    }\\n\\n    /**\\n     * @notice reverts if the attestation, which is comprised of one or more concatenated 65-byte signatures, is invalid.\\n     * @dev Rules for valid attestation:\\n     * 1. length of `_attestation` == 65 (signature length) * signatureThreshold\\n     * 2. addresses recovered from attestation must be in increasing order.\\n     * For example, if signature A is signed by address 0x1..., and signature B\\n     * is signed by address 0x2..., attestation must be passed as AB.\\n     * 3. no duplicate signers\\n     * 4. all signers must be enabled attesters\\n     *\\n     * Based on Christian Lundkvist's Simple Multisig\\n     * (https://github.com/christianlundkvist/simple-multisig/tree/560c463c8651e0a4da331bd8f245ccd2a48ab63d)\\n     * @param _message message to verify attestation of\\n     * @param _attestation attestation of `_message`\\n     */\\n    function _verifyAttestationSignatures(\\n        bytes calldata _message,\\n        bytes calldata _attestation\\n    ) internal view {\\n        require(\\n            _attestation.length == signatureLength * signatureThreshold,\\n            \\\"Invalid attestation length\\\"\\n        );\\n\\n        // (Attesters cannot be address(0))\\n        address _latestAttesterAddress = address(0);\\n        // Address recovered from signatures must be in increasing order, to prevent duplicates\\n\\n        bytes32 _digest = keccak256(_message);\\n\\n        for (uint256 i; i < signatureThreshold; ++i) {\\n            bytes memory _signature = _attestation[i * signatureLength:i *\\n                signatureLength +\\n                signatureLength];\\n\\n            address _recoveredAttester = _recoverAttesterSignature(\\n                _digest,\\n                _signature\\n            );\\n\\n            // Signatures must be in increasing order of address, and may not duplicate signatures from same address\\n            require(\\n                _recoveredAttester > _latestAttesterAddress,\\n                \\\"Invalid signature order or dupe\\\"\\n            );\\n            require(\\n                isEnabledAttester(_recoveredAttester),\\n                \\\"Invalid signature: not attester\\\"\\n            );\\n            _latestAttesterAddress = _recoveredAttester;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks that signature was signed by attester\\n     * @param _digest message hash\\n     * @param _signature message signature\\n     * @return address of recovered signer\\n     **/\\n    function _recoverAttesterSignature(bytes32 _digest, bytes memory _signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return (ECDSA.recover(_digest, _signature));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/lib/memview-sol/contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.10;\\n\\n/*\\nThe MIT License (MIT)\\n\\nCopyright (c) 2016 Smart Contract Solutions, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n    /**\\n     * @dev Multiplies two numbers, throws on overflow.\\n     */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        c = _a * _b;\\n        require(c / _a == _b, \\\"Overflow during multiplication.\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n        return _a / _b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, \\\"Underflow during subtraction.\\\");\\n        return _a - _b;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, throws on overflow.\\n     */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n        c = _a + _b;\\n        require(c >= _a, \\\"Overflow during addition.\\\");\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/src/roles/Ownable.sol\": {\r\n      \"content\": \"/*\\n * Copyright (c) 2022, Circle Internet Financial Limited.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev forked from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/7c5f6bc2c8743d83443fa46395d75f2f3f99054a/contracts/access/Ownable.sol\\n * Modifications:\\n * 1. Update Solidity version from 0.8.0 to 0.7.6 (11/9/2022). (v8 was used\\n * as base because it includes internal _transferOwnership method.)\\n * 2. Remove renounceOwnership function\\n *\\n * Description\\n * Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/lib/openzeppelin-contracts/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/lib/openzeppelin-contracts/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/lib/openzeppelin-contracts/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/evm-cctp-contracts/lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@memview-sol/=lib/evm-cctp-contracts/lib/memview-sol/\",\r\n      \"@openzeppelin/=lib/evm-cctp-contracts/lib/openzeppelin-contracts/\",\r\n      \"cctp-contracts/=lib/cctp-contracts/src/\",\r\n      \"centre-tokens.git/=lib/evm-cctp-contracts/lib/centre-tokens.git/\",\r\n      \"ds-test/=lib/evm-cctp-contracts/lib/ds-test/src/\",\r\n      \"evm-cctp-contracts/=lib/evm-cctp-contracts/\",\r\n      \"forge-gas-snapshot/=lib/forge-gas-snapshot/src/\",\r\n      \"forge-std/=lib/evm-cctp-contracts/lib/forge-std/src/\",\r\n      \"memview-sol/=lib/evm-cctp-contracts/lib/memview-sol/contracts/\",\r\n      \"openzeppelin-contracts/=lib/evm-cctp-contracts/lib/openzeppelin-contracts/contracts/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenMessenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenMessengerWithMetadata\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_currentDomainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeUpdater\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BurnAmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PercFeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenMessengerNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mintRecipient\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"source\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dest\",\"type\":\"uint32\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDomainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"mintRecipient\",\"type\":\"bytes32\"}],\"name\":\"depositForBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"channel\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"destinationBech32Prefix\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"destinationRecipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"mintRecipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"memo\",\"type\":\"bytes\"}],\"name\":\"depositForBurnIBC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"channel\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"destinationBech32Prefix\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"destinationRecipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"mintRecipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"memo\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositForBurnIBCPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"mintRecipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositForBurnPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"feeMap\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"percFee\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"flatFee\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nobleDomainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"percFee\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"flatFee\",\"type\":\"uint64\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMessenger\",\"outputs\":[{\"internalType\":\"contract TokenMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMessengerWithMetadata\",\"outputs\":[{\"internalType\":\"contract TokenMessengerWithMetadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"updateCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeUpdater\",\"type\":\"address\"}],\"name\":\"updateFeeUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenMessengerWithMetadata\",\"type\":\"address\"}],\"name\":\"updateTokenMessengerWithMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenMessengerWithMetadataWrapper", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bd3fa81b58ba92a82136038b25adec7066af3155000000000000000000000000bd3fa81b58ba92a82136038b25adec7066af31550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e2f16de7d5c8d3ef41aad8dc2156cb4f9eef35fe0000000000000000000000000629d5361f2767f894c579d7608b799453800ba4000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}