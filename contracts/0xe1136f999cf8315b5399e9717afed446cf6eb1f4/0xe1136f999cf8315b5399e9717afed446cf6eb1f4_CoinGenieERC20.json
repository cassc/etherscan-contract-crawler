{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/abstract/Payments.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\n/*\\n            \u2588\u2588\u2588\u2588\u2588\u2588                                                                                  \\n           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588  \u2588\u2588\u2588\u2588         \u2588\u2588\u2588                      \\n            \u2588\u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588                      \\n              \u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588                      \\n              \u2588\u2588       \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588                      \\n              \u2588\u2588       \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588                      \\n             \u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                      \\n            \u2588\u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                      \\n           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588\u2588\u2588                      \\n          \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588                      \\n        \u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588                                                   \\n      \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588                                                                            \\n    \u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588                                                                          \\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588        \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588            \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588        \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588        \\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n*/\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport { IUniswapV2Router02 } from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\n/**\\n * @title Payments\\n * @author @neuro_0x\\n * @notice This contract is used to split payments between multiple parties, and track and affiliates and their fees\\n */\\nabstract contract Payments is Ownable, ReentrancyGuard {\\n    /// @dev The maximum amount of basis points\\n    uint256 private constant _MAX_BPS = 10_000;\\n\\n    /// @dev The maximum shares\\n    uint256 private constant _MAX_SHARES = 100;\\n\\n    /// @dev The address of the Uniswap V2 Router\\n    IUniswapV2Router02 private constant _UNISWAP_V2_ROUTER =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    /// @dev The total amount of shares\\n    uint256 internal _totalShares;\\n\\n    /// @dev The total amount of released payments\\n    uint256 internal _totalReleased;\\n\\n    /// @dev The total amount of affiliate fees owed\\n    uint256 internal _affiliatePayoutOwed;\\n\\n    /// @dev The affiliate fee percentage\\n    uint256 internal _affiliateFeePercent = 2000;\\n\\n    /// @dev The mapping of shares for each payee\\n    mapping(address payee => uint256 shares) internal _shares;\\n\\n    /// @dev The mapping of released payments for each payee\\n    mapping(address payee => uint256 released) internal _released;\\n\\n    /// @dev The mapping of amount received from each affiliate\\n    mapping(address affiliate => uint256 amountReceived) internal _amountReceivedFromAffiliate;\\n\\n    /// @dev The mapping of amount paid to each affiliate\\n    mapping(address affiliate => uint256 amountPaid) internal _amountPaidToAffiliate;\\n\\n    /// @dev The mapping of amount owed to each affiliate\\n    mapping(address affiliate => uint256 amountOwed) internal _amountOwedToAffiliate;\\n\\n    /// @dev The mapping of tokens referred by each affiliate\\n    mapping(address affiliate => address[] tokensReferred) internal _tokensReferredByAffiliate;\\n\\n    /// @dev The mapping of tokens referred by each affiliate\\n    mapping(address affiliate => mapping(address tokenAddress => bool)) internal _isTokenReferredByAffiliate;\\n\\n    /// @dev The mapping of amount earned by each affiliate for each token\\n    mapping(address affiliate => mapping(address tokenAddress => uint256 amountOwed)) internal\\n        _amountEarnedByAffiliateByToken;\\n\\n    /// @dev The array of payees\\n    address[] private _payees;\\n\\n    /// @dev The array of affiliates\\n    address[] public affiliates;\\n\\n    /////////////////////////////////////////////////////////////////\\n    //                          Events                             //\\n    /////////////////////////////////////////////////////////////////\\n\\n    /// @dev The event emitted when a share is updated\\n    /// @param account the account that was updated\\n    /// @param shares the amount of shares for the account\\n    event ShareUpdated(address indexed account, uint256 indexed shares);\\n\\n    /// @dev The event emitted when a payee is added\\n    /// @param account the payee account\\n    /// @param shares the amount of shares for the payee\\n    event PayeeAdded(address indexed account, uint256 indexed shares);\\n\\n    /// @dev The event emitted when a payment is released\\n    /// @param to the account to release payment to\\n    /// @param amount the amount of payment released\\n    event PaymentReleased(address indexed to, uint256 indexed amount);\\n\\n    /// @dev The event emitted when a payment is received\\n    /// @param from the account that sent the payment\\n    /// @param amount the amount of payment received\\n    event PaymentReceived(address indexed from, uint256 indexed amount);\\n\\n    /////////////////////////////////////////////////////////////////\\n    //                          Errors                             //\\n    /////////////////////////////////////////////////////////////////\\n\\n    /// @dev The error emitted when there are no payees\\n    error NoPayees();\\n\\n    /// @dev The error emitted when a payment fails\\n    error PaymentFailed();\\n\\n    /// @dev The error emitted when shares are zero\\n    error SharesAreZero();\\n\\n    /// @dev The error emitted when the genie is already set\\n    error GenieAlreadySet();\\n\\n    /// @dev The error emitted when the account is a zero address\\n    error AccountIsZeroAddress();\\n\\n    /// @dev The error emitted when there is no amount owed to an affiliate\\n    error NoAmountOwedToAffiliate();\\n\\n    /// @dev The error emitted when an account already has shares\\n    error AccountAlreadyHasShares();\\n\\n    /// @dev The error emitted when the shares are invalid\\n    /// @param shares the amount of shares\\n    error InvalidShares(uint256 shares);\\n\\n    /// @dev The error emitted when an account is not due payment\\n    /// @param account the account that is not due payment\\n    error AccountNotDuePayment(address account);\\n\\n    /// @dev The error emitted when there are no shares for an account\\n    /// @param account the account that has no shares\\n    error ZeroSharesForAccount(address account);\\n\\n    /// @dev The error emitted when the affiliate percent is invalid\\n    /// @param affiliatePercent the affiliate percent\\n    /// @param maxBps the maximum basis points\\n    error InvalidAffiliatePercent(uint256 affiliatePercent, uint256 maxBps);\\n\\n    /// @dev The error emitted when the payee and shares lengths do not match\\n    /// @param payeesLength the length of the payees array\\n    /// @param sharesLength the length of the shares array\\n    error PayeeShareLengthMisMatch(uint256 payeesLength, uint256 sharesLength);\\n\\n    /////////////////////////////////////////////////////////////////\\n    //                     Public/External                         //\\n    /////////////////////////////////////////////////////////////////\\n\\n    /// @dev Extending contract should override this function and emit this event\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /// @return the total amount of shares\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /// @return the total amount of released payments\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /// @param account the account to get the shares for\\n    /// @return the amount of shares for an account\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /// @param account the account to get the released payments for\\n    /// @return the amount of released payments for an account\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /// @param index the index of the payee to get\\n    /// @return the address of the payee\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /// @return the number of payees\\n    function payeeCount() public view returns (uint256) {\\n        return _payees.length;\\n    }\\n\\n    /// @return the total amount of affiliate fees owed\\n    function amountOwedToAllAffiliates() public view returns (uint256) {\\n        return _affiliatePayoutOwed;\\n    }\\n\\n    /// @param account the affiliate account to get the amount owed to\\n    /// @return the total amount owed to an affiliate\\n    function amountOwedToAffiliate(address account) public view returns (uint256) {\\n        return _amountOwedToAffiliate[account];\\n    }\\n\\n    /// @param account the affiliate account to get the amount paid to\\n    /// @return the total amount paid to an affiliate\\n    function amountPaidToAffiliate(address account) public view returns (uint256) {\\n        return _amountPaidToAffiliate[account];\\n    }\\n\\n    /// @return the array of affiliates\\n    function getAffiliates() public view returns (address[] memory) {\\n        return affiliates;\\n    }\\n\\n    /// @return the number of affiliates\\n    function getNumberOfAffiliates() public view returns (uint256) {\\n        return affiliates.length;\\n    }\\n\\n    /// @param account the affiliate account to get the tokens referred by\\n    /// @return the tokens referred by an affiliate\\n    function getTokensReferredByAffiliate(address account) public view returns (address[] memory) {\\n        return _tokensReferredByAffiliate[account];\\n    }\\n\\n    /// @param account the affiliate account to get the amount earned from\\n    /// @param tokenAddress the token address to get the amount earned from\\n    /// @return the amount earned from an affiliate for a token\\n    function amountEarnedByAffiliateByToken(address account, address tokenAddress) public view returns (uint256) {\\n        return _amountEarnedByAffiliateByToken[account][tokenAddress];\\n    }\\n\\n    /// @return the affiliate fee percent\\n    function affiliateFeePercent() public view returns (uint256) {\\n        return _affiliateFeePercent;\\n    }\\n\\n    /// @param account the affiliate to release payment to\\n    /// @param genie_ the address of the CoinGenie ERC20 $GENIE token\\n    function affiliateRelease(address payable account, address genie_) external nonReentrant {\\n        uint256 payment = _amountOwedToAffiliate[account];\\n\\n        if (payment == 0) {\\n            revert NoAmountOwedToAffiliate();\\n        }\\n\\n        _amountOwedToAffiliate[account] = 0;\\n        _amountPaidToAffiliate[account] += payment;\\n\\n        _affiliatePayoutOwed -= payment;\\n\\n        if (account == address(this)) {\\n            (bool success,) = account.call{ value: payment }(\\\"\\\");\\n            if (!success) {\\n                revert PaymentFailed();\\n            }\\n        } else {\\n            address[] memory path = new address[](2);\\n            path[0] = _UNISWAP_V2_ROUTER.WETH();\\n            path[1] = genie_;\\n            _UNISWAP_V2_ROUTER.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: payment }(\\n                0, path, account, block.timestamp\\n            );\\n        }\\n\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /// @dev Set the affiliate fee percent\\n    /// @param newAffiliatePercent the new affiliate percent\\n    function setAffiliatePercent(uint256 newAffiliatePercent) external onlyOwner {\\n        if (newAffiliatePercent > _MAX_BPS) {\\n            revert InvalidAffiliatePercent(newAffiliatePercent, _MAX_BPS);\\n        }\\n\\n        _affiliateFeePercent = newAffiliatePercent;\\n    }\\n\\n    /// @dev Pay a team member\\n    /// @param account the account to release payment to\\n    function release(address payable account) external virtual nonReentrant {\\n        if (_shares[account] == 0) {\\n            revert ZeroSharesForAccount(account);\\n        }\\n\\n        uint256 totalReceived = address(this).balance - _affiliatePayoutOwed + _totalReleased;\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        if (payment == 0) {\\n            revert AccountNotDuePayment(account);\\n        }\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        (bool success,) = account.call{ value: payment }(\\\"\\\");\\n        if (!success) {\\n            revert PaymentFailed();\\n        }\\n\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /// @dev Update the split\\n    /// @param payees_ the payees\\n    /// @param shares_ the shares of the payees\\n    function updateSplit(address[] calldata payees_, uint256[] calldata shares_) external onlyOwner {\\n        uint256 len = payees_.length;\\n        if (len != shares_.length) {\\n            revert PayeeShareLengthMisMatch(len, shares_.length);\\n        }\\n\\n        if (len == 0) {\\n            revert NoPayees();\\n        }\\n\\n        uint256 sumShares;\\n        for (uint256 i = 0; i < len;) {\\n            sumShares += shares_[i];\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n\\n        if (sumShares != _MAX_SHARES) {\\n            revert InvalidShares(sumShares);\\n        }\\n\\n        // Reset current shares\\n        uint256 currentLength = _payees.length;\\n        for (uint256 i = 0; i < currentLength;) {\\n            delete _shares[payees_[i]];\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n\\n        // Add new shares and payees\\n        _payees = new address[](0);\\n        for (uint256 i = 0; i < len;) {\\n            _addPayee(payees_[i], shares_[i]);\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    //                     Private/Internal                        //\\n    /////////////////////////////////////////////////////////////////\\n\\n    /// @dev Called on contract creation to set the initial payees and shares\\n    /// @param payees the array of payees\\n    /// @param shares_ the array of shares\\n    function _createSplit(address[] memory payees, uint256[] memory shares_) internal {\\n        uint256 len = payees.length;\\n        if (len != shares_.length) {\\n            revert PayeeShareLengthMisMatch(len, shares_.length);\\n        }\\n\\n        if (len == 0) {\\n            revert NoPayees();\\n        }\\n\\n        uint256 sumShares;\\n        for (uint256 i = 0; i < len;) {\\n            sumShares += shares_[i];\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n\\n        if (sumShares != _MAX_SHARES) {\\n            revert InvalidShares(sumShares);\\n        }\\n\\n        for (uint256 i = 0; i < len;) {\\n            _addPayee(payees[i], shares_[i]);\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n    }\\n\\n    /// @dev Helper function to get the pending payment for an account\\n    /// @param account the account to get the pending payment for\\n    /// @param totalReceived the total amount received\\n    /// @param alreadyReleased the amount already released\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /// @dev Add a payee\\n    /// @param account the account to add as a payee\\n    /// @param shares_ the amount of shares for the payee\\n    function _addPayee(address account, uint256 shares_) private {\\n        if (account == address(0)) {\\n            revert AccountIsZeroAddress();\\n        }\\n\\n        if (shares_ == 0) {\\n            revert SharesAreZero();\\n        }\\n\\n        if (_shares[account] != 0) {\\n            revert AccountAlreadyHasShares();\\n        }\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CoinGenie.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\n/*\\n            \u2588\u2588\u2588\u2588\u2588\u2588                                                                                  \\n           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588  \u2588\u2588\u2588\u2588         \u2588\u2588\u2588                      \\n            \u2588\u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588                      \\n              \u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588                      \\n              \u2588\u2588       \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588                      \\n              \u2588\u2588       \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588                      \\n             \u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                      \\n            \u2588\u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                      \\n           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588\u2588\u2588                      \\n          \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588                      \\n        \u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588                                                   \\n      \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588                                                                            \\n    \u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588                                                                          \\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588        \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588            \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588        \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588        \\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n */\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IUniswapV2Router02 } from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport { Payments } from \\\"./abstract/Payments.sol\\\";\\n\\nimport { CoinGenieERC20 } from \\\"./token/CoinGenieERC20.sol\\\";\\nimport { ICoinGenieERC20 } from \\\"./token/ICoinGenieERC20.sol\\\";\\n\\n/**\\n * /// @title CoinGenie\\n * /// @author @neuro_0x\\n * /// @dev The orchestrator contract for the CoinGenie ecosystem.\\n */\\ncontract CoinGenie is Payments {\\n    /// @dev Struct to hold token details\\n    struct LaunchedToken {\\n        string name;\\n        string symbol;\\n        address tokenAddress;\\n        address payable feeRecipient;\\n        address payable affiliateFeeRecipient;\\n        uint256 index;\\n        uint256 totalSupply;\\n        uint256 taxPercent;\\n        uint256 maxBuyPercent;\\n        uint256 maxWalletPercent;\\n    }\\n\\n    /// @dev Payout categories\\n    enum PayoutCategory {\\n        Treasury,\\n        Dev,\\n        Legal,\\n        Marketing\\n    }\\n\\n    /// @dev Payouts\\n    struct Payout {\\n        address payable receiver;\\n        uint256 share;\\n    }\\n\\n    /// @dev The address of the Uniswap V2 Router\\n    IUniswapV2Router02 private constant _UNISWAP_V2_ROUTER =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    /// @dev The maximum percent in basis points that can be used as a discount\\n    uint256 private constant _MAX_BPS = 10_000;\\n\\n    /// @dev The percent in basis points to use as coin genie fee\\n    uint256 private _coinGenieFeePercent = 100;\\n\\n    /// @dev The percent in basis points to use as a discount if paying in $GENIE\\n    uint256 private _discountPercent = 5000;\\n\\n    /// @dev The amount of $GENIE a person has to pay to get the discount\\n    uint256 private _discountFeeRequiredAmount = 100_000 ether;\\n\\n    /// @dev A mapping of a payout category to a payout\\n    mapping(PayoutCategory category => Payout payout) private _payouts;\\n\\n    /// @dev The array of launched token addresses\\n    address[] public launchedTokens;\\n\\n    /// @dev The array of users\\n    address[] public users;\\n\\n    /// @dev The array of created claimable airdrop addresses\\n    address[] public createdClaimableAirdrops;\\n\\n    /// @dev A mapping of a token address to its details\\n    mapping(address token => LaunchedToken launchedToken) public launchedTokenDetails;\\n\\n    /// @dev A mapping of a user to the tokens they have launched\\n    mapping(address user => LaunchedToken[] tokens) public tokensLaunchedBy;\\n\\n    /////////////////////////////////////////////////////////////////\\n    //                           Events                            //\\n    /////////////////////////////////////////////////////////////////\\n\\n    /// @notice Emits when the discount percent is set\\n    /// @param percent - the percent in basis points to use as a discount\\n    event DiscountPercentSet(uint256 indexed percent);\\n\\n    /// @notice Emits when the discount fee required amount is set\\n    /// @param amount - the amount of $GENIE a person has to hold to get the discount\\n    event DiscountFeeRequiredAmountSet(uint256 indexed amount);\\n\\n    /// @notice Emitted when a token is launched\\n    /// @param newTokenAddress - the address of the new token\\n    /// @param tokenOwner - the address of the token owner\\n    event ERC20Launched(address indexed newTokenAddress, address indexed tokenOwner);\\n\\n    /////////////////////////////////////////////////////////////////\\n    //                           Errors                            //\\n    /////////////////////////////////////////////////////////////////\\n\\n    /// @notice Reverts when approving a token fails\\n    error ApprovalFailed();\\n\\n    /// @notice Reverts when the caller is not a team member\\n    /// @param caller - the caller of the function\\n    error NotTeamMember(address caller);\\n\\n    /// @notice Reverts when the share is too high\\n    /// @param share - the share amount\\n    /// @param maxShare - the max share amount\\n    error ShareToHigh(uint256 share, uint256 maxShare);\\n\\n    /// @notice Reverts when the payout category is invalid\\n    /// @param category - the payout category\\n    error InvalidPayoutCategory(PayoutCategory category);\\n\\n    /// @notice Reverts when the discount percent exceeds the max percent\\n    /// @param percent - the percent in basis points to use as a discount\\n    /// @param maxBps - the max percent in basis points\\n    error ExceedsMaxDiscountPercent(uint256 percent, uint256 maxBps);\\n\\n    /// @notice Reverts when the coin genie fee percent exceeds the max percent\\n    /// @param percent - the percent in basis points to use as a fee\\n    /// @param maxBps - the max percent in basis points\\n    error ExceedsMaxFeePercent(uint256 percent, uint256 maxBps);\\n\\n    /// @notice Construct the CoinGenie contract.\\n    constructor() payable {\\n        address[] memory payees = new address[](4);\\n        uint256[] memory shares_ = new uint256[](4);\\n\\n        payees[0] = 0xBe79b43B1505290DFE04294a433963dbeea736BB; // treasury\\n        payees[1] = 0x3fB2120fc0CD15000d2e500Efbdd9CE17356E242; // dev\\n        payees[2] = 0xF14A30C09897d2C7481c5907D01Ec58Ec09555af; // marketing\\n        payees[3] = 0xbb6712A513C2d7F3E17A40d095a773c5d98574B2; // legal\\n\\n        shares_[0] = 20;\\n        shares_[1] = 50;\\n        shares_[2] = 25;\\n        shares_[3] = 5;\\n\\n        _createSplit(payees, shares_);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    //                      Public/External                        //\\n    /////////////////////////////////////////////////////////////////\\n\\n    receive() external payable override {\\n        address from = _msgSender();\\n        // If we are receiving ETH from a Coin Genie token, then we need to send the affiliate fee\\n        if (launchedTokenDetails[from].tokenAddress == from) {\\n            address payable affiliate = launchedTokenDetails[from].affiliateFeeRecipient;\\n            uint256 affiliateAmount = (msg.value * _affiliateFeePercent) / _MAX_BPS;\\n\\n            if (affiliateAmount != 0 && affiliate != address(0) && affiliate != address(this)) {\\n                _affiliatePayoutOwed += affiliateAmount;\\n                _amountReceivedFromAffiliate[affiliate] += msg.value;\\n                _amountOwedToAffiliate[affiliate] += affiliateAmount;\\n                _amountEarnedByAffiliateByToken[affiliate][from] += affiliateAmount;\\n\\n                if (!_isTokenReferredByAffiliate[affiliate][from]) {\\n                    _isTokenReferredByAffiliate[affiliate][from] = true;\\n\\n                    if (_tokensReferredByAffiliate[affiliate].length == 0) {\\n                        affiliates.push(affiliate);\\n                    }\\n\\n                    _tokensReferredByAffiliate[affiliate].push(from);\\n                }\\n            }\\n\\n            emit PaymentReceived(from, msg.value);\\n        } else {\\n            emit PaymentReceived(from, msg.value);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the $GENIE contract\\n    /// @return the address of the $GENIE contract\\n    function genie() public view returns (address payable) {\\n        return payable(launchedTokens[0]);\\n    }\\n\\n    /// @notice Gets the percent in basis points to use as coin genie fee\\n    /// @return the percent in basis points to use as coin genie fee\\n    function coinGenieFeePercent() public view returns (uint256) {\\n        return _coinGenieFeePercent;\\n    }\\n\\n    /// @notice Gets the discount percent\\n    /// @return the discount percent\\n    function discountPercent() external view returns (uint256) {\\n        return _discountPercent;\\n    }\\n\\n    /// @notice Gets the discount fee required amount\\n    /// @return the discount fee required amount\\n    function discountFeeRequiredAmount() external view returns (uint256) {\\n        return _discountFeeRequiredAmount;\\n    }\\n\\n    /// @notice Launch a new instance of the ERC20.\\n    /// @dev This function deploys a new token contract and initializes it with provided parameters.\\n    /// @param name - the name of the token\\n    /// @param symbol - the ticker symbol of the token\\n    /// @param totalSupply - the totalSupply of the token\\n    /// @param affiliateFeeRecipient - the address to receive the affiliate fee\\n    /// @param taxPercent - the percent in basis points to use as a tax\\n    /// @param maxBuyPercent - amount of tokens allowed to be transferred in one tx as a percent of the total supply\\n    /// @param maxWalletPercent - amount of tokens allowed to be held in one wallet as a percent of the total supply\\n    /// @return newToken  - the CoinGenieERC20 token created\\n    function launchToken(\\n        string memory name,\\n        string memory symbol,\\n        uint256 totalSupply,\\n        address affiliateFeeRecipient,\\n        uint256 taxPercent,\\n        uint256 maxBuyPercent,\\n        uint256 maxWalletPercent\\n    )\\n        external\\n        returns (ICoinGenieERC20 newToken)\\n    {\\n        address payable feeRecipient = payable(msg.sender);\\n        if (affiliateFeeRecipient == address(0)) {\\n            affiliateFeeRecipient = payable(address(this));\\n        }\\n\\n        // Deploy the token contract\\n        newToken = new CoinGenieERC20(\\n            name,\\n            symbol,\\n            totalSupply,\\n            feeRecipient,\\n            payable(address(this)),\\n            payable(affiliateFeeRecipient),\\n            taxPercent,\\n            maxBuyPercent,\\n            maxWalletPercent,\\n            _discountFeeRequiredAmount,\\n            _discountPercent\\n        );\\n\\n        // Add the user to the array of users\\n        if (tokensLaunchedBy[feeRecipient].length == 0) {\\n            users.push(feeRecipient);\\n        }\\n\\n        // Add the token address to the array of launched token addresses\\n        launchedTokens.push(address(newToken));\\n\\n        // Create a new LaunchedToken struct\\n        LaunchedToken memory launchedToken = LaunchedToken({\\n            index: launchedTokens.length - 1,\\n            tokenAddress: address(newToken),\\n            name: name,\\n            symbol: symbol,\\n            totalSupply: totalSupply,\\n            feeRecipient: feeRecipient,\\n            affiliateFeeRecipient: payable(affiliateFeeRecipient),\\n            taxPercent: taxPercent,\\n            maxBuyPercent: maxBuyPercent,\\n            maxWalletPercent: maxWalletPercent\\n        });\\n\\n        if (tokensLaunchedBy[feeRecipient].length != 0) {\\n            // If the token is not a new user, update the affiliateFeeRecipient to be their first one\\n            launchedToken.affiliateFeeRecipient = tokensLaunchedBy[feeRecipient][0].affiliateFeeRecipient;\\n        }\\n\\n        // Add the token to the array of tokens launched by the fee recipient\\n        tokensLaunchedBy[feeRecipient].push(launchedToken);\\n\\n        // Add the token details to the mapping of launched tokens\\n        launchedTokenDetails[address(newToken)] = launchedToken;\\n\\n        // Set the genie token address\\n        newToken.setGenie(payable(launchedTokens[0]));\\n\\n        // Set the coin genie fee percent\\n        newToken.setCoinGenieFeePercent(_coinGenieFeePercent);\\n\\n        // Assign ownership to the fee recipient\\n        Ownable(address(newToken)).transferOwnership(feeRecipient);\\n\\n        // Emit the event\\n        emit ERC20Launched(address(newToken), msg.sender);\\n    }\\n\\n    /// @notice Gets the number of tokens that have been launched.\\n    function getNumberOfLaunchedTokens() external view returns (uint256) {\\n        return launchedTokens.length;\\n    }\\n\\n    /// @notice Get the launched tokens.\\n    /// @param _address The address to get the tokens for\\n    /// @return tokens The array of launched tokens\\n    function getLaunchedTokensForAddress(address _address) external view returns (LaunchedToken[] memory tokens) {\\n        return tokensLaunchedBy[_address];\\n    }\\n\\n    /// @notice Set the coin genie fee percent for tokens\\n    /// @param percent The percent in basis points to use as coin genie fee\\n    function setCoinGenieFeePercent(uint256 percent) external onlyOwner {\\n        if (percent > _MAX_BPS) {\\n            revert ExceedsMaxFeePercent(percent, _MAX_BPS);\\n        }\\n\\n        _coinGenieFeePercent = percent;\\n    }\\n\\n    /// @dev Allows the owner to set the percent in basis points to use as a discount\\n    /// @param percent - the percent in basis points to use as a discount\\n    function setDiscountPercent(uint256 percent) external onlyOwner {\\n        if (percent > _MAX_BPS) {\\n            revert ExceedsMaxDiscountPercent(percent, _MAX_BPS);\\n        }\\n\\n        _discountPercent = percent;\\n        emit DiscountPercentSet(percent);\\n    }\\n\\n    /// @dev Allows the owner to set the amount of $GENIE required to get the discount\\n    /// @param amount - the amount of $GENIE a person has to hold to get the discount\\n    function setDiscountFeeRequiredAmount(uint256 amount) external onlyOwner {\\n        _discountFeeRequiredAmount = amount;\\n        emit DiscountFeeRequiredAmountSet(amount);\\n    }\\n\\n    /// @notice Swaps tokens for Ether.\\n    /// @dev Utilizes Uniswap for the token-to-ETH swap.\\n    /// @param tokenAmount The amount of tokens to swap for ETH.\\n    function swapGenieForEth(uint256 tokenAmount) external nonReentrant onlyOwner {\\n        ICoinGenieERC20 genieToken = ICoinGenieERC20(launchedTokens[0]);\\n        address[] memory path = new address[](2);\\n        path[0] = address(genieToken);\\n        path[1] = _UNISWAP_V2_ROUTER.WETH();\\n        genieToken.approve(address(_UNISWAP_V2_ROUTER), tokenAmount);\\n        _UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount, 0, path, address(this), block.timestamp\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/CoinGenieERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\n/*\\n            \u2588\u2588\u2588\u2588\u2588\u2588                                                                                  \\n           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588  \u2588\u2588\u2588\u2588         \u2588\u2588\u2588                      \\n            \u2588\u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588                      \\n              \u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588                      \\n              \u2588\u2588       \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588                      \\n              \u2588\u2588       \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588                      \\n             \u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                      \\n            \u2588\u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                      \\n           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588\u2588\u2588                      \\n          \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588                      \\n        \u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588                                                   \\n      \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588                                                                            \\n    \u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588                                                                          \\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588        \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588            \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588        \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588        \\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n */\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IUniswapV2Factory } from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport { IUniswapV2Router02 } from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport { IUniswapV2Pair } from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport { ICoinGenieERC20 } from \\\"./ICoinGenieERC20.sol\\\";\\n\\n/**\\n * @title CoinGenieERC20\\n * @author @neuro_0x\\n * @notice A robust and secure ERC20 token for the Coin Genie ecosystem. Inspired by APEX & TokenTool by Bitbond\\n * @dev This ERC20 should only be deployed via the launchToken function of the CoinGenie contract.\\n */\\ncontract CoinGenieERC20 is ICoinGenieERC20, Ownable, ReentrancyGuard {\\n    using SafeERC20 for ICoinGenieERC20;\\n\\n    /// @dev The fee recipients for the contract\\n    struct FeeTakers {\\n        address payable feeRecipient;\\n        address payable coinGenie;\\n        address payable affiliateFeeRecipient;\\n    }\\n\\n    /// @dev The fee percentages for the contract\\n    struct FeePercentages {\\n        uint256 taxPercent;\\n        uint256 maxBuyPercent;\\n        uint256 maxWalletPercent;\\n        uint256 discountFeeRequiredAmount;\\n        uint256 discountPercent;\\n        uint256 coinGenieFeePercent;\\n    }\\n\\n    /// @dev The decimals for the contract\\n    uint8 private constant _DECIMALS = 18;\\n    /// @dev The max basis points\\n    uint256 private constant _MAX_BPS = 10_000;\\n    /// @dev The max tax that can be set\\n    uint256 private constant _MAX_TAX = 500; // 5%\\n    /// @dev The min amount of eth required to open trading\\n    uint256 private constant _MIN_LIQUIDITY_ETH = 0.5 ether;\\n    /// @dev The min amount of this token required to open trading\\n    uint256 private constant _MIN_LIQUIDITY_TOKEN = 1 ether;\\n    /// @dev The platform liquidity addition fee\\n    uint256 private constant _LP_ETH_FEE_PERCENTAGE = 100; // 1%\\n    /// @dev The platform liquidity addition fee\\n    uint256 private constant _MIN_WALLET_PERCENT = 100; // 1%\\n    /// @dev The eth autoswap amount\\n    uint256 private constant _ETH_AUTOSWAP_AMOUNT = 0.025 ether;\\n\\n    /// @dev The address of the Uniswap V2 Router\\n    IUniswapV2Router02 private constant _UNISWAP_V2_ROUTER =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    /// @dev Mapping of holders and their balances\\n    mapping(address holder => uint256 balance) private _balances;\\n    /// @dev Mapping of holders and their allowances\\n    mapping(address holder => mapping(address spender => uint256 allowance)) private _allowances;\\n    /// @dev Mapping of holders and their whitelist status\\n    mapping(address holder => bool isWhiteListed) private _whitelist;\\n    /// @dev Mapping of fee recipients and the amount of eth they have received\\n    mapping(address feeRecipient => uint256 amountEthReceived) private _ethReceived;\\n\\n    /// @dev The fee recipients for the contract\\n    FeeTakers private _feeTakers;\\n    /// @dev The fee percentages for the contract\\n    FeePercentages private _feeAmounts;\\n\\n    /// @dev The $GENIE contract\\n    CoinGenieERC20 private _genie;\\n\\n    /// @dev The address of the Uniswap V2 Pair\\n    address private _uniswapV2Pair;\\n\\n    /// @dev The coin genie fee is set\\n    bool private _isFeeSet;\\n    /// @dev The trading status of the contract\\n    bool private _isTradingOpen;\\n    /// @dev The current swap status of the contract, used for reentrancy checks\\n    bool private _inSwap;\\n    /// @dev The swap status of the contract\\n    bool private _isSwapEnabled;\\n\\n    /// @dev The name of the token\\n    string private _name;\\n    /// @dev The symbol of the token\\n    string private _symbol;\\n    /// @dev The total supply of the token\\n    uint256 private _totalSupply;\\n\\n    /// @dev Prevents a reentrant call when trying to swap fees\\n    modifier lockTheSwap() {\\n        _inSwap = true;\\n        _;\\n        _inSwap = false;\\n    }\\n\\n    /// @param name_ - the name of the token\\n    /// @param symbol_ - the ticker symbol of the token\\n    /// @param totalSupply_ - the totalSupply of the token\\n    /// @param feeRecipient_ - the address that will be the owner of the token and receive fees\\n    /// @param coinGenie_ - the address of the Coin Genie\\n    /// @param affiliateFeeRecipient_ - the address to receive the affiliate fee\\n    /// @param taxPercent_ - the percent in basis points to use as a tax\\n    /// @param maxBuyPercent_ - amount of tokens allowed to be transferred in one tx as a percent of the total supply\\n    /// @param maxWalletPercent_ - amount of tokens allowed to be held in one wallet as a percent of the total supply\\n    /// @param discountFeeRequiredAmount_ - the amount of tokens required to pay the discount fee\\n    /// @param discountPercent_ - the percent in basis points to use as a discount\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 totalSupply_,\\n        address payable feeRecipient_,\\n        address payable coinGenie_,\\n        address payable affiliateFeeRecipient_,\\n        uint256 taxPercent_,\\n        uint256 maxBuyPercent_,\\n        uint256 maxWalletPercent_,\\n        uint256 discountFeeRequiredAmount_,\\n        uint256 discountPercent_\\n    )\\n        payable\\n    {\\n        _setERC20Properties(name_, symbol_, totalSupply_);\\n        _setFeeRecipients(feeRecipient_, coinGenie_, affiliateFeeRecipient_);\\n        _setFeePercentages(taxPercent_, maxBuyPercent_, maxWalletPercent_, discountFeeRequiredAmount_, discountPercent_);\\n        _setWhitelist(feeRecipient_, coinGenie_, affiliateFeeRecipient_);\\n\\n        _balances[feeRecipient_] = totalSupply_;\\n        emit Transfer(address(0), msg.sender, totalSupply_);\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    //                     Public/External                         //\\n    /////////////////////////////////////////////////////////////////\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable { }\\n\\n    /// @dev see ICoinGenieERC20 name()\\n    function name() public view returns (string memory) {\\n        return string(abi.encodePacked(_name));\\n    }\\n\\n    /// @dev see ICoinGenieERC20 symbol()\\n    function symbol() public view returns (string memory) {\\n        return string(abi.encodePacked(_symbol));\\n    }\\n\\n    /// @dev see ICoinGenieERC20 decimals()\\n    function decimals() public pure returns (uint8) {\\n        return _DECIMALS;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 totalSupply()\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 feeRecipient()\\n    function feeRecipient() public view returns (address payable) {\\n        return _feeTakers.feeRecipient;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 affiliateFeeRecipient()\\n    function affiliateFeeRecipient() public view returns (address payable) {\\n        return _feeTakers.affiliateFeeRecipient;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 coinGenie()\\n    function coinGenie() public view returns (address payable) {\\n        return _feeTakers.coinGenie;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 genie()\\n    function genie() public view returns (address payable) {\\n        return payable(address(_genie));\\n    }\\n\\n    /// @dev see ICoinGenieERC20 isTradingOpen()\\n    function isTradingOpen() public view returns (bool) {\\n        return _isTradingOpen;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 isSwapEnabled()\\n    function isSwapEnabled() public view returns (bool) {\\n        return _isSwapEnabled;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 taxPercent()\\n    function taxPercent() public view returns (uint256) {\\n        return _feeAmounts.taxPercent;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 maxBuyPercent()\\n    function maxBuyPercent() public view returns (uint256) {\\n        return _feeAmounts.maxBuyPercent;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 maxWalletPercent()\\n    function maxWalletPercent() public view returns (uint256) {\\n        return _feeAmounts.maxWalletPercent;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 discountFeeRequiredAmount()\\n    function discountFeeRequiredAmount() public view returns (uint256) {\\n        return _feeAmounts.discountFeeRequiredAmount;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 discountPercent()\\n    function discountPercent() public view returns (uint256) {\\n        return _feeAmounts.discountPercent;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 lpToken()\\n    function lpToken() public view returns (address) {\\n        return _uniswapV2Pair;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 balanceOf()\\n    function amountEthReceived(address feeRecipient_) public view returns (uint256) {\\n        return _ethReceived[feeRecipient_];\\n    }\\n\\n    /// @dev see ICoinGenieERC20 balanceOf()\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /// @dev see ICoinGenieERC20 burn()\\n    function burn(uint256 amount) external {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /// @dev see ICoinGenieERC20 transfer()\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 allowance()\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /// @dev see ICoinGenieERC20 approve()\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 transferFrom()\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\\n\\n        return true;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 manualSwap()\\n    function manualSwap(uint256 amount) external {\\n        if (msg.sender != _feeTakers.feeRecipient) {\\n            revert Unauthorized();\\n        }\\n\\n        uint256 contractTokenBalance = _balances[address(this)];\\n        if (amount > contractTokenBalance) {\\n            revert InsufficientTokens(amount, contractTokenBalance);\\n        }\\n\\n        _swapTokensForEth(amount);\\n\\n        uint256 contractEthBalance = address(this).balance;\\n        if (contractEthBalance != 0) {\\n            _sendEthToFee(contractEthBalance);\\n        }\\n    }\\n\\n    /// @dev see ICoinGenieERC20 createPairAndAddLiquidity()\\n    function createPairAndAddLiquidity(\\n        uint256 amountToLP,\\n        bool payInGenie\\n    )\\n        external\\n        payable\\n        onlyOwner\\n        nonReentrant\\n        returns (address)\\n    {\\n        uint256 value = msg.value;\\n        address from = _msgSender();\\n        _openTradingChecks(amountToLP, value);\\n\\n        transfer(address(this), amountToLP);\\n        _approve(address(this), address(_UNISWAP_V2_ROUTER), _totalSupply);\\n\\n        uint256 ethAmountToTreasury = (value * _LP_ETH_FEE_PERCENTAGE) / _MAX_BPS;\\n        if (payInGenie) {\\n            ethAmountToTreasury = (ethAmountToTreasury * _feeAmounts.discountPercent) / _MAX_BPS;\\n            ICoinGenieERC20(_genie).safeTransferFrom(from, _feeTakers.coinGenie, _feeAmounts.discountFeeRequiredAmount);\\n        }\\n\\n        uint256 ethAmountToLP = value - ethAmountToTreasury;\\n        _uniswapV2Pair =\\n            IUniswapV2Factory(_UNISWAP_V2_ROUTER.factory()).createPair(address(this), _UNISWAP_V2_ROUTER.WETH());\\n\\n        _UNISWAP_V2_ROUTER.addLiquidityETH{ value: ethAmountToLP }(\\n            address(this), balanceOf(address(this)), 0, 0, from, block.timestamp\\n        );\\n\\n        SafeERC20.safeIncreaseAllowance(ICoinGenieERC20(_uniswapV2Pair), address(_UNISWAP_V2_ROUTER), amountToLP);\\n\\n        _isSwapEnabled = true;\\n        _isTradingOpen = true;\\n\\n        if (ethAmountToTreasury != 0) {\\n            (bool success,) = _feeTakers.coinGenie.call{ value: ethAmountToTreasury }(\\\"\\\");\\n            if (!success) {\\n                revert TransferFailed(ethAmountToTreasury, address(this), _feeTakers.coinGenie);\\n            }\\n        }\\n\\n        emit TradingOpened(_uniswapV2Pair);\\n\\n        return _uniswapV2Pair;\\n    }\\n\\n    /// @dev see ICoinGenieERC20 addLiquidity()\\n    function addLiquidity(uint256 amountToLP, bool payInGenie) external payable nonReentrant {\\n        uint256 value = msg.value;\\n        address from = _msgSender();\\n        _addLiquidityChecks(amountToLP, value, from);\\n\\n        uint256 currentContractBalance = _balances[address(this)];\\n        transfer(address(this), amountToLP);\\n        _approve(address(this), address(_UNISWAP_V2_ROUTER), amountToLP);\\n\\n        uint256 ethAmountToTreasury = (value * _LP_ETH_FEE_PERCENTAGE) / _MAX_BPS;\\n        if (payInGenie) {\\n            ethAmountToTreasury = (ethAmountToTreasury * _feeAmounts.discountPercent) / _MAX_BPS;\\n            ICoinGenieERC20(_genie).safeTransferFrom(from, _feeTakers.coinGenie, _feeAmounts.discountFeeRequiredAmount);\\n        }\\n\\n        uint256 ethAmountToLP = value - ethAmountToTreasury;\\n        SafeERC20.safeIncreaseAllowance(ICoinGenieERC20(_uniswapV2Pair), address(_UNISWAP_V2_ROUTER), amountToLP);\\n        _UNISWAP_V2_ROUTER.addLiquidityETH{ value: ethAmountToLP }(\\n            address(this), amountToLP, 0, 0, from, block.timestamp\\n        );\\n\\n        if (ethAmountToTreasury != 0) {\\n            (bool success,) = _feeTakers.coinGenie.call{ value: ethAmountToTreasury }(\\\"\\\");\\n            if (!success) {\\n                revert TransferFailed(ethAmountToTreasury, address(this), _feeTakers.coinGenie);\\n            }\\n        }\\n\\n        // If there is any eth left in the contract, send it to the fee recipient\\n        uint256 ethToRefund = address(this).balance;\\n        if (ethToRefund != 0) {\\n            _sendEthToFee(ethToRefund);\\n        }\\n\\n        // If there is any token left in the contract, send it to the fee recipient\\n        uint256 newContractBalance = _balances[address(this)];\\n        if (currentContractBalance < newContractBalance) {\\n            _transfer(address(this), _feeTakers.feeRecipient, newContractBalance - currentContractBalance);\\n        }\\n    }\\n\\n    /// @dev see ICoinGenieERC20 removeLiquidity()\\n    function removeLiquidity(uint256 amountToRemove) external nonReentrant {\\n        address from = _msgSender();\\n        ICoinGenieERC20(_uniswapV2Pair).safeTransferFrom(from, address(this), amountToRemove);\\n        _UNISWAP_V2_ROUTER.removeLiquidityETHSupportingFeeOnTransferTokens(\\n            address(this), amountToRemove, 0, 0, from, block.timestamp\\n        );\\n    }\\n\\n    /// @dev see ICoinGenieERC20 setGenie()\\n    function setGenie(address genie_) external {\\n        if (address(_genie) != address(0)) {\\n            revert GenieAlreadySet();\\n        }\\n\\n        _genie = CoinGenieERC20(payable(genie_));\\n        emit GenieSet(genie_);\\n    }\\n\\n    /// @dev see ICoinGenieERC20 setMaxBuyPercent()\\n    function setMaxBuyPercent(uint256 maxBuyPercent_) external onlyOwner {\\n        if (maxBuyPercent_ > _MAX_BPS) {\\n            revert InvalidMaxBuyPercent(maxBuyPercent_);\\n        }\\n\\n        _feeAmounts.maxBuyPercent = maxBuyPercent_;\\n        emit MaxBuyPercentSet(maxBuyPercent_);\\n    }\\n\\n    /// @dev see ICoinGenieERC20 setMaxWalletPercent()\\n    function setMaxWalletPercent(uint256 maxWalletPercent_) external onlyOwner {\\n        if (maxWalletPercent_ > _MAX_BPS || maxWalletPercent_ < _MIN_WALLET_PERCENT) {\\n            revert InvalidMaxWalletPercent(maxWalletPercent_);\\n        }\\n\\n        _feeAmounts.maxWalletPercent = maxWalletPercent_;\\n        emit MaxWalletPercentSet(maxWalletPercent_);\\n    }\\n\\n    /// @dev see ICoinGenieERC20 setFeeRecipient()\\n    function setFeeRecipient(address payable feeRecipient_) external onlyOwner {\\n        _feeTakers.feeRecipient = feeRecipient_;\\n        transferOwnership(feeRecipient_);\\n        emit FeeRecipientSet(feeRecipient_);\\n    }\\n\\n    /// @dev see ICoinGenieERC20 setCoinGenieFeePercent()\\n    function setCoinGenieFeePercent(uint256 coinGenieFeePercent_) external onlyOwner {\\n        if (coinGenieFeePercent_ > _MAX_BPS) {\\n            revert InvalidCoinGenieFeePercent();\\n        }\\n\\n        if (_isFeeSet) {\\n            revert CoinGenieFeePercentAlreadySet();\\n        }\\n\\n        _isFeeSet = true;\\n        _feeAmounts.coinGenieFeePercent = coinGenieFeePercent_;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    //                     Private/Internal                        //\\n    /////////////////////////////////////////////////////////////////\\n\\n    /// @notice Approves a given amount for the spender.\\n    /// @dev This is a private function to encapsulate the logic for approvals.\\n    /// @param owner The address of the token holder.\\n    /// @param spender The address of the spender.\\n    /// @param amount The amount of tokens to approve.\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        if (owner == address(0) || spender == address(0)) {\\n            revert ApproveFromZeroAddress();\\n        }\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /// @notice Handles the internal transfer of tokens, applying fees and taxes as needed.\\n    /// @dev This function implements restrictions and special cases for transfers.\\n    /// @param from The address sending the tokens.\\n    /// @param to The address receiving the tokens.\\n    /// @param amount The amount of tokens to transfer.\\n    function _transfer(address from, address to, uint256 amount) private {\\n        _checkTransferRestrictions(from, to, amount);\\n\\n        uint256 totalTaxAmount;\\n        if (!_whitelist[from] && !_whitelist[to]) {\\n            if (from == _uniswapV2Pair && to != address(_UNISWAP_V2_ROUTER)) {\\n                uint256 maxBuyAmount = (_feeAmounts.maxBuyPercent * _totalSupply) / _MAX_BPS;\\n                if (amount > maxBuyAmount) {\\n                    revert ExceedsMaxAmount(amount, maxBuyAmount);\\n                }\\n\\n                uint256 maxWalletAmount = (_feeAmounts.maxWalletPercent * _totalSupply) / _MAX_BPS;\\n                if (_balances[to] + amount > maxWalletAmount) {\\n                    revert ExceedsMaxAmount(_balances[to] + amount, maxWalletAmount);\\n                }\\n            }\\n\\n            uint256 contractTokenBalance = _balances[address(this)];\\n            totalTaxAmount =\\n                (amount * _feeAmounts.taxPercent) / _MAX_BPS + (amount * _feeAmounts.coinGenieFeePercent) / _MAX_BPS;\\n            if (!_inSwap && to == _uniswapV2Pair && _isTradingOpen && contractTokenBalance >= 0) {\\n                _swapTokensForEth(_min(amount, contractTokenBalance));\\n\\n                uint256 contractEthBalance = address(this).balance;\\n                if (contractEthBalance >= _ETH_AUTOSWAP_AMOUNT) {\\n                    _sendEthToFee(contractEthBalance);\\n                }\\n            }\\n        }\\n\\n        if (totalTaxAmount != 0) {\\n            _balances[address(this)] += totalTaxAmount;\\n            emit Transfer(from, address(this), totalTaxAmount);\\n        }\\n\\n        uint256 amountAfterTax = amount - totalTaxAmount;\\n        _balances[from] -= amount;\\n        _balances[to] += amountAfterTax;\\n        emit Transfer(from, to, amountAfterTax);\\n    }\\n\\n    /// @notice Burns a given amount of tokens from the specified address.\\n    /// @dev Tokens are permanently removed from circulation.\\n    /// @param from The address from which tokens will be burned.\\n    /// @param amount The amount of tokens to burn.\\n    function _burn(address from, uint256 amount) private {\\n        if (from == address(0)) {\\n            revert BurnFromZeroAddress();\\n        }\\n\\n        uint256 balanceOfFrom = _balances[from];\\n        if (amount > balanceOfFrom) {\\n            revert InsufficientTokens(amount, balanceOfFrom);\\n        }\\n\\n        unchecked {\\n            _balances[from] -= amount;\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    /// @notice Conducts checks for adding liquidity.\\n    /// @dev Used to enforce trading conditions and limits.\\n    /// @param amountToLP The amount of tokens intended for liquidity.\\n    /// @param value The amount of ETH provided for liquidity.\\n    /// @param from The address providing the liquidity.\\n    function _addLiquidityChecks(uint256 amountToLP, uint256 value, address from) private view {\\n        if (!_isSwapEnabled || !_isTradingOpen) {\\n            revert TradingNotOpen();\\n        }\\n\\n        if (_balances[from] < amountToLP) {\\n            revert InsufficientTokens(amountToLP, _MIN_LIQUIDITY_TOKEN);\\n        }\\n\\n        if (value < _MIN_LIQUIDITY_ETH) {\\n            revert InsufficientETH(value, _MIN_LIQUIDITY_ETH);\\n        }\\n    }\\n\\n    /// @notice Checks conditions before opening trading.\\n    /// @dev Enforces initial liquidity requirements.\\n    /// @param amountToLP The amount of tokens intended for liquidity.\\n    /// @param value The amount of ETH provided for liquidity.\\n    function _openTradingChecks(uint256 amountToLP, uint256 value) private view {\\n        if (_isSwapEnabled || _isTradingOpen) {\\n            revert TradingAlreadyOpen();\\n        }\\n\\n        if (amountToLP < _MIN_LIQUIDITY_TOKEN || _balances[owner()] < amountToLP) {\\n            revert InsufficientTokens(amountToLP, _MIN_LIQUIDITY_TOKEN);\\n        }\\n\\n        if (value < _MIN_LIQUIDITY_ETH) {\\n            revert InsufficientETH(value, _MIN_LIQUIDITY_ETH);\\n        }\\n    }\\n\\n    /// @notice Validates the addresses and amounts for transfers.\\n    /// @dev Throws errors for zero addresses or zero amounts.\\n    /// @param from The address sending the tokens.\\n    /// @param to The address receiving the tokens.\\n    /// @param amount The amount of tokens to transfer.\\n    function _checkTransferRestrictions(address from, address to, uint256 amount) private pure {\\n        if (from == address(0) || to == address(0)) {\\n            revert TransferFromZeroAddress();\\n        }\\n\\n        if (amount == 0) {\\n            revert InsufficientTokens(amount, 0);\\n        }\\n    }\\n\\n    /// @notice Swaps tokens for Ether.\\n    /// @dev Utilizes Uniswap for the token-to-ETH swap.\\n    /// @param tokenAmount The amount of tokens to swap for ETH.\\n    function _swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = _UNISWAP_V2_ROUTER.WETH();\\n        _approve(address(this), address(_UNISWAP_V2_ROUTER), tokenAmount);\\n        _UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount, 0, path, address(this), block.timestamp\\n        );\\n    }\\n\\n    /// @notice Distributes Ether to the specified fee recipients.\\n    /// @dev Divides and sends Ether based on predefined fee ratios.\\n    /// @param amount The total amount of Ether to distribute.\\n    function _sendEthToFee(uint256 amount) private {\\n        uint256 tax = _feeAmounts.taxPercent;\\n        uint256 feeRecipientShare = (amount * tax) / (tax + _feeAmounts.coinGenieFeePercent);\\n        uint256 coinGenieShare = amount - feeRecipientShare;\\n\\n        address payable _coinGenie = _feeTakers.coinGenie;\\n        (bool successCoinGenie,) = _coinGenie.call{ value: coinGenieShare }(\\\"\\\");\\n        if (!successCoinGenie) {\\n            revert TransferFailed(coinGenieShare, address(this), _coinGenie);\\n        }\\n\\n        address payable _feeRecipient = _feeTakers.feeRecipient;\\n        (bool successFeeRecipient,) = _feeRecipient.call{ value: feeRecipientShare }(\\\"\\\");\\n        _ethReceived[_feeRecipient] += feeRecipientShare;\\n        if (!successFeeRecipient) {\\n            revert TransferFailed(feeRecipientShare, address(this), _feeTakers.coinGenie);\\n        }\\n\\n        emit EthSentToFee(feeRecipientShare, coinGenieShare);\\n    }\\n\\n    /// @notice Returns the smaller of the two provided values.\\n    /// @param a First number.\\n    /// @param b Second number.\\n    /// @return The smaller value between a and b.\\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice Sets the properties for the ERC20 token.\\n    /// @dev Initializes the token's name, symbol, and total supply.\\n    /// @param name_ The name of the token.\\n    /// @param symbol_ The symbol of the token.\\n    /// @param totalSupply_ The total supply of the token.\\n    function _setERC20Properties(string memory name_, string memory symbol_, uint256 totalSupply_) private {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        if (totalSupply_ < 1 ether || totalSupply_ > 100_000_000_000 ether) {\\n            revert InvalidTotalSupply(totalSupply_);\\n        }\\n        _totalSupply = totalSupply_;\\n    }\\n\\n    /// @notice Assigns addresses for fee recipients.\\n    /// @dev Sets addresses for the main fee recipient, Coin Genie, and affiliate fee recipient.\\n    /// @param feeRecipient_ The address of the main fee recipient.\\n    /// @param coinGenie_ The address for Coin Genie.\\n    /// @param affiliateFeeRecipient_ The address for the affiliate fee recipient.\\n    function _setFeeRecipients(\\n        address payable feeRecipient_,\\n        address payable coinGenie_,\\n        address payable affiliateFeeRecipient_\\n    )\\n        private\\n    {\\n        _feeTakers.feeRecipient = feeRecipient_;\\n        _feeTakers.coinGenie = coinGenie_;\\n\\n        if (affiliateFeeRecipient_ == address(0)) {\\n            _feeTakers.affiliateFeeRecipient = coinGenie_;\\n        } else {\\n            _feeTakers.affiliateFeeRecipient = affiliateFeeRecipient_;\\n        }\\n    }\\n\\n    /// @notice Configures fee percentages and related parameters.\\n    /// @dev Sets the tax percentage, max buy percentage, and other fee-related parameters.\\n    /// @param taxPercent_ The tax percentage on transactions.\\n    /// @param maxBuyPercent_ The maximum buy percentage.\\n    /// @param maxWalletPercent_ The maximum wallet percentage.\\n    /// @param discountFeeRequiredAmount_ The discount fee required amount.\\n    /// @param discountPercent_ The discount percentage.\\n    function _setFeePercentages(\\n        uint256 taxPercent_,\\n        uint256 maxBuyPercent_,\\n        uint256 maxWalletPercent_,\\n        uint256 discountFeeRequiredAmount_,\\n        uint256 discountPercent_\\n    )\\n        private\\n    {\\n        _feeAmounts.taxPercent = taxPercent_;\\n        _feeAmounts.maxBuyPercent = maxBuyPercent_;\\n        _feeAmounts.maxWalletPercent = maxWalletPercent_;\\n        _feeAmounts.discountFeeRequiredAmount = discountFeeRequiredAmount_;\\n        _feeAmounts.discountPercent = discountPercent_;\\n    }\\n\\n    /// @notice Whitelists specified addresses.\\n    /// @dev Adds provided addresses to the whitelist.\\n    /// @param feeRecipient_ The address of the main fee recipient.\\n    /// @param coinGenie_ The address for Coin Genie.\\n    /// @param affiliateFeeRecipient_ The address for the affiliate fee recipient.\\n    function _setWhitelist(address feeRecipient_, address coinGenie_, address affiliateFeeRecipient_) private {\\n        _whitelist[feeRecipient_] = true;\\n        _whitelist[coinGenie_] = true;\\n        _whitelist[affiliateFeeRecipient_] = true;\\n        _whitelist[address(this)] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/ICoinGenieERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ICoinGenieERC20\\n * @author @neuro_0x\\n * @dev Interface for the CoinGenie ERC20 token\\n */\\ninterface ICoinGenieERC20 is IERC20 {\\n    /////////////////////////////////////////////////////////////////\\n    //                           Events                            //\\n    /////////////////////////////////////////////////////////////////\\n\\n    /// @dev Emits when Genie is set\\n    /// @param genie - the address of the $GENIE contract\\n    event GenieSet(address indexed genie);\\n\\n    /// @dev Emits when trading is opened\\n    /// @param pair - the address of the Uniswap V2 Pair\\n    event TradingOpened(address indexed pair);\\n\\n    /// @dev Emits when the max buy percent is set\\n    /// @param maxBuyPercent - the max buy percent\\n    event MaxBuyPercentSet(uint256 indexed maxBuyPercent);\\n\\n    /// @dev Emits when the fee recipient is set\\n    /// @param feeRecipient - the address of the fee recipient\\n    event FeeRecipientSet(address indexed feeRecipient);\\n\\n    /// @dev Emits when the max wallet percent is set\\n    /// @param maxWalletPercent - the max wallet percent\\n    event MaxWalletPercentSet(uint256 indexed maxWalletPercent);\\n\\n    /// @dev Emits when eth is sent to the fee recipients\\n    /// @param feeRecipientShare - the amount of eth sent to the fee recipient as a share\\n    /// @param coinGenieShare - the amount of eth sent to the coin genie as a share\\n    event EthSentToFee(uint256 indexed feeRecipientShare, uint256 indexed coinGenieShare);\\n\\n    /////////////////////////////////////////////////////////////////\\n    //                           Errors                            //\\n    /////////////////////////////////////////////////////////////////\\n\\n    /// @dev Reverts when the caller is not authorized to perform an action\\n    error Unauthorized();\\n\\n    /// @dev Reverts when trading is not open\\n    error TradingNotOpen();\\n\\n    /// @dev Reverts when Genie is already set\\n    error GenieAlreadySet();\\n\\n    /// @dev Reverts when trading is already open\\n    error TradingAlreadyOpen();\\n\\n    /// @dev Reverts when trying to burn from the zero address\\n    error BurnFromZeroAddress();\\n\\n    /// @dev Reverts when trying to approve from the zero address\\n    error ApproveFromZeroAddress();\\n\\n    /// @dev Reverts when trying to transfer from the zero address\\n    error TransferFromZeroAddress();\\n\\n    /// @dev Reverts when coin genie fee is already set\\n    error CoinGenieFeePercentAlreadySet();\\n\\n    /// @dev Reverts when invalid coin genie fee percent\\n    error InvalidCoinGenieFeePercent();\\n\\n    /// @dev Reverts when invalid total supply\\n    /// @param totalSupply - the total supply\\n    error InvalidTotalSupply(uint256 totalSupply);\\n\\n    /// @dev Reverts when trying to set an invalid max wallet percent\\n    /// @param maxWalletPercent - the max wallet percent\\n    error InvalidMaxWalletPercent(uint256 maxWalletPercent);\\n\\n    /// @dev Reverts when trying to set an invalid max buy percent\\n    /// @param maxBuyPercent - the max buy percent\\n    error InvalidMaxBuyPercent(uint256 maxBuyPercent);\\n\\n    /// @dev Reverts when there is not enough eth send in the tx\\n    /// @param amount - the amount of eth sent\\n    /// @param minAmount - the min amount of eth required\\n    error InsufficientETH(uint256 amount, uint256 minAmount);\\n\\n    /// @dev Reverts when the amount sent is beyond the max amount allowed\\n    /// @param amount - the amount sent\\n    /// @param maxAmount - the max amount allowed\\n    error ExceedsMaxAmount(uint256 amount, uint256 maxAmount);\\n\\n    /// @dev Reverts when there are not enough tokens to perform the action\\n    /// @param amount - the amount of tokens sent\\n    /// @param minAmount - the min amount of tokens required\\n    error InsufficientTokens(uint256 amount, uint256 minAmount);\\n\\n    /// @dev Reverts when there is not enough allowance to perform the action\\n    /// @param amount - the amount of tokens sent\\n    /// @param allowance - the amount of allowance required\\n    error InsufficientAllowance(uint256 amount, uint256 allowance);\\n\\n    /// @dev Reverts when there is an error when transferring\\n    /// @param amount - the amount sent\\n    /// @param from - the address the transfer is from\\n    /// @param to - the address the transfer is to\\n    error TransferFailed(uint256 amount, address from, address to);\\n\\n    /////////////////////////////////////////////////////////////////\\n    //                       Public/External                       //\\n    /////////////////////////////////////////////////////////////////\\n\\n    /// @dev Gets the name of the token\\n    /// @return the name of the token\\n    function name() external view returns (string memory);\\n\\n    /// @dev Gets the symbol of the token\\n    /// @return the symbol of the token\\n    function symbol() external view returns (string memory);\\n\\n    /// @dev Gets the number of decimals the token uses\\n    /// @return the number of decimals the token uses\\n    function decimals() external pure returns (uint8);\\n\\n    /// @dev Gets the total supply of the token\\n    /// @return the total supply of the token\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @dev Gets the address of the fee recipient\\n    /// @return the address of the fee recipient\\n    function feeRecipient() external view returns (address payable);\\n\\n    /// @dev Gets the address of the CoinGenie contract\\n    /// @return the address of the CoinGenie contract\\n    function coinGenie() external view returns (address payable);\\n\\n    /// @dev Gets the address of the $GENIE contract\\n    /// @return the address of the $GENIE contract\\n    function genie() external view returns (address payable);\\n\\n    /// @dev Gets the address of the affiliate fee recipient\\n    /// @return the address of the affiliate fee recipient\\n    function affiliateFeeRecipient() external view returns (address payable);\\n\\n    /// @dev Gets the trading status of the token\\n    /// @return the trading status of the token\\n    function isTradingOpen() external view returns (bool);\\n\\n    /// @dev Gets the trading status of the token\\n    /// @return the trading status of the token\\n    function isSwapEnabled() external view returns (bool);\\n\\n    /// @dev Gets the tax percent\\n    /// @return the tax percent\\n    function taxPercent() external view returns (uint256);\\n\\n    /// @dev Gets the max buy percent\\n    /// @return the max buy percent\\n    function maxBuyPercent() external view returns (uint256);\\n\\n    /// @dev Gets the max wallet percent\\n    /// @return the max wallet percent\\n    function maxWalletPercent() external view returns (uint256);\\n\\n    /// @dev Gets the discount fee required amount in $GENIE\\n    /// @return the discount fee required amount in $GENIE\\n    function discountFeeRequiredAmount() external view returns (uint256);\\n\\n    /// @dev Gets the discount percent received if paying in $GENIE\\n    /// @return the discount percent received if paying in $GENIE\\n    function discountPercent() external view returns (uint256);\\n\\n    /// @dev Gets the Uniswap V2 pair address\\n    /// @return the uniswap v2 pair address\\n    function lpToken() external view returns (address);\\n\\n    /// @dev Gets the balance of the specified address\\n    /// @param account - the address to get the balance of\\n    /// @return the balance of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @dev Gets the amount of eth received by the fee recipient\\n    /// @param feeRecipient_ - the address to get the amount of eth received\\n    /// @return the amount of eth received\\n    function amountEthReceived(address feeRecipient_) external view returns (uint256);\\n\\n    /// @dev Burns `amount` tokens from the caller\\n    /// @param amount - the amount of tokens to burn\\n    function burn(uint256 amount) external;\\n\\n    /// @dev Transfers `amount` tokens to `recipient`\\n    /// @param recipient - the address to transfer to\\n    /// @param amount - the amount of tokens to transfer\\n    /// @return true if the transfer was successful\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @dev Gets the allowance of an address to spend tokens on behalf of the owner\\n    /// @param owner - the address to get the allowance of\\n    /// @param spender - the address to get the allowance for\\n    /// @return the allowance of the owner for the spender\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @dev Approves an address to spend tokens on behalf of the caller\\n    /// @param spender - the address to approve\\n    /// @param amount - the amount to approve\\n    /// @return true if the approval was successful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @dev Transfers tokens from one address to another\\n    /// @param sender - the address to transfer from\\n    /// @param recipient - the address to transfer to\\n    /// @param amount - the amount to transfer\\n    /// @return true if the transfer was successful\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /// @dev Swaps the contracts tokens for eth\\n    function manualSwap(uint256 amount) external;\\n\\n    /// @dev Opens trading by adding liquidity to Uniswap V2\\n    /// @param amountToLP - the amount of tokens to add liquidity with\\n    /// @param payInGenie - true if paying with $GENIE\\n    /// @return the address of the LP Token created\\n    function createPairAndAddLiquidity(uint256 amountToLP, bool payInGenie) external payable returns (address);\\n\\n    /// @dev Adds liquidity to Uniswap V2\\n    /// @param amountToLP - the amount of tokens to add liquidity with\\n    /// @param payInGenie - true if paying with $GENIE\\n    function addLiquidity(uint256 amountToLP, bool payInGenie) external payable;\\n\\n    /// @dev Removes liquidity from Uniswap V2\\n    /// @param amountToRemove - the amount of LP tokens to remove\\n    function removeLiquidity(uint256 amountToRemove) external;\\n\\n    /// @dev Sets the address of the $GENIE contract\\n    /// @param genie_ - the address of the $GENIE contract\\n    function setGenie(address genie_) external;\\n\\n    /// @dev Sets the fee recipient\\n    /// @param feeRecipient_ - the address of the fee recipient\\n    function setFeeRecipient(address payable feeRecipient_) external;\\n\\n    /// @dev Sets the max amount of tokens that can be bought in a tx as a percent of the total supply\\n    /// @param maxBuyPercent_ - the max buy percent\\n    function setMaxBuyPercent(uint256 maxBuyPercent_) external;\\n\\n    /// @dev Sets the max amount of tokens a wallet can hold as a percent of the total supply\\n    /// @param maxWalletPercent_ - the max wallet percent\\n    function setMaxWalletPercent(uint256 maxWalletPercent_) external;\\n\\n    /// @notice Sets the Coin Genie fee percentage.\\n    /// @param coinGenieFeePercent_ The Coin Genie fee percentage.\\n    function setCoinGenieFeePercent(uint256 coinGenieFeePercent_) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"coinGenie_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"affiliateFeeRecipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"taxPercent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuyPercent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletPercent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountFeeRequiredAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountPercent_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApproveFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoinGenieFeePercentAlreadySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"ExceedsMaxAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GenieAlreadySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"InsufficientETH\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"InsufficientTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCoinGenieFeePercent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuyPercent\",\"type\":\"uint256\"}],\"name\":\"InvalidMaxBuyPercent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletPercent\",\"type\":\"uint256\"}],\"name\":\"InvalidMaxWalletPercent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"InvalidTotalSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradingAlreadyOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradingNotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feeRecipientShare\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"coinGenieShare\",\"type\":\"uint256\"}],\"name\":\"EthSentToFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"genie\",\"type\":\"address\"}],\"name\":\"GenieSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxBuyPercent\",\"type\":\"uint256\"}],\"name\":\"MaxBuyPercentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxWalletPercent\",\"type\":\"uint256\"}],\"name\":\"MaxWalletPercentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"TradingOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToLP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payInGenie\",\"type\":\"bool\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"affiliateFeeRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"amountEthReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinGenie\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToLP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"payInGenie\",\"type\":\"bool\"}],\"name\":\"createPairAndAddLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountFeeRequiredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genie\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRemove\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coinGenieFeePercent_\",\"type\":\"uint256\"}],\"name\":\"setCoinGenieFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"genie_\",\"type\":\"address\"}],\"name\":\"setGenie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuyPercent_\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletPercent_\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CoinGenieERC20", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000633bf832dc39c0025a7aeaa165ec91acf02063d50000000000000000000000003b33ecbbb9fa4350f45c216db3e88a12ab1ac8080000000000000000000000003b33ecbbb9fa4350f45c216db3e88a12ab1ac808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000152d02c7e14af68000000000000000000000000000000000000000000000000000000000000000001388000000000000000000000000000000000000000000000000000000000000000547656e6965000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000547454e4945000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}