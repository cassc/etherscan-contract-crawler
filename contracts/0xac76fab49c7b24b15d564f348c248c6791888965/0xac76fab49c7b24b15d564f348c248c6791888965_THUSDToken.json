{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/CheckContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n\\r\\ncontract CheckContract {\\r\\n    /**\\r\\n     * Check that the account is an already deployed non-destroyed contract.\\r\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\r\\n     */\\r\\n    function checkContract(address _account) internal view {\\r\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(_account) }\\r\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/IERC2612.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change one's\\r\\n * {IERC20-allowance} without having to send a transaction, by signing a\\r\\n * message. This allows users to spend tokens without having to hold Ether.\\r\\n *\\r\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\r\\n * \\r\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\r\\n */\\r\\ninterface IERC2612 {\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\r\\n     * given `owner`'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(address owner, address spender, uint256 amount, \\r\\n                    uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     *\\r\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to \\r\\n     * a value in the near future. The deadline argument can be set to uint(-1) to \\r\\n     * create Permits that effectively never expire.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n    \\r\\n    function version() external view returns (string memory);\\r\\n    function permitTypeHash() external view returns (bytes32);\\r\\n    function domainSeparator() external view returns (bytes32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/**\\r\\n * Based on OpenZeppelin's Ownable contract:\\r\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\r\\n *\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current owner.\\r\\n     */\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return msg.sender == _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     *\\r\\n     * NOTE: This function is not safe, as it doesn\u2019t check owner is calling it.\\r\\n     * Make sure you check it before calling it.\\r\\n     */\\r\\n    function _renounceOwnership() internal {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ITHUSDToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"../Dependencies/IERC2612.sol\\\";\\r\\n\\r\\ninterface ITHUSDToken is IERC20Metadata, IERC2612 {\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event TroveManagerAddressAdded(address _troveManagerAddress);\\r\\n    event StabilityPoolAddressAdded(address _newStabilityPoolAddress);\\r\\n    event BorrowerOperationsAddressAdded(address _newBorrowerOperationsAddress);\\r\\n\\r\\n    event THUSDTokenBalanceUpdated(address _user, uint256 _amount);\\r\\n\\r\\n    // --- Functions ---\\r\\n    function mintList(address contractAddress) external view returns (bool);\\r\\n    function burnList(address contractAddress) external view returns (bool);\\r\\n\\r\\n    function mint(address _account, uint256 _amount) external;\\r\\n\\r\\n    function burn(address _account, uint256 _amount) external;\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/THUSDToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Interfaces/ITHUSDToken.sol\\\";\\r\\nimport \\\"./Dependencies/CheckContract.sol\\\";\\r\\nimport \\\"./Dependencies/Ownable.sol\\\";\\r\\n\\r\\n/*\\r\\n*\\r\\n* Based upon OpenZeppelin's ERC20 contract:\\r\\n* https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\\r\\n*\\r\\n* and their EIP2612 (ERC20Permit / ERC712) functionality:\\r\\n* https://github.com/OpenZeppelin/openzeppelin-contracts/blob/53516bc555a454862470e7860a9b5254db4d00f5/contracts/token/ERC20/ERC20Permit.sol\\r\\n*\\r\\n*\\r\\n* --- Functionality added specific to the THUSDToken ---\\r\\n*\\r\\n* 1) Transfer protection: blacklist of addresses that are invalid recipients (i.e. core Liquity contracts) in external\\r\\n* transfer() and transferFrom() calls. The purpose is to protect users from losing tokens by mistakenly sending THUSD directly to a Liquity\\r\\n* core contract, when they should rather call the right function.\\r\\n*\\r\\n*/\\r\\n\\r\\ncontract THUSDToken is Ownable, CheckContract, ITHUSDToken {\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    string constant internal _NAME = \\\"thUSD Stablecoin\\\";\\r\\n    string constant internal _SYMBOL = \\\"thUSD\\\";\\r\\n    string constant internal _VERSION = \\\"1\\\";\\r\\n    uint8 constant internal _DECIMALS = 18;\\r\\n\\r\\n    // --- Data for EIP2612 ---\\r\\n\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 private constant _PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n    // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\r\\n    bytes32 private constant _TYPE_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\r\\n\\r\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\r\\n    // invalidate the cached domain separator if the chain id changes.\\r\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\r\\n    uint256 private immutable _CACHED_CHAIN_ID;\\r\\n\\r\\n    bytes32 private immutable _HASHED_NAME;\\r\\n    bytes32 private immutable _HASHED_VERSION;\\r\\n\\r\\n    mapping (address => uint256) private _nonces;\\r\\n\\r\\n    // User data for THUSD token\\r\\n    mapping (address => uint256) private _balances;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n    // --- Addresses ---\\r\\n    mapping(address => bool) public burnList;\\r\\n    mapping(address => bool) public mintList;\\r\\n\\r\\n    uint256 public immutable governanceTimeDelay;\\r\\n\\r\\n    address public pendingTroveManager;\\r\\n    address public pendingStabilityPool;\\r\\n    address public pendingBorrowerOperations;\\r\\n    \\r\\n    address public pendingRevokedMintAddress;\\r\\n    address public pendingRevokedBurnAddress;\\r\\n    address public pendingAddedMintAddress;\\r\\n\\r\\n    uint256 public revokeMintListInitiated;\\r\\n    uint256 public revokeBurnListInitiated;\\r\\n    uint256 public addContractsInitiated;\\r\\n    uint256 public addMintListInitiated;\\r\\n\\r\\n    constructor\\r\\n    (\\r\\n        address _troveManagerAddress1,\\r\\n        address _stabilityPoolAddress1,\\r\\n        address _borrowerOperationsAddress1,\\r\\n        address _troveManagerAddress2,\\r\\n        address _stabilityPoolAddress2,\\r\\n        address _borrowerOperationsAddress2,\\r\\n        uint256 _governanceTimeDelay\\r\\n    )\\r\\n    {\\r\\n        // when created its linked to one set of contracts and collateral, other collateral types can be added via governance\\r\\n        _addSystemContracts(_troveManagerAddress1, _stabilityPoolAddress1, _borrowerOperationsAddress1);\\r\\n        if (_troveManagerAddress2 != address(0)) {\\r\\n            _addSystemContracts(_troveManagerAddress2, _stabilityPoolAddress2, _borrowerOperationsAddress2);\\r\\n        }\\r\\n        bytes32 hashedName = keccak256(bytes(_NAME));\\r\\n        bytes32 hashedVersion = keccak256(bytes(_VERSION));\\r\\n\\r\\n        _HASHED_NAME = hashedName;\\r\\n        _HASHED_VERSION = hashedVersion;\\r\\n        _CACHED_CHAIN_ID = block.chainid;\\r\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(_TYPE_HASH, hashedName, hashedVersion);\\r\\n        governanceTimeDelay = _governanceTimeDelay;\\r\\n        require(governanceTimeDelay <= 30 weeks, \\\"Governance delay is too big\\\");\\r\\n    }\\r\\n\\r\\n    modifier onlyAfterGovernanceDelay(\\r\\n        uint256 _changeInitializedTimestamp\\r\\n    ) {\\r\\n        require(_changeInitializedTimestamp > 0, \\\"Change not initiated\\\");\\r\\n        require(\\r\\n            block.timestamp >= _changeInitializedTimestamp + governanceTimeDelay,\\r\\n            \\\"Governance delay has not elapsed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- Governance ---\\r\\n\\r\\n    function startRevokeMintList(address _account)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(mintList[_account], \\\"Incorrect address to revoke\\\");\\r\\n\\r\\n        revokeMintListInitiated = block.timestamp;\\r\\n        pendingRevokedMintAddress = _account;\\r\\n    }\\r\\n\\r\\n    function cancelRevokeMintList() external onlyOwner {\\r\\n        require(revokeMintListInitiated != 0, \\\"Revoking from mint list is not started\\\");\\r\\n\\r\\n        revokeMintListInitiated = 0;\\r\\n        pendingRevokedMintAddress = address(0);\\r\\n    }\\r\\n\\r\\n    function finalizeRevokeMintList()\\r\\n        external\\r\\n        onlyOwner\\r\\n        onlyAfterGovernanceDelay(revokeMintListInitiated)\\r\\n    {\\r\\n        mintList[pendingRevokedMintAddress] = false;\\r\\n        revokeMintListInitiated = 0;\\r\\n        pendingRevokedMintAddress = address(0);\\r\\n    }\\r\\n\\r\\n    function startAddMintList(address _account) external onlyOwner {\\r\\n        require(!mintList[_account], \\\"Incorrect address to add\\\");\\r\\n\\r\\n        addMintListInitiated = block.timestamp;\\r\\n        pendingAddedMintAddress = _account;\\r\\n    }\\r\\n\\r\\n    function cancelAddMintList() external onlyOwner {\\r\\n        require(addMintListInitiated != 0, \\\"Adding to mint list is not started\\\");\\r\\n\\r\\n        addMintListInitiated = 0;\\r\\n        pendingAddedMintAddress = address(0);\\r\\n    }\\r\\n\\r\\n    function finalizeAddMintList()\\r\\n        external\\r\\n        onlyOwner\\r\\n        onlyAfterGovernanceDelay(addMintListInitiated)\\r\\n    {\\r\\n        mintList[pendingAddedMintAddress] = true;\\r\\n        addMintListInitiated = 0;\\r\\n        pendingAddedMintAddress = address(0);\\r\\n    }\\r\\n\\r\\n    function startAddContracts(address _troveManagerAddress, address _stabilityPoolAddress, address _borrowerOperationsAddress)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        checkContract(_troveManagerAddress);\\r\\n        checkContract(_stabilityPoolAddress);\\r\\n        checkContract(_borrowerOperationsAddress);\\r\\n\\r\\n        // save as provisional contracts to add\\r\\n        pendingTroveManager = _troveManagerAddress;\\r\\n        pendingStabilityPool = _stabilityPoolAddress;\\r\\n        pendingBorrowerOperations = _borrowerOperationsAddress;\\r\\n\\r\\n        // save block number\\r\\n        addContractsInitiated = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function cancelAddContracts() external onlyOwner {\\r\\n        require(addContractsInitiated != 0, \\\"Adding contracts is not started\\\");\\r\\n\\r\\n        addContractsInitiated = 0;\\r\\n        pendingTroveManager = address(0);\\r\\n        pendingStabilityPool = address(0);\\r\\n        pendingBorrowerOperations = address(0);\\r\\n    }\\r\\n\\r\\n    function finalizeAddContracts()\\r\\n        external\\r\\n        onlyOwner\\r\\n        onlyAfterGovernanceDelay(addContractsInitiated)\\r\\n    {\\r\\n        // make sure minimum blocks has passed\\r\\n        _addSystemContracts(pendingTroveManager, pendingStabilityPool, pendingBorrowerOperations);\\r\\n        addContractsInitiated = 0;\\r\\n        pendingTroveManager = address(0);\\r\\n        pendingStabilityPool = address(0);\\r\\n        pendingBorrowerOperations = address(0);\\r\\n    }\\r\\n\\r\\n    function startRevokeBurnList(address _account)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(burnList[_account], \\\"Incorrect address to revoke\\\");\\r\\n\\r\\n        revokeBurnListInitiated = block.timestamp;\\r\\n        pendingRevokedBurnAddress = _account;\\r\\n    }\\r\\n\\r\\n    function cancelRevokeBurnList() external onlyOwner {\\r\\n        require(revokeBurnListInitiated != 0, \\\"Revoking from burn list is not started\\\");\\r\\n\\r\\n        revokeBurnListInitiated = 0;\\r\\n        pendingRevokedBurnAddress = address(0);\\r\\n    }\\r\\n\\r\\n    function finalizeRevokeBurnList()\\r\\n        external\\r\\n        onlyOwner\\r\\n        onlyAfterGovernanceDelay(revokeBurnListInitiated)\\r\\n    {\\r\\n        burnList[pendingRevokedBurnAddress] = false;\\r\\n        revokeBurnListInitiated = 0;\\r\\n        pendingRevokedBurnAddress = address(0);\\r\\n    }\\r\\n\\r\\n    // --- Functions for intra-Liquity calls ---\\r\\n\\r\\n    function mint(address _account, uint256 _amount) external override {\\r\\n        require(mintList[msg.sender], \\\"THUSDToken: Caller not allowed to mint\\\");\\r\\n        _mint(_account, _amount);\\r\\n    }\\r\\n\\r\\n    function burn(address _account, uint256 _amount) external override {\\r\\n        require(burnList[msg.sender], \\\"THUSDToken: Caller not allowed to burn\\\");\\r\\n        _burn(_account, _amount);\\r\\n    }\\r\\n\\r\\n    // --- External functions ---\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) external view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        _requireValidRecipient(recipient);\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        _requireValidRecipient(recipient);\\r\\n        _transfer(sender, recipient, amount);\\r\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        _approve(sender, msg.sender, currentAllowance - amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external override returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external override returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // --- EIP 2612 Functionality ---\\r\\n\\r\\n    function domainSeparator() public view override returns (bytes32) {\\r\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\r\\n            return _CACHED_DOMAIN_SEPARATOR;\\r\\n        } else {\\r\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function permit\\r\\n    (\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        require(deadline >= block.timestamp, 'THUSD: expired deadline');\\r\\n        bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01',\\r\\n                         domainSeparator(), keccak256(abi.encode(\\r\\n                         _PERMIT_TYPEHASH, owner, spender, amount,\\r\\n                         _nonces[owner]++, deadline))));\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(recoveredAddress == owner, 'THUSD: invalid signature');\\r\\n        _approve(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function nonces(address owner) external view override returns (uint256) { // FOR EIP 2612\\r\\n        return _nonces[owner];\\r\\n    }\\r\\n\\r\\n    // --- Internal operations ---\\r\\n\\r\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 hashedName, bytes32 hashedVersion) private view returns (bytes32) {\\r\\n        return keccak256(abi.encode(typeHash, hashedName, hashedVersion, block.chainid, address(this)));\\r\\n    }\\r\\n\\r\\n    // --- Internal operations ---\\r\\n\\r\\n    function _addSystemContracts(address _troveManagerAddress, address _stabilityPoolAddress, address _borrowerOperationsAddress) internal {\\r\\n        checkContract(_troveManagerAddress);\\r\\n        checkContract(_stabilityPoolAddress);\\r\\n        checkContract(_borrowerOperationsAddress);\\r\\n\\r\\n        burnList[_troveManagerAddress] = true;\\r\\n        emit TroveManagerAddressAdded(_troveManagerAddress);\\r\\n\\r\\n        burnList[_stabilityPoolAddress] = true;\\r\\n        emit StabilityPoolAddressAdded(_stabilityPoolAddress);\\r\\n\\r\\n        burnList[_borrowerOperationsAddress] = true;\\r\\n        emit BorrowerOperationsAddressAdded(_borrowerOperationsAddress);\\r\\n\\r\\n        mintList[_borrowerOperationsAddress] = true;\\r\\n    }\\r\\n\\r\\n    // Warning: sanity checks (for sender and recipient) should have been done before calling these internal functions\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        assert(sender != address(0));\\r\\n        assert(recipient != address(0));\\r\\n\\r\\n        require(_balances[sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[sender] -= amount;\\r\\n        _balances[recipient] += amount;\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        assert(account != address(0));\\r\\n\\r\\n        _totalSupply = _totalSupply + amount;\\r\\n        _balances[account] = _balances[account] + amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        assert(account != address(0));\\r\\n\\r\\n        require(_balances[account] >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _balances[account] -= amount;\\r\\n        _totalSupply -= amount;\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        assert(owner != address(0));\\r\\n        assert(spender != address(0));\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    // --- 'require' functions ---\\r\\n\\r\\n    function _requireValidRecipient(address _recipient) internal view {\\r\\n        require(\\r\\n            _recipient != address(0) &&\\r\\n            _recipient != address(this),\\r\\n            \\\"THUSD: Cannot transfer tokens directly to the THUSD token contract or the zero address\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // --- Optional functions ---\\r\\n\\r\\n    function name() external pure override returns (string memory) {\\r\\n        return _NAME;\\r\\n    }\\r\\n\\r\\n    function symbol() external pure override returns (string memory) {\\r\\n        return _SYMBOL;\\r\\n    }\\r\\n\\r\\n    function decimals() external pure override returns (uint8) {\\r\\n        return _DECIMALS;\\r\\n    }\\r\\n\\r\\n    function version() external pure override returns (string memory) {\\r\\n        return _VERSION;\\r\\n    }\\r\\n\\r\\n    function permitTypeHash() external pure override returns (bytes32) {\\r\\n        return _PERMIT_TYPEHASH;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveManagerAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_governanceTimeDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBorrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"BorrowerOperationsAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newStabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"THUSDTokenBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addContractsInitiated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addMintListInitiated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelAddContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelAddMintList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelRevokeBurnList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelRevokeMintList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeAddContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeAddMintList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeRevokeBurnList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeRevokeMintList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceTimeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAddedMintAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingBorrowerOperations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRevokedBurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRevokedMintAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingStabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingTroveManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permitTypeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeBurnListInitiated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeMintListInitiated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrowerOperationsAddress\",\"type\":\"address\"}],\"name\":\"startAddContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"startAddMintList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"startRevokeBurnList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"startRevokeMintList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "THUSDToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000e103c279f1c1693914890c4fcf269c917bf3e559000000000000000000000000f839a231436ff1c313d1933f5e2440618d63312c0000000000000000000000005e8e6374605c1fa413f50fb2bf9191be20cc0f7e000000000000000000000000ce9f0d28af5768831eb98fd97c7b6f9ce4b2649d000000000000000000000000d7b7c4d1eb5695ea5808c644bc18eed4c89b4a5f000000000000000000000000b38ee6134d20344f7cb0de58a2e857209f307072000000000000000000000000000000000000000000000000000000000076a700", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}