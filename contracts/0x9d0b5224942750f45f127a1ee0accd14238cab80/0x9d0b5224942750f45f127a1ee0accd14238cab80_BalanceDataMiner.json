{"SourceCode": "pragma solidity ^0.5.16;\r\n\r\n\r\ninterface TokenContract {\r\n    function balanceOf(address _tokenOwner) external view returns (uint);\r\n}\r\n\r\ninterface NftContract {\r\n    function balanceOf(address _tokenOwner) external view returns(uint);\r\n    function ownerOf(uint _tokenId) external view returns(address);\r\n    function tokenOfOwnerByIndex(address _tokenOwner, uint _index) external view returns (uint);\r\n}\r\n\r\ninterface MultiTokenContract {\r\n    function balanceOf(address _tokenOwner, uint _tokenId) external view returns(uint);\r\n}\r\n\r\n\r\ncontract BalanceDataMiner {\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Gets balances for each wallet address for a given token contract\r\n    //-------------------------------------------------------------------------\r\n    function getBatchBalance(\r\n        address _contractAddress,\r\n        address[] memory _walletAddresses\r\n    ) public view returns(uint[] memory) {\r\n        uint[] memory balances = new uint[](_walletAddresses.length);\r\n\r\n        if (_contractAddress == address(0)) {\r\n            for (uint i = 0; i < balances.length; ++i) {\r\n                balances[i] = _walletAddresses[i].balance;\r\n            }\r\n        }\r\n        else {\r\n            TokenContract tokenContract = TokenContract(_contractAddress);\r\n            for (uint i = 0; i < balances.length; ++i) {\r\n                balances[i] = tokenContract.balanceOf(_walletAddresses[i]);\r\n            }\r\n        }\r\n        return balances;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Gets balances and owned token ids for each wallet address for\r\n    ///  a given nft contract\r\n    //-------------------------------------------------------------------------\r\n    function getBatchNfts(\r\n        address _contractAddress,\r\n        address[] calldata _walletAddresses\r\n    ) external view returns (uint[] memory, uint[] memory) {\r\n        NftContract nftContract = NftContract(_contractAddress);\r\n        uint[] memory balances = new uint[](_walletAddresses.length);\r\n        uint numberOfTokens = 0;\r\n\r\n        for (uint i = 0; i < balances.length; ++i) {\r\n            balances[i] = nftContract.balanceOf(_walletAddresses[i]);\r\n            numberOfTokens += balances[i];\r\n        }\r\n\r\n        uint[] memory tokenIds = new uint[](numberOfTokens);\r\n\r\n        uint tokenIdsIndex = 0;\r\n        for (uint i = 0; i < balances.length; ++i) {\r\n            for (uint j = 0; j < balances[i]; ++j) {\r\n                tokenIds[tokenIdsIndex] = nftContract.tokenOfOwnerByIndex(_walletAddresses[i], j);\r\n                ++tokenIdsIndex;\r\n            }\r\n        }\r\n\r\n        return (balances, tokenIds);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Gets owner wallet addresses for each token ID\r\n    //-------------------------------------------------------------------------\r\n    function getBatchNftOwners(\r\n        address _contractAddress,\r\n        uint[] calldata _tokenIds\r\n    ) external view returns (address[] memory) {\r\n        NftContract nftContract = NftContract(_contractAddress);\r\n        address[] memory tokenOwners = new address[](_tokenIds.length);\r\n\r\n        for (uint i = 0; i < _tokenIds.length; ++i) {\r\n            tokenOwners[i] = nftContract.ownerOf(_tokenIds[i]);\r\n        }\r\n\r\n        return tokenOwners;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Gets balances for each wallet address for a given token id of\r\n    ///  a given multi token contract\r\n    //-------------------------------------------------------------------------\r\n    function getBatchMultiTokenBalance(\r\n        address _contractAddress,\r\n        uint _tokenId,\r\n        address[] calldata _walletAddresses\r\n    ) external view returns (uint[] memory) {\r\n        MultiTokenContract tokenContract = MultiTokenContract(_contractAddress);\r\n        uint[] memory balances = new uint[](_walletAddresses.length);\r\n        for (uint i = 0; i < _walletAddresses.length; ++i) {\r\n            balances[i] = tokenContract.balanceOf(_walletAddresses[i], _tokenId);\r\n        }\r\n        return balances;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Gets whether each wallet address owns any of the given token\r\n    ///  ids of a given multi token contract\r\n    //-------------------------------------------------------------------------\r\n    function getBatchMultiTokenOwnership(\r\n        address _contractAddress,\r\n        uint[] calldata _tokenIds,\r\n        address[] calldata _walletAddresses\r\n    ) external view returns(bool[] memory) {\r\n        MultiTokenContract tokenContract = MultiTokenContract(_contractAddress);\r\n        bool[] memory ownerships = new bool[](_walletAddresses.length);\r\n        for (uint i = 0; i < _walletAddresses.length; ++i) {\r\n            for (uint j = 0; j < _tokenIds.length; ++j) {\r\n                if (tokenContract.balanceOf(_walletAddresses[i], _tokenIds[j]) > 0) {\r\n                    ownerships[i] = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return ownerships;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_walletAddresses\",\"type\":\"address[]\"}],\"name\":\"getBatchBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_walletAddresses\",\"type\":\"address[]\"}],\"name\":\"getBatchMultiTokenBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_walletAddresses\",\"type\":\"address[]\"}],\"name\":\"getBatchMultiTokenOwnership\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getBatchNftOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_walletAddresses\",\"type\":\"address[]\"}],\"name\":\"getBatchNfts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BalanceDataMiner", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ec56f4c5a0ced836fd36a66a0ad57420d9aa9d6ef9f9d1643c5980296f305d34"}