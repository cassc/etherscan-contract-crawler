{"SourceCode": "//File: contracts/lib/ens/AbstractENS.sol\r\npragma solidity ^0.4.15;\r\n\r\n\r\ninterface AbstractENS {\r\n    function owner(bytes32 _node) constant returns (address);\r\n    function resolver(bytes32 _node) constant returns (address);\r\n    function ttl(bytes32 _node) constant returns (uint64);\r\n    function setOwner(bytes32 _node, address _owner);\r\n    function setSubnodeOwner(bytes32 _node, bytes32 label, address _owner);\r\n    function setResolver(bytes32 _node, address _resolver);\r\n    function setTTL(bytes32 _node, uint64 _ttl);\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed _node, bytes32 indexed _label, address _owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed _node, address _owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed _node, address _resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed _node, uint64 _ttl);\r\n}\r\n\r\n//File: contracts/lib/ens/PublicResolver.sol\r\npragma solidity ^0.4.0;\r\n\r\n\r\n\r\n/**\r\n * A simple resolver anyone can use; only allows the owner of a node to set its\r\n * address.\r\n */\r\ncontract PublicResolver {\r\n    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\r\n    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\r\n    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\r\n    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\r\n    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\r\n    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\r\n    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\r\n\r\n    event AddrChanged(bytes32 indexed node, address a);\r\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\r\n    event NameChanged(bytes32 indexed node, string name);\r\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\r\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\r\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\r\n\r\n    struct PublicKey {\r\n        bytes32 x;\r\n        bytes32 y;\r\n    }\r\n\r\n    struct Record {\r\n        address addr;\r\n        bytes32 content;\r\n        string name;\r\n        PublicKey pubkey;\r\n        mapping(string=>string) text;\r\n        mapping(uint256=>bytes) abis;\r\n    }\r\n\r\n    AbstractENS ens;\r\n    mapping(bytes32=>Record) records;\r\n\r\n    modifier only_owner(bytes32 node) {\r\n        if (ens.owner(node) != msg.sender) throw;\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * @param ensAddr The ENS registrar contract.\r\n     */\r\n    function PublicResolver(AbstractENS ensAddr) {\r\n        ens = ensAddr;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the resolver implements the interface specified by the provided hash.\r\n     * @param interfaceID The ID of the interface to check for.\r\n     * @return True if the contract implements the requested interface.\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) constant returns (bool) {\r\n        return interfaceID == ADDR_INTERFACE_ID ||\r\n               interfaceID == CONTENT_INTERFACE_ID ||\r\n               interfaceID == NAME_INTERFACE_ID ||\r\n               interfaceID == ABI_INTERFACE_ID ||\r\n               interfaceID == PUBKEY_INTERFACE_ID ||\r\n               interfaceID == TEXT_INTERFACE_ID ||\r\n               interfaceID == INTERFACE_META_ID;\r\n    }\r\n\r\n    /**\r\n     * Returns the address associated with an ENS node.\r\n     * @param node The ENS node to query.\r\n     * @return The associated address.\r\n     */\r\n    function addr(bytes32 node) constant returns (address ret) {\r\n        ret = records[node].addr;\r\n    }\r\n\r\n    /**\r\n     * Sets the address associated with an ENS node.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * @param node The node to update.\r\n     * @param addr The address to set.\r\n     */\r\n    function setAddr(bytes32 node, address addr) only_owner(node) {\r\n        records[node].addr = addr;\r\n        AddrChanged(node, addr);\r\n    }\r\n\r\n    /**\r\n     * Returns the content hash associated with an ENS node.\r\n     * Note that this resource type is not standardized, and will likely change\r\n     * in future to a resource type based on multihash.\r\n     * @param node The ENS node to query.\r\n     * @return The associated content hash.\r\n     */\r\n    function content(bytes32 node) constant returns (bytes32 ret) {\r\n        ret = records[node].content;\r\n    }\r\n\r\n    /**\r\n     * Sets the content hash associated with an ENS node.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * Note that this resource type is not standardized, and will likely change\r\n     * in future to a resource type based on multihash.\r\n     * @param node The node to update.\r\n     * @param hash The content hash to set\r\n     */\r\n    function setContent(bytes32 node, bytes32 hash) only_owner(node) {\r\n        records[node].content = hash;\r\n        ContentChanged(node, hash);\r\n    }\r\n\r\n    /**\r\n     * Returns the name associated with an ENS node, for reverse records.\r\n     * Defined in EIP181.\r\n     * @param node The ENS node to query.\r\n     * @return The associated name.\r\n     */\r\n    function name(bytes32 node) constant returns (string ret) {\r\n        ret = records[node].name;\r\n    }\r\n\r\n    /**\r\n     * Sets the name associated with an ENS node, for reverse records.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * @param node The node to update.\r\n     * @param name The name to set.\r\n     */\r\n    function setName(bytes32 node, string name) only_owner(node) {\r\n        records[node].name = name;\r\n        NameChanged(node, name);\r\n    }\r\n\r\n    /**\r\n     * Returns the ABI associated with an ENS node.\r\n     * Defined in EIP205.\r\n     * @param node The ENS node to query\r\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\r\n     * @return contentType The content type of the return value\r\n     * @return data The ABI data\r\n     */\r\n    function ABI(bytes32 node, uint256 contentTypes) constant returns (uint256 contentType, bytes data) {\r\n        var record = records[node];\r\n        for(contentType = 1; contentType <= contentTypes; contentType <<= 1) {\r\n            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\r\n                data = record.abis[contentType];\r\n                return;\r\n            }\r\n        }\r\n        contentType = 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the ABI associated with an ENS node.\r\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\r\n     * the empty string.\r\n     * @param node The node to update.\r\n     * @param contentType The content type of the ABI\r\n     * @param data The ABI data.\r\n     */\r\n    function setABI(bytes32 node, uint256 contentType, bytes data) only_owner(node) {\r\n        // Content types must be powers of 2\r\n        if (((contentType - 1) & contentType) != 0) throw;\r\n\r\n        records[node].abis[contentType] = data;\r\n        ABIChanged(node, contentType);\r\n    }\r\n\r\n    /**\r\n     * Returns the SECP256k1 public key associated with an ENS node.\r\n     * Defined in EIP 619.\r\n     * @param node The ENS node to query\r\n     * @return x, y the X and Y coordinates of the curve point for the public key.\r\n     */\r\n    function pubkey(bytes32 node) constant returns (bytes32 x, bytes32 y) {\r\n        return (records[node].pubkey.x, records[node].pubkey.y);\r\n    }\r\n\r\n    /**\r\n     * Sets the SECP256k1 public key associated with an ENS node.\r\n     * @param node The ENS node to query\r\n     * @param x the X coordinate of the curve point for the public key.\r\n     * @param y the Y coordinate of the curve point for the public key.\r\n     */\r\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) only_owner(node) {\r\n        records[node].pubkey = PublicKey(x, y);\r\n        PubkeyChanged(node, x, y);\r\n    }\r\n\r\n    /**\r\n     * Returns the text data associated with an ENS node and key.\r\n     * @param node The ENS node to query.\r\n     * @param key The text data key to query.\r\n     * @return The associated text data.\r\n     */\r\n    function text(bytes32 node, string key) constant returns (string ret) {\r\n        ret = records[node].text[key];\r\n    }\r\n\r\n    /**\r\n     * Sets the text data associated with an ENS node and key.\r\n     * May only be called by the owner of that node in the ENS registry.\r\n     * @param node The node to update.\r\n     * @param key The key to set.\r\n     * @param value The text data value to set.\r\n     */\r\n    function setText(bytes32 node, string key, string value) only_owner(node) {\r\n        records[node].text[key] = value;\r\n        TextChanged(node, key, key);\r\n    }\r\n}\r\n\r\n//File: contracts/ens/ENSConstants.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\ncontract ENSConstants {\r\n    bytes32 constant public ENS_ROOT = bytes32(0);\r\n    bytes32 constant public ETH_TLD_LABEL = keccak256(\"eth\");\r\n    bytes32 constant public ETH_TLD_NODE = keccak256(ENS_ROOT, ETH_TLD_LABEL);\r\n    bytes32 constant public PUBLIC_RESOLVER_LABEL = keccak256(\"resolver\");\r\n    bytes32 constant public PUBLIC_RESOLVER_NODE = keccak256(ETH_TLD_NODE, PUBLIC_RESOLVER_LABEL);\r\n}\r\n\r\n//File: contracts/acl/IACL.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\ninterface IACL {\r\n    function initialize(address permissionsCreator) public;\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n}\r\n\r\n//File: contracts/kernel/IKernel.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\ninterface IKernel {\r\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\r\n\r\n    function acl() public view returns (IACL);\r\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\r\n\r\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\r\n    function getApp(bytes32 id) public view returns (address);\r\n}\r\n//File: contracts/apps/AppStorage.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\ncontract AppStorage {\r\n    IKernel public kernel;\r\n    bytes32 public appId;\r\n    address internal pinnedCode; // used by Proxy Pinned\r\n    uint256 internal initializationBlock; // used by Initializable\r\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\r\n    uint256 private offset;\r\n}\r\n\r\n//File: contracts/common/Initializable.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\ncontract Initializable is AppStorage {\r\n    modifier onlyInit {\r\n        require(initializationBlock == 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return Block number in which the contract was initialized\r\n    */\r\n    function getInitializationBlock() public view returns (uint256) {\r\n        return initializationBlock;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to be called by top level contract after initialization has finished.\r\n    */\r\n    function initialized() internal onlyInit {\r\n        initializationBlock = getBlockNumber();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the current block number.\r\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\r\n    *      tests.\r\n    */\r\n    function getBlockNumber() internal view returns (uint256) {\r\n        return block.number;\r\n    }\r\n}\r\n\r\n//File: contracts/evmscript/IEVMScriptExecutor.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\ninterface IEVMScriptExecutor {\r\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\r\n}\r\n\r\n//File: contracts/evmscript/IEVMScriptRegistry.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\ncontract EVMScriptRegistryConstants {\r\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = keccak256(\"evmreg.aragonpm.eth\");\r\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = keccak256(keccak256(\"app\"), EVMSCRIPT_REGISTRY_APP_ID);\r\n}\r\n\r\n\r\ninterface IEVMScriptRegistry {\r\n    function addScriptExecutor(address executor) external returns (uint id);\r\n    function disableScriptExecutor(uint256 executorId) external;\r\n\r\n    function getScriptExecutor(bytes script) public view returns (address);\r\n}\r\n//File: contracts/evmscript/ScriptHelpers.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\nlibrary ScriptHelpers {\r\n    // To test with JS and compare with actual encoder. Maintaining for reference.\r\n    // t = function() { return IEVMScriptExecutor.at('0x4bcdd59d6c77774ee7317fc1095f69ec84421e49').contract.execScript.getData(...[].slice.call(arguments)).slice(10).match(/.{1,64}/g) }\r\n    // run = function() { return ScriptHelpers.new().then(sh => { sh.abiEncode.call(...[].slice.call(arguments)).then(a => console.log(a.slice(2).match(/.{1,64}/g)) ) }) }\r\n    // This is truly not beautiful but lets no daydream to the day solidity gets reflection features\r\n\r\n    function abiEncode(bytes _a, bytes _b, address[] _c) public pure returns (bytes d) {\r\n        return encode(_a, _b, _c);\r\n    }\r\n\r\n    function encode(bytes memory _a, bytes memory _b, address[] memory _c) internal pure returns (bytes memory d) {\r\n        // A is positioned after the 3 position words\r\n        uint256 aPosition = 0x60;\r\n        uint256 bPosition = aPosition + 32 * abiLength(_a);\r\n        uint256 cPosition = bPosition + 32 * abiLength(_b);\r\n        uint256 length = cPosition + 32 * abiLength(_c);\r\n\r\n        d = new bytes(length);\r\n        assembly {\r\n            // Store positions\r\n            mstore(add(d, 0x20), aPosition)\r\n            mstore(add(d, 0x40), bPosition)\r\n            mstore(add(d, 0x60), cPosition)\r\n        }\r\n\r\n        // Copy memory to correct position\r\n        copy(d, getPtr(_a), aPosition, _a.length);\r\n        copy(d, getPtr(_b), bPosition, _b.length);\r\n        copy(d, getPtr(_c), cPosition, _c.length * 32); // 1 word per address\r\n    }\r\n\r\n    function abiLength(bytes memory _a) internal pure returns (uint256) {\r\n        // 1 for length +\r\n        // memory words + 1 if not divisible for 32 to offset word\r\n        return 1 + (_a.length / 32) + (_a.length % 32 > 0 ? 1 : 0);\r\n    }\r\n\r\n    function abiLength(address[] _a) internal pure returns (uint256) {\r\n        // 1 for length + 1 per item\r\n        return 1 + _a.length;\r\n    }\r\n\r\n    function copy(bytes _d, uint256 _src, uint256 _pos, uint256 _length) internal pure {\r\n        uint dest;\r\n        assembly {\r\n            dest := add(add(_d, 0x20), _pos)\r\n        }\r\n        memcpy(dest, _src, _length + 32);\r\n    }\r\n\r\n    function getPtr(bytes memory _x) internal pure returns (uint256 ptr) {\r\n        assembly {\r\n            ptr := _x\r\n        }\r\n    }\r\n\r\n    function getPtr(address[] memory _x) internal pure returns (uint256 ptr) {\r\n        assembly {\r\n            ptr := _x\r\n        }\r\n    }\r\n\r\n    function getSpecId(bytes _script) internal pure returns (uint32) {\r\n        return uint32At(_script, 0);\r\n    }\r\n\r\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\r\n        assembly {\r\n            result := mload(add(_data, add(0x20, _location)))\r\n        }\r\n    }\r\n\r\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\r\n        uint256 word = uint256At(_data, _location);\r\n\r\n        assembly {\r\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\r\n            0x1000000000000000000000000)\r\n        }\r\n    }\r\n\r\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\r\n        uint256 word = uint256At(_data, _location);\r\n\r\n        assembly {\r\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\r\n            0x100000000000000000000000000000000000000000000000000000000)\r\n        }\r\n    }\r\n\r\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\r\n        assembly {\r\n            result := add(_data, add(0x20, _location))\r\n        }\r\n    }\r\n\r\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\r\n        bytes memory payload = new bytes(4);\r\n        payload[0] = bytes1(_sig);\r\n        payload[1] = bytes1(_sig << 8);\r\n        payload[2] = bytes1(_sig << 16);\r\n        payload[3] = bytes1(_sig << 24);\r\n        return payload;\r\n    }\r\n\r\n    function memcpy(uint _dest, uint _src, uint _len) public pure {\r\n        uint256 src = _src;\r\n        uint256 dest = _dest;\r\n        uint256 len = _len;\r\n\r\n        // Copy word-length chunks while possible\r\n        for (; len >= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest += 32;\r\n            src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n}\r\n//File: contracts/evmscript/EVMScriptRunner.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EVMScriptRunner is AppStorage, EVMScriptRegistryConstants {\r\n    using ScriptHelpers for bytes;\r\n\r\n    function runScript(bytes _script, bytes _input, address[] _blacklist) protectState internal returns (bytes output) {\r\n        // TODO: Too much data flying around, maybe extracting spec id here is cheaper\r\n        address executorAddr = getExecutor(_script);\r\n        require(executorAddr != address(0));\r\n\r\n        bytes memory calldataArgs = _script.encode(_input, _blacklist);\r\n        bytes4 sig = IEVMScriptExecutor(0).execScript.selector;\r\n\r\n        require(executorAddr.delegatecall(sig, calldataArgs));\r\n\r\n        return returnedDataDecoded();\r\n    }\r\n\r\n    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\r\n        return IEVMScriptExecutor(getExecutorRegistry().getScriptExecutor(_script));\r\n    }\r\n\r\n    // TODO: Internal\r\n    function getExecutorRegistry() internal view returns (IEVMScriptRegistry) {\r\n        address registryAddr = kernel.getApp(EVMSCRIPT_REGISTRY_APP);\r\n        return IEVMScriptRegistry(registryAddr);\r\n    }\r\n\r\n    /**\r\n    * @dev copies and returns last's call data. Needs to ABI decode first\r\n    */\r\n    function returnedDataDecoded() internal view returns (bytes ret) {\r\n        assembly {\r\n            let size := returndatasize\r\n            switch size\r\n            case 0 {}\r\n            default {\r\n                ret := mload(0x40) // free mem ptr get\r\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\r\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    modifier protectState {\r\n        address preKernel = kernel;\r\n        bytes32 preAppId = appId;\r\n        _; // exec\r\n        require(kernel == preKernel);\r\n        require(appId == preAppId);\r\n    }\r\n}\r\n//File: contracts/acl/ACLSyntaxSugar.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\ncontract ACLSyntaxSugar {\r\n    function arr() internal pure returns (uint256[] r) {}\r\n\r\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a));\r\n    }\r\n\r\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), _b, _c);\r\n    }\r\n\r\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\r\n    }\r\n\r\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        return arr(uint256(_a), uint256(_b), uint256(_c));\r\n    }\r\n\r\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\r\n        r = new uint256[](1);\r\n        r[0] = _a;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\r\n        r = new uint256[](2);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\r\n        r = new uint256[](3);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\r\n        r = new uint256[](4);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n    }\r\n\r\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\r\n        r = new uint256[](5);\r\n        r[0] = _a;\r\n        r[1] = _b;\r\n        r[2] = _c;\r\n        r[3] = _d;\r\n        r[4] = _e;\r\n    }\r\n}\r\n\r\n\r\ncontract ACLHelpers {\r\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 30));\r\n    }\r\n\r\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\r\n        return uint8(_x >> (8 * 31));\r\n    }\r\n\r\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\r\n        a = uint32(_x);\r\n        b = uint32(_x >> (8 * 4));\r\n        c = uint32(_x >> (8 * 8));\r\n    }\r\n}\r\n\r\n//File: contracts/apps/AragonApp.sol\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AragonApp is AppStorage, Initializable, ACLSyntaxSugar, EVMScriptRunner {\r\n    modifier auth(bytes32 _role) {\r\n        require(canPerform(msg.sender, _role, new uint256[](0)));\r\n        _;\r\n    }\r\n\r\n    modifier authP(bytes32 _role, uint256[] params) {\r\n        require(canPerform(msg.sender, _role, params));\r\n        _;\r\n    }\r\n\r\n    function canPerform(address _sender, bytes32 _role, uint256[] params) public view returns (bool) {\r\n        bytes memory how; // no need to init memory as it is never used\r\n        if (params.length > 0) {\r\n            uint256 byteLength = params.length * 32;\r\n            assembly {\r\n                how := params // forced casting\r\n                mstore(how, byteLength)\r\n            }\r\n        }\r\n        return address(kernel) == 0 || kernel.hasPermission(_sender, address(this), _role, how);\r\n    }\r\n}\r\n\r\n//File: contracts/ens/ENSSubdomainRegistrar.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ENSSubdomainRegistrar is AragonApp, ENSConstants {\r\n    bytes32 constant public CREATE_NAME_ROLE = bytes32(1);\r\n    bytes32 constant public DELETE_NAME_ROLE = bytes32(2);\r\n    bytes32 constant public POINT_ROOTNODE_ROLE = bytes32(3);\r\n\r\n    AbstractENS public ens;\r\n    bytes32 public rootNode;\r\n\r\n    event NewName(bytes32 indexed node, bytes32 indexed label);\r\n    event DeleteName(bytes32 indexed node, bytes32 indexed label);\r\n\r\n    function initialize(AbstractENS _ens, bytes32 _rootNode) onlyInit public {\r\n        initialized();\r\n\r\n        // We need ownership to create subnodes\r\n        require(_ens.owner(_rootNode) == address(this));\r\n\r\n        ens = _ens;\r\n        rootNode = _rootNode;\r\n    }\r\n\r\n    function createName(bytes32 _label, address _owner) auth(CREATE_NAME_ROLE) external returns (bytes32 node) {\r\n        return _createName(_label, _owner);\r\n    }\r\n\r\n    function createNameAndPoint(bytes32 _label, address _target) auth(CREATE_NAME_ROLE) external returns (bytes32 node) {\r\n        node = _createName(_label, this);\r\n        _pointToResolverAndResolve(node, _target);\r\n    }\r\n\r\n    function deleteName(bytes32 _label) auth(DELETE_NAME_ROLE) external {\r\n        bytes32 node = keccak256(rootNode, _label);\r\n\r\n        address currentOwner = ens.owner(node);\r\n\r\n        require(currentOwner != address(0)); // fail if deleting unset name\r\n\r\n        if (currentOwner != address(this)) { // needs to reclaim ownership so it can set resolver\r\n            ens.setSubnodeOwner(rootNode, _label, this);\r\n        }\r\n\r\n        ens.setResolver(node, address(0)); // remove resolver so it ends resolving\r\n        ens.setOwner(node, address(0));\r\n\r\n        DeleteName(node, _label);\r\n    }\r\n\r\n    function pointRootNode(address _target) auth(POINT_ROOTNODE_ROLE) external {\r\n        _pointToResolverAndResolve(rootNode, _target);\r\n    }\r\n\r\n    function _createName(bytes32 _label, address _owner) internal returns (bytes32 node) {\r\n        node = keccak256(rootNode, _label);\r\n        require(ens.owner(node) == address(0)); // avoid name reset\r\n\r\n        ens.setSubnodeOwner(rootNode, _label, _owner);\r\n\r\n        NewName(node, _label);\r\n    }\r\n\r\n    function _pointToResolverAndResolve(bytes32 _node, address _target) internal {\r\n        address publicResolver = getAddr(PUBLIC_RESOLVER_NODE);\r\n        ens.setResolver(_node, publicResolver);\r\n\r\n        PublicResolver(publicResolver).setAddr(_node, _target);\r\n    }\r\n\r\n    function getAddr(bytes32 node) internal view returns (address) {\r\n        address resolver = ens.resolver(node);\r\n        return PublicResolver(resolver).addr(node);\r\n    }\r\n}\r\n\r\n//File: contracts/apps/IAppProxy.sol\r\npragma solidity 0.4.18;\r\n\r\ninterface IAppProxy {\r\n    function isUpgradeable() public pure returns (bool);\r\n    function getCode() public view returns (address);\r\n}\r\n\r\n//File: contracts/common/DelegateProxy.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\ncontract DelegateProxy {\r\n    /**\r\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\r\n    * @param _dst Destination address to perform the delegatecall\r\n    * @param _calldata Calldata for the delegatecall\r\n    */\r\n    function delegatedFwd(address _dst, bytes _calldata) internal {\r\n        require(isContract(_dst));\r\n        assembly {\r\n            let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\r\n            let size := returndatasize\r\n\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\r\n            // if the call returned error data, forward it\r\n            switch result case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n\r\n    function isContract(address _target) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(_target) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n//File: contracts/kernel/KernelStorage.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\ncontract KernelConstants {\r\n    bytes32 constant public CORE_NAMESPACE = keccak256(\"core\");\r\n    bytes32 constant public APP_BASES_NAMESPACE = keccak256(\"base\");\r\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\"app\");\r\n\r\n    bytes32 constant public KERNEL_APP_ID = keccak256(\"kernel.aragonpm.eth\");\r\n    bytes32 constant public KERNEL_APP = keccak256(CORE_NAMESPACE, KERNEL_APP_ID);\r\n\r\n    bytes32 constant public ACL_APP_ID = keccak256(\"acl.aragonpm.eth\");\r\n    bytes32 constant public ACL_APP = keccak256(APP_ADDR_NAMESPACE, ACL_APP_ID);\r\n}\r\n\r\n\r\ncontract KernelStorage is KernelConstants {\r\n    mapping (bytes32 => address) public apps;\r\n}\r\n\r\n//File: contracts/apps/AppProxyBase.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AppProxyBase is IAppProxy, AppStorage, DelegateProxy, KernelConstants {\r\n    /**\r\n    * @dev Initialize AppProxy\r\n    * @param _kernel Reference to organization kernel for the app\r\n    * @param _appId Identifier for app\r\n    * @param _initializePayload Payload for call to be made after setup to initialize\r\n    */\r\n    function AppProxyBase(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\r\n        kernel = _kernel;\r\n        appId = _appId;\r\n\r\n        // Implicit check that kernel is actually a Kernel\r\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\r\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\r\n        // it.\r\n        address appCode = getAppBase(appId);\r\n\r\n        // If initialize payload is provided, it will be executed\r\n        if (_initializePayload.length > 0) {\r\n            require(isContract(appCode));\r\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\r\n            // returns ending execution context and halts contract deployment\r\n            require(appCode.delegatecall(_initializePayload));\r\n        }\r\n    }\r\n\r\n    function getAppBase(bytes32 _appId) internal view returns (address) {\r\n        return kernel.getApp(keccak256(APP_BASES_NAMESPACE, _appId));\r\n    }\r\n\r\n    function () payable public {\r\n        address target = getCode();\r\n        require(target != 0); // if app code hasn't been set yet, don't call\r\n        delegatedFwd(target, msg.data);\r\n    }\r\n}\r\n//File: contracts/apps/AppProxyUpgradeable.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\ncontract AppProxyUpgradeable is AppProxyBase {\r\n    address public pinnedCode;\r\n\r\n    /**\r\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\r\n    * @param _kernel Reference to organization kernel for the app\r\n    * @param _appId Identifier for app\r\n    * @param _initializePayload Payload for call to be made after setup to initialize\r\n    */\r\n    function AppProxyUpgradeable(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\r\n             AppProxyBase(_kernel, _appId, _initializePayload) public\r\n    {\r\n\r\n    }\r\n\r\n    function getCode() public view returns (address) {\r\n        return getAppBase(appId);\r\n    }\r\n\r\n    function isUpgradeable() public pure returns (bool) {\r\n        return true;\r\n    }\r\n}\r\n\r\n//File: contracts/apps/AppProxyPinned.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\ncontract AppProxyPinned is AppProxyBase {\r\n    /**\r\n    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\r\n    * @param _kernel Reference to organization kernel for the app\r\n    * @param _appId Identifier for app\r\n    * @param _initializePayload Payload for call to be made after setup to initialize\r\n    */\r\n    function AppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\r\n             AppProxyBase(_kernel, _appId, _initializePayload) public\r\n    {\r\n        pinnedCode = getAppBase(appId);\r\n        require(pinnedCode != address(0));\r\n    }\r\n\r\n    function getCode() public view returns (address) {\r\n        return pinnedCode;\r\n    }\r\n\r\n    function isUpgradeable() public pure returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function () payable public {\r\n        delegatedFwd(getCode(), msg.data);\r\n    }\r\n}\r\n//File: contracts/factory/AppProxyFactory.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\ncontract AppProxyFactory {\r\n    event NewAppProxy(address proxy);\r\n\r\n    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\r\n        return newAppProxy(_kernel, _appId, new bytes(0));\r\n    }\r\n\r\n    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\r\n        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\r\n        NewAppProxy(address(proxy));\r\n        return proxy;\r\n    }\r\n\r\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\r\n        return newAppProxyPinned(_kernel, _appId, new bytes(0));\r\n    }\r\n\r\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\r\n        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\r\n        NewAppProxy(address(proxy));\r\n        return proxy;\r\n    }\r\n}\r\n\r\n//File: contracts/acl/ACL.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface ACLOracle {\r\n    function canPerform(address who, address where, bytes32 what) public view returns (bool);\r\n}\r\n\r\n\r\ncontract ACL is IACL, AragonApp, ACLHelpers {\r\n    bytes32 constant public CREATE_PERMISSIONS_ROLE = keccak256(\"CREATE_PERMISSIONS_ROLE\");\r\n\r\n    // whether a certain entity has a permission\r\n    mapping (bytes32 => bytes32) permissions; // 0 for no permission, or parameters id\r\n    mapping (bytes32 => Param[]) public permissionParams;\r\n\r\n    // who is the manager of a permission\r\n    mapping (bytes32 => address) permissionManager;\r\n\r\n    enum Op { NONE, EQ, NEQ, GT, LT, GTE, LTE, NOT, AND, OR, XOR, IF_ELSE, RET } // op types\r\n\r\n    struct Param {\r\n        uint8 id;\r\n        uint8 op;\r\n        uint240 value; // even though value is an uint240 it can store addresses\r\n        // in the case of 32 byte hashes losing 2 bytes precision isn't a huge deal\r\n        // op and id take less than 1 byte each so it can be kept in 1 sstore\r\n    }\r\n\r\n    uint8 constant BLOCK_NUMBER_PARAM_ID = 200;\r\n    uint8 constant TIMESTAMP_PARAM_ID    = 201;\r\n    uint8 constant SENDER_PARAM_ID       = 202;\r\n    uint8 constant ORACLE_PARAM_ID       = 203;\r\n    uint8 constant LOGIC_OP_PARAM_ID     = 204;\r\n    uint8 constant PARAM_VALUE_PARAM_ID  = 205;\r\n    // TODO: Add execution times param type?\r\n\r\n    bytes32 constant public EMPTY_PARAM_HASH = keccak256(uint256(0));\r\n    address constant ANY_ENTITY = address(-1);\r\n\r\n    modifier onlyPermissionManager(address _app, bytes32 _role) {\r\n        require(msg.sender == getPermissionManager(_app, _role));\r\n        _;\r\n    }\r\n\r\n    event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed);\r\n    event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager);\r\n\r\n    /**\r\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\r\n    * @notice Initializes an ACL instance and sets `_permissionsCreator` as the entity that can create other permissions\r\n    * @param _permissionsCreator Entity that will be given permission over createPermission\r\n    */\r\n    function initialize(address _permissionsCreator) onlyInit public {\r\n        initialized();\r\n        require(msg.sender == address(kernel));\r\n\r\n        _createPermission(_permissionsCreator, this, CREATE_PERMISSIONS_ROLE, _permissionsCreator);\r\n    }\r\n\r\n    /**\r\n    * @dev Creates a permission that wasn't previously set. Access is limited by the ACL.\r\n    *      If a created permission is removed it is possible to reset it with createPermission.\r\n    * @notice Create a new permission granting `_entity` the ability to perform actions of role `_role` on `_app` (setting `_manager` as the permission manager)\r\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\r\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\r\n    * @param _role Identifier for the group of actions in app given access to perform\r\n    * @param _manager Address of the entity that will be able to grant and revoke the permission further.\r\n    */\r\n    function createPermission(address _entity, address _app, bytes32 _role, address _manager) external {\r\n        require(hasPermission(msg.sender, address(this), CREATE_PERMISSIONS_ROLE));\r\n\r\n        _createPermission(_entity, _app, _role, _manager);\r\n    }\r\n\r\n    /**\r\n    * @dev Grants permission if allowed. This requires `msg.sender` to be the permission manager\r\n    * @notice Grants `_entity` the ability to perform actions of role `_role` on `_app`\r\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\r\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\r\n    * @param _role Identifier for the group of actions in app given access to perform\r\n    */\r\n    function grantPermission(address _entity, address _app, bytes32 _role)\r\n        external\r\n    {\r\n        grantPermissionP(_entity, _app, _role, new uint256[](0));\r\n    }\r\n\r\n    /**\r\n    * @dev Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager\r\n    * @notice Grants `_entity` the ability to perform actions of role `_role` on `_app`\r\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\r\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\r\n    * @param _role Identifier for the group of actions in app given access to perform\r\n    * @param _params Permission parameters\r\n    */\r\n    function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)\r\n        onlyPermissionManager(_app, _role)\r\n        public\r\n    {\r\n        require(!hasPermission(_entity, _app, _role));\r\n\r\n        bytes32 paramsHash = _params.length > 0 ? _saveParams(_params) : EMPTY_PARAM_HASH;\r\n        _setPermission(_entity, _app, _role, paramsHash);\r\n    }\r\n\r\n    /**\r\n    * @dev Revokes permission if allowed. This requires `msg.sender` to be the the permission manager\r\n    * @notice Revokes `_entity` the ability to perform actions of role `_role` on `_app`\r\n    * @param _entity Address of the whitelisted entity to revoke access from\r\n    * @param _app Address of the app in which the role will be revoked\r\n    * @param _role Identifier for the group of actions in app being revoked\r\n    */\r\n    function revokePermission(address _entity, address _app, bytes32 _role)\r\n        onlyPermissionManager(_app, _role)\r\n        external\r\n    {\r\n        require(hasPermission(_entity, _app, _role));\r\n\r\n        _setPermission(_entity, _app, _role, bytes32(0));\r\n    }\r\n\r\n    /**\r\n    * @notice Sets `_newManager` as the manager of the permission `_role` in `_app`\r\n    * @param _newManager Address for the new manager\r\n    * @param _app Address of the app in which the permission management is being transferred\r\n    * @param _role Identifier for the group of actions being transferred\r\n    */\r\n    function setPermissionManager(address _newManager, address _app, bytes32 _role)\r\n        onlyPermissionManager(_app, _role)\r\n        external\r\n    {\r\n        _setPermissionManager(_newManager, _app, _role);\r\n    }\r\n\r\n    /**\r\n    * @dev Get manager for permission\r\n    * @param _app Address of the app\r\n    * @param _role Identifier for a group of actions in app\r\n    * @return address of the manager for the permission\r\n    */\r\n    function getPermissionManager(address _app, bytes32 _role) public view returns (address) {\r\n        return permissionManager[roleHash(_app, _role)];\r\n    }\r\n\r\n    /**\r\n    * @dev Function called by apps to check ACL on kernel or to check permission statu\r\n    * @param _who Sender of the original call\r\n    * @param _where Address of the app\r\n    * @param _where Identifier for a group of actions in app\r\n    * @param _how Permission parameters\r\n    * @return boolean indicating whether the ACL allows the role or not\r\n    */\r\n    function hasPermission(address _who, address _where, bytes32 _what, bytes memory _how) public view returns (bool) {\r\n        uint256[] memory how;\r\n        uint256 intsLength = _how.length / 32;\r\n        assembly {\r\n            how := _how // forced casting\r\n            mstore(how, intsLength)\r\n        }\r\n        // _how is invalid from this point fwd\r\n        return hasPermission(_who, _where, _what, how);\r\n    }\r\n\r\n    function hasPermission(address _who, address _where, bytes32 _what, uint256[] memory _how) public view returns (bool) {\r\n        bytes32 whoParams = permissions[permissionHash(_who, _where, _what)];\r\n        if (whoParams != bytes32(0) && evalParams(whoParams, _who, _where, _what, _how)) {\r\n            return true;\r\n        }\r\n\r\n        bytes32 anyParams = permissions[permissionHash(ANY_ENTITY, _where, _what)];\r\n        if (anyParams != bytes32(0) && evalParams(anyParams, ANY_ENTITY, _where, _what, _how)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function hasPermission(address _who, address _where, bytes32 _what) public view returns (bool) {\r\n        uint256[] memory empty = new uint256[](0);\r\n        return hasPermission(_who, _where, _what, empty);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal createPermission for access inside the kernel (on instantiation)\r\n    */\r\n    function _createPermission(address _entity, address _app, bytes32 _role, address _manager) internal {\r\n        // only allow permission creation (or re-creation) when there is no manager\r\n        require(getPermissionManager(_app, _role) == address(0));\r\n\r\n        _setPermission(_entity, _app, _role, EMPTY_PARAM_HASH);\r\n        _setPermissionManager(_manager, _app, _role);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function called to actually save the permission\r\n    */\r\n    function _setPermission(address _entity, address _app, bytes32 _role, bytes32 _paramsHash) internal {\r\n        permissions[permissionHash(_entity, _app, _role)] = _paramsHash;\r\n\r\n        SetPermission(_entity, _app, _role, _paramsHash != bytes32(0));\r\n    }\r\n\r\n    function _saveParams(uint256[] _encodedParams) internal returns (bytes32) {\r\n        bytes32 paramHash = keccak256(_encodedParams);\r\n        Param[] storage params = permissionParams[paramHash];\r\n\r\n        if (params.length == 0) { // params not saved before\r\n            for (uint256 i = 0; i < _encodedParams.length; i++) {\r\n                uint256 encodedParam = _encodedParams[i];\r\n                Param memory param = Param(decodeParamId(encodedParam), decodeParamOp(encodedParam), uint240(encodedParam));\r\n                params.push(param);\r\n            }\r\n        }\r\n\r\n        return paramHash;\r\n    }\r\n\r\n    function evalParams(\r\n        bytes32 _paramsHash,\r\n        address _who,\r\n        address _where,\r\n        bytes32 _what,\r\n        uint256[] _how\r\n    ) internal view returns (bool)\r\n    {\r\n        if (_paramsHash == EMPTY_PARAM_HASH) {\r\n            return true;\r\n        }\r\n\r\n        return evalParam(_paramsHash, 0, _who, _where, _what, _how);\r\n    }\r\n\r\n    function evalParam(\r\n        bytes32 _paramsHash,\r\n        uint32 _paramId,\r\n        address _who,\r\n        address _where,\r\n        bytes32 _what,\r\n        uint256[] _how\r\n    ) internal view returns (bool)\r\n    {\r\n        if (_paramId >= permissionParams[_paramsHash].length) {\r\n            return false; // out of bounds\r\n        }\r\n\r\n        Param memory param = permissionParams[_paramsHash][_paramId];\r\n\r\n        if (param.id == LOGIC_OP_PARAM_ID) {\r\n            return evalLogic(param, _paramsHash, _who, _where, _what, _how);\r\n        }\r\n\r\n        uint256 value;\r\n        uint256 comparedTo = uint256(param.value);\r\n\r\n        // get value\r\n        if (param.id == ORACLE_PARAM_ID) {\r\n            value = ACLOracle(param.value).canPerform(_who, _where, _what) ? 1 : 0;\r\n            comparedTo = 1;\r\n        } else if (param.id == BLOCK_NUMBER_PARAM_ID) {\r\n            value = blockN();\r\n        } else if (param.id == TIMESTAMP_PARAM_ID) {\r\n            value = time();\r\n        } else if (param.id == SENDER_PARAM_ID) {\r\n            value = uint256(msg.sender);\r\n        } else if (param.id == PARAM_VALUE_PARAM_ID) {\r\n            value = uint256(param.value);\r\n        } else {\r\n            if (param.id >= _how.length) {\r\n                return false;\r\n            }\r\n            value = uint256(uint240(_how[param.id])); // force lost precision\r\n        }\r\n\r\n        if (Op(param.op) == Op.RET) {\r\n            return uint256(value) > 0;\r\n        }\r\n\r\n        return compare(value, Op(param.op), comparedTo);\r\n    }\r\n\r\n    function evalLogic(Param _param, bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how) internal view returns (bool) {\r\n        if (Op(_param.op) == Op.IF_ELSE) {\r\n            var (condition, success, failure) = decodeParamsList(uint256(_param.value));\r\n            bool result = evalParam(_paramsHash, condition, _who, _where, _what, _how);\r\n\r\n            return evalParam(_paramsHash, result ? success : failure, _who, _where, _what, _how);\r\n        }\r\n\r\n        var (v1, v2,) = decodeParamsList(uint256(_param.value));\r\n        bool r1 = evalParam(_paramsHash, v1, _who, _where, _what, _how);\r\n\r\n        if (Op(_param.op) == Op.NOT) {\r\n            return !r1;\r\n        }\r\n\r\n        if (r1 && Op(_param.op) == Op.OR) {\r\n            return true;\r\n        }\r\n\r\n        if (!r1 && Op(_param.op) == Op.AND) {\r\n            return false;\r\n        }\r\n\r\n        bool r2 = evalParam(_paramsHash, v2, _who, _where, _what, _how);\r\n\r\n        if (Op(_param.op) == Op.XOR) {\r\n            return (r1 && !r2) || (!r1 && r2);\r\n        }\r\n\r\n        return r2; // both or and and depend on result of r2 after checks\r\n    }\r\n\r\n    function compare(uint256 _a, Op _op, uint256 _b) internal pure returns (bool) {\r\n        if (_op == Op.EQ)  return _a == _b;                              // solium-disable-line lbrace\r\n        if (_op == Op.NEQ) return _a != _b;                              // solium-disable-line lbrace\r\n        if (_op == Op.GT)  return _a > _b;                               // solium-disable-line lbrace\r\n        if (_op == Op.LT)  return _a < _b;                               // solium-disable-line lbrace\r\n        if (_op == Op.GTE) return _a >= _b;                              // solium-disable-line lbrace\r\n        if (_op == Op.LTE) return _a <= _b;                              // solium-disable-line lbrace\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that sets management\r\n    */\r\n    function _setPermissionManager(address _newManager, address _app, bytes32 _role) internal {\r\n        permissionManager[roleHash(_app, _role)] = _newManager;\r\n        ChangePermissionManager(_app, _role, _newManager);\r\n    }\r\n\r\n    function roleHash(address _where, bytes32 _what) pure internal returns (bytes32) {\r\n        return keccak256(uint256(1), _where, _what);\r\n    }\r\n\r\n    function permissionHash(address _who, address _where, bytes32 _what) pure internal returns (bytes32) {\r\n        return keccak256(uint256(2), _who, _where, _what);\r\n    }\r\n\r\n    function time() internal view returns (uint64) { return uint64(block.timestamp); } // solium-disable-line security/no-block-members\r\n\r\n    function blockN() internal view returns (uint256) { return block.number; }\r\n}\r\n\r\n//File: contracts/apm/Repo.sol\r\npragma solidity ^0.4.15;\r\n\r\n\r\n\r\n\r\ncontract Repo is AragonApp {\r\n    struct Version {\r\n        uint16[3] semanticVersion;\r\n        address contractAddress;\r\n        bytes contentURI;\r\n    }\r\n\r\n    Version[] versions;\r\n    mapping (bytes32 => uint256) versionIdForSemantic;\r\n    mapping (address => uint256) latestVersionIdForContract;\r\n\r\n    bytes32 constant public CREATE_VERSION_ROLE = bytes32(1);\r\n\r\n    event NewVersion(uint256 versionId, uint16[3] semanticVersion);\r\n\r\n    /**\r\n    * @notice Create new version for repo\r\n    * @param _newSemanticVersion Semantic version for new repo version\r\n    * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)\r\n    * @param _contentURI External URI for fetching new version's content\r\n    */\r\n    function newVersion(\r\n        uint16[3] _newSemanticVersion,\r\n        address _contractAddress,\r\n        bytes _contentURI\r\n    ) auth(CREATE_VERSION_ROLE) public\r\n    {\r\n        address contractAddress = _contractAddress;\r\n        if (versions.length > 0) {\r\n            Version storage lastVersion = versions[versions.length - 1];\r\n            require(isValidBump(lastVersion.semanticVersion, _newSemanticVersion));\r\n            if (contractAddress == 0) {\r\n                contractAddress = lastVersion.contractAddress;\r\n            }\r\n            // Only allows smart contract change on major version bumps\r\n            require(lastVersion.contractAddress == contractAddress || _newSemanticVersion[0] > lastVersion.semanticVersion[0]);\r\n        } else {\r\n            versions.length += 1;\r\n            uint16[3] memory zeroVersion;\r\n            require(isValidBump(zeroVersion, _newSemanticVersion));\r\n        }\r\n\r\n        uint versionId = versions.push(Version(_newSemanticVersion, contractAddress, _contentURI)) - 1;\r\n        versionIdForSemantic[semanticVersionHash(_newSemanticVersion)] = versionId;\r\n        latestVersionIdForContract[contractAddress] = versionId;\r\n\r\n        NewVersion(versionId, _newSemanticVersion);\r\n    }\r\n\r\n    function getLatest() public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\r\n        return getByVersionId(versions.length - 1);\r\n    }\r\n\r\n    function getLatestForContractAddress(address _contractAddress) public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\r\n        return getByVersionId(latestVersionIdForContract[_contractAddress]);\r\n    }\r\n\r\n    function getBySemanticVersion(uint16[3] _semanticVersion) public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\r\n        return getByVersionId(versionIdForSemantic[semanticVersionHash(_semanticVersion)]);\r\n    }\r\n\r\n    function getByVersionId(uint _versionId) public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\r\n        require(_versionId > 0);\r\n        Version storage version = versions[_versionId];\r\n        return (version.semanticVersion, version.contractAddress, version.contentURI);\r\n    }\r\n\r\n    function getVersionsCount() public view returns (uint256) {\r\n        uint256 len = versions.length;\r\n        return len > 0 ? len - 1 : 0;\r\n    }\r\n\r\n    function isValidBump(uint16[3] _oldVersion, uint16[3] _newVersion) public pure returns (bool) {\r\n        bool hasBumped;\r\n        uint i = 0;\r\n        while (i < 3) {\r\n            if (hasBumped) {\r\n                if (_newVersion[i] != 0) {\r\n                    return false;\r\n                }\r\n            } else if (_newVersion[i] != _oldVersion[i]) {\r\n                if (_oldVersion[i] > _newVersion[i] || _newVersion[i] - _oldVersion[i] != 1) {\r\n                    return false;\r\n                }\r\n                hasBumped = true;\r\n            }\r\n            i++;\r\n        }\r\n        return hasBumped;\r\n    }\r\n\r\n    function semanticVersionHash(uint16[3] version) internal pure returns (bytes32) {\r\n        return keccak256(version[0], version[1], version[2]);\r\n    }\r\n}\r\n\r\n//File: contracts/apm/APMRegistry.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract APMRegistryConstants {\r\n    // Cant have a regular APM appId because it is used to build APM\r\n    // TODO: recheck this\r\n    string constant public APM_APP_NAME = \"apm-registry\";\r\n    string constant public REPO_APP_NAME = \"apm-repo\";\r\n    string constant public ENS_SUB_APP_NAME = \"apm-enssub\";\r\n}\r\n\r\n\r\ncontract APMRegistry is AragonApp, AppProxyFactory, APMRegistryConstants {\r\n    AbstractENS ens;\r\n    ENSSubdomainRegistrar public registrar;\r\n\r\n    bytes32 constant public CREATE_REPO_ROLE = bytes32(1);\r\n\r\n    event NewRepo(bytes32 id, string name, address repo);\r\n\r\n    /**\r\n    * NEEDS CREATE_NAME_ROLE and POINT_ROOTNODE_ROLE permissions on registrar\r\n    * @param _registrar ENSSubdomainRegistrar instance that holds registry root node ownership\r\n    */\r\n    function initialize(ENSSubdomainRegistrar _registrar) onlyInit public {\r\n        initialized();\r\n\r\n        registrar = _registrar;\r\n        ens = registrar.ens();\r\n\r\n        registrar.pointRootNode(this);\r\n\r\n        // Check APM has all permissions it needss\r\n        ACL acl = ACL(kernel.acl());\r\n        require(acl.hasPermission(this, registrar, registrar.CREATE_NAME_ROLE()));\r\n        require(acl.hasPermission(this, acl, acl.CREATE_PERMISSIONS_ROLE()));\r\n    }\r\n\r\n    /**\r\n    * @notice Create new repo in registry with `_name`\r\n    * @param _name Repo name, must be ununsed\r\n    * @param _dev Address that will be given permission to create versions\r\n    */\r\n    function newRepo(string _name, address _dev) auth(CREATE_REPO_ROLE) public returns (Repo) {\r\n        return _newRepo(_name, _dev);\r\n    }\r\n\r\n    /**\r\n    * @notice Create new repo in registry with `_name` and first repo version\r\n    * @param _name Repo name\r\n    * @param _dev Address that will be given permission to create versions\r\n    * @param _initialSemanticVersion Semantic version for new repo version\r\n    * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)\r\n    * @param _contentURI External URI for fetching new version's content\r\n    */\r\n    function newRepoWithVersion(\r\n        string _name,\r\n        address _dev,\r\n        uint16[3] _initialSemanticVersion,\r\n        address _contractAddress,\r\n        bytes _contentURI\r\n    ) auth(CREATE_REPO_ROLE) public returns (Repo)\r\n    {\r\n        Repo repo = _newRepo(_name, this); // need to have permissions to create version\r\n        repo.newVersion(_initialSemanticVersion, _contractAddress, _contentURI);\r\n\r\n        // Give permissions to _dev\r\n        ACL acl = ACL(kernel.acl());\r\n        acl.revokePermission(this, repo, repo.CREATE_VERSION_ROLE());\r\n        acl.grantPermission(_dev, repo, repo.CREATE_VERSION_ROLE());\r\n        acl.setPermissionManager(_dev, repo, repo.CREATE_VERSION_ROLE());\r\n        return repo;\r\n    }\r\n\r\n    function _newRepo(string _name, address _dev) internal returns (Repo) {\r\n        require(bytes(_name).length > 0);\r\n\r\n        Repo repo = newClonedRepo();\r\n\r\n        ACL(kernel.acl()).createPermission(_dev, repo, repo.CREATE_VERSION_ROLE(), _dev);\r\n\r\n        // Creates [name] subdomain in the rootNode and sets registry as resolver\r\n        // This will fail if repo name already exists\r\n        bytes32 node = registrar.createNameAndPoint(keccak256(_name), repo);\r\n\r\n        NewRepo(node, _name, repo);\r\n\r\n        return repo;\r\n    }\r\n\r\n    function newClonedRepo() internal returns (Repo) {\r\n        return Repo(newAppProxy(kernel, repoAppId()));\r\n    }\r\n\r\n    function repoAppId() internal view returns (bytes32) {\r\n        return keccak256(registrar.rootNode(), keccak256(REPO_APP_NAME));\r\n    }\r\n}\r\n\r\n//File: contracts/kernel/Kernel.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Kernel is IKernel, KernelStorage, Initializable, AppProxyFactory, ACLSyntaxSugar {\r\n    bytes32 constant public APP_MANAGER_ROLE = keccak256(\"APP_MANAGER_ROLE\");\r\n\r\n    /**\r\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\r\n    * @notice Initializes a kernel instance along with its ACL and sets `_permissionsCreator` as the entity that can create other permissions\r\n    * @param _baseAcl Address of base ACL app\r\n    * @param _permissionsCreator Entity that will be given permission over createPermission\r\n    */\r\n    function initialize(address _baseAcl, address _permissionsCreator) onlyInit public {\r\n        initialized();\r\n\r\n        IACL acl = IACL(newAppProxy(this, ACL_APP_ID));\r\n\r\n        _setApp(APP_BASES_NAMESPACE, ACL_APP_ID, _baseAcl);\r\n        _setApp(APP_ADDR_NAMESPACE, ACL_APP_ID, acl);\r\n\r\n        acl.initialize(_permissionsCreator);\r\n    }\r\n\r\n    /**\r\n    * @dev Create a new instance of an app linked to this kernel and set its base\r\n    *      implementation if it was not already set\r\n    * @param _name Name of the app\r\n    * @param _appBase Address of the app's base implementation\r\n    * @return AppProxy instance\r\n    */\r\n    function newAppInstance(bytes32 _name, address _appBase) auth(APP_MANAGER_ROLE, arr(APP_BASES_NAMESPACE, _name)) public returns (IAppProxy appProxy) {\r\n        _setAppIfNew(APP_BASES_NAMESPACE, _name, _appBase);\r\n        appProxy = newAppProxy(this, _name);\r\n    }\r\n\r\n    /**\r\n    * @dev Create a new pinned instance of an app linked to this kernel and set\r\n    *      its base implementation if it was not already set\r\n    * @param _name Name of the app\r\n    * @param _appBase Address of the app's base implementation\r\n    * @return AppProxy instance\r\n    */\r\n    function newPinnedAppInstance(bytes32 _name, address _appBase) auth(APP_MANAGER_ROLE, arr(APP_BASES_NAMESPACE, _name)) public returns (IAppProxy appProxy) {\r\n        _setAppIfNew(APP_BASES_NAMESPACE, _name, _appBase);\r\n        appProxy = newAppProxyPinned(this, _name);\r\n    }\r\n\r\n    /**\r\n    * @dev Set the resolving address of an app instance or base implementation\r\n    * @param _namespace App namespace to use\r\n    * @param _name Name of the app\r\n    * @param _app Address of the app\r\n    * @return ID of app\r\n    */\r\n    function setApp(bytes32 _namespace, bytes32 _name, address _app) auth(APP_MANAGER_ROLE, arr(_namespace, _name)) kernelIntegrity public returns (bytes32 id) {\r\n        return _setApp(_namespace, _name, _app);\r\n    }\r\n\r\n    /**\r\n    * @dev Get the address of an app instance or base implementation\r\n    * @param _id App identifier\r\n    * @return Address of the app\r\n    */\r\n    function getApp(bytes32 _id) public view returns (address) {\r\n        return apps[_id];\r\n    }\r\n\r\n    /**\r\n    * @dev Get the installed ACL app\r\n    * @return ACL app\r\n    */\r\n    function acl() public view returns (IACL) {\r\n        return IACL(getApp(ACL_APP));\r\n    }\r\n\r\n    /**\r\n    * @dev Function called by apps to check ACL on kernel or to check permission status\r\n    * @param _who Sender of the original call\r\n    * @param _where Address of the app\r\n    * @param _what Identifier for a group of actions in app\r\n    * @param _how Extra data for ACL auth\r\n    * @return boolean indicating whether the ACL allows the role or not\r\n    */\r\n    function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\r\n        return acl().hasPermission(_who, _where, _what, _how);\r\n    }\r\n\r\n    function _setApp(bytes32 _namespace, bytes32 _name, address _app) internal returns (bytes32 id) {\r\n        id = keccak256(_namespace, _name);\r\n        apps[id] = _app;\r\n        SetApp(_namespace, _name, id, _app);\r\n    }\r\n\r\n    function _setAppIfNew(bytes32 _namespace, bytes32 _name, address _app) internal returns (bytes32 id) {\r\n        id = keccak256(_namespace, _name);\r\n\r\n        if (_app != address(0)) {\r\n            address app = getApp(id);\r\n            if (app != address(0)) {\r\n                require(app == _app);\r\n            } else {\r\n                apps[id] = _app;\r\n                SetApp(_namespace, _name, id, _app);\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier auth(bytes32 _role, uint256[] memory params) {\r\n        bytes memory how;\r\n        uint256 byteLength = params.length * 32;\r\n        assembly {\r\n            how := params // forced casting\r\n            mstore(how, byteLength)\r\n        }\r\n        // Params is invalid from this point fwd\r\n        require(hasPermission(msg.sender, address(this), _role, how));\r\n        _;\r\n    }\r\n\r\n    modifier kernelIntegrity {\r\n        _; // After execution check integrity\r\n        address kernel = getApp(KERNEL_APP);\r\n        uint256 size;\r\n        assembly { size := extcodesize(kernel) }\r\n        require(size > 0);\r\n    }\r\n}\r\n\r\n//File: contracts/kernel/KernelProxy.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\ncontract KernelProxy is KernelStorage, DelegateProxy {\r\n    /**\r\n    * @dev KernelProxy is a proxy contract to a kernel implementation. The implementation\r\n    *      can update the reference, which effectively upgrades the contract\r\n    * @param _kernelImpl Address of the contract used as implementation for kernel\r\n    */\r\n    function KernelProxy(address _kernelImpl) public {\r\n        apps[keccak256(CORE_NAMESPACE, KERNEL_APP_ID)] = _kernelImpl;\r\n    }\r\n\r\n    /**\r\n    * @dev All calls made to the proxy are forwarded to the kernel implementation via a delegatecall\r\n    * @return Any bytes32 value the implementation returns\r\n    */\r\n    function () payable public {\r\n        delegatedFwd(apps[KERNEL_APP], msg.data);\r\n    }\r\n}\r\n//File: contracts/evmscript/EVMScriptRegistry.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EVMScriptRegistry is IEVMScriptRegistry, EVMScriptRegistryConstants, AragonApp {\r\n    using ScriptHelpers for bytes;\r\n\r\n    // WARN: Manager can censor all votes and the like happening in an org\r\n    bytes32 constant public REGISTRY_MANAGER_ROLE = bytes32(1);\r\n\r\n    struct ExecutorEntry {\r\n        address executor;\r\n        bool enabled;\r\n    }\r\n\r\n    ExecutorEntry[] public executors;\r\n\r\n    function initialize() onlyInit public {\r\n        initialized();\r\n        // Create empty record to begin executor IDs at 1\r\n        executors.push(ExecutorEntry(address(0), false));\r\n    }\r\n\r\n    function addScriptExecutor(address _executor) external auth(REGISTRY_MANAGER_ROLE) returns (uint id) {\r\n        return executors.push(ExecutorEntry(_executor, true));\r\n    }\r\n\r\n    function disableScriptExecutor(uint256 _executorId) external auth(REGISTRY_MANAGER_ROLE) {\r\n        executors[_executorId].enabled = false;\r\n    }\r\n\r\n    function getScriptExecutor(bytes _script) public view returns (address) {\r\n        uint256 id = _script.getSpecId();\r\n\r\n        if (id == 0 || id >= executors.length) {\r\n            return address(0);\r\n        }\r\n\r\n        ExecutorEntry storage entry = executors[id];\r\n        return entry.enabled ? entry.executor : address(0);\r\n    }\r\n}\r\n\r\n//File: contracts/evmscript/executors/CallsScript.sol\r\npragma solidity ^0.4.18;\r\n\r\n// Inspired by https://github.com/reverendus/tx-manager\r\n\r\n\r\n\r\n\r\n\r\ncontract CallsScript is IEVMScriptExecutor {\r\n    using ScriptHelpers for bytes;\r\n\r\n    uint256 constant internal SCRIPT_START_LOCATION = 4;\r\n\r\n    event LogScriptCall(address indexed sender, address indexed src, address indexed dst);\r\n\r\n    /**\r\n    * @notice Executes a number of call scripts\r\n    * @param _script [ specId (uint32) ] many calls with this structure ->\r\n    *    [ to (address: 20 bytes) ] [ calldataLength (uint32: 4 bytes) ] [ calldata (calldataLength bytes) ]\r\n    * @param _input Input is ignored in callscript\r\n    * @param _blacklist Addresses the script cannot call to, or will revert.\r\n    * @return always returns empty byte array\r\n    */\r\n    function execScript(bytes _script, bytes _input, address[] _blacklist) external returns (bytes) {\r\n        uint256 location = SCRIPT_START_LOCATION; // first 32 bits are spec id\r\n        while (location < _script.length) {\r\n            address contractAddress = _script.addressAt(location);\r\n            // Check address being called is not blacklist\r\n            for (uint i = 0; i < _blacklist.length; i++) {\r\n                require(contractAddress != _blacklist[i]);\r\n            }\r\n\r\n            // logged before execution to ensure event ordering in receipt\r\n            // if failed entire execution is reverted regardless\r\n            LogScriptCall(msg.sender, address(this), contractAddress);\r\n\r\n            uint256 calldataLength = uint256(_script.uint32At(location + 0x14));\r\n            uint256 calldataStart = _script.locationOf(location + 0x14 + 0x04);\r\n\r\n            assembly {\r\n                let success := call(sub(gas, 5000), contractAddress, 0, calldataStart, calldataLength, 0, 0)\r\n                switch success case 0 { revert(0, 0) }\r\n            }\r\n\r\n            location += (0x14 + 0x04 + calldataLength);\r\n        }\r\n    }\r\n}\r\n//File: contracts/evmscript/executors/DelegateScript.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\ninterface DelegateScriptTarget {\r\n    function exec() public;\r\n}\r\n\r\n\r\ncontract DelegateScript is IEVMScriptExecutor {\r\n    using ScriptHelpers for *;\r\n\r\n    uint256 constant internal SCRIPT_START_LOCATION = 4;\r\n\r\n    /**\r\n    * @notice Executes script by delegatecall into a contract\r\n    * @param _script [ specId (uint32) ][ contract address (20 bytes) ]\r\n    * @param _input ABI encoded call to be made to contract (if empty executes default exec() function)\r\n    * @param _blacklist If any address is passed, will revert.\r\n    * @return Call return data\r\n    */\r\n    function execScript(bytes _script, bytes _input, address[] _blacklist) external returns (bytes) {\r\n        require(_blacklist.length == 0); // dont have ability to control bans, so fail.\r\n\r\n        // Script should be spec id + address (20 bytes)\r\n        require(_script.length == SCRIPT_START_LOCATION + 20);\r\n        return delegate(_script.addressAt(SCRIPT_START_LOCATION), _input);\r\n    }\r\n\r\n    /**\r\n    * @dev Delegatecall to contract with input data\r\n    */\r\n    function delegate(address _addr, bytes memory _input) internal returns (bytes memory output) {\r\n        require(isContract(_addr));\r\n        require(_addr.delegatecall(_input.length > 0 ? _input : defaultInput()));\r\n        return returnedData();\r\n    }\r\n\r\n    function isContract(address _target) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(_target) }\r\n        return size > 0;\r\n    }\r\n\r\n    function defaultInput() internal pure returns (bytes) {\r\n        return DelegateScriptTarget(0).exec.selector.toBytes();\r\n    }\r\n\r\n    /**\r\n    * @dev copies and returns last's call data\r\n    */\r\n    function returnedData() internal view returns (bytes ret) {\r\n        assembly {\r\n            let size := returndatasize\r\n            ret := mload(0x40) // free mem ptr get\r\n            mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\r\n            mstore(ret, size) // set array length\r\n            returndatacopy(add(ret, 0x20), 0, size) // copy return data\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n//File: contracts/evmscript/executors/DeployDelegateScript.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n// Inspired by: https://github.com/dapphub/ds-proxy/blob/master/src/proxy.sol\r\n\r\n\r\ncontract DeployDelegateScript is DelegateScript {\r\n    uint256 constant internal SCRIPT_START_LOCATION = 4;\r\n\r\n    mapping (bytes32 => address) cache;\r\n\r\n    /**\r\n    * @notice Executes script by delegatecall into a deployed contract (exec() function)\r\n    * @param _script [ specId (uint32) ][ contractInitcode (bytecode) ]\r\n    * @param _input ABI encoded call to be made to contract (if empty executes default exec() function)\r\n    * @param _blacklist If any address is passed, will revert.\r\n    * @return Call return data\r\n    */\r\n    function execScript(bytes _script, bytes _input, address[] _blacklist) external returns (bytes) {\r\n        require(_blacklist.length == 0); // dont have ability to control bans, so fail.\r\n\r\n        bytes32 id = keccak256(_script);\r\n        address deployed = cache[id];\r\n        if (deployed == address(0)) {\r\n            deployed = deploy(_script);\r\n            cache[id] = deployed;\r\n        }\r\n\r\n        return DelegateScript.delegate(deployed, _input);\r\n    }\r\n\r\n    /**\r\n    * @dev Deploys contract byte code to network\r\n    */\r\n    function deploy(bytes _script) internal returns (address addr) {\r\n        assembly {\r\n            // 0x24 = 0x20 (length) + 0x04 (spec id uint32)\r\n            // Length of code is 4 bytes less than total script size\r\n            addr := create(0, add(_script, 0x24), sub(mload(_script), 0x04))\r\n            switch iszero(extcodesize(addr))\r\n            case 1 { revert(0, 0) } // throw if contract failed to deploy\r\n        }\r\n    }\r\n}\r\n//File: contracts/factory/EVMScriptRegistryFactory.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EVMScriptRegistryFactory is AppProxyFactory, EVMScriptRegistryConstants {\r\n    address public baseReg;\r\n    address public baseCalls;\r\n    address public baseDel;\r\n    address public baseDeployDel;\r\n\r\n    function EVMScriptRegistryFactory() public {\r\n        baseReg = address(new EVMScriptRegistry());\r\n        baseCalls = address(new CallsScript());\r\n        baseDel = address(new DelegateScript());\r\n        baseDeployDel = address(new DeployDelegateScript());\r\n    }\r\n\r\n    function newEVMScriptRegistry(Kernel _dao, address _root) public returns (EVMScriptRegistry reg) {\r\n        reg = EVMScriptRegistry(_dao.newPinnedAppInstance(EVMSCRIPT_REGISTRY_APP_ID, baseReg));\r\n        reg.initialize();\r\n\r\n        ACL acl = ACL(_dao.acl());\r\n\r\n        _dao.setApp(_dao.APP_ADDR_NAMESPACE(), EVMSCRIPT_REGISTRY_APP_ID, reg);\r\n        acl.createPermission(this, reg, reg.REGISTRY_MANAGER_ROLE(), this);\r\n\r\n        reg.addScriptExecutor(baseCalls);     // spec 1 = CallsScript\r\n        reg.addScriptExecutor(baseDel);       // spec 2 = DelegateScript\r\n        reg.addScriptExecutor(baseDeployDel); // spec 3 = DeployDelegateScript\r\n\r\n        acl.revokePermission(this, reg, reg.REGISTRY_MANAGER_ROLE());\r\n        acl.setPermissionManager(_root, reg, reg.REGISTRY_MANAGER_ROLE());\r\n\r\n        return reg;\r\n    }\r\n}\r\n\r\n//File: contracts/factory/DAOFactory.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DAOFactory {\r\n    address public baseKernel;\r\n    address public baseACL;\r\n    EVMScriptRegistryFactory public regFactory;\r\n\r\n    event DeployDAO(address dao);\r\n    event DeployEVMScriptRegistry(address reg);\r\n\r\n    function DAOFactory(address _baseKernel, address _baseACL, address _regFactory) public {\r\n        // No need to init as it cannot be killed by devops199\r\n        if (_regFactory != address(0)) {\r\n            regFactory = EVMScriptRegistryFactory(_regFactory);\r\n        }\r\n\r\n        baseKernel = _baseKernel;\r\n        baseACL = _baseACL;\r\n    }\r\n\r\n    /**\r\n    * @param _root Address that will be granted control to setup DAO permissions\r\n    */\r\n    function newDAO(address _root) public returns (Kernel dao) {\r\n        dao = Kernel(new KernelProxy(baseKernel));\r\n\r\n        address initialRoot = address(regFactory) != address(0) ? this : _root;\r\n        dao.initialize(baseACL, initialRoot);\r\n\r\n        ACL acl = ACL(dao.acl());\r\n\r\n        if (address(regFactory) != address(0)) {\r\n            bytes32 permRole = acl.CREATE_PERMISSIONS_ROLE();\r\n            bytes32 appManagerRole = dao.APP_MANAGER_ROLE();\r\n\r\n            acl.grantPermission(regFactory, acl, permRole);\r\n\r\n            acl.createPermission(regFactory, dao, appManagerRole, this);\r\n\r\n            EVMScriptRegistry reg = regFactory.newEVMScriptRegistry(dao, _root);\r\n            DeployEVMScriptRegistry(address(reg));\r\n\r\n            acl.revokePermission(regFactory, dao, appManagerRole);\r\n            acl.grantPermission(_root, acl, permRole);\r\n\r\n            acl.setPermissionManager(address(0), dao, appManagerRole);\r\n            acl.setPermissionManager(_root, acl, permRole);\r\n        }\r\n\r\n        DeployDAO(dao);\r\n    }\r\n}\r\n\r\n//File: contracts/lib/ens/ENS.sol\r\npragma solidity ^0.4.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * The ENS registry contract.\r\n */\r\ncontract ENS is AbstractENS {\r\n    struct Record {\r\n        address owner;\r\n        address resolver;\r\n        uint64 ttl;\r\n    }\r\n\r\n    mapping(bytes32=>Record) records;\r\n\r\n    // Permits modifications only by the owner of the specified node.\r\n    modifier only_owner(bytes32 node) {\r\n        if (records[node].owner != msg.sender) throw;\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructs a new ENS registrar.\r\n     */\r\n    function ENS() {\r\n        records[0].owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Returns the address that owns the specified node.\r\n     */\r\n    function owner(bytes32 node) constant returns (address) {\r\n        return records[node].owner;\r\n    }\r\n\r\n    /**\r\n     * Returns the address of the resolver for the specified node.\r\n     */\r\n    function resolver(bytes32 node) constant returns (address) {\r\n        return records[node].resolver;\r\n    }\r\n\r\n    /**\r\n     * Returns the TTL of a node, and any records associated with it.\r\n     */\r\n    function ttl(bytes32 node) constant returns (uint64) {\r\n        return records[node].ttl;\r\n    }\r\n\r\n    /**\r\n     * Transfers ownership of a node to a new address. May only be called by the current\r\n     * owner of the node.\r\n     * @param node The node to transfer ownership of.\r\n     * @param owner The address of the new owner.\r\n     */\r\n    function setOwner(bytes32 node, address owner) only_owner(node) {\r\n        Transfer(node, owner);\r\n        records[node].owner = owner;\r\n    }\r\n\r\n    /**\r\n     * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be\r\n     * called by the owner of the parent node.\r\n     * @param node The parent node.\r\n     * @param label The hash of the label specifying the subnode.\r\n     * @param owner The address of the new owner.\r\n     */\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) {\r\n        var subnode = keccak256(node, label);\r\n        NewOwner(node, label, owner);\r\n        records[subnode].owner = owner;\r\n    }\r\n\r\n    /**\r\n     * Sets the resolver address for the specified node.\r\n     * @param node The node to update.\r\n     * @param resolver The address of the resolver.\r\n     */\r\n    function setResolver(bytes32 node, address resolver) only_owner(node) {\r\n        NewResolver(node, resolver);\r\n        records[node].resolver = resolver;\r\n    }\r\n\r\n    /**\r\n     * Sets the TTL for the specified node.\r\n     * @param node The node to update.\r\n     * @param ttl The TTL in seconds.\r\n     */\r\n    function setTTL(bytes32 node, uint64 ttl) only_owner(node) {\r\n        NewTTL(node, ttl);\r\n        records[node].ttl = ttl;\r\n    }\r\n}\r\n\r\n//File: contracts/factory/ENSFactory.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ENSFactory is ENSConstants {\r\n    event DeployENS(address ens);\r\n\r\n    // This is an incredibly trustfull ENS deployment, only use for testing\r\n    function newENS(address _owner) public returns (ENS ens) {\r\n        ens = new ENS();\r\n\r\n        // Setup .eth TLD\r\n        ens.setSubnodeOwner(ENS_ROOT, ETH_TLD_LABEL, this);\r\n\r\n        // Setup public resolver\r\n        PublicResolver resolver = new PublicResolver(ens);\r\n        ens.setSubnodeOwner(ETH_TLD_NODE, PUBLIC_RESOLVER_LABEL, this);\r\n        ens.setResolver(PUBLIC_RESOLVER_NODE, resolver);\r\n        resolver.setAddr(PUBLIC_RESOLVER_NODE, resolver);\r\n\r\n        ens.setOwner(ETH_TLD_NODE, _owner);\r\n        ens.setOwner(ENS_ROOT, _owner);\r\n\r\n        DeployENS(ens);\r\n    }\r\n}\r\n\r\n//File: contracts/factory/APMRegistryFactory.sol\r\npragma solidity 0.4.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract APMRegistryFactory is APMRegistryConstants {\r\n    DAOFactory public daoFactory;\r\n    APMRegistry public registryBase;\r\n    Repo public repoBase;\r\n    ENSSubdomainRegistrar public ensSubdomainRegistrarBase;\r\n    ENS public ens;\r\n\r\n    event DeployAPM(bytes32 indexed node, address apm);\r\n\r\n    // Needs either one ENS or ENSFactory\r\n    function APMRegistryFactory(\r\n        DAOFactory _daoFactory,\r\n        APMRegistry _registryBase,\r\n        Repo _repoBase,\r\n        ENSSubdomainRegistrar _ensSubBase,\r\n        ENS _ens,\r\n        ENSFactory _ensFactory\r\n    ) public // DAO initialized without evmscript run support\r\n    {\r\n        daoFactory = _daoFactory;\r\n        registryBase = _registryBase;\r\n        repoBase = _repoBase;\r\n        ensSubdomainRegistrarBase = _ensSubBase;\r\n\r\n        // Either the ENS address provided is used, if any.\r\n        // Or we use the ENSFactory to generate a test instance of ENS\r\n        // If not the ENS address nor factory address are provided, this will revert\r\n        ens = _ens != address(0) ? _ens : _ensFactory.newENS(this);\r\n    }\r\n\r\n    function newAPM(bytes32 _tld, bytes32 _label, address _root) public returns (APMRegistry) {\r\n        bytes32 node = keccak256(_tld, _label);\r\n\r\n        // Assume it is the test ENS\r\n        if (ens.owner(node) != address(this)) {\r\n            // If we weren't in test ens and factory doesn't have ownership, will fail\r\n            ens.setSubnodeOwner(_tld, _label, this);\r\n        }\r\n\r\n        Kernel dao = daoFactory.newDAO(this);\r\n        ACL acl = ACL(dao.acl());\r\n\r\n        acl.createPermission(this, dao, dao.APP_MANAGER_ROLE(), this);\r\n\r\n        bytes32 namespace = dao.APP_BASES_NAMESPACE();\r\n\r\n        // Deploy app proxies\r\n        ENSSubdomainRegistrar ensSub = ENSSubdomainRegistrar(dao.newAppInstance(keccak256(node, keccak256(ENS_SUB_APP_NAME)), ensSubdomainRegistrarBase));\r\n        APMRegistry apm = APMRegistry(dao.newAppInstance(keccak256(node, keccak256(APM_APP_NAME)), registryBase));\r\n\r\n        // APMRegistry controls Repos\r\n        dao.setApp(namespace, keccak256(node, keccak256(REPO_APP_NAME)), repoBase);\r\n\r\n        DeployAPM(node, apm);\r\n\r\n        // Grant permissions needed for APM on ENSSubdomainRegistrar\r\n        acl.createPermission(apm, ensSub, ensSub.CREATE_NAME_ROLE(), _root);\r\n        acl.createPermission(apm, ensSub, ensSub.POINT_ROOTNODE_ROLE(), _root);\r\n\r\n        // allow apm to create permissions for Repos in Kernel\r\n        bytes32 permRole = acl.CREATE_PERMISSIONS_ROLE();\r\n\r\n        acl.grantPermission(apm, acl, permRole);\r\n\r\n        // Initialize\r\n        ens.setOwner(node, ensSub);\r\n        ensSub.initialize(ens, node);\r\n        apm.initialize(ensSub);\r\n\r\n        uint16[3] memory firstVersion;\r\n        firstVersion[0] = 1;\r\n\r\n        acl.createPermission(this, apm, apm.CREATE_REPO_ROLE(), this);\r\n\r\n        apm.newRepoWithVersion(APM_APP_NAME, _root, firstVersion, registryBase, b(\"ipfs:apm\"));\r\n        apm.newRepoWithVersion(ENS_SUB_APP_NAME, _root, firstVersion, ensSubdomainRegistrarBase, b(\"ipfs:enssub\"));\r\n        apm.newRepoWithVersion(REPO_APP_NAME, _root, firstVersion, repoBase, b(\"ipfs:repo\"));\r\n\r\n        configureAPMPermissions(acl, apm, _root);\r\n\r\n        // Permission transition to _root\r\n        acl.setPermissionManager(_root, dao, dao.APP_MANAGER_ROLE());\r\n        acl.revokePermission(this, acl, permRole);\r\n        acl.grantPermission(_root, acl, permRole);\r\n        acl.setPermissionManager(_root, acl, permRole);\r\n\r\n        return apm;\r\n    }\r\n\r\n    function b(string memory x) internal pure returns (bytes memory y) {\r\n        y = bytes(x);\r\n    }\r\n\r\n    // Factory can be subclassed and permissions changed\r\n    function configureAPMPermissions(ACL _acl, APMRegistry _apm, address _root) internal {\r\n        _acl.grantPermission(_root, _apm, _apm.CREATE_REPO_ROLE());\r\n        _acl.setPermissionManager(_root, _apm, _apm.CREATE_REPO_ROLE());\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pinnedCode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORE_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUpgradeable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_BASES_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "AppProxyUpgradeable", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fcdedc0397603346788b2567fb5e6d9fd2aedf4ca4c5b47053a13681e719fc386b13400c670cfc21e808e282739a3c54e7f00b7400000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x95b9067d07d6c96a63a3119285b0aa6092e32a4b", "SwarmSource": "bzzr://386770980f0f3b576866c1845bfb9ffa0abfbff2e304c1b51c02da11456c5520"}