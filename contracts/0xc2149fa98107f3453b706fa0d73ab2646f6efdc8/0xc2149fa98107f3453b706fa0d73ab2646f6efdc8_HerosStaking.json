{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nabstract contract Context \r\n{\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory \r\n{\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 \r\n{\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\ncontract HerosStaking is Ownable \r\n{\r\n    using SafeMath for uint256;\r\n    address public tokenAddress;\r\n    address[] internal stakeholders;\r\n    uint256 public rewardDistributionIndex = 0;\r\n\r\n    uint256 public _totalStakes = 0;\r\n    uint256 private uintTime = 1 days;\r\n    uint256 public totalRewardDistributed = 0;\r\n    IERC20 token;\r\n    mapping(address => uint256) internal stakes; // staked amount\r\n    mapping(address => uint256) internal stakingTimestamp; //when tokens were staked. \r\n    mapping(address => uint256) internal stakingPackage; //staking for how much time. \r\n    mapping(uint256 => uint256) internal packages;\r\n\r\n    constructor(address _tokenAddress)\r\n    {\r\n        packages[0] = 1;        \r\n        token = IERC20(_tokenAddress);\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n\r\n\r\n    function availableTokens() public view returns(uint256)\r\n    {\r\n        return IERC20(tokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n\r\n    function createStake(uint256 _stake, uint256 _stakingPackage) external\r\n    {\r\n        _stakingPackage = 0;\r\n        bool _canStake = canStake(_stake, _stakingPackage, msg.sender);\r\n        require(_canStake, \"Cannot Stake\");\r\n        token.transferFrom(msg.sender, address(this), _stake);\r\n        _stakingPackage = _stakingPackage * uintTime;\r\n        addStakeholder(msg.sender, _stake, _stakingPackage);\r\n        _totalStakes = _totalStakes.add(_stake);\r\n    }\r\n\r\n\r\n\r\n    function canStake(uint256 _stake, uint256 _stakingPackage, address account) \r\n    public view returns (bool b)\r\n    {\r\n        if(packages[_stakingPackage]>=0 \r\n        && _stake <= token.balanceOf(account) \r\n        && stakes[account] == 0 \r\n        && _stake > 0)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function balanceuser(address account) public view returns(uint256 b){\r\n        return token.balanceOf(account);\r\n    }\r\n\r\n\r\n    function setApyPercentage(uint256 _percentage) public onlyOwner\r\n    {\r\n        packages[0] =  _percentage;\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice A method for a stakeholder to remove a stake.\r\n     * @param _stake The size of the stake to be removed.\r\n     */\r\n\r\n    function removeSomeStake(uint256 _stake) public\r\n    {\r\n        require(_stake<=stakes[msg.sender], \"Exceeding stake amount\");\r\n\r\n        stakes[msg.sender] = stakes[msg.sender].sub(_stake);\r\n        if(stakes[msg.sender] == 0) \r\n        { \r\n            removeStakeholder(msg.sender); \r\n        }\r\n\r\n        uint256 period = stakingPackage[msg.sender];\r\n        uint256 stakinTimestamp = stakingTimestamp[msg.sender];\r\n\r\n        _totalStakes = _totalStakes.sub(_stake);\r\n\r\n        if((stakinTimestamp+period)>block.timestamp)\r\n        {\r\n            uint256 unstakingFee = _stake.mul(5).div(100);\r\n            _stake = _stake.sub(unstakingFee);\r\n        }\r\n        token.transfer(msg.sender, _stake);\r\n    }\r\n\r\n    \r\n\r\n    function removeAllMyStakes() public    \r\n    {\r\n        uint256 amount = stakes[msg.sender];\r\n        removeSomeStake(amount);\r\n    }\r\n\r\n    function stakeOf(address _stakeholder) public view returns(uint256) \r\n    {\r\n        return stakes[_stakeholder];\r\n    }\r\n\r\n\r\n    function totalStakes() public view returns(uint256)\r\n    {\r\n        return _totalStakes;\r\n    }\r\n\r\n\r\n    function isStakeholder(address _address) public view returns(bool, uint256)\r\n    {\r\n        for(uint256 s = 0; s < stakeholders.length; s++)\r\n        {\r\n            if (_address == stakeholders[s]) return (true, s);\r\n        }\r\n        return (false, 0);\r\n    }\r\n\r\n\r\n    function addStakeholder(address _stakeholder, uint256 _stake, uint256 _package) private\r\n    {\r\n\r\n        (bool _isStakeholder, ) = isStakeholder(_stakeholder);\r\n\r\n        if(!_isStakeholder) \r\n        {\r\n            stakeholders.push(_stakeholder);\r\n        }\r\n\r\n        stakingTimestamp[_stakeholder] = block.timestamp;\r\n        stakingPackage[_stakeholder] = _package;\r\n        stakes[_stakeholder] = _stake;\r\n    }\r\n\r\n\r\n    function removeStakeholder(address _stakeholder) private\r\n    {\r\n        (bool _isStakeholder, uint256 s) = isStakeholder(_stakeholder);\r\n        if(_isStakeholder)\r\n        {\r\n            stakeholders[s] = stakeholders[stakeholders.length - 1];\r\n            stakeholders.pop();\r\n            stakingTimestamp[_stakeholder] = 0;\r\n            stakingPackage[_stakeholder] = 0;\r\n        } \r\n    }\r\n\r\n\r\n    function rewardOf(address _stakeholder) public view returns(uint256)\r\n    {\r\n        (uint256 reward, ) = calculateReward(_stakeholder);\r\n        return reward;\r\n    }\r\n\r\n\r\n    function calculateReward(address _stakeholder) private view returns(uint256, uint256)\r\n    {\r\n        uint256 stakedAmount = stakes[_stakeholder];\r\n        if(stakedAmount==0) { return (0, 0); }\r\n        uint256 _stakingTimestamp =  stakingTimestamp[_stakeholder];\r\n        if(_stakingTimestamp==0) {return (0, 0); }\r\n        uint256 _currentTimestamp =  block.timestamp;\r\n        uint256 _span = _currentTimestamp.sub(_stakingTimestamp);\r\n        uint256 _stakingPackage = stakingPackage[_stakeholder];\r\n        if(_span<_stakingPackage) { return (0, 0); }\r\n        uint256  _loops = _span/_stakingPackage;\r\n        uint256 rewardPercentage =  packages[_stakingPackage];\r\n        uint256 _reward = stakedAmount.mul(rewardPercentage).mul(_loops).div(100);\r\n        return (_reward, _loops);\r\n    }\r\n\r\n  \r\n    // if a holder did not received reward automatically, \r\n    //holder can call this function to claim reward. \r\n    event RewardSent(address _address, uint256 _amount, uint256 _timestamp);\r\n    function _withdrawReward(address _stakeholder)  internal \r\n    {\r\n        (uint256 reward, uint256 loops) = calculateReward(_stakeholder);\r\n        if(reward==0) {return;}\r\n        uint256 myPackage = stakingPackage[_stakeholder];\r\n\r\n        stakingTimestamp[_stakeholder] = (stakingTimestamp[_stakeholder]).add(myPackage*loops);\r\n\r\n        token.transfer(msg.sender, reward);\r\n        totalRewardDistributed += reward;\r\n        emit RewardSent(_stakeholder, reward, block.timestamp);\r\n    }\r\n\r\n\r\n    function distributeReward() public \r\n    {\r\n        if(stakeholders.length==0) {return;}\r\n        if(rewardDistributionIndex==stakeholders.length-1) \r\n        { \r\n            rewardDistributionIndex = 0; \r\n        }\r\n\r\n        for(uint256 i=rewardDistributionIndex; i<stakeholders.length; i++)\r\n        {\r\n            address account = stakeholders[i];\r\n            (uint256 reward,) = calculateReward(account);\r\n            rewardDistributionIndex = i;\r\n            if(reward==0) \r\n            { \r\n                continue; \r\n            }\r\n            else \r\n            {\r\n                _withdrawReward(account);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function claimReward() public \r\n    {\r\n        (uint256 reward,) = calculateReward(msg.sender);\r\n        if(reward>0)\r\n        {\r\n            _withdrawReward(msg.sender);\r\n        }\r\n    }\r\n\r\n    function setAddress(address _tokenAddress) external onlyOwner{\r\n        token = IERC20(_tokenAddress);\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n\r\n\r\n    function getState() public view returns(uint256, uint256, uint256)     \r\n    {\r\n        return (stakeholders.length, token.balanceOf(address(this)), totalRewardDistributed);\r\n    }\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceuser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingPackage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingPackage\",\"type\":\"uint256\"}],\"name\":\"createStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllMyStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"removeSomeStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributionIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setApyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HerosStaking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000097e5e6191277eacf59ec46574e1c5b4c7016e601", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://79f2a28115fe92c6f0e829f0fb5c15012e70381502b9d3751580d1f27cfac6c8"}