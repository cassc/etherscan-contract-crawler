{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lp-migrations/LP1MigrationWithItems.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../interfaces/IMigrationWithItems.sol\\\";\\n\\nimport \\\"./LP1MigrationBase.sol\\\";\\n\\nimport {\\n    MR_UnknownCaller,\\n    MR_InsufficientFunds,\\n    MR_InsufficientAllowance,\\n    MR_Paused\\n} from \\\"../errors/MigrationErrors.sol\\\";\\n\\nimport {\\n    R_ZeroAddress,\\n    R_UnknownBorrower\\n} from \\\"../errors/RolloverErrors.sol\\\";\\n\\n/**\\n * @title LP1MigrationWithItems\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This contract is used to migrate a loan from the other lending protocolss to the Arcade\\n * V3 lending protocol. The migration mechanism takes out a flash loan for the maximumRepaymentAmount\\n * of the old loan from Balancer pool, repays the old loan, and starts a new loan on V3.\\n * This migratiion contract can be used with an items signature signed by a lender.\\n *\\n * This contract only works with ERC721 collateral.\\n */\\ncontract LP1MigrationWithItems is LP1MigrationBase {\\n    using SafeERC20 for IERC20;\\n\\n    struct OperationDataWithItems {\\n        uint256 loanId;\\n        address borrower;\\n        LoanLibrary.LoanTerms newLoanTerms;\\n        address lender;\\n        uint160 nonce;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        LoanLibrary.Predicate[] itemPredicates;\\n        LoanType loanType;\\n    }\\n\\n    constructor(IVault _vault, OperationContracts memory _opContracts, LP1Deployment[] memory _deployments)\\n        LP1MigrationBase(_vault, _opContracts, _deployments) {}\\n\\n    /**\\n     * @notice Mirage a loan from LP1 to V3 using an items signature. Validates new\\n     *         loan terms against the old terms. Takes out Flash Loan for maximumRepaymentAmount,\\n     *         repays old loan, and starts new loan on V3.\\n     *\\n     * @param loanId                 The ID of the LP1 loan to be migrated.\\n     * @param newLoanTerms           The terms of the new loan.\\n     * @param lender                 The address of the lender.\\n     * @param nonce                  The nonce for the signature.\\n     * @param sig                    The signature for new loan.\\n     * @param itemPredicates         The item predicates specified by lender for new loan.\\n     */\\n    function migrateLoanWithItems(\\n        uint256 loanId, // LP1 loanId\\n        LoanLibrary.LoanTerms calldata newLoanTerms,\\n        address lender,\\n        uint160 nonce,\\n        Signature calldata sig,\\n        LoanLibrary.Predicate[] calldata itemPredicates,\\n        LoanType loanType\\n    ) external whenBorrowerReset {\\n        if (paused) revert MR_Paused();\\n\\n        LoanData.LoanTerms memory loanTerms = _getLoanTerms(loanId, loanType);\\n        (address _borrower) = _validateMigration(loanTerms, newLoanTerms, loanId, loanType);\\n\\n        // cache borrower address for flash loan callback\\n        borrower = _borrower;\\n        if (borrower == address(0)) revert R_ZeroAddress(\\\"borrower\\\");\\n\\n        IERC20[] memory assets = new IERC20[](1);\\n        assets[0] = IERC20(loanTerms.loanERC20Denomination);\\n\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = loanTerms.maximumRepaymentAmount;\\n\\n        {\\n            bytes memory params = abi.encode(\\n                OperationDataWithItems({\\n                    loanId: loanId,\\n                    borrower: borrower,\\n                    newLoanTerms: newLoanTerms,\\n                    lender: lender,\\n                    nonce: nonce,\\n                    v: sig.v,\\n                    r: sig.r,\\n                    s: sig.s,\\n                    itemPredicates: itemPredicates,\\n                    loanType: loanType\\n                })\\n            );\\n\\n            // Flash loan based on principal + interest\\n            VAULT.flashLoan(this, assets, amounts, params);\\n        }\\n    }\\n\\n    /**\\n     * @notice Callback function for flash loan.\\n     *\\n     * @dev The caller of this function must be the lending pool.\\n     *\\n     * @param assets                 The ERC20 address that was borrowed in Flash Loan.\\n     * @param amounts                The amount that was borrowed in Flash Loan.\\n     * @param feeAmounts             The fees that are due to the lending pool.\\n     * @param params                 The data to be executed after receiving Flash Loan.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata feeAmounts,\\n        bytes calldata params\\n    ) external nonReentrant {\\n        if (msg.sender != address(VAULT)) revert MR_UnknownCaller(msg.sender, address(VAULT));\\n\\n        OperationDataWithItems memory opData = abi.decode(params, (OperationDataWithItems));\\n\\n        // verify this contract started the flash loan\\n        if (opData.borrower != borrower) revert R_UnknownBorrower(opData.borrower, borrower);\\n        // borrower must be set\\n        if (borrower == address(0)) revert R_ZeroAddress(\\\"borrower\\\");\\n\\n        _executeOperation(assets, amounts, feeAmounts, opData);\\n    }\\n\\n    /**\\n     * @notice Executes repayment of old loan and initialization of new loan with lender\\n     *         specified item predicates. Any funds that are not covered by closing out\\n     *         the old loan must be covered by the borrower.\\n     *\\n     * @param assets                 The ERC20 that was borrowed in Flash Loan.\\n     * @param amounts                The amount that was borrowed in Flash Loan.\\n     * @param premiums               The fees that are due back to the lending pool.\\n     * @param opData                 The data to be executed after receiving Flash Loan.\\n     */\\n    function _executeOperation(\\n        IERC20[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        OperationDataWithItems memory opData\\n    ) internal {\\n        LP1Deployment memory addresses = deployments[uint256(opData.loanType)];\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(addresses.loanCoordinator);\\n\\n        // Get smartNFTId to look up lender promissoryNote and borrower obligationReceipt\\n        IDirectLoanCoordinator.Loan memory loanData = loanCoordinator.getLoanData(uint32(opData.loanId));\\n\\n        address borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(loanData.smartNftId);\\n        address lender = IERC721(loanCoordinator.promissoryNoteToken()).ownerOf(loanData.smartNftId);\\n\\n        // Do accounting to figure out amount each party needs to receive\\n        (uint256 flashAmountDue, uint256 needFromBorrower, uint256 leftoverPrincipal) = _ensureFunds(\\n            amounts[0],\\n            premiums[0],\\n            uint256(\\n                IFeeController(feeController).getLendingFee(\\n                    // FL_01 - borrower origination fee\\n                    keccak256(\\\"BORROWER_ORIGINATION_FEE\\\")\\n                )\\n            ),\\n            opData.newLoanTerms.principal\\n        );\\n\\n        IERC20 asset = IERC20(assets[0]);\\n\\n        if (needFromBorrower > 0) {\\n            if (asset.balanceOf(borrower) < needFromBorrower) {\\n                revert MR_InsufficientFunds(borrower, needFromBorrower, asset.balanceOf(opData.borrower));\\n            }\\n            if (asset.allowance(borrower, address(this)) < needFromBorrower) {\\n                revert MR_InsufficientAllowance(\\n                    borrower,\\n                    needFromBorrower,\\n                    asset.allowance(borrower, address(this))\\n                );\\n            }\\n        }\\n\\n        {\\n            LoanData.LoanTerms memory loanTerms = _getLoanTerms(uint32(opData.loanId), opData.loanType);\\n\\n            _repayLoan(loanTerms, borrower, uint32(opData.loanId), opData.loanType);\\n\\n            uint256 newLoanId = _initializeNewLoanWithItems(borrower, opData.lender, opData);\\n\\n            emit Migration(\\n                lender,\\n                borrower,\\n                uint32(opData.loanId), // old loanId\\n                newLoanId\\n            );\\n        }\\n\\n        if (leftoverPrincipal > 0) {\\n            asset.safeTransfer(borrower, leftoverPrincipal);\\n        } else if (needFromBorrower > 0) {\\n            asset.safeTransferFrom(borrower, address(this), needFromBorrower);\\n        }\\n\\n        // Make flash loan repayment\\n        // Balancer requires a transfer back to the vault\\n        asset.safeTransfer(address(VAULT), flashAmountDue);\\n    }\\n\\n    /**\\n     * @notice Helper function to initialize the new loan using a collection wide offer. Approves\\n     *         the V3 Loan Core contract to take the collateral, then starts the new loan. Once\\n     *         the new loan is started, the borrowerNote is sent to the borrower.\\n     *\\n     * @param borrower                 The address of the borrower.\\n     * @param lender                   The address of the new lender.\\n     * @param opData                   The data used to initialize new V3 loan with items.\\n     *\\n     * @return newLoanId               V3 loanId for the new loan that is started.\\n     */\\n    function _initializeNewLoanWithItems(\\n        address borrower,\\n        address lender,\\n        OperationDataWithItems memory opData\\n    ) internal returns (uint256) {\\n        // approve originationController\\n        IERC721(opData.newLoanTerms.collateralAddress).approve(address(loanCore), opData.newLoanTerms.collateralId);\\n\\n        // start new loan\\n        // stand in for borrower to meet OriginationController's requirements\\n        uint256 newLoanId = IOriginationController(originationController).initializeLoanWithItems(\\n            opData.newLoanTerms,\\n            address(this),\\n            lender,\\n            IOriginationController.Signature({ v: opData.v, r: opData.r, s: opData.s, extraData: \\\"0x\\\" }),\\n            opData.nonce,\\n            opData.itemPredicates\\n        );\\n\\n        IERC721(address(borrowerNote)).safeTransferFrom(address(this), borrower, newLoanId);\\n\\n        return newLoanId;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMigrationWithItems.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./ILoanCore.sol\\\";\\n\\ninterface IMigrationWithItems {\\n    struct OperationDataWithItems {\\n        uint256 loanId;\\n        address borrower;\\n        LoanLibrary.LoanTerms newLoanTerms;\\n        address lender;\\n        uint160 nonce;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        LoanLibrary.Predicate[] itemPredicates;\\n    }\\n\\n    function migrateLoanWithItems(\\n        uint256 loanId,\\n        LoanLibrary.LoanTerms calldata newLoanTerms,\\n        address lender,\\n        uint160 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lp-migrations/LP1MigrationBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../external/lp-1/loans/direct/loanTypes/DirectLoanFixedOffer.sol\\\";\\n\\nimport \\\"../interfaces/IMigrationBase.sol\\\";\\n\\nimport {\\n    MR_FundsConflict,\\n    MR_NotCollateralOwner,\\n    MR_CurrencyMismatch,\\n    MR_CollateralIdMismatch,\\n    MR_CollateralMismatch,\\n    MR_CallerNotBorrower\\n} from \\\"../errors/MigrationErrors.sol\\\";\\n\\nimport {\\n    R_StateAlreadySet,\\n    R_ZeroAddress,\\n    R_BorrowerNotReset\\n} from \\\"../errors/RolloverErrors.sol\\\";\\n\\n/**\\n * @title LP1MigrationBase\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This contract holds the common logic for the LP1Migration and LP1MigrationWIthItems contracts.\\n */\\nabstract contract LP1MigrationBase is IMigrationBase, ReentrancyGuard, ERC721Holder, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    event Migration(\\n        address indexed lender,\\n        address indexed borrower,\\n        uint256 oldLoanId,\\n        uint256 newLoanId\\n    );\\n\\n    struct OperationContracts {\\n        IFeeController feeControllerV3;\\n        IOriginationController originationControllerV3;\\n        ILoanCore loanCoreV3;\\n        IERC721 borrowerNoteV3;\\n    }\\n\\n    struct LP1Deployment {\\n        address directLoanFixedOffer;\\n        address loanCoordinator;\\n    }\\n\\n    enum LoanType {\\n        V2,\\n        V2_1,\\n        V2_3,\\n        COLLECTION_V2,\\n        COLLECTION_V2_3\\n    }\\n\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct OperationData {\\n        uint256 loanId;\\n        address borrower;\\n        LoanLibrary.LoanTerms newLoanTerms;\\n        address lender;\\n        uint160 nonce;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        LoanType loanType;\\n    }\\n\\n    // Balancer vault contract\\n    /* solhint-disable var-name-mixedcase */\\n    IVault public immutable VAULT; // 0xBA12222222228d8Ba445958a75a0704d566BF2C8\\n\\n    /// @notice V3 lending protocol contract references\\n    LP1Deployment[5] public deployments;\\n\\n    IFeeController public immutable feeController;\\n    IOriginationController public immutable originationController;\\n    ILoanCore public immutable loanCore;\\n    IERC721 public immutable borrowerNote;\\n\\n    /// @notice State variable used for checking the inheriting contract initiated the flash\\n    ///         loan. When a rollover function is called the borrowers address is cached here\\n    ///         and checked against the opData in the flash loan callback.\\n    address public borrower;\\n\\n    /// @notice state variable for pausing the contract\\n    bool public paused;\\n\\n    constructor(IVault _vault, OperationContracts memory _opContracts, LP1Deployment[] memory _deployments) {\\n        // input sanitization\\n        if (address(_vault) == address(0)) revert R_ZeroAddress(\\\"vault\\\");\\n        if (address(_opContracts.feeControllerV3) == address(0)) revert R_ZeroAddress(\\\"feeControllerV3\\\");\\n        if (address(_opContracts.originationControllerV3) == address(0)) revert R_ZeroAddress(\\\"originationControllerV3\\\");\\n        if (address(_opContracts.loanCoreV3) == address(0)) revert R_ZeroAddress(\\\"loanCoreV3\\\");\\n        if (address(_opContracts.borrowerNoteV3) == address(0)) revert R_ZeroAddress(\\\"borrowerNoteV3\\\");\\n\\n        // Set Balancer vault address\\n        VAULT = _vault;\\n\\n        // Set lending protocol contract references\\n        feeController = IFeeController(_opContracts.feeControllerV3);\\n        originationController = IOriginationController(_opContracts.originationControllerV3);\\n        loanCore = ILoanCore(_opContracts.loanCoreV3);\\n        borrowerNote = IERC721(_opContracts.borrowerNoteV3);\\n\\n        // Set LP1 deployment references\\n        require(_deployments.length == 5, \\\"Invalid versions\\\");\\n\\n        deployments[0] = _deployments[0];\\n        deployments[1] = _deployments[1];\\n        deployments[2] = _deployments[2];\\n        deployments[3] = _deployments[3];\\n        deployments[4] = _deployments[4];\\n    }\\n\\n    /**\\n     * @notice This helper function to calculate the net amounts required to repay the flash loan.\\n     *         This function will return the total amount due back to the lending pool. The amount\\n     *         that needs to be paid by the borrower, in the case that the new loan does not cover\\n     *         the flashAmountDue. Lastly, the amount that will be sent back to the borrower, in\\n     *         the case that the new loan covers more than the flashAmountDue.\\n     *\\n     * @param amount                  The amount that was borrowed in Flash Loan.\\n     * @param premium                 The fees that are due back to the lending pool.\\n     * @param originationFee          The origination fee for the new loan.\\n     * @param newPrincipal            The principal of the new loan.\\n     *\\n     * @return flashAmountDue         The total amount due back to the lending pool.\\n     * @return needFromBorrower       The amount borrower owes if new loan cannot repay flash loan.\\n     * @return leftoverPrincipal      The amount to send to borrower if new loan amount is more than\\n     *                                amount required to repay flash loan.\\n     */\\n    function _ensureFunds(\\n        uint256 amount,\\n        uint256 premium,\\n        uint256 originationFee,\\n        uint256 newPrincipal\\n    ) internal pure returns (uint256 flashAmountDue, uint256 needFromBorrower, uint256 leftoverPrincipal) {\\n        // total amount due to flash loan contract\\n        flashAmountDue = amount + premium;\\n        // amount that will be received when starting the new loan\\n        uint256 willReceive = newPrincipal - ((newPrincipal * originationFee) / 1e4);\\n\\n        if (flashAmountDue > willReceive) {\\n            // Not enough - have borrower pay the difference\\n            needFromBorrower = flashAmountDue - willReceive;\\n        } else if (willReceive > flashAmountDue) {\\n            // Too much - will send extra to borrower\\n            leftoverPrincipal = willReceive - flashAmountDue;\\n        }\\n\\n        // Either leftoverPrincipal or needFromBorrower should be 0\\n        if (leftoverPrincipal != 0 && needFromBorrower != 0) {\\n            revert MR_FundsConflict(leftoverPrincipal, needFromBorrower);\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to repay the loan. Takes the obligationReceiptToken from the borrower, and\\n     *         approves the directLoanFixedOffer contract to spend the payable currency received from flash loan.\\n     *         Repays the loan, and ensures this contract holds the collateral after the loan is repaid.\\n     *\\n     * @param loanTerms                The loan terms for the loan to be repaid.\\n     * @param borrower_                The address of the borrower for the loan to be repaid (trailing underscore\\n                                        to differentiate from the borrower state variable)\\n     * @param loanId                   The id of the loan to be repaid.\\n     */\\n    function _repayLoan(\\n        LoanData.LoanTerms memory loanTerms,\\n        address borrower_,\\n        uint32 loanId,\\n        LoanType loanType\\n    ) internal {\\n        LP1Deployment memory addresses = deployments[uint256(loanType)];\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(addresses.loanCoordinator);\\n        DirectLoanFixedOffer directLoanFixedOffer = DirectLoanFixedOffer(addresses.directLoanFixedOffer);\\n\\n        // Take obligationReceiptToken from borrower\\n        // Must be approved for withdrawal\\n        IDirectLoanCoordinator.Loan memory loanData = loanCoordinator.getLoanData(loanId);\\n        uint64 smartNftId = loanData.smartNftId;\\n\\n        IERC721(loanCoordinator.obligationReceiptToken()).safeTransferFrom(\\n            borrower_,\\n            address(this),\\n            smartNftId\\n        );\\n\\n        // Approve repayment\\n        IERC20(loanTerms.loanERC20Denomination).approve(\\n            address(directLoanFixedOffer),\\n            loanTerms.maximumRepaymentAmount\\n        );\\n\\n        // Repay loan\\n        directLoanFixedOffer.payBackLoan(loanId);\\n\\n        address collateralOwner = IERC721(loanTerms.nftCollateralContract).ownerOf(loanTerms.nftCollateralId);\\n        if (collateralOwner != address(this)) revert MR_NotCollateralOwner(collateralOwner);\\n    }\\n\\n    /**\\n     * @notice Validates that the migration is valid. The borrower from the loan must be the caller.\\n     *         The new loan must have the same currency as the old loan. The new loan must use the same\\n     *         collateral as the old loan. If any of these conditionals are not met, the transaction\\n     *         will revert.\\n     *\\n     * @param sourceLoanTerms           The terms of the old loan.\\n     * @param newLoanTerms              The terms of the V3 loan.\\n     * @param loanId                    The ID of the old loan.\\n     */\\n    function _validateMigration(\\n        LoanData.LoanTerms memory sourceLoanTerms,\\n        LoanLibrary.LoanTerms calldata newLoanTerms,\\n        uint256 loanId,\\n        LoanType loanType\\n    ) internal view returns (address _borrower) {\\n        LP1Deployment memory addresses = deployments[uint256(loanType)];\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(addresses.loanCoordinator);\\n\\n        IDirectLoanCoordinator.Loan memory loanCoordinatorData = loanCoordinator.getLoanData(\\n            uint32(loanId)\\n        );\\n\\n        uint256 smartNftId = loanCoordinatorData.smartNftId;\\n        _borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(\\n            smartNftId\\n        );\\n\\n        if (_borrower != msg.sender) revert MR_CallerNotBorrower(msg.sender, _borrower);\\n\\n        if (sourceLoanTerms.loanERC20Denomination != newLoanTerms.payableCurrency) {\\n            revert MR_CurrencyMismatch(sourceLoanTerms.loanERC20Denomination, newLoanTerms.payableCurrency);\\n        }\\n\\n        if (sourceLoanTerms.nftCollateralContract != newLoanTerms.collateralAddress) {\\n            revert MR_CollateralMismatch(sourceLoanTerms.nftCollateralContract, newLoanTerms.collateralAddress);\\n        }\\n\\n        if (sourceLoanTerms.nftCollateralId != newLoanTerms.collateralId) {\\n            revert MR_CollateralIdMismatch(sourceLoanTerms.nftCollateralId, newLoanTerms.collateralId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to get the loan terms for the loan.\\n     *\\n     * @param loanId                   The id of the loan for which the terms are needed.\\n     *\\n     * @return loanTerms               The terms associated with the loan id.\\n     */\\n    function _getLoanTerms(uint256 loanId, LoanType loanType) internal view returns (LoanData.LoanTerms memory) {\\n        (\\n            uint256 loanPrincipalAmount,\\n            uint256 maximumRepaymentAmount,\\n            uint256 nftCollateralId,\\n            address loanERC20Denomination,\\n            uint32 loanDuration,\\n            uint16 loanInterestRateForDurationInBasisPoints,\\n            uint16 loanAdminFeeInBasisPoints,\\n            address nftCollateralWrapper,\\n            uint64 loanStartTime,\\n            address nftCollateralContract,\\n            address _borrower\\n        ) = DirectLoanFixedOffer(deployments[uint256(loanType)].directLoanFixedOffer).loanIdToLoan(uint32(loanId));\\n\\n        return LoanData.LoanTerms(\\n            loanPrincipalAmount,\\n            maximumRepaymentAmount,\\n            nftCollateralId,\\n            loanERC20Denomination,\\n            loanDuration,\\n            loanInterestRateForDurationInBasisPoints,\\n            loanAdminFeeInBasisPoints,\\n            nftCollateralWrapper,\\n            loanStartTime,\\n            nftCollateralContract,\\n            _borrower\\n        );\\n    }\\n\\n    /**\\n     * @notice Function to be used by the contract owner to withdraw any ERC20 tokens that\\n     *         are sent to the contract and get stuck.\\n     */\\n    function flushToken(IERC20 token, address to) external override {\\n        uint256 balance = token.balanceOf(address(this));\\n        require(balance > 0, \\\"no balance\\\");\\n\\n        token.safeTransfer(to, balance);\\n    }\\n\\n    /**\\n     * @notice Function to be used by the contract owner to pause the contract.\\n     *\\n     * @dev This function is only to be used if a vulnerability is found or the contract\\n     *      is no longer being used.\\n     *\\n     * @param _pause              The state to set the contract to.\\n     */\\n    function pause(bool _pause) external override onlyOwner {\\n        if (paused == _pause) revert R_StateAlreadySet();\\n\\n        paused = _pause;\\n\\n        emit PausedStateChanged(_pause);\\n    }\\n\\n    /**\\n     * @notice This function ensures that at the start of every flash loan sequence, the borrower\\n     *         state is reset to address(0). The rollover functions that inherit this modifier set\\n     *         the borrower state while executing the rollover operations. At the end of the rollover\\n     *         the borrower state is reset to address(0).\\n     */\\n    modifier whenBorrowerReset() {\\n        if (borrower != address(0)) revert R_BorrowerNotReset(borrower);\\n\\n        _;\\n\\n        borrower = address(0);\\n    }\\n}\"\r\n    },\r\n    \"contracts/errors/MigrationErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title MigrationErrors\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This file contains all custom errors for v3 migration contracts from competitor lending protocol #1.\\n * All errors are prefixed by \\\"MR_\\\" for MigrationRollover. Errors are located in one place to make it\\n * possible to holistically look at all migratin over failure cases.\\n */\\n\\n// ================================== LP1 To V3 Migration ====================================\\n\\n/**\\n * @notice The flash loan callback caller is not recognized. The caller must be the flash\\n *         loan provider.\\n *\\n * @param caller                  The address of the caller.\\n * @param lendingPool             Expected address of the flash loan provider.\\n */\\nerror MR_UnknownCaller(address caller, address lendingPool);\\n\\n/**\\n * @notice The balance of the borrower is insufficient to repay the difference between\\n *         the loan and the V3 loan principal minus fees.\\n *\\n * @param borrower                The address of the borrower.\\n * @param amount                  The difference amount.\\n * @param balance                 Current balance of the borrower.\\n */\\nerror MR_InsufficientFunds(address borrower, uint256 amount, uint256 balance);\\n\\n/**\\n * @notice The allowance of the borrower to the V3 migration contract is insufficient\\n *          to repay the difference between the LP1 loan and the V3 loan principal minus fees.\\n *\\n * @param borrower                The address of the borrower.\\n * @param amount                  The difference amount.\\n * @param allowance               Current allowance of the borrower.\\n */\\nerror MR_InsufficientAllowance(address borrower, uint256 amount, uint256 allowance);\\n\\n/**\\n * @notice An accounting check to verify that either the leftover V3 loan principal is\\n *         zero or the amount needed from the borrower to cover any difference is zero.\\n *         Either there is leftover principal that needs to be sent to the borrower, or\\n *         the borrower needs to send funds to cover the difference between the LP1 repayment\\n *         amount and the new V3 loan principal minus any fees.\\n *\\n * @param leftoverPrincipal       The leftover principal from the V3 loan.\\n * @param needFromBorrower        The amount needed from the borrower to cover the difference.\\n */\\nerror MR_FundsConflict(uint256 leftoverPrincipal, uint256 needFromBorrower);\\n\\n/**\\n * @notice After repaying the LP1 loan, the LP1 -> V3 migration contract must be the owner of\\n *         the collateral token.\\n *\\n * @param owner                   The owner of the collateral token.\\n */\\nerror MR_NotCollateralOwner(address owner);\\n\\n/**\\n * @notice Only the holder of the obligationReceiptToken can migrate their loan.\\n *\\n * @param caller                  The address of the caller.\\n * @param borrower                Holder of the obligationReceiptToken address\\n */\\nerror MR_CallerNotBorrower(address caller, address borrower);\\n\\n/**\\n * @notice The LP1 and V3 payable currency tokens must be the same so that the flash loan can\\n *         be repaid.\\n *\\n * @param oldCurrency               The payable currency address for the old loan.\\n * @param v3Currency                The V3 payable currency address.\\n */\\nerror MR_CurrencyMismatch(address oldCurrency, address v3Currency);\\n\\n/**\\n * @notice The LP1 and V3 collateral tokens must be the same.\\n *\\n * @param oldCollateral             The collateral token address for the old loan.\\n * @param v3Collateral              The V3 collateral token address.\\n */\\nerror MR_CollateralMismatch(address oldCollateral, address v3Collateral);\\n\\n/**\\n * @notice The LP1 and V3 collateral token IDs must be the same.\\n *\\n * @param oldCollateralId           The old collateral token ID for the old loan.\\n * @param v3CollateralId            The V3 collateral token ID.\\n */\\nerror MR_CollateralIdMismatch(uint256 oldCollateralId, uint256 v3CollateralId);\\n\\n/**\\n * @notice Contract is paused, migration operations are blocked.\\n */\\nerror MR_Paused();\\n\"\r\n    },\r\n    \"contracts/errors/RolloverErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title RolloverErrors\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This file contains all custom errors for V2 -> V3 rollover contracts. All errors are\\n * prefixed by \\\"R_\\\" for Rollover. Errors are located in one place to make it possible to\\n * holistically look at all V2 -> V3 rollover failure cases.\\n */\\n\\n// ================================== V2 To V3 Rollover ====================================\\n\\n/**\\n * @notice The flash loan callback caller is not recognized. The caller must be the flash\\n *         loan provider.\\n *\\n * @param caller                  The address of the caller.\\n * @param lendingPool             Expected address of the flash loan provider.\\n */\\nerror R_UnknownCaller(address caller, address lendingPool);\\n\\n/**\\n * @notice The balance of the borrower is insufficient to repay the difference between\\n *         the V2 loan and the V3 loan principal minus fees.\\n *\\n * @param borrower                The address of the borrower.\\n * @param amount                  The difference amount.\\n * @param balance                 Current balance of the borrower.\\n */\\nerror R_InsufficientFunds(address borrower, uint256 amount, uint256 balance);\\n\\n/**\\n * @notice The allowance of the borrower to the V2 -> V3 rollover contract is insufficient\\n *          to repay the difference between the V2 loan and the V3 loan principal minus fees.\\n *\\n * @param borrower                The address of the borrower.\\n * @param amount                  The difference amount.\\n * @param allowance               Current allowance of the borrower.\\n */\\nerror R_InsufficientAllowance(address borrower, uint256 amount, uint256 allowance);\\n\\n/**\\n * @notice An accounting check to verify that either the leftover V3 loan principal is\\n *         zero or the amount needed from the borrower to cover any difference is zero.\\n *         Either there is leftover principal that needs to be sent to the borrower, or\\n *         the borrower needs to send funds to cover the difference between the V2 repayment\\n *         amount and the new V3 loan principal minus any fees.\\n *\\n * @param leftoverPrincipal       The leftover principal from the V3 loan.\\n * @param needFromBorrower        The amount needed from the borrower to cover the difference.\\n */\\nerror R_FundsConflict(uint256 leftoverPrincipal, uint256 needFromBorrower);\\n\\n/**\\n * @notice After repaying the V2 loan, the V2 -> V3 rollover contract must be the owner of\\n *         the collateral token.\\n *\\n * @param owner                   The owner of the collateral token.\\n */\\nerror R_NotCollateralOwner(address owner);\\n\\n/**\\n * @notice Only the holder of the borrowerNote can rollover their loan.\\n *\\n * @param caller                  The address of the caller.\\n * @param borrower                Holder of the borrower notes address\\n */\\nerror R_CallerNotBorrower(address caller, address borrower);\\n\\n/**\\n * @notice The V2 and V3 payable currency tokens must be the same so that the flash loan can\\n *         be repaid.\\n *\\n * @param v2Currency              The V2 payable currency address.\\n * @param v3Currency              The V3 payable currency address.\\n */\\nerror R_CurrencyMismatch(address v2Currency, address v3Currency);\\n\\n/**\\n * @notice The V2 and V3 collateral tokens must be the same.\\n *\\n * @param v2Collateral            The V2 collateral token address.\\n * @param v3Collateral            The V3 collateral token address.\\n */\\nerror R_CollateralMismatch(address v2Collateral, address v3Collateral);\\n\\n/**\\n * @notice The V2 and V3 collateral token IDs must be the same.\\n *\\n * @param v2CollateralId          The V2 collateral token ID.\\n * @param v3CollateralId          The V3 collateral token ID.\\n */\\nerror R_CollateralIdMismatch(uint256 v2CollateralId, uint256 v3CollateralId);\\n\\n/**\\n * @notice The rollover contract does not hold a balance for the token specified to flush.\\n */\\nerror R_NoTokenBalance();\\n\\n/**\\n * @notice Contract is paused, rollover operations are blocked.\\n */\\nerror R_Paused();\\n\\n/**\\n * @notice The rollover contract is already in the specified pause state.\\n */\\nerror R_StateAlreadySet();\\n\\n/**\\n * @notice Cannot pass the zero address as an argument.\\n *\\n * @param name                    The name of the contract.\\n */\\nerror R_ZeroAddress(string name);\\n\\n/**\\n * @notice The borrower address saved in the rollover contract is not the same as the\\n *         borrower address provided in the flash loan operation data. The initiator of\\n *         the flash loan must be the rollover contract.\\n *\\n * @param providedBorrower        Borrower address passed in the flash loan operation data.\\n * @param cachedBorrower          Borrower address saved in the rollover contract.\\n */\\nerror R_UnknownBorrower(address providedBorrower, address cachedBorrower);\\n\\n/**\\n * @notice The borrower state must be address(0) to initiate a rollover sequence.\\n *\\n * @param borrower                The borrower address.\\n */\\nerror R_BorrowerNotReset(address borrower);\\n\"\r\n    },\r\n    \"contracts/interfaces/ILoanCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\nimport \\\"./IPromissoryNote.sol\\\";\\n\\ninterface ILoanCore {\\n\\n    // ================ Data Types =================\\n\\n    struct AffiliateSplit {\\n        address affiliate;\\n        uint96 splitBps;\\n    }\\n\\n    struct NoteReceipt {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    // ================ Events =================\\n\\n    event LoanStarted(uint256 loanId, address lender, address borrower);\\n    event LoanRepaid(uint256 loanId);\\n    event ForceRepay(uint256 loanId);\\n    event LoanRolledOver(uint256 oldLoanId, uint256 newLoanId);\\n    event LoanClaimed(uint256 loanId);\\n    event NoteRedeemed(address indexed token, address indexed caller, address indexed to, uint256 tokenId, uint256 amount);\\n    event NonceUsed(address indexed user, uint160 nonce);\\n\\n    event FeesWithdrawn(address indexed token, address indexed caller, address indexed to, uint256 amount);\\n    event AffiliateSet(bytes32 indexed code, address indexed affiliate, uint96 splitBps);\\n\\n    // ============== Lifecycle Operations ==============\\n\\n    function startLoan(\\n        address lender,\\n        address borrower,\\n        LoanLibrary.LoanTerms calldata terms,\\n        uint256 _amountFromLender,\\n        uint256 _amountToBorrower,\\n        LoanLibrary.FeeSnapshot calldata feeSnapshot\\n    ) external returns (uint256 loanId);\\n\\n    function repay(\\n        uint256 loanId,\\n        address payer,\\n        uint256 _amountFromPayer,\\n        uint256 _amountToLender\\n    ) external;\\n\\n    function forceRepay(\\n        uint256 loanId,\\n        address payer,\\n        uint256 _amountFromPayer,\\n        uint256 _amountToLender\\n    ) external;\\n\\n    function claim(\\n        uint256 loanId,\\n        uint256 _amountFromLender\\n    ) external;\\n\\n    function redeemNote(\\n        uint256 loanId,\\n        uint256 _amountFromLender,\\n        address to\\n    ) external;\\n\\n    function rollover(\\n        uint256 oldLoanId,\\n        address borrower,\\n        address lender,\\n        LoanLibrary.LoanTerms calldata terms,\\n        uint256 _settledAmount,\\n        uint256 _amountToOldLender,\\n        uint256 _amountToLender,\\n        uint256 _amountToBorrower\\n    ) external returns (uint256 newLoanId);\\n\\n    // ============== Nonce Management ==============\\n\\n    function consumeNonce(address user, uint160 nonce) external;\\n\\n    function cancelNonce(uint160 nonce) external;\\n\\n    // ============== Fee Management ==============\\n\\n    function withdraw(address token, uint256 amount, address to) external;\\n\\n    function withdrawProtocolFees(address token, address to) external;\\n\\n    // ============== Admin Operations ==============\\n\\n    function setAffiliateSplits(bytes32[] calldata codes, AffiliateSplit[] calldata splits) external;\\n\\n    // ============== View Functions ==============\\n\\n    function getLoan(uint256 loanId) external view returns (LoanLibrary.LoanData calldata loanData);\\n\\n    function getNoteReceipt(uint256 loanId) external view returns (address token, uint256 amount);\\n\\n    function isNonceUsed(address user, uint160 nonce) external view returns (bool);\\n\\n    function borrowerNote() external view returns (IPromissoryNote);\\n\\n    function lenderNote() external view returns (IPromissoryNote);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LoanLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title LoanLibrary\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Contains all data types used across Arcade lending contracts.\\n */\\nlibrary LoanLibrary {\\n    /**\\n     * @dev Enum describing the current state of a loan.\\n     * State change flow:\\n     * Created -> Active -> Repaid\\n     *                   -> Defaulted\\n     */\\n    enum LoanState {\\n        // We need a default that is not 'Created' - this is the zero value\\n        DUMMY_DO_NOT_USE,\\n        // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\n        Active,\\n        // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\n        Repaid,\\n        // The loan was delinquent and collateral claimed by the lender. This is a terminal state.\\n        Defaulted\\n    }\\n\\n    /**\\n     * @dev The raw terms of a loan.\\n     */\\n    struct LoanTerms {\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        uint256 proratedInterestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The token ID of the address holding the collateral.\\n        /// @dev Can be an AssetVault, or the NFT contract for unbundled collateral\\n        address collateralAddress;\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 96 bits\\n        uint96 durationSecs;\\n        // The token ID of the collateral.\\n        uint256 collateralId;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n        // Timestamp for when signature for terms expires\\n        uint96 deadline;\\n        // Affiliate code used to start the loan.\\n        bytes32 affiliateCode;\\n    }\\n\\n    /**\\n     * @dev Modification of loan terms, used for signing only.\\n     *      Instead of a collateralId, a list of predicates\\n     *      is defined by 'bytes' in items.\\n     */\\n    struct LoanTermsWithItems {\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        uint256 proratedInterestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The tokenID of the address holding the collateral\\n        address collateralAddress;\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 96 bits\\n        uint96 durationSecs;\\n        // An encoded list of predicates, along with their verifiers.\\n        bytes items;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n        // Timestamp for when signature for terms expires\\n        uint96 deadline;\\n        // Affiliate code used to start the loan.\\n        bytes32 affiliateCode;\\n    }\\n\\n    /**\\n     * @dev Predicate for item-based verifications\\n     */\\n    struct Predicate {\\n        // The encoded predicate, to decoded and parsed by the verifier contract.\\n        bytes data;\\n        // The verifier contract.\\n        address verifier;\\n    }\\n\\n    /**\\n     * @dev Snapshot of lending fees at the time of loan creation.\\n     */\\n    struct FeeSnapshot {\\n        // The fee taken when lender claims defaulted collateral.\\n        uint16 lenderDefaultFee;\\n        // The fee taken from the borrower's interest repayment.\\n        uint16 lenderInterestFee;\\n        // The fee taken from the borrower's principal repayment.\\n        uint16 lenderPrincipalFee;\\n    }\\n\\n    /**\\n     * @dev The data of a loan. This is stored once the loan is Active\\n     */\\n    struct LoanData {\\n        /// @dev Packed variables\\n        // The current state of the loan.\\n        LoanState state;\\n        // Start date of the loan, using block.timestamp.\\n        uint160 startDate;\\n        /// @dev Full-slot variables\\n        // The raw terms of the loan.\\n        LoanTerms terms;\\n        // Record of lending fees at the time of loan creation.\\n        FeeSnapshot feeSnapshot;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPromissoryNote.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\nimport \\\"./INFTWithDescriptor.sol\\\";\\n\\ninterface IPromissoryNote is INFTWithDescriptor, IERC721Enumerable {\\n    // ============== Token Operations ==============\\n\\n    function mint(address to, uint256 loanId) external returns (uint256);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    // ============== Initializer ==============\\n\\n    function initialize(address loanCore) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTWithDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface INFTWithDescriptor {\\n    // ============= Events ==============\\n\\n    event SetDescriptor(address indexed caller, address indexed descriptor);\\n\\n    // ================ Resource Metadata ================\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function setDescriptor(address descriptor) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/loans/direct/loanTypes/DirectLoanFixedOffer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./DirectLoanBaseMinimal.sol\\\";\\nimport \\\"../../../utils/ContractKeys.sol\\\";\\n\\n/**\\n * @title  DirectLoanFixed\\n * @author NFTfi\\n * @notice Main contract for NFTfi Direct Loans Fixed Type. This contract manages the ability to create NFT-backed\\n * peer-to-peer loans of type Fixed (agreed to be a fixed-repayment loan) where the borrower pays the\\n * maximumRepaymentAmount regardless of whether they repay early or not.\\n *\\n * There are two ways to commence an NFT-backed loan:\\n *\\n * a. The borrower accepts a lender's offer by calling `acceptOffer`.\\n *   1. the borrower calls nftContract.approveAll(NFTfi), approving the NFTfi contract to move their NFT's on their\\n * be1alf.\\n *   2. the lender calls erc20Contract.approve(NFTfi), allowing NFTfi to move the lender's ERC20 tokens on their\\n * behalf.\\n *   3. the lender signs an off-chain message, proposing its offer terms.\\n *   4. the borrower calls `acceptOffer` to accept these terms and enter into the loan. The NFT is stored in\\n * the contract, the borrower receives the loan principal in the specified ERC20 currency, the lender receives an\\n * NFTfi promissory note (in ERC721 form) that represents the rights to either the principal-plus-interest, or the\\n * underlying NFT collateral if the borrower does not pay back in time, and the borrower receives obligation receipt\\n * (in ERC721 form) that gives them the right to pay back the loan and get the collateral back.\\n *\\n * b. The lender accepts a borrowe's binding terms by calling `acceptListing`.\\n *   1. the borrower calls nftContract.approveAll(NFTfi), approving the NFTfi contract to move their NFT's on their\\n * be1alf.\\n *   2. the lender calls erc20Contract.approve(NFTfi), allowing NFTfi to move the lender's ERC20 tokens on their\\n * behalf.\\n *   3. the borrower signs an off-chain message, proposing its binding terms.\\n *   4. the lender calls `acceptListing` with an offer matching the binding terms and enter into the loan. The NFT is\\n * stored in the contract, the borrower receives the loan principal in the specified ERC20 currency, the lender\\n * receives an NFTfi promissory note (in ERC721 form) that represents the rights to either the principal-plus-interest,\\n * or the underlying NFT collateral if the borrower does not pay back in time, and the borrower receives obligation\\n * receipt (in ERC721 form) that gives them the right to pay back the loan and get the collateral back.\\n *\\n * The lender can freely transfer and trade this ERC721 promissory note as they wish, with the knowledge that\\n * transferring the ERC721 promissory note tranfsers the rights to principal-plus-interest and/or collateral, and that\\n * they will no longer have a claim on the loan. The ERC721 promissory note itself represents that claim.\\n *\\n * The borrower can freely transfer and trade this ERC721 obligaiton receipt as they wish, with the knowledge that\\n * transferring the ERC721 obligaiton receipt tranfsers the rights right to pay back the loan and get the collateral\\n * back.\\n *\\n *\\n * A loan may end in one of two ways:\\n * - First, a borrower may call NFTfi.payBackLoan() and pay back the loan plus interest at any time, in which case they\\n * receive their NFT back in the same transaction.\\n * - Second, if the loan's duration has passed and the loan has not been paid back yet, a lender can call\\n * NFTfi.liquidateOverdueLoan(), in which case they receive the underlying NFT collateral and forfeit the rights to the\\n * principal-plus-interest, which the borrower now keeps.\\n */\\ncontract DirectLoanFixedOffer is DirectLoanBaseMinimal {\\n    /* ********** */\\n    /* DATA TYPES */\\n    /* ********** */\\n\\n    bytes32 public constant LOAN_TYPE = bytes32(\\\"DIRECT_LOAN_FIXED_OFFER\\\");\\n\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @dev Sets `hub` and permitted erc20-s\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     * @param  _nftfiHub - NFTfiHub address\\n     * @param  _permittedErc20s - list of permitted ERC20 token contract addresses\\n     */\\n    constructor(\\n        address _admin,\\n        address _nftfiHub,\\n        address[] memory _permittedErc20s\\n    )\\n        DirectLoanBaseMinimal(\\n            _admin,\\n            _nftfiHub,\\n            ContractKeys.getIdFromStringKey(\\\"DIRECT_LOAN_COORDINATOR\\\"),\\n            _permittedErc20s\\n        )\\n    {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /* ********* */\\n    /* FUNCTIONS */\\n    /* ********* */\\n\\n    /**\\n     * @notice This function is called by the borrower when accepting a lender's offer to begin a loan.\\n     *\\n     * @param _offer - The offer made by the lender.\\n     * @param _signature - The components of the lender's signature.\\n     * @param _borrowerSettings - Some extra parameters that the borrower needs to set when accepting an offer.\\n     */\\n    function acceptOffer(\\n        Offer memory _offer,\\n        Signature memory _signature,\\n        BorrowerSettings memory _borrowerSettings\\n    ) external whenNotPaused nonReentrant {\\n        address nftWrapper = _getWrapper(_offer.nftCollateralContract);\\n        _loanSanityChecks(_offer, nftWrapper);\\n        _loanSanityChecksOffer(_offer);\\n        _acceptOffer(\\n            LOAN_TYPE,\\n            _setupLoanTerms(_offer, nftWrapper),\\n            _setupLoanExtras(_borrowerSettings.revenueSharePartner, _borrowerSettings.referralFeeInBasisPoints),\\n            _offer,\\n            _signature\\n        );\\n    }\\n\\n    /* ******************* */\\n    /* READ-ONLY FUNCTIONS */\\n    /* ******************* */\\n\\n    /**\\n     * @notice This function can be used to view the current quantity of the ERC20 currency used in the specified loan\\n     * required by the borrower to repay their loan, measured in the smallest unit of the ERC20 currency.\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     *\\n     * @return The amount of the specified ERC20 currency required to pay back this loan, measured in the smallest unit\\n     * of the specified ERC20 currency.\\n     */\\n    function getPayoffAmount(uint32 _loanId) external view override returns (uint256) {\\n        LoanTerms storage loan = loanIdToLoan[_loanId];\\n        return loan.maximumRepaymentAmount;\\n    }\\n\\n    /* ****************** */\\n    /* INTERNAL FUNCTIONS */\\n    /* ****************** */\\n\\n    /**\\n     * @notice This function is called by the borrower when accepting a lender's offer to begin a loan.\\n     *\\n     * @param _loanType - The loan type being created.\\n     * @param _loanTerms - The main Loan Terms struct. This data is saved upon loan creation on loanIdToLoan.\\n     * @param _loanExtras - The main Loan Terms struct. This data is saved upon loan creation on loanIdToLoanExtras.\\n     * @param _offer - The offer made by the lender.\\n     * @param _signature - The components of the lender's signature.\\n     */\\n    function _acceptOffer(\\n        bytes32 _loanType,\\n        LoanTerms memory _loanTerms,\\n        LoanExtras memory _loanExtras,\\n        Offer memory _offer,\\n        Signature memory _signature\\n    ) internal {\\n        // Check loan nonces. These are different from Ethereum account nonces.\\n        // Here, these are uint256 numbers that should uniquely identify\\n        // each signature for each user (i.e. each user should only create one\\n        // off-chain signature for each nonce, with a nonce being any arbitrary\\n        // uint256 value that they have not used yet for an off-chain NFTfi\\n        // signature).\\n        require(!_nonceHasBeenUsedForUser[_signature.signer][_signature.nonce], \\\"Lender nonce invalid\\\");\\n\\n        _nonceHasBeenUsedForUser[_signature.signer][_signature.nonce] = true;\\n\\n        require(NFTfiSigningUtils.isValidLenderSignature(_offer, _signature), \\\"Lender signature is invalid\\\");\\n\\n        address bundle = hub.getContract(ContractKeys.NFTFI_BUNDLER);\\n        require(_loanTerms.nftCollateralContract != bundle, \\\"Collateral cannot be bundle\\\");\\n\\n        uint32 loanId = _createLoan(_loanType, _loanTerms, _loanExtras, msg.sender, _signature.signer, _offer.referrer);\\n\\n        // Emit an event with all relevant details from this transaction.\\n        emit LoanStarted(loanId, msg.sender, _signature.signer, _loanTerms, _loanExtras);\\n    }\\n\\n    /**\\n     * @dev Creates a `LoanTerms` struct using data sent as the lender's `_offer` on `acceptOffer`.\\n     * This is needed in order to avoid stack too deep issues.\\n     * Since this is a Fixed loan type loanInterestRateForDurationInBasisPoints is ignored.\\n     */\\n    function _setupLoanTerms(Offer memory _offer, address _nftWrapper) internal view returns (LoanTerms memory) {\\n        return\\n            LoanTerms({\\n                loanERC20Denomination: _offer.loanERC20Denomination,\\n                loanPrincipalAmount: _offer.loanPrincipalAmount,\\n                maximumRepaymentAmount: _offer.maximumRepaymentAmount,\\n                nftCollateralContract: _offer.nftCollateralContract,\\n                nftCollateralWrapper: _nftWrapper,\\n                nftCollateralId: _offer.nftCollateralId,\\n                loanStartTime: uint64(block.timestamp),\\n                loanDuration: _offer.loanDuration,\\n                loanInterestRateForDurationInBasisPoints: uint16(0),\\n                loanAdminFeeInBasisPoints: _offer.loanAdminFeeInBasisPoints,\\n                borrower: msg.sender\\n            });\\n    }\\n\\n    /**\\n     * @dev Calculates the payoff amount and admin fee\\n     *\\n     * @param _loanTerms - Struct containing all the loan's parameters\\n     */\\n    function _payoffAndFee(LoanTerms memory _loanTerms)\\n        internal\\n        pure\\n        override\\n        returns (uint256 adminFee, uint256 payoffAmount)\\n    {\\n        // Calculate amounts to send to lender and admins\\n        uint256 interestDue = _loanTerms.maximumRepaymentAmount - _loanTerms.loanPrincipalAmount;\\n        adminFee = LoanChecksAndCalculations.computeAdminFee(\\n            interestDue,\\n            uint256(_loanTerms.loanAdminFeeInBasisPoints)\\n        );\\n        payoffAmount = _loanTerms.maximumRepaymentAmount - adminFee;\\n    }\\n\\n    /**\\n     * @dev Function that performs some validation checks over loan parameters when accepting an offer\\n     *\\n     */\\n    function _loanSanityChecksOffer(LoanData.Offer memory _offer) internal pure {\\n        require(\\n            _offer.maximumRepaymentAmount >= _offer.loanPrincipalAmount,\\n            \\\"Negative interest rate loans are not allowed.\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMigrationBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ILoanCore.sol\\\";\\nimport \\\"./IOriginationController.sol\\\";\\nimport \\\"./IFeeController.sol\\\";\\n\\nimport \\\"../external/interfaces/IFlashLoanRecipient.sol\\\";\\n\\nimport \\\"../v2-migration/v2-contracts/v2-interfaces/ILoanCoreV2.sol\\\";\\nimport \\\"../v2-migration/v2-contracts/v2-interfaces/IRepaymentControllerV2.sol\\\";\\n\\ninterface IMigrationBase is IFlashLoanRecipient {\\n    event PausedStateChanged(bool isPaused);\\n\\n    function flushToken(IERC20 token, address to) external;\\n\\n    function pause(bool _pause) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/loans/direct/loanTypes/DirectLoanBaseMinimal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./IDirectLoanBase.sol\\\";\\nimport \\\"./LoanData.sol\\\";\\nimport \\\"./LoanChecksAndCalculations.sol\\\";\\nimport \\\"./LoanAirdropUtils.sol\\\";\\nimport \\\"../../BaseLoan.sol\\\";\\nimport \\\"../../../utils/NftReceiver.sol\\\";\\nimport \\\"../../../utils/NFTfiSigningUtils.sol\\\";\\nimport \\\"../../../interfaces/INftfiHub.sol\\\";\\nimport \\\"../../../utils/ContractKeys.sol\\\";\\nimport \\\"../../../interfaces/IDirectLoanCoordinator.sol\\\";\\nimport \\\"../../../interfaces/INftWrapper.sol\\\";\\nimport \\\"../../../interfaces/IPermittedPartners.sol\\\";\\nimport \\\"../../../interfaces/IPermittedERC20s.sol\\\";\\nimport \\\"../../../interfaces/IPermittedNFTs.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title  DirectLoanBase\\n * @author NFTfi\\n * @notice Main contract for NFTfi Direct Loans Type. This contract manages the ability to create NFT-backed\\n * peer-to-peer loans.\\n *\\n * There are two ways to commence an NFT-backed loan:\\n *\\n * a. The borrower accepts a lender's offer by calling `acceptOffer`.\\n *   1. the borrower calls nftContract.approveAll(NFTfi), approving the NFTfi contract to move their NFT's on their\\n * be1alf.\\n *   2. the lender calls erc20Contract.approve(NFTfi), allowing NFTfi to move the lender's ERC20 tokens on their\\n * behalf.\\n *   3. the lender signs an off-chain message, proposing its offer terms.\\n *   4. the borrower calls `acceptOffer` to accept these terms and enter into the loan. The NFT is stored in\\n * the contract, the borrower receives the loan principal in the specified ERC20 currency, the lender receives an\\n * NFTfi promissory note (in ERC721 form) that represents the rights to either the principal-plus-interest, or the\\n * underlying NFT collateral if the borrower does not pay back in time, and the borrower receives obligation receipt\\n * (in ERC721 form) that gives them the right to pay back the loan and get the collateral back.\\n *\\n * b. The lender accepts a borrowe's binding terms by calling `acceptListing`.\\n *   1. the borrower calls nftContract.approveAll(NFTfi), approving the NFTfi contract to move their NFT's on their\\n * be1alf.\\n *   2. the lender calls erc20Contract.approve(NFTfi), allowing NFTfi to move the lender's ERC20 tokens on their\\n * behalf.\\n *   3. the borrower signs an off-chain message, proposing its binding terms.\\n *   4. the lender calls `acceptListing` with an offer matching the binding terms and enter into the loan. The NFT is\\n * stored in the contract, the borrower receives the loan principal in the specified ERC20 currency, the lender\\n * receives an NFTfi promissory note (in ERC721 form) that represents the rights to either the principal-plus-interest,\\n * or the underlying NFT collateral if the borrower does not pay back in time, and the borrower receives obligation\\n * receipt (in ERC721 form) that gives them the right to pay back the loan and get the collateral back.\\n *\\n * The lender can freely transfer and trade this ERC721 promissory note as they wish, with the knowledge that\\n * transferring the ERC721 promissory note tranfsers the rights to principal-plus-interest and/or collateral, and that\\n * they will no longer have a claim on the loan. The ERC721 promissory note itself represents that claim.\\n *\\n * The borrower can freely transfer and trade this ERC721 obligaiton receipt as they wish, with the knowledge that\\n * transferring the ERC721 obligaiton receipt tranfsers the rights right to pay back the loan and get the collateral\\n * back.\\n *\\n * A loan may end in one of two ways:\\n * - First, a borrower may call NFTfi.payBackLoan() and pay back the loan plus interest at any time, in which case they\\n * receive their NFT back in the same transaction.\\n * - Second, if the loan's duration has passed and the loan has not been paid back yet, a lender can call\\n * NFTfi.liquidateOverdueLoan(), in which case they receive the underlying NFT collateral and forfeit the rights to the\\n * principal-plus-interest, which the borrower now keeps.\\n *\\n *\\n * If the loan was created as a ProRated type loan (pro-rata interest loan), then the user only pays the principal plus\\n * pro-rata interest if repaid early.\\n * However, if the loan was was created as a Fixed type loan (agreed to be a fixed-repayment loan), then the borrower\\n * pays the maximumRepaymentAmount regardless of whether they repay early or not.\\n *\\n */\\nabstract contract DirectLoanBaseMinimal is IDirectLoanBase, IPermittedERC20s, BaseLoan, NftReceiver, LoanData {\\n    using SafeERC20 for IERC20;\\n\\n    /* ******* */\\n    /* STORAGE */\\n    /* ******* */\\n\\n    uint16 public constant HUNDRED_PERCENT = 10000;\\n\\n    bytes32 public immutable override LOAN_COORDINATOR;\\n\\n    /**\\n     * @notice The maximum duration of any loan started for this loan type, measured in seconds. This is both a\\n     * sanity-check for borrowers and an upper limit on how long admins will have to support v1 of this contract if they\\n     * eventually deprecate it, as well as a check to ensure that the loan duration never exceeds the space alotted for\\n     * it in the loan struct.\\n     */\\n    uint256 public override maximumLoanDuration = 53 weeks;\\n\\n    /**\\n     * @notice The percentage of interest earned by lenders on this platform that is taken by the contract admin's as a\\n     * fee, measured in basis points (hundreths of a percent). The max allowed value is 10000.\\n     */\\n    uint16 public override adminFeeInBasisPoints = 25;\\n\\n    /**\\n     * @notice A mapping from a loan's identifier to the loan's details, represted by the loan struct.\\n     */\\n    mapping(uint32 => LoanTerms) public override loanIdToLoan;\\n    mapping(uint32 => LoanExtras) public loanIdToLoanExtras;\\n\\n    /**\\n     * @notice A mapping tracking whether a loan has either been repaid or liquidated. This prevents an attacker trying\\n     * to repay or liquidate the same loan twice.\\n     */\\n    mapping(uint32 => bool) public override loanRepaidOrLiquidated;\\n\\n    /**\\n     * @dev keeps track of tokens being held as loan collateral, so we dont allow these\\n     * to be transferred with the aridrop draining functions\\n     */\\n    mapping(address => mapping(uint256 => uint256)) private _escrowTokens;\\n\\n    /**\\n     * @notice A mapping that takes both a user's address and a loan nonce that was first used when signing an off-chain\\n     * order and checks whether that nonce has previously either been used for a loan, or has been pre-emptively\\n     * cancelled. The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to\\n     * nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders.\\n     *\\n     * These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each\\n     * nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower\\n     * in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would submit a\\n     * user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     */\\n    mapping(address => mapping(uint256 => bool)) internal _nonceHasBeenUsedForUser;\\n\\n    /**\\n     * @notice A mapping from an ERC20 currency address to whether that currency\\n     * is permitted to be used by this contract.\\n     */\\n    mapping(address => bool) private erc20Permits;\\n\\n    INftfiHub public immutable hub;\\n\\n    /* ****** */\\n    /* EVENTS */\\n    /* ****** */\\n\\n    /**\\n     * @notice This event is fired whenever the admins change the percent of interest rates earned that they charge as a\\n     * fee. Note that newAdminFee can never exceed 10,000, since the fee is measured in basis points.\\n     *\\n     * @param  newAdminFee - The new admin fee measured in basis points. This is a percent of the interest paid upon a\\n     * loan's completion that go to the contract admins.\\n     */\\n    event AdminFeeUpdated(uint16 newAdminFee);\\n\\n    /**\\n     * @notice This event is fired whenever the admins change the maximum duration of any loan started for this loan\\n     * type.\\n     *\\n     * @param  newMaximumLoanDuration - The new maximum duration.\\n     */\\n    event MaximumLoanDurationUpdated(uint256 newMaximumLoanDuration);\\n\\n    /**\\n     * @notice This event is fired whenever a borrower begins a loan by calling NFTfi.beginLoan(), which can only occur\\n     * after both the lender and borrower have approved their ERC721 and ERC20 contracts to use NFTfi, and when they\\n     * both have signed off-chain messages that agree on the terms of the loan.\\n     *\\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param  borrower - The address of the borrower.\\n     * @param  lender - The address of the lender. The lender can change their address by transferring the NFTfi ERC721\\n     * token that they received when the loan began.\\n     */\\n    event LoanStarted(\\n        uint32 indexed loanId,\\n        address indexed borrower,\\n        address indexed lender,\\n        LoanTerms loanTerms,\\n        LoanExtras loanExtras\\n    );\\n\\n    /**\\n     * @notice This event is fired whenever a borrower successfully repays their loan, paying\\n     * principal-plus-interest-minus-fee to the lender in loanERC20Denomination, paying fee to owner in\\n     * loanERC20Denomination, and receiving their NFT collateral back.\\n     *\\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param  borrower - The address of the borrower.\\n     * @param  lender - The address of the lender. The lender can change their address by transferring the NFTfi ERC721\\n     * token that they received when the loan began.\\n     * @param  loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param  nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param  amountPaidToLender The amount of ERC20 that the borrower paid to the lender, measured in the smalled\\n     * units of loanERC20Denomination.\\n     * @param  adminFee The amount of interest paid to the contract admins, measured in the smalled units of\\n     * loanERC20Denomination and determined by adminFeeInBasisPoints. This amount never exceeds the amount of interest\\n     * earned.\\n     * @param  revenueShare The amount taken from admin fee amount shared with the partner.\\n     * @param  revenueSharePartner  - The address of the partner that will receive the revenue share.\\n     * @param  nftCollateralContract - The ERC721 contract of the NFT collateral\\n     * @param  loanERC20Denomination - The ERC20 contract of the currency being used as principal/interest for this\\n     * loan.\\n     */\\n    event LoanRepaid(\\n        uint32 indexed loanId,\\n        address indexed borrower,\\n        address indexed lender,\\n        uint256 loanPrincipalAmount,\\n        uint256 nftCollateralId,\\n        uint256 amountPaidToLender,\\n        uint256 adminFee,\\n        uint256 revenueShare,\\n        address revenueSharePartner,\\n        address nftCollateralContract,\\n        address loanERC20Denomination\\n    );\\n\\n    /**\\n     * @notice This event is fired whenever a lender liquidates an outstanding loan that is owned to them that has\\n     * exceeded its duration. The lender receives the underlying NFT collateral, and the borrower no longer needs to\\n     * repay the loan principal-plus-interest.\\n     *\\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param  borrower - The address of the borrower.\\n     * @param  lender - The address of the lender. The lender can change their address by transferring the NFTfi ERC721\\n     * token that they received when the loan began.\\n     * @param  loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param  nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param  loanMaturityDate - The unix time (measured in seconds) that the loan became due and was eligible for\\n     * liquidation.\\n     * @param  loanLiquidationDate - The unix time (measured in seconds) that liquidation occurred.\\n     * @param  nftCollateralContract - The ERC721 contract of the NFT collateral\\n     */\\n    event LoanLiquidated(\\n        uint32 indexed loanId,\\n        address indexed borrower,\\n        address indexed lender,\\n        uint256 loanPrincipalAmount,\\n        uint256 nftCollateralId,\\n        uint256 loanMaturityDate,\\n        uint256 loanLiquidationDate,\\n        address nftCollateralContract\\n    );\\n\\n    /**\\n     * @notice This event is fired when some of the terms of a loan are being renegotiated.\\n     *\\n     * @param loanId - The unique identifier for the loan to be renegotiated\\n     * @param newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\\n     * early.\\n     * @param renegotiationFee Agreed upon fee in loan denomination that borrower pays for the lender for the\\n     * renegotiation, has to be paid with an ERC20 transfer loanERC20Denomination token, uses transfer from,\\n     * frontend will have to propmt an erc20 approve for this from the borrower to the lender\\n     * @param renegotiationAdminFee renegotiationFee admin portion based on determined by adminFeeInBasisPoints\\n     */\\n    event LoanRenegotiated(\\n        uint32 indexed loanId,\\n        address indexed borrower,\\n        address indexed lender,\\n        uint32 newLoanDuration,\\n        uint256 newMaximumRepaymentAmount,\\n        uint256 renegotiationFee,\\n        uint256 renegotiationAdminFee\\n    );\\n\\n    /**\\n     * @notice This event is fired whenever the admin sets a ERC20 permit.\\n     *\\n     * @param erc20Contract - Address of the ERC20 contract.\\n     * @param isPermitted - Signals ERC20 permit.\\n     */\\n    event ERC20Permit(address indexed erc20Contract, bool isPermitted);\\n\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @dev Sets `hub`\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     * @param  _nftfiHub - NFTfiHub address\\n     * @param  _loanCoordinatorKey -\\n     * @param  _permittedErc20s -\\n     */\\n    constructor(\\n        address _admin,\\n        address _nftfiHub,\\n        bytes32 _loanCoordinatorKey,\\n        address[] memory _permittedErc20s\\n    ) BaseLoan(_admin) {\\n        hub = INftfiHub(_nftfiHub);\\n        LOAN_COORDINATOR = _loanCoordinatorKey;\\n        for (uint256 i = 0; i < _permittedErc20s.length; i++) {\\n            _setERC20Permit(_permittedErc20s[i], true);\\n        }\\n    }\\n\\n    /* *************** */\\n    /* ADMIN FUNCTIONS */\\n    /* *************** */\\n\\n    /**\\n     * @notice This function can be called by admins to change the maximumLoanDuration. Note that they can never change\\n     * maximumLoanDuration to be greater than UINT32_MAX, since that's the maximum space alotted for the duration in the\\n     * loan struct.\\n     *\\n     * @param _newMaximumLoanDuration - The new maximum loan duration, measured in seconds.\\n     */\\n    function updateMaximumLoanDuration(uint256 _newMaximumLoanDuration) external onlyOwner {\\n        require(_newMaximumLoanDuration <= uint256(type(uint32).max), \\\"Loan duration overflow\\\");\\n        maximumLoanDuration = _newMaximumLoanDuration;\\n        emit MaximumLoanDurationUpdated(_newMaximumLoanDuration);\\n    }\\n\\n    /**\\n     * @notice This function can be called by admins to change the percent of interest rates earned that they charge as\\n     * a fee. Note that newAdminFee can never exceed 10,000, since the fee is measured in basis points.\\n     *\\n     * @param _newAdminFeeInBasisPoints - The new admin fee measured in basis points. This is a percent of the interest\\n     * paid upon a loan's completion that go to the contract admins.\\n     */\\n    function updateAdminFee(uint16 _newAdminFeeInBasisPoints) external onlyOwner {\\n        require(_newAdminFeeInBasisPoints <= HUNDRED_PERCENT, \\\"basis points > 10000\\\");\\n        adminFeeInBasisPoints = _newAdminFeeInBasisPoints;\\n        emit AdminFeeUpdated(_newAdminFeeInBasisPoints);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC20 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function drainERC20Airdrop(address _tokenAddress, address _receiver) external onlyOwner {\\n        IERC20 tokenContract = IERC20(_tokenAddress);\\n        uint256 amount = tokenContract.balanceOf(address(this));\\n        require(amount > 0, \\\"no tokens owned\\\");\\n        tokenContract.safeTransfer(_receiver, amount);\\n    }\\n\\n    /**\\n     * @notice This function can be called by admins to change the permitted status of an ERC20 currency. This includes\\n     * both adding an ERC20 currency to the permitted list and removing it.\\n     *\\n     * @param _erc20 - The address of the ERC20 currency whose permit list status changed.\\n     * @param _permit - The new status of whether the currency is permitted or not.\\n     */\\n    function setERC20Permit(address _erc20, bool _permit) external onlyOwner {\\n        _setERC20Permit(_erc20, _permit);\\n    }\\n\\n    /**\\n     * @notice This function can be called by admins to change the permitted status of a batch of ERC20 currency. This\\n     * includes both adding an ERC20 currency to the permitted list and removing it.\\n     *\\n     * @param _erc20s - The addresses of the ERC20 currencies whose permit list status changed.\\n     * @param _permits - The new statuses of whether the currency is permitted or not.\\n     */\\n    function setERC20Permits(address[] memory _erc20s, bool[] memory _permits) external onlyOwner {\\n        require(_erc20s.length == _permits.length, \\\"setERC20Permits function information arity mismatch\\\");\\n\\n        for (uint256 i = 0; i < _erc20s.length; i++) {\\n            _setERC20Permit(_erc20s[i], _permits[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC721 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _tokenId - id token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function drainERC721Airdrop(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        address _receiver\\n    ) external onlyOwner {\\n        IERC721 tokenContract = IERC721(_tokenAddress);\\n        require(_escrowTokens[_tokenAddress][_tokenId] == 0, \\\"token is collateral\\\");\\n        require(tokenContract.ownerOf(_tokenId) == address(this), \\\"nft not owned\\\");\\n        tokenContract.safeTransferFrom(address(this), _receiver, _tokenId);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain ERC1155 tokens received as airdrops\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _tokenId - id token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function drainERC1155Airdrop(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        address _receiver\\n    ) external onlyOwner {\\n        IERC1155 tokenContract = IERC1155(_tokenAddress);\\n        uint256 amount = tokenContract.balanceOf(address(this), _tokenId);\\n        require(_escrowTokens[_tokenAddress][_tokenId] == 0, \\\"token is collateral\\\");\\n        require(amount > 0, \\\"no nfts owned\\\");\\n        tokenContract.safeTransferFrom(address(this), _receiver, _tokenId, amount, \\\"\\\");\\n    }\\n\\n    function mintObligationReceipt(uint32 _loanId) external nonReentrant {\\n        address borrower = loanIdToLoan[_loanId].borrower;\\n        require(msg.sender == borrower, \\\"sender has to be borrower\\\");\\n\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\\n        loanCoordinator.mintObligationReceipt(_loanId, borrower);\\n\\n        delete loanIdToLoan[_loanId].borrower;\\n    }\\n\\n    /**\\n     * @dev makes possible to change loan duration and max repayment amount, loan duration even can be extended if\\n     * loan was expired but not liquidated.\\n     *\\n     * @param _loanId - The unique identifier for the loan to be renegotiated\\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\\n     * early.\\n     * @param _renegotiationFee Agreed upon fee in ether that borrower pays for the lender for the renegitiation\\n     * @param _lenderNonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are\\n     * referring instead to nonces that are used by both the lender and the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     * @param _expiry - The date when the renegotiation offer expires\\n     * @param _lenderSignature - The ECDSA signature of the lender, obtained off-chain ahead of time, signing the\\n     * following combination of parameters:\\n     * - _loanId\\n     * - _newLoanDuration\\n     * - _newMaximumRepaymentAmount\\n     * - _lender\\n     * - _expiry\\n     *  - address of this contract\\n     * - chainId\\n     */\\n    function renegotiateLoan(\\n        uint32 _loanId,\\n        uint32 _newLoanDuration,\\n        uint256 _newMaximumRepaymentAmount,\\n        uint256 _renegotiationFee,\\n        uint256 _lenderNonce,\\n        uint256 _expiry,\\n        bytes memory _lenderSignature\\n    ) external whenNotPaused nonReentrant {\\n        _renegotiateLoan(\\n            _loanId,\\n            _newLoanDuration,\\n            _newMaximumRepaymentAmount,\\n            _renegotiationFee,\\n            _lenderNonce,\\n            _expiry,\\n            _lenderSignature\\n        );\\n    }\\n\\n    /**\\n     * @notice This function is called by a anyone to repay a loan. It can be called at any time after the loan has\\n     * begun and before loan expiry.. The caller will pay a pro-rata portion of their interest if the loan is paid off\\n     * early and the loan is pro-rated type, but the complete repayment amount if it is fixed type.\\n     * The the borrower (current owner of the obligation note) will get the collaterl NFT back.\\n     *\\n     * This function is purposefully not pausable in order to prevent an attack where the contract admin's pause the\\n     * contract and hold hostage the NFT's that are still within it.\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     */\\n    function payBackLoan(uint32 _loanId) external nonReentrant {\\n        LoanChecksAndCalculations.payBackChecks(_loanId, hub);\\n        (\\n            address borrower,\\n            address lender,\\n            LoanTerms memory loan,\\n            IDirectLoanCoordinator loanCoordinator\\n        ) = _getPartiesAndData(_loanId);\\n\\n        _payBackLoan(_loanId, borrower, lender, loan);\\n\\n        _resolveLoan(_loanId, borrower, loan, loanCoordinator);\\n\\n        // Delete the loan from storage in order to achieve a substantial gas savings and to lessen the burden of\\n        // storage on Ethereum nodes, since we will never access this loan's details again, and the details are still\\n        // available through event data.\\n        delete loanIdToLoan[_loanId];\\n        delete loanIdToLoanExtras[_loanId];\\n    }\\n\\n    /**\\n     * @notice This function is called by a lender once a loan has finished its duration and the borrower still has not\\n     * repaid. The lender can call this function to seize the underlying NFT collateral, although the lender gives up\\n     * all rights to the principal-plus-collateral by doing so.\\n     *\\n     * This function is purposefully not pausable in order to prevent an attack where the contract admin's pause\\n     * the contract and hold hostage the NFT's that are still within it.\\n     *\\n     * We intentionally allow anybody to call this function, although only the lender will end up receiving the seized\\n     * collateral. We are exploring the possbility of incentivizing users to call this function by using some of the\\n     * admin funds.\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     */\\n    function liquidateOverdueLoan(uint32 _loanId) external nonReentrant {\\n        LoanChecksAndCalculations.checkLoanIdValidity(_loanId, hub);\\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have never been called on this loanId.\\n        // Depending on how the rest of the code turns out, this check may be unnecessary.\\n        require(!loanRepaidOrLiquidated[_loanId], \\\"Loan already repaid/liquidated\\\");\\n\\n        (\\n            address borrower,\\n            address lender,\\n            LoanTerms memory loan,\\n            IDirectLoanCoordinator loanCoordinator\\n        ) = _getPartiesAndData(_loanId);\\n\\n        // Ensure that the loan is indeed overdue, since we can only liquidate overdue loans.\\n        uint256 loanMaturityDate = uint256(loan.loanStartTime) + uint256(loan.loanDuration);\\n        require(block.timestamp > loanMaturityDate, \\\"Loan is not overdue yet\\\");\\n\\n        require(msg.sender == lender, \\\"Only lender can liquidate\\\");\\n\\n        _resolveLoan(_loanId, lender, loan, loanCoordinator);\\n\\n        // Emit an event with all relevant details from this transaction.\\n        emit LoanLiquidated(\\n            _loanId,\\n            borrower,\\n            lender,\\n            loan.loanPrincipalAmount,\\n            loan.nftCollateralId,\\n            loanMaturityDate,\\n            block.timestamp,\\n            loan.nftCollateralContract\\n        );\\n\\n        // Delete the loan from storage in order to achieve a substantial gas savings and to lessen the burden of\\n        // storage on Ethereum nodes, since we will never access this loan's details again, and the details are still\\n        // available through event data.\\n        delete loanIdToLoan[_loanId];\\n        delete loanIdToLoanExtras[_loanId];\\n    }\\n\\n    /**\\n     * @notice this function initiates a flashloan to pull an airdrop from a tartget contract\\n     *\\n     * @param _loanId -\\n     * @param _target - address of the airdropping contract\\n     * @param _data - function selector to be called on the airdropping contract\\n     * @param _nftAirdrop - address of the used claiming nft in the drop\\n     * @param _nftAirdropId - id of the used claiming nft in the drop\\n     * @param _is1155 -\\n     * @param _nftAirdropAmount - amount in case of 1155\\n     */\\n\\n    function pullAirdrop(\\n        uint32 _loanId,\\n        address _target,\\n        bytes calldata _data,\\n        address _nftAirdrop,\\n        uint256 _nftAirdropId,\\n        bool _is1155,\\n        uint256 _nftAirdropAmount\\n    ) external nonReentrant {\\n        LoanChecksAndCalculations.checkLoanIdValidity(_loanId, hub);\\n        require(!loanRepaidOrLiquidated[_loanId], \\\"Loan already repaid/liquidated\\\");\\n\\n        LoanTerms memory loan = loanIdToLoan[_loanId];\\n\\n        LoanAirdropUtils.pullAirdrop(\\n            _loanId,\\n            loan,\\n            _target,\\n            _data,\\n            _nftAirdrop,\\n            _nftAirdropId,\\n            _is1155,\\n            _nftAirdropAmount,\\n            hub\\n        );\\n    }\\n\\n    /**\\n     * @notice this function creates a proxy contract wrapping the collateral to be able to catch an expected airdrop\\n     *\\n     * @param _loanId -\\n     */\\n\\n    function wrapCollateral(uint32 _loanId) external nonReentrant {\\n        LoanChecksAndCalculations.checkLoanIdValidity(_loanId, hub);\\n        require(!loanRepaidOrLiquidated[_loanId], \\\"Loan already repaid/liquidated\\\");\\n\\n        LoanTerms storage loan = loanIdToLoan[_loanId];\\n\\n        _escrowTokens[loan.nftCollateralContract][loan.nftCollateralId] -= 1;\\n        (address instance, uint256 receiverId) = LoanAirdropUtils.wrapCollateral(_loanId, loan, hub);\\n        _escrowTokens[instance][receiverId] += 1;\\n    }\\n\\n    /**\\n     * @notice This function can be called by either a lender or a borrower to cancel all off-chain orders that they\\n     * have signed that contain this nonce. If the off-chain orders were created correctly, there should only be one\\n     * off-chain order that contains this nonce at all.\\n     *\\n     * The nonce referred to here is not the same as an Ethereum account's nonce. We are referring\\n     * instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi\\n     * orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order.\\n     * Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the\\n     * borrower in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would\\n     * submit a user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     *\\n     * @param  _nonce - User nonce\\n     */\\n    function cancelLoanCommitmentBeforeLoanHasBegun(uint256 _nonce) external {\\n        require(!_nonceHasBeenUsedForUser[msg.sender][_nonce], \\\"Invalid nonce\\\");\\n        _nonceHasBeenUsedForUser[msg.sender][_nonce] = true;\\n    }\\n\\n    /* ******************* */\\n    /* READ-ONLY FUNCTIONS */\\n    /* ******************* */\\n\\n    /**\\n     * @notice This function can be used to view the current quantity of the ERC20 currency used in the specified loan\\n     * required by the borrower to repay their loan, measured in the smallest unit of the ERC20 currency.\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     *\\n     * @return The amount of the specified ERC20 currency required to pay back this loan, measured in the smallest unit\\n     * of the specified ERC20 currency.\\n     */\\n    function getPayoffAmount(uint32 _loanId) external view virtual returns (uint256);\\n\\n    /**\\n     * @notice This function can be used to view whether a particular nonce for a particular user has already been used,\\n     * either from a successful loan or a cancelled off-chain order.\\n     *\\n     * @param _user - The address of the user. This function works for both lenders and borrowers alike.\\n     * @param  _nonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are referring\\n     * instead to nonces that are used by both the lender and the borrower when they are first signing off-chain\\n     * NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain\\n     * order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or\\n     * the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     *\\n     * @return A bool representing whether or not this nonce has been used for this user.\\n     */\\n    function getWhetherNonceHasBeenUsedForUser(address _user, uint256 _nonce) external view override returns (bool) {\\n        return _nonceHasBeenUsedForUser[_user][_nonce];\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to get the permit associated with the erc20 contract.\\n     *\\n     * @param _erc20 - The address of the erc20 contract.\\n     *\\n     * @return Returns whether the erc20 is permitted\\n     */\\n    function getERC20Permit(address _erc20) public view override returns (bool) {\\n        return erc20Permits[_erc20];\\n    }\\n\\n    /* ****************** */\\n    /* INTERNAL FUNCTIONS */\\n    /* ****************** */\\n\\n    /**\\n     * @dev makes possible to change loan duration and max repayment amount, loan duration even can be extended if\\n     * loan was expired but not liquidated. IMPORTANT: Frontend will have to propt the caller to do an ERC20 approve for\\n     * the fee amount from themselves (borrower/obligation reciept holder) to the lender (promissory note holder)\\n     *\\n     * @param _loanId - The unique identifier for the loan to be renegotiated\\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\\n     * early.\\n     * @param _renegotiationFee Agreed upon fee in loan denomination that borrower pays for the lender and\\n     * the admin for the renegotiation, has to be paid with an ERC20 transfer loanERC20Denomination token,\\n     * uses transfer from, frontend will have to propmt an erc20 approve for this from the borrower to the lender,\\n     * admin fee is calculated by the loan's loanAdminFeeInBasisPoints value\\n     * @param _lenderNonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are\\n     * referring instead to nonces that are used by both the lender and the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     * @param _expiry - The date when the renegotiation offer expires\\n     * @param _lenderSignature - The ECDSA signature of the lender, obtained off-chain ahead of time, signing the\\n     * following combination of parameters:\\n     * - _loanId\\n     * - _newLoanDuration\\n     * - _newMaximumRepaymentAmount\\n     * - _lender\\n     * - _expiry\\n     * - address of this contract\\n     * - chainId\\n     */\\n    function _renegotiateLoan(\\n        uint32 _loanId,\\n        uint32 _newLoanDuration,\\n        uint256 _newMaximumRepaymentAmount,\\n        uint256 _renegotiationFee,\\n        uint256 _lenderNonce,\\n        uint256 _expiry,\\n        bytes memory _lenderSignature\\n    ) internal {\\n        LoanTerms storage loan = loanIdToLoan[_loanId];\\n\\n        (address borrower, address lender) = LoanChecksAndCalculations.renegotiationChecks(\\n            loan,\\n            _loanId,\\n            _newLoanDuration,\\n            _newMaximumRepaymentAmount,\\n            _lenderNonce,\\n            hub\\n        );\\n\\n        _nonceHasBeenUsedForUser[lender][_lenderNonce] = true;\\n\\n        require(\\n            NFTfiSigningUtils.isValidLenderRenegotiationSignature(\\n                _loanId,\\n                _newLoanDuration,\\n                _newMaximumRepaymentAmount,\\n                _renegotiationFee,\\n                Signature({signer: lender, nonce: _lenderNonce, expiry: _expiry, signature: _lenderSignature})\\n            ),\\n            \\\"Renegotiation signature is invalid\\\"\\n        );\\n\\n        uint256 renegotiationAdminFee;\\n        /**\\n         * @notice Transfers fee to the lender immediately\\n         * @dev implements Checks-Effects-Interactions pattern by modifying state only after\\n         * the transfer happened successfully, we also add the nonReentrant modifier to\\n         * the pbulic versions\\n         */\\n        if (_renegotiationFee > 0) {\\n            renegotiationAdminFee = LoanChecksAndCalculations.computeAdminFee(\\n                _renegotiationFee,\\n                loan.loanAdminFeeInBasisPoints\\n            );\\n            // Transfer principal-plus-interest-minus-fees from the caller (always has to be borrower) to lender\\n            IERC20(loan.loanERC20Denomination).safeTransferFrom(\\n                borrower,\\n                lender,\\n                _renegotiationFee - renegotiationAdminFee\\n            );\\n            // Transfer fees from the caller (always has to be borrower) to admins\\n            IERC20(loan.loanERC20Denomination).safeTransferFrom(borrower, owner(), renegotiationAdminFee);\\n        }\\n\\n        loan.loanDuration = _newLoanDuration;\\n        loan.maximumRepaymentAmount = _newMaximumRepaymentAmount;\\n\\n        emit LoanRenegotiated(\\n            _loanId,\\n            borrower,\\n            lender,\\n            _newLoanDuration,\\n            _newMaximumRepaymentAmount,\\n            _renegotiationFee,\\n            renegotiationAdminFee\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfer collateral NFT from borrower to this contract and principal from lender to the borrower and\\n     * registers the new loan through the loan coordinator.\\n     *\\n     * @param _loanType - The type of loan it is being created\\n     * @param _loanTerms - Struct containing the loan's settings\\n     * @param _loanExtras - Struct containing some loan's extra settings, needed to avoid stack too deep\\n     * @param _lender - The address of the lender.\\n     * @param _referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * that there is no referrer.\\n     */\\n    function _createLoan(\\n        bytes32 _loanType,\\n        LoanTerms memory _loanTerms,\\n        LoanExtras memory _loanExtras,\\n        address _borrower,\\n        address _lender,\\n        address _referrer\\n    ) internal returns (uint32) {\\n        // Transfer collateral from borrower to this contract to be held until\\n        // loan completion.\\n        _transferNFT(_loanTerms, _borrower, address(this));\\n\\n        return _createLoanNoNftTransfer(_loanType, _loanTerms, _loanExtras, _borrower, _lender, _referrer);\\n    }\\n\\n    /**\\n     * @dev Transfer principal from lender to the borrower and\\n     * registers the new loan through the loan coordinator.\\n     *\\n     * @param _loanType - The type of loan it is being created\\n     * @param _loanTerms - Struct containing the loan's settings\\n     * @param _loanExtras - Struct containing some loan's extra settings, needed to avoid stack too deep\\n     * @param _lender - The address of the lender.\\n     * @param _referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * that there is no referrer.\\n     */\\n    function _createLoanNoNftTransfer(\\n        bytes32 _loanType,\\n        LoanTerms memory _loanTerms,\\n        LoanExtras memory _loanExtras,\\n        address _borrower,\\n        address _lender,\\n        address _referrer\\n    ) internal returns (uint32 loanId) {\\n        _escrowTokens[_loanTerms.nftCollateralContract][_loanTerms.nftCollateralId] += 1;\\n\\n        uint256 referralfee = LoanChecksAndCalculations.computeReferralFee(\\n            _loanTerms.loanPrincipalAmount,\\n            _loanExtras.referralFeeInBasisPoints,\\n            _referrer\\n        );\\n        uint256 principalAmount = _loanTerms.loanPrincipalAmount - referralfee;\\n        if (referralfee > 0) {\\n            // Transfer the referral fee from lender to referrer.\\n            IERC20(_loanTerms.loanERC20Denomination).safeTransferFrom(_lender, _referrer, referralfee);\\n        }\\n        // Transfer principal from lender to borrower.\\n        IERC20(_loanTerms.loanERC20Denomination).safeTransferFrom(_lender, _borrower, principalAmount);\\n\\n        // Issue an ERC721 promissory note to the lender that gives them the\\n        // right to either the principal-plus-interest or the collateral,\\n        // and an obligation note to the borrower that gives them the\\n        // right to pay back the loan and get the collateral back.\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\\n        loanId = loanCoordinator.registerLoan(_lender, _loanType);\\n\\n        // Add the loan to storage before moving collateral/principal to follow\\n        // the Checks-Effects-Interactions pattern.\\n        loanIdToLoan[loanId] = _loanTerms;\\n        loanIdToLoanExtras[loanId] = _loanExtras;\\n\\n        return loanId;\\n    }\\n\\n    /**\\n     * @dev Transfers several types of NFTs using a wrapper that knows how to handle each case.\\n     *\\n     * @param _loanTerms - Struct containing all the loan's parameters\\n     * @param _sender - Current owner of the NFT\\n     * @param _recipient - Recipient of the transfer\\n     */\\n    function _transferNFT(\\n        LoanTerms memory _loanTerms,\\n        address _sender,\\n        address _recipient\\n    ) internal {\\n        Address.functionDelegateCall(\\n            _loanTerms.nftCollateralWrapper,\\n            abi.encodeWithSelector(\\n                INftWrapper(_loanTerms.nftCollateralWrapper).transferNFT.selector,\\n                _sender,\\n                _recipient,\\n                _loanTerms.nftCollateralContract,\\n                _loanTerms.nftCollateralId\\n            ),\\n            \\\"NFT not successfully transferred\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice This function is called by a anyone to repay a loan. It can be called at any time after the loan has\\n     * begun and before loan expiry.. The caller will pay a pro-rata portion of their interest if the loan is paid off\\n     * early and the loan is pro-rated type, but the complete repayment amount if it is fixed type.\\n     * The the borrower (current owner of the obligation note) will get the collaterl NFT back.\\n     *\\n     * This function is purposefully not pausable in order to prevent an attack where the contract admin's pause the\\n     * contract and hold hostage the NFT's that are still within it.\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     */\\n    function _payBackLoan(\\n        uint32 _loanId,\\n        address _borrower,\\n        address _lender,\\n        LoanTerms memory _loan\\n    ) internal {\\n        // Fetch loan details from storage, but store them in memory for the sake of saving gas.\\n        LoanExtras memory loanExtras = loanIdToLoanExtras[_loanId];\\n\\n        (uint256 adminFee, uint256 payoffAmount) = _payoffAndFee(_loan);\\n\\n        // Transfer principal-plus-interest-minus-fees from the caller to lender\\n        IERC20(_loan.loanERC20Denomination).safeTransferFrom(msg.sender, _lender, payoffAmount);\\n\\n        uint256 revenueShare = LoanChecksAndCalculations.computeRevenueShare(\\n            adminFee,\\n            loanExtras.revenueShareInBasisPoints\\n        );\\n        // PermittedPartners contract doesn't allow to set a revenueShareInBasisPoints for address zero so revenuShare\\n        // > 0 implies that revenueSharePartner ~= address(0), BUT revenueShare can be zero for a partener when the\\n        // adminFee is low\\n        if (revenueShare > 0 && loanExtras.revenueSharePartner != address(0)) {\\n            adminFee -= revenueShare;\\n            // Transfer revenue share from the caller to permitted partner\\n            IERC20(_loan.loanERC20Denomination).safeTransferFrom(\\n                msg.sender,\\n                loanExtras.revenueSharePartner,\\n                revenueShare\\n            );\\n        }\\n        // Transfer fees from the caller to admins\\n        IERC20(_loan.loanERC20Denomination).safeTransferFrom(msg.sender, owner(), adminFee);\\n\\n        // Emit an event with all relevant details from this transaction.\\n        emit LoanRepaid(\\n            _loanId,\\n            _borrower,\\n            _lender,\\n            _loan.loanPrincipalAmount,\\n            _loan.nftCollateralId,\\n            payoffAmount,\\n            adminFee,\\n            revenueShare,\\n            loanExtras.revenueSharePartner, // this could be a non address zero even if revenueShare is 0\\n            _loan.nftCollateralContract,\\n            _loan.loanERC20Denomination\\n        );\\n    }\\n\\n    /**\\n     * @notice A convenience function with shared functionality between `payBackLoan` and `liquidateOverdueLoan`.\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param _nftReceiver - The receiver of the collateral nft. The borrower when `payBackLoan` or the lender when\\n     * `liquidateOverdueLoan`.\\n     * @param _loanTerms - The main Loan Terms struct. This data is saved upon loan creation on loanIdToLoan.\\n     * @param _loanCoordinator - The loan coordinator used when creating the loan.\\n     */\\n    function _resolveLoan(\\n        uint32 _loanId,\\n        address _nftReceiver,\\n        LoanTerms memory _loanTerms,\\n        IDirectLoanCoordinator _loanCoordinator\\n    ) internal {\\n        _resolveLoanNoNftTransfer(_loanId, _loanTerms, _loanCoordinator);\\n        // Transfer collateral from this contract to the lender, since the lender is seizing collateral for an overdue\\n        // loan\\n        _transferNFT(_loanTerms, address(this), _nftReceiver);\\n    }\\n\\n    /**\\n     * @notice Resolving the loan without trasferring the nft to provide a base for the bundle\\n     * break up of the bundled loans\\n     *\\n     * @param _loanId  A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param _loanTerms - The main Loan Terms struct. This data is saved upon loan creation on loanIdToLoan.\\n     * @param _loanCoordinator - The loan coordinator used when creating the loan.\\n     */\\n    function _resolveLoanNoNftTransfer(\\n        uint32 _loanId,\\n        LoanTerms memory _loanTerms,\\n        IDirectLoanCoordinator _loanCoordinator\\n    ) internal {\\n        // Mark loan as liquidated before doing any external transfers to follow the Checks-Effects-Interactions design\\n        // pattern\\n        loanRepaidOrLiquidated[_loanId] = true;\\n\\n        _escrowTokens[_loanTerms.nftCollateralContract][_loanTerms.nftCollateralId] -= 1;\\n\\n        // Destroy the lender's promissory note for this loan and borrower obligation receipt\\n        _loanCoordinator.resolveLoan(_loanId);\\n    }\\n\\n    /**\\n     * @notice This function can be called by admins to change the permitted status of an ERC20 currency. This includes\\n     * both adding an ERC20 currency to the permitted list and removing it.\\n     *\\n     * @param _erc20 - The address of the ERC20 currency whose permit list status changed.\\n     * @param _permit - The new status of whether the currency is permitted or not.\\n     */\\n    function _setERC20Permit(address _erc20, bool _permit) internal {\\n        require(_erc20 != address(0), \\\"erc20 is zero address\\\");\\n\\n        erc20Permits[_erc20] = _permit;\\n\\n        emit ERC20Permit(_erc20, _permit);\\n    }\\n\\n    /**\\n     * @dev Performs some validation checks over loan parameters\\n     *\\n     */\\n    function _loanSanityChecks(LoanData.Offer memory _offer, address _nftWrapper) internal view {\\n        require(getERC20Permit(_offer.loanERC20Denomination), \\\"Currency denomination is not permitted\\\");\\n        require(_nftWrapper != address(0), \\\"NFT collateral contract is not permitted\\\");\\n        require(uint256(_offer.loanDuration) <= maximumLoanDuration, \\\"Loan duration exceeds maximum loan duration\\\");\\n        require(uint256(_offer.loanDuration) != 0, \\\"Loan duration cannot be zero\\\");\\n        require(\\n            _offer.loanAdminFeeInBasisPoints == adminFeeInBasisPoints,\\n            \\\"The admin fee has changed since this order was signed.\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev reads some variable values of a loan for payback functions, created to reduce code repetition\\n     */\\n    function _getPartiesAndData(uint32 _loanId)\\n        internal\\n        view\\n        returns (\\n            address borrower,\\n            address lender,\\n            LoanTerms memory loan,\\n            IDirectLoanCoordinator loanCoordinator\\n        )\\n    {\\n        loanCoordinator = IDirectLoanCoordinator(hub.getContract(LOAN_COORDINATOR));\\n        IDirectLoanCoordinator.Loan memory loanCoordinatorData = loanCoordinator.getLoanData(_loanId);\\n        uint256 smartNftId = loanCoordinatorData.smartNftId;\\n        // Fetch loan details from storage, but store them in memory for the sake of saving gas.\\n        loan = loanIdToLoan[_loanId];\\n        if (loan.borrower != address(0)) {\\n            borrower = loan.borrower;\\n        } else {\\n            // Fetch current owner of loan obligation note.\\n            borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\\n        }\\n        lender = IERC721(loanCoordinator.promissoryNoteToken()).ownerOf(smartNftId);\\n    }\\n\\n    /**\\n     * @dev Creates a `LoanExtras` struct using data sent as the borrower's extra settings.\\n     * This is needed in order to avoid stack too deep issues.\\n     */\\n    function _setupLoanExtras(address _revenueSharePartner, uint16 _referralFeeInBasisPoints)\\n        internal\\n        view\\n        returns (LoanExtras memory)\\n    {\\n        // Save loan details to a struct in memory first, to save on gas if any\\n        // of the below checks fail, and to avoid the \\\"Stack Too Deep\\\" error by\\n        // clumping the parameters together into one struct held in memory.\\n        return\\n            LoanExtras({\\n                revenueSharePartner: _revenueSharePartner,\\n                revenueShareInBasisPoints: LoanChecksAndCalculations.getRevenueSharePercent(_revenueSharePartner, hub),\\n                referralFeeInBasisPoints: _referralFeeInBasisPoints\\n            });\\n    }\\n\\n    /**\\n     * @dev Calculates the payoff amount and admin fee\\n     */\\n    function _payoffAndFee(LoanTerms memory _loanTerms) internal view virtual returns (uint256, uint256);\\n\\n    /**\\n     * @dev Checks that the collateral is a supported contracts and returns what wrapper to use for the loan's NFT\\n     * collateral contract.\\n     *\\n     * @param _nftCollateralContract - The address of the the NFT collateral contract.\\n     *\\n     * @return Address of the NftWrapper to use for the loan's NFT collateral.\\n     */\\n    function _getWrapper(address _nftCollateralContract) internal view returns (address) {\\n        return IPermittedNFTs(hub.getContract(ContractKeys.PERMITTED_NFTS)).getNFTWrapper(_nftCollateralContract);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/utils/ContractKeys.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title ContractKeys\\n * @author NFTfi\\n * @dev Common library for contract keys\\n */\\nlibrary ContractKeys {\\n    bytes32 public constant PERMITTED_ERC20S = bytes32(\\\"PERMITTED_ERC20S\\\");\\n    bytes32 public constant PERMITTED_NFTS = bytes32(\\\"PERMITTED_NFTS\\\");\\n    bytes32 public constant PERMITTED_PARTNERS = bytes32(\\\"PERMITTED_PARTNERS\\\");\\n    bytes32 public constant NFT_TYPE_REGISTRY = bytes32(\\\"NFT_TYPE_REGISTRY\\\");\\n    bytes32 public constant LOAN_REGISTRY = bytes32(\\\"LOAN_REGISTRY\\\");\\n    bytes32 public constant PERMITTED_SNFT_RECEIVER = bytes32(\\\"PERMITTED_SNFT_RECEIVER\\\");\\n    bytes32 public constant PERMITTED_BUNDLE_ERC20S = bytes32(\\\"PERMITTED_BUNDLE_ERC20S\\\");\\n    bytes32 public constant PERMITTED_AIRDROPS = bytes32(\\\"PERMITTED_AIRDROPS\\\");\\n    bytes32 public constant AIRDROP_RECEIVER = bytes32(\\\"AIRDROP_RECEIVER\\\");\\n    bytes32 public constant AIRDROP_FACTORY = bytes32(\\\"AIRDROP_FACTORY\\\");\\n    bytes32 public constant AIRDROP_FLASH_LOAN = bytes32(\\\"AIRDROP_FLASH_LOAN\\\");\\n    bytes32 public constant NFTFI_BUNDLER = bytes32(\\\"NFTFI_BUNDLER\\\");\\n\\n    string public constant AIRDROP_WRAPPER_STRING = \\\"AirdropWrapper\\\";\\n\\n    /**\\n     * @notice Returns the bytes32 representation of a string\\n     * @param _key the string key\\n     * @return id bytes32 representation\\n     */\\n    function getIdFromStringKey(string memory _key) external pure returns (bytes32 id) {\\n        require(bytes(_key).length <= 32, \\\"invalid key\\\");\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := mload(add(_key, 32))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/loans/direct/loanTypes/IDirectLoanBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"./LoanData.sol\\\";\\n\\npragma solidity 0.8.18;\\n\\ninterface IDirectLoanBase {\\n    function maximumLoanDuration() external view returns (uint256);\\n\\n    function adminFeeInBasisPoints() external view returns (uint16);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function LOAN_COORDINATOR() external view returns (bytes32);\\n\\n    function loanIdToLoan(uint32)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint32,\\n            uint16,\\n            uint16,\\n            address,\\n            uint64,\\n            address,\\n            address\\n        );\\n\\n    function loanRepaidOrLiquidated(uint32) external view returns (bool);\\n\\n    function getWhetherNonceHasBeenUsedForUser(address _user, uint256 _nonce) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/external/lp-1/loans/direct/loanTypes/LoanData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title  LoanData\\n * @author NFTfi\\n * @notice An interface containg the main Loan struct shared by Direct Loans types.\\n */\\ninterface LoanData {\\n    /* ********** */\\n    /* DATA TYPES */\\n    /* ********** */\\n\\n    /**\\n     * @notice The main Loan Terms struct. This data is saved upon loan creation.\\n     *\\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * @param loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * @param nftCollateralContract - The address of the the NFT collateral contract.\\n     * @param nftCollateralWrapper - The NFTfi wrapper of the NFT collateral contract.\\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param loanStartTime - The block.timestamp when the loan first began (measured in seconds).\\n     * @param loanDuration - The amount of time (measured in seconds) that can elapse before the lender can liquidate\\n     * the loan and seize the underlying collateral NFT.\\n     * @param loanInterestRateForDurationInBasisPoints - This is the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * @param loanAdminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     * @param borrower\\n     */\\n    struct LoanTerms {\\n        uint256 loanPrincipalAmount;\\n        uint256 maximumRepaymentAmount;\\n        uint256 nftCollateralId;\\n        address loanERC20Denomination;\\n        uint32 loanDuration;\\n        uint16 loanInterestRateForDurationInBasisPoints;\\n        uint16 loanAdminFeeInBasisPoints;\\n        address nftCollateralWrapper;\\n        uint64 loanStartTime;\\n        address nftCollateralContract;\\n        address borrower;\\n    }\\n\\n    /**\\n     * @notice Some extra Loan's settings struct. This data is saved upon loan creation.\\n     * We need this to avoid stack too deep errors.\\n     *\\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\\n     * @param revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\\n     * taken as a revenue share for a t\\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.he partner, at the moment\\n     * the loan is begun.\\n     */\\n    struct LoanExtras {\\n        address revenueSharePartner;\\n        uint16 revenueShareInBasisPoints;\\n        uint16 referralFeeInBasisPoints;\\n    }\\n\\n    /**\\n     * @notice The offer made by the lender. Used as parameter on both acceptOffer (initiated by the borrower) and\\n     * acceptListing (initiated by the lender).\\n     *\\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * @param loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\\n     *  collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always\\n     * have to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * @param nftCollateralContract - The address of the ERC721 contract of the NFT collateral.\\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * this there is no referrer.\\n     * @param loanDuration - The amount of time (measured in seconds) that can elapse before the lender can liquidate\\n     * the loan and seize the underlying collateral NFT.\\n     * @param loanAdminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     */\\n    struct Offer {\\n        uint256 loanPrincipalAmount;\\n        uint256 maximumRepaymentAmount;\\n        uint256 nftCollateralId;\\n        address nftCollateralContract;\\n        uint32 loanDuration;\\n        uint16 loanAdminFeeInBasisPoints;\\n        address loanERC20Denomination;\\n        address referrer;\\n    }\\n\\n    /**\\n     * @notice Signature related params. Used as parameter on both acceptOffer (containing borrower signature) and\\n     * acceptListing (containing lender signature).\\n     *\\n     * @param signer - The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * @param nonce - The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     * @param expiry - Date when the signature expires\\n     * @param signature - The ECDSA signature of the borrower or the lender, obtained off-chain ahead of time, signing\\n     * the following combination of parameters:\\n     * - Borrower\\n     *   - ListingTerms.loanERC20Denomination,\\n     *   - ListingTerms.minLoanPrincipalAmount,\\n     *   - ListingTerms.maxLoanPrincipalAmount,\\n     *   - ListingTerms.nftCollateralContract,\\n     *   - ListingTerms.nftCollateralId,\\n     *   - ListingTerms.revenueSharePartner,\\n     *   - ListingTerms.minLoanDuration,\\n     *   - ListingTerms.maxLoanDuration,\\n     *   - ListingTerms.maxInterestRateForDurationInBasisPoints,\\n     *   - ListingTerms.referralFeeInBasisPoints,\\n     *   - Signature.signer,\\n     *   - Signature.nonce,\\n     *   - Signature.expiry,\\n     *   - address of the loan type contract\\n     *   - chainId\\n     * - Lender:\\n     *   - Offer.loanERC20Denomination\\n     *   - Offer.loanPrincipalAmount\\n     *   - Offer.maximumRepaymentAmount\\n     *   - Offer.nftCollateralContract\\n     *   - Offer.nftCollateralId\\n     *   - Offer.referrer\\n     *   - Offer.loanDuration\\n     *   - Offer.loanAdminFeeInBasisPoints\\n     *   - Signature.signer,\\n     *   - Signature.nonce,\\n     *   - Signature.expiry,\\n     *   - address of the loan type contract\\n     *   - chainId\\n     */\\n    struct Signature {\\n        uint256 nonce;\\n        uint256 expiry;\\n        address signer;\\n        bytes signature;\\n    }\\n\\n    /**\\n     * @notice Some extra parameters that the borrower needs to set when accepting an offer.\\n     *\\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     */\\n    struct BorrowerSettings {\\n        address revenueSharePartner;\\n        uint16 referralFeeInBasisPoints;\\n    }\\n\\n    /**\\n     * @notice Terms the borrower set off-chain and is willing to accept automatically when fulfiled by a lender's\\n     * offer.\\n     *\\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * @param minLoanPrincipalAmount - The minumum sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param maxLoanPrincipalAmount - The  sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * @param nftCollateralContract - The address of the ERC721 contract of the NFT collateral.\\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\\n     * @param minLoanDuration - The minumum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param maxLoanDuration - The maximum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param maxInterestRateForDurationInBasisPoints - This is maximum the interest rate (measured in basis points,\\n     * e.g. hundreths of a percent) for the loan.\\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     */\\n    struct ListingTerms {\\n        uint256 minLoanPrincipalAmount;\\n        uint256 maxLoanPrincipalAmount;\\n        uint256 nftCollateralId;\\n        address nftCollateralContract;\\n        uint32 minLoanDuration;\\n        uint32 maxLoanDuration;\\n        uint16 maxInterestRateForDurationInBasisPoints;\\n        uint16 referralFeeInBasisPoints;\\n        address revenueSharePartner;\\n        address loanERC20Denomination;\\n    }\\n}\"\r\n    },\r\n    \"contracts/external/lp-1/loans/direct/loanTypes/LoanChecksAndCalculations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./IDirectLoanBase.sol\\\";\\nimport \\\"./LoanData.sol\\\";\\nimport \\\"../../../interfaces/IDirectLoanCoordinator.sol\\\";\\nimport \\\"../../../utils/ContractKeys.sol\\\";\\nimport \\\"../../../interfaces/INftfiHub.sol\\\";\\nimport \\\"../../../interfaces/IPermittedPartners.sol\\\";\\nimport \\\"../../../interfaces/IPermittedERC20s.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title  LoanChecksAndCalculations\\n * @author NFTfi\\n * @notice Helper library for LoanBase\\n */\\nlibrary LoanChecksAndCalculations {\\n    uint16 private constant HUNDRED_PERCENT = 10000;\\n\\n    /**\\n     * @dev Function that performs some validation checks before trying to repay a loan\\n     *\\n     * @param _loanId - The id of the loan being repaid\\n     */\\n    function payBackChecks(uint32 _loanId, INftfiHub _hub) external view {\\n        checkLoanIdValidity(_loanId, _hub);\\n        // Sanity check that payBackLoan() and liquidateOverdueLoan() have never been called on this loanId.\\n        // Depending on how the rest of the code turns out, this check may be unnecessary.\\n        require(!IDirectLoanBase(address(this)).loanRepaidOrLiquidated(_loanId), \\\"Loan already repaid/liquidated\\\");\\n\\n        // Fetch loan details from storage, but store them in memory for the sake of saving gas.\\n        (, , , , uint32 loanDuration, , , , uint64 loanStartTime, , ) = IDirectLoanBase(address(this)).loanIdToLoan(\\n            _loanId\\n        );\\n\\n        // When a loan exceeds the loan term, it is expired. At this stage the Lender can call Liquidate Loan to resolve\\n        // the loan.\\n        require(block.timestamp <= (uint256(loanStartTime) + uint256(loanDuration)), \\\"Loan is expired\\\");\\n    }\\n\\n    function checkLoanIdValidity(uint32 _loanId, INftfiHub _hub) public view {\\n        require(\\n            IDirectLoanCoordinator(_hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())).isValidLoanId(\\n                _loanId,\\n                address(this)\\n            ),\\n            \\\"invalid loanId\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Function that the partner is permitted and returns its shared percent.\\n     *\\n     * @param _revenueSharePartner - Partner's address\\n     *\\n     * @return The revenue share percent for the partner.\\n     */\\n    function getRevenueSharePercent(address _revenueSharePartner, INftfiHub _hub) external view returns (uint16) {\\n        // return soon if no partner is set to avoid a public call\\n        if (_revenueSharePartner == address(0)) {\\n            return 0;\\n        }\\n\\n        uint16 revenueSharePercent = IPermittedPartners(_hub.getContract(ContractKeys.PERMITTED_PARTNERS))\\n        .getPartnerPermit(_revenueSharePartner);\\n\\n        return revenueSharePercent;\\n    }\\n\\n    /**\\n     * @dev Performs some validation checks before trying to renegotiate a loan.\\n     * Needed to avoid stack too deep.\\n     *\\n     * @param _loan - The main Loan Terms struct.\\n     * @param _loanId - The unique identifier for the loan to be renegotiated\\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\\n     * early.\\n     * @param _lenderNonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are\\n     * referring instead to nonces that are used by both the lender and the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     * @return Borrower and Lender addresses\\n     */\\n    function renegotiationChecks(\\n        LoanData.LoanTerms memory _loan,\\n        uint32 _loanId,\\n        uint32 _newLoanDuration,\\n        uint256 _newMaximumRepaymentAmount,\\n        uint256 _lenderNonce,\\n        INftfiHub _hub\\n    ) external view returns (address, address) {\\n        checkLoanIdValidity(_loanId, _hub);\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(\\n            _hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())\\n        );\\n        uint256 smartNftId = loanCoordinator.getLoanData(_loanId).smartNftId;\\n\\n        address borrower;\\n\\n        if (_loan.borrower != address(0)) {\\n            borrower = _loan.borrower;\\n        } else {\\n            borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\\n        }\\n\\n        require(msg.sender == borrower, \\\"Only borrower can initiate\\\");\\n        require(block.timestamp <= (uint256(_loan.loanStartTime) + _newLoanDuration), \\\"New duration already expired\\\");\\n        require(\\n            uint256(_newLoanDuration) <= IDirectLoanBase(address(this)).maximumLoanDuration(),\\n            \\\"New duration exceeds maximum loan duration\\\"\\n        );\\n        require(!IDirectLoanBase(address(this)).loanRepaidOrLiquidated(_loanId), \\\"Loan already repaid/liquidated\\\");\\n        require(\\n            _newMaximumRepaymentAmount >= _loan.loanPrincipalAmount,\\n            \\\"Negative interest rate loans are not allowed.\\\"\\n        );\\n\\n        // Fetch current owner of loan promissory note.\\n        address lender = IERC721(loanCoordinator.promissoryNoteToken()).ownerOf(smartNftId);\\n\\n        require(\\n            !IDirectLoanBase(address(this)).getWhetherNonceHasBeenUsedForUser(lender, _lenderNonce),\\n            \\\"Lender nonce invalid\\\"\\n        );\\n\\n        return (borrower, lender);\\n    }\\n\\n    /**\\n     * @dev Performs some validation checks over loan parameters when accepting a listing\\n     *\\n     */\\n    function bindingTermsSanityChecks(LoanData.ListingTerms memory _listingTerms, LoanData.Offer memory _offer)\\n        external\\n        pure\\n    {\\n        // offer vs listing validations\\n        require(_offer.loanERC20Denomination == _listingTerms.loanERC20Denomination, \\\"Invalid loanERC20Denomination\\\");\\n        require(\\n            _offer.loanPrincipalAmount >= _listingTerms.minLoanPrincipalAmount &&\\n                _offer.loanPrincipalAmount <= _listingTerms.maxLoanPrincipalAmount,\\n            \\\"Invalid loanPrincipalAmount\\\"\\n        );\\n        uint256 maxRepaymentLimit = _offer.loanPrincipalAmount +\\n            (_offer.loanPrincipalAmount * _listingTerms.maxInterestRateForDurationInBasisPoints) /\\n            HUNDRED_PERCENT;\\n        require(_offer.maximumRepaymentAmount <= maxRepaymentLimit, \\\"maxInterestRateForDurationInBasisPoints violated\\\");\\n\\n        require(\\n            _offer.loanDuration >= _listingTerms.minLoanDuration &&\\n                _offer.loanDuration <= _listingTerms.maxLoanDuration,\\n            \\\"Invalid loanDuration\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice A convenience function computing the revenue share taken from the admin fee to transferr to the permitted\\n     * partner.\\n     *\\n     * @param _adminFee - The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that is due\\n     * as an admin fee.\\n     * @param _revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\\n     * taken as a revenue share for a the partner, at the moment the loan is begun.\\n     *\\n     * @return The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that should be sent to\\n     * the `revenueSharePartner`.\\n     */\\n    function computeRevenueShare(uint256 _adminFee, uint256 _revenueShareInBasisPoints)\\n        external\\n        pure\\n        returns (uint256)\\n    {\\n        return (_adminFee * _revenueShareInBasisPoints) / HUNDRED_PERCENT;\\n    }\\n\\n    /**\\n     * @notice A convenience function computing the adminFee taken from a specified quantity of interest.\\n     *\\n     * @param _interestDue - The amount of interest due, measured in the smallest quantity of the ERC20 currency being\\n     * used to pay the interest.\\n     * @param _adminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be taken\\n     * as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     *\\n     * @return The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that is due as an admin\\n     * fee.\\n     */\\n    function computeAdminFee(uint256 _interestDue, uint256 _adminFeeInBasisPoints) external pure returns (uint256) {\\n        return (_interestDue * _adminFeeInBasisPoints) / HUNDRED_PERCENT;\\n    }\\n\\n    /**\\n     * @notice A convenience function computing the referral fee taken from the loan principal amount to transferr to\\n     * the referrer.\\n     *\\n     * @param _loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * @param _referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     * @param _referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * that there is no referrer.\\n     *\\n     * @return The quantity of ERC20 currency (measured in smalled units of that ERC20 currency) that should be sent to\\n     * the referrer.\\n     */\\n    function computeReferralFee(\\n        uint256 _loanPrincipalAmount,\\n        uint256 _referralFeeInBasisPoints,\\n        address _referrer\\n    ) external pure returns (uint256) {\\n        if (_referralFeeInBasisPoints == 0 || _referrer == address(0)) {\\n            return 0;\\n        }\\n        return (_loanPrincipalAmount * _referralFeeInBasisPoints) / HUNDRED_PERCENT;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/loans/direct/loanTypes/LoanAirdropUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./IDirectLoanBase.sol\\\";\\nimport \\\"./LoanData.sol\\\";\\nimport \\\"../../../interfaces/IDirectLoanCoordinator.sol\\\";\\nimport \\\"../../../utils/ContractKeys.sol\\\";\\nimport \\\"../../../interfaces/INftfiHub.sol\\\";\\nimport \\\"../../../interfaces/IPermittedPartners.sol\\\";\\nimport \\\"../../../interfaces/IPermittedERC20s.sol\\\";\\nimport \\\"../../../interfaces/IAirdropFlashLoan.sol\\\";\\nimport \\\"../../../interfaces/INftWrapper.sol\\\";\\nimport \\\"../../../airdrop/IAirdropReceiverFactory.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title  LoanAirdropUtils\\n * @author NFTfi\\n * @notice Helper library for LoanBase\\n */\\nlibrary LoanAirdropUtils {\\n    /**\\n     * @notice This event is fired whenever a flashloan is initiated to pull an airdrop\\n     *\\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param  borrower - The address of the borrower.\\n     * @param  nftCollateralId - The ID within the AirdropReceiver for the NFT being used as collateral for this\\n     * loan.\\n     * @param  nftCollateralContract - The ERC721 contract of the NFT collateral\\n     * @param target - address of the airdropping contract\\n     * @param data - function selector to be called\\n     */\\n    event AirdropPulledFlashloan(\\n        uint256 indexed loanId,\\n        address indexed borrower,\\n        uint256 nftCollateralId,\\n        address nftCollateralContract,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @notice This event is fired whenever the collateral gets wrapped in an airdrop receiver\\n     *\\n     * @param  loanId - A unique identifier for this particular loan, sourced from the Loan Coordinator.\\n     * @param  borrower - The address of the borrower.\\n     * @param  nftCollateralId - The ID within the AirdropReceiver for the NFT being used as collateral for this\\n     * loan.\\n     * @param  nftCollateralContract - The contract of the NFT collateral\\n     * @param receiverId - id of the created AirdropReceiver, takes the place of nftCollateralId on the loan\\n     * @param receiverInstance - address of the created AirdropReceiver\\n     */\\n    event CollateralWrapped(\\n        uint256 indexed loanId,\\n        address indexed borrower,\\n        uint256 nftCollateralId,\\n        address nftCollateralContract,\\n        uint256 receiverId,\\n        address receiverInstance\\n    );\\n\\n    function pullAirdrop(\\n        uint32 _loanId,\\n        LoanData.LoanTerms memory _loan,\\n        address _target,\\n        bytes calldata _data,\\n        address _nftAirdrop,\\n        uint256 _nftAirdropId,\\n        bool _is1155,\\n        uint256 _nftAirdropAmount,\\n        INftfiHub _hub\\n    ) external {\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(\\n            _hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())\\n        );\\n\\n        address borrower;\\n\\n        // scoped to aviod stack too deep\\n        {\\n            IDirectLoanCoordinator.Loan memory loanCoordinatorData = loanCoordinator.getLoanData(_loanId);\\n            uint256 smartNftId = loanCoordinatorData.smartNftId;\\n            if (_loan.borrower != address(0)) {\\n                borrower = _loan.borrower;\\n            } else {\\n                borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\\n            }\\n        }\\n\\n        require(msg.sender == borrower, \\\"Only borrower can airdrop\\\");\\n\\n        {\\n            IAirdropFlashLoan airdropFlashLoan = IAirdropFlashLoan(_hub.getContract(ContractKeys.AIRDROP_FLASH_LOAN));\\n\\n            _transferNFT(_loan, address(this), address(airdropFlashLoan));\\n\\n            airdropFlashLoan.pullAirdrop(\\n                _loan.nftCollateralContract,\\n                _loan.nftCollateralId,\\n                _loan.nftCollateralWrapper,\\n                _target,\\n                _data,\\n                _nftAirdrop,\\n                _nftAirdropId,\\n                _is1155,\\n                _nftAirdropAmount,\\n                borrower\\n            );\\n        }\\n\\n        // revert if the collateral hasn't been transferred back before it ends\\n        require(\\n            INftWrapper(_loan.nftCollateralWrapper).isOwner(\\n                address(this),\\n                _loan.nftCollateralContract,\\n                _loan.nftCollateralId\\n            ),\\n            \\\"Collateral should be returned\\\"\\n        );\\n\\n        emit AirdropPulledFlashloan(\\n            _loanId,\\n            borrower,\\n            _loan.nftCollateralId,\\n            _loan.nftCollateralContract,\\n            _target,\\n            _data\\n        );\\n    }\\n\\n    function wrapCollateral(\\n        uint32 _loanId,\\n        LoanData.LoanTerms storage _loan,\\n        INftfiHub _hub\\n    ) external returns (address instance, uint256 receiverId) {\\n        IDirectLoanCoordinator loanCoordinator = IDirectLoanCoordinator(\\n            _hub.getContract(IDirectLoanBase(address(this)).LOAN_COORDINATOR())\\n        );\\n        // Fetch the current lender of the promissory note corresponding to this overdue loan.\\n        IDirectLoanCoordinator.Loan memory loanCoordinatorData = loanCoordinator.getLoanData(_loanId);\\n        uint256 smartNftId = loanCoordinatorData.smartNftId;\\n\\n        address borrower;\\n\\n        if (_loan.borrower != address(0)) {\\n            borrower = _loan.borrower;\\n        } else {\\n            borrower = IERC721(loanCoordinator.obligationReceiptToken()).ownerOf(smartNftId);\\n        }\\n\\n        require(msg.sender == borrower, \\\"Only borrower can wrapp\\\");\\n\\n        IAirdropReceiverFactory factory = IAirdropReceiverFactory(_hub.getContract(ContractKeys.AIRDROP_FACTORY));\\n        (instance, receiverId) = factory.createAirdropReceiver(address(this));\\n\\n        // transfer collateral to airdrop receiver wrapper\\n        _transferNFTtoAirdropReceiver(_loan, instance, borrower);\\n\\n        emit CollateralWrapped(\\n            _loanId,\\n            borrower,\\n            _loan.nftCollateralId,\\n            _loan.nftCollateralContract,\\n            receiverId,\\n            instance\\n        );\\n\\n        // set the receiver as the new collateral\\n        _loan.nftCollateralContract = instance;\\n        _loan.nftCollateralId = receiverId;\\n    }\\n\\n    /**\\n     * @dev Transfers several types of NFTs using a wrapper that knows how to handle each case.\\n     *\\n     * @param _loan -\\n     * @param _sender - Current owner of the NFT\\n     * @param _recipient - Recipient of the transfer\\n     */\\n    function _transferNFT(\\n        LoanData.LoanTerms memory _loan,\\n        address _sender,\\n        address _recipient\\n    ) internal {\\n        Address.functionDelegateCall(\\n            _loan.nftCollateralWrapper,\\n            abi.encodeWithSelector(\\n                INftWrapper(_loan.nftCollateralWrapper).transferNFT.selector,\\n                _sender,\\n                _recipient,\\n                _loan.nftCollateralContract,\\n                _loan.nftCollateralId\\n            ),\\n            \\\"NFT not successfully transferred\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfers several types of NFTs to an airdrop receiver with an airdrop beneficiary\\n     * address attached as supplementing data using a wrapper that knows how to handle each case.\\n     *\\n     * @param _loan -\\n     * @param _airdropReceiverInstance - Recipient of the transfer\\n     * @param _airdropBeneficiary - Beneficiary of the future airdops\\n     */\\n    function _transferNFTtoAirdropReceiver(\\n        LoanData.LoanTerms memory _loan,\\n        address _airdropReceiverInstance,\\n        address _airdropBeneficiary\\n    ) internal {\\n        Address.functionDelegateCall(\\n            _loan.nftCollateralWrapper,\\n            abi.encodeWithSelector(\\n                INftWrapper(_loan.nftCollateralWrapper).wrapAirdropReceiver.selector,\\n                _airdropReceiverInstance,\\n                _loan.nftCollateralContract,\\n                _loan.nftCollateralId,\\n                _airdropBeneficiary\\n            ),\\n            \\\"NFT was not successfully migrated\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/loans/BaseLoan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title  BaseLoan\\n * @author NFTfi\\n * @dev Implements base functionalities common to all Loan types.\\n * Mostly related to governance and security.\\n */\\nabstract contract BaseLoan is Ownable, Pausable, ReentrancyGuard {\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @notice Sets the admin of the contract.\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     */\\n    constructor(address _admin) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /* ********* */\\n    /* FUNCTIONS */\\n    /* ********* */\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - Only the owner can call this method.\\n     * - The contract must not be paused.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - Only the owner can call this method.\\n     * - The contract must be paused.\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/utils/NftReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\n/**\\n * @title NftReceiver\\n * @author NFTfi\\n * @dev Base contract with capabilities for receiving ERC1155 and ERC721 tokens\\n */\\nabstract contract NftReceiver is IERC1155Receiver, ERC721Holder {\\n    /**\\n     *  @dev Handles the receipt of a single ERC1155 token type. This function is called at the end of a\\n     * `safeTransferFrom` after the balance has been updated.\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if allowed\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     *  @dev Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a\\n     * `safeBatchTransferFrom` after the balances have been updated.\\n     *  @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual override returns (bytes4) {\\n        revert(\\\"ERC1155 batch not supported\\\");\\n    }\\n\\n    /**\\n     * @dev Checks whether this contract implements the interface defined by `interfaceId`.\\n     * @param _interfaceId Id of the interface\\n     * @return true if this contract implements the interface\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IERC1155Receiver).interfaceId ||\\n            _interfaceId == type(IERC721Receiver).interfaceId ||\\n            _interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/utils/NFTfiSigningUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../interfaces/IBundleBuilder.sol\\\";\\nimport \\\"../loans/direct/loanTypes/LoanData.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\n/**\\n * @title  NFTfiSigningUtils\\n * @author NFTfi\\n * @notice Helper contract for NFTfi. This contract manages verifying signatures from off-chain NFTfi orders.\\n * Based on the version of this same contract used on NFTfi V1\\n */\\nlibrary NFTfiSigningUtils {\\n    /* ********* */\\n    /* FUNCTIONS */\\n    /* ********* */\\n\\n    /**\\n     * @dev This function gets the current chain ID.\\n     */\\n    function getChainID() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * @notice This function is when the lender accepts a borrower's binding listing terms, to validate the lender's\\n     * signature that the borrower provided off-chain to verify that it did indeed made such listing.\\n     *\\n     * @param _listingTerms - The listing terms struct containing:\\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * - minLoanPrincipalAmount: The minumum sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maxLoanPrincipalAmount: The  sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * - revenueSharePartner: The address of the partner that will receive the revenue share.\\n     * - minLoanDuration: The minumum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * - maxLoanDuration: The maximum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * - maxInterestRateForDurationInBasisPoints: This is maximum the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * - referralFeeInBasisPoints: The percent (measured in basis points) of the loan principal amount that will be\\n     * taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     * @param _signature - The offer struct containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     *   - Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     * - expiry: Date when the signature expires\\n     * - signature: The ECDSA signature of the borrower, obtained off-chain ahead of time, signing the following\\n     * combination of parameters:\\n     *   - listingTerms.loanERC20Denomination,\\n     *   - listingTerms.minLoanPrincipalAmount,\\n     *   - listingTerms.maxLoanPrincipalAmount,\\n     *   - listingTerms.nftCollateralContract,\\n     *   - listingTerms.nftCollateralId,\\n     *   - listingTerms.revenueSharePartner,\\n     *   - listingTerms.minLoanDuration,\\n     *   - listingTerms.maxLoanDuration,\\n     *   - listingTerms.maxInterestRateForDurationInBasisPoints,\\n     *   - listingTerms.referralFeeInBasisPoints,\\n     *   - signature.signer,\\n     *   - signature.nonce,\\n     *   - signature.expiry,\\n     *   - address of this contract\\n     *   - chainId\\n     */\\n    function isValidBorrowerSignature(LoanData.ListingTerms memory _listingTerms, LoanData.Signature memory _signature)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return isValidBorrowerSignature(_listingTerms, _signature, address(this));\\n    }\\n\\n    /**\\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\\n     *\\n     */\\n    function isValidBorrowerSignature(\\n        LoanData.ListingTerms memory _listingTerms,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) public view returns (bool) {\\n        require(block.timestamp <= _signature.expiry, \\\"Borrower Signature has expired\\\");\\n        require(_loanContract != address(0), \\\"Loan is zero address\\\");\\n        if (_signature.signer == address(0)) {\\n            return false;\\n        } else {\\n            bytes32 message = keccak256(\\n                abi.encodePacked(\\n                    getEncodedListing(_listingTerms),\\n                    getEncodedSignature(_signature),\\n                    _loanContract,\\n                    getChainID()\\n                )\\n            );\\n\\n            return\\n                SignatureChecker.isValidSignatureNow(\\n                    _signature.signer,\\n                    ECDSA.toEthSignedMessageHash(message),\\n                    _signature.signature\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice This function is when the lender accepts a borrower's binding listing terms, to validate the lender's\\n     * signature that the borrower provided off-chain to verify that it did indeed made such listing.\\n     *\\n     * @param _listingTerms - The listing terms struct containing:\\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * - minLoanPrincipalAmount: The minumum sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maxLoanPrincipalAmount: The  sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * - revenueSharePartner: The address of the partner that will receive the revenue share.\\n     * - minLoanDuration: The minumum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * - maxLoanDuration: The maximum amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * - maxInterestRateForDurationInBasisPoints: This is maximum the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * - referralFeeInBasisPoints: The percent (measured in basis points) of the loan principal amount that will be\\n     * taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\\n     * @param _bundleElements - the lists of erc721-20-1155 tokens that are to be bundled\\n     * @param _signature - The offer struct containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     *   - Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     * - expiry: Date when the signature expires\\n     * - signature: The ECDSA signature of the borrower, obtained off-chain ahead of time, signing the following\\n     * combination of parameters:\\n     *   - listingTerms.loanERC20Denomination,\\n     *   - listingTerms.minLoanPrincipalAmount,\\n     *   - listingTerms.maxLoanPrincipalAmount,\\n     *   - listingTerms.nftCollateralContract,\\n     *   - listingTerms.nftCollateralId,\\n     *   - listingTerms.revenueSharePartner,\\n     *   - listingTerms.minLoanDuration,\\n     *   - listingTerms.maxLoanDuration,\\n     *   - listingTerms.maxInterestRateForDurationInBasisPoints,\\n     *   - listingTerms.referralFeeInBasisPoints,\\n     *   - bundleElements\\n     *   - signature.signer,\\n     *   - signature.nonce,\\n     *   - signature.expiry,\\n     *   - address of this contract\\n     *   - chainId\\n     */\\n    function isValidBorrowerSignatureBundle(\\n        LoanData.ListingTerms memory _listingTerms,\\n        IBundleBuilder.BundleElements memory _bundleElements,\\n        LoanData.Signature memory _signature\\n    ) external view returns (bool) {\\n        return isValidBorrowerSignatureBundle(_listingTerms, _bundleElements, _signature, address(this));\\n    }\\n\\n    /**\\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\\n     *\\n     */\\n    function isValidBorrowerSignatureBundle(\\n        LoanData.ListingTerms memory _listingTerms,\\n        IBundleBuilder.BundleElements memory _bundleElements,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) public view returns (bool) {\\n        require(block.timestamp <= _signature.expiry, \\\"Borrower Signature has expired\\\");\\n        require(_loanContract != address(0), \\\"Loan is zero address\\\");\\n        if (_signature.signer == address(0)) {\\n            return false;\\n        } else {\\n            bytes32 message = keccak256(\\n                abi.encodePacked(\\n                    getEncodedListing(_listingTerms),\\n                    abi.encode(_bundleElements),\\n                    getEncodedSignature(_signature),\\n                    _loanContract,\\n                    getChainID()\\n                )\\n            );\\n\\n            return\\n                SignatureChecker.isValidSignatureNow(\\n                    _signature.signer,\\n                    ECDSA.toEthSignedMessageHash(message),\\n                    _signature.signature\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice This function is when the borrower accepts a lender's offer, to validate the lender's signature that the\\n     * lender provided off-chain to verify that it did indeed made such offer.\\n     *\\n     * @param _offer - The offer struct containing:\\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * this there is no referrer.\\n     * - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the\\n     * loan and seize the underlying collateral NFT.\\n     * - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     * @param _signature - The signature structure containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     *   - Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     * - expiry: Date when the signature expires\\n     * - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following\\n     * combination of parameters:\\n     *   - offer.loanERC20Denomination\\n     *   - offer.loanPrincipalAmount\\n     *   - offer.maximumRepaymentAmount\\n     *   - offer.nftCollateralContract\\n     *   - offer.nftCollateralId\\n     *   - offer.referrer\\n     *   - offer.loanDuration\\n     *   - offer.loanAdminFeeInBasisPoints\\n     *   - signature.signer,\\n     *   - signature.nonce,\\n     *   - signature.expiry,\\n     *   - address of this contract\\n     *   - chainId\\n     */\\n    function isValidLenderSignature(LoanData.Offer memory _offer, LoanData.Signature memory _signature)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return isValidLenderSignature(_offer, _signature, address(this));\\n    }\\n\\n    /**\\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\\n     *\\n     */\\n    function isValidLenderSignature(\\n        LoanData.Offer memory _offer,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) public view returns (bool) {\\n        require(block.timestamp <= _signature.expiry, \\\"Lender Signature has expired\\\");\\n        require(_loanContract != address(0), \\\"Loan is zero address\\\");\\n        if (_signature.signer == address(0)) {\\n            return false;\\n        } else {\\n            bytes32 message = keccak256(\\n                abi.encodePacked(getEncodedOffer(_offer), getEncodedSignature(_signature), _loanContract, getChainID())\\n            );\\n\\n            return\\n                SignatureChecker.isValidSignatureNow(\\n                    _signature.signer,\\n                    ECDSA.toEthSignedMessageHash(message),\\n                    _signature.signature\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice This function is when the borrower accepts a lender's offer, to validate the lender's signature that the\\n     * lender provided off-chain to verify that it did indeed made such offer.\\n     *\\n     * @param _offer - The offer struct containing:\\n     * - loanERC20Denomination: The address of the ERC20 contract of the currency being used as principal/interest\\n     * for this loan.\\n     * - loanPrincipalAmount: The original sum of money transferred from lender to borrower at the beginning of\\n     * the loan, measured in loanERC20Denomination's smallest units.\\n     * - maximumRepaymentAmount: The maximum amount of money that the borrower would be required to retrieve their\\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\\n     * - nftCollateralContract: The address of the ERC721 contract of the NFT collateral.\\n     * - nftCollateralId: The ID within the NFTCollateralContract for the NFT being used as collateral for this\\n     * loan. The NFT is stored within this contract during the duration of the loan.\\n     * - referrer: The address of the referrer who found the lender matching the listing, Zero address to signal\\n     * this there is no referrer.\\n     * - loanDuration: The amount of time (measured in seconds) that can elapse before the lender can liquidate the\\n     * loan and seize the underlying collateral NFT.\\n     * - loanInterestRateForDurationInBasisPoints: This is the interest rate (measured in basis points, e.g.\\n     * hundreths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\\n     * is irrelevant so it should be set to 0.\\n     * - loanAdminFeeInBasisPoints: The percent (measured in basis points) of the interest earned that will be\\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\\n     * earned.\\n     * @param _bundleElements - the lists of erc721-20-1155 tokens that are to be bundled\\n     * @param _signature - The signature structure containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     *   - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     *   - Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitmentBeforeLoanHasBegun(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     * - expiry: Date when the signature expires\\n     * - signature: The ECDSA signature of the lender, obtained off-chain ahead of time, signing the following\\n     * combination of parameters:\\n     *   - offer.loanERC20Denomination\\n     *   - offer.loanPrincipalAmount\\n     *   - offer.maximumRepaymentAmount\\n     *   - offer.nftCollateralContract\\n     *   - offer.nftCollateralId\\n     *   - offer.referrer\\n     *   - offer.loanDuration\\n     *   - offer.loanAdminFeeInBasisPoints\\n     *   - bundleElements\\n     *   - signature.signer,\\n     *   - signature.nonce,\\n     *   - signature.expiry,\\n     *   - address of this contract\\n     *   - chainId\\n     */\\n    function isValidLenderSignatureBundle(\\n        LoanData.Offer memory _offer,\\n        IBundleBuilder.BundleElements memory _bundleElements,\\n        LoanData.Signature memory _signature\\n    ) external view returns (bool) {\\n        return isValidLenderSignatureBundle(_offer, _bundleElements, _signature, address(this));\\n    }\\n\\n    /**\\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\\n     *\\n     */\\n    function isValidLenderSignatureBundle(\\n        LoanData.Offer memory _offer,\\n        IBundleBuilder.BundleElements memory _bundleElements,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) public view returns (bool) {\\n        require(block.timestamp <= _signature.expiry, \\\"Lender Signature has expired\\\");\\n        require(_loanContract != address(0), \\\"Loan is zero address\\\");\\n        if (_signature.signer == address(0)) {\\n            return false;\\n        } else {\\n            bytes32 message = keccak256(\\n                abi.encodePacked(\\n                    getEncodedOffer(_offer),\\n                    abi.encode(_bundleElements),\\n                    getEncodedSignature(_signature),\\n                    _loanContract,\\n                    getChainID()\\n                )\\n            );\\n\\n            return\\n                SignatureChecker.isValidSignatureNow(\\n                    _signature.signer,\\n                    ECDSA.toEthSignedMessageHash(message),\\n                    _signature.signature\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice This function is called in renegotiateLoan() to validate the lender's signature that the lender provided\\n     * off-chain to verify that they did indeed want to agree to this loan renegotiation according to these terms.\\n     *\\n     * @param _loanId - The unique identifier for the loan to be renegotiated\\n     * @param _newLoanDuration - The new amount of time (measured in seconds) that can elapse before the lender can\\n     * liquidate the loan and seize the underlying collateral NFT.\\n     * @param _newMaximumRepaymentAmount - The new maximum amount of money that the borrower would be required to\\n     * retrieve their collateral, measured in the smallest units of the ERC20 currency used for the loan. The\\n     * borrower will always have to pay this amount to retrieve their collateral, regardless of whether they repay\\n     * early.\\n     * @param _renegotiationFee Agreed upon fee in ether that borrower pays for the lender for the renegitiation\\n     * @param _signature - The signature structure containing:\\n     * - signer: The address of the signer. The borrower for `acceptOffer` the lender for `acceptListing`.\\n     * - nonce: The nonce referred here is not the same as an Ethereum account's nonce.\\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\\n     * off-chain order. Each nonce can be used at most once per\u00a0user within NFTfi, regardless of whether they are the\\n     * lender or the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     * - expiry - The date when the renegotiation offer expires\\n     * - lenderSignature - The ECDSA signature of the lender, obtained off-chain ahead of time, signing the\\n     * following combination of parameters:\\n     * - _loanId\\n     * - _newLoanDuration\\n     * - _newMaximumRepaymentAmount\\n     * - _lender\\n     * - _lenderNonce\\n     * - _expiry\\n     * - address of this contract\\n     * - chainId\\n     */\\n    function isValidLenderRenegotiationSignature(\\n        uint256 _loanId,\\n        uint32 _newLoanDuration,\\n        uint256 _newMaximumRepaymentAmount,\\n        uint256 _renegotiationFee,\\n        LoanData.Signature memory _signature\\n    ) external view returns (bool) {\\n        return\\n            isValidLenderRenegotiationSignature(\\n                _loanId,\\n                _newLoanDuration,\\n                _newMaximumRepaymentAmount,\\n                _renegotiationFee,\\n                _signature,\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev This function overload the previous function to allow the caller to specify the address of the contract\\n     *\\n     */\\n    function isValidLenderRenegotiationSignature(\\n        uint256 _loanId,\\n        uint32 _newLoanDuration,\\n        uint256 _newMaximumRepaymentAmount,\\n        uint256 _renegotiationFee,\\n        LoanData.Signature memory _signature,\\n        address _loanContract\\n    ) public view returns (bool) {\\n        require(block.timestamp <= _signature.expiry, \\\"Renegotiation Signature has expired\\\");\\n        require(_loanContract != address(0), \\\"Loan is zero address\\\");\\n        if (_signature.signer == address(0)) {\\n            return false;\\n        } else {\\n            bytes32 message = keccak256(\\n                abi.encodePacked(\\n                    _loanId,\\n                    _newLoanDuration,\\n                    _newMaximumRepaymentAmount,\\n                    _renegotiationFee,\\n                    getEncodedSignature(_signature),\\n                    _loanContract,\\n                    getChainID()\\n                )\\n            );\\n\\n            return\\n                SignatureChecker.isValidSignatureNow(\\n                    _signature.signer,\\n                    ECDSA.toEthSignedMessageHash(message),\\n                    _signature.signature\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @dev We need this to avoid stack too deep errors.\\n     */\\n    function getEncodedListing(LoanData.ListingTerms memory _listingTerms) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _listingTerms.loanERC20Denomination,\\n                _listingTerms.minLoanPrincipalAmount,\\n                _listingTerms.maxLoanPrincipalAmount,\\n                _listingTerms.nftCollateralContract,\\n                _listingTerms.nftCollateralId,\\n                _listingTerms.revenueSharePartner,\\n                _listingTerms.minLoanDuration,\\n                _listingTerms.maxLoanDuration,\\n                _listingTerms.maxInterestRateForDurationInBasisPoints,\\n                _listingTerms.referralFeeInBasisPoints\\n            );\\n    }\\n\\n    /**\\n     * @dev We need this to avoid stack too deep errors.\\n     */\\n    function getEncodedOffer(LoanData.Offer memory _offer) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _offer.loanERC20Denomination,\\n                _offer.loanPrincipalAmount,\\n                _offer.maximumRepaymentAmount,\\n                _offer.nftCollateralContract,\\n                _offer.nftCollateralId,\\n                _offer.referrer,\\n                _offer.loanDuration,\\n                _offer.loanAdminFeeInBasisPoints\\n            );\\n    }\\n\\n    /**\\n     * @dev We need this to avoid stack too deep errors.\\n     */\\n    function getEncodedSignature(LoanData.Signature memory _signature) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_signature.signer, _signature.nonce, _signature.expiry);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/interfaces/INftfiHub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title INftfiHub\\n * @author NFTfi\\n * @dev NftfiHub interface\\n */\\ninterface INftfiHub {\\n    function setContract(string calldata _contractKey, address _contractAddress) external;\\n\\n    function getContract(bytes32 _contractKey) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/interfaces/IDirectLoanCoordinator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title IDirectLoanCoordinator\\n * @author NFTfi\\n * @dev DirectLoanCoordinator interface.\\n */\\ninterface IDirectLoanCoordinator {\\n    enum StatusType {\\n        NOT_EXISTS,\\n        NEW,\\n        RESOLVED\\n    }\\n\\n    /**\\n     * @notice This struct contains data related to a loan\\n     *\\n     * @param smartNftId - The id of both the promissory note and obligation receipt.\\n     * @param status - The status in which the loan currently is.\\n     * @param loanContract - Address of the LoanType contract that created the loan.\\n     */\\n    struct Loan {\\n        address loanContract;\\n        uint64 smartNftId;\\n        StatusType status;\\n    }\\n\\n    function registerLoan(address _lender, bytes32 _loanType) external returns (uint32);\\n\\n    function mintObligationReceipt(uint32 _loanId, address _borrower) external;\\n\\n    function resolveLoan(uint32 _loanId) external;\\n\\n    function promissoryNoteToken() external view returns (address);\\n\\n    function obligationReceiptToken() external view returns (address);\\n\\n    function getLoanData(uint32 _loanId) external view returns (Loan memory);\\n\\n    function isValidLoanId(uint32 _loanId, address _loanContract) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/interfaces/INftWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title INftTypeRegistry\\n * @author NFTfi\\n * @dev Interface for NFT Wrappers.\\n */\\ninterface INftWrapper {\\n    function transferNFT(\\n        address from,\\n        address to,\\n        address nftContract,\\n        uint256 tokenId\\n    ) external returns (bool);\\n\\n    function isOwner(\\n        address owner,\\n        address nftContract,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n\\n    function wrapAirdropReceiver(\\n        address _recipient,\\n        address _nftContract,\\n        uint256 _nftId,\\n        address _beneficiary\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/interfaces/IPermittedPartners.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface IPermittedPartners {\\n    function getPartnerPermit(address _partner) external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/interfaces/IPermittedERC20s.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface IPermittedERC20s {\\n    function getERC20Permit(address _erc20) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/external/lp-1/interfaces/IPermittedNFTs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface IPermittedNFTs {\\n    function setNFTPermit(address _nftContract, string memory _nftType) external;\\n\\n    function getNFTPermit(address _nftContract) external view returns (bytes32);\\n\\n    function getNFTWrapper(address _nftContract) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/interfaces/IAirdropFlashLoan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface IAirdropFlashLoan {\\n    function pullAirdrop(\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId,\\n        address _nftWrapper,\\n        address _target,\\n        bytes calldata _data,\\n        address _nftAirdrop,\\n        uint256 _nftAirdropId,\\n        bool _is1155,\\n        uint256 _nftAirdropAmount,\\n        address _beneficiary\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/airdrop/IAirdropReceiverFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title IAirdropReceiver\\n * @author NFTfi\\n * @dev\\n */\\ninterface IAirdropReceiverFactory {\\n    function createAirdropReceiver(address _to) external returns (address, uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/external/lp-1/interfaces/IBundleBuilder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface IBundleBuilder {\\n    /**\\n     * @notice data of a erc721 bundle element\\n     *\\n     * @param tokenContract - address of the token contract\\n     * @param id - id of the token\\n     * @param safeTransferable - wether the implementing token contract has a safeTransfer function or not\\n     */\\n    struct BundleElementERC721 {\\n        address tokenContract;\\n        uint256 id;\\n        bool safeTransferable;\\n    }\\n\\n    /**\\n     * @notice data of a erc20 bundle element\\n     *\\n     * @param tokenContract - address of the token contract\\n     * @param amount - amount of the token\\n     */\\n    struct BundleElementERC20 {\\n        address tokenContract;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @notice data of a erc20 bundle element\\n     *\\n     * @param tokenContract - address of the token contract\\n     * @param ids - list of ids of the tokens\\n     * @param amounts - list amounts of the tokens\\n     */\\n    struct BundleElementERC1155 {\\n        address tokenContract;\\n        uint256[] ids;\\n        uint256[] amounts;\\n    }\\n\\n    /**\\n     * @notice the lists of erc721-20-1155 tokens that are to be bundled\\n     *\\n     * @param erc721s list of erc721 tokens\\n     * @param erc20s list of erc20 tokens\\n     * @param erc1155s list of erc1155 tokens\\n     */\\n    struct BundleElements {\\n        BundleElementERC721[] erc721s;\\n        BundleElementERC20[] erc20s;\\n        BundleElementERC1155[] erc1155s;\\n    }\\n\\n    /**\\n     * @notice used by the loan contract to build a bundle from the BundleElements struct at the beginning of a loan,\\n     * returns the id of the created bundle\\n     *\\n     * @param _bundleElements - the lists of erc721-20-1155 tokens that are to be bundled\\n     * @param _sender sender of the tokens in the bundle - the borrower\\n     * @param _receiver receiver of the created bundle, normally the loan contract\\n     */\\n    function buildBundle(\\n        BundleElements memory _bundleElements,\\n        address _sender,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Remove all the children from the bundle\\n     * @dev This method may run out of gas if the list of children is too big. In that case, children can be removed\\n     *      individually.\\n     * @param _tokenId the id of the bundle\\n     * @param _receiver address of the receiver of the children\\n     */\\n    function decomposeBundle(uint256 _tokenId, address _receiver) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and\\n * ERC1271 contract sigantures. Using this instead of ECDSA.recover in your contract will make them compatible with\\n * smart contract wallets such as Argent and Gnosis.\\n *\\n * Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change\\n * through time. It could return true at block N and false at block N+1 (or the opposite).\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOriginationController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\ninterface IOriginationController {\\n    // ================ Data Types =============\\n\\n    struct Currency {\\n        bool isAllowed;\\n        uint256 minPrincipal;\\n    }\\n\\n    enum Side {\\n        BORROW,\\n        LEND\\n    }\\n\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        bytes extraData;\\n    }\\n\\n    struct RolloverAmounts {\\n        uint256 needFromBorrower;\\n        uint256 leftoverPrincipal;\\n        uint256 amountFromLender;\\n        uint256 amountToOldLender;\\n        uint256 amountToLender;\\n        uint256 amountToBorrower;\\n    }\\n\\n    // ================ Events =================\\n\\n    event Approval(address indexed owner, address indexed signer, bool isApproved);\\n    event SetAllowedVerifier(address indexed verifier, bool isAllowed);\\n    event SetAllowedCurrency(address indexed currency, bool isAllowed, uint256 minPrincipal);\\n    event SetAllowedCollateral(address indexed collateral, bool isAllowed);\\n\\n    // ============== Origination Operations ==============\\n\\n    function initializeLoan(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce\\n    ) external returns (uint256 loanId);\\n\\n    function initializeLoanWithItems(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) external returns (uint256 loanId);\\n\\n    function initializeLoanWithCollateralPermit(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Signature calldata collateralSig,\\n        uint256 permitDeadline\\n    ) external returns (uint256 loanId);\\n\\n    function initializeLoanWithCollateralPermitAndItems(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Signature calldata collateralSig,\\n        uint256 permitDeadline,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) external returns (uint256 loanId);\\n\\n    function rolloverLoan(\\n        uint256 oldLoanId,\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce\\n    ) external returns (uint256 newLoanId);\\n\\n    function rolloverLoanWithItems(\\n        uint256 oldLoanId,\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) external returns (uint256 newLoanId);\\n\\n    // ================ Permission Management =================\\n\\n    function approve(address signer, bool approved) external;\\n\\n    function isApproved(address owner, address signer) external returns (bool);\\n\\n    function isSelfOrApproved(address target, address signer) external returns (bool);\\n\\n    function isApprovedForContract(\\n        address target,\\n        Signature calldata sig,\\n        bytes32 sighash\\n    ) external returns (bool);\\n\\n    // ============== Signature Verification ==============\\n\\n    function recoverTokenSignature(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Side side\\n    ) external view returns (bytes32 sighash, address signer);\\n\\n    function recoverItemsSignature(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Side side,\\n        bytes32 itemsHash\\n    ) external view returns (bytes32 sighash, address signer);\\n\\n    // ============== Admin Operations ==============\\n\\n    function setAllowedPayableCurrencies(address[] memory _tokenAddress, Currency[] calldata currencyData) external;\\n\\n    function setAllowedCollateralAddresses(address[] memory _tokenAddress, bool[] calldata isAllowed) external;\\n\\n    function setAllowedVerifiers(address[] calldata verifiers, bool[] calldata isAllowed) external;\\n\\n    function isAllowedCurrency(address token) external view returns (bool);\\n\\n    function isAllowedCollateral(address token) external view returns (bool);\\n\\n    function isAllowedVerifier(address verifier) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface IFeeController {\\n    // ================ Structs ================\\n\\n    struct FeesOrigination {\\n        uint16 borrowerOriginationFee;\\n        uint16 lenderOriginationFee;\\n        uint16 lenderDefaultFee;\\n        uint16 lenderInterestFee;\\n        uint16 lenderPrincipalFee;\\n    }\\n\\n    struct FeesRollover {\\n        uint16 borrowerRolloverFee;\\n        uint16 lenderRolloverFee;\\n    }\\n\\n    // ================ Events =================\\n\\n    event SetLendingFee(bytes32 indexed id, uint16 fee);\\n\\n    event SetVaultMintFee(uint64 fee);\\n\\n    // ================ Getter/Setter =================\\n\\n    function setLendingFee(bytes32 id, uint16 fee) external;\\n\\n    function setVaultMintFee(uint64 fee) external;\\n\\n    function getLendingFee(bytes32 id) external view returns (uint16);\\n\\n    function getVaultMintFee() external view returns (uint64);\\n\\n    function getFeesOrigination() external view returns (FeesOrigination memory);\\n\\n    function getFeesRollover() external view returns (FeesRollover memory);\\n\\n    function getMaxLendingFee(bytes32 id) external view returns (uint16);\\n\\n    function getMaxVaultMintFee() external view returns (uint64);\\n}\"\r\n    },\r\n    \"contracts/external/interfaces/IFlashLoanRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\\ninterface IVault {\\n    /**\\n     * @dev copied from @balancer-labs/v2-vault/contracts/interfaces/IVault.sol,\\n     *      which uses an incompatible compiler version. Only necessary selectors\\n     *      (flashLoan) included.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/v2-migration/v2-contracts/v2-interfaces/ILoanCoreV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"../LoanLibraryV2.sol\\\";\\n\\nimport \\\"./IPromissoryNoteV2.sol\\\";\\nimport \\\"./IFeeControllerV2.sol\\\";\\n\\ninterface ILoanCoreV2 {\\n    // ================ Events =================\\n\\n    event LoanCreated(LoanLibraryV2.LoanTerms terms, uint256 loanId);\\n    event LoanStarted(uint256 loanId, address lender, address borrower);\\n    event LoanRepaid(uint256 loanId);\\n    event LoanRolledOver(uint256 oldLoanId, uint256 newLoanId);\\n    event InstallmentPaymentReceived(uint256 loanId, uint256 repaidAmount, uint256 remBalance);\\n    event LoanClaimed(uint256 loanId);\\n    event FeesClaimed(address token, address to, uint256 amount);\\n    event SetFeeController(address feeController);\\n    event NonceUsed(address indexed user, uint160 nonce);\\n\\n    // ============== Lifecycle Operations ==============\\n\\n    function startLoan(\\n        address lender,\\n        address borrower,\\n        LoanLibraryV2.LoanTerms calldata terms\\n    ) external returns (uint256 loanId);\\n\\n    function repay(uint256 loanId) external;\\n\\n    function repayPart(\\n        uint256 _loanId,\\n        uint256 _currentMissedPayments,\\n        uint256 _paymentToPrincipal,\\n        uint256 _paymentToInterest,\\n        uint256 _paymentToLateFees,\\n        address _caller\\n    ) external;\\n\\n    function claim(uint256 loanId, uint256 currentInstallmentPeriod) external;\\n\\n    function rollover(\\n        uint256 oldLoanId,\\n        address borrower,\\n        address lender,\\n        LoanLibraryV2.LoanTerms calldata terms,\\n        uint256 _settledAmount,\\n        uint256 _amountToOldLender,\\n        uint256 _amountToLender,\\n        uint256 _amountToBorrower\\n    ) external returns (uint256 newLoanId);\\n\\n    // ============== Nonce Management ==============\\n\\n    function consumeNonce(address user, uint160 nonce) external;\\n\\n    function cancelNonce(uint160 nonce) external;\\n\\n    // ============== View Functions ==============\\n\\n    function getLoan(uint256 loanId) external view returns (LoanLibraryV2.LoanData calldata loanData);\\n\\n    function isNonceUsed(address user, uint160 nonce) external view returns (bool);\\n\\n    function borrowerNote() external returns (IPromissoryNoteV2);\\n\\n    function lenderNote() external returns (IPromissoryNoteV2);\\n\\n    function feeController() external returns (IFeeControllerV2);\\n}\"\r\n    },\r\n    \"contracts/v2-migration/v2-contracts/v2-interfaces/IRepaymentControllerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IRepaymentControllerV2 {\\n    // ============== Lifeycle Operations ==============\\n\\n    function repay(uint256 loanId) external;\\n\\n    function claim(uint256 loanId) external;\\n\\n    function repayPartMinimum(uint256 loanId) external;\\n\\n    function repayPart(uint256 loanId, uint256 amount) external;\\n\\n    function closeLoan(uint256 loanId) external;\\n\\n    // ============== View Functions ==============\\n\\n    function getInstallmentMinPayment(uint256 loanId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function amountToCloseLoan(uint256 loanId) external returns (uint256, uint256);\\n\\n    function getFullInterestAmount(uint256 principal, uint256 interestRate) external pure returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/v2-migration/v2-contracts/LoanLibraryV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/**\\n * @title LoanLibrary\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Contains all data types used across Arcade lending contracts.\\n */\\nlibrary LoanLibraryV2 {\\n    /**\\n     * @dev Enum describing the current state of a loan.\\n     * State change flow:\\n     * Created -> Active -> Repaid\\n     *                   -> Defaulted\\n     */\\n    enum LoanState {\\n        // We need a default that is not 'Created' - this is the zero value\\n        DUMMY_DO_NOT_USE,\\n        // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\n        Active,\\n        // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\n        Repaid,\\n        // The loan was delinquent and collateral claimed by the lender. This is a terminal state.\\n        Defaulted\\n    }\\n\\n    /**\\n     * @dev The raw terms of a loan.\\n     */\\n    struct LoanTerms {\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 32 bits\\n        uint32 durationSecs;\\n        // Timestamp for when signature for terms expires\\n        uint32 deadline;\\n        // Total number of installment periods within the loan duration.\\n        /// @dev Max is 1,000,000, fits in 24 bits\\n        uint24 numInstallments;\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        /// @dev Max is 10,000%, fits in 160 bits\\n        uint160 interestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The token ID of the address holding the collateral.\\n        /// @dev Can be an AssetVault, or the NFT contract for unbundled collateral\\n        address collateralAddress;\\n        // The token ID of the collateral.\\n        uint256 collateralId;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n    }\\n\\n    /**\\n     * @dev Modification of loan terms, used for signing only.\\n     *      Instead of a collateralId, a list of predicates\\n     *      is defined by 'bytes' in items.\\n     */\\n    struct LoanTermsWithItems {\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 32 bits\\n        uint32 durationSecs;\\n        // Timestamp for when signature for terms expires\\n        uint32 deadline;\\n        // Total number of installment periods within the loan duration.\\n        /// @dev Max is 1,000,000, fits in 24 bits\\n        uint24 numInstallments;\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        /// @dev Max is 10,000%, fits in 160 bits\\n        uint160 interestRate;\\n        /// @dev Full-slot variables\\n        uint256 principal;\\n        // The tokenID of the address holding the collateral\\n        /// @dev Must be an AssetVault for LoanTermsWithItems\\n        address collateralAddress;\\n        // An encoded list of predicates\\n        bytes items;\\n        // The payable currency for the loan principal and interest\\n        address payableCurrency;\\n    }\\n\\n    /**\\n     * @dev Predicate for item-based verifications\\n     */\\n    struct Predicate {\\n        // The encoded predicate, to decoded and parsed by the verifier contract\\n        bytes data;\\n        // The verifier contract\\n        address verifier;\\n    }\\n\\n    /**\\n     * @dev The data of a loan. This is stored once the loan is Active\\n     */\\n    struct LoanData {\\n        /// @dev Packed variables\\n        // The current state of the loan\\n        LoanState state;\\n        // Number of installment payments made on the loan\\n        uint24 numInstallmentsPaid;\\n        // installment loan specific\\n        // Start date of the loan, using block.timestamp - for determining installment period\\n        uint160 startDate;\\n        /// @dev Full-slot variables\\n        // The raw terms of the loan\\n        LoanTerms terms;\\n        // Remaining balance of the loan. Starts as equal to principal. Can reduce based on\\n        // payments made, can increased based on compounded interest from missed payments and late fees\\n        uint256 balance;\\n        // Amount paid in total by the borrower\\n        uint256 balancePaid;\\n        // Total amount of late fees accrued\\n        uint256 lateFeesAccrued;\\n    }\\n}\"\r\n    },\r\n    \"contracts/v2-migration/v2-contracts/v2-interfaces/IPromissoryNoteV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IPromissoryNoteV2 is IERC721Enumerable {\\n    // ============== Token Operations ==============\\n\\n    function mint(address to, uint256 loanId) external returns (uint256);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function setPaused(bool paused) external;\\n\\n    // ============== Initializer ==============\\n\\n    function initialize(address loanCore) external;\\n}\"\r\n    },\r\n    \"contracts/v2-migration/v2-contracts/v2-interfaces/IFeeControllerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IFeeControllerV2 {\\n    // ================ Events =================\\n\\n    event UpdateOriginationFee(uint256 _newFee);\\n    event UpdateRolloverFee(uint256 _newFee);\\n    event UpdateCollateralSaleFee(uint256 _newFee);\\n    event UpdatePayLaterFee(uint256 _newFee);\\n\\n    // ================ Fee Setters =================\\n\\n    function setOriginationFee(uint256 _originationFee) external;\\n\\n    function setRolloverFee(uint256 _rolloverFee) external;\\n\\n    function setCollateralSaleFee(uint256 _collateralSaleFee) external;\\n\\n    function setPayLaterFee(uint256 _payLaterFee) external;\\n\\n    // ================ Fee Getters =================\\n\\n    function getOriginationFee() external view returns (uint256);\\n\\n    function getRolloverFee() external view returns (uint256);\\n\\n    function getCollateralSaleFee() external view returns (uint256);\\n\\n    function getPayLaterFee() external view returns (uint256);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IFeeController\",\"name\":\"feeControllerV3\",\"type\":\"address\"},{\"internalType\":\"contract IOriginationController\",\"name\":\"originationControllerV3\",\"type\":\"address\"},{\"internalType\":\"contract ILoanCore\",\"name\":\"loanCoreV3\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"borrowerNoteV3\",\"type\":\"address\"}],\"internalType\":\"struct LP1MigrationBase.OperationContracts\",\"name\":\"_opContracts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"directLoanFixedOffer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanCoordinator\",\"type\":\"address\"}],\"internalType\":\"struct LP1MigrationBase.LP1Deployment[]\",\"name\":\"_deployments\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"MR_CallerNotBorrower\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldCollateralId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v3CollateralId\",\"type\":\"uint256\"}],\"name\":\"MR_CollateralIdMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v3Collateral\",\"type\":\"address\"}],\"name\":\"MR_CollateralMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"v3Currency\",\"type\":\"address\"}],\"name\":\"MR_CurrencyMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"leftoverPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needFromBorrower\",\"type\":\"uint256\"}],\"name\":\"MR_FundsConflict\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"MR_InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"MR_InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"MR_NotCollateralOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MR_Paused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendingPool\",\"type\":\"address\"}],\"name\":\"MR_UnknownCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"R_BorrowerNotReset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"R_StateAlreadySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"providedBorrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cachedBorrower\",\"type\":\"address\"}],\"name\":\"R_UnknownBorrower\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"R_ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLoanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLoanId\",\"type\":\"uint256\"}],\"name\":\"Migration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VAULT\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerNote\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"directLoanFixedOffer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanCoordinator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeController\",\"outputs\":[{\"internalType\":\"contract IFeeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"flushToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanCore\",\"outputs\":[{\"internalType\":\"contract ILoanCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"durationSecs\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"deadline\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateCode\",\"type\":\"bytes32\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"newLoanTerms\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct LP1MigrationBase.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.Predicate[]\",\"name\":\"itemPredicates\",\"type\":\"tuple[]\"},{\"internalType\":\"enum LP1MigrationBase.LoanType\",\"name\":\"loanType\",\"type\":\"uint8\"}],\"name\":\"migrateLoanWithItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originationController\",\"outputs\":[{\"internalType\":\"contract IOriginationController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LP1MigrationWithItems", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8000000000000000000000000f764442856eb3fe68a0828e07246a4b395e800fa000000000000000000000000b7bfcca7d7ff0f371867b770856fac184b18587800000000000000000000000089bc08ba00f135d608bc335f6b33d7a9abcc98af000000000000000000000000e5b12befaf3a91065da7fdd461ded2d8f8ecb7be00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000005000000000000000000000000f896527c49b44aab3cf22ae356fa3af8e331f2800000000000000000000000000c90c8b4aa8549656851964d5fb787f0e4f540820000000000000000000000008252df1d8b29057d1afe3062bf5a64d503152bc80000000000000000000000000c90c8b4aa8549656851964d5fb787f0e4f54082000000000000000000000000d0a40eb7fd94ee97102ba8e9342243a2b2e22207000000000000000000000000329e090ace410ac8d86f1f0c2a13486884e7072a000000000000000000000000e52cec0e90115abeb3304baa36bc2655731f79340000000000000000000000000c90c8b4aa8549656851964d5fb787f0e4f54082000000000000000000000000d0c6e59b50c32530c627107f50acc71958c4341f000000000000000000000000329e090ace410ac8d86f1f0c2a13486884e7072a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}