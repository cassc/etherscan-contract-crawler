{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n  //  * @dev Returns the token decimals.\r\n  //  */\r\n  function decimals() external view returns (uint8);\r\n\r\n  // /**\r\n  //  * @dev Returns the token symbol.\r\n  //  */\r\n  function symbol() external view returns (string memory);\r\n\r\n  // /**\r\n  // * @dev Returns the token name.\r\n  // */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   \r\n   */\r\n \r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor ()  { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return payable (msg.sender);\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor ()  {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash =\r\n            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * Available since v3.1.\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * Available since v3.1.\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * Available since v3.1.\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * Available since v3.1.\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract AirdropContract is Context  {\r\n    address public owner; // Contract owner's address  it also collect the pickup fee\r\n   uint256 public superAdminFee= 0.01 ether;\r\n   \r\n    struct AirdropDetails{\r\n    // uint256 approvedToken; // Amount of tokens approved by the owner\r\n    bool Anyone;// anyone claim on not\r\n    // bool aridropCreated; // bool to check if the airdrop created\r\n    uint256 FixedAmount;// if anyone is selected than this amount of token can be airdrop \"AnyAmount\"\r\n    uint256 AlreadyClaimedAmount;\r\n    uint256 PickUpFee;\r\n    uint256 startTime;    // Presale start time (Unix timestamp)\r\n    uint256  endTime;      // Presale end time (Unix timestamp)\r\n    address airdropCreator;\r\n}\r\n\r\n    struct AirdropUser {\r\n        uint256 amount; // for list of array address \r\n        bool claimed;\r\n    }\r\n\r\n   mapping (address=> mapping (address=>uint256) ) public claimedDataEachUser ;\r\n    mapping (address => AirdropDetails) public AirDropDetailsMap; //erc20 contract address \r\n\r\n    mapping(address => mapping ( address => AirdropUser)) public specificUsers; // Mapping to store specific users and their claimable amounts\r\n\r\n\r\n    \r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n      \r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can perform this operation\");\r\n        _;\r\n    }\r\n\r\n\r\n\r\n\r\n    // Add specific users and their claimable amounts\r\n    function addUserslist(address[] calldata users, uint256[] calldata amounts,address _tokenAddress ) external  {\r\n    //  IERC20   token = IERC20(_tokenAddress); // Initialize with the ERC-20 token contract address\r\n\r\n        require(users.length == amounts.length, \"Arrays length mismatch\");\r\n\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            address user = users[i];\r\n            uint256 amount = amounts[i];\r\n            require(user != address(0), \"Invalid user address\");\r\n            require(amount > 0, \"Amount should be greater than 0\");\r\n\r\n            specificUsers[_tokenAddress][user] = AirdropUser(amount, false);\r\n        }\r\n    }\r\n\r\n\r\nfunction AddcontractDetails  (address _tokenAddress,bool _Anyone,uint256 _FixedAmount,uint256 _PickUpFee ,uint256 _startTime,uint256 _endTime,address _airdropCreator)  payable  public  {\r\n\r\n    require(msg.value ==superAdminFee ,\"have to ppay the airdrop fee\" );\r\n    // IERC20   token = IERC20(_tokenAddress);\r\n\r\n  AirDropDetailsMap[_tokenAddress].Anyone=_Anyone;\r\n\r\n  AirDropDetailsMap[_tokenAddress].FixedAmount=_FixedAmount;\r\n\r\n  AirDropDetailsMap[_tokenAddress].AlreadyClaimedAmount=0;\r\n\r\n   AirDropDetailsMap[_tokenAddress].PickUpFee=_PickUpFee;\r\n\r\n    AirDropDetailsMap[_tokenAddress].startTime=_startTime;\r\n\r\n    AirDropDetailsMap[_tokenAddress].endTime=_endTime;\r\n\r\n    //  AirDropDetailsMap[_tokenAddress].aridropCreated=true;\r\n\r\n     AirDropDetailsMap[_tokenAddress].airdropCreator  =_airdropCreator;\r\n\r\n}                                                   \r\n\r\n\r\n    // Perform airdrop to a specific user list \r\n    function claim(address _tokenAddress) public payable  {\r\n        IERC20   token = IERC20(_tokenAddress); // Initialize with the ERC-20 token contract address\r\n         require(block.timestamp >= AirDropDetailsMap [_tokenAddress].startTime && block.timestamp <=  AirDropDetailsMap [_tokenAddress].endTime, \"Presale is not open\");\r\n        //  require( AirDropDetailsMap[_tokenAddress].aridropCreated==false,\" airdrop already created\");\r\n        \r\n        if (AirDropDetailsMap[_tokenAddress].PickUpFee != 0){\r\n\r\n        require(msg.value>= AirDropDetailsMap[_tokenAddress].PickUpFee, \"dono have engouh amount\");\r\n        payable(AirDropDetailsMap[_tokenAddress].airdropCreator).transfer(msg.value);\r\n\r\n        }\r\n\r\n        if (AirDropDetailsMap[_tokenAddress].Anyone==true){\r\n\r\n       AirDropDetailsMap[_tokenAddress].AlreadyClaimedAmount+= AirDropDetailsMap[_tokenAddress].FixedAmount;\r\n        claimedDataEachUser[_tokenAddress][msg.sender]=AirDropDetailsMap[_tokenAddress].FixedAmount;\r\n        token.transferFrom(AirDropDetailsMap[_tokenAddress].airdropCreator,msg.sender, AirDropDetailsMap[_tokenAddress].FixedAmount);\r\n        \r\n      \r\n            }\r\n        else{\r\n\r\n        AirdropUser storage user = specificUsers[_tokenAddress][msg.sender];\r\n        require(user.amount > 0, \"User not eligible for airdrop\");\r\n        require(!user.claimed, \"User already claimed tokens\");\r\n\r\n        user.claimed = true;\r\n           AirDropDetailsMap[_tokenAddress].AlreadyClaimedAmount+=user.amount;\r\n        claimedDataEachUser[_tokenAddress][msg.sender]=user.amount;\r\n        token.transferFrom(AirDropDetailsMap[_tokenAddress].airdropCreator,msg.sender, user.amount);\r\n        }\r\n\r\n    }\r\n\r\n    function setOwner (address _newFeecollector) public onlyOwner {\r\n        owner =_newFeecollector;\r\n    }\r\n\r\n    function setAdminFee (uint256 _newfee) public onlyOwner{\r\n        superAdminFee= _newfee;\r\n    }\r\n\r\n \r\n    function withdrawFunds() external onlyOwner {\r\n        address payable ownerPayable = payable(owner);\r\n        ownerPayable.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawUnsoldTokens(address _contractAddess) external onlyOwner {\r\n        IERC20 token = IERC20(_contractAddess);\r\n        require(\r\n            token.transfer(owner, token.balanceOf(address(this))),\r\n            \"Token transfer failed\"\r\n        );\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_Anyone\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_FixedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PickUpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_airdropCreator\",\"type\":\"address\"}],\"name\":\"AddcontractDetails\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AirDropDetailsMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"Anyone\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"FixedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AlreadyClaimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PickUpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"airdropCreator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"addUserslist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedDataEachUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newfee\",\"type\":\"uint256\"}],\"name\":\"setAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeecollector\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"specificUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddess\",\"type\":\"address\"}],\"name\":\"withdrawUnsoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AirdropContract", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9e40f6ee9e9ebacaa8f90bb64c5c6859604dee219c088c7da96fb7f25089d03d"}