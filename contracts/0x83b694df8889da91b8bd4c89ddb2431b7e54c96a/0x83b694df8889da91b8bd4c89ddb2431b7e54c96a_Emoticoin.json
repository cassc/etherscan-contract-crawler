{"SourceCode": "// Welcome to EmotiCoin, where innovation meets the future of memecoins. \r\n// Our groundbreaking Reverse Split Protocol (RSP) is here to redefine the crypto experience. \r\n// With a total of 84 captivating supply cuts, EmotiCoin is changing the game.\r\n\r\n// Website: www.emoticoin.io\r\n// Twitter: https://twitter.com/Emoticoin_io\r\n// Telegram: https://t.me/emoticoin_io\r\n// Instagram: https://www.instagram.com/emoticoin_io/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n    function mint(address to) external returns (uint liquidity);\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        uint8 _tokenDecimals\r\n    ) {\r\n        _name = _tokenName;\r\n        _symbol = _tokenSymbol;\r\n        _decimals = _tokenDecimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n}\r\n\r\ncontract Emoticoin is ERC20Detailed, Ownable {\r\n\r\n    uint256 public rebaseFrequency = 4 hours;\r\n    uint256 public nextRebase;\r\n    uint256 public finalRebase;\r\n    bool public autoRebase = true;\r\n    bool public rebaseStarted = false;\r\n    uint256 public rebasesThisCycle;\r\n    uint256 public lastRebaseThisCycle;\r\n\r\n    uint256 public maxTxnAmount;\r\n    uint256 public maxWallet;\r\n\r\n    address public taxWallet;\r\n    uint256 public taxPercentBuy;\r\n    uint256 public taxPercentSell;\r\n\r\n    string public _1_x;\r\n    string public _2_telegram;\r\n    string public _3_website;\r\n\r\n    mapping (address => bool) public isWhitelisted;\r\n\r\n    uint8 private constant DECIMALS = 9;\r\n    uint256 private constant INITIAL_TOKENS_SUPPLY = 18_236_939_125_700_000 * 10**DECIMALS;\r\n    uint256 private constant TOTAL_PARTS = type(uint256).max - (type(uint256).max % INITIAL_TOKENS_SUPPLY);\r\n\r\n    event Rebase(uint256 indexed time, uint256 totalSupply);\r\n    event RemovedLimits();\r\n\r\n    IWETH public immutable weth;\r\n\r\n    IDEXRouter public immutable router;\r\n    address public immutable pair;\r\n    \r\n    bool public limitsInEffect = true;\r\n    bool public tradingIsLive = false;\r\n    \r\n    uint256 private _totalSupply;\r\n    uint256 private _partsPerToken;\r\n    uint256 private partsSwapThreshold = (TOTAL_PARTS / 100000 * 25);\r\n\r\n    mapping(address => uint256) private _partBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowedTokens;\r\n    \r\n    mapping(address => bool) private _bots;\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        _;\r\n    }\r\n\r\n    bool inSwap;\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() ERC20Detailed(block.chainid==1 ? \"EmotiCoin\" : \"ETEST\", block.chainid==1 ? \"Emoti\" : \"ETEST\", DECIMALS) {\r\n        address dexAddress;\r\n        if(block.chainid == 1){\r\n            dexAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        } else if(block.chainid == 5){\r\n            dexAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        } else if (block.chainid == 97){\r\n            dexAddress = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1;\r\n        } else if (block.chainid == 56){\r\n            dexAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        } else {\r\n            revert(\"Chain not configured\");\r\n        }\r\n\r\n       _1_x = \"x.com/emoticoin_io\"; // @dev update\r\n        _2_telegram = \"t.me/emoticoin_io\";\r\n        _3_website = \"Emoticoin.io\";\r\n\r\n        taxWallet = msg.sender; // update\r\n        taxPercentBuy = 20;\r\n        taxPercentSell = 80;\r\n\r\n        finalRebase = type(uint256).max;\r\n        nextRebase = type(uint256).max;\r\n\r\n        router = IDEXRouter(dexAddress);\r\n\r\n        _totalSupply = INITIAL_TOKENS_SUPPLY;\r\n        _partBalances[msg.sender] = TOTAL_PARTS;\r\n        _partsPerToken = TOTAL_PARTS/(_totalSupply);\r\n\r\n        isWhitelisted[address(this)] = true;\r\n        isWhitelisted[address(router)] = true;\r\n        isWhitelisted[msg.sender] = true;\r\n\r\n        maxTxnAmount = _totalSupply * 2 / 100;\r\n        maxWallet = _totalSupply * 2 / 100;\r\n\r\n        weth = IWETH(router.WETH());\r\n        pair = IDEXFactory(router.factory()).createPair(address(this), router.WETH());\r\n\r\n        _allowedTokens[address(this)][address(router)] = type(uint256).max;\r\n        _allowedTokens[address(this)][address(this)] = type(uint256).max;\r\n        _allowedTokens[address(msg.sender)][address(router)] = type(uint256).max;\r\n\r\n        emit Transfer(address(0x0), address(msg.sender), balanceOf(address(this)));\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(address owner_, address spender) external view override returns (uint256){\r\n        return _allowedTokens[owner_][spender];\r\n    }\r\n\r\n    function balanceOf(address who) public view override returns (uint256) {\r\n        return _partBalances[who]/(_partsPerToken);\r\n    }\r\n\r\n    function shouldRebase() public view returns (bool) {\r\n        return nextRebase <= block.timestamp || (autoRebase && rebaseStarted && rebasesThisCycle < 10 && lastRebaseThisCycle + 60 <= block.timestamp);\r\n    }\r\n\r\n    function lpSync() internal {\r\n        InterfaceLP _pair = InterfaceLP(pair);\r\n        _pair.sync();\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external override validRecipient(to) returns (bool){\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        require(limitsInEffect, \"Limits already removed\");\r\n        limitsInEffect = false;\r\n        emit RemovedLimits();\r\n    }\r\n\r\n    function whitelistWallet(address _address, bool _isWhitelisted) external onlyOwner {\r\n        isWhitelisted[_address] = _isWhitelisted;\r\n    }\r\n\r\n    function updateTaxWallet(address _address) external onlyOwner {\r\n        require(_address != address(0), \"Zero Address\");\r\n        taxWallet = _address;\r\n    }\r\n\r\n    function updateTaxPercent(uint256 _taxPercentBuy, uint256 _taxPercentSell) external onlyOwner {\r\n        require(_taxPercentBuy <= taxPercentBuy || _taxPercentBuy <= 10, \"Tax too high\");\r\n        require(_taxPercentSell <= taxPercentSell  || _taxPercentSell <= 10, \"Tax too high\");\r\n        taxPercentBuy = _taxPercentBuy;\r\n        taxPercentSell = _taxPercentSell;\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        address pairAddress = pair;\r\n        uint256 partAmount = amount*(_partsPerToken);\r\n\r\n        require(!_bots[sender] && !_bots[recipient] && !_bots[msg.sender], \"Blacklisted\");\r\n\r\n        if(autoRebase && !inSwap && !isWhitelisted[sender] && !isWhitelisted[recipient]){\r\n            require(tradingIsLive, \"Trading not live\");\r\n            if(limitsInEffect){\r\n                if (sender == pairAddress || recipient == pairAddress){\r\n                    require(amount <= maxTxnAmount, \"Max Tx Exceeded\");\r\n                }\r\n                if (recipient != pairAddress){\r\n                    require(balanceOf(recipient) + amount <= maxWallet, \"Max Wallet Exceeded\");\r\n                }\r\n            }\r\n\r\n            if(recipient == pairAddress){\r\n                if(balanceOf(address(this)) >= partsSwapThreshold/(_partsPerToken)){\r\n                    try this.swapBack(){} catch {}\r\n                }\r\n                if(shouldRebase()){\r\n                    rebase();\r\n                }\r\n            }\r\n\r\n            uint256 taxPartAmount;\r\n\r\n            if(sender == pairAddress){\r\n                taxPartAmount = partAmount * taxPercentBuy / 100;\r\n            }\r\n            else if (recipient == pairAddress) {\r\n                taxPartAmount = partAmount * taxPercentSell / 100;\r\n            }\r\n\r\n            if(taxPartAmount > 0){\r\n                _partBalances[sender] -= taxPartAmount;\r\n                _partBalances[address(this)] += taxPartAmount;\r\n                emit Transfer(sender, address(this), taxPartAmount / _partsPerToken);\r\n                partAmount -= taxPartAmount;\r\n            }\r\n            \r\n        }\r\n\r\n        _partBalances[sender] = _partBalances[sender]-(partAmount);\r\n        _partBalances[recipient] = _partBalances[recipient]+(partAmount);\r\n\r\n        emit Transfer(sender, recipient, partAmount/(_partsPerToken));\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to,  uint256 value) external override validRecipient(to) returns (bool) {\r\n        if (_allowedTokens[from][msg.sender] != type(uint256).max) {\r\n            require(_allowedTokens[from][msg.sender] >= value,\"Insufficient Allowance\");\r\n            _allowedTokens[from][msg.sender] = _allowedTokens[from][msg.sender]-(value);\r\n        }\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool){\r\n        uint256 oldValue = _allowedTokens[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedTokens[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedTokens[msg.sender][spender] = oldValue-(\r\n                subtractedValue\r\n            );\r\n        }\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedTokens[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool){\r\n        _allowedTokens[msg.sender][spender] = _allowedTokens[msg.sender][\r\n        spender\r\n        ]+(addedValue);\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedTokens[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public override returns (bool){\r\n        _allowedTokens[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function rebase() internal returns (uint256) {\r\n        uint256 time = block.timestamp;\r\n\r\n        uint256 supplyDelta = _totalSupply * 2 / 100;\r\n        if(nextRebase < block.timestamp){\r\n            rebasesThisCycle = 1;\r\n            nextRebase += rebaseFrequency;\r\n        } else {\r\n            rebasesThisCycle += 1;\r\n            lastRebaseThisCycle = block.timestamp;\r\n        }\r\n\r\n        if (supplyDelta == 0) {\r\n            emit Rebase(time, _totalSupply);\r\n            return _totalSupply;\r\n        }\r\n\r\n        _totalSupply = _totalSupply-supplyDelta;\r\n\r\n        if (nextRebase >= finalRebase) {\r\n            nextRebase = type(uint256).max;\r\n            autoRebase = false;\r\n            _totalSupply = 777_777_777 * (10 ** decimals());\r\n\r\n            if(limitsInEffect){\r\n                limitsInEffect = false;\r\n                emit RemovedLimits();\r\n            }\r\n\r\n            if(balanceOf(address(this)) > 0){\r\n                try this.swapBack(){} catch {}\r\n            }\r\n\r\n            taxPercentBuy = 0;\r\n            taxPercentSell = 0;\r\n        }\r\n\r\n        _partsPerToken = TOTAL_PARTS/(_totalSupply);\r\n\r\n        lpSync();\r\n\r\n        emit Rebase(time, _totalSupply);\r\n        return _totalSupply;\r\n    }\r\n\r\n    function manualRebase() external {\r\n        require(shouldRebase(), \"Not in time\");\r\n        rebase();\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingIsLive, \"Trading Live Already\");\r\n        _bots[0x58dF81bAbDF15276E761808E872a3838CbeCbcf9] = true;\r\n        tradingIsLive = true;\r\n    }\r\n\r\n    function startRebaseCycles() external onlyOwner {\r\n        require(!rebaseStarted, \"already started\");\r\n        nextRebase = block.timestamp + rebaseFrequency;\r\n        finalRebase = block.timestamp + 14 days;\r\n        rebaseStarted = true;\r\n    }\r\n\r\n    function manageBots(address[] memory _accounts, bool _isBot) external onlyOwner {\r\n        for(uint256 i = 0; i < _accounts.length; i++){\r\n            _bots[_accounts[i]] = _isBot;\r\n        }\r\n    }\r\n\r\n    function swapBack() public swapping {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if(contractBalance == 0){\r\n            return;\r\n        }\r\n\r\n        if(contractBalance > partsSwapThreshold/(_partsPerToken) * 20){\r\n            contractBalance = partsSwapThreshold/(_partsPerToken) * 20;\r\n        }\r\n\r\n        swapTokensForETH(contractBalance);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(router.WETH());\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount\r\n            path,\r\n            address(taxWallet),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function refreshBalances(address[] memory wallets) external {\r\n        address wallet;\r\n        for(uint256 i = 0; i < wallets.length; i++){\r\n            wallet = wallets[i];\r\n            emit Transfer(wallet, wallet, 0);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_1_x\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_2_telegram\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_3_website\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseThisCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isBot\",\"type\":\"bool\"}],\"name\":\"manageBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasesThisCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"refreshBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRebaseCycles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercentBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercentSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIsLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxPercentBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxPercentSell\",\"type\":\"uint256\"}],\"name\":\"updateTaxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"whitelistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Emoticoin", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://85cdae55340d26c323bf0beffa8dcb0d49f74e17b588218599ed924c10529f77"}