{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/FraxlendPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.16;\\n\\n// ====================================================================\\n// |     ______                   _______                             |\\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\\\/ __ `/ __ \\\\/ ___/ _ \\\\  |\\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\\n// | /_/   /_/   \\\\__,_/_/|_|  /_/   /_/_/ /_/\\\\__,_/_/ /_/\\\\___/\\\\___/   |\\n// |                                                                  |\\n// ====================================================================\\n// ========================== FraxlendPair ============================\\n// ====================================================================\\n// Frax Finance: https://github.com/FraxFinance\\n\\n// Primary Author\\n// Drake Evans: https://github.com/DrakeEvans\\n\\n// Reviewers\\n// Dennis: https://github.com/denett\\n// Sam Kazemian: https://github.com/samkazemian\\n// Travis Moore: https://github.com/FortisFortuna\\n// Jack Corddry: https://github.com/corddry\\n// Rich Gee: https://github.com/zer0blockchain\\n\\n// ====================================================================\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./FraxlendPairConstants.sol\\\";\\nimport \\\"./FraxlendPairCore.sol\\\";\\nimport \\\"./libraries/VaultAccount.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IERC4626.sol\\\";\\nimport \\\"./interfaces/IFraxlendWhitelist.sol\\\";\\nimport \\\"./interfaces/IRateCalculator.sol\\\";\\nimport \\\"./interfaces/ISwapper.sol\\\";\\n\\ncontract FraxlendPair is IERC20Metadata, FraxlendPairCore {\\n    using VaultAccountingLibrary for VaultAccount;\\n    using SafeERC20 for IERC20;\\n\\n    constructor(\\n        bytes memory _configData,\\n        bytes memory _immutables,\\n        uint256 _maxLTV,\\n        uint256 _liquidationFee,\\n        uint256 _maturityDate,\\n        uint256 _penaltyRate,\\n        bool _isBorrowerWhitelistActive,\\n        bool _isLenderWhitelistActive\\n    )\\n        FraxlendPairCore(\\n            _configData,\\n            _immutables,\\n            _maxLTV,\\n            _liquidationFee,\\n            _maturityDate,\\n            _penaltyRate,\\n            _isBorrowerWhitelistActive,\\n            _isLenderWhitelistActive\\n        )\\n        ERC20(\\\"\\\", \\\"\\\")\\n        Ownable()\\n        Pausable()\\n    {}\\n\\n    // ============================================================================================\\n    // ERC20 Metadata\\n    // ============================================================================================\\n\\n    function name() public view override(ERC20, IERC20Metadata) returns (string memory) {\\n        return nameOfContract;\\n    }\\n\\n    function symbol() public view override(ERC20, IERC20Metadata) returns (string memory) {\\n        // prettier-ignore\\n        // solhint-disable-next-line max-line-length\\n        return string(abi.encodePacked(\\\"FraxlendV1 - \\\", collateralContract.safeSymbol(), \\\"/\\\", assetContract.safeSymbol()));\\n    }\\n\\n    function decimals() public pure override(ERC20, IERC20Metadata) returns (uint8) {\\n        return 18;\\n    }\\n\\n    // totalSupply for fToken ERC20 compatibility\\n    function totalSupply() public view override(ERC20, IERC20) returns (uint256) {\\n        return totalAsset.shares;\\n    }\\n\\n    // ============================================================================================\\n    // Functions: Helpers\\n    // ============================================================================================\\n\\n    function asset() external view returns (address) {\\n        return address(assetContract);\\n    }\\n\\n    function getConstants()\\n        external\\n        pure\\n        returns (\\n            uint256 _LTV_PRECISION,\\n            uint256 _LIQ_PRECISION,\\n            uint256 _UTIL_PREC,\\n            uint256 _FEE_PRECISION,\\n            uint256 _EXCHANGE_PRECISION,\\n            uint64 _DEFAULT_INT,\\n            uint16 _DEFAULT_PROTOCOL_FEE,\\n            uint256 _MAX_PROTOCOL_FEE\\n        )\\n    {\\n        _LTV_PRECISION = LTV_PRECISION;\\n        _LIQ_PRECISION = LIQ_PRECISION;\\n        _UTIL_PREC = UTIL_PREC;\\n        _FEE_PRECISION = FEE_PRECISION;\\n        _EXCHANGE_PRECISION = EXCHANGE_PRECISION;\\n        _DEFAULT_INT = DEFAULT_INT;\\n        _DEFAULT_PROTOCOL_FEE = DEFAULT_PROTOCOL_FEE;\\n        _MAX_PROTOCOL_FEE = MAX_PROTOCOL_FEE;\\n    }\\n\\n    /// @notice The ```getImmutableAddressBool``` function gets all the address and bool configs\\n    /// @return _assetContract Address of asset\\n    /// @return _collateralContract Address of collateral\\n    /// @return _oracleMultiply Address of oracle numerator\\n    /// @return _oracleDivide Address of oracle denominator\\n    /// @return _rateContract Address of rate contract\\n    /// @return _DEPLOYER_CONTRACT Address of deployer contract\\n    /// @return _COMPTROLLER_ADDRESS Address of comptroller\\n    /// @return _FRAXLEND_WHITELIST Address of whitelist\\n    /// @return _borrowerWhitelistActive Boolean is borrower whitelist active\\n    /// @return _lenderWhitelistActive Boolean is lender whitelist active\\n    function getImmutableAddressBool()\\n        external\\n        view\\n        returns (\\n            address _assetContract,\\n            address _collateralContract,\\n            address _oracleMultiply,\\n            address _oracleDivide,\\n            address _rateContract,\\n            address _DEPLOYER_CONTRACT,\\n            address _COMPTROLLER_ADDRESS,\\n            address _FRAXLEND_WHITELIST,\\n            bool _borrowerWhitelistActive,\\n            bool _lenderWhitelistActive\\n        )\\n    {\\n        _assetContract = address(assetContract);\\n        _collateralContract = address(collateralContract);\\n        _oracleMultiply = oracleMultiply;\\n        _oracleDivide = oracleDivide;\\n        _rateContract = address(rateContract);\\n        _DEPLOYER_CONTRACT = DEPLOYER_ADDRESS;\\n        _COMPTROLLER_ADDRESS = COMPTROLLER_ADDRESS;\\n        _FRAXLEND_WHITELIST = FRAXLEND_WHITELIST_ADDRESS;\\n        _borrowerWhitelistActive = borrowerWhitelistActive;\\n        _lenderWhitelistActive = lenderWhitelistActive;\\n    }\\n\\n    /// @notice The ```getImmutableUint256``` function gets all uint256 config values\\n    /// @return _oracleNormalization Oracle normalization factor\\n    /// @return _maxLTV Maximum LTV\\n    /// @return _cleanLiquidationFee Clean Liquidation Fee\\n    /// @return _maturityDate Maturity Date\\n    /// @return _penaltyRate Penalty Rate\\n    function getImmutableUint256()\\n        external\\n        view\\n        returns (\\n            uint256 _oracleNormalization,\\n            uint256 _maxLTV,\\n            uint256 _cleanLiquidationFee,\\n            uint256 _maturityDate,\\n            uint256 _penaltyRate\\n        )\\n    {\\n        _oracleNormalization = oracleNormalization;\\n        _maxLTV = maxLTV;\\n        _cleanLiquidationFee = cleanLiquidationFee;\\n        _maturityDate = maturityDate;\\n        _penaltyRate = penaltyRate;\\n    }\\n\\n    /// @notice The ```getUserSnapshot``` function gets user level accounting data\\n    /// @param _address The user address\\n    /// @return _userAssetShares The user fToken balance\\n    /// @return _userBorrowShares The user borrow shares\\n    /// @return _userCollateralBalance The user collateral balance\\n    function getUserSnapshot(address _address)\\n        external\\n        view\\n        returns (\\n            uint256 _userAssetShares,\\n            uint256 _userBorrowShares,\\n            uint256 _userCollateralBalance\\n        )\\n    {\\n        _userAssetShares = balanceOf(_address);\\n        _userBorrowShares = userBorrowShares[_address];\\n        _userCollateralBalance = userCollateralBalance[_address];\\n    }\\n\\n    /// @notice The ```getPairAccounting``` function gets all pair level accounting numbers\\n    /// @return _totalAssetAmount Total assets deposited and interest accrued, total claims\\n    /// @return _totalAssetShares Total fTokens\\n    /// @return _totalBorrowAmount Total borrows\\n    /// @return _totalBorrowShares Total borrow shares\\n    /// @return _totalCollateral Total collateral\\n    function getPairAccounting()\\n        external\\n        view\\n        returns (\\n            uint128 _totalAssetAmount,\\n            uint128 _totalAssetShares,\\n            uint128 _totalBorrowAmount,\\n            uint128 _totalBorrowShares,\\n            uint256 _totalCollateral\\n        )\\n    {\\n        VaultAccount memory _totalAsset = totalAsset;\\n        _totalAssetAmount = _totalAsset.amount;\\n        _totalAssetShares = _totalAsset.shares;\\n\\n        VaultAccount memory _totalBorrow = totalBorrow;\\n        _totalBorrowAmount = _totalBorrow.amount;\\n        _totalBorrowShares = _totalBorrow.shares;\\n        _totalCollateral = totalCollateral;\\n    }\\n\\n    /// @notice The ```toBorrowShares``` function converts a given amount of borrow debt into the number of shares\\n    /// @param _amount Amount of borrow\\n    /// @param _roundUp Whether to roundup during division\\n    function toBorrowShares(uint256 _amount, bool _roundUp) external view returns (uint256) {\\n        return totalBorrow.toShares(_amount, _roundUp);\\n    }\\n\\n    /// @notice The ```toBorrowAmount``` function converts a given amount of borrow debt into the number of shares\\n    /// @param _shares Shares of borrow\\n    /// @param _roundUp Whether to roundup during division\\n    /// @return The amount of asset\\n    function toBorrowAmount(uint256 _shares, bool _roundUp) external view returns (uint256) {\\n        return totalBorrow.toAmount(_shares, _roundUp);\\n    }\\n\\n    /// @notice The ```toAssetAmount``` function converts a given number of shares to an asset amount\\n    /// @param _shares Shares of asset (fToken)\\n    /// @param _roundUp Whether to round up after division\\n    /// @return The amount of asset\\n    function toAssetAmount(uint256 _shares, bool _roundUp) external view returns (uint256) {\\n        return totalAsset.toAmount(_shares, _roundUp);\\n    }\\n\\n    /// @notice The ```toAssetShares``` function converts a given asset amount to a number of asset shares (fTokens)\\n    /// @param _amount The amount of asset\\n    /// @param _roundUp Whether to round up after division\\n    /// @return The number of shares (fTokens)\\n    function toAssetShares(uint256 _amount, bool _roundUp) external view returns (uint256) {\\n        return totalAsset.toShares(_amount, _roundUp);\\n    }\\n\\n    // ============================================================================================\\n    // Functions: Configuration\\n    // ============================================================================================\\n    /// @notice The ```SetTimeLock``` event fires when the TIME_LOCK_ADDRESS is set\\n    /// @param _oldAddress The original address\\n    /// @param _newAddress The new address\\n    event SetTimeLock(address _oldAddress, address _newAddress);\\n\\n    /// @notice The ```setTimeLock``` function sets the TIME_LOCK address\\n    /// @param _newAddress the new time lock address\\n    function setTimeLock(address _newAddress) external {\\n        if (msg.sender != TIME_LOCK_ADDRESS) revert OnlyTimeLock();\\n        emit SetTimeLock(TIME_LOCK_ADDRESS, _newAddress);\\n        TIME_LOCK_ADDRESS = _newAddress;\\n    }\\n\\n    /// @notice The ```ChangeFee``` event first when the fee is changed\\n    /// @param _newFee The new fee\\n    event ChangeFee(uint32 _newFee);\\n\\n    /// @notice The ```changeFee``` function changes the protocol fee, max 50%\\n    /// @param _newFee The new fee\\n    function changeFee(uint32 _newFee) external whenNotPaused {\\n        if (msg.sender != TIME_LOCK_ADDRESS) revert OnlyTimeLock();\\n        if (_newFee > MAX_PROTOCOL_FEE) {\\n            revert BadProtocolFee();\\n        }\\n        _addInterest();\\n        currentRateInfo.feeToProtocolRate = _newFee;\\n        emit ChangeFee(_newFee);\\n    }\\n\\n    /// @notice The ```WithdrawFees``` event fires when the fees are withdrawn\\n    /// @param _shares Number of _shares (fTokens) redeemed\\n    /// @param _recipient To whom the assets were sent\\n    /// @param _amountToTransfer The amount of fees redeemed\\n    event WithdrawFees(uint128 _shares, address _recipient, uint256 _amountToTransfer);\\n\\n    /// @notice The ```withdrawFees``` function withdraws fees accumulated\\n    /// @param _shares Number of fTokens to redeem\\n    /// @param _recipient Address to send the assets\\n    /// @return _amountToTransfer Amount of assets sent to recipient\\n    function withdrawFees(uint128 _shares, address _recipient) external onlyOwner returns (uint256 _amountToTransfer) {\\n        // Grab some data from state to save gas\\n        VaultAccount memory _totalAsset = totalAsset;\\n        VaultAccount memory _totalBorrow = totalBorrow;\\n\\n        // Take all available if 0 value passed\\n        if (_shares == 0) _shares = uint128(balanceOf(address(this)));\\n\\n        // We must calculate this before we subtract from _totalAsset or invoke _burn\\n        _amountToTransfer = _totalAsset.toAmount(_shares, true);\\n\\n        // Check for sufficient withdraw liquidity\\n        uint256 _assetsAvailable = _totalAssetAvailable(_totalAsset, _totalBorrow);\\n        if (_assetsAvailable < _amountToTransfer) {\\n            revert InsufficientAssetsInContract(_assetsAvailable, _amountToTransfer);\\n        }\\n\\n        // Effects: bookkeeping\\n        _totalAsset.amount -= uint128(_amountToTransfer);\\n        _totalAsset.shares -= _shares;\\n\\n        // Effects: write to states\\n        // NOTE: will revert if _shares > balanceOf(address(this))\\n        _burn(address(this), _shares);\\n        totalAsset = _totalAsset;\\n\\n        // Interactions\\n        assetContract.safeTransfer(_recipient, _amountToTransfer);\\n        emit WithdrawFees(_shares, _recipient, _amountToTransfer);\\n    }\\n\\n    /// @notice The ```SetSwapper``` event fires whenever a swapper is black or whitelisted\\n    /// @param _swapper The swapper address\\n    /// @param _approval The approval\\n    event SetSwapper(address _swapper, bool _approval);\\n\\n    /// @notice The ```setSwapper``` function is called to black or whitelist a given swapper address\\n    /// @dev\\n    /// @param _swapper The swapper address\\n    /// @param _approval The approval\\n    function setSwapper(address _swapper, bool _approval) external onlyOwner {\\n        swappers[_swapper] = _approval;\\n        emit SetSwapper(_swapper, _approval);\\n    }\\n\\n    /// @notice The ```SetApprovedLender``` event fires when a lender is black or whitelisted\\n    /// @param _address The address\\n    /// @param _approval The approval\\n    event SetApprovedLender(address indexed _address, bool _approval);\\n\\n    /// @notice The ```setApprovedLenders``` function sets a given set of addresses to the whitelist\\n    /// @dev Cannot black list self\\n    /// @param _lenders The addresses who's status will be set\\n    /// @param _approval The approval status\\n    function setApprovedLenders(address[] calldata _lenders, bool _approval) external approvedLender(msg.sender) {\\n        for (uint256 i = 0; i < _lenders.length; i++) {\\n            // Do not set when _approval == false and _lender == msg.sender\\n            if (_approval || _lenders[i] != msg.sender) {\\n                approvedLenders[_lenders[i]] = _approval;\\n                emit SetApprovedLender(_lenders[i], _approval);\\n            }\\n        }\\n    }\\n\\n    /// @notice The ```SetApprovedBorrower``` event fires when a borrower is black or whitelisted\\n    /// @param _address The address\\n    /// @param _approval The approval\\n    event SetApprovedBorrower(address indexed _address, bool _approval);\\n\\n    /// @notice The ```setApprovedBorrowers``` function sets a given array of addresses to the whitelist\\n    /// @dev Cannot black list self\\n    /// @param _borrowers The addresses who's status will be set\\n    /// @param _approval The approval status\\n    function setApprovedBorrowers(address[] calldata _borrowers, bool _approval) external approvedBorrower {\\n        for (uint256 i = 0; i < _borrowers.length; i++) {\\n            // Do not set when _approval == false and _borrower == msg.sender\\n            if (_approval || _borrowers[i] != msg.sender) {\\n                approvedBorrowers[_borrowers[i]] = _approval;\\n                emit SetApprovedBorrower(_borrowers[i], _approval);\\n            }\\n        }\\n    }\\n\\n    function pause() external {\\n        if (\\n            msg.sender != CIRCUIT_BREAKER_ADDRESS &&\\n            msg.sender != COMPTROLLER_ADDRESS &&\\n            msg.sender != owner() &&\\n            msg.sender != DEPLOYER_ADDRESS\\n        ) {\\n            revert ProtocolOrOwnerOnly();\\n        }\\n        _addInterest(); // accrue any interest prior to pausing as it won't accrue during pause\\n        _pause();\\n    }\\n\\n    function unpause() external {\\n        if (msg.sender != COMPTROLLER_ADDRESS && msg.sender != owner()) {\\n            revert ProtocolOrOwnerOnly();\\n        }\\n        // Resets the lastTimestamp which has the effect of no interest accruing over the pause period\\n        _addInterest();\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"src/contracts/FraxlendPairConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.16;\\n\\n// ====================================================================\\n// |     ______                   _______                             |\\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\\\/ __ `/ __ \\\\/ ___/ _ \\\\  |\\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\\n// | /_/   /_/   \\\\__,_/_/|_|  /_/   /_/_/ /_/\\\\__,_/_/ /_/\\\\___/\\\\___/   |\\n// |                                                                  |\\n// ====================================================================\\n// ===================== FraxlendPairConstants ========================\\n// ====================================================================\\n// Frax Finance: https://github.com/FraxFinance\\n\\n// Primary Author\\n// Drake Evans: https://github.com/DrakeEvans\\n\\n// Reviewers\\n// Dennis: https://github.com/denett\\n// Sam Kazemian: https://github.com/samkazemian\\n// Travis Moore: https://github.com/FortisFortuna\\n// Jack Corddry: https://github.com/corddry\\n// Rich Gee: https://github.com/zer0blockchain\\n\\n// ====================================================================\\n\\nabstract contract FraxlendPairConstants {\\n    // ============================================================================================\\n    // Constants\\n    // ============================================================================================\\n\\n    // Precision settings\\n    uint256 internal constant LTV_PRECISION = 1e5; // 5 decimals\\n    uint256 internal constant LIQ_PRECISION = 1e5;\\n    uint256 internal constant UTIL_PREC = 1e5;\\n    uint256 internal constant FEE_PRECISION = 1e5;\\n    uint256 internal constant EXCHANGE_PRECISION = 1e18;\\n\\n    // Default Interest Rate (if borrows = 0)\\n    uint64 internal constant DEFAULT_INT = 158049988; // 0.5% annual rate 1e18 precision\\n\\n    // Protocol Fee\\n    uint16 internal constant DEFAULT_PROTOCOL_FEE = 0; // 1e5 precision\\n    uint256 internal constant MAX_PROTOCOL_FEE = 5e4; // 50% 1e5 precision\\n\\n    error Insolvent(uint256 _borrow, uint256 _collateral, uint256 _exchangeRate);\\n    error BorrowerSolvent();\\n    error OnlyApprovedBorrowers();\\n    error OnlyApprovedLenders();\\n    error PastMaturity();\\n    error ProtocolOrOwnerOnly();\\n    error OracleLTEZero(address _oracle);\\n    error InsufficientAssetsInContract(uint256 _assets, uint256 _request);\\n    error NotOnWhitelist(address _address);\\n    error NotDeployer();\\n    error NameEmpty();\\n    error AlreadyInitialized();\\n    error SlippageTooHigh(uint256 _minOut, uint256 _actual);\\n    error BadSwapper();\\n    error InvalidPath(address _expected, address _actual);\\n    error BadProtocolFee();\\n    error BorrowerWhitelistRequired();\\n    error OnlyTimeLock();\\n    error PriceTooLarge();\\n    error PastDeadline(uint256 _blockTimestamp, uint256 _deadline);\\n}\\n\"\r\n    },\r\n    \"src/contracts/FraxlendPairCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.16;\\n\\n// ====================================================================\\n// |     ______                   _______                             |\\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\\\/ __ `/ __ \\\\/ ___/ _ \\\\  |\\n// |  / __/ / /  / /_/ _>  <   / __/ / / / / / /_/ / / / / /__/  __/  |\\n// | /_/   /_/   \\\\__,_/_/|_|  /_/   /_/_/ /_/\\\\__,_/_/ /_/\\\\___/\\\\___/   |\\n// |                                                                  |\\n// ====================================================================\\n// ========================= FraxlendPairCore =========================\\n// ====================================================================\\n// Frax Finance: https://github.com/FraxFinance\\n\\n// Primary Author\\n// Drake Evans: https://github.com/DrakeEvans\\n\\n// Reviewers\\n// Dennis: https://github.com/denett\\n// Sam Kazemian: https://github.com/samkazemian\\n// Travis Moore: https://github.com/FortisFortuna\\n// Jack Corddry: https://github.com/corddry\\n// Rich Gee: https://github.com/zer0blockchain\\n\\n// ====================================================================\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./FraxlendPairConstants.sol\\\";\\nimport \\\"./libraries/VaultAccount.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IERC4626.sol\\\";\\nimport \\\"./interfaces/IFraxlendWhitelist.sol\\\";\\nimport \\\"./interfaces/IRateCalculator.sol\\\";\\nimport \\\"./interfaces/ISwapper.sol\\\";\\n\\n/// @title FraxlendPairCore\\n/// @author Drake Evans (Frax Finance) https://github.com/drakeevans\\n/// @notice  An abstract contract which contains the core logic and storage for the FraxlendPair\\nabstract contract FraxlendPairCore is FraxlendPairConstants, ERC20, Ownable, Pausable, ReentrancyGuard {\\n    using VaultAccountingLibrary for VaultAccount;\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n\\n    string public version = \\\"1.0.0\\\";\\n\\n    // ============================================================================================\\n    // Settings set by constructor() & initialize()\\n    // ============================================================================================\\n\\n    // Asset and collateral contracts\\n    IERC20 internal immutable assetContract;\\n    IERC20 public immutable collateralContract;\\n\\n    // Oracle wrapper contract and oracleData\\n    address public immutable oracleMultiply;\\n    address public immutable oracleDivide;\\n    uint256 public immutable oracleNormalization;\\n\\n    // LTV Settings\\n    uint256 public immutable maxLTV;\\n\\n    // Liquidation Fee\\n    uint256 public immutable cleanLiquidationFee;\\n    uint256 public immutable dirtyLiquidationFee;\\n\\n    // Interest Rate Calculator Contract\\n    IRateCalculator public immutable rateContract; // For complex rate calculations\\n    bytes public rateInitCallData; // Optional extra data from init function to be passed to rate calculator\\n\\n    // Swapper\\n    mapping(address => bool) public swappers; // approved swapper addresses\\n\\n    // Deployer\\n    address public immutable DEPLOYER_ADDRESS;\\n\\n    // Admin contracts\\n    address public immutable CIRCUIT_BREAKER_ADDRESS;\\n    address public immutable COMPTROLLER_ADDRESS;\\n    address public TIME_LOCK_ADDRESS;\\n\\n    // Dependencies\\n    address public immutable FRAXLEND_WHITELIST_ADDRESS;\\n\\n    // ERC20 token name, accessible via name()\\n    string internal nameOfContract;\\n\\n    // Maturity Date & Penalty Interest Rate (per Sec)\\n    uint256 public immutable maturityDate;\\n    uint256 public immutable penaltyRate;\\n\\n    // ============================================================================================\\n    // Storage\\n    // ============================================================================================\\n\\n    /// @notice Stores information about the current interest rate\\n    /// @dev struct is packed to reduce SLOADs. feeToProtocolRate is 1e5 precision, ratePerSec is 1e18 precision\\n    CurrentRateInfo public currentRateInfo;\\n    struct CurrentRateInfo {\\n        uint64 lastBlock;\\n        uint64 feeToProtocolRate; // Fee amount 1e5 precision\\n        uint64 lastTimestamp;\\n        uint64 ratePerSec;\\n    }\\n\\n    /// @notice Stores information about the current exchange rate. Collateral:Asset ratio\\n    /// @dev Struct packed to save SLOADs. Amount of Collateral Token to buy 1e18 Asset Token\\n    ExchangeRateInfo public exchangeRateInfo;\\n    struct ExchangeRateInfo {\\n        uint32 lastTimestamp;\\n        uint224 exchangeRate; // collateral:asset ratio. i.e. how much collateral to buy 1e18 asset\\n    }\\n\\n    // Contract Level Accounting\\n    VaultAccount public totalAsset; // amount = total amount of assets, shares = total shares outstanding\\n    VaultAccount public totalBorrow; // amount = total borrow amount with interest accrued, shares = total shares outstanding\\n    uint256 public totalCollateral; // total amount of collateral in contract\\n\\n    // User Level Accounting\\n    /// @notice Stores the balance of collateral for each user\\n    mapping(address => uint256) public userCollateralBalance; // amount of collateral each user is backed\\n    /// @notice Stores the balance of borrow shares for each user\\n    mapping(address => uint256) public userBorrowShares; // represents the shares held by individuals\\n    // NOTE: user shares of assets are represented as ERC-20 tokens and accessible via balanceOf()\\n\\n    // Internal Whitelists\\n    bool public immutable borrowerWhitelistActive;\\n    mapping(address => bool) public approvedBorrowers;\\n\\n    bool public immutable lenderWhitelistActive;\\n    mapping(address => bool) public approvedLenders;\\n\\n    // ============================================================================================\\n    // Initialize\\n    // ============================================================================================\\n\\n    /// @notice The ```constructor``` function is called on deployment\\n    /// @param _configData abi.encode(address _asset, address _collateral, address _oracleMultiply, address _oracleDivide, uint256 _oracleNormalization, address _rateContract, bytes memory _rateInitData)\\n    /// @param _maxLTV The Maximum Loan-To-Value for a borrower to be considered solvent (1e5 precision)\\n    /// @param _liquidationFee The fee paid to liquidators given as a % of the repayment (1e5 precision)\\n    /// @param _maturityDate The maturityDate date of the Pair\\n    /// @param _penaltyRate The interest rate after maturity date\\n    /// @param _isBorrowerWhitelistActive Enables borrower whitelist\\n    /// @param _isLenderWhitelistActive Enables lender whitelist\\n    constructor(\\n        bytes memory _configData,\\n        bytes memory _immutables,\\n        uint256 _maxLTV,\\n        uint256 _liquidationFee,\\n        uint256 _maturityDate,\\n        uint256 _penaltyRate,\\n        bool _isBorrowerWhitelistActive,\\n        bool _isLenderWhitelistActive\\n    ) {\\n        // Handle Immutables Configuration\\n        {\\n            (\\n                address _circuitBreaker,\\n                address _comptrollerAddress,\\n                address _timeLockAddress,\\n                address _fraxlendWhitelistAddress\\n            ) = abi.decode(_immutables, (address, address, address, address));\\n\\n            // Deployer contract\\n            DEPLOYER_ADDRESS = msg.sender;\\n            CIRCUIT_BREAKER_ADDRESS = _circuitBreaker;\\n            COMPTROLLER_ADDRESS = _comptrollerAddress;\\n            TIME_LOCK_ADDRESS = _timeLockAddress;\\n            FRAXLEND_WHITELIST_ADDRESS = _fraxlendWhitelistAddress;\\n        }\\n\\n        {\\n            (\\n                address _asset,\\n                address _collateral,\\n                address _oracleMultiply,\\n                address _oracleDivide,\\n                uint256 _oracleNormalization,\\n                address _rateContract,\\n\\n            ) = abi.decode(_configData, (address, address, address, address, uint256, address, bytes));\\n\\n            // Pair Settings\\n            assetContract = IERC20(_asset);\\n            collateralContract = IERC20(_collateral);\\n            currentRateInfo.feeToProtocolRate = DEFAULT_PROTOCOL_FEE;\\n            cleanLiquidationFee = _liquidationFee;\\n            dirtyLiquidationFee = (_liquidationFee * 90000) / LIQ_PRECISION; // 90% of clean fee\\n\\n            if (_maxLTV >= LTV_PRECISION && !_isBorrowerWhitelistActive) revert BorrowerWhitelistRequired();\\n            maxLTV = _maxLTV;\\n\\n            // Oracle Settings\\n            {\\n                IFraxlendWhitelist _fraxlendWhitelist = IFraxlendWhitelist(FRAXLEND_WHITELIST_ADDRESS);\\n                // Check that oracles are on the whitelist\\n                if (_oracleMultiply != address(0) && !_fraxlendWhitelist.oracleContractWhitelist(_oracleMultiply)) {\\n                    revert NotOnWhitelist(_oracleMultiply);\\n                }\\n\\n                if (_oracleDivide != address(0) && !_fraxlendWhitelist.oracleContractWhitelist(_oracleDivide)) {\\n                    revert NotOnWhitelist(_oracleDivide);\\n                }\\n\\n                // Write oracleData to storage\\n                oracleMultiply = _oracleMultiply;\\n                oracleDivide = _oracleDivide;\\n                oracleNormalization = _oracleNormalization;\\n\\n                // Rate Settings\\n                if (!_fraxlendWhitelist.rateContractWhitelist(_rateContract)) {\\n                    revert NotOnWhitelist(_rateContract);\\n                }\\n            }\\n\\n            rateContract = IRateCalculator(_rateContract);\\n        }\\n\\n        // Set approved borrowers whitelist\\n        borrowerWhitelistActive = _isBorrowerWhitelistActive;\\n\\n        // Set approved lenders whitelist active\\n        lenderWhitelistActive = _isLenderWhitelistActive;\\n\\n        // Set maturity date & penalty interest rate\\n        maturityDate = _maturityDate;\\n        penaltyRate = _penaltyRate;\\n    }\\n\\n    /// @notice The ```initialize``` function is called immediately after deployment\\n    /// @dev This function can only be called by the deployer\\n    /// @param _name The name of the contract\\n    /// @param _approvedBorrowers An array of approved borrower addresses\\n    /// @param _approvedLenders An array of approved lender addresses\\n    /// @param _rateInitCallData The configuration data for the Rate Calculator contract\\n    function initialize(\\n        string calldata _name,\\n        address[] calldata _approvedBorrowers,\\n        address[] calldata _approvedLenders,\\n        bytes calldata _rateInitCallData\\n    ) external {\\n        if (msg.sender != DEPLOYER_ADDRESS) {\\n            revert NotDeployer();\\n        }\\n        if (bytes(_name).length == 0) {\\n            revert NameEmpty();\\n        }\\n        if (bytes(nameOfContract).length != 0) {\\n            revert AlreadyInitialized();\\n        }\\n\\n        // Set name\\n        nameOfContract = _name;\\n\\n        // Set approved borrowers\\n        for (uint256 i = 0; i < _approvedBorrowers.length; ++i) {\\n            approvedBorrowers[_approvedBorrowers[i]] = true;\\n        }\\n\\n        // Set approved lenders\\n        for (uint256 i = 0; i < _approvedLenders.length; ++i) {\\n            approvedLenders[_approvedLenders[i]] = true;\\n        }\\n\\n        // Reverts if init data is not valid\\n        IRateCalculator(rateContract).requireValidInitData(_rateInitCallData);\\n\\n        // Set rate init Data\\n        rateInitCallData = _rateInitCallData;\\n\\n        // Instantiate Interest\\n        _addInterest();\\n\\n        // Instantiate Exchange Rate\\n        _updateExchangeRate();\\n    }\\n\\n    // ============================================================================================\\n    // Internal Helpers\\n    // ============================================================================================\\n\\n    /// @notice The ```_totalAssetAvailable``` function returns the total balance of Asset Tokens in the contract\\n    /// @param _totalAsset VaultAccount struct which stores total amount and shares for assets\\n    /// @param _totalBorrow VaultAccount struct which stores total amount and shares for borrows\\n    /// @return The balance of Asset Tokens held by contract\\n    function _totalAssetAvailable(VaultAccount memory _totalAsset, VaultAccount memory _totalBorrow)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return _totalAsset.amount - _totalBorrow.amount;\\n    }\\n\\n    /// @notice The ```_isSolvent``` function determines if a given borrower is solvent given an exchange rate\\n    /// @param _borrower The borrower address to check\\n    /// @param _exchangeRate The exchange rate, i.e. the amount of collateral to buy 1e18 asset\\n    /// @return Whether borrower is solvent\\n    function _isSolvent(address _borrower, uint256 _exchangeRate) internal view returns (bool) {\\n        if (maxLTV == 0) return true;\\n        uint256 _borrowerAmount = totalBorrow.toAmount(userBorrowShares[_borrower], true);\\n        if (_borrowerAmount == 0) return true;\\n        uint256 _collateralAmount = userCollateralBalance[_borrower];\\n        if (_collateralAmount == 0) return false;\\n\\n        uint256 _ltv = (((_borrowerAmount * _exchangeRate) / EXCHANGE_PRECISION) * LTV_PRECISION) / _collateralAmount;\\n        return _ltv <= maxLTV;\\n    }\\n\\n    /// @notice The ```_isPastMaturity``` function determines if the current block timestamp is past the maturityDate date\\n    /// @return Whether or not the debt is past maturity\\n    function _isPastMaturity() internal view returns (bool) {\\n        return maturityDate != 0 && block.timestamp > maturityDate;\\n    }\\n\\n    // ============================================================================================\\n    // Modifiers\\n    // ============================================================================================\\n\\n    /// @notice Checks for solvency AFTER executing contract code\\n    /// @param _borrower The borrower whose solvency we will check\\n    modifier isSolvent(address _borrower) {\\n        _;\\n        if (!_isSolvent(_borrower, exchangeRateInfo.exchangeRate)) {\\n            revert Insolvent(\\n                totalBorrow.toAmount(userBorrowShares[_borrower], true),\\n                userCollateralBalance[_borrower],\\n                exchangeRateInfo.exchangeRate\\n            );\\n        }\\n    }\\n\\n    /// @notice Checks if msg.sender is an approved Borrower\\n    modifier approvedBorrower() {\\n        if (borrowerWhitelistActive && !approvedBorrowers[msg.sender]) {\\n            revert OnlyApprovedBorrowers();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Checks if msg.sender and _receiver are both an approved Lender\\n    /// @param _receiver An additional receiver address to check\\n    modifier approvedLender(address _receiver) {\\n        if (lenderWhitelistActive && (!approvedLenders[msg.sender] || !approvedLenders[_receiver])) {\\n            revert OnlyApprovedLenders();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Ensure function is not called when passed maturity\\n    modifier isNotPastMaturity() {\\n        if (_isPastMaturity()) {\\n            revert PastMaturity();\\n        }\\n        _;\\n    }\\n\\n    // ============================================================================================\\n    // Functions: Interest Accumulation and Adjustment\\n    // ============================================================================================\\n\\n    /// @notice The ```AddInterest``` event is emitted when interest is accrued by borrowers\\n    /// @param _interestEarned The total interest accrued by all borrowers\\n    /// @param _rate The interest rate used to calculate accrued interest\\n    /// @param _deltaTime The time elapsed since last interest accrual\\n    /// @param _feesAmount The amount of fees paid to protocol\\n    /// @param _feesShare The amount of shares distributed to protocol\\n    event AddInterest(\\n        uint256 _interestEarned,\\n        uint256 _rate,\\n        uint256 _deltaTime,\\n        uint256 _feesAmount,\\n        uint256 _feesShare\\n    );\\n\\n    /// @notice The ```UpdateRate``` event is emitted when the interest rate is updated\\n    /// @param _ratePerSec The old interest rate (per second)\\n    /// @param _deltaTime The time elapsed since last update\\n    /// @param _utilizationRate The utilization of assets in the Pair\\n    /// @param _newRatePerSec The new interest rate (per second)\\n    event UpdateRate(uint256 _ratePerSec, uint256 _deltaTime, uint256 _utilizationRate, uint256 _newRatePerSec);\\n\\n    /// @notice The ```addInterest``` function is a public implementation of _addInterest and allows 3rd parties to trigger interest accrual\\n    /// @return _interestEarned The amount of interest accrued by all borrowers\\n    function addInterest()\\n        external\\n        nonReentrant\\n        returns (\\n            uint256 _interestEarned,\\n            uint256 _feesAmount,\\n            uint256 _feesShare,\\n            uint64 _newRate\\n        )\\n    {\\n        return _addInterest();\\n    }\\n\\n    /// @notice The ```_addInterest``` function is invoked prior to every external function and is used to accrue interest and update interest rate\\n    /// @dev Can only called once per block\\n    /// @return _interestEarned The amount of interest accrued by all borrowers\\n    function _addInterest()\\n        internal\\n        returns (\\n            uint256 _interestEarned,\\n            uint256 _feesAmount,\\n            uint256 _feesShare,\\n            uint64 _newRate\\n        )\\n    {\\n        // Add interest only once per block\\n        CurrentRateInfo memory _currentRateInfo = currentRateInfo;\\n        if (_currentRateInfo.lastTimestamp == block.timestamp) {\\n            _newRate = _currentRateInfo.ratePerSec;\\n            return (_interestEarned, _feesAmount, _feesShare, _newRate);\\n        }\\n\\n        // Pull some data from storage to save gas\\n        VaultAccount memory _totalAsset = totalAsset;\\n        VaultAccount memory _totalBorrow = totalBorrow;\\n\\n        // If there are no borrows or contract is paused, no interest accrues and we reset interest rate\\n        if (_totalBorrow.shares == 0 || paused()) {\\n            if (!paused()) {\\n                _currentRateInfo.ratePerSec = DEFAULT_INT;\\n            }\\n            _currentRateInfo.lastTimestamp = uint64(block.timestamp);\\n            _currentRateInfo.lastBlock = uint64(block.number);\\n\\n            // Effects: write to storage\\n            currentRateInfo = _currentRateInfo;\\n        } else {\\n            // We know totalBorrow.shares > 0\\n            uint256 _deltaTime = block.timestamp - _currentRateInfo.lastTimestamp;\\n\\n            // NOTE: Violates Checks-Effects-Interactions pattern\\n            // Be sure to mark external version NONREENTRANT (even though rateContract is trusted)\\n            // Calc new rate\\n            uint256 _utilizationRate = (UTIL_PREC * _totalBorrow.amount) / _totalAsset.amount;\\n            if (_isPastMaturity()) {\\n                _newRate = uint64(penaltyRate);\\n            } else {\\n                bytes memory _rateData = abi.encode(\\n                    _currentRateInfo.ratePerSec,\\n                    _deltaTime,\\n                    _utilizationRate,\\n                    block.number - _currentRateInfo.lastBlock\\n                );\\n                _newRate = IRateCalculator(rateContract).getNewRate(_rateData, rateInitCallData);\\n            }\\n\\n            // Event must be here to use non-mutated values\\n            emit UpdateRate(_currentRateInfo.ratePerSec, _deltaTime, _utilizationRate, _newRate);\\n\\n            // Effects: bookkeeping\\n            _currentRateInfo.ratePerSec = _newRate;\\n            _currentRateInfo.lastTimestamp = uint64(block.timestamp);\\n            _currentRateInfo.lastBlock = uint64(block.number);\\n\\n            // Calculate interest accrued\\n            _interestEarned = (_deltaTime * _totalBorrow.amount * _currentRateInfo.ratePerSec) / 1e18;\\n\\n            // Accumulate interest and fees, only if no overflow upon casting\\n            if (\\n                _interestEarned + _totalBorrow.amount <= type(uint128).max &&\\n                _interestEarned + _totalAsset.amount <= type(uint128).max\\n            ) {\\n                _totalBorrow.amount += uint128(_interestEarned);\\n                _totalAsset.amount += uint128(_interestEarned);\\n                if (_currentRateInfo.feeToProtocolRate > 0) {\\n                    _feesAmount = (_interestEarned * _currentRateInfo.feeToProtocolRate) / FEE_PRECISION;\\n\\n                    _feesShare = (_feesAmount * _totalAsset.shares) / (_totalAsset.amount - _feesAmount);\\n\\n                    // Effects: Give new shares to this contract, effectively diluting lenders an amount equal to the fees\\n                    // We can safely cast because _feesShare < _feesAmount < interestEarned which is always less than uint128\\n                    _totalAsset.shares += uint128(_feesShare);\\n\\n                    // Effects: write to storage\\n                    _mint(address(this), _feesShare);\\n                }\\n                emit AddInterest(_interestEarned, _currentRateInfo.ratePerSec, _deltaTime, _feesAmount, _feesShare);\\n            }\\n\\n            // Effects: write to storage\\n            totalAsset = _totalAsset;\\n            currentRateInfo = _currentRateInfo;\\n            totalBorrow = _totalBorrow;\\n        }\\n    }\\n\\n    // ============================================================================================\\n    // Functions: ExchangeRate\\n    // ============================================================================================\\n    /// @notice The ```UpdateExchangeRate``` event is emitted when the Collateral:Asset exchange rate is updated\\n    /// @param _rate The new rate given as the amount of Collateral Token to buy 1e18 Asset Token\\n    event UpdateExchangeRate(uint256 _rate);\\n\\n    /// @notice The ```updateExchangeRate``` function is the external implementation of _updateExchangeRate.\\n    /// @dev This function is invoked at most once per block as these queries can be expensive\\n    /// @return _exchangeRate The new exchange rate\\n    function updateExchangeRate() external nonReentrant returns (uint256 _exchangeRate) {\\n        _exchangeRate = _updateExchangeRate();\\n    }\\n\\n    /// @notice The ```_updateExchangeRate``` function retrieves the latest exchange rate. i.e how much collateral to buy 1e18 asset.\\n    /// @dev This function is invoked at most once per block as these queries can be expensive\\n    /// @return _exchangeRate The new exchange rate\\n    function _updateExchangeRate() internal returns (uint256 _exchangeRate) {\\n        ExchangeRateInfo memory _exchangeRateInfo = exchangeRateInfo;\\n        if (_exchangeRateInfo.lastTimestamp == block.timestamp) {\\n            return _exchangeRate = _exchangeRateInfo.exchangeRate;\\n        }\\n\\n        uint256 _price = uint256(1e36);\\n        if (oracleMultiply != address(0)) {\\n            (, int256 _answer, , , ) = AggregatorV3Interface(oracleMultiply).latestRoundData();\\n            if (_answer <= 0) {\\n                revert OracleLTEZero(oracleMultiply);\\n            }\\n            _price = _price * uint256(_answer);\\n        }\\n\\n        if (oracleDivide != address(0)) {\\n            (, int256 _answer, , , ) = AggregatorV3Interface(oracleDivide).latestRoundData();\\n            if (_answer <= 0) {\\n                revert OracleLTEZero(oracleDivide);\\n            }\\n            _price = _price / uint256(_answer);\\n        }\\n\\n        _exchangeRate = _price / oracleNormalization;\\n\\n        // write to storage, if no overflow\\n        if (_exchangeRate > type(uint224).max) revert PriceTooLarge();\\n        _exchangeRateInfo.exchangeRate = uint224(_exchangeRate);\\n        _exchangeRateInfo.lastTimestamp = uint32(block.timestamp);\\n        exchangeRateInfo = _exchangeRateInfo;\\n        emit UpdateExchangeRate(_exchangeRate);\\n    }\\n\\n    // ============================================================================================\\n    // Functions: Lending\\n    // ============================================================================================\\n\\n    /// @notice The ```Deposit``` event fires when a user deposits assets to the pair\\n    /// @param caller the msg.sender\\n    /// @param owner the account the fTokens are sent to\\n    /// @param assets the amount of assets deposited\\n    /// @param shares the number of fTokens minted\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    /// @notice The ```_deposit``` function is the internal implementation for lending assets\\n    /// @dev Caller must invoke ```ERC20.approve``` on the Asset Token contract prior to calling function\\n    /// @param _totalAsset An in memory VaultAccount struct representing the total amounts and shares for the Asset Token\\n    /// @param _amount The amount of Asset Token to be transferred\\n    /// @param _shares The amount of Asset Shares (fTokens) to be minted\\n    /// @param _receiver The address to receive the Asset Shares (fTokens)\\n    function _deposit(\\n        VaultAccount memory _totalAsset,\\n        uint128 _amount,\\n        uint128 _shares,\\n        address _receiver\\n    ) internal {\\n        // Effects: bookkeeping\\n        _totalAsset.amount += _amount;\\n        _totalAsset.shares += _shares;\\n\\n        // Effects: write back to storage\\n        _mint(_receiver, _shares);\\n        totalAsset = _totalAsset;\\n\\n        // Interactions\\n        assetContract.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Deposit(msg.sender, _receiver, _amount, _shares);\\n    }\\n\\n    /// @notice The ```deposit``` function allows a user to Lend Assets by specifying the amount of Asset Tokens to lend\\n    /// @dev Caller must invoke ```ERC20.approve``` on the Asset Token contract prior to calling function\\n    /// @param _amount The amount of Asset Token to transfer to Pair\\n    /// @param _receiver The address to receive the Asset Shares (fTokens)\\n    /// @return _sharesReceived The number of fTokens received for the deposit\\n    function deposit(uint256 _amount, address _receiver)\\n        external\\n        nonReentrant\\n        isNotPastMaturity\\n        whenNotPaused\\n        approvedLender(_receiver)\\n        returns (uint256 _sharesReceived)\\n    {\\n        _addInterest();\\n        VaultAccount memory _totalAsset = totalAsset;\\n        _sharesReceived = _totalAsset.toShares(_amount, false);\\n        _deposit(_totalAsset, _amount.toUint128(), _sharesReceived.toUint128(), _receiver);\\n    }\\n\\n    /// @notice The ```Withdraw``` event fires when a user redeems their fTokens for the underlying asset\\n    /// @param caller the msg.sender\\n    /// @param receiver The address to which the underlying asset will be transferred to\\n    /// @param owner The owner of the fTokens\\n    /// @param assets The assets transferred\\n    /// @param shares The number of fTokens burned\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /// @notice The ```_redeem``` function is an internal implementation which allows a Lender to pull their Asset Tokens out of the Pair\\n    /// @dev Caller must invoke ```ERC20.approve``` on the Asset Token contract prior to calling function\\n    /// @param _totalAsset An in-memory VaultAccount struct which holds the total amount of Asset Tokens and the total number of Asset Shares (fTokens)\\n    /// @param _amountToReturn The number of Asset Tokens to return\\n    /// @param _shares The number of Asset Shares (fTokens) to burn\\n    /// @param _receiver The address to which the Asset Tokens will be transferred\\n    /// @param _owner The owner of the Asset Shares (fTokens)\\n    function _redeem(\\n        VaultAccount memory _totalAsset,\\n        uint128 _amountToReturn,\\n        uint128 _shares,\\n        address _receiver,\\n        address _owner\\n    ) internal {\\n        if (msg.sender != _owner) {\\n            uint256 allowed = allowance(_owner, msg.sender);\\n            // NOTE: This will revert on underflow ensuring that allowance > shares\\n            if (allowed != type(uint256).max) _approve(_owner, msg.sender, allowed - _shares);\\n        }\\n\\n        // Check for sufficient withdraw liquidity\\n        uint256 _assetsAvailable = _totalAssetAvailable(_totalAsset, totalBorrow);\\n        if (_assetsAvailable < _amountToReturn) {\\n            revert InsufficientAssetsInContract(_assetsAvailable, _amountToReturn);\\n        }\\n\\n        // Effects: bookkeeping\\n        _totalAsset.amount -= _amountToReturn;\\n        _totalAsset.shares -= _shares;\\n\\n        // Effects: write to storage\\n        totalAsset = _totalAsset;\\n        _burn(_owner, _shares);\\n\\n        // Interactions\\n        assetContract.safeTransfer(_receiver, _amountToReturn);\\n        emit Withdraw(msg.sender, _receiver, _owner, _amountToReturn, _shares);\\n    }\\n\\n    /// @notice The ```redeem``` function allows the caller to redeem their Asset Shares for Asset Tokens\\n    /// @param _shares The number of Asset Shares (fTokens) to burn for Asset Tokens\\n    /// @param _receiver The address to which the Asset Tokens will be transferred\\n    /// @param _owner The owner of the Asset Shares (fTokens)\\n    /// @return _amountToReturn The amount of Asset Tokens to be transferred\\n    function redeem(\\n        uint256 _shares,\\n        address _receiver,\\n        address _owner\\n    ) external nonReentrant returns (uint256 _amountToReturn) {\\n        _addInterest();\\n        VaultAccount memory _totalAsset = totalAsset;\\n        _amountToReturn = _totalAsset.toAmount(_shares, false);\\n        _redeem(_totalAsset, _amountToReturn.toUint128(), _shares.toUint128(), _receiver, _owner);\\n    }\\n\\n    // ============================================================================================\\n    // Functions: Borrowing\\n    // ============================================================================================\\n\\n    /// @notice The ```BorrowAsset``` event is emitted when a borrower increases their position\\n    /// @param _borrower The borrower whose account was debited\\n    /// @param _receiver The address to which the Asset Tokens were transferred\\n    /// @param _borrowAmount The amount of Asset Tokens transferred\\n    /// @param _sharesAdded The number of Borrow Shares the borrower was debited\\n    event BorrowAsset(\\n        address indexed _borrower,\\n        address indexed _receiver,\\n        uint256 _borrowAmount,\\n        uint256 _sharesAdded\\n    );\\n\\n    /// @notice The ```_borrowAsset``` function is the internal implementation for borrowing assets\\n    /// @param _borrowAmount The amount of the Asset Token to borrow\\n    /// @param _receiver The address to receive the Asset Tokens\\n    /// @return _sharesAdded The amount of borrow shares the msg.sender will be debited\\n    function _borrowAsset(uint128 _borrowAmount, address _receiver) internal returns (uint256 _sharesAdded) {\\n        VaultAccount memory _totalBorrow = totalBorrow;\\n\\n        // Check available capital\\n        uint256 _assetsAvailable = _totalAssetAvailable(totalAsset, _totalBorrow);\\n        if (_assetsAvailable < _borrowAmount) {\\n            revert InsufficientAssetsInContract(_assetsAvailable, _borrowAmount);\\n        }\\n\\n        // Effects: Bookkeeping to add shares & amounts to total Borrow accounting\\n        _sharesAdded = _totalBorrow.toShares(_borrowAmount, true);\\n        _totalBorrow.amount += _borrowAmount;\\n        _totalBorrow.shares += uint128(_sharesAdded);\\n        // NOTE: we can safely cast here because shares are always less than amount and _borrowAmount is uint128\\n\\n        // Effects: write back to storage\\n        totalBorrow = _totalBorrow;\\n        userBorrowShares[msg.sender] += _sharesAdded;\\n\\n        // Interactions\\n        if (_receiver != address(this)) {\\n            assetContract.safeTransfer(_receiver, _borrowAmount);\\n        }\\n        emit BorrowAsset(msg.sender, _receiver, _borrowAmount, _sharesAdded);\\n    }\\n\\n    /// @notice The ```borrowAsset``` function allows a user to open/increase a borrow position\\n    /// @dev Borrower must call ```ERC20.approve``` on the Collateral Token contract if applicable\\n    /// @param _borrowAmount The amount of Asset Token to borrow\\n    /// @param _collateralAmount The amount of Collateral Token to transfer to Pair\\n    /// @param _receiver The address which will receive the Asset Tokens\\n    /// @return _shares The number of borrow Shares the msg.sender will be debited\\n    function borrowAsset(\\n        uint256 _borrowAmount,\\n        uint256 _collateralAmount,\\n        address _receiver\\n    )\\n        external\\n        isNotPastMaturity\\n        whenNotPaused\\n        nonReentrant\\n        isSolvent(msg.sender)\\n        approvedBorrower\\n        returns (uint256 _shares)\\n    {\\n        _addInterest();\\n        _updateExchangeRate();\\n        if (_collateralAmount > 0) {\\n            _addCollateral(msg.sender, _collateralAmount, msg.sender);\\n        }\\n        _shares = _borrowAsset(_borrowAmount.toUint128(), _receiver);\\n    }\\n\\n    event AddCollateral(address indexed _sender, address indexed _borrower, uint256 _collateralAmount);\\n\\n    /// @notice The ```_addCollateral``` function is an internal implementation for adding collateral to a borrowers position\\n    /// @param _sender The source of funds for the new collateral\\n    /// @param _collateralAmount The amount of Collateral Token to be transferred\\n    /// @param _borrower The borrower account for which the collateral should be credited\\n    function _addCollateral(\\n        address _sender,\\n        uint256 _collateralAmount,\\n        address _borrower\\n    ) internal {\\n        // Effects: write to state\\n        userCollateralBalance[_borrower] += _collateralAmount;\\n        totalCollateral += _collateralAmount;\\n\\n        // Interactions\\n        if (_sender != address(this)) {\\n            collateralContract.safeTransferFrom(_sender, address(this), _collateralAmount);\\n        }\\n        emit AddCollateral(_sender, _borrower, _collateralAmount);\\n    }\\n\\n    /// @notice The ```addCollateral``` function allows the caller to add Collateral Token to a borrowers position\\n    /// @dev msg.sender must call ERC20.approve() on the Collateral Token contract prior to invocation\\n    /// @param _collateralAmount The amount of Collateral Token to be added to borrower's position\\n    /// @param _borrower The account to be credited\\n    function addCollateral(uint256 _collateralAmount, address _borrower) external nonReentrant isNotPastMaturity {\\n        _addInterest();\\n        _addCollateral(msg.sender, _collateralAmount, _borrower);\\n    }\\n\\n    /// @notice The ```RemoveCollateral``` event is emitted when collateral is removed from a borrower's position\\n    /// @param _sender The account from which funds are transferred\\n    /// @param _collateralAmount The amount of Collateral Token to be transferred\\n    /// @param _receiver The address to which Collateral Tokens will be transferred\\n    event RemoveCollateral(\\n        address indexed _sender,\\n        uint256 _collateralAmount,\\n        address indexed _receiver,\\n        address indexed _borrower\\n    );\\n\\n    /// @notice The ```_removeCollateral``` function is the internal implementation for removing collateral from a borrower's position\\n    /// @param _collateralAmount The amount of Collateral Token to remove from the borrower's position\\n    /// @param _receiver The address to receive the Collateral Token transferred\\n    /// @param _borrower The borrower whose account will be debited the Collateral amount\\n    function _removeCollateral(\\n        uint256 _collateralAmount,\\n        address _receiver,\\n        address _borrower\\n    ) internal {\\n        // Effects: write to state\\n        // Following line will revert on underflow if _collateralAmount > userCollateralBalance\\n        userCollateralBalance[_borrower] -= _collateralAmount;\\n        // Following line will revert on underflow if totalCollateral < _collateralAmount\\n        totalCollateral -= _collateralAmount;\\n\\n        // Interactions\\n        if (_receiver != address(this)) {\\n            collateralContract.safeTransfer(_receiver, _collateralAmount);\\n        }\\n        emit RemoveCollateral(msg.sender, _collateralAmount, _receiver, _borrower);\\n    }\\n\\n    /// @notice The ```removeCollateral``` function is used to remove collateral from msg.sender's borrow position\\n    /// @dev msg.sender must be solvent after invocation or transaction will revert\\n    /// @param _collateralAmount The amount of Collateral Token to transfer\\n    /// @param _receiver The address to receive the transferred funds\\n    function removeCollateral(uint256 _collateralAmount, address _receiver)\\n        external\\n        nonReentrant\\n        isSolvent(msg.sender)\\n    {\\n        _addInterest();\\n        // Note: exchange rate is irrelevant when borrower has no debt shares\\n        if (userBorrowShares[msg.sender] > 0) {\\n            _updateExchangeRate();\\n        }\\n        _removeCollateral(_collateralAmount, _receiver, msg.sender);\\n    }\\n\\n    /// @notice The ```RepayAsset``` event is emitted whenever a debt position is repaid\\n    /// @param _payer The address paying for the repayment\\n    /// @param _borrower The borrower whose account will be credited\\n    /// @param _amountToRepay The amount of Asset token to be transferred\\n    /// @param _shares The amount of Borrow Shares which will be debited from the borrower after repayment\\n    event RepayAsset(address indexed _payer, address indexed _borrower, uint256 _amountToRepay, uint256 _shares);\\n\\n    /// @notice The ```_repayAsset``` function is the internal implementation for repaying a borrow position\\n    /// @dev The payer must have called ERC20.approve() on the Asset Token contract prior to invocation\\n    /// @param _totalBorrow An in memory copy of the totalBorrow VaultAccount struct\\n    /// @param _amountToRepay The amount of Asset Token to transfer\\n    /// @param _shares The number of Borrow Shares the sender is repaying\\n    /// @param _payer The address from which funds will be transferred\\n    /// @param _borrower The borrower account which will be credited\\n    function _repayAsset(\\n        VaultAccount memory _totalBorrow,\\n        uint128 _amountToRepay,\\n        uint128 _shares,\\n        address _payer,\\n        address _borrower\\n    ) internal {\\n        // Effects: Bookkeeping\\n        _totalBorrow.amount -= _amountToRepay;\\n        _totalBorrow.shares -= _shares;\\n\\n        // Effects: write to state\\n        userBorrowShares[_borrower] -= _shares;\\n        totalBorrow = _totalBorrow;\\n\\n        // Interactions\\n        if (_payer != address(this)) {\\n            assetContract.safeTransferFrom(_payer, address(this), _amountToRepay);\\n        }\\n        emit RepayAsset(_payer, _borrower, _amountToRepay, _shares);\\n    }\\n\\n    /// @notice The ```repayAsset``` function allows the caller to pay down the debt for a given borrower.\\n    /// @dev Caller must first invoke ```ERC20.approve()``` for the Asset Token contract\\n    /// @param _shares The number of Borrow Shares which will be repaid by the call\\n    /// @param _borrower The account for which the debt will be reduced\\n    /// @return _amountToRepay The amount of Asset Tokens which were transferred in order to repay the Borrow Shares\\n    function repayAsset(uint256 _shares, address _borrower) external nonReentrant returns (uint256 _amountToRepay) {\\n        _addInterest();\\n        VaultAccount memory _totalBorrow = totalBorrow;\\n        _amountToRepay = _totalBorrow.toAmount(_shares, true);\\n        _repayAsset(_totalBorrow, _amountToRepay.toUint128(), _shares.toUint128(), msg.sender, _borrower);\\n    }\\n\\n    // ============================================================================================\\n    // Functions: Liquidations\\n    // ============================================================================================\\n    /// @notice The ```Liquidate``` event is emitted when a liquidation occurs\\n    /// @param _borrower The borrower account for which the liquidation occurred\\n    /// @param _collateralForLiquidator The amount of Collateral Token transferred to the liquidator\\n    /// @param _sharesToLiquidate The number of Borrow Shares the liquidator repaid on behalf of the borrower\\n    /// @param _sharesToAdjust The number of Borrow Shares that were adjusted on liabilities and assets (a writeoff)\\n    event Liquidate(\\n        address indexed _borrower,\\n        uint256 _collateralForLiquidator,\\n        uint256 _sharesToLiquidate,\\n        uint256 _amountLiquidatorToRepay,\\n        uint256 _sharesToAdjust,\\n        uint256 _amountToAdjust\\n    );\\n\\n    /// @notice The ```liquidate``` function allows a third party to repay a borrower's debt if they have become insolvent\\n    /// @dev Caller must invoke ```ERC20.approve``` on the Asset Token contract prior to calling ```Liquidate()```\\n    /// @param _sharesToLiquidate The number of Borrow Shares repaid by the liquidator\\n    /// @param _deadline The timestamp after which tx will revert\\n    /// @param _borrower The account for which the repayment is credited and from whom collateral will be taken\\n    /// @return _collateralForLiquidator The amount of Collateral Token transferred to the liquidator\\n    function liquidate(\\n        uint128 _sharesToLiquidate,\\n        uint256 _deadline,\\n        address _borrower\\n    ) external whenNotPaused nonReentrant approvedLender(msg.sender) returns (uint256 _collateralForLiquidator) {\\n        if (block.timestamp > _deadline) revert PastDeadline(block.timestamp, _deadline);\\n\\n        _addInterest();\\n        uint256 _exchangeRate = _updateExchangeRate();\\n\\n        if (_isSolvent(_borrower, _exchangeRate)) {\\n            revert BorrowerSolvent();\\n        }\\n\\n        // Read from state\\n        VaultAccount memory _totalBorrow = totalBorrow;\\n        uint256 _userCollateralBalance = userCollateralBalance[_borrower];\\n        uint128 _borrowerShares = userBorrowShares[_borrower].toUint128();\\n\\n        // Prevent stack-too-deep\\n        int256 _leftoverCollateral;\\n        {\\n            // Checks & Calculations\\n            // Determine the liquidation amount in collateral units (i.e. how much debt is liquidator going to repay)\\n            uint256 _liquidationAmountInCollateralUnits = ((_totalBorrow.toAmount(_sharesToLiquidate, false) *\\n                _exchangeRate) / EXCHANGE_PRECISION);\\n\\n            // We first optimistically calculate the amount of collateral to give the liquidator based on the higher clean liquidation fee\\n            // This fee only applies if the liquidator does a full liquidation\\n            uint256 _optimisticCollateralForLiquidator = (_liquidationAmountInCollateralUnits *\\n                (LIQ_PRECISION + cleanLiquidationFee)) / LIQ_PRECISION;\\n\\n            // Because interest accrues every block, _liquidationAmountInCollateralUnits from a few lines up is an ever increasing value\\n            // This means that leftoverCollateral can occasionally go negative by a few hundred wei (cleanLiqFee premium covers this for liquidator)\\n            _leftoverCollateral = (_userCollateralBalance.toInt256() - _optimisticCollateralForLiquidator.toInt256());\\n\\n            // If cleanLiquidation fee results in no leftover collateral, give liquidator all the collateral\\n            // This will only be true when there liquidator is cleaning out the position\\n            _collateralForLiquidator = _leftoverCollateral <= 0\\n                ? _userCollateralBalance\\n                : (_liquidationAmountInCollateralUnits * (LIQ_PRECISION + dirtyLiquidationFee)) / LIQ_PRECISION;\\n        }\\n        // Calculated here for use during repayment, grouped with other calcs before effects start\\n        uint128 _amountLiquidatorToRepay = (_totalBorrow.toAmount(_sharesToLiquidate, true)).toUint128();\\n\\n        // Determine if and how much debt to adjust\\n        uint128 _sharesToAdjust;\\n        {\\n            uint128 _amountToAdjust;\\n            if (_leftoverCollateral <= 0) {\\n                // Determine if we need to adjust any shares\\n                _sharesToAdjust = _borrowerShares - _sharesToLiquidate;\\n                if (_sharesToAdjust > 0) {\\n                    // Write off bad debt\\n                    _amountToAdjust = (_totalBorrow.toAmount(_sharesToAdjust, false)).toUint128();\\n\\n                    // Note: Ensure this memory struct will be passed to _repayAsset for write to state\\n                    _totalBorrow.amount -= _amountToAdjust;\\n\\n                    // Effects: write to state\\n                    totalAsset.amount -= _amountToAdjust;\\n                }\\n            }\\n            emit Liquidate(\\n                _borrower,\\n                _collateralForLiquidator,\\n                _sharesToLiquidate,\\n                _amountLiquidatorToRepay,\\n                _sharesToAdjust,\\n                _amountToAdjust\\n            );\\n        }\\n\\n        // Effects & Interactions\\n        // NOTE: reverts if _shares > userBorrowShares\\n        _repayAsset(\\n            _totalBorrow,\\n            _amountLiquidatorToRepay,\\n            _sharesToLiquidate + _sharesToAdjust,\\n            msg.sender,\\n            _borrower\\n        ); // liquidator repays shares on behalf of borrower\\n        // NOTE: reverts if _collateralForLiquidator > userCollateralBalance\\n        // Collateral is removed on behalf of borrower and sent to liquidator\\n        // NOTE: reverts if _collateralForLiquidator > userCollateralBalance\\n        _removeCollateral(_collateralForLiquidator, msg.sender, _borrower);\\n    }\\n\\n    // ============================================================================================\\n    // Functions: Leverage\\n    // ============================================================================================\\n\\n    /// @notice The ```LeveragedPosition``` event is emitted when a borrower takes out a new leveraged position\\n    /// @param _borrower The account for which the debt is debited\\n    /// @param _swapperAddress The address of the swapper which conforms the FraxSwap interface\\n    /// @param _borrowAmount The amount of Asset Token to be borrowed to be borrowed\\n    /// @param _borrowShares The number of Borrow Shares the borrower is credited\\n    /// @param _initialCollateralAmount The amount of initial Collateral Tokens supplied by the borrower\\n    /// @param _amountCollateralOut The amount of Collateral Token which was received for the Asset Tokens\\n    event LeveragedPosition(\\n        address indexed _borrower,\\n        address _swapperAddress,\\n        uint256 _borrowAmount,\\n        uint256 _borrowShares,\\n        uint256 _initialCollateralAmount,\\n        uint256 _amountCollateralOut\\n    );\\n\\n    /// @notice The ```leveragedPosition``` function allows a user to enter a leveraged borrow position with minimal upfront Collateral\\n    /// @dev Caller must invoke ```ERC20.approve()``` on the Collateral Token contract prior to calling function\\n    /// @param _swapperAddress The address of the whitelisted swapper to use to swap borrowed Asset Tokens for Collateral Tokens\\n    /// @param _borrowAmount The amount of Asset Tokens borrowed\\n    /// @param _initialCollateralAmount The initial amount of Collateral Tokens supplied by the borrower\\n    /// @param _amountCollateralOutMin The minimum amount of Collateral Tokens to be received in exchange for the borrowed Asset Tokens\\n    /// @param _path An array containing the addresses of ERC20 tokens to swap.  Adheres to UniV2 style path params.\\n    /// @return _totalCollateralBalance The total amount of Collateral Tokens added to a users account (initial + swap)\\n    function leveragedPosition(\\n        address _swapperAddress,\\n        uint256 _borrowAmount,\\n        uint256 _initialCollateralAmount,\\n        uint256 _amountCollateralOutMin,\\n        address[] memory _path\\n    )\\n        external\\n        isNotPastMaturity\\n        nonReentrant\\n        whenNotPaused\\n        approvedBorrower\\n        isSolvent(msg.sender)\\n        returns (uint256 _totalCollateralBalance)\\n    {\\n        _addInterest();\\n        _updateExchangeRate();\\n\\n        IERC20 _assetContract = assetContract;\\n        IERC20 _collateralContract = collateralContract;\\n\\n        if (!swappers[_swapperAddress]) {\\n            revert BadSwapper();\\n        }\\n        if (_path[0] != address(_assetContract)) {\\n            revert InvalidPath(address(_assetContract), _path[0]);\\n        }\\n        if (_path[_path.length - 1] != address(_collateralContract)) {\\n            revert InvalidPath(address(_collateralContract), _path[_path.length - 1]);\\n        }\\n\\n        // Add initial collateral\\n        if (_initialCollateralAmount > 0) {\\n            _addCollateral(msg.sender, _initialCollateralAmount, msg.sender);\\n        }\\n\\n        // Debit borrowers account\\n        // setting recipient to address(this) means no transfer will happen\\n        uint256 _borrowShares = _borrowAsset(_borrowAmount.toUint128(), address(this));\\n\\n        // Interactions\\n        _assetContract.approve(_swapperAddress, _borrowAmount);\\n\\n        // Even though swappers are trusted, we verify the balance before and after swap\\n        uint256 _initialCollateralBalance = _collateralContract.balanceOf(address(this));\\n        ISwapper(_swapperAddress).swapExactTokensForTokens(\\n            _borrowAmount,\\n            _amountCollateralOutMin,\\n            _path,\\n            address(this),\\n            block.timestamp\\n        );\\n        uint256 _finalCollateralBalance = _collateralContract.balanceOf(address(this));\\n\\n        // Note: VIOLATES CHECKS-EFFECTS-INTERACTION pattern, make sure function is NONREENTRANT\\n        // Effects: bookkeeping & write to state\\n        uint256 _amountCollateralOut = _finalCollateralBalance - _initialCollateralBalance;\\n        if (_amountCollateralOut < _amountCollateralOutMin) {\\n            revert SlippageTooHigh(_amountCollateralOutMin, _amountCollateralOut);\\n        }\\n\\n        // address(this) as _sender means no transfer occurs as the pair has already received the collateral during swap\\n        _addCollateral(address(this), _amountCollateralOut, msg.sender);\\n\\n        _totalCollateralBalance = _initialCollateralAmount + _amountCollateralOut;\\n        emit LeveragedPosition(\\n            msg.sender,\\n            _swapperAddress,\\n            _borrowAmount,\\n            _borrowShares,\\n            _initialCollateralAmount,\\n            _amountCollateralOut\\n        );\\n    }\\n\\n    /// @notice The ```RepayAssetWithCollateral``` event is emitted whenever ```repayAssetWithCollateral()``` is invoked\\n    /// @param _borrower The borrower account for which the repayment is taking place\\n    /// @param _swapperAddress The address of the whitelisted swapper to use for token swaps\\n    /// @param _collateralToSwap The amount of Collateral Token to swap and use for repayment\\n    /// @param _amountAssetOut The amount of Asset Token which was repaid\\n    /// @param _sharesRepaid The number of Borrow Shares which were repaid\\n    event RepayAssetWithCollateral(\\n        address indexed _borrower,\\n        address _swapperAddress,\\n        uint256 _collateralToSwap,\\n        uint256 _amountAssetOut,\\n        uint256 _sharesRepaid\\n    );\\n\\n    /// @notice The ```repayAssetWithCollateral``` function allows a borrower to repay their debt using existing collateral in contract\\n    /// @param _swapperAddress The address of the whitelisted swapper to use for token swaps\\n    /// @param _collateralToSwap The amount of Collateral Tokens to swap for Asset Tokens\\n    /// @param _amountAssetOutMin The minimum amount of Asset Tokens to receive during the swap\\n    /// @param _path An array containing the addresses of ERC20 tokens to swap.  Adheres to UniV2 style path params.\\n    /// @return _amountAssetOut The amount of Asset Tokens received for the Collateral Tokens, the amount the borrowers account was credited\\n    function repayAssetWithCollateral(\\n        address _swapperAddress,\\n        uint256 _collateralToSwap,\\n        uint256 _amountAssetOutMin,\\n        address[] calldata _path\\n    ) external nonReentrant isSolvent(msg.sender) returns (uint256 _amountAssetOut) {\\n        _addInterest();\\n        _updateExchangeRate();\\n\\n        IERC20 _assetContract = assetContract;\\n        IERC20 _collateralContract = collateralContract;\\n\\n        if (!swappers[_swapperAddress]) {\\n            revert BadSwapper();\\n        }\\n        if (_path[0] != address(_collateralContract)) {\\n            revert InvalidPath(address(_collateralContract), _path[0]);\\n        }\\n        if (_path[_path.length - 1] != address(_assetContract)) {\\n            revert InvalidPath(address(_assetContract), _path[_path.length - 1]);\\n        }\\n\\n        // Effects: bookkeeping & write to state\\n        // Debit users collateral balance in preparation for swap, setting _recipient to address(this) means no transfer occurs\\n        _removeCollateral(_collateralToSwap, address(this), msg.sender);\\n\\n        // Interactions\\n        _collateralContract.approve(_swapperAddress, _collateralToSwap);\\n\\n        // Even though swappers are trusted, we verify the balance before and after swap\\n        uint256 _initialAssetBalance = _assetContract.balanceOf(address(this));\\n        ISwapper(_swapperAddress).swapExactTokensForTokens(\\n            _collateralToSwap,\\n            _amountAssetOutMin,\\n            _path,\\n            address(this),\\n            block.timestamp\\n        );\\n        uint256 _finalAssetBalance = _assetContract.balanceOf(address(this));\\n\\n        // Note: VIOLATES CHECKS-EFFECTS-INTERACTION pattern, make sure function is NONREENTRANT\\n        // Effects: bookkeeping\\n        _amountAssetOut = _finalAssetBalance - _initialAssetBalance;\\n        if (_amountAssetOut < _amountAssetOutMin) {\\n            revert SlippageTooHigh(_amountAssetOutMin, _amountAssetOut);\\n        }\\n\\n        VaultAccount memory _totalBorrow = totalBorrow;\\n        uint256 _sharesToRepay = _totalBorrow.toShares(_amountAssetOut, false);\\n\\n        // Effects: write to state\\n        // Note: setting _payer to address(this) means no actual transfer will occur.  Contract already has funds\\n        _repayAsset(_totalBorrow, _amountAssetOut.toUint128(), _sharesToRepay.toUint128(), address(this), msg.sender);\\n\\n        emit RepayAssetWithCollateral(msg.sender, _swapperAddress, _collateralToSwap, _amountAssetOut, _sharesToRepay);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/VaultAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.16;\\n\\nstruct VaultAccount {\\n    uint128 amount; // Total amount, analogous to market cap\\n    uint128 shares; // Total shares, analogous to shares outstanding\\n}\\n\\n/// @title VaultAccount Library\\n/// @author Drake Evans (Frax Finance) github.com/drakeevans, modified from work by @Boring_Crypto github.com/boring_crypto\\n/// @notice Provides a library for use with the VaultAccount struct, provides convenient math implementations\\n/// @dev Uses uint128 to save on storage\\nlibrary VaultAccountingLibrary {\\n    /// @notice Calculates the shares value in relationship to `amount` and `total`\\n    /// @dev Given an amount, return the appropriate number of shares\\n    function toShares(\\n        VaultAccount memory total,\\n        uint256 amount,\\n        bool roundUp\\n    ) internal pure returns (uint256 shares) {\\n        if (total.amount == 0) {\\n            shares = amount;\\n        } else {\\n            shares = (amount * total.shares) / total.amount;\\n            if (roundUp && (shares * total.amount) / total.shares < amount) {\\n                shares = shares + 1;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the amount value in relationship to `shares` and `total`\\n    /// @dev Given a number of shares, returns the appropriate amount\\n    function toAmount(\\n        VaultAccount memory total,\\n        uint256 shares,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount) {\\n        if (total.shares == 0) {\\n            amount = shares;\\n        } else {\\n            amount = (shares * total.amount) / total.shares;\\n            if (roundUp && (amount * total.shares) / total.amount < shares) {\\n                amount = amount + 1;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { SafeERC20 as OZSafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n// solhint-disable max-line-length\\n\\n/// @title SafeERC20 provides helper functions for safe transfers as well as safe metadata access\\n/// @author Library originally written by @Boring_Crypto github.com/boring_crypto, modified by Drake Evans (Frax Finance) github.com/drakeevans\\n/// @dev original: https://github.com/boringcrypto/BoringSolidity/blob/fed25c5d43cb7ce20764cd0b838e21a02ea162e9/contracts/libraries/BoringERC20.sol\\nlibrary SafeERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        OZSafeERC20.safeTransfer(token, to, value);\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        OZSafeERC20.safeTransferFrom(token, from, to, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity >=0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    function asset() external view returns (address);\\n\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    function maxDeposit(address) external view returns (uint256);\\n\\n    function maxMint(address) external view returns (uint256);\\n\\n    function maxRedeem(address owner) external view returns (uint256);\\n\\n    function maxWithdraw(address owner) external view returns (uint256);\\n\\n    function previewDeposit(uint256 assets) external view returns (uint256);\\n\\n    function previewMint(uint256 shares) external view returns (uint256);\\n\\n    function previewRedeem(uint256 shares) external view returns (uint256);\\n\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IFraxlendWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity >=0.8.16;\\n\\ninterface IFraxlendWhitelist {\\n    function fraxlendDeployerWhitelist(address) external view returns (bool);\\n\\n    function oracleContractWhitelist(address) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function rateContractWhitelist(address) external view returns (bool);\\n\\n    function renounceOwnership() external;\\n\\n    function setFraxlendDeployerWhitelist(address[] calldata _addresses, bool _bool) external;\\n\\n    function setOracleContractWhitelist(address[] calldata _addresses, bool _bool) external;\\n\\n    function setRateContractWhitelist(address[] calldata _addresses, bool _bool) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IRateCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity >=0.8.16;\\n\\ninterface IRateCalculator {\\n    function name() external pure returns (string memory);\\n\\n    function requireValidInitData(bytes calldata _initData) external pure;\\n\\n    function getConstants() external pure returns (bytes memory _calldata);\\n\\n    function getNewRate(bytes calldata _data, bytes calldata _initData) external pure returns (uint64 _newRatePerSec);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/ISwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.16;\\n\\ninterface ISwapper {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 725\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_configData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_immutables\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_maxLTV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isBorrowerWhitelistActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isLenderWhitelistActive\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadProtocolFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadSwapper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerSolvent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerWhitelistRequired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"Insolvent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_request\",\"type\":\"uint256\"}],\"name\":\"InsufficientAssetsInContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_actual\",\"type\":\"address\"}],\"name\":\"InvalidPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NameEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDeployer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NotOnWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyApprovedBorrowers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyApprovedLenders\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyTimeLock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"OracleLTEZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"PastDeadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PastMaturity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolOrOwnerOnly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_actual\",\"type\":\"uint256\"}],\"name\":\"SlippageTooHigh\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"AddCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_interestEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_deltaTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feesAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feesShare\",\"type\":\"uint256\"}],\"name\":\"AddInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sharesAdded\",\"type\":\"uint256\"}],\"name\":\"BorrowAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_newFee\",\"type\":\"uint32\"}],\"name\":\"ChangeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapperAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_borrowShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_initialCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountCollateralOut\",\"type\":\"uint256\"}],\"name\":\"LeveragedPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralForLiquidator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sharesToLiquidate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountLiquidatorToRepay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sharesToAdjust\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountToAdjust\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"RemoveCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountToRepay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"RepayAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapperAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralToSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountAssetOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sharesRepaid\",\"type\":\"uint256\"}],\"name\":\"RepayAssetWithCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approval\",\"type\":\"bool\"}],\"name\":\"SetApprovedBorrower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approval\",\"type\":\"bool\"}],\"name\":\"SetApprovedLender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approval\",\"type\":\"bool\"}],\"name\":\"SetSwapper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"SetTimeLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"UpdateExchangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ratePerSec\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_deltaTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_utilizationRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newRatePerSec\",\"type\":\"uint256\"}],\"name\":\"UpdateRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"_shares\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountToTransfer\",\"type\":\"uint256\"}],\"name\":\"WithdrawFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CIRCUIT_BREAKER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPTROLLER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPLOYER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FRAXLEND_WHITELIST_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_LOCK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feesAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feesShare\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_newRate\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedBorrowers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedLenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"borrowAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerWhitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_newFee\",\"type\":\"uint32\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanLiquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRateInfo\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"lastBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"feeToProtocolRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"ratePerSec\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dirtyLiquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateInfo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"lastTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"exchangeRate\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConstants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_LTV_PRECISION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_LIQ_PRECISION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_UTIL_PREC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_FEE_PRECISION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_EXCHANGE_PRECISION\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_DEFAULT_INT\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_DEFAULT_PROTOCOL_FEE\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_MAX_PROTOCOL_FEE\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImmutableAddressBool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_assetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleMultiply\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleDivide\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rateContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DEPLOYER_CONTRACT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_COMPTROLLER_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FRAXLEND_WHITELIST\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_borrowerWhitelistActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_lenderWhitelistActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImmutableUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_oracleNormalization\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLTV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cleanLiquidationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairAccounting\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"_totalAssetAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_totalAssetShares\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_totalBorrowAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_totalBorrowShares\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_totalCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_userAssetShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userBorrowShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userCollateralBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_approvedBorrowers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_approvedLenders\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_rateInitCallData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lenderWhitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapperAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountCollateralOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"leveragedPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalCollateralBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_sharesToLiquidate\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralForLiquidator\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturityDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleDivide\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleMultiply\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleNormalization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateContract\",\"outputs\":[{\"internalType\":\"contract IRateCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateInitCallData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToReturn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"removeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"repayAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToRepay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapperAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAssetOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"repayAssetWithCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountAssetOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_borrowers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_approval\",\"type\":\"bool\"}],\"name\":\"setApprovedBorrowers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lenders\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_approval\",\"type\":\"bool\"}],\"name\":\"setApprovedLenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approval\",\"type\":\"bool\"}],\"name\":\"setSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swappers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_roundUp\",\"type\":\"bool\"}],\"name\":\"toAssetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_roundUp\",\"type\":\"bool\"}],\"name\":\"toAssetShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_roundUp\",\"type\":\"bool\"}],\"name\":\"toBorrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_roundUp\",\"type\":\"bool\"}],\"name\":\"toBorrowShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAsset\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrow\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBorrowShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_shares\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToTransfer\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FraxlendPair", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "725", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000124f8000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000853d955acef822db058eb8505911ed77f175b99e000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b841900000000000000000000000000000000000000000000000000000002540be4000000000000000000000000003da1bf0be175b7caa38d67a6e78371947d2f51f700000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000fd3065c629ee890fd74f43b802c2fea4b7279b8c000000000000000000000000168200cf227d4543302686124ac28ae0eaf2ca0b0000000000000000000000008412ebf45bac1b340bbe8f318b928c466c4e39ca000000000000000000000000118c1462aa28bf2ea304f78f49c3388cfd93234e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}