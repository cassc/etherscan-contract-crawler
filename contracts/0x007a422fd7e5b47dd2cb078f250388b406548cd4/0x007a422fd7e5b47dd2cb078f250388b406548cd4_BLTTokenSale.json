{"SourceCode": "pragma solidity ^0.4.16;\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  \r\n   //@dev transfer token for a specified address\r\n  // @param _to The address to transfer to.\r\n   //@param _value The amount to be transferred.\r\n   \r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  \r\n   //@dev Gets the balance of the specified address.\r\n   //@param _owner The address to query the the balance of. \r\n  // @return An uint256 representing the amount owned by the passed address.\r\n  \r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n  \r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until \r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint256 _addedValue) \r\n    returns (bool success) \r\n    {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint256 _subtractedValue) \r\n    returns (bool success) \r\n    {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n    //@dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n    //@dev Throws if called by any account other than the owner.\r\n   modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n    //@dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    //@param newOwner The address to transfer ownership to.\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n    //@title Pausable\r\n    //@dev Base contract which allows children to implement an emergency stop mechanism for trading.\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n    //@dev Modifier to make a function callable only when the contract is not paused.\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n    //@dev Modifier to make a function callable only when the contract is paused.\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n    //@dev called by the owner to pause, triggers stopped state\r\n  function pause() onlyOwner whenNotPaused {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n    //@dev called by the owner to unpause, returns to normal state\r\n  function unpause() onlyOwner whenPaused {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n    //@title Pausable\r\n    //@dev Base contract which allows children to implement an emergency stop mechanism for crowdsale.\r\ncontract SalePausable is Ownable {\r\n  event SalePause();\r\n  event SaleUnpause();\r\n\r\n  bool public salePaused = false;\r\n\r\n    //@dev Modifier to make a function callable only when the contract is not paused.\r\n  modifier saleWhenNotPaused() {\r\n    require(!salePaused);\r\n    _;\r\n  }\r\n\r\n    //@dev Modifier to make a function callable only when the contract is paused.\r\n  modifier saleWhenPaused() {\r\n    require(salePaused);\r\n    _;\r\n  }\r\n\r\n    //@dev called by the owner to pause, triggers stopped state\r\n  function salePause() onlyOwner saleWhenNotPaused {\r\n    salePaused = true;\r\n    SalePause();\r\n  }\r\n    //@dev called by the owner to unpause, returns to normal state\r\n  function saleUnpause() onlyOwner saleWhenPaused {\r\n    salePaused = false;\r\n    SaleUnpause();\r\n  }\r\n}\r\n\r\ncontract PriceUpdate is Ownable {\r\n  uint256 public price;\r\n\r\n    //@dev The Ownable constructor sets the original `price` of the BLT token to the sender account.\r\n   function PriceUpdate() {\r\n    price = 400;\r\n  }\r\n\r\n    //@dev Allows the current owner to change the price of the token per ether.\r\n  function newPrice(uint256 _newPrice) onlyOwner {\r\n    require(_newPrice > 0);\r\n    price = _newPrice;\r\n  }\r\n\r\n}\r\n\r\ncontract BLTToken is StandardToken, Ownable, PriceUpdate, Pausable, SalePausable {\r\n\tusing SafeMath for uint256;\r\n\tmapping(address => uint256) balances;\r\n\tuint256 public totalSupply;\r\n    uint256 public totalCap = 100000000000000000000000000;\r\n    string \tpublic constant name = \"BitLifeAndTrust\";\r\n\tstring \tpublic constant symbol = \"BLT\";\r\n\tuint256\tpublic constant decimals = 18;\r\n\t//uint256 public price = 400;  moved to price setting contract\r\n    \r\n    address public bltRetainedAcc = 0x48259a35030c8dA6aaA1710fD31068D30bfc716C;  //holds blt company retained\r\n    address public bltOwnedAcc =    0x1CA33C197952B8D9dd0eDC9EFa20018D6B3dcF5F;  //holds blt company owned\r\n    address public bltMasterAcc =   0xACc2be4D782d472cf4f928b116054904e5513346; //master account to hold BLT\r\n\r\n    uint256 public bltRetained = 15000000000000000000000000;\r\n    uint256 public bltOwned =    15000000000000000000000000;\r\n    uint256 public bltMaster =   70000000000000000000000000;\r\n\r\n\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\r\n\t    return balances[_owner];\r\n\t}\r\n\r\n\r\n\tfunction transfer(address _to, uint256 _value) whenNotPaused returns (bool success) {\r\n\t    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t    balances[_to] = balances[_to].add(_value);\r\n\t    Transfer(msg.sender, _to, _value);\r\n\t    return true;\r\n\t}\r\n\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool success) {\r\n\t    \r\n\t    var allowance = allowed[_from][msg.sender];\r\n\t    \r\n\t    balances[_to] = balances[_to].add(_value);\r\n\t    balances[_from] = balances[_from].sub(_value);\r\n\t    allowed[_from][msg.sender] = allowance.sub(_value);\r\n\t    Transfer(_from, _to, _value);\r\n\t    return true;\r\n\t}\r\n\r\n\r\n\tfunction approve(address _spender, uint256 _value) returns (bool success) {\r\n\t    allowed[msg.sender][_spender] = _value;\r\n\t    Approval(msg.sender, _spender, _value);\r\n\t    return true;\r\n\t}\r\n\r\n\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n\t    return allowed[_owner][_spender];\r\n\t}\r\n\r\n\r\n\tfunction BLTToken() {\r\n\t\tbalances[bltRetainedAcc] = bltRetained;             // fund BLT Retained account\r\n        balances[bltOwnedAcc] = bltOwned;                   // fund BLT Owned account\r\n        balances[bltMasterAcc] = bltMaster;                 // fund BLT master account\r\n        \r\n        allowed[bltMasterAcc][msg.sender] = bltMaster;\r\n\r\n        totalSupply = bltRetained + bltOwned + bltMaster;\r\n\r\n        Transfer(0x0,bltRetainedAcc,bltRetained);\r\n        Transfer(0x0,bltOwnedAcc,bltOwned);\r\n        Transfer(0x0,bltMasterAcc,bltMaster);\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\ncontract BLTTokenSale is BLTToken {\r\n    using SafeMath for uint256;    \r\n\r\n    BLTToken public token;\r\n    uint256 public etherRaised;\r\n    uint256 public saleStartTime = now;\r\n    //uint256 public saleEndTime = now + 1 weeks;\r\n    address public ethDeposits = 0x50c19a8D73134F8e649bB7110F2E8860e4f6cfB6;        //ether goes to this account\r\n    address public bltMasterToSale = 0xACc2be4D782d472cf4f928b116054904e5513346;    //BLT available for sale\r\n\r\n    event MintedToken(address from, address to, uint256 value1);                    //event that Tokens were sent\r\n    event RecievedEther(address from, uint256 value1);                               //event that ether received function ran     \r\n\r\n    function () payable {\r\n\t\tcreateTokens(msg.sender,msg.value);\r\n\t}\r\n\r\n        //initiates the sale of the token\r\n\tfunction createTokens(address _recipient, uint256 _value) saleWhenNotPaused {\r\n        \r\n        require (_value != 0);                                                      //value must be greater than zero\r\n        require (now >= saleStartTime);                                             //only works during token sale\r\n        require (_recipient != 0x0);                                                //not a contract validation\r\n\t\tuint256 tokens = _value.mul(PriceUpdate.price);                             //calculate the number of tokens from the ether sent\r\n        uint256 remainingTokenSuppy = balanceOf(bltMasterToSale);\r\n\r\n        if (remainingTokenSuppy >= tokens) {                                        //only works if there is still a supply in the master account\r\n            require(mint(_recipient, tokens));                                      //execute the movement of tokens\r\n            etherRaised = etherRaised.add(_value);\r\n            forwardFunds();\r\n            RecievedEther(msg.sender,_value);\r\n        }                                        \r\n\r\n\t}\r\n    \r\n     //transfers BLT from storage account into the purchasers account   \r\n    function mint(address _to, uint256 _tokens) internal saleWhenNotPaused returns (bool success) {\r\n        \r\n        address _from = bltMasterToSale;\r\n\t    var allowance = allowed[_from][owner];\r\n\t    \r\n\t    balances[_to] = balances[_to].add(_tokens);\r\n\t    balances[_from] = balances[_from].sub(_tokens);\r\n\t    allowed[_from][owner] = allowance.sub(_tokens);\r\n        Transfer(_from, _to, _tokens);                                               //capture event in logs\r\n\t    MintedToken(_from,_to, _tokens); \r\n      return true;\r\n\t}    \r\n      //forwards ether to storage wallet  \r\n      function forwardFunds() internal {\r\n        ethDeposits.transfer(msg.value);\r\n        \r\n        }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bltRetained\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"salePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bltMasterToSale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bltOwnedAcc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bltMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bltMasterAcc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bltRetainedAcc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bltOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"salePause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"saleUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"newPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value1\",\"type\":\"uint256\"}],\"name\":\"MintedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value1\",\"type\":\"uint256\"}],\"name\":\"RecievedEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SalePause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleUnpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "BLTTokenSale", "CompilerVersion": "v0.4.16+commit.d7661dd9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c4296e47df982b989ea2217ac6d6c59ff21c8251cec8fbd8f692d16ddc3adff6"}