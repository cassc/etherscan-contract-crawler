{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/CryptBartex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract CryptBartex is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    uint public totalBartexed;\\n    uint public bartexTime;\\n    uint internal allNFTs;\\n    uint internal allTokens;\\n    uint internal allNatives;\\n    uint internal companyCommission;\\n    uint internal companyProfit;\\n\\n    struct Bartex {\\n        uint256 id;\\n        address proposer;\\n        address accepter;\\n        bool allowedToExchange;\\n        uint256[] itemProposerAcceptorIndex;\\n        uint256 remainingTime;\\n        uint8 status;\\n        uint8 assetTypeProvided;\\n        uint8 assetTypeRequired;\\n        bool proposerAcceptedEx;\\n        bool acceptorAcceptedEx;\\n        bool proposerCancelledEx;\\n        bool acceptorCancelledEx;\\n    }\\n\\n    struct NFTDetails {\\n        address[] tokenAddresses;\\n        uint256[] tokenIds;\\n    }\\n    struct TokenDetails {\\n        address[] tokenAddresses;\\n        uint256[] amounts;\\n    }\\n    struct NativeDetails {\\n        uint256 amount;\\n    }\\n\\n    enum BartexStatus {\\n        PROPOSED,\\n        ACCEPTED,\\n        REJECTED,\\n        EXCHANGED,\\n        CANCELLED,\\n        EXPIRED\\n    }\\n    enum AssetType {\\n        TOKEN,\\n        NFT,\\n        NATIVE\\n    }\\n\\n    mapping(uint => Bartex) public allBartexs;\\n    mapping(uint => NFTDetails) internal allNFTsBartexed;\\n    mapping(uint => TokenDetails) internal allTokensBartexed;\\n    mapping(uint => NativeDetails) internal allNativesBartexed;\\n    mapping(address => uint256[]) internal myBartex;\\n\\n    /**\\n     * @dev bartexExists check if the bartex exists\\n     * @param id Bartex id\\n     */\\n\\n    function bartexExists(uint id) private view {\\n        require(id < totalBartexed, \\\"BNE\\\");\\n    }\\n\\n    /**\\n     * @dev zeroAddress check if the address is valid\\n     * @param _address Address to check\\n     */\\n\\n    function zeroAddress(address _address) private pure {\\n        require(_address != address(0), \\\"Invalid address\\\");\\n    }\\n\\n    /**\\n     * @dev zeroAddresses check if the addresses are valid\\n     * @param _address Addresses to check\\n     */\\n\\n    function zeroAddresses(address[] memory _address) private pure {\\n        for (uint i = 0; i < _address.length; i++) {\\n            require(_address[i] != address(0), \\\"Invalid address\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev onlyAssetType check if the asset type is valid\\n     * @param _assetType Asset type to check\\n     */\\n\\n    function onlyAssetType(uint8 _assetType) private pure {\\n        require(\\n            _assetType == 0 || _assetType == 1 || _assetType == 2,\\n            \\\"Invalid asset\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev bothParties check if the user is valid\\n     * @param _bartexId Bartex id\\n     */\\n\\n    function bothParties(uint _bartexId) private view {\\n        require(\\n            allBartexs[_bartexId].proposer == msg.sender ||\\n                allBartexs[_bartexId].accepter == msg.sender,\\n            \\\"Invalid user\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev onlyArrayLengthProvided check if the array length is valid\\n     * @param _providedTokenAddresses provided token addresses\\n     * @param _tokenProvidedAmounts  provided token amounts\\n     * @param _assetTypeProvided asset type provided\\n     */\\n\\n    function onlyArrayLengthProvided(\\n        address[] memory _providedTokenAddresses,\\n        uint256[] memory _tokenProvidedAmounts,\\n        uint8 _assetTypeProvided\\n    ) private pure {\\n        if (_assetTypeProvided != uint8(AssetType.NATIVE)) {\\n            require(_tokenProvidedAmounts.length > 0, \\\"Invalid array length\\\");\\n            require(_providedTokenAddresses.length > 0, \\\"Invalid array length\\\");\\n            require(\\n                _providedTokenAddresses.length == _tokenProvidedAmounts.length,\\n                \\\"Invalid array length\\\"\\n            );\\n        } else {\\n            require(_tokenProvidedAmounts.length == 1, \\\"Invalid array length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev onlyArrayLengthRequired check if the array length is valid\\n     * @param _requiredTokenAddresses required token addresses\\n     * @param _tokenRequiredAmounts required token amounts\\n     */\\n\\n    function onlyArrayLengthRequired(\\n        address[] memory _requiredTokenAddresses,\\n        uint256[] memory _tokenRequiredAmounts\\n    ) private pure {\\n        require(_tokenRequiredAmounts.length > 0, \\\"Invalid array length\\\");\\n        require(_requiredTokenAddresses.length > 0, \\\"Invalid array length\\\");\\n        require(\\n            _requiredTokenAddresses.length == _tokenRequiredAmounts.length,\\n            \\\"Invalid array length\\\"\\n        );\\n    }\\n\\n    event BartexProposalCreated(\\n        address proposer,\\n        address accepter,\\n        uint256 bartexId\\n    );\\n    event BartexProposalAccepted(address accepter, uint256 bartexId);\\n    event BartexRejected(address rejecter, uint256 bartexId);\\n    event BartexExchanged(address proposer, address accepter, uint256 bartexId);\\n    event BartexExchangedCancelled(\\n        address proposer,\\n        address accepter,\\n        uint256 bartexId\\n    );\\n    event Withdrawn(address withdrawer, uint256 time);\\n\\n    /**\\n     * @dev Initializer for the presale contract\\n     */\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        companyCommission = 0 ether;\\n        bartexTime = 7 days;\\n    }\\n\\n    /**\\n     * @dev proposeForNativeBartex create a bartex for native\\n     * @param _acceptor acceptor address\\n     * @param _providedTokenAddresses provided token addresses\\n     * @param tokenProvidedAmounts provided token amounts\\n     * @param _tokenRequiredAmount required token amount\\n     * @param _assetTypeProvided asset type provided\\n     */\\n\\n    function proposeForNativeBartex(\\n        address _acceptor,\\n        address[] memory _providedTokenAddresses,\\n        uint256[] memory tokenProvidedAmounts,\\n        uint256 _tokenRequiredAmount,\\n        uint8 _assetTypeProvided\\n    ) external payable nonReentrant {\\n        zeroAddress(_acceptor);\\n        zeroAddresses(_providedTokenAddresses);\\n        onlyArrayLengthProvided(\\n            _providedTokenAddresses,\\n            tokenProvidedAmounts,\\n            _assetTypeProvided\\n        );\\n        onlyAssetType(_assetTypeProvided);\\n        require(_assetTypeProvided != uint8(AssetType.NATIVE), \\\"not allowed\\\");\\n        uint256 assetProposer = getProvidedAssetDetails(\\n            _providedTokenAddresses,\\n            tokenProvidedAmounts,\\n            _assetTypeProvided\\n        );\\n        allNativesBartexed[allNatives] = NativeDetails(_tokenRequiredAmount);\\n\\n        allBartexs[totalBartexed] = createBartex(\\n            _acceptor,\\n            assetProposer,\\n            allNatives,\\n            _assetTypeProvided,\\n            uint8(AssetType.NATIVE)\\n        );\\n\\n        myBartex[msg.sender].push(totalBartexed);\\n        myBartex[_acceptor].push(totalBartexed);\\n        allNatives++;\\n        totalBartexed++;\\n        emit BartexProposalCreated(msg.sender, _acceptor, totalBartexed);\\n    }\\n\\n    /**\\n     * @dev proposeForTokenBartex create a bartex for token\\n     * @param _acceptor acceptor address\\n     * @param _providedTokenAddresses provided token addresses\\n     * @param _tokenProvidedAmounts provided token amounts\\n     * @param _requiredTokenAddresses required token addresses\\n     * @param _tokenRequiredAmounts required token amounts\\n     * @param _assetTypeProvided asset type provided\\n     */\\n\\n    function proposeForTokenBartex(\\n        address _acceptor,\\n        address[] memory _providedTokenAddresses,\\n        uint256[] memory _tokenProvidedAmounts,\\n        address[] memory _requiredTokenAddresses,\\n        uint256[] memory _tokenRequiredAmounts,\\n        uint8 _assetTypeProvided\\n    ) external payable nonReentrant {\\n        zeroAddress(_acceptor);\\n        zeroAddresses(_providedTokenAddresses);\\n        onlyArrayLengthProvided(\\n            _providedTokenAddresses,\\n            _tokenProvidedAmounts,\\n            _assetTypeProvided\\n        );\\n        onlyArrayLengthRequired(_requiredTokenAddresses, _tokenRequiredAmounts);\\n        onlyAssetType(_assetTypeProvided);\\n        uint256 assetProposer = getProvidedAssetDetails(\\n            _providedTokenAddresses,\\n            _tokenProvidedAmounts,\\n            _assetTypeProvided\\n        );\\n        allTokensBartexed[allTokens] = TokenDetails(\\n            _requiredTokenAddresses,\\n            _tokenRequiredAmounts\\n        );\\n\\n        allBartexs[totalBartexed] = createBartex(\\n            _acceptor,\\n            assetProposer,\\n            allTokens,\\n            _assetTypeProvided,\\n            uint8(AssetType.TOKEN)\\n        );\\n\\n        myBartex[msg.sender].push(totalBartexed);\\n        myBartex[_acceptor].push(totalBartexed);\\n        allTokens++;\\n        totalBartexed++;\\n        emit BartexProposalCreated(msg.sender, _acceptor, totalBartexed);\\n    }\\n\\n    /**\\n     * @dev proposeForNFTBartex create a bartex for nft\\n     * @param _acceptor acceptor address\\n     * @param _providedTokenAddresses provided token addresses\\n     * @param _tokenProvidedAmounts provided token amounts\\n     * @param _requiredTokenAddresses required token addresses\\n     * @param _tokenRequiredAmounts required token amounts\\n     * @param _assetTypeProvided asset type provided\\n     */\\n\\n    function proposeForNFTBartex(\\n        address _acceptor,\\n        address[] memory _providedTokenAddresses,\\n        uint256[] memory _tokenProvidedAmounts,\\n        address[] memory _requiredTokenAddresses,\\n        uint256[] memory _tokenRequiredAmounts,\\n        uint8 _assetTypeProvided\\n    ) external payable nonReentrant {\\n        zeroAddress(_acceptor);\\n        zeroAddresses(_providedTokenAddresses);\\n        onlyArrayLengthProvided(\\n            _providedTokenAddresses,\\n            _tokenProvidedAmounts,\\n            _assetTypeProvided\\n        );\\n        onlyArrayLengthRequired(_requiredTokenAddresses, _tokenRequiredAmounts);\\n        onlyAssetType(_assetTypeProvided);\\n        uint256 assetProposer = getProvidedAssetDetails(\\n            _providedTokenAddresses,\\n            _tokenProvidedAmounts,\\n            _assetTypeProvided\\n        );\\n        allNFTsBartexed[allNFTs] = NFTDetails(\\n            _requiredTokenAddresses,\\n            _tokenRequiredAmounts\\n        );\\n\\n        allBartexs[totalBartexed] = createBartex(\\n            _acceptor,\\n            assetProposer,\\n            allNFTs,\\n            _assetTypeProvided,\\n            uint8(AssetType.NFT)\\n        );\\n\\n        myBartex[msg.sender].push(totalBartexed);\\n        myBartex[_acceptor].push(totalBartexed);\\n        allNFTs++;\\n        totalBartexed++;\\n        emit BartexProposalCreated(msg.sender, _acceptor, totalBartexed);\\n    }\\n\\n    /**\\n     * @dev createBartex create a bartex\\n     * @param _acceptor acceptor address\\n     * @param _providedAsset provided asset\\n     * @param _requiredAsset required asset\\n     * @param _assetTypeProvided asset type provided\\n     * @param _assetTypeRequired asset type required\\n     */\\n\\n    function createBartex(\\n        address _acceptor,\\n        uint256 _providedAsset,\\n        uint256 _requiredAsset,\\n        uint8 _assetTypeProvided,\\n        uint8 _assetTypeRequired\\n    ) internal view returns (Bartex memory) {\\n        uint256[] memory indexes = new uint256[](2);\\n        indexes[0] = _providedAsset;\\n        indexes[1] = _requiredAsset;\\n\\n        Bartex memory barter = Bartex(\\n            totalBartexed,\\n            msg.sender,\\n            _acceptor,\\n            false,\\n            indexes,\\n            0,\\n            uint8(BartexStatus.PROPOSED),\\n            uint8(_assetTypeProvided),\\n            _assetTypeRequired,\\n            false,\\n            false,\\n            false,\\n            false\\n        );\\n        return barter;\\n    }\\n\\n    /**\\n     * @dev acceptBartex accept a bartex\\n     * @param _bartexId Bartex id\\n     */\\n\\n    function acceptBartex(uint _bartexId) external payable {\\n        bartexExists(_bartexId);\\n        uint256 index = allBartexs[_bartexId].itemProposerAcceptorIndex[1];\\n\\n        require(\\n            allBartexs[_bartexId].accepter == msg.sender,\\n            \\\"Invalid accepter\\\"\\n        );\\n        require(\\n            allBartexs[_bartexId].status == uint8(BartexStatus.PROPOSED),\\n            \\\"Invalid status\\\"\\n        );\\n        onlyAssetType(allBartexs[_bartexId].assetTypeRequired);\\n\\n        if (allBartexs[_bartexId].assetTypeRequired == uint8(AssetType.TOKEN)) {\\n            TokenDetails memory _token = allTokensBartexed[index];\\n            checkTokenProvidedAmount(_token.amounts);\\n            checkAllowance(_token.tokenAddresses, _token.amounts);\\n            require(\\n                transferToken(\\n                    _token.tokenAddresses,\\n                    msg.sender,\\n                    address(this),\\n                    _token.amounts\\n                ),\\n                \\\"Transfer failed\\\"\\n            );\\n        } else if (\\n            allBartexs[_bartexId].assetTypeRequired == uint8(AssetType.NATIVE)\\n        ) {\\n            require(\\n                msg.value >= allNativesBartexed[index].amount,\\n                \\\"Invalid amount\\\"\\n            );\\n        } else if (\\n            allBartexs[_bartexId].assetTypeRequired == uint8(AssetType.NFT)\\n        ) {\\n            NFTDetails memory _nft = allNFTsBartexed[index];\\n            ownerOfNft(_nft.tokenAddresses, _nft.tokenIds);\\n            getApprovedNFT(_nft.tokenAddresses, _nft.tokenIds);\\n            transferNFTs(\\n                _nft.tokenAddresses,\\n                address(this),\\n                msg.sender,\\n                _nft.tokenIds\\n            );\\n        }\\n\\n        allBartexs[_bartexId].status = uint8(BartexStatus.ACCEPTED);\\n        allBartexs[_bartexId].allowedToExchange = true;\\n        allBartexs[_bartexId].remainingTime = block.timestamp + bartexTime;\\n        emit BartexProposalAccepted(msg.sender, _bartexId);\\n    }\\n\\n    /**\\n     * @dev rejectOrWithdrawBartex reject or withdraw a bartex\\n     * @param _bartexId Bartex id\\n     */\\n\\n    function rejectOrWithdrawBartex(uint _bartexId) external nonReentrant {\\n        bothParties(_bartexId);\\n        bartexExists(_bartexId);\\n        require(\\n            allBartexs[_bartexId].status == uint8(BartexStatus.PROPOSED),\\n            \\\"Invalid status\\\"\\n        );\\n        allBartexs[_bartexId].status = uint8(BartexStatus.REJECTED);\\n        uint proposerIndex = allBartexs[_bartexId].itemProposerAcceptorIndex[0];\\n\\n        address proposer = allBartexs[_bartexId].proposer;\\n        if (allBartexs[_bartexId].assetTypeProvided == uint8(AssetType.TOKEN)) {\\n            TokenDetails memory _token = getToken(proposerIndex);\\n            transferToken(\\n                _token.tokenAddresses,\\n                address(this),\\n                proposer,\\n                _token.amounts\\n            );\\n        } else if (\\n            allBartexs[_bartexId].assetTypeProvided == uint8(AssetType.NATIVE)\\n        ) {\\n            NativeDetails memory _native = getNative(proposerIndex);\\n            transferNative(proposer, _native.amount);\\n        } else if (\\n            allBartexs[_bartexId].assetTypeProvided == uint8(AssetType.NFT)\\n        ) {\\n            NFTDetails memory _nft = getNFT(proposerIndex);\\n            require(\\n                transferNFTs(\\n                    _nft.tokenAddresses,\\n                    proposer,\\n                    address(this),\\n                    _nft.tokenIds\\n                ),\\n                \\\"transfer fail\\\"\\n            );\\n        }\\n\\n        emit BartexRejected(msg.sender, _bartexId);\\n    }\\n\\n    /**\\n     * @dev acceptBartexExchange accept a bartex exchange\\n     * @param _bartexId Bartex id\\n     */\\n\\n    function acceptBartexExchange(\\n        uint _bartexId\\n    ) external payable nonReentrant {\\n        bothParties(_bartexId);\\n        bartexExists(_bartexId);\\n        Bartex memory bartex = allBartexs[_bartexId];\\n        require(bartex.remainingTime >= block.timestamp, \\\"Expired\\\");\\n        require(msg.value >= companyCommission, \\\"Not enough commission\\\");\\n        companyProfit += msg.value;\\n\\n        require(bartex.allowedToExchange, \\\"Not allowed to exchange\\\");\\n        if (msg.sender == bartex.proposer) {\\n            allBartexs[_bartexId].proposerAcceptedEx = true;\\n        } else if (msg.sender == bartex.accepter) {\\n            allBartexs[_bartexId].acceptorAcceptedEx = true;\\n        }\\n\\n        if (\\n            allBartexs[_bartexId].proposerAcceptedEx &&\\n            allBartexs[_bartexId].acceptorAcceptedEx\\n        ) {\\n            uint256 proposerAssetIndex = bartex.itemProposerAcceptorIndex[0];\\n            uint256 accepterAssetIndex = bartex.itemProposerAcceptorIndex[1];\\n\\n            if (bartex.assetTypeProvided == uint8(AssetType.TOKEN)) {\\n                TokenDetails memory _token = getToken(proposerAssetIndex);\\n\\n                transferToken(\\n                    _token.tokenAddresses,\\n                    address(this),\\n                    bartex.accepter,\\n                    _token.amounts\\n                );\\n            } else if (bartex.assetTypeProvided == uint8(AssetType.NATIVE)) {\\n                NativeDetails memory _native = getNative(proposerAssetIndex);\\n                transferNative(bartex.accepter, _native.amount);\\n            } else if (bartex.assetTypeProvided == uint8(AssetType.NFT)) {\\n                NFTDetails memory _nft = getNFT(proposerAssetIndex);\\n                require(\\n                    transferNFTs(\\n                        _nft.tokenAddresses,\\n                        bartex.accepter,\\n                        address(this),\\n                        _nft.tokenIds\\n                    ),\\n                    \\\"Transfer fail\\\"\\n                );\\n            }\\n\\n            if (bartex.assetTypeRequired == uint8(AssetType.TOKEN)) {\\n                TokenDetails memory _token = getToken(accepterAssetIndex);\\n\\n                require(\\n                    transferToken(\\n                        _token.tokenAddresses,\\n                        address(this),\\n                        bartex.proposer,\\n                        _token.amounts\\n                    ),\\n                    \\\"Transfer fail\\\"\\n                );\\n            } else if (bartex.assetTypeRequired == uint8(AssetType.NATIVE)) {\\n                NativeDetails memory _native = getNative(accepterAssetIndex);\\n\\n                transferNative(bartex.proposer, _native.amount);\\n            } else if (bartex.assetTypeRequired == uint8(AssetType.NFT)) {\\n                NFTDetails memory _nft = getNFT(accepterAssetIndex);\\n\\n                require(\\n                    transferNFTs(\\n                        _nft.tokenAddresses,\\n                        bartex.proposer,\\n                        address(this),\\n                        _nft.tokenIds\\n                    ),\\n                    \\\"Transfer fail\\\"\\n                );\\n            }\\n\\n            allBartexs[_bartexId].status = uint8(BartexStatus.EXCHANGED);\\n            emit BartexExchanged(bartex.proposer, bartex.accepter, _bartexId);\\n        }\\n    }\\n\\n    /**\\n     * @dev cancelBartexExchange cancel a bartex exchange\\n     * @param _bartexId Bartex id\\n     */\\n\\n    function cancelBartexExchange(\\n        uint _bartexId\\n    ) external payable nonReentrant {\\n        bothParties(_bartexId);\\n        bartexExists(_bartexId);\\n        Bartex memory bartex = allBartexs[_bartexId];\\n        require(bartex.remainingTime >= block.timestamp, \\\"Expired\\\");\\n        require(msg.value >= companyCommission, \\\"Not enough commission\\\");\\n        companyProfit += msg.value;\\n\\n        require(bartex.allowedToExchange, \\\"Not allowed to exchange\\\");\\n        if (msg.sender == bartex.proposer) {\\n            allBartexs[_bartexId].proposerCancelledEx = true;\\n        } else if (msg.sender == bartex.accepter) {\\n            allBartexs[_bartexId].acceptorCancelledEx = true;\\n        }\\n\\n        if (\\n            allBartexs[_bartexId].proposerCancelledEx &&\\n            allBartexs[_bartexId].acceptorCancelledEx\\n        ) {\\n            uint256 proposerAssetIndex = bartex.itemProposerAcceptorIndex[0];\\n            uint256 accepterAssetIndex = bartex.itemProposerAcceptorIndex[1];\\n            if (bartex.assetTypeProvided == uint8(AssetType.TOKEN)) {\\n                TokenDetails memory _token = getToken(proposerAssetIndex);\\n                transferToken(\\n                    _token.tokenAddresses,\\n                    address(this),\\n                    bartex.proposer,\\n                    _token.amounts\\n                );\\n            } else if (bartex.assetTypeProvided == uint8(AssetType.NATIVE)) {\\n                NativeDetails memory _native = getNative(proposerAssetIndex);\\n                transferNative(bartex.proposer, _native.amount);\\n            } else if (bartex.assetTypeProvided == uint8(AssetType.NFT)) {\\n                NFTDetails memory _nft = getNFT(proposerAssetIndex);\\n                require(\\n                    transferNFTs(\\n                        _nft.tokenAddresses,\\n                        bartex.proposer,\\n                        address(this),\\n                        _nft.tokenIds\\n                    ),\\n                    \\\"Transfer failed\\\"\\n                );\\n            }\\n\\n            if (bartex.assetTypeRequired == uint8(AssetType.TOKEN)) {\\n                TokenDetails memory _token = getToken(accepterAssetIndex);\\n                transferToken(\\n                    _token.tokenAddresses,\\n                    address(this),\\n                    bartex.accepter,\\n                    _token.amounts\\n                );\\n            } else if (bartex.assetTypeRequired == uint8(AssetType.NATIVE)) {\\n                NativeDetails memory _native = getNative(accepterAssetIndex);\\n\\n                transferNative(bartex.accepter, _native.amount);\\n            } else if (bartex.assetTypeRequired == uint8(AssetType.NFT)) {\\n                NFTDetails memory _nft = getNFT(accepterAssetIndex);\\n                require(\\n                    transferNFTs(\\n                        _nft.tokenAddresses,\\n                        bartex.accepter,\\n                        address(this),\\n                        _nft.tokenIds\\n                    ),\\n                    \\\"Transfer failed\\\"\\n                );\\n            }\\n\\n            allBartexs[_bartexId].status = uint8(BartexStatus.CANCELLED);\\n            allBartexs[_bartexId].allowedToExchange = false;\\n            emit BartexExchangedCancelled(\\n                bartex.proposer,\\n                bartex.accepter,\\n                _bartexId\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev withdrawAssets withdraw the your assets after the bartex time is over\\n     * @param _bartexId Bartex id\\n     */\\n\\n    function withdrawAssets(uint _bartexId) public payable nonReentrant {\\n        bothParties(_bartexId);\\n        bartexExists(_bartexId);\\n        Bartex memory bartex = allBartexs[_bartexId];\\n        require(bartex.remainingTime < block.timestamp, \\\"Withdraw Not Allowed\\\");\\n        require(msg.value >= companyCommission, \\\"Not enough commission\\\");\\n        companyProfit += msg.value;\\n        require(bartex.allowedToExchange, \\\"Not allowed to exchange\\\");\\n\\n        if (msg.sender == bartex.proposer) {\\n            uint256 proposerAssetIndex = bartex.itemProposerAcceptorIndex[0];\\n            if (bartex.assetTypeProvided == uint8(AssetType.TOKEN)) {\\n                TokenDetails memory _token = getToken(proposerAssetIndex);\\n                transferToken(\\n                    _token.tokenAddresses,\\n                    address(this),\\n                    bartex.proposer,\\n                    _token.amounts\\n                );\\n            } else if (bartex.assetTypeProvided == uint8(AssetType.NATIVE)) {\\n                NativeDetails memory _native = getNative(proposerAssetIndex);\\n                transferNative(bartex.proposer, _native.amount);\\n            } else if (bartex.assetTypeProvided == uint8(AssetType.NFT)) {\\n                NFTDetails memory _nft = getNFT(proposerAssetIndex);\\n                require(\\n                    transferNFTs(\\n                        _nft.tokenAddresses,\\n                        bartex.proposer,\\n                        address(this),\\n                        _nft.tokenIds\\n                    ),\\n                    \\\"Transfer failed\\\"\\n                );\\n            }\\n        } else if (msg.sender == bartex.accepter) {\\n            uint256 accepterAssetIndex = bartex.itemProposerAcceptorIndex[1];\\n            if (bartex.assetTypeRequired == uint8(AssetType.TOKEN)) {\\n                TokenDetails memory _token = getToken(accepterAssetIndex);\\n                transferToken(\\n                    _token.tokenAddresses,\\n                    address(this),\\n                    bartex.accepter,\\n                    _token.amounts\\n                );\\n            } else if (bartex.assetTypeRequired == uint8(AssetType.NATIVE)) {\\n                NativeDetails memory _native = getNative(accepterAssetIndex);\\n\\n                transferNative(bartex.accepter, _native.amount);\\n            } else if (bartex.assetTypeRequired == uint8(AssetType.NFT)) {\\n                NFTDetails memory _nft = getNFT(accepterAssetIndex);\\n                require(\\n                    transferNFTs(\\n                        _nft.tokenAddresses,\\n                        bartex.accepter,\\n                        address(this),\\n                        _nft.tokenIds\\n                    ),\\n                    \\\"Transfer failed\\\"\\n                );\\n            }\\n        }\\n        allBartexs[_bartexId].status = uint8(BartexStatus.EXPIRED);\\n        emit Withdrawn(msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev getProvidedAssetDetails get the provided asset details\\n     * @param _providedTokenAddresses provided token addresses\\n     * @param _tokenProvidedAmounts provided token amounts\\n     * @param _assetProvidedType asset type provided\\n     */\\n\\n    function getProvidedAssetDetails(\\n        address[] memory _providedTokenAddresses,\\n        uint256[] memory _tokenProvidedAmounts,\\n        uint8 _assetProvidedType\\n    ) internal returns (uint256) {\\n        uint256 index;\\n        if (_assetProvidedType == uint(AssetType.TOKEN)) {\\n            checkTokenProvidedAmount(_tokenProvidedAmounts);\\n            checkAllowance(_providedTokenAddresses, _tokenProvidedAmounts);\\n            transferToken(\\n                _providedTokenAddresses,\\n                msg.sender,\\n                address(this),\\n                _tokenProvidedAmounts\\n            );\\n            allTokensBartexed[allTokens] = TokenDetails(\\n                _providedTokenAddresses,\\n                _tokenProvidedAmounts\\n            );\\n            allTokens++;\\n            index = allTokens - 1;\\n        } else if (_assetProvidedType == uint(AssetType.NATIVE)) {\\n            require(msg.value >= _tokenProvidedAmounts[0], \\\"Invalid amount\\\");\\n            allNativesBartexed[allNatives] = NativeDetails(\\n                _tokenProvidedAmounts[0]\\n            );\\n            allNatives++;\\n            index = allNatives - 1;\\n        } else if (_assetProvidedType == uint(AssetType.NFT)) {\\n            ownerOfNft(_providedTokenAddresses, _tokenProvidedAmounts);\\n            getApprovedNFT(_providedTokenAddresses, _tokenProvidedAmounts);\\n            transferNFTs(\\n                _providedTokenAddresses,\\n                address(this),\\n                msg.sender,\\n                _tokenProvidedAmounts\\n            );\\n            allNFTsBartexed[allNFTs] = NFTDetails(\\n                _providedTokenAddresses,\\n                _tokenProvidedAmounts\\n            );\\n            allNFTs++;\\n            index = allNFTs - 1;\\n        }\\n        return index;\\n    }\\n\\n    /**\\n     * @dev transferToken transfer token\\n     * @param _tokenAddresses token addresses\\n     * @param _from from address\\n     * @param _to to address\\n     * @param _amounts token amounts\\n     */\\n\\n    function transferToken(\\n        address[] memory _tokenAddresses,\\n        address _from,\\n        address _to,\\n        uint[] memory _amounts\\n    ) internal returns (bool) {\\n        for (uint i = 0; i < _amounts.length; i++) {\\n            IERC20Upgradeable token = IERC20Upgradeable(_tokenAddresses[i]);\\n            require(_amounts[i] <= token.balanceOf(_from), \\\"No Funds\\\");\\n            if (_from == address(this)) {\\n                require(token.transfer(_to, _amounts[i]), \\\"trx fail\\\");\\n            } else {\\n                require(\\n                    token.transferFrom(_from, _to, _amounts[i]),\\n                    \\\"trx fail\\\"\\n                );\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev transferNative transfer native\\n     * @param _to to address\\n     * @param _amount amount\\n     */\\n\\n    function transferNative(address _to, uint _amount) internal {\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Amount not sent\\\");\\n    }\\n\\n    /**\\n     * @dev transferNFTs transfer nfts\\n     * @param _tokenAddresses token addresses\\n     * @param _to to address\\n     * @param _from from address\\n     * @param _tokenIds token ids\\n     */\\n    function transferNFTs(\\n        address[] memory _tokenAddresses,\\n        address _to,\\n        address _from,\\n        uint[] memory _tokenIds\\n    ) internal returns (bool) {\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            IERC721Upgradeable token = IERC721Upgradeable(_tokenAddresses[i]);\\n            require(token.ownerOf(_tokenIds[i]) == _from, \\\"not owner\\\");\\n            token.transferFrom(_from, _to, _tokenIds[i]);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev ownerOfNft check if the owner of nft is valid\\n     * @param tokenAddresses token addresses\\n     * @param tokenIds token ids\\n     */\\n\\n    function ownerOfNft(\\n        address[] memory tokenAddresses,\\n        uint256[] memory tokenIds\\n    ) internal view {\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            require(\\n                IERC721Upgradeable(tokenAddresses[i]).ownerOf(tokenIds[i]) ==\\n                    msg.sender,\\n                \\\"Invalid token owner\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev getApprovedNFT check if the nft is approved\\n     * @param tokenAddresses token addresses\\n     * @param tokenId token ids\\n     */\\n\\n    function getApprovedNFT(\\n        address[] memory tokenAddresses,\\n        uint[] memory tokenId\\n    ) internal view {\\n        for (uint i = 0; i < tokenId.length; i++) {\\n            require(\\n                IERC721Upgradeable(tokenAddresses[i]).getApproved(tokenId[i]) ==\\n                    address(this),\\n                \\\"no approval\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev checkAllowance check if the allowance is valid\\n     * @param _providedTokenAddresses provided token addresses\\n     * @param _tokenProvidedAmounts provided token amounts\\n     */\\n\\n    function checkAllowance(\\n        address[] memory _providedTokenAddresses,\\n        uint256[] memory _tokenProvidedAmounts\\n    ) internal view {\\n        for (uint i = 0; i < _providedTokenAddresses.length; i++) {\\n            require(\\n                IERC20Upgradeable(_providedTokenAddresses[i]).allowance(\\n                    msg.sender,\\n                    address(this)\\n                ) >= _tokenProvidedAmounts[i],\\n                \\\"Insufficient allowance\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev checkTokenProvidedAmount check if the token amount is valid\\n     * @param _tokenProvidedAmounts provided token amounts\\n     */\\n\\n    function checkTokenProvidedAmount(\\n        uint256[] memory _tokenProvidedAmounts\\n    ) internal pure {\\n        for (uint i = 0; i < _tokenProvidedAmounts.length; i++) {\\n            require(_tokenProvidedAmounts[i] > 0, \\\"Invalid token amount\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev getMyBartexed get the bartexed\\n     * @param _address address\\n     */\\n\\n    function getMyBartexed(\\n        address _address\\n    ) external view returns (uint256[] memory) {\\n        return myBartex[_address];\\n    }\\n\\n    /**\\n     * @dev getAssets get the assets\\n     * @param _bartexId Bartex id\\n     */\\n\\n    function getAssets(\\n        uint _bartexId\\n    ) external view returns (uint256[] memory) {\\n        return (allBartexs[_bartexId].itemProposerAcceptorIndex);\\n    }\\n\\n    /**\\n     * @dev withdrawCommission widtdraw the company commission\\n     */\\n\\n    function withdrawCommission() external onlyOwner nonReentrant {\\n        require(companyProfit > 0);\\n        uint amount = companyProfit;\\n        companyProfit = 0;\\n        transferNative(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev updateCompanyCommission update the company commission\\n     * @param _commission commission\\n     */\\n\\n    function updateCompanyCommission(uint _commission) external onlyOwner {\\n        companyCommission = _commission;\\n    }\\n\\n    /**\\n     * @dev getToken get token information\\n     * @param index token index\\n     */\\n\\n    function getToken(uint256 index) public view returns (TokenDetails memory) {\\n        return allTokensBartexed[index];\\n    }\\n\\n    /**\\n     * @dev getNative get native information\\n     * @param index native index\\n     */\\n\\n    function getNative(\\n        uint256 index\\n    ) public view returns (NativeDetails memory) {\\n        return allNativesBartexed[index];\\n    }\\n\\n    /**\\n     * @dev getNFT get nft information\\n     * @param index nft index\\n     */\\n\\n    function getNFT(uint256 index) public view returns (NFTDetails memory) {\\n        return allNFTsBartexed[index];\\n    }\\n\\n    /**\\n     * @dev getCompanyComission get the company commission\\n     */\\n\\n    function getCompanyComission() public view returns (uint) {\\n        return companyCommission;\\n    }\\n\\n    /**\\n     * @dev updateBartexTime update bartex time\\n     */\\n\\n    function updateBartexTime(uint timeInSeconds) external onlyOwner {\\n        bartexTime = timeInSeconds;\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accepter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bartexId\",\"type\":\"uint256\"}],\"name\":\"BartexExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accepter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bartexId\",\"type\":\"uint256\"}],\"name\":\"BartexExchangedCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accepter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bartexId\",\"type\":\"uint256\"}],\"name\":\"BartexProposalAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accepter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bartexId\",\"type\":\"uint256\"}],\"name\":\"BartexProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rejecter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bartexId\",\"type\":\"uint256\"}],\"name\":\"BartexRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bartexId\",\"type\":\"uint256\"}],\"name\":\"acceptBartex\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bartexId\",\"type\":\"uint256\"}],\"name\":\"acceptBartexExchange\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allBartexs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accepter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowedToExchange\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"remainingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"assetTypeProvided\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"assetTypeRequired\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"proposerAcceptedEx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"acceptorAcceptedEx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"proposerCancelledEx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"acceptorCancelledEx\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bartexTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bartexId\",\"type\":\"uint256\"}],\"name\":\"cancelBartexExchange\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bartexId\",\"type\":\"uint256\"}],\"name\":\"getAssets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompanyComission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMyBartexed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getNFT\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CryptBartex.NFTDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getNative\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptBartex.NativeDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CryptBartex.TokenDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_acceptor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_providedTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenProvidedAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_requiredTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenRequiredAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"_assetTypeProvided\",\"type\":\"uint8\"}],\"name\":\"proposeForNFTBartex\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_acceptor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_providedTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenProvidedAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenRequiredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_assetTypeProvided\",\"type\":\"uint8\"}],\"name\":\"proposeForNativeBartex\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_acceptor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_providedTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenProvidedAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_requiredTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenRequiredAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"_assetTypeProvided\",\"type\":\"uint8\"}],\"name\":\"proposeForTokenBartex\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bartexId\",\"type\":\"uint256\"}],\"name\":\"rejectOrWithdrawBartex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBartexed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInSeconds\",\"type\":\"uint256\"}],\"name\":\"updateBartexTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"updateCompanyCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bartexId\",\"type\":\"uint256\"}],\"name\":\"withdrawAssets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CryptBartex", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}