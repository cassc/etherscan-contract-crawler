{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n* @dev Interface of the ERC20 standard as defined in the EIP.\r\n*/\r\ninterface IERC20 {\r\n/**\r\n* @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n* another (`to`).\r\n*\r\n* Note that `value` may be zero.\r\n*/\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n/**\r\n* @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n* a call to {approve}. `value` is the new allowance.\r\n*/\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n/**\r\n* @dev Returns the amount of tokens in existence.\r\n*/\r\nfunction totalSupply() external view returns (uint256);\r\n\r\n/**\r\n* @dev Returns the amount of tokens owned by `account`.\r\n*/\r\nfunction balanceOf(address account) external view returns (uint256);\r\n\r\n/**\r\n* @dev Moves `amount` tokens from the caller's account to `to`.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* Emits a {Transfer} event.\r\n*/\r\nfunction transfer(address to, uint256 amount) external returns (bool);\r\n\r\n/**\r\n* @dev Returns the remaining number of tokens that `spender` will be\r\n* allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n* zero by default.\r\n*\r\n* This value changes when {approve} or {transferFrom} are called.\r\n*/\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n/**\r\n* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n* that someone may use both the old and the new allowance by unfortunate\r\n* transaction ordering. One possible solution to mitigate this race\r\n* condition is to first reduce the spender's allowance to 0 and set the\r\n* desired value afterwards:\r\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n*\r\n* Emits an {Approval} event.\r\n*/\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n/**\r\n* @dev Moves `amount` tokens from `from` to `to` using the\r\n* allowance mechanism. `amount` is then deducted from the caller's\r\n* allowance.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* Emits a {Transfer} event.\r\n*/\r\nfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/**\r\n* @dev Interface for the optional metadata functions from the ERC20 standard.\r\n*\r\n* _Available since v4.1._\r\n*/\r\ninterface IERC20Metadata is IERC20 {\r\n/**\r\n* @dev Returns the name of the token.\r\n*/\r\nfunction name() external view returns (string memory);\r\n\r\n/**\r\n* @dev Returns the symbol of the token.\r\n*/\r\nfunction symbol() external view returns (string memory);\r\n\r\n/**\r\n* @dev Returns the decimals places of the token.\r\n*/\r\nfunction decimals() external view returns (uint8);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n* @dev Provides information about the current execution context, including the\r\n* sender of the transaction and its data. While these are generally available\r\n* via msg.sender and msg.data, they should not be accessed in such a direct\r\n* manner, since when dealing with meta-transactions the account sending and\r\n* paying for execution may not be the actual sender (as far as an application\r\n* is concerned).\r\n*\r\n* This contract is only required for intermediate, library-like contracts.\r\n*/\r\nabstract contract Context {\r\nfunction _msgSender() internal view virtual returns (address) {\r\nreturn msg.sender;\r\n}\r\n\r\nfunction _msgData() internal view virtual returns (bytes calldata) {\r\nreturn msg.data;\r\n}\r\n}\r\n\r\n/**\r\n* @dev Implementation of the {IERC20} interface.\r\n*\r\n* This implementation is agnostic to the way tokens are created. This means\r\n* that a supply mechanism has to be added in a derived contract using {_mint}.\r\n* For a generic mechanism see {ERC20PresetMinterPauser}.\r\n*\r\n* TIP: For a detailed writeup see our guide\r\n* https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n* to implement supply mechanisms].\r\n*\r\n* The default value of {decimals} is 18. To change this, you should override\r\n* this function so it returns a different value.\r\n*\r\n* We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n* instead returning `false` on failure. This behavior is nonetheless\r\n* conventional and does not conflict with the expectations of ERC20\r\n* applications.\r\n*\r\n* Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n* This allows applications to reconstruct the allowance for all accounts just\r\n* by listening to said events. Other implementations of the EIP may not emit\r\n* these events, as it isn't required by the specification.\r\n*\r\n* Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n* functions have been added to mitigate the well-known issues around setting\r\n* allowances. See {IERC20-approve}.\r\n*/\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\nmapping(address => uint256) private _balances;\r\n\r\nmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\nuint256 private _totalSupply;\r\n\r\nstring private _name;\r\nstring private _symbol;\r\n\r\n/**\r\n* @dev Sets the values for {name} and {symbol}.\r\n*\r\n* All two of these values are immutable: they can only be set once during\r\n* construction.\r\n*/\r\nconstructor(string memory name_, string memory symbol_) {\r\n_name = name_;\r\n_symbol = symbol_;\r\n}\r\n\r\n/**\r\n* @dev Returns the name of the token.\r\n*/\r\nfunction name() public view virtual override returns (string memory) {\r\nreturn _name;\r\n}\r\n\r\n/**\r\n* @dev Returns the symbol of the token, usually a shorter version of the\r\n* name.\r\n*/\r\nfunction symbol() public view virtual override returns (string memory) {\r\nreturn _symbol;\r\n}\r\n\r\n/**\r\n* @dev Returns the number of decimals used to get its user representation.\r\n* For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n* be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n*\r\n* Tokens usually opt for a value of 18, imitating the relationship between\r\n* Ether and Wei. This is the default value returned by this function, unless\r\n* it's overridden.\r\n*\r\n* NOTE: This information is only used for _display_ purposes: it in\r\n* no way affects any of the arithmetic of the contract, including\r\n* {IERC20-balanceOf} and {IERC20-transfer}.\r\n*/\r\nfunction decimals() public view virtual override returns (uint8) {\r\nreturn 18;\r\n}\r\n\r\n/**\r\n* @dev See {IERC20-totalSupply}.\r\n*/\r\nfunction totalSupply() public view virtual override returns (uint256) {\r\nreturn _totalSupply;\r\n}\r\n\r\n/**\r\n* @dev See {IERC20-balanceOf}.\r\n*/\r\nfunction balanceOf(address account) public view virtual override returns (uint256) {\r\nreturn _balances[account];\r\n}\r\n\r\n/**\r\n* @dev See {IERC20-transfer}.\r\n*\r\n* Requirements:\r\n*\r\n* - `to` cannot be the zero address.\r\n* - the caller must have a balance of at least `amount`.\r\n*/\r\nfunction transfer(address to, uint256 amount) public virtual override returns (bool) {\r\naddress owner = _msgSender();\r\n_transfer(owner, to, amount);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev See {IERC20-allowance}.\r\n*/\r\nfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\nreturn _allowances[owner][spender];\r\n}\r\n\r\n/**\r\n* @dev See {IERC20-approve}.\r\n*\r\n* NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n* `transferFrom`. This is semantically equivalent to an infinite approval.\r\n*\r\n* Requirements:\r\n*\r\n* - `spender` cannot be the zero address.\r\n*/\r\nfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\naddress owner = _msgSender();\r\n_approve(owner, spender, amount);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev See {IERC20-transferFrom}.\r\n*\r\n* Emits an {Approval} event indicating the updated allowance. This is not\r\n* required by the EIP. See the note at the beginning of {ERC20}.\r\n*\r\n* NOTE: Does not update the allowance if the current allowance\r\n* is the maximum `uint256`.\r\n*\r\n* Requirements:\r\n*\r\n* - `from` and `to` cannot be the zero address.\r\n* - `from` must have a balance of at least `amount`.\r\n* - the caller must have allowance for ``from``'s tokens of at least\r\n* `amount`.\r\n*/\r\nfunction transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\naddress spender = _msgSender();\r\n_spendAllowance(from, spender, amount);\r\n_transfer(from, to, amount);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Atomically increases the allowance granted to `spender` by the caller.\r\n*\r\n* This is an alternative to {approve} that can be used as a mitigation for\r\n* problems described in {IERC20-approve}.\r\n*\r\n* Emits an {Approval} event indicating the updated allowance.\r\n*\r\n* Requirements:\r\n*\r\n* - `spender` cannot be the zero address.\r\n*/\r\nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\naddress owner = _msgSender();\r\n_approve(owner, spender, allowance(owner, spender) + addedValue);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n*\r\n* This is an alternative to {approve} that can be used as a mitigation for\r\n* problems described in {IERC20-approve}.\r\n*\r\n* Emits an {Approval} event indicating the updated allowance.\r\n*\r\n* Requirements:\r\n*\r\n* - `spender` cannot be the zero address.\r\n* - `spender` must have allowance for the caller of at least\r\n* `subtractedValue`.\r\n*/\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\naddress owner = _msgSender();\r\nuint256 currentAllowance = allowance(owner, spender);\r\nrequire(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\nunchecked {\r\n_approve(owner, spender, currentAllowance - subtractedValue);\r\n}\r\n\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Moves `amount` of tokens from `from` to `to`.\r\n*\r\n* This internal function is equivalent to {transfer}, and can be used to\r\n* e.g. implement automatic token fees, slashing mechanisms, etc.\r\n*\r\n* Emits a {Transfer} event.\r\n*\r\n* Requirements:\r\n*\r\n* - `from` cannot be the zero address.\r\n* - `to` cannot be the zero address.\r\n* - `from` must have a balance of at least `amount`.\r\n*/\r\nfunction _transfer(address from, address to, uint256 amount) internal virtual {\r\nrequire(from != address(0), \"ERC20: transfer from the zero address\");\r\nrequire(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n_beforeTokenTransfer(from, to, amount);\r\n\r\nuint256 fromBalance = _balances[from];\r\nrequire(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\nunchecked {\r\n_balances[from] = fromBalance - amount;\r\n// Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n// decrementing then incrementing.\r\n_balances[to] += amount;\r\n}\r\n\r\nemit Transfer(from, to, amount);\r\n\r\n_afterTokenTransfer(from, to, amount);\r\n}\r\n\r\n/** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n* the total supply.\r\n*\r\n* Emits a {Transfer} event with `from` set to the zero address.\r\n*\r\n* Requirements:\r\n*\r\n* - `account` cannot be the zero address.\r\n*/\r\nfunction _mint(address account, uint256 amount) internal virtual {\r\nrequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n_beforeTokenTransfer(address(0), account, amount);\r\n\r\n_totalSupply += amount;\r\nunchecked {\r\n// Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n_balances[account] += amount;\r\n}\r\nemit Transfer(address(0), account, amount);\r\n\r\n_afterTokenTransfer(address(0), account, amount);\r\n}\r\n\r\n/**\r\n* @dev Destroys `amount` tokens from `account`, reducing the\r\n* total supply.\r\n*\r\n* Emits a {Transfer} event with `to` set to the zero address.\r\n*\r\n* Requirements:\r\n*\r\n* - `account` cannot be the zero address.\r\n* - `account` must have at least `amount` tokens.\r\n*/\r\nfunction _burn(address account, uint256 amount) internal virtual {\r\nrequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n_beforeTokenTransfer(account, address(0), amount);\r\n\r\nuint256 accountBalance = _balances[account];\r\nrequire(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\nunchecked {\r\n_balances[account] = accountBalance - amount;\r\n// Overflow not possible: amount <= accountBalance <= totalSupply.\r\n_totalSupply -= amount;\r\n}\r\n\r\nemit Transfer(account, address(0), amount);\r\n\r\n_afterTokenTransfer(account, address(0), amount);\r\n}\r\n\r\n/**\r\n* @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n*\r\n* This internal function is equivalent to `approve`, and can be used to\r\n* e.g. set automatic allowances for certain subsystems, etc.\r\n*\r\n* Emits an {Approval} event.\r\n*\r\n* Requirements:\r\n*\r\n* - `owner` cannot be the zero address.\r\n* - `spender` cannot be the zero address.\r\n*/\r\nfunction _approve(address owner, address spender, uint256 amount) internal virtual {\r\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\r\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n_allowances[owner][spender] = amount;\r\nemit Approval(owner, spender, amount);\r\n}\r\n\r\n/**\r\n* @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n*\r\n* Does not update the allowance amount in case of infinite allowance.\r\n* Revert if not enough allowance is available.\r\n*\r\n* Might emit an {Approval} event.\r\n*/\r\nfunction _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\nuint256 currentAllowance = allowance(owner, spender);\r\nif (currentAllowance != type(uint256).max) {\r\nrequire(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\nunchecked {\r\n_approve(owner, spender, currentAllowance - amount);\r\n}\r\n}\r\n}\r\n\r\n/**\r\n* @dev Hook that is called before any transfer of tokens. This includes\r\n* minting and burning.\r\n*\r\n* Calling conditions:\r\n*\r\n* - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n* will be transferred to `to`.\r\n* - when `from` is zero, `amount` tokens will be minted for `to`.\r\n* - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n* - `from` and `to` are never both zero.\r\n*\r\n* To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n*/\r\nfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n/**\r\n* @dev Hook that is called after any transfer of tokens. This includes\r\n* minting and burning.\r\n*\r\n* Calling conditions:\r\n*\r\n* - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n* has been transferred to `to`.\r\n* - when `from` is zero, `amount` tokens have been minted for `to`.\r\n* - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n* - `from` and `to` are never both zero.\r\n*\r\n* To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n*/\r\nfunction _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\n/**\r\n* @dev Contract module which provides a basic access control mechanism, where\r\n* there is an account (an owner) that can be granted exclusive access to\r\n* specific functions.\r\n*\r\n* By default, the owner account will be the one that deploys the contract. This\r\n* can later be changed with {transferOwnership}.\r\n*\r\n* This module is used through inheritance. It will make available the modifier\r\n* `onlyOwner`, which can be applied to your functions to restrict their use to\r\n* the owner.\r\n*/\r\nabstract contract Ownable is Context {\r\naddress private _owner;\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n/**\r\n* @dev Initializes the contract setting the deployer as the initial owner.\r\n*/\r\nconstructor() {\r\n_transferOwnership(_msgSender());\r\n}\r\n\r\n/**\r\n* @dev Throws if called by any account other than the owner.\r\n*/\r\nmodifier onlyOwner() {\r\n_checkOwner();\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Returns the address of the current owner.\r\n*/\r\nfunction owner() public view virtual returns (address) {\r\nreturn _owner;\r\n}\r\n\r\n/**\r\n* @dev Throws if the sender is not the owner.\r\n*/\r\nfunction _checkOwner() internal view virtual {\r\nrequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n}\r\n\r\n/**\r\n* @dev Leaves the contract without owner. It will not be possible to call\r\n* `onlyOwner` functions. Can only be called by the current owner.\r\n*\r\n* NOTE: Renouncing ownership will leave the contract without an owner,\r\n* thereby disabling any functionality that is only available to the owner.\r\n*/\r\nfunction renounceOwnership() public virtual onlyOwner {\r\n_transferOwnership(address(0));\r\n}\r\n\r\n/**\r\n* @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n* Can only be called by the current owner.\r\n*/\r\nfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\nrequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n_transferOwnership(newOwner);\r\n}\r\n\r\n/**\r\n* @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n* Internal function without access restriction.\r\n*/\r\nfunction _transferOwnership(address newOwner) internal virtual {\r\naddress oldOwner = _owner;\r\n_owner = newOwner;\r\nemit OwnershipTransferred(oldOwner, newOwner);\r\n}\r\n}\r\n\r\ncontract MemeToken is ERC20, Ownable {\r\naddress private immutable team;\r\nuint256 private constant TAX = 1000; // 1%\r\nuint256 private constant MAX_SUPPLY = 420_690e9 ether;\r\n\r\nmapping(address => bool) private _isWhitelist;\r\n\r\nconstructor(string memory _name, string memory _symbol, address _team) ERC20(_name, _symbol) {\r\nteam = _team;\r\n_mint(msg.sender, MAX_SUPPLY);\r\n}\r\n\r\nfunction updatePool(address _pool) external onlyOwner {\r\n_isWhitelist[_pool] = true;\r\n}\r\n\r\nfunction _transfer(address from, address to, uint256 amount) internal override {\r\nuint256 tax = _getTax(from, to, amount);\r\nif (tax != 0) {\r\nsuper._transfer(from, team, tax);\r\n}\r\nsuper._transfer(from, to, amount - tax);\r\n}\r\n\r\nfunction _getTax(address from, address to, uint256 amount) private view returns (uint256 tax) {\r\nif (_isWhitelist[from] || _isWhitelist[to]) {\r\ntax = amount * TAX / 100_000;\r\n}\r\n}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MemeToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000e6c91cd9f85c4fd4089e9f3050c6c9ebfb923aa0000000000000000000000000000000000000000000000000000000000000000d50617469656e636549734b657900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000350494b0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d5bae5324ee52e70ae5c596d33a7ab82594785f3991c641a7efcd9c3446f9ec3"}