{"SourceCode": "pragma solidity ^0.4.24;\r\n// Game by spielley\r\n// If you want a cut of the 1% dev share on P3D divs\r\n// buy shares at => 0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1\r\n// P3D masternode rewards for the UI builder\r\n// Raffle3D v 1.04\r\n// spielley is not liable for any known or unknown bugs contained by contract\r\n// This is not a TEAM JUST product!\r\n\r\n// Concept:\r\n// buy a raffle ticket\r\n// => lifetime possible to win a round payout and a chance to win the jackpot\r\n// \r\n// Have fun, these games are purely intended for fun.\r\n// \r\n// Warning! do not simpply send eth to the contract, this will result in the\r\n// eth being stuck at contract => restriction using P3D in this version\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\ninterface SPASMInterface  {\r\n    function() payable external;\r\n    function disburse() external  payable;\r\n}\r\ninterface HourglassInterface  {\r\n    function() payable external;\r\n    function buy(address _playerAddress) payable external returns(uint256);\r\n    function sell(uint256 _amountOfTokens) external;\r\n    function reinvest() external;\r\n    function withdraw() external;\r\n    function exit() external;\r\n    function dividendsOf(address _playerAddress) external view returns(uint256);\r\n    function balanceOf(address _playerAddress) external view returns(uint256);\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\r\n    function stakingRequirement() external view returns(uint256);\r\n}\r\ncontract P3DRaffle is  Owned {\r\n    using SafeMath for uint;\r\n    HourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe); \r\n   function harvestabledivs()\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return ( P3Dcontract_.dividendsOf(address(this)))  ;\r\n    }\r\n    function raffleinfo(uint256 rafflenumber)\r\n        view\r\n        public\r\n        returns(uint256 drawblock,    uint256 ticketssold,\r\n    uint256 result,\r\n    uint256 resultjackpot,\r\n    bool validation,\r\n    bool wasabletovalidate,\r\n    address rafflevanity )\r\n    {\r\n        return (Raffles[rafflenumber].drawblock,    Raffles[rafflenumber].ticketssold,\r\n    Raffles[rafflenumber].result,\r\n    Raffles[rafflenumber].resultjackpot,\r\n    Raffles[rafflenumber].validation,\r\n    Raffles[rafflenumber].wasabletovalidate,\r\n    Raffles[rafflenumber].rafflevanity\r\n            )  ;\r\n    }\r\n    function FetchVanity(address player) view public returns(string)\r\n    {\r\n        return Vanity[player];\r\n    }\r\n    function devfeesoutstanding() view public returns(uint256)\r\n    {\r\n        return devfee;\r\n    }\r\n    function nextlotnumber() view public returns(uint256)\r\n    {\r\n        return (nextlotnr);\r\n    }\r\n    function nextrafflenumber() view public returns(uint256)\r\n    {\r\n        return (nextrafflenr);\r\n    }\r\n    function pots() pure public returns(uint256 rafflepot, uint256 jackpot)\r\n    {\r\n        return (rafflepot, jackpot);\r\n    }\r\n    struct Raffle {\r\n    uint256 drawblock;\r\n    uint256 ticketssold;\r\n    uint256 result;\r\n    uint256 resultjackpot;\r\n    bool validation;\r\n    bool wasabletovalidate;\r\n    address rafflevanity;\r\n}\r\n\r\n    uint256 public nextlotnr;\r\n    uint256 public nextrafflenr;\r\n    mapping(uint256 => address) public ticketsales;\r\n    mapping(uint256 => Raffle) public Raffles;\r\n    mapping(address => string) public Vanity;\r\n    uint256 public rafflepot;//90%\r\n    uint256 public jackpot; //9%\r\n    uint256 public devfee;//1%\r\n    SPASMInterface constant SPASM_ = SPASMInterface(0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1);\r\n    \r\n    constructor() public{\r\n    Raffles[0].validation = true;\r\n    nextrafflenr++;    \r\n}\r\n    \r\n    function buytickets(uint256 amount ,address masternode) public payable{\r\n    require(msg.value >= 10 finney * amount);\r\n    require(amount > 0);\r\n    uint256 counter;\r\n    address sender  = msg.sender;\r\n    for(uint i=0; i< amount; i++)\r\n        {\r\n            counter = i + nextlotnr;\r\n            ticketsales[counter] = sender;\r\n        }\r\n    nextlotnr += i;\r\n    P3Dcontract_.buy.value(msg.value)(masternode);\r\n}\r\nfunction fetchdivstopot () public{\r\n    uint256 divs = harvestabledivs();\r\n    uint256 base = divs.div(100);\r\n    \r\n    rafflepot = rafflepot.add(base.mul(90));// allocation to raffle\r\n    jackpot = jackpot.add(base.mul(9)); // allocation to jackpot\r\n    devfee = devfee.add(base);//dev fee\r\n   \r\n    P3Dcontract_.withdraw();\r\n    \r\n}\r\nfunction devfeetodev () public {\r\n    \r\n    SPASM_.disburse.value(devfee)();\r\n    devfee = 0;\r\n}\r\nfunction changevanity(string van) public payable{\r\n    require(msg.value >= 100  finney);\r\n    Vanity[msg.sender] = van;\r\n    rafflepot = rafflepot.add(msg.value);\r\n}\r\nfunction startraffle () public{\r\n    require(Raffles[nextrafflenr - 1].validation == true);\r\n    require(rafflepot >= 103 finney);\r\n    Raffles[nextrafflenr].drawblock = block.number;\r\n    \r\n    Raffles[nextrafflenr].ticketssold = nextlotnr;\r\n    nextrafflenr++;\r\n}\r\nfunction validateraffle () public{\r\n    uint256 rafnr = nextrafflenr - 1;\r\n    bool val = Raffles[rafnr].validation;\r\n    uint256 drawblock = Raffles[rafnr].drawblock;\r\n    require(val != true);\r\n    require(drawblock < block.number);\r\n    \r\n    //check if blockhash can be determined\r\n        if(block.number - 256 > drawblock) {\r\n            // can not be determined\r\n            Raffles[rafnr].validation = true;\r\n            Raffles[rafnr].wasabletovalidate = false;\r\n        }\r\n        if(block.number - 256 <= drawblock) {\r\n            // can be determined\r\n            uint256 winningticket = uint256(blockhash(drawblock)) % Raffles[rafnr].ticketssold;\r\n            uint256 jackpotdraw = uint256(blockhash(drawblock)) % 1000;\r\n            address winner = ticketsales[winningticket];\r\n            Raffles[rafnr].validation = true;\r\n            Raffles[rafnr].wasabletovalidate = true;\r\n            Raffles[rafnr].result = winningticket;\r\n            Raffles[rafnr].resultjackpot = jackpotdraw;\r\n            Raffles[rafnr].rafflevanity = winner;\r\n            if(jackpotdraw == 777){\r\n                winner.transfer(jackpot);\r\n                jackpot = 0;\r\n            }\r\n            winner.transfer(100 finney);\r\n            msg.sender.transfer(3 finney);\r\n            rafflepot = rafflepot.sub(103 finney);\r\n        }\r\n    \r\n}\r\nfunction () external payable{}// needed for P3D divs receiving\r\nfunction dusttorafflepot () public onlyOwner {\r\n    if(address(this).balance.sub(rafflepot).sub(jackpot).sub(devfee) > 0)\r\n    {\r\n        rafflepot = address(this).balance.sub(jackpot).sub(devfee);\r\n    }\r\n}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Raffles\",\"outputs\":[{\"name\":\"drawblock\",\"type\":\"uint256\"},{\"name\":\"ticketssold\",\"type\":\"uint256\"},{\"name\":\"result\",\"type\":\"uint256\"},{\"name\":\"resultjackpot\",\"type\":\"uint256\"},{\"name\":\"validation\",\"type\":\"bool\"},{\"name\":\"wasabletovalidate\",\"type\":\"bool\"},{\"name\":\"rafflevanity\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketsales\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextlotnumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextlotnr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextrafflenr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dusttorafflepot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rafflenumber\",\"type\":\"uint256\"}],\"name\":\"raffleinfo\",\"outputs\":[{\"name\":\"drawblock\",\"type\":\"uint256\"},{\"name\":\"ticketssold\",\"type\":\"uint256\"},{\"name\":\"result\",\"type\":\"uint256\"},{\"name\":\"resultjackpot\",\"type\":\"uint256\"},{\"name\":\"validation\",\"type\":\"bool\"},{\"name\":\"wasabletovalidate\",\"type\":\"bool\"},{\"name\":\"rafflevanity\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"van\",\"type\":\"string\"}],\"name\":\"changevanity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rafflepot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"devfeetodev\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestabledivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fetchdivstopot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Vanity\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"validateraffle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pots\",\"outputs\":[{\"name\":\"rafflepot\",\"type\":\"uint256\"},{\"name\":\"jackpot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"buytickets\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextrafflenumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"FetchVanity\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devfeesoutstanding\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startraffle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "P3DRaffle", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://cc1b8acfccbdfb9f9bcef8ed8275c7a63ad201385165b10c6993c4408da31496"}