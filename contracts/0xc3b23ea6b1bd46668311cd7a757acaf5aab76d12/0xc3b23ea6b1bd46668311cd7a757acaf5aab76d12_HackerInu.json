{"SourceCode": "/** \r\n\r\n\u2588\u2588\u2557  \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\r\n\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557    \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d    \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\r\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557    \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\r\n\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551    \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\r\n\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d    \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d   Token v2.0.0                \r\n\r\nTelegram: https://t.me/HackerINUPortal\r\nTwitter: https://twitter.com/hacker_inu\r\nWebsite: https://hackerinu.io\r\n\r\nSPDX-License-Identifier: MIT\r\n*/\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract HackerInu is Context, IERC20, Ownable {\r\n    string private constant _name = \"HACKER INU v2\";\r\n    string private constant _symbol = \"HCKR\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => uint256) private cooldown;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 public _totalSupply = 10000000 * 10**9;\r\n\r\n    //Buy Fee\r\n    uint256 private _liquidityFeeOnBuy = 0;\r\n    uint256 private _treasuryFeeOnBuy = 700;\r\n    uint256 private _devFeeOnBuy = 300;\r\n\r\n    //Sell Fee\r\n    uint256 private _liquidityFeeOnSell = 0;\r\n    uint256 private _treasuryFeeOnSell = 1300;\r\n    uint256 private _devFeeOnSell = 600;\r\n\r\n    //Original Fee\r\n    uint256 private _taxFee =\r\n        _liquidityFeeOnSell + _treasuryFeeOnSell + _devFeeOnSell;\r\n\r\n    uint256 private _previoustaxFee = _taxFee;\r\n\r\n    mapping(address => bool) public blacklist;\r\n\r\n    address payable public _treasuryAddress =\r\n        payable(0x04291298CE0050CFF34EA882D3dfE9a7Facaa2a6);\r\n    address payable public _devAddress =\r\n        payable(0x8cC5e6a4fD3Ab66F6c7781Be9482d6d7193E5891);\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    uint256 private _tradingOpenDate;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = true;\r\n\r\n    uint256 public _maxTxAmount = 30000 * 10**9; // 0.3%\r\n    uint256 public _maxWalletSize = 1000000 * 10**9; // 10%\r\n    uint256 public _tokenSwapThreshold = 1000 * 10**9; //0.1%\r\n\r\n    // Cooldown\r\n    uint256 public cooldownTimeBound = 120 seconds;\r\n    bool public cooldownEnabled = true;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        _balances[_msgSender()] = _totalSupply;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_treasuryAddress] = true;\r\n        _isExcludedFromFee[_devAddress] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (_taxFee == 0) return;\r\n\r\n        _previoustaxFee = _taxFee;\r\n\r\n        _taxFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _taxFee = _previoustaxFee;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()] - amount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    // Transfer functions\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"TOKEN: Transfer amount must be greater than zero\");\r\n\r\n        if (from != owner() && to != owner()) {\r\n            require(!cooldownEnabled || (cooldown[from] < block.timestamp && cooldown[to] < block.timestamp), \"TOKEN: Cooldown is enabled. Try again in a few minutes.\");\r\n            require(\r\n                _tradingOpenDate < block.timestamp,\r\n                \"TOKEN: This account cannot send or receive tokens until trading is enabled\"\r\n            );\r\n            require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\r\n            require(\r\n                !blacklist[from] && !blacklist[to],\r\n                \"TOKEN: Your account is blacklisted!\"\r\n            );\r\n\r\n            if (to != uniswapV2Pair) {\r\n                require(\r\n                    balanceOf(to) + amount < _maxWalletSize,\r\n                    \"TOKEN: Balance exceeds wallet size!\"\r\n                );\r\n                cooldown[to] = block.timestamp + cooldownTimeBound;\r\n            }\r\n\r\n            if(from != uniswapV2Pair) {\r\n                cooldown[from] = block.timestamp + cooldownTimeBound;\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool shouldSwap = contractTokenBalance >= _tokenSwapThreshold;\r\n\r\n            if (contractTokenBalance >= _maxTxAmount) {\r\n                contractTokenBalance = _maxTxAmount;\r\n            }\r\n\r\n            if (shouldSwap && !inSwap && from != uniswapV2Pair && swapEnabled) {\r\n                swapAndLiquidy(contractTokenBalance);\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        //Transfer Tokens\r\n        if (\r\n            (_isExcludedFromFee[from] || _isExcludedFromFee[to]) ||\r\n            (from != uniswapV2Pair && to != uniswapV2Pair)\r\n        ) {\r\n            takeFee = false;\r\n        } else {\r\n            //Set Fee for Buys\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                _taxFee = _liquidityFeeOnBuy + _treasuryFeeOnBuy + _devFeeOnBuy;\r\n            }\r\n\r\n            //Set Fee for Sells\r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                _taxFee =\r\n                    _liquidityFeeOnSell +\r\n                    _treasuryFeeOnSell +\r\n                    _devFeeOnSell;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 feeAmount = (amount * _taxFee) / 10000;\r\n        uint256 remainingAmount = amount - feeAmount;\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[address(this)] = _balances[address(this)] + feeAmount;\r\n        _balances[recipient] = _balances[recipient] + remainingAmount;\r\n        emit Transfer(sender, recipient, remainingAmount);\r\n    }\r\n\r\n    // Swap and send functions\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // Add liquidity function\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapAndLiquidy(uint256 amount) private {\r\n        // Split the contract balance into halves\r\n        uint256 denominator = (_liquidityFeeOnBuy +\r\n            _liquidityFeeOnSell +\r\n            _treasuryFeeOnBuy +\r\n            _treasuryFeeOnSell +\r\n            _devFeeOnBuy +\r\n            _devFeeOnSell) * 2;\r\n        uint256 tokensToAddLiquidityWith = (amount *\r\n            (_liquidityFeeOnBuy + _liquidityFeeOnSell)) / denominator;\r\n        uint256 toSwap = amount - tokensToAddLiquidityWith;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(toSwap);\r\n\r\n        uint256 deltaBalance = address(this).balance - initialBalance;\r\n        uint256 unitBalance = deltaBalance /\r\n            (denominator - (_liquidityFeeOnBuy + _liquidityFeeOnSell));\r\n        uint256 ethToAddLiquidityWith = unitBalance *\r\n            (_liquidityFeeOnBuy + _liquidityFeeOnSell);\r\n\r\n        if (ethToAddLiquidityWith > 0) {\r\n            // Add liquidity to uniswap\r\n            addLiquidity(tokensToAddLiquidityWith, ethToAddLiquidityWith);\r\n        }\r\n\r\n        // Send remaining ETH\r\n        uint256 treasuryAmt = unitBalance *\r\n            2 *\r\n            (_treasuryFeeOnBuy + _treasuryFeeOnSell);\r\n        uint256 devAmt = unitBalance * 2 * (_devFeeOnBuy + _devFeeOnSell) >\r\n            address(this).balance\r\n            ? address(this).balance\r\n            : unitBalance * 2 * (_devFeeOnBuy + _devFeeOnSell);\r\n\r\n        if (treasuryAmt > 0) {\r\n            (bool successtreasury, ) = _treasuryAddress.call{\r\n                value: treasuryAmt\r\n            }(\"\");\r\n            require(successtreasury, \"Tx Failed\");\r\n        }\r\n\r\n        if (devAmt > 0) {\r\n            (bool successdev, ) = _devAddress.call{value: devAmt}(\"\");\r\n            require(successdev, \"Tx Failed\");\r\n        }\r\n    }\r\n\r\n    function manualSwapAndLiquify() external {\r\n        require(_msgSender() == _devAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapAndLiquidy(contractBalance);\r\n    }\r\n\r\n    function blacklistAddresses(address[] memory _blacklist) public onlyOwner {\r\n        for (uint256 i = 0; i < _blacklist.length; i++) {\r\n            blacklist[_blacklist[i]] = true;\r\n        }\r\n    }\r\n\r\n    function whitelistAddress(address whitelist) external onlyOwner {\r\n        blacklist[whitelist] = false;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function setExcludeFromFee(address account, bool excluded)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _isExcludedFromFee[account] = excluded;\r\n    }\r\n\r\n    function setLaunchDate(uint32 delay) public onlyOwner {\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n        _tradingOpenDate = delay + blockTimestamp + (blockTimestamp % 60);\r\n    }\r\n\r\n    function setCooldownTimeBound(uint256 timeInSeconds) external onlyOwner {\r\n        cooldownTimeBound = timeInSeconds;\r\n    }\r\n\r\n    function setEnableCooldown(bool enable) external onlyOwner {\r\n        cooldownEnabled = enable;\r\n    }\r\n\r\n    function setTreasuryWalletAddress(address payable newAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _treasuryAddress = newAddress;\r\n    }\r\n\r\n    function setDevWalletAddress(address payable newAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _devAddress = newAddress;\r\n    }\r\n\r\n    function setFee(\r\n        uint256 liquidityFeeOnBuy,\r\n        uint256 liquidityFeeOnSell,\r\n        uint256 treasuryFeeOnBuy,\r\n        uint256 treasuryFeeOnSell,\r\n        uint256 devFeeOnBuy,\r\n        uint256 devFeeOnSell\r\n    ) public onlyOwner {\r\n        _liquidityFeeOnBuy = liquidityFeeOnBuy;\r\n        _liquidityFeeOnSell = liquidityFeeOnSell;\r\n        _treasuryFeeOnBuy = treasuryFeeOnBuy;\r\n        _treasuryFeeOnSell = treasuryFeeOnSell;\r\n        _devFeeOnBuy = devFeeOnBuy;\r\n        _devFeeOnSell = devFeeOnSell;\r\n    }\r\n\r\n    function setMinSwapTokensThreshold(uint256 tokenSwapThreshold)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _tokenSwapThreshold = tokenSwapThreshold;\r\n    }\r\n\r\n    function setSwapEnabled(bool _swapEnabled) public onlyOwner {\r\n        swapEnabled = _swapEnabled;\r\n    }\r\n\r\n    function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner {\r\n        _maxTxAmount = maxTxAmount;\r\n    }\r\n\r\n    function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner {\r\n        _maxWalletSize = maxWalletSize;\r\n    }\r\n\r\n    // Enable the current contract to receive ETH\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_devAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_treasuryAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_blacklist\",\"type\":\"address[]\"}],\"name\":\"blacklistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownTimeBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInSeconds\",\"type\":\"uint256\"}],\"name\":\"setCooldownTimeBound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setDevWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setEnableCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"setLaunchDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenSwapThreshold\",\"type\":\"uint256\"}],\"name\":\"setMinSwapTokensThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelist\",\"type\":\"address\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HackerInu", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19e23058bce680cc4cab3eb302b067cf3acaf828c13b8ce4a3dcb51035eb4647"}