{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SilicaEthStaking.sol\": {\r\n      \"content\": \"/**\\n     _    _ _    _           _             \\n    / \\\\  | | | _(_)_ __ ___ (_)_   _  __ _ \\n   / _ \\\\ | | |/ / | '_ ` _ \\\\| | | | |/ _` |\\n  / ___ \\\\| |   <| | | | | | | | |_| | (_| |\\n /_/   \\\\_\\\\_|_|\\\\_\\\\_|_| |_| |_|_|\\\\__, |\\\\__,_|\\n                               |___/        \\n * */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/oracle/oracleEthStaking/IOracleEthStaking.sol\\\";\\nimport {AbstractSilicaV2_1} from \\\"./AbstractSilicaV2_1.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/oracle/IOracleRegistry.sol\\\";\\nimport \\\"./libraries/math/RewardMath.sol\\\";\\n\\ncontract SilicaEthStaking is AbstractSilicaV2_1 {\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               Constants\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public constant COMMODITY_TYPE = 2;\\n\\n    function decimals() public pure override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Constructor\\n    //////////////////////////////////////////////////////////////*/\\n    \\n    constructor() ERC20(\\\"Silica\\\", \\\"SLC\\\") {}\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Getters\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to return the last day Silica was synced with Oracle\\n    /// @return uint32: The last day the Silica was synced with the Oracle\\n    function _getLastIndexedDay() internal override view returns (uint32) {\\n        IOracleEthStaking oracleEthStaking = IOracleEthStaking(\\n            IOracleRegistry(oracleRegistry).getOracleAddress(address(rewardToken), COMMODITY_TYPE)\\n        );\\n        uint32 lastIndexedDayMem = oracleEthStaking.getLastIndexedDay();\\n        require(lastIndexedDayMem != 0, \\\"Invalid State\\\");\\n\\n        return lastIndexedDayMem;\\n    }\\n\\n    /// @notice Function to return the amount of rewards due by the seller to the contract on day inputed\\n    /// @param _day The day on which to query the reward\\n    /// @return uint256: The reward due on the input day\\n    function _getRewardDueOnDay(uint256 _day) internal view override returns (uint256) {\\n        IOracleEthStaking oracleEthStaking = IOracleEthStaking(\\n            IOracleRegistry(oracleRegistry).getOracleAddress(address(rewardToken), COMMODITY_TYPE)\\n        );\\n        (, uint256 baseRewardPerIncrementPerDay, , , , , ) = oracleEthStaking.get(_day);\\n\\n        return RewardMath._getEthStakingRewardDue(totalSupply(), baseRewardPerIncrementPerDay, decimals());\\n    }\\n\\n    /// @notice Function to return total rewards due between _firstday (inclusive) and _lastday (inclusive)\\n    /// @dev    This function is to be overridden by derived Silica contracts\\n    /// @param _firstDay The start day to query from\\n    /// @param _lastDay The end day to query until \\n    function _getRewardDueInRange(uint256 _firstDay, uint256 _lastDay) internal view override returns (uint256[] memory) {\\n        IOracleEthStaking oracleEthStaking = IOracleEthStaking(\\n            IOracleRegistry(oracleRegistry).getOracleAddress(address(rewardToken), COMMODITY_TYPE)\\n        );\\n        uint256[] memory baseRewardPerIncrementPerDayArray = oracleEthStaking.getInRange(_firstDay, _lastDay);\\n\\n        uint256[] memory rewardDueArray = new uint256[](baseRewardPerIncrementPerDayArray.length);\\n\\n        uint8 decimalsMem = decimals();\\n        uint256 totalSupplyCopy = totalSupply();\\n        for (uint256 i; i < baseRewardPerIncrementPerDayArray.length; ) {\\n            rewardDueArray[i] = RewardMath._getEthStakingRewardDue(totalSupplyCopy, baseRewardPerIncrementPerDayArray[i], decimalsMem);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return rewardDueArray;\\n    }\\n\\n    /// @notice Returns the commodity type the seller is selling with this contract\\n    /// @return The commodity type the seller is selling with this contract\\n    function getCommodityType() external pure override returns (uint256) {\\n        return COMMODITY_TYPE;\\n    }\\n\\n    /// @notice Returns decimals of the contract\\n    /// @return uint8: Decimals\\n    function getDecimals() external pure override returns (uint8) {\\n        return decimals();\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/oracle/oracleEthStaking/IOracleEthStaking.sol\": {\r\n      \"content\": \"/**\\n     _    _ _    _           _             \\n    / \\\\  | | | _(_)_ __ ___ (_)_   _  __ _ \\n   / _ \\\\ | | |/ / | '_ ` _ \\\\| | | | |/ _` |\\n  / ___ \\\\| |   <| | | | | | | | |_| | (_| |\\n /_/   \\\\_\\\\_|_|\\\\_\\\\_|_| |_| |_|_|\\\\__, |\\\\__,_|\\n                               |___/        \\n * */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./IOracleEthStakingEvents.sol\\\";\\n \\n/**\\n * @title Alkimiya OraclePoS\\n * @author Alkimiya Team\\n * @notice This is the interface for Proof of Stake Oracle contract\\n * */\\ninterface IOracleEthStaking is IOracleEthStakingEvents {\\n\\n    /// @notice Update the Alkimiya Index for PoS instruments on Oracle for a given day\\n    function updateIndex(\\n        uint256 _referenceDay,\\n        uint256 _baseRewardPerIncrementPerDay,\\n        uint256 _burnFee,\\n        uint256 _priorityFee,\\n        uint256 _burnFeeNormalized,\\n        uint256 _priorityFeeNormalized,\\n        bytes memory signature\\n    ) external returns (bool success);\\n\\n    /// @notice Function to return Oracle index on given day\\n    function get(uint256 _referenceDay)\\n        external\\n        view\\n        returns (\\n            uint256 referenceDay,\\n            uint256 baseRewardPerIncrementPerDay,\\n            uint256 burnFee,\\n            uint256 priorityFee,\\n            uint256 burnFeeNormalized,\\n            uint256 priorityFeeNormalized,\\n            uint256 timestamp\\n        );\\n\\n    /// @notice Function to return array of oracle data between firstday and lastday (inclusive)\\n    function getInRange(uint256 _firstDay, uint256 _lastDay) external view returns (uint256[] memory baseRewardPerIncrementPerDayArray);\\n\\n    /// @notice Return if the network data on a given day is updated to Oracle\\n    function isDayIndexed(uint256 _referenceDay) external view returns (bool);\\n\\n    /// @notice Return the last day on which the Oracle is updated\\n    function getLastIndexedDay() external view returns (uint32);\\n}\\n\"\r\n    },\r\n    \"contracts/AbstractSilicaV2_1.sol\": {\r\n      \"content\": \"/**\\n     _    _ _    _           _             \\n    / \\\\  | | | _(_)_ __ ___ (_)_   _  __ _ \\n   / _ \\\\ | | |/ / | '_ ` _ \\\\| | | | |/ _` |\\n  / ___ \\\\| |   <| | | | | | | | |_| | (_| |\\n /_/   \\\\_\\\\_|_|\\\\_\\\\_|_| |_| |_|_|\\\\__, |\\\\__,_|\\n                               |___/        \\n * */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./libraries/math/PayoutMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {ISilicaV2_1} from \\\"./interfaces/silica/ISilicaV2_1.sol\\\";\\nimport {SilicaV2_1Types} from \\\"./libraries/SilicaV2_1Types.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {SilicaV2_1Storage} from \\\"./storage/SilicaV2_1Storage.sol\\\";\\n\\n\\n/**\\n * @title  Alkimiya AbstractSilicaV2_1\\n * @author Alkimiya Team\\n * @notice This is the base to be inherited & implemented by Silica contracts\\n * */\\nabstract contract AbstractSilicaV2_1 is ERC20, Initializable, ISilicaV2_1, SilicaV2_1Storage {\\n    \\n    /*///////////////////////////////////////////////////////////////\\n                                 Constants\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Number of days between deploymentDay and firstDueDay\\n    uint256 internal constant DAYS_BETWEEN_DD_AND_FDD = 2;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 Modifiers\\n    //////////////////////////////////////////////////////////////*/\\n\\n    modifier onlyBuyers() {\\n        require(balanceOf(msg.sender) != 0, \\\"Not Buyer\\\");\\n        _;\\n    }\\n\\n    modifier onlyOpen() {\\n        require(isOpen(), \\\"Not Open\\\");\\n        _;\\n    }\\n\\n    modifier onlyExpired() {\\n        require(isExpired(), \\\"Not Expired\\\");\\n        _;\\n    }\\n\\n    modifier onlyDefaulted() {\\n        if (defaultDay == 0) {\\n            _tryDefaultContract();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyFinished() {\\n        if (finishDay == 0) {\\n            _tryFinishContract();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not Owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOnePayout() {\\n        require(!didSellerCollectPayout, \\\"Payout already collected\\\");\\n        didSellerCollectPayout = true;\\n        _;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 Initializer\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /** \\n     * @notice Initialize a new SilicaV2_1\\n     * @dev Sets the state of the new SilicaV2_1 clone\\n     * @param initializeData The struct to which to set the Silica's state\\n    */\\n    function initialize(InitializeData calldata initializeData) external initializer {\\n        require(\\n            initializeData.rewardTokenAddress != address(0) &&\\n                initializeData.paymentTokenAddress != address(0) &&\\n                initializeData.oracleRegistry != address(0) &&\\n                initializeData.sellerAddress != address(0),\\n            \\\"Invalid Address\\\"\\n        );\\n        require(initializeData.lastDueDay >= initializeData.dayOfDeployment + DAYS_BETWEEN_DD_AND_FDD, \\\"Invalid lastDueDay\\\");\\n\\n        rewardToken = initializeData.rewardTokenAddress;\\n        paymentToken = initializeData.paymentTokenAddress;\\n        oracleRegistry = initializeData.oracleRegistry;\\n\\n        owner = initializeData.sellerAddress;\\n        lastDueDay = uint32(initializeData.lastDueDay);\\n        firstDueDay = uint32(initializeData.dayOfDeployment + DAYS_BETWEEN_DD_AND_FDD);\\n\\n        resourceAmount = initializeData.resourceAmount;\\n\\n        reservedPrice = _calculateReservedPrice(\\n            initializeData.unitPrice,\\n            initializeData.lastDueDay - initializeData.dayOfDeployment - 1,\\n            decimals(),\\n            initializeData.resourceAmount\\n        );\\n        require(reservedPrice > 0, \\\"reservedPrice = 0\\\");\\n\\n        initialCollateral = initializeData.collateralAmount;\\n    }\\n\\n    /**\\n     * @notice Calculate the Reserved Price of the silica\\n     * @param unitPrice The price per unit \\n     * @param numDeposits The number of payments to be made during contract\\n     * @param _decimals The number of decimals of the SilicaV2_1\\n     * @param _resourceAmount The quantity of the underlying resource\\n     */\\n    function _calculateReservedPrice(\\n        uint256 unitPrice,\\n        uint256 numDeposits,\\n        uint256 _decimals,\\n        uint256 _resourceAmount\\n    ) internal pure returns (uint256) {\\n        return (unitPrice * _resourceAmount * numDeposits) / (10**_decimals);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 Contract states\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Returns the status of the contract\\n    /// @return SilicaV2_1Types.Status The current state of the Silica\\n    function getStatus() public view returns (SilicaV2_1Types.Status) {\\n        if (isOpen()) {\\n            return SilicaV2_1Types.Status.Open;\\n        } else if (isExpired()) {\\n            return SilicaV2_1Types.Status.Expired;\\n        } else if (isRunning()) {\\n            return SilicaV2_1Types.Status.Running;\\n        } else if (finishDay > 0 || isFinished()) {\\n            return SilicaV2_1Types.Status.Finished;\\n        } else if (defaultDay > 0 || isDefaulted()) {\\n            return SilicaV2_1Types.Status.Defaulted;\\n        }\\n    }\\n\\n    /// @notice Check if contract is in open state\\n    /// @return bool: True is contract status is open state\\n    function isOpen() public view returns (bool) {\\n        return (_getLastIndexedDay() == firstDueDay - DAYS_BETWEEN_DD_AND_FDD);\\n    }\\n\\n    /// @notice Check if contract is in expired state\\n    /// @return bool: True is contract status is expired state\\n    function isExpired() public view returns (bool) {\\n        return (defaultDay == 0 && finishDay == 0 && totalSupply() == 0 && _getLastIndexedDay() >= firstDueDay - 1);\\n    }\\n\\n    /// @notice Check if contract is in defaulted state\\n    /// @return bool: True is contract status is defaulted state\\n    function isDefaulted() public view returns (bool) {\\n        return (getDayOfDefault() > 0);\\n    }\\n\\n    /**\\n     * @notice Returns the day of default\\n     * @dev If X is returned, then the contract has paid X - firstDueDay payments. \\n     * @return uint256: Day of default (if defaulted)\\n     * */ \\n    function getDayOfDefault() public view returns (uint256) {\\n        \\n        if (finishDay > 0) revert(\\\"contract not defaulted\\\");\\n        if (defaultDay > 0) return defaultDay;\\n\\n        uint256 firstDueDayMem = firstDueDay;\\n        uint256 lastDayContractOwesReward = getLastDayContractOwesReward(lastDueDay, _getLastIndexedDay());\\n        uint256 numDaysRequired = lastDayContractOwesReward < firstDueDayMem ? 0 : lastDayContractOwesReward + 1 - firstDueDayMem;\\n\\n        // Contract hasn't progressed enough to default\\n        if (numDaysRequired == 0) return 0;\\n\\n        (uint256 numDays, ) = _getDaysAndRewardFulfilled(\\n            IERC20(rewardToken).balanceOf(address(this)),\\n            firstDueDayMem,\\n            lastDayContractOwesReward\\n        );\\n\\n        // The rewardBalance is insufficient to cover numDaysRequired, hence defaulted\\n        if (numDays < numDaysRequired) {\\n            return firstDueDayMem + numDays;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @notice Function to set a contract as default\\n    /// @dev If the contract is not defaulted, revert\\n    function _tryDefaultContract() internal {\\n        uint256 firstDueDayMem = firstDueDay;\\n        uint256 lastDayContractOwesReward = getLastDayContractOwesReward(lastDueDay, _getLastIndexedDay());\\n        uint256 numDaysRequired = lastDayContractOwesReward < firstDueDayMem ? 0 : lastDayContractOwesReward + 1 - firstDueDayMem;\\n\\n        // Contract hasn't progressed enough to default\\n        require(numDaysRequired > 0, \\\"Not Defaulted\\\");\\n\\n        (uint256 numDays, uint256 totalRewardDelivered) = _getDaysAndRewardFulfilled(\\n            IERC20(rewardToken).balanceOf(address(this)),\\n            firstDueDayMem,\\n            lastDayContractOwesReward\\n        );\\n\\n        // The rewardBalance is insufficient to cover numDaysRequired, hence defaulted\\n        if (numDays < numDaysRequired) {\\n            uint256 dayOfDefaultMem = firstDueDayMem + numDays;\\n            _defaultContract(dayOfDefaultMem, IERC20(rewardToken).balanceOf(address(this)), totalRewardDelivered);\\n        } else {\\n            revert(\\\"Not Defaulted\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Snapshots variables necessary to perform default settlements.\\n     * @dev This tx should only happen once in the Silica's lifetime.\\n     * @param _dayOfDefault The day on which default conditions were met\\n     * @param silicaRewardBalance The balance of reward tokens in the Silica\\n     * @param _totalRewardDelivered The total amount of reward that was deilivered\\n     *  */  \\n    function _defaultContract(\\n        uint256 _dayOfDefault,\\n        uint256 silicaRewardBalance,\\n        uint256 _totalRewardDelivered\\n    ) internal {\\n        if (silicaRewardBalance > _totalRewardDelivered) {\\n            rewardExcess = silicaRewardBalance - _totalRewardDelivered;\\n        }\\n        defaultDay = uint32(_dayOfDefault);\\n        rewardDelivered = _totalRewardDelivered;\\n        resourceAmount = totalSupply();\\n        totalUpfrontPayment = IERC20(paymentToken).balanceOf(address(this));\\n\\n        emit StatusChanged(SilicaV2_1Types.Status.Defaulted);\\n    }\\n\\n    /// @notice Check if the contract is in running state\\n    /// @return bool: True if the contract status is Running\\n    function isRunning() public view returns (bool) {\\n        if (!isOpen() && !isExpired() && defaultDay == 0 && finishDay == 0) {\\n            uint256 firstDueDayMem = firstDueDay;\\n            uint256 lastDueDayMem = lastDueDay;\\n            uint256 lastDayContractOwesReward = getLastDayContractOwesReward(lastDueDayMem, _getLastIndexedDay());\\n\\n            if (lastDayContractOwesReward < firstDueDayMem) return true;\\n\\n            (uint256 numDays, ) = _getDaysAndRewardFulfilled(\\n                IERC20(rewardToken).balanceOf(address(this)),\\n                firstDueDayMem,\\n                lastDayContractOwesReward\\n            );\\n\\n            uint256 contractDurationDays = lastDayContractOwesReward + 1 - firstDueDayMem;\\n            uint256 maxContractDurationDays = lastDueDayMem + 1 - firstDueDayMem;\\n\\n            // For contracts that progressed GE firstDueDay\\n            // Contract is running if it's progressed as far as it can, but not finished\\n            return numDays == contractDurationDays && numDays != maxContractDurationDays;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice Check if contract is in finished state\\n    /// @return bool: True if the contract status is Finished\\n    function isFinished() public view returns (bool) {\\n        if (finishDay != 0) return true;\\n\\n        uint256 firstDueDayMem = firstDueDay;\\n        uint256 lastDueDayMem = lastDueDay;\\n        uint256 lastDayContractOwesReward = getLastDayContractOwesReward(lastDueDayMem, _getLastIndexedDay());\\n\\n        (uint256 numDays, ) = _getDaysAndRewardFulfilled(\\n            IERC20(rewardToken).balanceOf(address(this)),\\n            firstDueDayMem,\\n            lastDayContractOwesReward\\n        );\\n\\n        if (numDays == lastDueDayMem + 1 - firstDueDayMem) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Function to set a contract status as Finished\\n    /// @dev If the contract hasn't finished, revert\\n    function _tryFinishContract() internal {\\n        uint256 firstDueDayMem = firstDueDay;\\n        uint256 lastDueDayMem = lastDueDay;\\n        uint256 lastDayContractOwesReward = getLastDayContractOwesReward(lastDueDayMem, _getLastIndexedDay());\\n\\n        (uint256 numDays, uint256 totalRewardDelivered) = _getDaysAndRewardFulfilled(\\n            IERC20(rewardToken).balanceOf(address(this)),\\n            firstDueDayMem,\\n            lastDayContractOwesReward\\n        );\\n\\n        if (numDays == lastDueDayMem + 1 - firstDueDayMem) {\\n            // Set finishDay to non-zero value. Subsequent calls to onlyFinished functions should skip this function all together\\n            _finishContract(lastDueDayMem, IERC20(rewardToken).balanceOf(address(this)), totalRewardDelivered);\\n        } else {\\n            revert(\\\"Not Finished\\\");\\n        }\\n    }\\n\\n    /// @notice Snapshots variables necessary to perform settlements\\n    /// @dev This tx should only happen once in the Silica's lifetime\\n    /// @param _finishDay Day on which the contract finish conditions were met\\n    /// @param silicaRewardBalance The reward token balance of the Silica\\n    /// @param _totalRewardDelivered The amount of reward which was deilivered\\n    function _finishContract(\\n        uint256 _finishDay,\\n        uint256 silicaRewardBalance,\\n        uint256 _totalRewardDelivered\\n    ) internal {\\n        if (silicaRewardBalance > _totalRewardDelivered) {\\n            rewardExcess = silicaRewardBalance - _totalRewardDelivered;\\n        }\\n\\n        finishDay = uint32(_finishDay);\\n        rewardDelivered = _totalRewardDelivered;\\n        resourceAmount = totalSupply();\\n\\n        emit StatusChanged(SilicaV2_1Types.Status.Finished);\\n    }\\n\\n    /// @notice Function to get the last day fulfilled and reward delivered\\n    /// @return lastDayFulfilled The final day on which rewards were deilvered\\n    /// @return rewardDelivered The amount of balance of the reward token that has been deilvered by the seller\\n    function getDaysAndRewardFulfilled() external view returns (uint256 lastDayFulfilled, uint256 rewardDelivered) {\\n        uint256 lastDueDayMem = lastDueDay;\\n        uint256 lastIndexedDayMem = _getLastIndexedDay();\\n        uint256 lastDayContractOwesReward = getLastDayContractOwesReward(lastDueDayMem, lastIndexedDayMem);\\n\\n        uint256 rewardFulfilled = rewardDelivered == 0 ? IERC20(rewardToken).balanceOf(address(this)) : rewardDelivered;\\n        return _getDaysAndRewardFulfilled(rewardFulfilled, firstDueDay, lastDayContractOwesReward);\\n    }\\n\\n    /// @notice Returns the number of days N fulfilled by this contract, as well as the reward delivered for all N days\\n    /// @param  _rewardBalance Reward token balance\\n    /// @param _firstDueDay Day from which reward deposits have been required\\n    /// @param _lastDayContractOwesReward Final day reward deposits are due\\n    /// @return lastDayFulfilled The final day on which rewards were deilvered\\n    /// @return rewardDelivered The amount of balance of the reward token that has been deilvered by the seller\\n    function _getDaysAndRewardFulfilled(\\n        uint256 _rewardBalance,\\n        uint256 _firstDueDay,\\n        uint256 _lastDayContractOwesReward\\n    ) internal view returns (uint256 lastDayFulfilled, uint256 rewardDelivered) {\\n        if (_lastDayContractOwesReward < _firstDueDay) {\\n            return (0, 0); \\n        }\\n\\n        uint256 totalDue;\\n\\n        uint256[] memory rewardDueArray = _getRewardDueInRange(_firstDueDay, _lastDayContractOwesReward);\\n        for (uint256 i; i < rewardDueArray.length; ) {\\n            uint256 curDay = _firstDueDay + i;\\n\\n            if (_rewardBalance < totalDue + rewardDueArray[i] + _getCollateralLocked(curDay)) {\\n                return (i, totalDue + _getCollateralLocked(curDay));\\n            }\\n            totalDue += rewardDueArray[i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Otherwise, contract delivered up to last day that it owes reward\\n        return (rewardDueArray.length, totalDue + _getCollateralLocked(_lastDayContractOwesReward));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Contract settlement and updates\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function returns the accumulative rewards delivered\\n    /// @return uint256: Accumulative rewards delivered\\n    function getRewardDeliveredSoFar() external view returns (uint256) {\\n        if (rewardDelivered == 0) {\\n            (, uint256 totalRewardDelivered) = _getDaysAndRewardFulfilled(\\n                IERC20(rewardToken).balanceOf(address(this)),\\n                firstDueDay,\\n                getLastDayContractOwesReward(lastDueDay, _getLastIndexedDay())\\n            );\\n            return totalRewardDelivered;\\n        } else {\\n            return rewardDelivered;\\n        }\\n    }\\n\\n    /// @notice Function returns the last day contract needs to deliver rewards\\n    /// @param _lastDueDay The Final day reward deposits are due\\n    /// @param lastIndexedDay The most recent day that has oracle data\\n    /// @return uint256: The last day reward deposits are due\\n    function getLastDayContractOwesReward(uint256 _lastDueDay, uint256 lastIndexedDay) public pure returns (uint256) {\\n        // Silica always owes up to DayX-1 in rewards\\n        return lastIndexedDay - 1 <= _lastDueDay ? lastIndexedDay - 1 : _lastDueDay;\\n    }\\n\\n    /// @notice Function returns the Collateral Locked on the day inputed\\n    /// @param  day The day for which to query the collateral value\\n    /// @return uint256: Collateral Locked on the day inputed\\n    function _getCollateralLocked(uint256 day) internal view returns (uint256) {\\n        uint256 firstDueDayMem = firstDueDay;\\n        uint256 initialCollateralAfterRelease = _getInitialCollateralAfterRelease();\\n        if (day <= firstDueDayMem) {\\n            return initialCollateralAfterRelease;\\n        }\\n\\n        (uint256 initCollateralReleaseDay, uint256 finalCollateralReleaseDay) = _getCollateralUnlockDays(firstDueDayMem);\\n\\n        if (day >= finalCollateralReleaseDay) {\\n            return (0);\\n        }\\n        if (day >= initCollateralReleaseDay) {\\n            return ((initialCollateralAfterRelease * 3) / 4);\\n        }\\n        return (initialCollateralAfterRelease);\\n    }\\n\\n    /// @notice Function that calculate the collateral based on purchased amount after contract starts\\n    function _getInitialCollateralAfterRelease() internal view returns (uint256) {\\n        return (totalSupply() * initialCollateral) / resourceAmount;\\n    }\\n\\n    /// @notice Function that calculates the dates collateral gets partial release\\n    /// @param _firstDueDay The first day on which reward deposits were required\\n    /// @return initCollateralReleaseDay The first day collateral is released\\n    /// @return finalCollateralReleaseDay The last day collateral is released \\n    function _getCollateralUnlockDays(uint256 _firstDueDay)\\n        internal\\n        view\\n        returns (uint256 initCollateralReleaseDay, uint256 finalCollateralReleaseDay)\\n    {\\n        uint256 numDeposits = lastDueDay + 1 - _firstDueDay;\\n\\n        initCollateralReleaseDay = numDeposits % 4 > 0 ? _firstDueDay + 1 + (numDeposits / 4) : _firstDueDay + (numDeposits / 4);\\n        finalCollateralReleaseDay = numDeposits % 2 > 0 ? _firstDueDay + 1 + (numDeposits / 2) : _firstDueDay + (numDeposits / 2);\\n\\n        if (numDeposits == 2) {\\n            finalCollateralReleaseDay += 1;\\n        }\\n    }\\n\\n    /// @notice Function returns the rewards amount the seller needs deliver for next Oracle update\\n    /// @return rewardDueNextOracleUpdate Reward amount due to be deposited at next Oracle write operation\\n    function getRewardDueNextOracleUpdate() external view returns (uint256 rewardDueNextOracleUpdate) {\\n\\n        if (finishDay > 0 || defaultDay > 0) return 0;\\n\\n        uint256 nextIndexedDay = _getLastIndexedDay() + 1;\\n        uint256 firstDueDayMem = firstDueDay;\\n        if (nextIndexedDay < firstDueDayMem) {\\n            return (0);\\n        }\\n        uint256 lastDayContractOwesReward = getLastDayContractOwesReward(lastDueDay, nextIndexedDay);\\n        uint256 rewardBalance = IERC20(rewardToken).balanceOf(address(this));\\n        uint256[] memory rewardDueArray = _getRewardDueInRange(firstDueDayMem, lastDayContractOwesReward);\\n        uint256 totalDue;\\n        uint256 balanceNeeded;\\n\\n        for (uint256 i; i < rewardDueArray.length;) {\\n            uint256 curDay = firstDueDayMem + i;\\n            totalDue += rewardDueArray[i];\\n\\n            if (balanceNeeded < totalDue + _getCollateralLocked(curDay)) {\\n                balanceNeeded = totalDue + _getCollateralLocked(curDay);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (balanceNeeded <= rewardBalance) {\\n            return 0;\\n        } else {\\n            return (balanceNeeded - rewardBalance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Processes a buyer's upfront payment to purchase hashpower/staking using paymentTokens.\\n     * Silica is minted proportional to purchaseAmount and transfered to buyer.\\n     * @dev confirms the buyer's payment, mint the Silicas and transfer the tokens.\\n     * @param amountSpecified The amount to deposit\\n     * @return mintAmount The amount of Silica tokens that were minted\\n     */\\n    function deposit(uint256 amountSpecified) external onlyOpen returns (uint256 mintAmount) {\\n        require(amountSpecified > 0, \\\"Invalid Value\\\");\\n\\n        mintAmount = _deposit(msg.sender, msg.sender, totalSupply(), amountSpecified);\\n        _mint(msg.sender, mintAmount);\\n    }\\n\\n    /**\\n     * @notice Processes a buyer's upfront payment to purchase hashpower/staking using paymentTokens.\\n     * Silica is minted proportional to purchaseAmount and transfered to the address specified _to.\\n     * @dev Confirms the buyer's payment, mint the Silicas and transfer the tokens.\\n     * @param _to The address to send the minted Silica to\\n     * @param amountSpecified The amount to deposit\\n     * @return mintAmount The amount of Silica tokens that were minted\\n     */\\n    function proxyDeposit(address _to, uint256 amountSpecified) external onlyOpen returns (uint256 mintAmount) {\\n        require(_to != address(0), \\\"Invalid Address\\\");\\n        require(amountSpecified > 0, \\\"Invalid Value\\\");\\n\\n        mintAmount = _deposit(msg.sender, _to, totalSupply(), amountSpecified);\\n        _mint(_to, mintAmount);\\n    }\\n\\n    /// @notice Internal function to process buyer's deposit\\n    /// @param from The address of the sender\\n    /// @param to The address of the recipient\\n    /// @param _totalSupply Current amount of Silica\\n    /// @param amountSpecified The amount to transfer\\n    /// @return mintAmount The amount of Silica tokens minted\\n    function _deposit(\\n        address from,\\n        address to,\\n        uint256 _totalSupply,\\n        uint256 amountSpecified\\n    ) internal returns (uint256 mintAmount) {\\n        mintAmount = _getMintAmount(resourceAmount, amountSpecified, reservedPrice);\\n\\n        require(_totalSupply + mintAmount <= resourceAmount, \\\"Insufficient Supply\\\");\\n\\n        emit Deposit(to, amountSpecified, mintAmount);\\n\\n        _transferPaymentTokenFrom(from, address(this), amountSpecified);\\n    }\\n\\n    /// @notice Function that returns the minted Silica amount from purchase amount\\n    /// @param consensusResource The amount ofunderlying resource of the contract\\n    /// @param purchaseAmount The amount purchased\\n    /// @param _reservedPrice The calculated rerserved price, see _calculateReservedPrice()\\n    function _getMintAmount(\\n        uint256 consensusResource,\\n        uint256 purchaseAmount,\\n        uint256 _reservedPrice\\n    ) internal pure returns (uint256) {\\n        return (consensusResource * purchaseAmount) / _reservedPrice;\\n    }\\n\\n    /// @notice Internal function to safely transfer payment token\\n    /// @param from The sender address\\n    /// @param to The recipient address\\n    /// @param amount The amount of payment token to transfer\\n    function _transferPaymentTokenFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        SafeERC20.safeTransferFrom(IERC20(paymentToken), from, to, amount);\\n    }\\n\\n    /// @notice Function that buyer calls to collect reward when silica is finished\\n    function buyerCollectPayout() external onlyFinished onlyBuyers returns (uint256 rewardPayout) {\\n        uint256 buyerBalance = balanceOf(msg.sender);\\n\\n        _burn(msg.sender, buyerBalance);\\n\\n        return _transferBuyerPayoutOnFinish(msg.sender, buyerBalance);\\n    }\\n\\n    /// @notice Internal function to process rewards to Buyer when contract is Finished\\n    /// @dev    Uses PayoutMath library\\n    /// @param  buyerAddress The address of the resource buyer\\n    /// @param  buyerBalance The amount of Silica the buyer holds\\n    /// @param  rewardPayout The amount of reward token send to the buyer\\n    function _transferBuyerPayoutOnFinish(address buyerAddress, uint256 buyerBalance) internal returns (uint256 rewardPayout) {\\n        rewardPayout = PayoutMath._getBuyerRewardPayout(rewardDelivered, buyerBalance, resourceAmount);\\n\\n        emit BuyerCollectPayout(rewardPayout, 0, buyerAddress, buyerBalance);\\n\\n        _transferRewardToken(buyerAddress, rewardPayout);\\n    }\\n\\n    /// @notice Internal function to safely transfer rewards to Buyer\\n    /// @param  to The address of the recipient of the reward tokens\\n    /// @param  amount The number of reward tokens to send \\n    function _transferRewardToken(address to, uint256 amount) internal {\\n        SafeERC20.safeTransfer(IERC20(rewardToken), to, amount);\\n    }\\n\\n    /// @notice Function that buyer calls to settle defaulted contract\\n    /// @dev    This function can only be called by the buyers when the contract is in the defaulted state\\n    /// @return rewardPayout The amount of reward tokens sent to buyer\\n    /// @return paymentPayout The amount of payment tokens sent to buyer\\n    function buyerCollectPayoutOnDefault()\\n        external\\n        onlyDefaulted\\n        onlyBuyers\\n        returns (uint256 rewardPayout, uint256 paymentPayout)\\n    {\\n        uint256 buyerBalance = balanceOf(msg.sender);\\n\\n        _burn(msg.sender, buyerBalance);\\n\\n        return _transferBuyerPayoutOnDefault(msg.sender, buyerBalance);\\n    }\\n\\n    /// @notice Internal funtion to process rewards and payment return to Buyer when contract is default\\n    /// @return rewardPayout The amount of reward tokens sent to buyer\\n    /// @return paymentPayout The amount of payment tokens sent to buyer\\n    function _transferBuyerPayoutOnDefault(address buyerAddress, uint256 buyerBalance)\\n        internal\\n        returns (uint256 rewardPayout, uint256 paymentPayout)\\n    {\\n        rewardPayout = PayoutMath._getRewardTokenPayoutToBuyerOnDefault(buyerBalance, rewardDelivered, resourceAmount); //rewardDelivered in the case of a default represents the rewardTokenBalance of the contract at default\\n\\n        uint256 firstDueDayMem = firstDueDay;\\n        uint256 numOfDepositsRequired = lastDueDay + 1 - firstDueDayMem;\\n\\n        paymentPayout = PayoutMath._getPaymentTokenPayoutToBuyerOnDefault(\\n            buyerBalance,\\n            totalUpfrontPayment,\\n            resourceAmount,\\n            PayoutMath._getHaircut(defaultDay - firstDueDayMem, numOfDepositsRequired)\\n        );\\n\\n        emit BuyerCollectPayout(rewardPayout, paymentPayout, buyerAddress, buyerBalance);\\n\\n        _transferRewardToken(buyerAddress, rewardPayout);\\n\\n        if (paymentPayout > 0) {\\n            _transferPaymentToken(buyerAddress, paymentPayout);\\n        }\\n    }\\n\\n    /// @notice Internal funtion to safely transfer payment return to Buyer\\n    /// @param to The address of the recipient of the payment token transfer\\n    /// @param amount The amount of payment tokens to transfer to the to address\\n    function _transferPaymentToken(address to, uint256 amount) internal {\\n        SafeERC20.safeTransfer(IERC20(paymentToken), to, amount);\\n    }\\n\\n    /// @notice Gets the owner of silica\\n    function getOwner() external view override returns (address) {\\n        return owner;\\n    }\\n\\n    /// @notice Gets reward token address\\n    function getRewardToken() external view override returns (address) {\\n        return address(rewardToken);\\n    }\\n\\n    /// @notice Gets the Payment token address\\n    function getPaymentToken() external view override returns (address) {\\n        return address(paymentToken);\\n    }\\n\\n    /// @notice Returns the last day of reward the seller is selling with this contract\\n    /// @return uint32: The last day of reward the seller is selling with this contract\\n    function getLastDueDay() external view override returns (uint32) {\\n        return lastDueDay;\\n    }\\n\\n    /// @notice Function seller calls to settle finished silica\\n    /// @dev    Only the owner(seller) can call this function when the contract is in the finished state\\n    /// @dev    This function can only be called once\\n    /// @return paymentTokenPayout The nunber of payment tokens transferred to the seller address\\n    /// @return rewardTokenExcess The number of reward tokens left in the contract transferred to the seller address\\n    function sellerCollectPayout()\\n        external\\n        onlyOwner\\n        onlyFinished\\n        onlyOnePayout\\n        returns (uint256 paymentTokenPayout, uint256 rewardTokenExcess)\\n    {\\n        paymentTokenPayout = IERC20(paymentToken).balanceOf(address(this));\\n        rewardTokenExcess = rewardExcess;\\n\\n        emit SellerCollectPayout(paymentTokenPayout, rewardTokenExcess);\\n        _transferPaymentToSeller(paymentTokenPayout);\\n        if (rewardTokenExcess > 0) {\\n            _transferRewardToSeller(rewardTokenExcess);\\n        }\\n    }\\n\\n    /// @notice Function seller calls to settle defaulted contract\\n    /// @dev    Only the owner(seller) can call this function when the contract is in the defaulted state\\n    /// @dev    This function can only be called once\\n    /// @return paymentTokenPayout The nunber of payment tokens transferred to the seller address\\n    /// @return rewardTokenExcess The number of reward tokens left in the contract transferred to the seller address\\n    function sellerCollectPayoutDefault()\\n        external\\n        onlyOwner\\n        onlyDefaulted\\n        onlyOnePayout\\n        returns (uint256 paymentTokenPayout, uint256 rewardTokenExcess)\\n    {\\n        uint256 firstDueDayMem = firstDueDay;\\n        uint256 numOfDepositsRequired = lastDueDay + 1 - firstDueDayMem;\\n        uint256 haircut = PayoutMath._getHaircut(defaultDay - firstDueDayMem, numOfDepositsRequired);\\n        paymentTokenPayout = PayoutMath._getRewardPayoutToSellerOnDefault(totalUpfrontPayment, haircut);\\n        rewardTokenExcess = rewardExcess;\\n\\n        emit SellerCollectPayout(paymentTokenPayout, rewardTokenExcess);\\n        _transferPaymentToSeller(paymentTokenPayout);\\n        if (rewardTokenExcess > 0) {\\n            _transferRewardToSeller(rewardTokenExcess);\\n        }\\n    }\\n\\n    /// @notice Function seller calls to settle expired contract\\n    /// @dev    only the owner(seller) can call this function when the contract is in the expired state\\n    /// @dev This function can only be called once\\n    /// @return rewardTokenPayout The nunber of payment tokens transferred to the seller address\\n    function sellerCollectPayoutExpired() external onlyExpired onlyOwner returns (uint256 rewardTokenPayout) {\\n        rewardTokenPayout = IERC20(rewardToken).balanceOf(address(this));\\n\\n        _transferRewardToSeller(rewardTokenPayout);\\n        emit SellerCollectPayout(0, rewardTokenPayout);\\n    }\\n\\n    /// @notice Internal funtion to safely transfer payment to Seller\\n    /// @param  amount The number of payment tokens to transfer to Seller\\n    function _transferPaymentToSeller(uint256 amount) internal {\\n        SafeERC20.safeTransfer(IERC20(paymentToken), owner, amount);\\n    }\\n\\n    /// @notice Internal funtion to safely transfer excess reward to Seller\\n    /// @param  amount The number of reward tokens to transfer to Seller\\n    function _transferRewardToSeller(uint256 amount) internal {\\n        SafeERC20.safeTransfer(IERC20(rewardToken), owner, amount);\\n    }\\n\\n    /// @notice Function to return the reward due on a given day\\n    /// @dev    This function is to be overridden by derived Silica contracts\\n    /// @param _day The day to query the reward due on \\n    function _getRewardDueOnDay(uint256 _day) internal view virtual returns (uint256);\\n\\n    /// @notice Function to return the last day silica is synced with Oracle\\n    /// @dev    This function is to be overridden by derived Silica contracts\\n    /// @return uint32: Last day for which there is Oracle data\\n    function _getLastIndexedDay() internal view virtual returns (uint32);\\n\\n    /// @notice Function to return total rewards due between _firstday (inclusive) and _lastday (inclusive)\\n    /// @dev    This function is to be overridden by derived Silica contracts\\n    /// @param _firstDay The start day to query from\\n    /// @param _lastDay The end day to query until \\n    function _getRewardDueInRange(uint256 _firstDay, uint256 _lastDay) internal view virtual returns (uint256[] memory);\\n\\n    /// @notice Function to return contract reserved price\\n    /// @return uint256: The reserved price \\n    function getReservedPrice() external view returns (uint256) {\\n        return reservedPrice;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/oracle/IOracleRegistry.sol\": {\r\n      \"content\": \"/**\\n     _    _ _    _           _             \\n    / \\\\  | | | _(_)_ __ ___ (_)_   _  __ _ \\n   / _ \\\\ | | |/ / | '_ ` _ \\\\| | | | |/ _` |\\n  / ___ \\\\| |   <| | | | | | | | |_| | (_| |\\n /_/   \\\\_\\\\_|_|\\\\_\\\\_|_| |_| |_|_|\\\\__, |\\\\__,_|\\n                               |___/        \\n**/\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/**\\n * @title  Oracle Registry Interface\\n * @author Alkimiya Team\\n * @notice Alkimiya Oracle addresses\\n * */\\ninterface IOracleRegistry {\\n\\n    event OracleRegistered(address token, uint256 oracleType, address oracleAddr);\\n\\n    function getOracleAddress(address _token, uint256 _oracleType) external view returns (address);\\n\\n    function setOracleAddress(\\n        address _token,\\n        uint256 _oracleType,\\n        address _oracleAddr\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/RewardMath.sol\": {\r\n      \"content\": \"/**\\n     _    _ _    _           _             \\n    / \\\\  | | | _(_)_ __ ___ (_)_   _  __ _ \\n   / _ \\\\ | | |/ / | '_ ` _ \\\\| | | | |/ _` |\\n  / ___ \\\\| |   <| | | | | | | | |_| | (_| |\\n /_/   \\\\_\\\\_|_|\\\\_\\\\_|_| |_| |_|_|\\\\__, |\\\\__,_|\\n                               |___/        \\n**/\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/**\\n * @title  Reward Math Library\\n * @author Alkimiya Team\\n * @notice Calculations for when buyer initiates default\\n */\\nlibrary RewardMath {\\n\\n    /// @notice Function to calculate the mining reward due by the seller\\n    /// @param _hashrate Underlying hashrate amount\\n    /// @param _networkReward Snapshot of the total network reward (block subsidy + fees)\\n    /// @param _networkHashrate The hashrate of the network (The basic unit of measurement of hashpower. Measures the number of SHA256d computations performed per second)\\n    function _getMiningRewardDue(\\n        uint256 _hashrate,\\n        uint256 _networkReward,\\n        uint256 _networkHashrate\\n    ) internal pure returns (uint256) {\\n        return (_hashrate * _networkReward) / _networkHashrate;\\n    }\\n\\n    /// @notice Function to calculate the reward due by the seller for Eth Staking Silica\\n    /// @param _stakedAmount The amount that has been staked\\n    /// @param _baseRewardPerIncrementPerDay The amount paid to the blockspace producer from the protocol, through inflation.\\n    /// @param @decimals The amount of decimals of the Silica \\n    /// @return uint256: The amount of reward tokens due\\n    function _getEthStakingRewardDue(\\n        uint256 _stakedAmount,\\n        uint256 _baseRewardPerIncrementPerDay,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return (_stakedAmount * _baseRewardPerIncrementPerDay) / (10**decimals);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/oracle/oracleEthStaking/IOracleEthStakingEvents.sol\": {\r\n      \"content\": \"/**\\n     _    _ _    _           _             \\n    / \\\\  | | | _(_)_ __ ___ (_)_   _  __ _ \\n   / _ \\\\ | | |/ / | '_ ` _ \\\\| | | | |/ _` |\\n  / ___ \\\\| |  <|  | | | | | | | |_| | (_| |\\n /_/   \\\\_\\\\_|_|\\\\_\\\\_|_| |_| |_|_|\\\\__, |\\\\__,_|\\n                               |___/        \\n**/\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/**\\n * @title  Alkimiya OraclePoS\\n * @author Alkimiya Team\\n * @notice This is the interface for Proof of Stake Oracle contract\\n * */\\ninterface IOracleEthStakingEvents {\\n\\n    /**\\n     * @notice Oracle Update Event\\n     */\\n    event OracleUpdate(\\n        address indexed caller,\\n        uint256 indexed referenceDay,\\n        uint256 timestamp,\\n        uint256 baseRewardPerIncrementPerDay,\\n        uint256 burnFee,\\n        uint256 priorityFee,\\n        uint256 burnFeeNormalized,\\n        uint256 priorityFeeNormalized\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/PayoutMath.sol\": {\r\n      \"content\": \"/**\\n     _    _ _    _           _             \\n    / \\\\  | | | _(_)_ __ ___ (_)_   _  __ _ \\n   / _ \\\\ | | |/ / | '_ ` _ \\\\| | | | |/ _` |\\n  / ___ \\\\| |   <| | | | | | | | |_| | (_| |\\n /_/   \\\\_\\\\_|_|\\\\_\\\\_|_| |_| |_|_|\\\\__, |\\\\__,_|\\n                               |___/        \\n * */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/**\\n * @title  Payout Math Library\\n * @author Alkimiya Team\\n * @notice Calculations for when buyer initiates default\\n */\\nlibrary PayoutMath {\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Constants\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant SCALING_FACTOR = 1e8;\\n    uint128 internal constant FIXED_POINT_SCALE_VALUE = 10**14;\\n    uint128 internal constant FIXED_POINT_BASE = 10**6;\\n    uint32 internal constant HAIRCUT_BASE_PCT = 80;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Functionality\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Returns haircut in fixed-point (base = 100000000 = 1).\\n     * @dev Granting 6 decimals precision. 1 - (0.8) * (day/contract)^3\\n     * @param _numDepositsCompleted The number of days on which deposits have been successfully completed\\n     * @param _contractNumberOfDeposits The number of days on which deposits are to be completed in total in the contract\\n     * @return uint256: Haircut\\n     */\\n    function _getHaircut(uint256 _numDepositsCompleted, uint256 _contractNumberOfDeposits) internal pure returns (uint256) {\\n        uint256 contractNumberOfDepositsCubed = uint256(_contractNumberOfDeposits)**3;\\n        uint256 multiplier = ((_numDepositsCompleted**3) * FIXED_POINT_SCALE_VALUE) / (contractNumberOfDepositsCubed);\\n        uint256 result = (HAIRCUT_BASE_PCT * multiplier) / (100 * FIXED_POINT_BASE);\\n        return (FIXED_POINT_BASE * 100) - result;\\n    }\\n\\n    /**\\n     * @notice Calculates reward given to buyer when contract defaults.\\n     * @dev result = tokenBalance * (totalReward / hashrate)\\n     * @param _buyerTokenBalance The Silica balance of the buyer\\n     * @param _totalRewardDelivered The balance of reward tokens delivered by the seller\\n     * @param _totalSilicaMinted The total amount of Silica that have been minted\\n     * @return uint256: The number of reward tokens to be transferred to the buyer on event of contract default\\n     */\\n    function _getRewardTokenPayoutToBuyerOnDefault(\\n        uint256 _buyerTokenBalance,\\n        uint256 _totalRewardDelivered,\\n        uint256 _totalSilicaMinted\\n    ) internal pure returns (uint256) {\\n        return (_buyerTokenBalance * _totalRewardDelivered) / _totalSilicaMinted;\\n    }\\n\\n    /**\\n     * @notice Calculates payment returned to buyer when contract defaults.\\n     * @dev result =  haircut * totalpayment tokenBalance / hashrateSold\\n     * @param _buyerTokenBalance The Silica balance of the buyer\\n     * @param _totalUpfrontPayment The amount of payment tokens made at contract start\\n     * @param _totalSilicaMinted The total amount of Silica that have been minted\\n     * @param _haircut  The haircut, see _getHaircut()\\n     * @return uint256: The amount of payment tokens to be sent to buyer in the event of a contract default\\n     */\\n    function _getPaymentTokenPayoutToBuyerOnDefault(\\n        uint256 _buyerTokenBalance,\\n        uint256 _totalUpfrontPayment,\\n        uint256 _totalSilicaMinted,\\n        uint256 _haircut\\n    ) internal pure returns (uint256) {\\n        return (_buyerTokenBalance * _totalUpfrontPayment * _haircut) / (_totalSilicaMinted * SCALING_FACTOR);\\n    }\\n\\n    /// @notice Calculates reward given to seller when contract defaults.\\n    /// @param _totalUpfrontPayment The amount of payment tokens made at contract start\\n    /// @param _haircutPct The scaled haircut percent\\n    /// @return uint256: Reward token amount to be sent to seller in event of contraact default\\n    function _getRewardPayoutToSellerOnDefault(uint256 _totalUpfrontPayment, uint256 _haircutPct) internal pure returns (uint256) {\\n        require(_haircutPct <= 100000000, \\\"Scaled haircut PCT cannot be greater than 100000000\\\");\\n        uint256 haircutPctRemainder = uint256(100000000) - _haircutPct;\\n        return (haircutPctRemainder * _totalUpfrontPayment) / 100000000;\\n    }\\n\\n    /// @notice Calculaed the Reserved Price for a contract\\n    /// @param  unitPrice The price per unit\\n    /// @param  resourceAmount The amount of underlying resource\\n    /// @param  numDeposits The number of deposits required in the contract\\n    /// @param  decimals The number of decimals of the Silica\\n    function _calculateReservedPrice(\\n        uint256 unitPrice,\\n        uint256 resourceAmount,\\n        uint256 numDeposits,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        return (unitPrice * resourceAmount * numDeposits) / (10**decimals);\\n    }\\n\\n    /// @notice Calculated the amount of reward tokens to be sent to the buyer\\n    /// @param  rewardDelivered The amount of reward tokens deposited\\n    /// @param  buyerBalance The Silica balance of the buyer address\\n    /// @param  resourceAmount The amount of underlying resource\\n    /// @return uint256: The amount of reward tokens to be paid to the buyer\\n    function _getBuyerRewardPayout(\\n        uint256 rewardDelivered,\\n        uint256 buyerBalance,\\n        uint256 resourceAmount\\n    ) internal pure returns (uint256) {\\n        return (rewardDelivered * buyerBalance) / resourceAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/silica/ISilicaV2_1.sol\": {\r\n      \"content\": \"/**\\n     _    _ _    _           _             \\n    / \\\\  | | | _(_)_ __ ___ (_)_   _  __ _ \\n   / _ \\\\ | | |/ / | '_ ` _ \\\\| | | | |/ _` |\\n  / ___ \\\\| |   <| | | | | | | | |_| | (_| |\\n /_/   \\\\_\\\\_|_|\\\\_\\\\_|_| |_| |_|_|\\\\__, |\\\\__,_|\\n                               |___/        \\n**/\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {SilicaV2_1Types} from \\\"../../libraries/SilicaV2_1Types.sol\\\";\\n\\n/**\\n * @title  SilicaV2_1 Interface\\n * @author Alkimiya Team\\n * @notice A Silica contract lists hashrate for sale\\n * @dev    The Silica interface is broken up into smaller interfaces\\n */\\ninterface ISilicaV2_1 {\\n    \\n    /*///////////////////////////////////////////////////////////////\\n                                 Events\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed buyer, uint256 purchaseAmount, uint256 mintedTokens);\\n    event BuyerCollectPayout(uint256 rewardTokenPayout, uint256 paymentTokenPayout, address buyerAddress, uint256 burntAmount);\\n    event SellerCollectPayout(uint256 paymentTokenPayout, uint256 rewardTokenExcess);\\n    event StatusChanged(SilicaV2_1Types.Status status);\\n\\n    struct InitializeData {\\n        address rewardTokenAddress;\\n        address paymentTokenAddress;\\n        address oracleRegistry;\\n        address sellerAddress;\\n        uint256 dayOfDeployment;\\n        uint256 lastDueDay;\\n        uint256 unitPrice;\\n        uint256 resourceAmount;\\n        uint256 collateralAmount;\\n    }\\n\\n    /// @notice Returns the amount of rewards the seller must have delivered before next update\\n    /// @return rewardDueNextOracleUpdate amount of rewards the seller must have delivered before next update\\n    function getRewardDueNextOracleUpdate() external view returns (uint256);\\n\\n    /// @notice Initializes the contract\\n    /// @param initializeData is the address of the token the seller is selling\\n    function initialize(InitializeData memory initializeData) external;\\n\\n    /// @notice Function called by buyer to deposit payment token in the contract in exchange for Silica tokens\\n    /// @param amountSpecified is the amount that the buyer wants to deposit in exchange for Silica tokens\\n    function deposit(uint256 amountSpecified) external returns (uint256);\\n\\n    /// @notice Called by the swapProxy to make a deposit in the name of a buyer\\n    /// @param _to the address who should receive the Silica Tokens\\n    /// @param amountSpecified is the amount the swapProxy is depositing for the buyer in exchange for Silica tokens\\n    function proxyDeposit(address _to, uint256 amountSpecified) external returns (uint256);\\n\\n    /// @notice Function the buyer calls to collect payout when the contract status is Finished\\n    function buyerCollectPayout() external returns (uint256 rewardTokenPayout);\\n\\n    /// @notice Function the buyer calls to collect payout when the contract status is Defaulted\\n    function buyerCollectPayoutOnDefault() external returns (uint256 rewardTokenPayout, uint256 paymentTokenPayout);\\n\\n    /// @notice Function the seller calls to collect payout when the contract status is Finised\\n    function sellerCollectPayout() external returns (uint256 paymentTokenPayout, uint256 rewardTokenExcess);\\n\\n    /// @notice Function the seller calls to collect payout when the contract status is Defaulted\\n    function sellerCollectPayoutDefault() external returns (uint256 paymentTokenPayout, uint256 rewardTokenExcess);\\n\\n    /// @notice Function the seller calls to collect payout when the contract status is Expired\\n    function sellerCollectPayoutExpired() external returns (uint256 rewardTokenPayout);\\n\\n    /// @notice Returns the owner of this Silica\\n    /// @return address: owner address\\n    function getOwner() external view returns (address);\\n\\n    /// @notice Returns the Payment Token accepted in this Silica\\n    /// @return Address: Token Address\\n    function getPaymentToken() external view returns (address);\\n\\n    /// @notice Returns the rewardToken address. The rewardToken is the token fo wich are made the rewards the seller is selling\\n    /// @return The rewardToken address. The rewardToken is the token fo wich are made the rewards the seller is selling\\n    function getRewardToken() external view returns (address);\\n\\n    /// @notice Returns the last day of reward the seller is selling with this contract\\n    /// @return The last day of reward the seller is selling with this contract\\n    function getLastDueDay() external view returns (uint32);\\n\\n    /// @notice Returns the commodity type the seller is selling with this contract\\n    /// @return The commodity type the seller is selling with this contract\\n    function getCommodityType() external pure returns (uint256);\\n\\n    /// @notice Get the current status of the contract\\n    /// @return status: The current status of the contract\\n    function getStatus() external view returns (SilicaV2_1Types.Status);\\n\\n    /// @notice Returns the day of default.\\n    /// @return day: The day the contract defaults\\n    function getDayOfDefault() external view returns (uint256);\\n\\n    /// @return lastDayFulfilled - number of days fulfilled\\n    /// @return rewardDelivered - reward fulfilled plus collateral\\n    function getDaysAndRewardFulfilled() external view returns (uint256 lastDayFulfilled, uint256 rewardDelivered);\\n\\n    /// @notice Returns true if contract is in Open status\\n    function isOpen() external view returns (bool);\\n\\n    /// @notice Returns true if contract is in Running status\\n    function isRunning() external view returns (bool);\\n\\n    /// @notice Returns true if contract is in Expired status\\n    function isExpired() external view returns (bool);\\n\\n    /// @notice Returns true if contract is in Defaulted status\\n    function isDefaulted() external view returns (bool);\\n\\n    /// @notice Returns true if contract is in Finished status\\n    function isFinished() external view returns (bool);\\n\\n    /// @notice Returns amount of rewards delivered so far by contract\\n    function getRewardDeliveredSoFar() external view returns (uint256);\\n\\n    /// @notice Returns the most recent day the contract owes in rewards\\n    /// @dev The returned value does not indicate rewards have been fulfilled up to that day\\n    /// This only returns the most recent day the contract should deliver rewards\\n    function getLastDayContractOwesReward(uint256 lastDueDay, uint256 lastIndexedDay) external view returns (uint256);\\n\\n    /// @notice Returns the reserved price of the contract\\n    function getReservedPrice() external view returns (uint256);\\n\\n    /// @notice Returns decimals of the contract\\n    function getDecimals() external pure returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SilicaV2_1Types.sol\": {\r\n      \"content\": \"/**\\n     _    _ _    _           _             \\n    / \\\\  | | | _(_)_ __ ___ (_)_   _  __ _ \\n   / _ \\\\ | | |/ / | '_ ` _ \\\\| | | | |/ _` |\\n  / ___ \\\\| |  <|  | | | | | | | |_| | (_| |\\n /_/   \\\\_\\\\_|_|\\\\_\\\\_|_| |_| |_|_|\\\\__, |\\\\__,_|\\n                               |___/        \\n**/\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nlibrary SilicaV2_1Types {\\n    enum Status {\\n        Open,\\n        Running,\\n        Expired,\\n        Defaulted,\\n        Finished\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storage/SilicaV2_1Storage.sol\": {\r\n      \"content\": \"/**\\n     _    _ _    _           _             \\n    / \\\\  | | | _(_)_ __ ___ (_)_   _  __ _ \\n   / _ \\\\ | | |/ / | '_ ` _ \\\\| | | | |/ _` |\\n  / ___ \\\\| |  <|  | | | | | | | |_| | (_| |\\n /_/   \\\\_\\\\_|_|\\\\_\\\\_|_| |_| |_|_|\\\\__, |\\\\__,_|\\n                               |___/        \\n**/\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {SilicaV2_1Types} from \\\"../libraries/SilicaV2_1Types.sol\\\";\\n\\n/**\\n * @title  Alkimiya Silica Storage \\n * @author Alkimiya Team\\n * @notice This is base storage to be inherited by derived Silica contracts\\n * */\\nabstract contract SilicaV2_1Storage {\\n    \\n    address public rewardToken; //Slot 0\\n    address public paymentToken; //Slot 1\\n    address public oracleRegistry; //Slot 2\\n\\n    address public owner; //Slot 3\\n    uint32 public finishDay; //Slot 3\\n    uint32 public firstDueDay; //Slot 3\\n    uint32 public lastDueDay; //Slot 3\\n\\n    address public silicaFactory; //Slot 4\\n    uint32 public defaultDay; //Slot 4\\n    bool public didSellerCollectPayout; //Slot 4\\n    SilicaV2_1Types.Status status;\\n\\n    uint256 public initialCollateral; //Slot 5\\n    uint256 public resourceAmount;\\n    uint256 public reservedPrice;\\n    uint256 public rewardDelivered;\\n    uint256 public totalUpfrontPayment; \\n    uint256 public rewardExcess;\\n    \\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@alkimiya/=node_modules/@alkimiya/\",\r\n      \"@clones/=lib/clones-with-immutable-args/src/\",\r\n      \"@ds/=lib/ds-test/src/\",\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@solmate/=lib/solmate/src/\",\r\n      \"@std/=lib/forge-std/src/\",\r\n      \"@uniswap/=node_modules/@uniswap/\",\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardTokenPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentTokenPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"}],\"name\":\"BuyerCollectPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedTokens\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentTokenPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardTokenExcess\",\"type\":\"uint256\"}],\"name\":\"SellerCollectPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum SilicaV2_1Types.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMMODITY_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyerCollectPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyerCollectPayoutOnDefault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultDay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSpecified\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"didSellerCollectPayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishDay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstDueDay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommodityType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDayOfDefault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaysAndRewardFulfilled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastDayFulfilled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDelivered\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastDueDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastIndexedDay\",\"type\":\"uint256\"}],\"name\":\"getLastDayContractOwesReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastDueDay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReservedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardDeliveredSoFar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardDueNextOracleUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardDueNextOracleUpdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum SilicaV2_1Types.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dayOfDeployment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDueDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISilicaV2_1.InitializeData\",\"name\":\"initializeData\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDefaulted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDueDay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSpecified\",\"type\":\"uint256\"}],\"name\":\"proxyDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resourceAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDelivered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardExcess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellerCollectPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentTokenPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenExcess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellerCollectPayoutDefault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentTokenPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenExcess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellerCollectPayoutExpired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardTokenPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silicaFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUpfrontPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SilicaEthStaking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}