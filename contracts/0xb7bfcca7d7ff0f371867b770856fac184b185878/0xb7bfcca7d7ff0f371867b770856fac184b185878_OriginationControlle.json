{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OriginationController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IOriginationController.sol\\\";\\nimport \\\"./interfaces/ILoanCore.sol\\\";\\nimport \\\"./interfaces/IERC721Permit.sol\\\";\\nimport \\\"./interfaces/ISignatureVerifier.sol\\\";\\nimport \\\"./interfaces/IFeeController.sol\\\";\\n\\nimport \\\"./libraries/InterestCalculator.sol\\\";\\nimport \\\"./libraries/FeeLookups.sol\\\";\\nimport \\\"./verifiers/ArcadeItemsVerifier.sol\\\";\\nimport {\\n    OC_ZeroAddress,\\n    OC_InvalidState,\\n    OC_InvalidVerifier,\\n    OC_BatchLengthMismatch,\\n    OC_PredicateFailed,\\n    OC_PredicatesArrayEmpty,\\n    OC_SelfApprove,\\n    OC_ApprovedOwnLoan,\\n    OC_InvalidSignature,\\n    OC_CallerNotParticipant,\\n    OC_SideMismatch,\\n    OC_PrincipalTooLow,\\n    OC_LoanDuration,\\n    OC_InterestRate,\\n    OC_SignatureIsExpired,\\n    OC_RolloverCurrencyMismatch,\\n    OC_RolloverCollateralMismatch,\\n    OC_InvalidCurrency,\\n    OC_InvalidCollateral,\\n    OC_ZeroArrayElements,\\n    OC_ArrayTooManyElements\\n} from \\\"./errors/Lending.sol\\\";\\n\\n/**\\n * @title OriginationController\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * The Origination Controller is the entry point for all new loans\\n * in the Arcade.xyz lending protocol. This contract has the exclusive\\n * responsibility of creating new loans in LoanCore. All permissioning,\\n * signature verification, and collateral verification takes place in\\n * this contract. To originate a loan, the controller also takes custody\\n * of both the collateral and loan principal.\\n */\\ncontract OriginationController is\\n    IOriginationController,\\n    InterestCalculator,\\n    FeeLookups,\\n    EIP712,\\n    ReentrancyGuard,\\n    AccessControlEnumerable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    // ============================================ STATE ==============================================\\n\\n\\n    // =================== Constants =====================\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant WHITELIST_MANAGER_ROLE = keccak256(\\\"WHITELIST_MANAGER\\\");\\n\\n    /// @notice EIP712 type hash for bundle-based signatures.\\n    bytes32 private constant _TOKEN_ID_TYPEHASH =\\n        keccak256(\\n            // solhint-disable-next-line max-line-length\\n            \\\"LoanTerms(uint256 proratedInterestRate,uint256 principal,address collateralAddress,uint96 durationSecs,uint256 collateralId,address payableCurrency,uint96 deadline,bytes32 affiliateCode,uint160 nonce,uint8 side)\\\"\\n        );\\n\\n    /// @notice EIP712 type hash for item-based signatures.\\n    bytes32 private constant _ITEMS_TYPEHASH =\\n        keccak256(\\n            // solhint-disable max-line-length\\n            \\\"LoanTermsWithItems(uint256 proratedInterestRate,uint256 principal,address collateralAddress,uint96 durationSecs,Predicate[] items,address payableCurrency,uint96 deadline,bytes32 affiliateCode,uint160 nonce,uint8 side)Predicate(bytes data,address verifier)\\\"\\n        );\\n\\n    /// @notice EIP712 type hash for Predicate.\\n    bytes32 public constant _PREDICATE_TYPEHASH =\\n        keccak256(\\n            \\\"Predicate(bytes data,address verifier)\\\"\\n        );\\n\\n    // =============== Contract References ===============\\n\\n    ILoanCore private immutable loanCore;\\n    IFeeController private immutable feeController;\\n\\n    // ================= Approval State ==================\\n\\n    /// @notice Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _signerApprovals;\\n    /// @notice Mapping from address to whether that verifier contract has been whitelisted\\n    mapping(address => bool) public allowedVerifiers;\\n    /// @notice Mapping from ERC20 token address to boolean indicating allowed payable currencies and set minimums\\n    mapping(address => Currency) public allowedCurrencies;\\n    /// @notice Mapping from ERC721 or ERC1155 token address to boolean indicating allowed collateral types\\n    mapping(address => bool) public allowedCollateral;\\n\\n    // ========================================== CONSTRUCTOR ===========================================\\n\\n    /**\\n     * @notice Creates a new origination controller contract, also initializing\\n     *         the parent signature verifier.\\n     *\\n     * @dev For this controller to work, it needs to be granted the ORIGINATOR_ROLE\\n     *      in loan core after deployment.\\n     *\\n     * @param _loanCore                     The address of the loan core logic of the protocol.\\n     * @param _feeController                The address of the fee logic of the protocol.\\n     */\\n    constructor(address _loanCore, address _feeController) EIP712(\\\"OriginationController\\\", \\\"3\\\") {\\n        if (_loanCore == address(0)) revert OC_ZeroAddress(\\\"loanCore\\\");\\n        if (_feeController == address(0)) revert OC_ZeroAddress(\\\"feeController\\\");\\n\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n\\n        _setupRole(WHITELIST_MANAGER_ROLE, msg.sender);\\n        _setRoleAdmin(WHITELIST_MANAGER_ROLE, ADMIN_ROLE);\\n\\n        loanCore = ILoanCore(_loanCore);\\n        feeController = IFeeController(_feeController);\\n    }\\n\\n    // ==================================== ORIGINATION OPERATIONS ======================================\\n\\n    /**\\n     * @notice Initializes a loan with Loan Core.\\n     * @notice Works with either wrapped bundles with an ID, or specific ERC721 unwrapped NFTs.\\n     *         In that case, collateralAddress should be the token contract.\\n     *\\n     * @dev The caller must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must come from the opposite side of the loan as the caller.\\n     *\\n     * @param loanTerms                     The terms agreed by the lender and borrower.\\n     * @param borrower                      Address of the borrower.\\n     * @param lender                        Address of the lender.\\n     * @param sig                           The loan terms signature, with v, r, s fields, and a nonce.\\n     * @param nonce                         The signature nonce.\\n     *\\n     * @return loanId                       The unique ID of the new loan.\\n     */\\n    function initializeLoan(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce\\n    ) public override returns (uint256 loanId) {\\n        _validateLoanTerms(loanTerms);\\n\\n        // Determine if signature needs to be on the borrow or lend side\\n        Side neededSide = isSelfOrApproved(borrower, msg.sender) ? Side.LEND : Side.BORROW;\\n\\n        (bytes32 sighash, address externalSigner) = recoverTokenSignature(\\n            loanTerms,\\n            sig,\\n            nonce,\\n            neededSide\\n        );\\n\\n        _validateCounterparties(borrower, lender, msg.sender, externalSigner, sig, sighash, neededSide);\\n\\n        loanCore.consumeNonce(externalSigner, nonce);\\n        loanId = _initialize(loanTerms, borrower, lender);\\n    }\\n\\n    /**\\n     * @notice Initializes a loan with Loan Core.\\n     * @notice Compared to initializeLoan, this uses custom predicates to verify collateral.\\n     *\\n     * @dev The caller must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must come from the opposite side of the loan as the caller.\\n     *\\n     * @param loanTerms                     The terms agreed by the lender and borrower.\\n     * @param borrower                      Address of the borrower.\\n     * @param lender                        Address of the lender.\\n     * @param sig                           The loan terms signature, with v, r, s fields, and a nonce.\\n     * @param nonce                         The signature nonce.\\n     * @param itemPredicates                The predicate rules for the items in the bundle.\\n     *\\n     * @return loanId                       The unique ID of the new loan.\\n     */\\n    function initializeLoanWithItems(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) public override returns (uint256 loanId) {\\n        _validateLoanTerms(loanTerms);\\n        if (itemPredicates.length == 0) revert OC_PredicatesArrayEmpty();\\n\\n        bytes32 encodedPredicates = _encodePredicates(itemPredicates);\\n\\n        // Determine if signature needs to be on the borrow or lend side\\n        Side neededSide = isSelfOrApproved(borrower, msg.sender) ? Side.LEND : Side.BORROW;\\n\\n        (bytes32 sighash, address externalSigner) = recoverItemsSignature(\\n            loanTerms,\\n            sig,\\n            nonce,\\n            neededSide,\\n            encodedPredicates\\n        );\\n\\n        _validateCounterparties(borrower, lender, msg.sender, externalSigner, sig, sighash, neededSide);\\n\\n        loanCore.consumeNonce(externalSigner, nonce);\\n        loanId = _initialize(loanTerms, borrower, lender);\\n\\n        // Run predicates check at the end of the function, after vault is in escrow. This makes sure\\n        // that re-entrancy was not employed to withdraw collateral after the predicates check occurs.\\n        _runPredicatesCheck(borrower, lender, loanTerms, itemPredicates);\\n    }\\n\\n    /**\\n     * @notice Initializes a loan with Loan Core, with a permit signature instead of pre-approved collateral.\\n     *\\n     * @dev The caller must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must come from the opposite side of the loan as the caller.\\n     *\\n     * @param loanTerms                     The terms agreed by the lender and borrower.\\n     * @param borrower                      Address of the borrower.\\n     * @param lender                        Address of the lender.\\n     * @param sig                           The loan terms signature, with v, r, s fields.\\n     * @param nonce                         The signature nonce for the loan terms signature.\\n     * @param collateralSig                 The collateral permit signature, with v, r, s fields.\\n     * @param permitDeadline                The last timestamp for which the signature is valid.\\n     *\\n     * @return loanId                       The unique ID of the new loan.\\n     */\\n    function initializeLoanWithCollateralPermit(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Signature calldata collateralSig,\\n        uint256 permitDeadline\\n    ) external override returns (uint256 loanId) {\\n        IERC721Permit(loanTerms.collateralAddress).permit(\\n            borrower,\\n            address(loanCore),\\n            loanTerms.collateralId,\\n            permitDeadline,\\n            collateralSig.v,\\n            collateralSig.r,\\n            collateralSig.s\\n        );\\n\\n        loanId = initializeLoan(loanTerms, borrower, lender, sig, nonce);\\n}\\n\\n    /**\\n     * @notice Initializes a loan with Loan Core, with a permit signature instead of pre-approved collateral.\\n     * @notice Compared to initializeLoanWithCollateralPermit, this verifies the specific items in a bundle.\\n     *\\n     * @dev The caller must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must be a borrower or lender, or approved by a borrower or lender.\\n     * @dev The external signer must come from the opposite side of the loan as the caller.\\n     *\\n     * @param loanTerms                     The terms agreed by the lender and borrower.\\n     * @param borrower                      Address of the borrower.\\n     * @param lender                        Address of the lender.\\n     * @param sig                           The loan terms signature, with v, r, s fields.\\n     * @param nonce                         The signature nonce for the loan terms signature.\\n     * @param collateralSig                 The collateral permit signature, with v, r, s fields.\\n     * @param permitDeadline                The last timestamp for which the signature is valid.\\n     * @param itemPredicates                The predicate rules for the items in the bundle.\\n     *\\n     * @return loanId                       The unique ID of the new loan.\\n     */\\n    function initializeLoanWithCollateralPermitAndItems(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Signature calldata collateralSig,\\n        uint256 permitDeadline,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) external override returns (uint256 loanId) {\\n        IERC721Permit(loanTerms.collateralAddress).permit(\\n            borrower,\\n            address(loanCore),\\n            loanTerms.collateralId,\\n            permitDeadline,\\n            collateralSig.v,\\n            collateralSig.r,\\n            collateralSig.s\\n        );\\n\\n        loanId = initializeLoanWithItems(loanTerms, borrower, lender, sig, nonce, itemPredicates);\\n    }\\n\\n    /**\\n     * @notice Rolls over an existing loan via Loan Core, using a signature for\\n     *         a new loan to be created. The lender can be the same lender as the\\n     *         loan to be rolled over, or a new lender. The net funding between the\\n     *         old and new loan is calculated, with funds withdrawn from relevant\\n     *         parties.\\n     *\\n     * @param oldLoanId                     The ID of the old loan.\\n     * @param loanTerms                     The terms agreed by the lender and borrower.\\n     * @param lender                        Address of the lender.\\n     * @param sig                           The loan terms signature, with v, r, s fields.\\n     * @param nonce                         The signature nonce for the loan terms signature.\\n     *\\n     * @return newLoanId                    The unique ID of the new loan.\\n     */\\n    function rolloverLoan(\\n        uint256 oldLoanId,\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce\\n    ) public override returns (uint256 newLoanId) {\\n        _validateLoanTerms(loanTerms);\\n\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(oldLoanId);\\n        if (data.state != LoanLibrary.LoanState.Active) revert OC_InvalidState(data.state);\\n        _validateRollover(data.terms, loanTerms);\\n\\n        address borrower = IERC721(loanCore.borrowerNote()).ownerOf(oldLoanId);\\n\\n        // Determine if signature needs to be on the borrow or lend side\\n        Side neededSide = isSelfOrApproved(borrower, msg.sender) ? Side.LEND : Side.BORROW;\\n\\n        (bytes32 sighash, address externalSigner) = recoverTokenSignature(\\n            loanTerms,\\n            sig,\\n            nonce,\\n            neededSide\\n        );\\n\\n        _validateCounterparties(borrower, lender, msg.sender, externalSigner, sig, sighash, neededSide);\\n\\n        loanCore.consumeNonce(externalSigner, nonce);\\n\\n        newLoanId = _rollover(oldLoanId, loanTerms, borrower, lender);\\n    }\\n\\n    /**\\n     * @notice Rolls over an existing loan via Loan Core, using a signature\\n     *         for a new loan to create (of items type). The lender can be the same lender\\n     *         in the loan to be rolled over, or a new lender. The net funding between\\n     *         the old and new loan is calculated, with funds withdrawn from relevant\\n     *         parties.\\n     *\\n     * @param oldLoanId                     The ID of the old loan.\\n     * @param loanTerms                     The terms agreed by the lender and borrower.\\n     * @param lender                        Address of the lender.\\n     * @param sig                           The loan terms signature, with v, r, s fields.\\n     * @param nonce                         The signature nonce for the loan terms signature.\\n     * @param itemPredicates                The predicate rules for the items in the bundle.\\n     *\\n     * @return newLoanId                    The unique ID of the new loan.\\n     */\\n    function rolloverLoanWithItems(\\n        uint256 oldLoanId,\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) public override returns (uint256 newLoanId) {\\n        _validateLoanTerms(loanTerms);\\n        if (itemPredicates.length == 0) revert OC_PredicatesArrayEmpty();\\n\\n        LoanLibrary.LoanData memory data = loanCore.getLoan(oldLoanId);\\n        if (data.state != LoanLibrary.LoanState.Active) revert OC_InvalidState(data.state);\\n        _validateRollover(data.terms, loanTerms);\\n\\n        address borrower = IERC721(loanCore.borrowerNote()).ownerOf(oldLoanId);\\n\\n        bytes32 encodedPredicates = _encodePredicates(itemPredicates);\\n\\n        // Determine if signature needs to be on the borrow or lend side\\n        Side neededSide = isSelfOrApproved(borrower, msg.sender) ? Side.LEND : Side.BORROW;\\n\\n        (bytes32 sighash, address externalSigner) = recoverItemsSignature(\\n            loanTerms,\\n            sig,\\n            nonce,\\n            neededSide,\\n            encodedPredicates\\n        );\\n\\n        _validateCounterparties(borrower, lender, msg.sender, externalSigner, sig, sighash, neededSide);\\n\\n        loanCore.consumeNonce(externalSigner, nonce);\\n\\n        newLoanId = _rollover(oldLoanId, loanTerms, borrower, lender);\\n\\n        // Run predicates check at the end of the function, after vault is in escrow. This makes sure\\n        // that re-entrancy was not employed to withdraw collateral after the predicates check occurs.\\n        _runPredicatesCheck(borrower, lender, loanTerms, itemPredicates);\\n    }\\n\\n    // ==================================== PERMISSION MANAGEMENT =======================================\\n\\n    /**\\n     * @notice Approve a third party to sign or initialize loans on a counterparty's behalf.\\n     * @notice Useful to multisig counterparties (who cannot sign themselves) or third-party integrations.\\n     *\\n     * @param signer                        The party to set approval for.\\n     * @param approved                      Whether the party should be approved.\\n     */\\n    function approve(address signer, bool approved) public override {\\n        if (signer == msg.sender) revert OC_SelfApprove(msg.sender);\\n\\n        _signerApprovals[msg.sender][signer] = approved;\\n\\n        emit Approval(msg.sender, signer, approved);\\n    }\\n\\n    /**\\n     * @notice Reports whether a party is approved to act on a counterparty's behalf.\\n     *\\n     * @param owner                         The grantor of permission.\\n     * @param signer                        The grantee of permission.\\n     *\\n     * @return isApproved                   Whether the grantee has been approved by the grantor.\\n     */\\n    function isApproved(address owner, address signer) public view virtual override returns (bool) {\\n        return _signerApprovals[owner][signer];\\n    }\\n\\n    /**\\n     * @notice Reports whether the signer matches the target or is approved by the target.\\n     *\\n     * @param target                        The grantor of permission - should be a smart contract.\\n     * @param sig                           A struct containing the signature data (for checking EIP-1271).\\n     * @param sighash                       The hash of the signature payload (used for EIP-1271 check).\\n     *\\n     * @return bool                         Whether the signer is either the grantor themselves, or approved.\\n     */\\n    function isApprovedForContract(\\n        address target,\\n        Signature memory sig,\\n        bytes32 sighash\\n    ) public view override returns (bool) {\\n        bytes memory signature = abi.encodePacked(sig.r, sig.s, sig.v);\\n\\n        // Append extra data if it exists\\n        bytes memory zeroBytes = new bytes(0);\\n        if (keccak256(sig.extraData) != keccak256(zeroBytes)) {\\n            signature = bytes.concat(signature, sig.extraData);\\n        }\\n\\n        // Convert sig struct to bytes\\n        (bool success, bytes memory result) = target.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, sighash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n\\n    /**\\n     * @notice Reports whether the signer matches the target or is approved by the target.\\n     *\\n     * @param target                        The grantor of permission.\\n     * @param signer                        The grantee of permission.\\n     *\\n     * @return isSelfOrApproved             Whether the signer is either the grantor themselves, or approved.\\n     */\\n    function isSelfOrApproved(address target, address signer) public view override returns (bool) {\\n        return target == signer || isApproved(target, signer);\\n    }\\n\\n    // ==================================== SIGNATURE VERIFICATION ======================================\\n\\n    /**\\n     * @notice Determine the external signer for a signature specifying only a collateral address and ID.\\n     *\\n     * @param loanTerms                     The terms of the loan.\\n     * @param sig                           The signature, with v, r, s fields.\\n     * @param nonce                         The signature nonce.\\n     * @param side                          The side of the loan being signed.\\n     *\\n     * @return sighash                      The hash that was signed.\\n     * @return signer                       The address of the recovered signer.\\n     */\\n    function recoverTokenSignature(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Side side\\n    ) public view override returns (bytes32 sighash, address signer) {\\n        bytes32 loanHash = keccak256(\\n            abi.encode(\\n                _TOKEN_ID_TYPEHASH,\\n                loanTerms.proratedInterestRate,\\n                loanTerms.principal,\\n                loanTerms.collateralAddress,\\n                loanTerms.durationSecs,\\n                loanTerms.collateralId,\\n                loanTerms.payableCurrency,\\n                loanTerms.deadline,\\n                loanTerms.affiliateCode,\\n                nonce,\\n                uint8(side)\\n            )\\n        );\\n\\n        sighash = _hashTypedDataV4(loanHash);\\n        signer = ECDSA.recover(sighash, sig.v, sig.r, sig.s);\\n    }\\n\\n    /**\\n     * @notice Determine the external signer for a signature specifying specific items.\\n     * @dev    Bundle ID should _not_ be included in this signature, because the loan\\n     *         can be initiated with any arbitrary bundle - as long as the bundle contains the items.\\n     *\\n     * @param loanTerms                     The terms of the loan.\\n     * @param sig                           The loan terms signature, with v, r, s fields.\\n     * @param nonce                         The signature nonce.\\n     * @param side                          The side of the loan being signed.\\n     * @param itemsHash                     The required items in the specified bundle.\\n     *\\n     * @return sighash                      The hash that was signed.\\n     * @return signer                       The address of the recovered signer.\\n     */\\n    function recoverItemsSignature(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Side side,\\n        bytes32 itemsHash\\n    ) public view override returns (bytes32 sighash, address signer) {\\n        bytes32 loanHash = keccak256(\\n            abi.encode(\\n                _ITEMS_TYPEHASH,\\n                loanTerms.proratedInterestRate,\\n                loanTerms.principal,\\n                loanTerms.collateralAddress,\\n                loanTerms.durationSecs,\\n                itemsHash,\\n                loanTerms.payableCurrency,\\n                loanTerms.deadline,\\n                loanTerms.affiliateCode,\\n                nonce,\\n                uint8(side)\\n            )\\n        );\\n\\n        sighash = _hashTypedDataV4(loanHash);\\n        signer = ECDSA.recover(sighash, sig.v, sig.r, sig.s);\\n    }\\n\\n    // ===================================== WHITELIST MANAGER UTILS =====================================\\n\\n    /**\\n     * @notice Adds an array of payable currencies to the allowed currencies mapping.\\n     *\\n     * @dev Only callable by the whitelist manager role. Entire transaction reverts if one of the\\n     *      addresses is the zero address. The array of addresses passed to this\\n     *      function is limited to 50 elements.\\n     *\\n     * @param tokens                     Array of token addresses to add.\\n     * @param currencyData               Whether the token is allowed or not, and the minimum loan size.\\n     */\\n    function setAllowedPayableCurrencies(\\n        address[] calldata tokens,\\n        Currency[] calldata currencyData\\n    ) external override onlyRole(WHITELIST_MANAGER_ROLE) {\\n        if (tokens.length == 0) revert OC_ZeroArrayElements();\\n        if (tokens.length > 50) revert OC_ArrayTooManyElements();\\n        if (tokens.length != currencyData.length) revert OC_BatchLengthMismatch();\\n\\n        for (uint256 i = 0; i < tokens.length;) {\\n            if (tokens[i] == address(0)) revert OC_ZeroAddress(\\\"token\\\");\\n\\n            allowedCurrencies[tokens[i]] = currencyData[i];\\n            emit SetAllowedCurrency(tokens[i], currencyData[i].isAllowed, currencyData[i].minPrincipal);\\n\\n            // Can never overflow because length is bounded by 50\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Return whether the address can be used as a loan funding currency.\\n     *\\n     * @param token                 The token to query.\\n     *\\n     * @return isAllowed            Whether the contract is verified.\\n     */\\n    function isAllowedCurrency(address token) public view override returns (bool) {\\n        return allowedCurrencies[token].isAllowed;\\n    }\\n\\n    /**\\n     * @notice Adds an array collateral tokens to the allowed collateral mapping.\\n     *\\n     * @dev Only callable by the whitelist manager role. Entire transaction reverts if one of the\\n     *      addresses is the zero address. The array of addresses passed to this\\n     *      function is limited to 50 elements.\\n     *\\n     * @param tokens                     Array of token addresses to add.\\n     * @param isAllowed                  Whether the token is allowed or not.\\n     */\\n    function setAllowedCollateralAddresses(\\n        address[] calldata tokens,\\n        bool[] calldata isAllowed\\n    ) external override onlyRole(WHITELIST_MANAGER_ROLE) {\\n        if (tokens.length == 0) revert OC_ZeroArrayElements();\\n        if (tokens.length > 50) revert OC_ArrayTooManyElements();\\n        if (tokens.length != isAllowed.length) revert OC_BatchLengthMismatch();\\n\\n        for (uint256 i = 0; i < tokens.length;) {\\n            if (tokens[i] == address(0)) revert OC_ZeroAddress(\\\"token\\\");\\n\\n            allowedCollateral[tokens[i]] = isAllowed[i];\\n            emit SetAllowedCollateral(tokens[i], isAllowed[i]);\\n\\n            // Can never overflow because length is bounded by 50\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Return whether the address can be used as collateral.\\n     *\\n     * @param token                The token to query.\\n     *\\n     * @return isAllowed           Whether the token can be used as collateral.\\n     */\\n    function isAllowedCollateral(address token) public view override returns (bool) {\\n        return allowedCollateral[token];\\n    }\\n\\n    /**\\n     * @notice Batch update for verification whitelist, in case of multiple verifiers\\n     *         active in production.\\n     *\\n     * @param verifiers             The list of specified verifier contracts, should implement ISignatureVerifier.\\n     * @param isAllowed             Whether the specified contracts should be allowed, respectively.\\n     */\\n    function setAllowedVerifiers(\\n        address[] calldata verifiers,\\n        bool[] calldata isAllowed\\n    ) external override onlyRole(WHITELIST_MANAGER_ROLE) {\\n        if (verifiers.length == 0) revert OC_ZeroArrayElements();\\n        if (verifiers.length > 50) revert OC_ArrayTooManyElements();\\n        if (verifiers.length != isAllowed.length) revert OC_BatchLengthMismatch();\\n\\n        for (uint256 i = 0; i < verifiers.length;) {\\n            if (verifiers[i] == address(0)) revert OC_ZeroAddress(\\\"verifier\\\");\\n\\n            allowedVerifiers[verifiers[i]] = isAllowed[i];\\n            emit SetAllowedVerifier(verifiers[i], isAllowed[i]);\\n\\n            // Can never overflow because length is bounded by 50\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Return whether the address can be used as a verifier.\\n     *\\n     * @param verifier             The verifier contract to query.\\n     *\\n     * @return isVerified          Whether the contract is verified.\\n     */\\n    function isAllowedVerifier(address verifier) public view override returns (bool) {\\n        return allowedVerifiers[verifier];\\n    }\\n\\n    // =========================================== HELPERS ==============================================\\n\\n    /**\\n     * @dev Validates argument bounds for the loan terms.\\n     *\\n     * @param terms                  The terms of the loan.\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function _validateLoanTerms(LoanLibrary.LoanTerms memory terms) internal virtual view {\\n        // validate payable currency\\n        if (!allowedCurrencies[terms.payableCurrency].isAllowed) revert OC_InvalidCurrency(terms.payableCurrency);\\n\\n        // principal must be greater than or equal to the configured minimum\\n        if (terms.principal < allowedCurrencies[terms.payableCurrency].minPrincipal) revert OC_PrincipalTooLow(terms.principal);\\n\\n        // loan duration must be greater or equal to 1 hr and less or equal to 3 years\\n        if (terms.durationSecs < 3600 || terms.durationSecs > 94_608_000) revert OC_LoanDuration(terms.durationSecs);\\n\\n        // interest rate must be greater than or equal to 0.01%\\n        // and less or equal to 10,000% (1e6 basis points)\\n        if (terms.proratedInterestRate < 1e18 || terms.proratedInterestRate > 1e24) revert OC_InterestRate(terms.proratedInterestRate);\\n\\n        // signature must not have already expired\\n        if (terms.deadline < block.timestamp) revert OC_SignatureIsExpired(terms.deadline);\\n\\n        // validate collateral\\n        if (!allowedCollateral[terms.collateralAddress]) revert OC_InvalidCollateral(terms.collateralAddress);\\n    }\\n\\n    /**\\n     * @dev Validate the rules for rolling over a loan - must be using the same\\n     *      currency and collateral.\\n     *\\n     * @param oldTerms              The terms of the old loan, fetched from LoanCore.\\n     * @param newTerms              The terms of the new loan, provided by the caller.\\n     */\\n    function _validateRollover(LoanLibrary.LoanTerms memory oldTerms, LoanLibrary.LoanTerms memory newTerms)\\n        internal\\n        pure\\n    {\\n        if (newTerms.payableCurrency != oldTerms.payableCurrency)\\n            revert OC_RolloverCurrencyMismatch(oldTerms.payableCurrency, newTerms.payableCurrency);\\n\\n        if (newTerms.collateralAddress != oldTerms.collateralAddress || newTerms.collateralId != oldTerms.collateralId)\\n            revert OC_RolloverCollateralMismatch(\\n                oldTerms.collateralAddress,\\n                oldTerms.collateralId,\\n                newTerms.collateralAddress,\\n                newTerms.collateralId\\n            );\\n    }\\n\\n    /**\\n     * @dev Ensure that one counterparty has signed the loan terms, and the other\\n     *      has initiated the transaction.\\n     *\\n     * @param borrower                  The specified borrower for the loan.\\n     * @param lender                    The specified lender for the loan.\\n     * @param caller                    The address initiating the transaction.\\n     * @param signer                    The address recovered from the loan terms signature.\\n     * @param sig                       A struct containing the signature data (for checking EIP-1271).\\n     * @param sighash                   The hash of the signature payload (used for EIP-1271 check).\\n     * @param neededSide                The side of the loan the signature will take (lend or borrow).\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function _validateCounterparties(\\n        address borrower,\\n        address lender,\\n        address caller,\\n        address signer,\\n        Signature calldata sig,\\n        bytes32 sighash,\\n        Side neededSide\\n    ) internal view {\\n        address signingCounterparty = neededSide == Side.LEND ? lender : borrower;\\n        address callingCounterparty = neededSide == Side.LEND ? borrower : lender;\\n\\n        // Make sure the signer recovered from the loan terms is not the caller,\\n        // and even if the caller is approved, the caller is not the signing counterparty\\n        if (caller == signer || caller == signingCounterparty) revert OC_ApprovedOwnLoan(caller);\\n\\n        // Check that caller can actually call this function - neededSide assignment\\n        // defaults to BORROW if the signature is not approved by the borrower, but it could\\n        // also not be a participant\\n        if (!isSelfOrApproved(callingCounterparty, caller) && !isApprovedForContract(callingCounterparty, sig, sighash)) {\\n            revert OC_CallerNotParticipant(msg.sender);\\n        }\\n\\n        // Check signature validity\\n        if (!isSelfOrApproved(signingCounterparty, signer) && !isApprovedForContract(signingCounterparty, sig, sighash)) {\\n            revert OC_InvalidSignature(signingCounterparty, signer);\\n        }\\n\\n        // Revert if the signer is the calling counterparty\\n        if (signer == callingCounterparty) revert OC_SideMismatch(signer);\\n    }\\n\\n    /**\\n     * @notice Hashes each item in Predicate[] separately and concatenates these hashes for\\n     *         inclusion in _ITEMS_TYPEHASH.\\n     *\\n     * @dev Solidity does not support array or nested struct hashing in the keccak256 function\\n     *      hence the multi-step hash creation process.\\n     *\\n     * @param predicates                    The predicate items array.\\n     *\\n     * @return itemsHash                    The concatenated hash of all items in the Predicate array.\\n     */\\n    function _encodePredicates(LoanLibrary.Predicate[] memory predicates) public pure returns (bytes32 itemsHash) {\\n       bytes32[] memory itemHashes = new bytes32[](predicates.length);\\n\\n        for (uint i = 0; i < predicates.length;){\\n            itemHashes[i] = keccak256(\\n                abi.encode(\\n                    _PREDICATE_TYPEHASH,\\n                    keccak256(predicates[i].data),\\n                    predicates[i].verifier\\n                )\\n            );\\n\\n            // Predicates is calldata, overflow is impossible bc of calldata\\n            // size limits vis-a-vis gas\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        // concatenate all predicate hashes\\n        itemsHash = keccak256(abi.encodePacked(itemHashes));\\n    }\\n\\n    /**\\n     * @dev Run the predicates check for an items signature, sending the defined\\n     *      predicate payload to each defined verifier contract, and reverting\\n     *      if a verifier returns false.\\n     *\\n     * @param borrower              The borrower of the loan.\\n     * @param lender                The lender of the loan.\\n     * @param loanTerms             The terms of the loan.\\n     * @param itemPredicates        The array of predicates to check.\\n     */\\n    function _runPredicatesCheck(\\n        address borrower,\\n        address lender,\\n        LoanLibrary.LoanTerms memory loanTerms,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) internal view {\\n        for (uint256 i = 0; i < itemPredicates.length;) {\\n            // Verify items are held in the wrapper\\n            address verifier = itemPredicates[i].verifier;\\n            if (!isAllowedVerifier(verifier)) revert OC_InvalidVerifier(verifier);\\n\\n            if (!ISignatureVerifier(verifier).verifyPredicates(\\n                borrower,\\n                lender,\\n                loanTerms.collateralAddress,\\n                loanTerms.collateralId,\\n                itemPredicates[i].data\\n            )) {\\n                revert OC_PredicateFailed(\\n                    verifier,\\n                    borrower,\\n                    lender,\\n                    loanTerms.collateralAddress,\\n                    loanTerms.collateralId,\\n                    itemPredicates[i].data\\n                );\\n            }\\n\\n            // Predicates is calldata, overflow is impossible bc of calldata\\n            // size limits vis-a-vis gas\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform loan initialization. Take custody of both principal and\\n     *      collateral, and tell LoanCore to create and start a loan.\\n     *\\n     * @param loanTerms                     The terms agreed by the lender and borrower.\\n     * @param borrower                      Address of the borrower.\\n     * @param lender                        Address of the lender.\\n     *\\n     * @return loanId                       The unique ID of the new loan.\\n     */\\n    function _initialize(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender\\n    ) internal nonReentrant returns (uint256 loanId) {\\n        // get lending origination fees from fee controller\\n        IFeeController.FeesOrigination memory feeData = feeController.getFeesOrigination();\\n\\n        // create LoanLibrary.FeeSnapshot struct from feeData\\n        LoanLibrary.FeeSnapshot memory feeSnapshot = LoanLibrary.FeeSnapshot({\\n            lenderDefaultFee: feeData.lenderDefaultFee,\\n            lenderInterestFee: feeData.lenderInterestFee,\\n            lenderPrincipalFee: feeData.lenderPrincipalFee\\n        });\\n\\n        uint256 borrowerFee = (loanTerms.principal * feeData.borrowerOriginationFee) / BASIS_POINTS_DENOMINATOR;\\n        uint256 lenderFee = (loanTerms.principal * feeData.lenderOriginationFee) / BASIS_POINTS_DENOMINATOR;\\n\\n        // Determine settlement amounts based on fees\\n        uint256 amountFromLender = loanTerms.principal + lenderFee;\\n        uint256 amountToBorrower = loanTerms.principal - borrowerFee;\\n\\n        loanId = loanCore.startLoan(lender, borrower, loanTerms, amountFromLender, amountToBorrower, feeSnapshot);\\n    }\\n\\n    /**\\n     * @dev Perform loan rollover. Take custody of both principal and\\n     *      collateral, and tell LoanCore to roll over the existing loan.\\n     *\\n     * @param oldLoanId                     The ID of the loan to be rolled over.\\n     * @param newTerms                      The terms agreed by the lender and borrower.\\n     * @param borrower                      Address of the borrower.\\n     * @param lender                        Address of the lender.\\n     *\\n     * @return loanId                       The unique ID of the new loan.\\n     */\\n    function _rollover(\\n        uint256 oldLoanId,\\n        LoanLibrary.LoanTerms calldata newTerms,\\n        address borrower,\\n        address lender\\n    ) internal nonReentrant returns (uint256 loanId) {\\n        LoanLibrary.LoanData memory oldLoanData = loanCore.getLoan(oldLoanId);\\n        LoanLibrary.LoanTerms memory oldTerms = oldLoanData.terms;\\n\\n        address oldLender = loanCore.lenderNote().ownerOf(oldLoanId);\\n        IERC20 payableCurrency = IERC20(oldTerms.payableCurrency);\\n\\n        // Calculate settle amounts\\n        RolloverAmounts memory amounts = _calculateRolloverAmounts(\\n            oldTerms,\\n            newTerms,\\n            lender,\\n            oldLender\\n        );\\n\\n        // Collect funds based on settle amounts and total them\\n        uint256 settledAmount;\\n        if (lender != oldLender) {\\n            // If new lender, take new principal from new lender\\n            payableCurrency.safeTransferFrom(lender, address(this), amounts.amountFromLender);\\n            settledAmount += amounts.amountFromLender;\\n        }\\n\\n        if (amounts.needFromBorrower > 0) {\\n            // Borrower owes from old loan\\n            payableCurrency.safeTransferFrom(borrower, address(this), amounts.needFromBorrower);\\n            settledAmount += amounts.needFromBorrower;\\n        } else if (amounts.leftoverPrincipal > 0 && lender == oldLender) {\\n            // If same lender, and new amount from lender is greater than old loan repayment amount,\\n            // take the difference from the lender\\n            payableCurrency.safeTransferFrom(lender, address(this), amounts.leftoverPrincipal);\\n            settledAmount += amounts.leftoverPrincipal;\\n        }\\n\\n        // approve LoanCore to take the total settled amount\\n        payableCurrency.approve(address(loanCore), settledAmount);\\n\\n        loanId = loanCore.rollover(\\n            oldLoanId,\\n            borrower,\\n            lender,\\n            newTerms,\\n            settledAmount,\\n            amounts.amountToOldLender,\\n            amounts.amountToLender,\\n            amounts.amountToBorrower\\n        );\\n    }\\n\\n    /**\\n     * @dev Calculate the net amounts needed for the rollover from each party - the\\n     *      borrower, the new lender, and the old lender (can be same as new lender).\\n     *      Determine the amount to either pay or withdraw from the borrower, and\\n     *      any payments to be sent to the old lender.\\n     *\\n     * @param oldTerms              The terms struct for the old loan.\\n     * @param newTerms              The terms struct for the new loan.\\n     * @param lender                The lender for the new loan.\\n     * @param oldLender             The lender for the existing loan.\\n     *\\n     * @return amounts              The net amounts owed to each party.\\n     */\\n    function _calculateRolloverAmounts(\\n        LoanLibrary.LoanTerms memory oldTerms,\\n        LoanLibrary.LoanTerms calldata newTerms,\\n        address lender,\\n        address oldLender\\n    ) internal view returns (RolloverAmounts memory amounts) {\\n        // get rollover fees\\n        IFeeController.FeesRollover memory feeData = feeController.getFeesRollover();\\n\\n        // Calculate repay amount of old loan\\n        uint256 interest = getInterestAmount(oldTerms.principal, oldTerms.proratedInterestRate);\\n        uint256 repayAmount = oldTerms.principal + interest;\\n\\n        // Calculate amount to be sent to borrower for new loan minus rollover fees\\n        uint256 borrowerFee = (newTerms.principal * feeData.borrowerRolloverFee) / BASIS_POINTS_DENOMINATOR;\\n        uint256 borrowerOwedForNewLoan = newTerms.principal - borrowerFee;\\n\\n        // Calculate amount to be collected from the lender for new loan plus rollover fees\\n        uint256 lenderFee = (newTerms.principal * feeData.lenderRolloverFee) / BASIS_POINTS_DENOMINATOR;\\n        amounts.amountFromLender = newTerms.principal + lenderFee;\\n\\n        // Calculate net amounts based on if repayment amount for old loan is greater than\\n        // new loan principal minus fees\\n        if (repayAmount > borrowerOwedForNewLoan) {\\n            // amount to collect from borrower\\n            // new loan principal is less than old loan repayment amount\\n            unchecked {\\n                amounts.needFromBorrower = repayAmount - borrowerOwedForNewLoan;\\n            }\\n        } else {\\n            // amount to collect from lender (either old or new)\\n            amounts.leftoverPrincipal = amounts.amountFromLender - repayAmount;\\n\\n            // amount to send to borrower\\n            unchecked {\\n                amounts.amountToBorrower = borrowerOwedForNewLoan - repayAmount;\\n            }\\n        }\\n\\n        // Calculate lender amounts based on if the lender is the same as the old lender\\n        if (lender != oldLender) {\\n            // different lenders, repay old lender\\n            amounts.amountToOldLender = repayAmount;\\n\\n            // different lender, new lender is owed zero tokens\\n            amounts.amountToLender = 0;\\n        } else {\\n            // same lender\\n            amounts.amountToOldLender = 0;\\n\\n            // same lender, so check if the amount to collect from the lender is less than\\n            // the amount the lender is owed for the old loan. If so, the lender is owed the\\n            // difference\\n            if (amounts.needFromBorrower > 0 && repayAmount > amounts.amountFromLender) {\\n                unchecked {\\n                    amounts.amountToLender = repayAmount - amounts.amountFromLender;\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOriginationController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\ninterface IOriginationController {\\n    // ================ Data Types =============\\n\\n    struct Currency {\\n        bool isAllowed;\\n        uint256 minPrincipal;\\n    }\\n\\n    enum Side {\\n        BORROW,\\n        LEND\\n    }\\n\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        bytes extraData;\\n    }\\n\\n    struct RolloverAmounts {\\n        uint256 needFromBorrower;\\n        uint256 leftoverPrincipal;\\n        uint256 amountFromLender;\\n        uint256 amountToOldLender;\\n        uint256 amountToLender;\\n        uint256 amountToBorrower;\\n    }\\n\\n    // ================ Events =================\\n\\n    event Approval(address indexed owner, address indexed signer, bool isApproved);\\n    event SetAllowedVerifier(address indexed verifier, bool isAllowed);\\n    event SetAllowedCurrency(address indexed currency, bool isAllowed, uint256 minPrincipal);\\n    event SetAllowedCollateral(address indexed collateral, bool isAllowed);\\n\\n    // ============== Origination Operations ==============\\n\\n    function initializeLoan(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce\\n    ) external returns (uint256 loanId);\\n\\n    function initializeLoanWithItems(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) external returns (uint256 loanId);\\n\\n    function initializeLoanWithCollateralPermit(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Signature calldata collateralSig,\\n        uint256 permitDeadline\\n    ) external returns (uint256 loanId);\\n\\n    function initializeLoanWithCollateralPermitAndItems(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address borrower,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Signature calldata collateralSig,\\n        uint256 permitDeadline,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) external returns (uint256 loanId);\\n\\n    function rolloverLoan(\\n        uint256 oldLoanId,\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce\\n    ) external returns (uint256 newLoanId);\\n\\n    function rolloverLoanWithItems(\\n        uint256 oldLoanId,\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        address lender,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        LoanLibrary.Predicate[] calldata itemPredicates\\n    ) external returns (uint256 newLoanId);\\n\\n    // ================ Permission Management =================\\n\\n    function approve(address signer, bool approved) external;\\n\\n    function isApproved(address owner, address signer) external returns (bool);\\n\\n    function isSelfOrApproved(address target, address signer) external returns (bool);\\n\\n    function isApprovedForContract(\\n        address target,\\n        Signature calldata sig,\\n        bytes32 sighash\\n    ) external returns (bool);\\n\\n    // ============== Signature Verification ==============\\n\\n    function recoverTokenSignature(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Side side\\n    ) external view returns (bytes32 sighash, address signer);\\n\\n    function recoverItemsSignature(\\n        LoanLibrary.LoanTerms calldata loanTerms,\\n        Signature calldata sig,\\n        uint160 nonce,\\n        Side side,\\n        bytes32 itemsHash\\n    ) external view returns (bytes32 sighash, address signer);\\n\\n    // ============== Admin Operations ==============\\n\\n    function setAllowedPayableCurrencies(address[] memory _tokenAddress, Currency[] calldata currencyData) external;\\n\\n    function setAllowedCollateralAddresses(address[] memory _tokenAddress, bool[] calldata isAllowed) external;\\n\\n    function setAllowedVerifiers(address[] calldata verifiers, bool[] calldata isAllowed) external;\\n\\n    function isAllowedCurrency(address token) external view returns (bool);\\n\\n    function isAllowedCollateral(address token) external view returns (bool);\\n\\n    function isAllowedVerifier(address verifier) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILoanCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\nimport \\\"./IPromissoryNote.sol\\\";\\n\\ninterface ILoanCore {\\n\\n    // ================ Data Types =================\\n\\n    struct AffiliateSplit {\\n        address affiliate;\\n        uint96 splitBps;\\n    }\\n\\n    struct NoteReceipt {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    // ================ Events =================\\n\\n    event LoanStarted(uint256 loanId, address lender, address borrower);\\n    event LoanRepaid(uint256 loanId);\\n    event ForceRepay(uint256 loanId);\\n    event LoanRolledOver(uint256 oldLoanId, uint256 newLoanId);\\n    event LoanClaimed(uint256 loanId);\\n    event NoteRedeemed(address indexed token, address indexed caller, address indexed to, uint256 tokenId, uint256 amount);\\n    event NonceUsed(address indexed user, uint160 nonce);\\n\\n    event FeesWithdrawn(address indexed token, address indexed caller, address indexed to, uint256 amount);\\n    event AffiliateSet(bytes32 indexed code, address indexed affiliate, uint96 splitBps);\\n\\n    // ============== Lifecycle Operations ==============\\n\\n    function startLoan(\\n        address lender,\\n        address borrower,\\n        LoanLibrary.LoanTerms calldata terms,\\n        uint256 _amountFromLender,\\n        uint256 _amountToBorrower,\\n        LoanLibrary.FeeSnapshot calldata feeSnapshot\\n    ) external returns (uint256 loanId);\\n\\n    function repay(\\n        uint256 loanId,\\n        address payer,\\n        uint256 _amountFromPayer,\\n        uint256 _amountToLender\\n    ) external;\\n\\n    function forceRepay(\\n        uint256 loanId,\\n        address payer,\\n        uint256 _amountFromPayer,\\n        uint256 _amountToLender\\n    ) external;\\n\\n    function claim(\\n        uint256 loanId,\\n        uint256 _amountFromLender\\n    ) external;\\n\\n    function redeemNote(\\n        uint256 loanId,\\n        uint256 _amountFromLender,\\n        address to\\n    ) external;\\n\\n    function rollover(\\n        uint256 oldLoanId,\\n        address borrower,\\n        address lender,\\n        LoanLibrary.LoanTerms calldata terms,\\n        uint256 _settledAmount,\\n        uint256 _amountToOldLender,\\n        uint256 _amountToLender,\\n        uint256 _amountToBorrower\\n    ) external returns (uint256 newLoanId);\\n\\n    // ============== Nonce Management ==============\\n\\n    function consumeNonce(address user, uint160 nonce) external;\\n\\n    function cancelNonce(uint160 nonce) external;\\n\\n    // ============== Fee Management ==============\\n\\n    function withdraw(address token, uint256 amount, address to) external;\\n\\n    function withdrawProtocolFees(address token, address to) external;\\n\\n    // ============== Admin Operations ==============\\n\\n    function setAffiliateSplits(bytes32[] calldata codes, AffiliateSplit[] calldata splits) external;\\n\\n    // ============== View Functions ==============\\n\\n    function getLoan(uint256 loanId) external view returns (LoanLibrary.LoanData calldata loanData);\\n\\n    function getNoteReceipt(uint256 loanId) external view returns (address token, uint256 amount);\\n\\n    function isNonceUsed(address user, uint160 nonce) external view returns (bool);\\n\\n    function borrowerNote() external view returns (IPromissoryNote);\\n\\n    function lenderNote() external view returns (IPromissoryNote);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Permit is IERC721 {\\n    // ================ Permit Functionality ================\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // ================ View Functions ================\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISignatureVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface ISignatureVerifier {\\n    // ============== Collateral Verification ==============\\n\\n    function verifyPredicates(\\n        address borrower,\\n        address lender,\\n        address collateralAddress,\\n        uint256 collateralId,\\n        bytes calldata predicates\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface IFeeController {\\n    // ================ Structs ================\\n\\n    struct FeesOrigination {\\n        uint16 borrowerOriginationFee;\\n        uint16 lenderOriginationFee;\\n        uint16 lenderDefaultFee;\\n        uint16 lenderInterestFee;\\n        uint16 lenderPrincipalFee;\\n    }\\n\\n    struct FeesRollover {\\n        uint16 borrowerRolloverFee;\\n        uint16 lenderRolloverFee;\\n    }\\n\\n    // ================ Events =================\\n\\n    event SetLendingFee(bytes32 indexed id, uint16 fee);\\n\\n    event SetVaultMintFee(uint64 fee);\\n\\n    // ================ Getter/Setter =================\\n\\n    function setLendingFee(bytes32 id, uint16 fee) external;\\n\\n    function setVaultMintFee(uint64 fee) external;\\n\\n    function getLendingFee(bytes32 id) external view returns (uint16);\\n\\n    function getVaultMintFee() external view returns (uint64);\\n\\n    function getFeesOrigination() external view returns (FeesOrigination memory);\\n\\n    function getFeesRollover() external view returns (FeesRollover memory);\\n\\n    function getMaxLendingFee(bytes32 id) external view returns (uint16);\\n\\n    function getMaxVaultMintFee() external view returns (uint64);\\n}\"\r\n    },\r\n    \"contracts/libraries/InterestCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title InterestCalculator\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Interface for calculating the interest amount\\n * given an interest rate and principal amount. Assumes\\n * that the interestRate is already expressed over the desired\\n * time period.\\n */\\nabstract contract InterestCalculator {\\n    // ============================================ STATE ==============================================\\n\\n    /// @dev The units of precision equal to the minimum interest of 1 basis point.\\n    uint256 public constant INTEREST_RATE_DENOMINATOR = 1e18;\\n\\n    uint256 public constant BASIS_POINTS_DENOMINATOR = 1e4;\\n\\n    // ======================================== CALCULATIONS ===========================================\\n\\n    /**\\n     * @notice Calculate the interest due over a full term.\\n     *\\n     * @dev Interest and principal must be entered with 18 units of\\n     *      precision from the basis point unit (e.g. 1e18 == 0.01%)\\n     *\\n     * @param principal                             Principal amount in the loan terms.\\n     * @param proratedInterestRate                  Interest rate in the loan terms, prorated over loan duration.\\n     *\\n     * @return interest                             The amount of interest due.\\n     */\\n    function getInterestAmount(uint256 principal, uint256 proratedInterestRate) public pure returns (uint256) {\\n        return principal * proratedInterestRate / (INTEREST_RATE_DENOMINATOR * BASIS_POINTS_DENOMINATOR);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FeeLookups.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title FeeLookups\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Enumerates unique identifiers for fee identifiers\\n * that the lending protocol uses.\\n */\\nabstract contract FeeLookups {\\n    /// @dev Origination fees: amount in bps, payable in loan token\\n    bytes32 public constant FL_01 = keccak256(\\\"BORROWER_ORIGINATION_FEE\\\");\\n    bytes32 public constant FL_02 = keccak256(\\\"LENDER_ORIGINATION_FEE\\\");\\n\\n    /// @dev Rollover fees: amount in bps, payable in loan token\\n    bytes32 public constant FL_03 = keccak256(\\\"BORROWER_ROLLOVER_FEE\\\");\\n    bytes32 public constant FL_04 = keccak256(\\\"LENDER_ROLLOVER_FEE\\\");\\n\\n    /// @dev Loan closure fees: amount in bps, payable in loan token\\n    bytes32 public constant FL_05 = keccak256(\\\"LENDER_DEFAULT_FEE\\\");\\n    bytes32 public constant FL_06 = keccak256(\\\"LENDER_INTEREST_FEE\\\");\\n    bytes32 public constant FL_07 = keccak256(\\\"LENDER_PRINCIPAL_FEE\\\");\\n    bytes32 public constant FL_08 = keccak256(\\\"LENDER_REDEEM_FEE\\\");\\n}\\n\"\r\n    },\r\n    \"contracts/verifiers/ArcadeItemsVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/ISignatureVerifier.sol\\\";\\nimport \\\"../interfaces/IVaultFactory.sol\\\";\\n\\nimport {\\n    IV_NoAmount,\\n    IV_InvalidWildcard,\\n    IV_ItemMissingAddress,\\n    IV_InvalidCollateralType,\\n    IV_NoPredicates,\\n    IV_InvalidCollateralId\\n} from \\\"../errors/Lending.sol\\\";\\n\\n/**\\n * @title ArcadeItemsVerifier\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This contract can be used for verifying complex signature-encoded\\n * bundle descriptions. This resolves on a new array of SignatureItems[],\\n * which outside of verification, is passed around as bytes memory.\\n *\\n * Each SignatureItem has the following fields:\\n *      - cType (collateral Type)\\n *      - asset (contract address of the asset)\\n *      - tokenId (token ID of the asset, if applicable)\\n *      - amount (amount of the asset, if applicable - if ERC721, set to \\\"1\\\")\\n *      - anyIdAllowed (whether a wildcard is supported - see below)\\n *\\n * - For token ids part of ERC721, other features beyond direct tokenIds are supported:\\n *      - If anyIdAllowed is true, then any token ID can be passed - the field will be ignored.\\n *      - If anyIdAllowed is true, then the \\\"amount\\\" field can be read to require\\n *          a specific amount of assets from the collection.\\n *      - Wildcard token ids are not supported for ERC1155 or ERC20.\\n * - All amounts are taken as minimums. For instance, if the \\\"amount\\\" field of an ERC1155 is 5,\\n *      then a bundle with 8 of those ERC1155s are accepted.\\n * - For an ERC20 cType, tokenId is ignored. For an ERC721 cType, amount is ignored unless wildcard (see above).\\n        If a wildcard is used, 0 amount is invalid, and all nonzero amounts are ignored.\\n *\\n * - Any deviation from the above rules represents an unparseable signature and will always\\n *      return invalid.\\n *\\n * - All multi-item signatures assume AND - any optional expressed by OR\\n *      can be implemented by simply signing multiple separate signatures.\\n */\\ncontract ArcadeItemsVerifier is ISignatureVerifier {\\n    /// @dev Enum describing the collateral type of a signature item\\n    enum CollateralType {\\n        ERC_721,\\n        ERC_1155,\\n        ERC_20\\n    }\\n\\n    /// @dev Enum describing each item that should be validated\\n    struct SignatureItem {\\n        // The type of collateral - which interface does it implement\\n        CollateralType cType;\\n        // The address of the collateral contract\\n        address asset;\\n        // The token ID of the collateral (only applicable to 721 and 1155).\\n        uint256 tokenId;\\n        // The minimum amount of collateral. For ERC721 assets, pass 1 or the\\n        // amount of assets needed to be held for a wildcard predicate. If the\\n        // tokenId is specified, the amount is assumed to be 1.\\n        uint256 amount;\\n        // Whether any token ID should be allowed. Only applies to ERC721.\\n        // Supersedes tokenId.\\n        bool anyIdAllowed;\\n    }\\n\\n    // ==================================== COLLATERAL VERIFICATION =====================================\\n\\n    /**\\n     * @notice Verify that the items specified by the packed SignatureItem array are held by the vault.\\n     * @dev    Reverts on a malformed SignatureItem, returns false on missing contents.\\n     *\\n     *         Verification for empty predicates array has been addressed in initializeLoanWithItems and\\n     *         rolloverLoanWithItems.\\n     *\\n     * @param collateralAddress             The address of the loan's collateral.\\n     * @param collateralId                  The tokenId of the loan's collateral.\\n     * @param predicates                    The calldata needed for the verifier.\\n     *\\n     * @return verified                     Whether the bundle contains the specified items.\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function verifyPredicates(\\n        address, address,\\n        address collateralAddress,\\n        uint256 collateralId,\\n        bytes calldata predicates\\n    ) external view override returns (bool) {\\n        address vault = IVaultFactory(collateralAddress).instanceAt(collateralId);\\n\\n        // Make sure vault address, converted back into uint256, matches the original\\n        // collateralId. An arbitrary collateralId could theoretically collide with the\\n        // another vault's address, meaning the wrong vault would be checked.\\n        if (collateralId != uint256(uint160(vault))) revert IV_InvalidCollateralId(collateralId);\\n\\n        // Unpack items\\n        SignatureItem[] memory items = abi.decode(predicates, (SignatureItem[]));\\n        if (items.length == 0) revert IV_NoPredicates();\\n\\n        for (uint256 i = 0; i < items.length;) {\\n            SignatureItem memory item = items[i];\\n\\n            // No asset provided\\n            if (item.asset == address(0)) revert IV_ItemMissingAddress();\\n\\n            // No amount provided\\n            if (item.amount == 0) revert IV_NoAmount(item.asset, item.amount);\\n\\n\\n            if (item.cType == CollateralType.ERC_721) {\\n                IERC721 asset = IERC721(item.asset);\\n\\n                // Wildcard, but vault has no assets or not enough specified\\n                if (item.anyIdAllowed && asset.balanceOf(vault) < item.amount) return false;\\n                // Does not own specifically specified asset\\n                if (!item.anyIdAllowed && asset.ownerOf(item.tokenId) != vault) return false;\\n            } else if (item.cType == CollateralType.ERC_1155) {\\n                IERC1155 asset = IERC1155(item.asset);\\n\\n                // Wildcard not allowed, since we can't check overall 1155 balances\\n                if (item.anyIdAllowed) revert IV_InvalidWildcard(item.asset);\\n\\n                // Does not own specifically specified asset\\n                if (asset.balanceOf(vault, item.tokenId) < item.amount) return false;\\n            } else {\\n                IERC20 asset = IERC20(item.asset);\\n\\n                // Wildcard not allowed, since nonsensical\\n                if (item.anyIdAllowed) revert IV_InvalidWildcard(item.asset);\\n\\n                // Does not own specifically specified asset\\n                if (asset.balanceOf(vault) < item.amount) return false;\\n            }\\n\\n            // Predicates is calldata, overflow is impossible bc of calldata\\n            // size limits vis-a-vis gas\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        // Loop completed - all items found\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/errors/Lending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/LoanLibrary.sol\\\";\\n\\n/**\\n * @title LendingErrors\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This file contains custom errors for the core lending protocol contracts, with errors\\n * prefixed by the contract that throws them (e.g., \\\"OC_\\\" for OriginationController).\\n * Errors located in one place to make it possible to holistically look at all\\n * protocol failure cases.\\n */\\n\\n// ==================================== ORIGINATION CONTROLLER ======================================\\n/// @notice All errors prefixed with OC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                  The name of the parameter for which a zero address was provided.\\n */\\nerror OC_ZeroAddress(string addressType);\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror OC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration must be greater than 1hr and less than 3yrs.\\n *\\n * @param durationSecs                 Total amount of time in seconds.\\n */\\nerror OC_LoanDuration(uint256 durationSecs);\\n\\n/**\\n * @notice Interest must be greater than 0.01% and less than 10,000%. (interestRate / 1e18 >= 1)\\n *\\n * @param interestRate                  InterestRate with 1e18 multiplier.\\n */\\nerror OC_InterestRate(uint256 interestRate);\\n\\n/**\\n * @notice One of the predicates for item verification failed.\\n *\\n * @param borrower                      The address of the borrower.\\n * @param lender                        The address of the lender.\\n * @param verifier                      The address of the verifier contract.\\n * @param collateralAddress             The address of the collateral token.\\n * @param collateralId                  The token ID of the collateral.\\n * @param data                          The verification data (to be parsed by verifier).\\n */\\nerror OC_PredicateFailed(\\n    address borrower,\\n    address lender,\\n    address verifier,\\n    address collateralAddress,\\n    uint256 collateralId,\\n    bytes data\\n);\\n\\n/**\\n * @notice The predicates array is empty.\\n */\\nerror OC_PredicatesArrayEmpty();\\n\\n/**\\n * @notice A caller attempted to approve themselves.\\n *\\n * @param caller                        The caller of the approve function.\\n */\\nerror OC_SelfApprove(address caller);\\n\\n/**\\n * @notice A caller attempted to originate a loan with their own signature.\\n *\\n * @param caller                        The caller of the approve function, who was also the signer.\\n */\\nerror OC_ApprovedOwnLoan(address caller);\\n\\n/**\\n * @notice The signature could not be recovered to the counterparty or approved party.\\n *\\n * @param target                        The target party of the signature, which should either be the signer,\\n *                                      or someone who has approved the signer.\\n * @param signer                        The signer determined from ECDSA.recover.\\n */\\nerror OC_InvalidSignature(address target, address signer);\\n\\n/**\\n * @notice The verifier contract specified in a predicate has not been whitelisted.\\n *\\n * @param verifier                      The verifier the caller attempted to use.\\n */\\nerror OC_InvalidVerifier(address verifier);\\n\\n/**\\n * @notice The function caller was neither borrower or lender, and was not approved by either.\\n *\\n * @param caller                        The unapproved function caller.\\n */\\nerror OC_CallerNotParticipant(address caller);\\n\\n/**\\n * @notice Signer is attempting to take the wrong side of the loan.\\n *\\n * @param signer                       The address of the external signer.\\n */\\nerror OC_SideMismatch(address signer);\\n\\n/**\\n * @notice Two related parameters for batch operations did not match in length.\\n */\\nerror OC_BatchLengthMismatch();\\n\\n/**\\n * @notice Principal must be greater than 9999 Wei.\\n *\\n * @param principal                     Principal in ether.\\n */\\nerror OC_PrincipalTooLow(uint256 principal);\\n\\n/**\\n * @notice Signature must not be expired.\\n *\\n * @param deadline                      Deadline in seconds.\\n */\\nerror OC_SignatureIsExpired(uint256 deadline);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCurrency                   The currency of the active loan.\\n * @param newCurrency                   The currency of the new loan.\\n */\\nerror OC_RolloverCurrencyMismatch(address oldCurrency, address newCurrency);\\n\\n/**\\n * @notice New currency does not match for a loan rollover request.\\n *\\n * @param oldCollateralAddress          The address of the active loan's collateral.\\n * @param newCollateralAddress          The token ID of the active loan's collateral.\\n * @param oldCollateralId               The address of the new loan's collateral.\\n * @param newCollateralId               The token ID of the new loan's collateral.\\n */\\nerror OC_RolloverCollateralMismatch(\\n    address oldCollateralAddress,\\n    uint256 oldCollateralId,\\n    address newCollateralAddress,\\n    uint256 newCollateralId\\n);\\n\\n/**\\n * @notice Provided payable currency address is not approved for lending.\\n *\\n * @param payableCurrency       ERC20 token address supplied in loan terms.\\n */\\nerror OC_InvalidCurrency(address payableCurrency);\\n\\n/**\\n * @notice Provided collateral address is not approved for lending.\\n *\\n * @param collateralAddress       ERC721 or ERC1155 token address supplied in loan terms.\\n */\\nerror OC_InvalidCollateral(address collateralAddress);\\n\\n/**\\n * @notice Provided token array does not hold any token addresses.\\n */\\nerror OC_ZeroArrayElements();\\n\\n/**\\n * @notice Provided token array holds more than 50 token addresses.\\n */\\nerror OC_ArrayTooManyElements();\\n\\n// ==================================== ITEMS VERIFIER ======================================\\n/// @notice All errors prefixed with IV_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice The predicate payload was decoded successfully, but list of predicates is empty.\\n */\\nerror IV_NoPredicates();\\n\\n/**\\n * @notice Provided SignatureItem is missing an address.\\n */\\nerror IV_ItemMissingAddress();\\n\\n/**\\n * @notice Provided SignatureItem has an invalid collateral type.\\n * @dev    Should never actually fire, since cType is defined by an enum, so will fail on decode.\\n *\\n * @param asset                        The NFT contract being checked.\\n * @param cType                        The collateralTytpe provided.\\n */\\nerror IV_InvalidCollateralType(address asset, uint256 cType);\\n\\n/**\\n * @notice Provided signature item with no required amount. For single ERC721s, specify 1.\\n *\\n * @param asset                         The NFT contract being checked.\\n * @param amount                        The amount provided (should be 0).\\n */\\nerror IV_NoAmount(address asset, uint256 amount);\\n\\n/**\\n * @notice Provided a wildcard for a non-ERC721.\\n *\\n * @param asset                         The NFT contract being checked.\\n */\\nerror IV_InvalidWildcard(address asset);\\n\\n/**\\n * @notice The provided token ID is out of bounds for the given collection.\\n *\\n * @param tokenId                       The token ID provided.\\n */\\nerror IV_InvalidTokenId(int256 tokenId);\\n\\n/**\\n * @notice The provided project ID does not exist on the target contract. Only\\n *         used for ArtBlocks.\\n *\\n * @param projectId                     The project ID provided.\\n * @param nextProjectId                 The contract's reported nextProjectId.\\n */\\nerror IV_InvalidProjectId(uint256 projectId, uint256 nextProjectId);\\n\\n/**\\n * @notice The provided collateralId converts to a vault, but\\n *         the vault's address does not convert back to the provided collateralId\\n *         when casted to a uint256.\\n */\\nerror IV_InvalidCollateralId(uint256 collateralId);\\n\\n// ==================================== REPAYMENT CONTROLLER ======================================\\n/// @notice All errors prefixed with RC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                  The name of the parameter for which a zero address was provided.\\n */\\nerror RC_ZeroAddress(string addressType);\\n\\n/**\\n * @notice Could not dereference loan from loan ID.\\n *\\n * @param target                     The loanId being checked.\\n */\\nerror RC_CannotDereference(uint256 target);\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror RC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Caller is not the owner of lender note.\\n *\\n * @param lender                     The owner of the lender note.\\n * @param caller                     Msg.sender of the function call.\\n */\\nerror RC_OnlyLender(address lender, address caller);\\n\\n// ==================================== Loan Core ======================================\\n/// @notice All errors prefixed with LC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                  The name of the parameter for which a zero address was provided.\\n */\\nerror LC_ZeroAddress(string addressType);\\n\\n/// @notice Borrower address is same as lender address.\\nerror LC_ReusedNote();\\n\\n/// @notice Zero amount passed in where not allowed.\\nerror LC_ZeroAmount();\\n\\n/**\\n * @notice Check collateral is not already used in a active loan.\\n *\\n * @param collateralAddress             Address of the collateral.\\n * @param collateralId                  ID of the collateral token.\\n */\\nerror LC_CollateralInUse(address collateralAddress, uint256 collateralId);\\n\\n/**\\n * @notice The reported settlements are invalid, and LoanCore would lose tokens\\n *         attempting to perform the requested operations.\\n *\\n *\\n * @param payout                        Amount of tokens to be paid out.\\n * @param collected                     Amount of tokens to collect - should be fewer than payout.\\n */\\nerror LC_CannotSettle(uint256 payout, uint256 collected);\\n\\n/**\\n * @notice User attempted to withdraw a pending balance that was in excess\\n *         of what is available.\\n *\\n * @param amount                        Amount of tokens to be withdrawn.\\n * @param available                     Amount of tokens available to withdraw.\\n */\\nerror LC_CannotWithdraw(uint256 amount, uint256 available);\\n\\n/**\\n * @notice Two arrays were provided that must be of matching length, but were not.\\n *\\n */\\nerror LC_ArrayLengthMismatch();\\n\\n/**\\n * @notice A proposed affiliate split was submitted that is over the maximum.\\n *\\n * @param splitBps                     The proposed affiliate split.\\n * @param maxSplitBps                  The maximum allowed affiliate split.\\n *\\n */\\nerror LC_OverMaxSplit(uint96 splitBps, uint96 maxSplitBps);\\n\\n/**\\n * @notice Ensure valid loan state for loan lifceycle operations.\\n *\\n * @param state                         Current state of a loan according to LoanState enum.\\n */\\nerror LC_InvalidState(LoanLibrary.LoanState state);\\n\\n/**\\n * @notice Loan duration has not expired.\\n *\\n * @param dueDate                       Timestamp of the end of the loan duration.\\n */\\nerror LC_NotExpired(uint256 dueDate);\\n\\n/**\\n * @notice User address and the specified nonce have already been used.\\n *\\n * @param user                          Address of collateral owner.\\n * @param nonce                         Represents the number of transactions sent by address.\\n */\\nerror LC_NonceUsed(address user, uint160 nonce);\\n\\n/**\\n * @notice Protocol attempted to set an affiliate code which already exists. Affiliate\\n *         codes are immutable.\\n *\\n * @param affiliateCode                 The affiliate code being set.\\n */\\nerror LC_AffiliateCodeAlreadySet(bytes32 affiliateCode);\\n\\n/**\\n * @notice Specified note token ID does not have a redeemable receipt.\\n *\\n * @param loanId                     The loanId being checked.\\n */\\nerror LC_NoReceipt(uint256 loanId);\\n\\n/**\\n * @notice Only Loan Core contract can call this function.\\n */\\nerror LC_CallerNotLoanCore();\\n\\n/**\\n * @notice The loan core contract has been irreversibly shut down.\\n */\\nerror LC_Shutdown();\\n\\n// ==================================== Promissory Note ======================================\\n/// @notice All errors prefixed with PN_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                  The name of the parameter for which a zero address was provided.\\n */\\nerror PN_ZeroAddress(string addressType);\\n\\n/**\\n * @notice Caller of mint function must have the MINTER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_MintingRole(address caller);\\n\\n/**\\n * @notice Caller of burn function must have the BURNER_ROLE in AccessControl.\\n *\\n * @param caller                        Address of the function caller.\\n */\\nerror PN_BurningRole(address caller);\\n\\n/**\\n * @notice Non-existant token id provided as argument.\\n *\\n * @param tokenId                       The ID of the token to lookup the URI for.\\n */\\nerror PN_DoesNotExist(uint256 tokenId);\\n\\n// ==================================== Fee Controller ======================================\\n/// @notice All errors prefixed with FC_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Caller attempted to set a lending fee which is larger than the global maximum.\\n */\\nerror FC_LendingFeeOverMax(bytes32 selector, uint256 fee, uint256 maxFee);\\n\\n/**\\n * @notice Caller attempted to set a vault mint fee which is larger than the global maximum.\\n */\\nerror FC_VaultMintFeeOverMax(uint256 fee, uint256 maxFee);\\n\\n// ==================================== ERC721 Permit ======================================\\n/// @notice All errors prefixed with ERC721P_, to separate from other contracts in the protocol.\\n\\n/**\\n * @notice Deadline for the permit has expired.\\n *\\n * @param deadline                      Permit deadline parameter as a timestamp.\\n */\\nerror ERC721P_DeadlineExpired(uint256 deadline);\\n\\n/**\\n * @notice Address of the owner to also be the owner of the tokenId.\\n *\\n * @param owner                        Owner parameter for the function call.\\n */\\nerror ERC721P_NotTokenOwner(address owner);\\n\\n/**\\n * @notice Invalid signature.\\n *\\n * @param signer                        Signer recovered from ECDSA sugnature hash.\\n */\\nerror ERC721P_InvalidSignature(address signer);\\n\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LoanLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title LoanLibrary\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Contains all data types used across Arcade lending contracts.\\n */\\nlibrary LoanLibrary {\\n    /**\\n     * @dev Enum describing the current state of a loan.\\n     * State change flow:\\n     * Created -> Active -> Repaid\\n     *                   -> Defaulted\\n     */\\n    enum LoanState {\\n        // We need a default that is not 'Created' - this is the zero value\\n        DUMMY_DO_NOT_USE,\\n        // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\n        Active,\\n        // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\n        Repaid,\\n        // The loan was delinquent and collateral claimed by the lender. This is a terminal state.\\n        Defaulted\\n    }\\n\\n    /**\\n     * @dev The raw terms of a loan.\\n     */\\n    struct LoanTerms {\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        uint256 proratedInterestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The token ID of the address holding the collateral.\\n        /// @dev Can be an AssetVault, or the NFT contract for unbundled collateral\\n        address collateralAddress;\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 96 bits\\n        uint96 durationSecs;\\n        // The token ID of the collateral.\\n        uint256 collateralId;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n        // Timestamp for when signature for terms expires\\n        uint96 deadline;\\n        // Affiliate code used to start the loan.\\n        bytes32 affiliateCode;\\n    }\\n\\n    /**\\n     * @dev Modification of loan terms, used for signing only.\\n     *      Instead of a collateralId, a list of predicates\\n     *      is defined by 'bytes' in items.\\n     */\\n    struct LoanTermsWithItems {\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        uint256 proratedInterestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The tokenID of the address holding the collateral\\n        address collateralAddress;\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 96 bits\\n        uint96 durationSecs;\\n        // An encoded list of predicates, along with their verifiers.\\n        bytes items;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n        // Timestamp for when signature for terms expires\\n        uint96 deadline;\\n        // Affiliate code used to start the loan.\\n        bytes32 affiliateCode;\\n    }\\n\\n    /**\\n     * @dev Predicate for item-based verifications\\n     */\\n    struct Predicate {\\n        // The encoded predicate, to decoded and parsed by the verifier contract.\\n        bytes data;\\n        // The verifier contract.\\n        address verifier;\\n    }\\n\\n    /**\\n     * @dev Snapshot of lending fees at the time of loan creation.\\n     */\\n    struct FeeSnapshot {\\n        // The fee taken when lender claims defaulted collateral.\\n        uint16 lenderDefaultFee;\\n        // The fee taken from the borrower's interest repayment.\\n        uint16 lenderInterestFee;\\n        // The fee taken from the borrower's principal repayment.\\n        uint16 lenderPrincipalFee;\\n    }\\n\\n    /**\\n     * @dev The data of a loan. This is stored once the loan is Active\\n     */\\n    struct LoanData {\\n        /// @dev Packed variables\\n        // The current state of the loan.\\n        LoanState state;\\n        // Start date of the loan, using block.timestamp.\\n        uint160 startDate;\\n        /// @dev Full-slot variables\\n        // The raw terms of the loan.\\n        LoanTerms terms;\\n        // Record of lending fees at the time of loan creation.\\n        FeeSnapshot feeSnapshot;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPromissoryNote.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\nimport \\\"./INFTWithDescriptor.sol\\\";\\n\\ninterface IPromissoryNote is INFTWithDescriptor, IERC721Enumerable {\\n    // ============== Token Operations ==============\\n\\n    function mint(address to, uint256 loanId) external returns (uint256);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    // ============== Initializer ==============\\n\\n    function initialize(address loanCore) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTWithDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface INFTWithDescriptor {\\n    // ============= Events ==============\\n\\n    event SetDescriptor(address indexed caller, address indexed descriptor);\\n\\n    // ================ Resource Metadata ================\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function setDescriptor(address descriptor) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./INFTWithDescriptor.sol\\\";\\n\\ninterface IVaultFactory is INFTWithDescriptor {\\n    // ============= Events ==============\\n\\n    event VaultCreated(address vault, address to);\\n    event ClaimFees(address owner, uint256 amount);\\n\\n    // ================ View Functions ================\\n\\n    function isInstance(address instance) external view returns (bool validity);\\n\\n    function instanceCount() external view returns (uint256);\\n\\n    function instanceAt(uint256 tokenId) external view returns (address);\\n\\n    function instanceAtIndex(uint256 index) external view returns (address);\\n\\n    // ================ Factory Operations ================\\n\\n    function initializeBundle(address to) external payable returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanCore\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OC_ApprovedOwnLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OC_ArrayTooManyElements\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OC_BatchLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OC_CallerNotParticipant\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"OC_InterestRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"}],\"name\":\"OC_InvalidCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"}],\"name\":\"OC_InvalidCurrency\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"OC_InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum LoanLibrary.LoanState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"OC_InvalidState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"OC_InvalidVerifier\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationSecs\",\"type\":\"uint256\"}],\"name\":\"OC_LoanDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"OC_PredicateFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OC_PredicatesArrayEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"}],\"name\":\"OC_PrincipalTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldCollateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oldCollateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newCollateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralId\",\"type\":\"uint256\"}],\"name\":\"OC_RolloverCollateralMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newCurrency\",\"type\":\"address\"}],\"name\":\"OC_RolloverCurrencyMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"OC_SelfApprove\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"OC_SideMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"OC_SignatureIsExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"addressType\",\"type\":\"string\"}],\"name\":\"OC_ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OC_ZeroArrayElements\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"SetAllowedCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPrincipal\",\"type\":\"uint256\"}],\"name\":\"SetAllowedCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"SetAllowedVerifier\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_01\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_02\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_03\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_04\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_05\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_06\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_07\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FL_08\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WHITELIST_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_PREDICATE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.Predicate[]\",\"name\":\"predicates\",\"type\":\"tuple[]\"}],\"name\":\"_encodePredicates\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"itemsHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minPrincipal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedVerifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"}],\"name\":\"getInterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"durationSecs\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"deadline\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateCode\",\"type\":\"bytes32\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"}],\"name\":\"initializeLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"durationSecs\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"deadline\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateCode\",\"type\":\"bytes32\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"collateralSig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"permitDeadline\",\"type\":\"uint256\"}],\"name\":\"initializeLoanWithCollateralPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"durationSecs\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"deadline\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateCode\",\"type\":\"bytes32\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"collateralSig\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"permitDeadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.Predicate[]\",\"name\":\"itemPredicates\",\"type\":\"tuple[]\"}],\"name\":\"initializeLoanWithCollateralPermitAndItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"durationSecs\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"deadline\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateCode\",\"type\":\"bytes32\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.Predicate[]\",\"name\":\"itemPredicates\",\"type\":\"tuple[]\"}],\"name\":\"initializeLoanWithItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isAllowedCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isAllowedCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"isAllowedVerifier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"sighash\",\"type\":\"bytes32\"}],\"name\":\"isApprovedForContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isSelfOrApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"durationSecs\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"deadline\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateCode\",\"type\":\"bytes32\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"},{\"internalType\":\"enum IOriginationController.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"itemsHash\",\"type\":\"bytes32\"}],\"name\":\"recoverItemsSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"sighash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"durationSecs\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"deadline\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateCode\",\"type\":\"bytes32\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"},{\"internalType\":\"enum IOriginationController.Side\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"recoverTokenSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"sighash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldLoanId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"durationSecs\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"deadline\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateCode\",\"type\":\"bytes32\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"}],\"name\":\"rolloverLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newLoanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oldLoanId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"durationSecs\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payableCurrency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"deadline\",\"type\":\"uint96\"},{\"internalType\":\"bytes32\",\"name\":\"affiliateCode\",\"type\":\"bytes32\"}],\"internalType\":\"struct LoanLibrary.LoanTerms\",\"name\":\"loanTerms\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct IOriginationController.Signature\",\"name\":\"sig\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"nonce\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"internalType\":\"struct LoanLibrary.Predicate[]\",\"name\":\"itemPredicates\",\"type\":\"tuple[]\"}],\"name\":\"rolloverLoanWithItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newLoanId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isAllowed\",\"type\":\"bool[]\"}],\"name\":\"setAllowedCollateralAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minPrincipal\",\"type\":\"uint256\"}],\"internalType\":\"struct IOriginationController.Currency[]\",\"name\":\"currencyData\",\"type\":\"tuple[]\"}],\"name\":\"setAllowedPayableCurrencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"verifiers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isAllowed\",\"type\":\"bool[]\"}],\"name\":\"setAllowedVerifiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OriginationController", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000089bc08ba00f135d608bc335f6b33d7a9abcc98af000000000000000000000000f764442856eb3fe68a0828e07246a4b395e800fa", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}