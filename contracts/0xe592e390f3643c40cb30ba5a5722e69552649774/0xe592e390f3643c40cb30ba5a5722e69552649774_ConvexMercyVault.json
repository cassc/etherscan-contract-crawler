{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ConvexMercyVault/ConvexMercyVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MercyDAO\\n\\n/*\\n   ...     ..      ..                                                           ....                                  \\n  x*8888x.:*8888: -\\\"888:                                       ..            .xH888888Hx.                              \\n X   48888X `8888H  8888                 .u    .              @L           .H8888888888888:                       u.   \\nX8x.  8888X  8888X  !888>       .u     .d88B :@8c        .   9888i   .dL   888*\\\"\\\"\\\"?\\\"\\\"*88888X         u      ...ue888b  \\nX8888 X8888  88888   \\\"*8%-   ud8888.  =\\\"8888f8888r  .udR88N  `Y888k:*888. 'f     d8x.   ^%88k     us888u.   888R Y888r \\n'*888!X8888> X8888  xH8>   :888'8888.   4888>'88\\\"  <888'888k   888E  888I '>    <88888X   '?8  .@88 \\\"8888\\\"  888R I888> \\n  `?8 `8888  X888X X888>   d888 '88%\\\"   4888> '    9888 'Y\\\"    888E  888I  `:..:`888888>    8> 9888  9888   888R I888> \\n  -^  '888\\\"  X888  8888>   8888.+\\\"      4888>      9888        888E  888I         `\\\"*88     X  9888  9888   888R I888> \\n   dx '88~x. !88~  8888>   8888L       .d888L .+   9888        888E  888I    .xHHhx..\\\"      !  9888  9888  u8888cJ888  \\n .8888Xf.888x:!    X888X.: '8888c. .+  ^\\\"8888*\\\"    ?8888u../  x888N><888'   X88888888hx. ..!   9888  9888   \\\"*888*P\\\"   \\n:\\\"\\\"888\\\":~\\\"888\\\"     `888*\\\"   \\\"88888%       \\\"Y\\\"       \\\"8888P'    \\\"88\\\"  888   !   \\\"*888888888\\\"    \\\"888*\\\"\\\"888\\\"    'Y\\\"      \\n    \\\"~'    \\\"~        \\\"\\\"       \\\"YP'                    \\\"P'            88F          ^\\\"***\\\"`       ^Y\\\"   ^Y'              \\n                                                                    98\\\"                                                \\n                                                                  ./\\\"                                                  \\n                                                                 ~`                                                    \\n*/\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/ICVXRewardPool.sol\\\";\\nimport \\\"./interfaces/ISwapInterfaces.sol\\\";\\n\\n/**\\n * @title ConvexMercyVault\\n * @author Drac\\n * @dev A yield vault designed to provide liquidity to Convex Finance, disposing $CVX staking rewards for a specified token\\n * When users deposit, collateral is locked for a 1 day epoch - rewards cannot be claimed until the epoch has passed\\n */\\n\\nstruct CurveSwapParams {\\n    address[11] route;\\n    uint256[5][5] swapParams;\\n    address[5] pools;\\n    uint16 sellSlippage;\\n}\\n\\ncontract ConvexMercyVault is ERC20, Ownable, ReentrancyGuard {\\n    using SafeERC20 for ERC20;\\n    using SafeERC20 for IERC20;\\n\\n    CurveSwapParams curveSwap;\\n\\n    bool private swapParamsSet;\\n    bool private coreAddressesSet;\\n\\n    address private feeReceiver;\\n    address private wrappedNative;\\n    address private uniswapRouter;\\n    address private curveRouter;\\n    address private immutable supplyToken;\\n    address private immutable disposeToken;\\n    address private immutable accrualToken;\\n    address private immutable targetStakingPool;\\n\\n    bool public vaultActive;\\n    bool public harvestPaused;\\n    bool public emergencyWithdraw;\\n    uint8 private immutable _decimals;\\n    uint16 private buySlippage;\\n    uint16 private vaultFee = 1000;\\n    uint16 private callerFee = 100;\\n    uint16 private constant DENOMINATOR = 10_000;\\n    uint256 private constant MAX_INT = 2 ** 256 - 1;\\n    uint256 public constant duration = 1 days;\\n\\n    uint256 public finishAt;\\n    uint256 public updatedAt;\\n    uint256 public rewardRate;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) public entryTime;\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    /// @dev emits when owner adds additional rewards to the staking pool\\n\\n    event BoostRewards(address indexed from, uint256 indexed amount);\\n\\n    /// @dev emits when owner sets core addresses for swapping function\\n\\n    event Deposit(address indexed from, uint256 indexed amount);\\n\\n    /// @dev emits when a user triggers an emergency withdrawal only after admin has triggered emergency withdrawals\\n\\n    event EmergencyWithdraw(address indexed to, uint256 indexed amount);\\n\\n    /// @dev emits when the harvest function is paused due to unforseen issues in the swap\\n\\n    event HarvestPaused(uint256 indexed timestamp);\\n\\n    /// @dev emits when a new vault fee reciever address is set\\n\\n    event NewRewardPeriod(uint256 indexed finishes, uint256 indexed rewardAmount, uint256 indexed rewardRate);\\n\\n    /// @dev emits when vault fees are altered by the owner\\n\\n    event NewVaultFeesSet(uint16 indexed newVaultFee, uint16 indexed newCallerFee);\\n\\n    /// @dev emits when a user deposits and mints shares of the vault\\n\\n    event SharesMinted(address indexed to, uint256 indexed amount);\\n\\n    /// @dev emits when a user withdraws liquidity from the vault, burning their shares of the vault\\n\\n    event SharesBurned(address indexed from, uint256 indexed amount);\\n\\n    /// @dev emits when owner sets swap params for the curve trade route\\n\\n    event SwapParamsSet(address[11] curveDisposalRoute, uint256[5][5] curveDisposalSwapParams, uint16 curveDisposalSellSlippage, uint16 uniswapBuySlippage);\\n\\n    /// @dev emits when a user claims rewards\\n\\n    event RewardsClaimed(address indexed to, uint256 indexed amount);\\n\\n    /// @dev emits when the _executeSwap function is executed, harvesting rewards for the next reward period\\n\\n    event RewardsAccrued(uint256 indexed rewardsAccrued);\\n\\n    /// @dev emits when a user withdraws liquidity from the vault\\n\\n    event Withdrawal(address indexed to, uint256 indexed amount);\\n\\n    error CoreAddressesNotYetSet();\\n    error CoreAddressesCannotBeZeroAddress();\\n    error InsufficientBalance();\\n    error MinimumTenureNotMet();\\n    error UnauthorisedAssetTransfer();\\n    error SwapParamsNotYetSet();\\n    error ValueExceedsMaximum();\\n    error VaultNotActive();\\n\\n    constructor(\\n        string memory _vaultTokenName,\\n        string memory _vaultSymbol,\\n        address _userSuppliesThisToken,\\n        address _targetStakingPoolAddressToDepositTheSupplyToken,\\n        address _vaultEarnsAndDisposesThisToken,\\n        address _vaultBuysThisTokenAndDistributesAsReward\\n    ) ERC20(_vaultTokenName, _vaultSymbol) {\\n        supplyToken = _userSuppliesThisToken;\\n        disposeToken = _vaultEarnsAndDisposesThisToken;\\n        accrualToken = _vaultBuysThisTokenAndDistributesAsReward;\\n        targetStakingPool = _targetStakingPoolAddressToDepositTheSupplyToken;\\n        _decimals = ERC20(supplyToken).decimals();\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        updatedAt = lastTimeRewardApplicable();\\n\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n\\n        if (finishAt < block.timestamp && !harvestPaused) {\\n            uint256 proceedsLessFee = _executeSwap();\\n            _notifyRewardAmount(proceedsLessFee);\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @dev This function allows the admin to withdraw from the staking pool in an emergency.\\n     * It is only callable by the owner of the contract.\\n     * The function will withdraw staked liquidity tokens to the contract\\n     * The emergencyWithdraw variable is set to true, userEmergencyWithdraw() function now callable\\n     * vaultActive is set to false to prevent further deposits once emergency withdraw has been called\\n     * Emits an AdminEmergencyWithdraw event upon successful withdrawal.\\n     */\\n\\n    function adminEmergencyWithdraw() external onlyOwner {\\n        ICVXRewardPool(targetStakingPool).withdrawAll(true);\\n        emergencyWithdraw = true;\\n        vaultActive = false;\\n    }\\n\\n    /**\\n     * @dev Boosts the rewards by transferring a specified amount of the accrual token to the vault.\\n     * @param amount The amount of the accrual token to be transferred and used for boosting the rewards.\\n     * Emits the BoostRewards event to notify listeners about the boosted rewards.\\n     */\\n\\n    function boostRewards(uint256 amount) external onlyOwner {\\n        IERC20(accrualToken).safeTransferFrom(msg.sender, address(this), amount);\\n        _notifyRewardAmount(amount);\\n        emit BoostRewards(msg.sender, amount);\\n    }\\n\\n    /** @dev this function claims pending rewards from the vault for the depositor\\n     * It is non-reentrant for safety against re-entrancy attacks.\\n     * Rewards may only be claimed once a minimum duration has passed from the time of deposit.\\n     * Emits an RewardsClaimed event upon successful claim\\n     */\\n\\n    function claim() external nonReentrant updateReward(msg.sender) {\\n        if (entryTime[msg.sender] + duration > block.timestamp) {\\n            revert MinimumTenureNotMet();\\n        }\\n\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            IERC20(accrualToken).safeTransfer(msg.sender, reward);\\n            emit RewardsClaimed(msg.sender, reward);\\n        }\\n    }\\n\\n    /**\\n     * @dev This function allows users to deposit tokens into the vault.\\n     * @param shares The amount of the supply token to deposit to the vault\\n     * To be issued as shares in the vault\\n     * It is non-reentrant for safety against re-entrancy attacks.\\n     * Emits a Deposit event upon successful deposit.\\n     */\\n\\n    function deposit(uint256 shares) external nonReentrant {\\n        if (!vaultActive) {\\n            revert VaultNotActive();\\n        }\\n\\n        if (totalSupply() == 0) {\\n            finishAt = block.timestamp + duration;\\n        } else {\\n            update();\\n        }\\n\\n        IERC20(supplyToken).safeTransferFrom(msg.sender, address(this), shares);\\n\\n        emit Deposit(msg.sender, shares);\\n\\n        ICVXRewardPool(targetStakingPool).stake(shares);\\n        entryTime[msg.sender] = block.timestamp;\\n\\n        _mint(msg.sender, shares);\\n        emit SharesMinted(msg.sender, shares);\\n    }\\n\\n    /**\\n     * @dev Recovers ERC20 tokens sent to this contract, excluding supplyToken.\\n     * @param tokenAddress The address of the ERC20 token to recover.\\n     * @param tokenAmount The amount of tokens to recover.\\n     * Emits a Recover event upon successful recovery of ERC20s\\n     */\\n\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        if (tokenAddress == address(targetStakingPool)) {\\n            revert UnauthorisedAssetTransfer();\\n        }\\n\\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n    }\\n\\n    /**\\n     * @dev This function allows the owner to alter the vault state\\n     * It is only callable by the owner of the contract.\\n     * reverts will trigger in the event swapParams or coreAddresses have not been set\\n     * deposits will be enabled when vaultActive == true\\n     * deposits will be disabled when vaultActive == false\\n     * @param state takes a boolean to set either of the above states\\n     */\\n\\n    function initialiseVault(bool state) external onlyOwner {\\n        if (!swapParamsSet) {\\n            revert SwapParamsNotYetSet();\\n        }\\n\\n        if (!coreAddressesSet) {\\n            revert CoreAddressesNotYetSet();\\n        }\\n\\n        vaultActive = state;\\n    }\\n\\n    /**\\n     * @dev Pauses or unpauses the harvest functionality.\\n     * @param state The new state of the harvest functionality (true for paused, false for unpaused).\\n     * Emits the HarvestPaused event to notify listeners about the change in harvest pause state.\\n     */\\n\\n    function pauseHarvest(bool state) external onlyOwner {\\n        harvestPaused = state;\\n        emit HarvestPaused(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev sets addresses for interface interactions during the _executeSwap function\\n     * Can be updated in future if addresses or liquidity is migrated\\n     * @param _wrappedNative  the wrapped native gas token for the network the vault is deployed on\\n     * @param _curveRouter the curve router address for the network the vault is deployed on\\n     * @param _uniswapRouter  the uniswap router address for the network the vault is deployed on\\n     * @param _feeReceiver the address for fees from the vault to be sent to\\n     * Emits the CoreAddressesSet event to notify listeners the core addresses have been set\\n     */\\n\\n    function setCoreAddresses(address _wrappedNative, address _curveRouter, address _uniswapRouter, address _feeReceiver) external onlyOwner {\\n        if (_wrappedNative == address(0) || _curveRouter == address(0) || _uniswapRouter == address(0) || _feeReceiver == address(0)) {\\n            revert CoreAddressesCannotBeZeroAddress();\\n        }\\n\\n        wrappedNative = _wrappedNative;\\n        curveRouter = _curveRouter;\\n        uniswapRouter = _uniswapRouter;\\n        feeReceiver = _feeReceiver;\\n        coreAddressesSet = true;\\n        _batchInitialApprovals();\\n    }\\n\\n    /**\\n     * @dev Sets the vault fees for the harvest functionality.\\n     * @param newVaultFee The new vault fee percentage to be set.\\n     * @param newCallerFee The new caller fee percentage to be set.\\n     * if the combined values exceed the DENOMINATOR, the call is reverted to safeguard against misconfiguration\\n     * Emits the NewVaultFeesSet event to notify listeners about the updated vault fees.\\n     */\\n\\n    function setFees(uint16 newVaultFee, uint16 newCallerFee) external onlyOwner {\\n        if (newVaultFee + newCallerFee > DENOMINATOR) {\\n            revert ValueExceedsMaximum();\\n        }\\n        vaultFee = newVaultFee;\\n        callerFee = newCallerFee;\\n        emit NewVaultFeesSet(newVaultFee, newCallerFee);\\n    }\\n\\n    /**\\n     * @dev Sets the address of the fee receiver.\\n     * @param newFeeReceiver The new address to be set as the fee receiver.\\n     * Emits the NewFeeReceiverSet event to notify listeners about the updated fee receiver address.\\n     */\\n\\n    function setFeeReciever(address newFeeReceiver) external onlyOwner {\\n        feeReceiver = newFeeReceiver;\\n    }\\n\\n    /**\\n     * @dev Sets the swap parameters for the curve disposal and Uniswap buy operations.\\n     * @param curveDisposalRoute The array of addresses representing the swap route for the curve disposal.\\n     * @param curveDisposalSwapParams The array of arrays representing the swap parameters for the curve disposal.\\n     * @param curveDisposalPools The array of addresses representing the pools for the curve disposal.\\n     * @param curveDisposalSellSlippage The sell slippage percentage for the curve disposal.\\n     * @param uniswapBuySlippage The buy slippage percentage for the Uniswap buy operation.\\n     * It is only callable by the owner of the contract.\\n     * Emits the SwapParamsSet event to notify listeners about the updated swap parameters.\\n     */\\n\\n    function setSwapParams(\\n        address[11] calldata curveDisposalRoute,\\n        uint256[5][5] calldata curveDisposalSwapParams,\\n        address[5] calldata curveDisposalPools,\\n        uint16 curveDisposalSellSlippage,\\n        uint16 uniswapBuySlippage\\n    ) external onlyOwner {\\n        curveSwap.route = curveDisposalRoute;\\n        curveSwap.swapParams = curveDisposalSwapParams;\\n        curveSwap.pools = curveDisposalPools;\\n        curveSwap.sellSlippage = curveDisposalSellSlippage;\\n        buySlippage = uniswapBuySlippage;\\n        swapParamsSet = true;\\n        emit SwapParamsSet(curveDisposalRoute, curveDisposalSwapParams, curveDisposalSellSlippage, uniswapBuySlippage);\\n    }\\n\\n    /**\\n     * @dev This function allows users to withdraw their tokens from the vault.\\n     * @param shares The amount of shares to withdraw from the vault.\\n     * It is non-reentrant for safety against re-entrancy attacks.\\n     * Rewards may only be claimed once a minimum duration has passed from the time of deposit.\\n     * maxRedemption() function checks to ensure withdrawal amount is able to be withdrawn from liquidity pool\\n     * If withdrawal amount exceeds cap, only the cap is withdrawn\\n     * Emits a Withdrawal event upon successful withdrawal.\\n     */\\n\\n    function withdraw(uint256 shares) external nonReentrant updateReward(msg.sender) {\\n        if (shares > balanceOf(msg.sender)) revert InsufficientBalance();\\n        if (emergencyWithdraw) {\\n            _userEmergencyWithdraw();\\n            return;\\n        }\\n        if (entryTime[msg.sender] + duration > block.timestamp) revert MinimumTenureNotMet();\\n\\n        _burn(msg.sender, shares);\\n        emit SharesBurned(msg.sender, shares);\\n\\n        ICVXRewardPool(targetStakingPool).withdraw(shares, false);\\n\\n        IERC20(supplyToken).safeTransfer(msg.sender, shares);\\n\\n        emit Withdrawal(msg.sender, shares);\\n    }\\n\\n    /**\\n     * @dev see ERC20-decimals()\\n     * Function overrides default ERC20 decimals function hardcoded value of 18 to return declared decimal value\\n     */\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev Updates the reward for the caller and performs necessary calculations.\\n     * This function is meant to be called by the participants to update their rewards.\\n     * Emits the RewardUpdated event to notify listeners about the updated reward.\\n     */\\n\\n    function update() internal updateReward(msg.sender) {}\\n\\n    function earned(address account) public view returns (uint) {\\n        return ((balanceOf(account) * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) + rewards[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint) {\\n        return _min(finishAt, block.timestamp);\\n    }\\n\\n    function rewardPerToken() public view returns (uint) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return rewardPerTokenStored + (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) / totalSupply();\\n    }\\n\\n    function _disposeRewardsViaCurve() internal {\\n        uint256 inAmount = IERC20(disposeToken).balanceOf(address(this));\\n        uint256 amountOut = ICurveRouterV1(curveRouter).get_dy(curveSwap.route, curveSwap.swapParams, inAmount, curveSwap.pools);\\n        uint256 amountOutMin = (amountOut * (DENOMINATOR - curveSwap.sellSlippage)) / DENOMINATOR;\\n        ICurveRouterV1(curveRouter).exchange(curveSwap.route, curveSwap.swapParams, inAmount, amountOutMin, curveSwap.pools, address(this));\\n    }\\n\\n    function _batchInitialApprovals() internal {\\n        IERC20(supplyToken).safeApprove(targetStakingPool, MAX_INT);\\n        IERC20(disposeToken).safeApprove(curveRouter, MAX_INT);\\n        IERC20(wrappedNative).safeApprove(uniswapRouter, MAX_INT);\\n    }\\n\\n    function _buyViaUniswap(uint256 inAmount) internal returns (uint256 proceeds) {\\n        address[] memory swapPath = new address[](2);\\n        swapPath[0] = wrappedNative;\\n        swapPath[1] = accrualToken;\\n        uint256[] memory amountOut = IUniswapV2Router02(uniswapRouter).getAmountsOut(inAmount, swapPath);\\n        uint256 amountOutMin = (amountOut[0] * (DENOMINATOR - buySlippage)) / DENOMINATOR;\\n        uint256[] memory outputAmounts = IUniswapV2Router02(uniswapRouter).swapExactTokensForTokens(inAmount, amountOutMin, swapPath, address(this), (block.timestamp + 120));\\n        return (outputAmounts[swapPath.length - 1]);\\n    }\\n\\n    function _executeSwap() internal returns (uint256 accruedRewards) {\\n        _harvestRewards();\\n        _disposeRewardsViaCurve();\\n        uint256 proceedsLessFee = _takeVaultFee(tx.origin);\\n        accruedRewards = _buyViaUniswap(proceedsLessFee);\\n        emit RewardsAccrued(accruedRewards);\\n        return (accruedRewards);\\n    }\\n\\n    function _harvestRewards() internal returns (uint256 accruedRewards) {\\n        ICVXRewardPool(targetStakingPool).getReward(address(this), true, false);\\n        return (accruedRewards = IERC20(disposeToken).balanceOf(address(this)));\\n    }\\n\\n    function _min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function _notifyRewardAmount(uint256 amount) internal {\\n        if (block.timestamp > finishAt) {\\n            rewardRate = amount / duration;\\n        } else {\\n            uint256 remainingTime = finishAt - block.timestamp;\\n            uint256 leftoverTokens = remainingTime * rewardRate;\\n            rewardRate = (amount + leftoverTokens) / duration;\\n        }\\n\\n        updatedAt = block.timestamp;\\n        finishAt = block.timestamp + duration;\\n        emit NewRewardPeriod((block.timestamp + duration), amount, rewardRate);\\n    }\\n\\n    function _takeVaultFee(address caller) internal returns (uint256 proceedsLessFee) {\\n        uint256 proceedsBalance;\\n        proceedsBalance = IERC20(wrappedNative).balanceOf(address(this));\\n        uint256 vaultFeePayable = (proceedsBalance * vaultFee) / DENOMINATOR;\\n        IERC20(wrappedNative).safeTransfer(feeReceiver, vaultFeePayable);\\n        proceedsBalance = IERC20(wrappedNative).balanceOf(address(this));\\n        uint256 callerFeePayable = (proceedsBalance * callerFee) / DENOMINATOR;\\n        IERC20(wrappedNative).safeTransfer(caller, callerFeePayable);\\n        proceedsLessFee = IERC20(wrappedNative).balanceOf(address(this));\\n        return (proceedsLessFee);\\n    }\\n\\n    function _userEmergencyWithdraw() internal {\\n        uint256 shares = balanceOf(msg.sender);\\n        _burn(msg.sender, shares);\\n\\n        ERC20(supplyToken).safeTransfer(msg.sender, shares);\\n\\n        emit EmergencyWithdraw(msg.sender, shares);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ConvexMercyVault/interfaces/ICVXRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MercyDAO\\npragma solidity ^0.8.0;\\n\\ninterface ICVXRewardPool {\\n    // View Functions\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    // External Functions\\n    function addExtraReward(address _reward) external;\\n\\n    function clearExtraRewards() external;\\n\\n    function stake(uint256 _amount) external;\\n\\n    function stakeAll() external;\\n\\n    function stakeFor(address _for, uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount, bool claim) external;\\n\\n    function withdrawAll(bool claim) external;\\n\\n    function getReward(address _account, bool _claimExtras, bool _stake) external;\\n\\n    function getReward(bool _stake) external;\\n\\n    function donate(uint256 _amount) external returns (bool);\\n\\n    function queueNewRewards(uint256 _rewards) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ConvexMercyVault/interfaces/ISwapInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICurveRouterV1 {\\n    function get_dy(address[11] calldata _route, uint256[5][5] calldata _swap_params, uint256 _amount, address[5] calldata _pools) external view returns (uint256);\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _expected,\\n        address[5] calldata _pools,\\n        address _receiver\\n    ) external payable returns (uint256);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory);\\n\\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] memory path, address to, uint deadline) external returns (uint[] memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_vaultTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_vaultSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_userSuppliesThisToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetStakingPoolAddressToDepositTheSupplyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultEarnsAndDisposesThisToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultBuysThisTokenAndDistributesAsReward\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CoreAddressesCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CoreAddressesNotYetSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumTenureNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapParamsNotYetSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorisedAssetTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueExceedsMaximum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotActive\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BoostRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"HarvestPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"finishes\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"NewRewardPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newVaultFee\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newCallerFee\",\"type\":\"uint16\"}],\"name\":\"NewVaultFeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardsAccrued\",\"type\":\"uint256\"}],\"name\":\"RewardsAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SharesBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SharesMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[11]\",\"name\":\"curveDisposalRoute\",\"type\":\"address[11]\"},{\"indexed\":false,\"internalType\":\"uint256[5][5]\",\"name\":\"curveDisposalSwapParams\",\"type\":\"uint256[5][5]\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"curveDisposalSellSlippage\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"uniswapBuySlippage\",\"type\":\"uint16\"}],\"name\":\"SwapParamsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"boostRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"initialiseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"pauseHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedNative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_curveRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setCoreAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReciever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newVaultFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newCallerFee\",\"type\":\"uint16\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[11]\",\"name\":\"curveDisposalRoute\",\"type\":\"address[11]\"},{\"internalType\":\"uint256[5][5]\",\"name\":\"curveDisposalSwapParams\",\"type\":\"uint256[5][5]\"},{\"internalType\":\"address[5]\",\"name\":\"curveDisposalPools\",\"type\":\"address[5]\"},{\"internalType\":\"uint16\",\"name\":\"curveDisposalSellSlippage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"uniswapBuySlippage\",\"type\":\"uint16\"}],\"name\":\"setSwapParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConvexMercyVault", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000004e3fbd56cd56c3e72c1403e103b45db9da5b9d2b000000000000000000000000cf50b810e57ac33b91dcf525c6ddd9881b13933200000000000000000000000062b9c7356a2dc64a1969e19c23e4f579f9810aa70000000000000000000000004d786f4f99197be30d3975a9847a262fc3141bc800000000000000000000000000000000000000000000000000000000000000164d657263795661756c742d4356582d5374616b696e670000000000000000000000000000000000000000000000000000000000000000000000000000000000064d562d4356580000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a7b4c2fa2e8124d55689d8947ea17407b79b66aa521e55d6b1262110e266a2f2"}