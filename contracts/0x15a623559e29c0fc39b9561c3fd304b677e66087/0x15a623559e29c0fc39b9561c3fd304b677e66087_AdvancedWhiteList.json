{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"AdvancedWhiteList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) protocol V1 for NFT. WhitList Storage\\npragma solidity 0.8.13;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"IAdvancedWhiteList.sol\\\";\\nimport \\\"LibEnvelopTypes.sol\\\";\\n//import \\\"IERC721Mintable.sol\\\";\\n\\ncontract AdvancedWhiteList is Ownable, IAdvancedWhiteList {\\n\\n    \\n    mapping(address => ETypes.WhiteListItem) internal whiteList;\\n    mapping(address => bool) internal blackList;\\n    mapping(address => ETypes.Rules) internal rulesChecker;\\n    ETypes.Asset[] public whiteListedArray;\\n    ETypes.Asset[] public blackListedArray;\\n\\n    /////////////////////////////////////////////////////////////////////\\n    //                    Admin functions                              //\\n    /////////////////////////////////////////////////////////////////////\\n    function setWLItem(ETypes.Asset calldata _asset, ETypes.WhiteListItem calldata _assetItem) \\n        external onlyOwner \\n    {\\n        require(_assetItem.transferFeeModel != address(0), 'Cant be zero, use default instead');\\n        whiteList[_asset.contractAddress] = _assetItem;\\n        bool alreadyExist;\\n        for (uint256 i = 0; i < whiteListedArray.length; i ++) {\\n            if (whiteListedArray[i].contractAddress == _asset.contractAddress){\\n                alreadyExist = true;\\n                break;\\n            }\\n        }\\n        if (!alreadyExist) {\\n               whiteListedArray.push(_asset); \\n        }\\n        emit WhiteListItemChanged(\\n            _asset.contractAddress, \\n            _assetItem.enabledForFee, \\n            _assetItem.enabledForCollateral, \\n            _assetItem.enabledRemoveFromCollateral,\\n            _assetItem.transferFeeModel\\n        );\\n    }\\n\\n    function removeWLItem(ETypes.Asset calldata _asset) external onlyOwner {\\n        uint256 deletedIndex;\\n        for (uint256 i = 0; i < whiteListedArray.length; i ++) {\\n            if (whiteListedArray[i].contractAddress == _asset.contractAddress){\\n                deletedIndex = i;\\n                break;\\n            }\\n        }\\n        // Check that deleting item is not last array member\\n        // because in solidity we can remove only last item from array\\n        if (deletedIndex != whiteListedArray.length - 1) {\\n            // just replace deleted item with last item\\n            whiteListedArray[deletedIndex] = whiteListedArray[whiteListedArray.length - 1];\\n        } \\n        whiteListedArray.pop();\\n        delete whiteList[_asset.contractAddress];\\n        emit WhiteListItemChanged(\\n            _asset.contractAddress, \\n            false, false, false, address(0)\\n        );\\n    }\\n\\n    function setBLItem(ETypes.Asset calldata _asset, bool _isBlackListed) external onlyOwner {\\n        blackList[_asset.contractAddress] = _isBlackListed;\\n        if (_isBlackListed) {\\n            for (uint256 i = 0; i < blackListedArray.length; i ++){\\n                if (blackListedArray[i].contractAddress == _asset.contractAddress) {\\n                    return;\\n                }\\n            }\\n            // There is no this address in array so  just add it\\n            blackListedArray.push(_asset);\\n        } else {\\n            uint256 deletedIndex;\\n            for (uint256 i = 0; i < blackListedArray.length; i ++){\\n                if (blackListedArray[i].contractAddress == _asset.contractAddress) {\\n                    deletedIndex = i;\\n                    break;\\n                }\\n            }\\n            // Check that deleting item is not last array member\\n            // because in solidity we can remove only last item from array\\n            if (deletedIndex != blackListedArray.length - 1) {\\n                // just replace deleted item with last item\\n                blackListedArray[deletedIndex] = blackListedArray[blackListedArray.length - 1];\\n            } \\n            blackListedArray.pop();\\n            delete blackList[_asset.contractAddress];\\n\\n        }\\n        emit BlackListItemChanged(_asset.contractAddress, _isBlackListed);\\n    }\\n\\n    function setRules(address _asset, bytes2 _only, bytes2 _disabled) public onlyOwner {\\n        rulesChecker[_asset].onlythis = _only;\\n        rulesChecker[_asset].disabled = _disabled;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////\\n    \\n    function getWLItem(address _asset) external view returns (ETypes.WhiteListItem memory) {\\n        return whiteList[_asset];\\n    }\\n\\n    function getWLItemCount() external view returns (uint256) {\\n        return whiteListedArray.length;\\n    }\\n\\n    function getWLAddressByIndex(uint256 _index) external view returns (ETypes.Asset memory) {\\n        return whiteListedArray[_index];\\n    }\\n\\n    function getWLAddresses() external view returns (ETypes.Asset[] memory) {\\n        return whiteListedArray;\\n    }\\n\\n     \\n    function getBLItem(address _asset) external view returns (bool) {\\n        return blackList[_asset];\\n    }\\n\\n    function getBLItemCount() external view returns (uint256) {\\n        return blackListedArray.length;\\n    }\\n\\n    function getBLAddressByIndex(uint256 _index) external view returns (ETypes.Asset memory) {\\n        return blackListedArray[_index];\\n    }\\n\\n    function getBLAddresses() external view returns (ETypes.Asset[] memory) {\\n        return blackListedArray;\\n    }\\n\\n    function enabledForCollateral(address _asset) external view returns (bool) {\\n        return whiteList[_asset].enabledForCollateral;\\n    }\\n\\n    function enabledForFee(address _asset) external view returns (bool) {\\n        return whiteList[_asset].enabledForFee;\\n    }\\n\\n    function enabledRemoveFromCollateral(address _asset) external view returns (bool) {\\n        return whiteList[_asset].enabledRemoveFromCollateral;\\n    }\\n    \\n    function rulesEnabled(address _asset, bytes2 _rules) external view returns (bool) {\\n\\n        if (rulesChecker[_asset].onlythis != 0x0000) {\\n            return rulesChecker[_asset].onlythis == _rules;\\n        }\\n\\n        if (rulesChecker[_asset].disabled != 0x0000) {\\n            return (rulesChecker[_asset].disabled & _rules) == 0x0000;\\n        }\\n        return true;\\n    }\\n\\n    function validateRules(address _asset, bytes2 _rules) external view returns (bytes2) {\\n        if (rulesChecker[_asset].onlythis != 0x0000) {\\n            return rulesChecker[_asset].onlythis;\\n        }\\n\\n        if (rulesChecker[_asset].disabled != 0x0000) {\\n            return (~rulesChecker[_asset].disabled) & _rules;\\n        }\\n        return _rules;\\n    }\\n\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"IAdvancedWhiteList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n//import \\\"IERC721Enumerable.sol\\\";\\nimport \\\"LibEnvelopTypes.sol\\\";\\n\\ninterface IAdvancedWhiteList  {\\n\\n\\n    event WhiteListItemChanged(\\n        address indexed asset,\\n        bool enabledForFee,\\n        bool enabledForCollateral,\\n        bool enabledRemoveFromCollateral,\\n        address transferFeeModel\\n    );\\n    event BlackListItemChanged(\\n        address indexed asset,\\n        bool isBlackListed\\n    );\\n    function getWLItem(address _asset) external view returns (ETypes.WhiteListItem memory);\\n    function getWLItemCount() external view returns (uint256);\\n    function getBLItem(address _asset) external view returns (bool);\\n    function getBLItemCount() external view returns (uint256);\\n    function enabledForCollateral(address _asset) external view returns (bool);\\n    function enabledForFee(address _asset) external view returns (bool);\\n    function enabledRemoveFromCollateral(address _asset) external view returns (bool);\\n    function rulesEnabled(address _asset, bytes2 _rules) external view returns (bool);\\n    function validateRules(address _asset, bytes2 _rules) external view returns (bytes2);\\n}\"\r\n    },\r\n    \"IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"LibEnvelopTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) protocol V1 for NFT. \\npragma solidity 0.8.13;\\n\\nlibrary ETypes {\\n\\n    enum AssetType {EMPTY, NATIVE, ERC20, ERC721, ERC1155, FUTURE1, FUTURE2, FUTURE3}\\n    \\n    struct Asset {\\n        AssetType assetType;\\n        address contractAddress;\\n    }\\n\\n    struct AssetItem {\\n        Asset asset;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    struct NFTItem {\\n        address contractAddress;\\n        uint256 tokenId;   \\n    }\\n\\n    struct Fee {\\n        bytes1 feeType;\\n        uint256 param;\\n        address token; \\n    }\\n\\n    struct Lock {\\n        bytes1 lockType;\\n        uint256 param; \\n    }\\n\\n    struct Royalty {\\n        address beneficiary;\\n        uint16 percent;\\n    }\\n\\n    struct WNFT {\\n        AssetItem inAsset;\\n        AssetItem[] collateral;\\n        address unWrapDestination;\\n        Fee[] fees;\\n        Lock[] locks;\\n        Royalty[] royalties;\\n        bytes2 rules;\\n\\n    }\\n\\n    struct INData {\\n        AssetItem inAsset;\\n        address unWrapDestination;\\n        Fee[] fees;\\n        Lock[] locks;\\n        Royalty[] royalties;\\n        AssetType outType;\\n        uint256 outBalance;      //0- for 721 and any amount for 1155\\n        bytes2 rules;\\n\\n    }\\n\\n    struct WhiteListItem {\\n        bool enabledForFee;\\n        bool enabledForCollateral;\\n        bool enabledRemoveFromCollateral;\\n        address transferFeeModel;\\n    }\\n\\n    struct Rules {\\n        bytes2 onlythis;\\n        bytes2 disabled;\\n    }\\n\\n}\"\r\n    },\r\n    \"IERC721Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"IERC721Metadata.sol\\\";\\n\\ninterface IERC721Mintable is  IERC721Metadata {\\n     function mint(address _to, uint256 _tokenId) external;\\n     function burn(uint256 _tokenId) external;\\n     function exists(uint256 _tokenId) external view returns(bool);\\n}\"\r\n    },\r\n    \"IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"AdvancedWhiteList.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBlackListed\",\"type\":\"bool\"}],\"name\":\"BlackListItemChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabledForFee\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabledForCollateral\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabledRemoveFromCollateral\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transferFeeModel\",\"type\":\"address\"}],\"name\":\"WhiteListItemChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blackListedArray\",\"outputs\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"enabledForCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"enabledForFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"enabledRemoveFromCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBLAddressByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBLAddresses\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getBLItem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBLItemCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getWLAddressByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWLAddresses\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getWLItem\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabledForFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledForCollateral\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledRemoveFromCollateral\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"transferFeeModel\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.WhiteListItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWLItemCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"_asset\",\"type\":\"tuple\"}],\"name\":\"removeWLItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"_rules\",\"type\":\"bytes2\"}],\"name\":\"rulesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"_asset\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_isBlackListed\",\"type\":\"bool\"}],\"name\":\"setBLItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"_only\",\"type\":\"bytes2\"},{\"internalType\":\"bytes2\",\"name\":\"_disabled\",\"type\":\"bytes2\"}],\"name\":\"setRules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"_asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabledForFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledForCollateral\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabledRemoveFromCollateral\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"transferFeeModel\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.WhiteListItem\",\"name\":\"_assetItem\",\"type\":\"tuple\"}],\"name\":\"setWLItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"_rules\",\"type\":\"bytes2\"}],\"name\":\"validateRules\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"\",\"type\":\"bytes2\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whiteListedArray\",\"outputs\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AdvancedWhiteList", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}