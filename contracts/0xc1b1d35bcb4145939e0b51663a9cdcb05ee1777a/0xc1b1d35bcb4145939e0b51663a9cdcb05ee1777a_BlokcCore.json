{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/BlokcCore/BlokcCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport {IUniswapV2Router02} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport {IUniswapV2Pair} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport {IUniswapV2Factory} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\n\\nimport {GardenerBlokc} from \\\"./GardenerBlokc.sol\\\";\\nimport {GardenBlokc} from \\\"./GardenBlokc.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ncontract BlokcCore is GardenerBlokc, GardenBlokc {\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/BlokcCore/GardenBlokc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\n// Import Uniswap interfaces directly\\nimport {IUniswapV2Router02} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport {IUniswapV2Pair} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport {IUniswapV2Factory} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\n// import \\\"forge-std/console.sol\\\";\\n\\n\\n\\nimport {IGardenBlokc, Garden, TokenAmount} from \\\"./interfaces/IGardenBlokc.sol\\\";\\nimport {Gardener, GardenersGardenData, GardenerStrategy} from \\\"./interfaces/IGardenerBlokc.sol\\\";\\nimport {GardenerBlokc} from \\\"./GardenerBlokc.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n\\nabstract contract GardenBlokc is GardenerBlokc, IGardenBlokc {\\n    mapping(address => Garden[]) public gardens;\\n\\n    function getGardensByAddress(\\n        address _userAddress\\n    ) external view returns (Garden[] memory) {\\n        return gardens[_userAddress];\\n    }\\n\\n\\n\\nfunction createGarden(\\n    uint256 _gardenerId,\\n    uint256 _amount,\\n    string memory _gardenName\\n  \\n) external {\\n    require(isGardenerRegistered[idToGardener[_gardenerId].gardenerAddress], \\\"Gardener is not registered\\\");\\n    require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n    uint256 gardenId = gardens[msg.sender].length;\\n    _assignGardener(_gardenerId, gardenId, msg.sender);\\n\\n    Gardener storage gardener = idToGardener[_gardenerId];\\n    GardenerStrategy memory selectedStrategy = selectStrategy(gardener, _amount);\\n\\n    Garden storage garden = gardens[msg.sender].push();\\n    garden.id = gardenId;\\n    garden.gardenName = _gardenName;\\n    garden.owner = msg.sender; // User is the owner of the garden\\n    garden.gardenerId = _gardenerId;    \\n    garden.gardenerAddress = idToGardener[_gardenerId].gardenerAddress;\\n    garden.gardenerUsername = idToGardener[_gardenerId].username;\\n    // garden.composition = selectedStrategy.token;\\n    garden.createdAt = block.timestamp;\\n        TokenAmount storage tokenAmount = garden.composition.push();\\n        tokenAmount.token = selectedStrategy.cryptos;\\n        tokenAmount.amount = selectedStrategy.percentages;\\n\\n     \\n    // address usdtToken = 0xda06447AD1dEA10D07c1c2E6C7853d3cbb2bC35e;  // USDT token address\\n    // address uniswapRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Uniswap router address\\n    // address wethToken = IUniswapV2Router02(uniswapRouter).WETH();\\n\\n    // Swap USDT to ETH first\\n\\n    // Try to swap USDT to ETH using Uniswap\\n    // try IERC20(usdtToken).approve(uniswapRouter, _amount) and IUniswapV2Router02(uniswapRouter).swapExactTokensForETH(\\n    //     _amount,\\n    //     0,\\n    //     new address[](0),\\n    //     address(this),\\n    //     block.timestamp\\n    // ) {\\n    //     // Do nothing on success\\n    // } catch Error(string memory reason) {\\n    //     // Revert the transaction if there is an error\\n    //     revert(reason);\\n    // }\\n\\n    // Perform token swaps based on the strategy\\n    // for (uint256 i = 0; i < selectedStrategy.cryptos.length; i++) {\\n    //     address crypto = selectedStrategy.cryptos[i];\\n    //     uint8 percentage = selectedStrategy.percentages[i];\\n\\n    //     uint256 allocationAmount = (_amount * percentage) / 100;\\n\\n        // IUniswapV2Pair pair = IUniswapV2Pair(IUniswapV2Factory(IUniswapV2Router02(uniswapRouter).factory()).getPair(wethToken, crypto));\\n\\n        // require(address(pair) != address(0), \\\"Pair not found\\\");\\n\\n        // Try to swap ETH to 'crypto' and transfer tokens to user\\n        // try IERC20(wethToken).approve(uniswapRouter, allocationAmount) and IUniswapV2Router02(uniswapRouter).swapExactETHForTokens{value: allocationAmount}(\\n        //     0,\\n        //     new address[](0),\\n        //     msg.sender, // Transfer tokens to the user\\n        //     block.timestamp\\n        // ) {\\n        //     // Do nothing on success\\n        // } catch Error(string memory reason) {\\n        //     // Revert the transaction if there is an error\\n        //     revert(reason);\\n        // }\\n    }\\n\\n\\nfunction selectStrategy(Gardener storage gardener, uint256 _amount) internal view returns (GardenerStrategy memory) {\\n    for (uint256 i = 0; i < gardener.strategies.length; i++) {\\n        GardenerStrategy memory strategy = gardener.strategies[i];\\n        if (_amount >= strategy.minAmount && _amount <= strategy.maxAmount) {\\n            return strategy;\\n        }\\n    }\\n    \\n    // Return a default strategy or revert if none found\\n    revert(\\\"No matching strategy found\\\");\\n}\\n\\n\\n    function _assignGardener(\\n        uint256 _gardenerId,\\n        uint256 _gardenId,\\n        address _userAddress\\n    ) internal {\\n        Gardener storage gardener = idToGardener[_gardenerId];\\n        require(\\n            isGardenerRegistered[gardener.gardenerAddress],\\n            \\\"Gardener is not registered\\\"\\n        );\\n        GardenersGardenData[] storage gardenersGardens = gardener.gardens;\\n        for (uint256 i = 0; i < gardenersGardens.length; i++) {\\n            require(\\n                !(gardenersGardens[i].id == _gardenId &&\\n                    gardenersGardens[i].userAddress == _userAddress),\\n                \\\"Garden is already assigned to gardener\\\"\\n            );\\n        }\\n        GardenersGardenData storage newGarden = gardenersGardens.push();\\n        newGarden.id = _gardenId;\\n        newGarden.userAddress = _userAddress;\\n    }\\n\\n    function changeGardener(uint256 _gardenerId, uint256 _gardenId) external {\\n        _assignGardener(_gardenerId, _gardenId, msg.sender);\\n        Garden storage garden = gardens[msg.sender][_gardenId];\\n        garden.gardenerId = _gardenerId;\\n        garden.gardenerAddress = idToGardener[_gardenerId].gardenerAddress;\\n        garden.gardenerUsername = idToGardener[_gardenerId].username;\\n    }\\n\\n    function changeGardenComposition(\\n        uint256 _idGarden,\\n        address _userAddress,\\n        TokenAmount[] memory composition\\n    ) external {\\n        Garden storage garden = gardens[_userAddress][_idGarden];\\n        delete garden.composition;\\n        for (uint256 i = 0; i < composition.length; i++) {\\n            garden.composition.push(composition[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BlokcCore/GardenerBlokc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport {IGardenerBlokc, Gardener, GardenersGardenData, GardenerStrategy} from \\\"./interfaces/IGardenerBlokc.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract GardenerBlokc is Ownable, IGardenerBlokc {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private idGardeners;\\n\\n    mapping(uint256 => Gardener) internal idToGardener;\\n    mapping(address => uint256) public gardenerAddressToId;\\n    mapping(address => bool) public isGardenerRegistered;\\n    mapping(string => bool) public isStrategyCreated;\\n\\n    \\n\\n\\n    event StrategyCreated(address indexed gardener, uint256 strategyIndex);\\n\\n    function registerGardener(\\n        string memory _username,\\n        address _addressGardener\\n    ) external {\\n        require(\\n            !isGardenerRegistered[_addressGardener],\\n            \\\"Gardener is already registered\\\"\\n        );\\n        uint256 newId = idGardeners.current();\\n        idGardeners.increment();\\n        Gardener storage gardener = idToGardener[newId];\\n        gardener.id = newId;\\n        gardener.gardenerAddress = _addressGardener;\\n        gardener.username = _username;\\n        isGardenerRegistered[_addressGardener] = true;\\n        gardenerAddressToId[_addressGardener] = newId;\\n    }\\n\\n      function createStrategy(\\n        uint256 _minAmount,\\n        uint256 _maxAmount,\\n        string memory _strategyName,\\n        address[] memory _cryptos,\\n        uint8[] memory _percentages\\n    ) external {\\n        require(isGardenerRegistered[msg.sender], \\\"Gardener is not registered\\\");\\n        require(_minAmount > 0 && _maxAmount > _minAmount, \\\"Invalid min/max amounts\\\");\\n        require(_cryptos.length == _percentages.length, \\\"Arrays must have equal length\\\");\\n        \\n        uint8 totalPercentage;\\n\\n        for (uint256 i = 0; i < _cryptos.length; i++) {\\n            totalPercentage += _percentages[i];\\n        }\\n\\n        require(totalPercentage == 100, \\\"Total percentage must be 100\\\");\\n\\n        Gardener storage gardener = idToGardener[gardenerAddressToId[msg.sender]];\\n        gardener.strategies.push(\\n            GardenerStrategy({\\n                minAmount: _minAmount,\\n                maxAmount: _maxAmount,\\n                strategyName : _strategyName,\\n                cryptos: _cryptos,\\n                percentages: _percentages\\n            })\\n        );\\n    }\\n\\n\\n\\n\\n    function viewAllStrategiesForGardener(address _gardenerAddress)\\n        external\\n        view\\n        returns (GardenerStrategy[] memory)\\n    {\\n        require(isGardenerRegistered[_gardenerAddress], \\\"Gardener is not registered\\\");\\n        uint256 idGardener = gardenerAddressToId[_gardenerAddress];\\n        Gardener storage gardener = idToGardener[idGardener];\\n        return gardener.strategies;\\n    }\\n\\n    \\n   \\n    function getGardener(\\n        uint256 _gardenerId\\n    ) external view returns (Gardener memory) {\\n        require(_gardenerId < idGardeners.current(), \\\"Gardener doesn't exist\\\");\\n        Gardener memory gardener = idToGardener[_gardenerId];\\n        return gardener;\\n    }\\n\\n    function getAllGardeners() external view returns (Gardener[] memory) {\\n        uint256 totalGardeners = idGardeners.current();\\n        Gardener[] memory allGardeners = new Gardener[](totalGardeners);\\n        for (uint256 i = 0; i < totalGardeners; i++) {\\n            allGardeners[i] = idToGardener[i];\\n        }\\n        return allGardeners;\\n    }\\n\\n\\n    function getGardensForGardener()\\n        external\\n        view\\n        returns (GardenersGardenData[] memory gardens)\\n    {\\n        require(isGardenerRegistered[msg.sender], \\\"Gardener is not registered\\\");\\n        uint256 idGardener = gardenerAddressToId[msg.sender];\\n        Gardener memory gardener = idToGardener[idGardener];\\n        return gardener.gardens;\\n    }\\n\\n\\n    function getIdGardener() external view returns (uint256 id) {\\n        require(isGardenerRegistered[msg.sender], \\\"Gardener is not registered\\\");\\n        uint256 idGardener = gardenerAddressToId[msg.sender];\\n        return idGardener;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BlokcCore/interfaces/IGardenBlokc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nstruct TokenAmount {\\n    address[] token;\\n    uint256[] amount;\\n   \\n}\\n\\nstruct Garden {\\n    uint256 id;\\n    address owner;\\n    uint256 gardenerId;\\n    address gardenerAddress;\\n    TokenAmount[] composition;\\n    uint256 createdAt;\\n    string gardenerUsername;\\n    string gardenName;\\n}\\n\\ninterface IGardenBlokc {\\n    function createGarden(\\n        uint256 _gardenerId,\\n        uint256 _amount,\\n        string memory _gardenName\\n    ) external;\\n\\n    function changeGardener(uint256 _gardenerId, uint256 _gardenId) external;\\n\\n    function getGardensByAddress(\\n        address _userAddress\\n    ) external view returns (Garden[] memory);\\n\\n    function changeGardenComposition(\\n        uint256 _idGarden,\\n        address _userAddress,\\n        TokenAmount[] memory composition\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/BlokcCore/interfaces/IGardenerBlokc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nstruct GardenersGardenData {\\n    uint256 id;\\n    address userAddress;\\n    // string[] cryptos;`\\n    // uint8[] percentages;\\n}\\n\\nstruct Gardener {\\n    uint256 id;\\n    string username;\\n    address gardenerAddress;\\n    GardenersGardenData[] gardens;\\n    GardenerStrategy[] strategies; \\n}\\n\\nstruct GardenerStrategy {\\n    uint256 minAmount;\\n    uint256 maxAmount;\\n    string strategyName;\\n    address[] cryptos;\\n    uint8[] percentages;\\n}\\ninterface IGardenerBlokc {\\n    function registerGardener(\\n        string memory _username,\\n        address _addressGardener\\n    ) external;\\n\\n      function createStrategy(\\n        uint256 _minAmount,\\n        uint256 _maxAmount,\\n        string memory _strategyName,\\n        address[] memory _cryptos,\\n        uint8[] memory _percentages\\n    ) external;\\n\\n\\n\\n    function getGardener(\\n        uint256 _gardenerId\\n    ) external view returns (Gardener memory);\\n\\n    function getAllGardeners() external view returns (Gardener[] memory);\\n\\n    function getGardensForGardener()\\n        external\\n        view\\n        returns (GardenersGardenData[] memory gardens);\\n\\n    function getIdGardener() external view returns (uint256 id);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gardener\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyIndex\",\"type\":\"uint256\"}],\"name\":\"StrategyCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idGarden\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct TokenAmount[]\",\"name\":\"composition\",\"type\":\"tuple[]\"}],\"name\":\"changeGardenComposition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gardenerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gardenId\",\"type\":\"uint256\"}],\"name\":\"changeGardener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gardenerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_gardenName\",\"type\":\"string\"}],\"name\":\"createGarden\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_strategyName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_cryptos\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_percentages\",\"type\":\"uint8[]\"}],\"name\":\"createStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gardenerAddressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gardens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gardenerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gardenerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gardenerUsername\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gardenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllGardeners\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"gardenerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"internalType\":\"struct GardenersGardenData[]\",\"name\":\"gardens\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"strategyName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"cryptos\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"percentages\",\"type\":\"uint8[]\"}],\"internalType\":\"struct GardenerStrategy[]\",\"name\":\"strategies\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Gardener[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gardenerId\",\"type\":\"uint256\"}],\"name\":\"getGardener\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"gardenerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"internalType\":\"struct GardenersGardenData[]\",\"name\":\"gardens\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"strategyName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"cryptos\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"percentages\",\"type\":\"uint8[]\"}],\"internalType\":\"struct GardenerStrategy[]\",\"name\":\"strategies\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Gardener\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getGardensByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gardenerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gardenerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"internalType\":\"struct TokenAmount[]\",\"name\":\"composition\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gardenerUsername\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gardenName\",\"type\":\"string\"}],\"internalType\":\"struct Garden[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGardensForGardener\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"internalType\":\"struct GardenersGardenData[]\",\"name\":\"gardens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdGardener\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGardenerRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isStrategyCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_addressGardener\",\"type\":\"address\"}],\"name\":\"registerGardener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gardenerAddress\",\"type\":\"address\"}],\"name\":\"viewAllStrategiesForGardener\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"strategyName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"cryptos\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"percentages\",\"type\":\"uint8[]\"}],\"internalType\":\"struct GardenerStrategy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BlokcCore", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}