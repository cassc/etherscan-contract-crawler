{"SourceCode": "pragma solidity 0.7.5;\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\n/**\r\n *\r\n * Batcher\r\n * =======\r\n *\r\n * Contract that can take a batch of transfers, presented in the form of a recipients array and a values array, and\r\n * funnel off those funds to the correct accounts in a single transaction. This is useful for saving on gas when a\r\n * bunch of funds need to be transferred to different accounts.\r\n *\r\n * If more ETH is sent to `batch` than it is instructed to transfer, contact the contract owner in order to recover the excess.\r\n * If any tokens are accidentally transferred to this account, contact the contract owner in order to recover them.\r\n *\r\n */\r\n\r\ncontract Batcher {\r\n  event BatchTransfer(address sender, address recipient, uint256 value);\r\n  event OwnerChange(address prevOwner, address newOwner);\r\n  event TransferGasLimitChange(\r\n    uint256 prevTransferGasLimit,\r\n    uint256 newTransferGasLimit\r\n  );\r\n\r\n  address public owner;\r\n  uint256 public lockCounter;\r\n  uint256 public transferGasLimit;\r\n\r\n  constructor() {\r\n    lockCounter = 1;\r\n    owner = msg.sender;\r\n    emit OwnerChange(address(0), owner);\r\n    transferGasLimit = 20000;\r\n    emit TransferGasLimitChange(0, transferGasLimit);\r\n  }\r\n\r\n  modifier lockCall() {\r\n    lockCounter++;\r\n    uint256 localCounter = lockCounter;\r\n    _;\r\n    require(localCounter == lockCounter, 'Reentrancy attempt detected');\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, 'Not owner');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Transfer funds in a batch to each of recipients\r\n   * @param recipients The list of recipients to send to\r\n   * @param values The list of values to send to recipients.\r\n   *  The recipient with index i in recipients array will be sent values[i].\r\n   *  Thus, recipients and values must be the same length\r\n   */\r\n  function batch(address[] calldata recipients, uint256[] calldata values)\r\n    external\r\n    payable\r\n    lockCall\r\n  {\r\n    require(recipients.length != 0, 'Must send to at least one person');\r\n    require(\r\n      recipients.length == values.length,\r\n      'Unequal recipients and values'\r\n    );\r\n    require(recipients.length < 256, 'Too many recipients');\r\n\r\n    // Try to send all given amounts to all given recipients\r\n    // Revert everything if any transfer fails\r\n    for (uint8 i = 0; i < recipients.length; i++) {\r\n      require(recipients[i] != address(0), 'Invalid recipient address');\r\n      (bool success, ) = recipients[i].call{\r\n        value: values[i],\r\n        gas: transferGasLimit\r\n      }('');\r\n      require(success, 'Send failed');\r\n      emit BatchTransfer(msg.sender, recipients[i], values[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recovery function for the contract owner to recover any ERC20 tokens or ETH that may get lost in the control of this contract.\r\n   * @param to The recipient to send to\r\n   * @param value The ETH value to send with the call\r\n   * @param data The data to send along with the call\r\n   */\r\n  function recover(\r\n    address to,\r\n    uint256 value,\r\n    bytes calldata data\r\n  ) external onlyOwner returns (bytes memory) {\r\n    (bool success, bytes memory returnData) = to.call{ value: value }(data);\r\n    return returnData;\r\n  }\r\n\r\n  /**\r\n   * Transfers ownership of the contract ot the new owner\r\n   * @param newOwner The address to transfer ownership of the contract to\r\n   */\r\n  function transferOwnership(address newOwner) external onlyOwner {\r\n    require(newOwner != address(0), 'Invalid new owner');\r\n    emit OwnerChange(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * Change the gas limit that is sent along with batched transfers.\r\n   * This is intended to protect against any EVM level changes that would require\r\n   * a new amount of gas for an internal send to complete.\r\n   * @param newTransferGasLimit The new gas limit to send along with batched transfers\r\n   */\r\n  function changeTransferGasLimit(uint256 newTransferGasLimit)\r\n    external\r\n    onlyOwner\r\n  {\r\n    require(newTransferGasLimit >= 2300, 'Transfer gas limit too low');\r\n    emit TransferGasLimitChange(transferGasLimit, newTransferGasLimit);\r\n    transferGasLimit = newTransferGasLimit;\r\n  }\r\n\r\n  fallback() external payable {\r\n    revert('Invalid fallback');\r\n  }\r\n\r\n  receive() external payable {\r\n    revert('Invalid receive');\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BatchTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTransferGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTransferGasLimit\",\"type\":\"uint256\"}],\"name\":\"TransferGasLimitChange\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTransferGasLimit\",\"type\":\"uint256\"}],\"name\":\"changeTransferGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Batcher", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://de713f7f48f0c1279cad4d3bb664ae1c10c6e4cebe7de2ee2ffe7ad0ae5b4b3b"}