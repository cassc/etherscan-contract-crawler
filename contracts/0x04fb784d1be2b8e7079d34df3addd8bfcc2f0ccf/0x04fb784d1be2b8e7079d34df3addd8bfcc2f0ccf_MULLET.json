{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n// $MULLET\r\n// - 1 billion supply\r\n// - no contract owner\r\n// - 100% of tokens in initial LP\r\n// - LP locked in contract permanently\r\n// - V3 LP with a 5 ETH initial market cap\r\n// - 1,000,000 token max transfer for 5 minutes\r\n// https://mullet.capital\r\n\r\n// $HAIR\r\n// - fully liquid without the need for a DEX\r\n// - 10% buy/sell tax\r\n// - tax distributed to token holders in the form of ETH\r\n// - referral link, own 100 $HAIR or more to get 3% of referred buys/reinvests\r\n// https://hedge.mullet.capital\r\n\r\n\r\ninterface Callable {\r\n\tfunction tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\r\n}\r\n\r\ninterface Router {\r\n\tstruct ExactInputSingleParams {\r\n\t\taddress tokenIn;\r\n\t\taddress tokenOut;\r\n\t\tuint24 fee;\r\n\t\taddress recipient;\r\n\t\tuint256 amountIn;\r\n\t\tuint256 amountOutMinimum;\r\n\t\tuint160 sqrtPriceLimitX96;\r\n\t}\r\n\tfunction factory() external view returns (address);\r\n\tfunction positionManager() external view returns (address);\r\n\tfunction WETH9() external view returns (address);\r\n\tfunction exactInputSingle(ExactInputSingleParams calldata) external payable returns (uint256);\r\n}\r\n\r\ninterface Factory {\r\n\tfunction createPool(address _tokenA, address _tokenB, uint24 _fee) external returns (address);\r\n}\r\n\r\ninterface Pool {\r\n\tfunction initialize(uint160 _sqrtPriceX96) external;\r\n}\r\n\r\ninterface PositionManager {\r\n\tstruct MintParams {\r\n\t\taddress token0;\r\n\t\taddress token1;\r\n\t\tuint24 fee;\r\n\t\tint24 tickLower;\r\n\t\tint24 tickUpper;\r\n\t\tuint256 amount0Desired;\r\n\t\tuint256 amount1Desired;\r\n\t\tuint256 amount0Min;\r\n\t\tuint256 amount1Min;\r\n\t\taddress recipient;\r\n\t\tuint256 deadline;\r\n\t}\r\n\tstruct CollectParams {\r\n\t\tuint256 tokenId;\r\n\t\taddress recipient;\r\n\t\tuint128 amount0Max;\r\n\t\tuint128 amount1Max;\r\n\t}\r\n\tfunction mint(MintParams calldata) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\r\n\tfunction collect(CollectParams calldata) external payable returns (uint256 amount0, uint256 amount1);\r\n}\r\n\r\ninterface ERC20 {\r\n\tfunction balanceOf(address) external view returns (uint256);\r\n\tfunction transfer(address, uint256) external returns (bool);\r\n}\r\n\r\ninterface WETH is ERC20 {\r\n\tfunction withdraw(uint256) external;\r\n}\r\n\r\n\r\ncontract HEDGE {\r\n\r\n\tuint256 constant private FLOAT_SCALAR = 2**64;\r\n\tuint256 constant private BUY_TAX = 10;\r\n\tuint256 constant private SELL_TAX = 10;\r\n\tuint256 constant private TEAM_TAX = 1;\r\n\tuint256 constant private REF_TAX = 3;\r\n\tuint256 constant private REF_REQUIREMENT = 1e20; // 100 HAIR\r\n\tuint256 constant private STARTING_PRICE = 0.001 ether;\r\n\tuint256 constant private INCREMENT = 1e10; // 10 Gwei\r\n\taddress constant private BUYBACK_ADDRESS = 0xA093Ea0904250084411F98d9195567e8b4406696;\r\n\r\n\tstring constant public name = \"HEDGE\";\r\n\tstring constant public symbol = \"HAIR\";\r\n\tuint8 constant public decimals = 18;\r\n\r\n\tstruct User {\r\n\t\tuint256 balance;\r\n\t\tmapping(address => uint256) allowance;\r\n\t\tint256 scaledPayout;\r\n\t\taddress ref;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tmapping(address => User) users;\r\n\t\tuint256 scaledEthPerToken;\r\n\t\taddress team;\r\n\t}\r\n\tInfo private info;\r\n\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\tevent Buy(address indexed buyer, uint256 amountSpent, uint256 tokensReceived);\r\n\tevent Sell(address indexed seller, uint256 tokensSpent, uint256 amountReceived);\r\n\tevent Withdraw(address indexed user, uint256 amount);\r\n\tevent Reinvest(address indexed user, uint256 amount);\r\n\r\n\r\n\tconstructor() {\r\n\t\tinfo.team = msg.sender;\r\n\t}\r\n\t\r\n\treceive() external payable {\r\n\t\tbuy();\r\n\t}\r\n\t\r\n\tfunction buy() public payable returns (uint256) {\r\n\t\treturn buy(address(0x0));\r\n\t}\r\n\t\r\n\tfunction buy(address _ref) public payable returns (uint256) {\r\n\t\trequire(msg.value > 0);\r\n\t\tif (_ref != address(0x0) && _ref != msg.sender && _ref != refOf(msg.sender)) {\r\n\t\t\tinfo.users[msg.sender].ref = _ref;\r\n\t\t}\r\n\t\treturn _buy(msg.value);\r\n\t}\r\n\r\n\tfunction sell(uint256 _tokens) external returns (uint256) {\r\n\t\treturn _sell(_tokens);\r\n\t}\r\n\r\n\tfunction withdraw() external returns (uint256) {\r\n\t\tuint256 _rewards = rewardsOf(msg.sender);\r\n\t\trequire(_rewards >= 0);\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_rewards * FLOAT_SCALAR);\r\n\t\tpayable(msg.sender).transfer(_rewards);\r\n\t\temit Withdraw(msg.sender, _rewards);\r\n\t\treturn _rewards;\r\n\t}\r\n\r\n\tfunction reinvest() external returns (uint256) {\r\n\t\tuint256 _rewards = rewardsOf(msg.sender);\r\n\t\trequire(_rewards >= 0);\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(_rewards * FLOAT_SCALAR);\r\n\t\temit Reinvest(msg.sender, _rewards);\r\n\t\treturn _buy(_rewards);\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\treturn _transfer(msg.sender, _to, _tokens);\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\r\n\t\temit Approval(msg.sender, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\trequire(allowance(_from, msg.sender) >= _tokens);\r\n\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\treturn _transfer(_from, _to, _tokens);\r\n\t}\r\n\r\n\tfunction transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\tuint32 _size;\r\n\t\tassembly {\r\n\t\t\t_size := extcodesize(_to)\r\n\t\t}\r\n\t\tif (_size > 0) {\r\n\t\t\trequire(Callable(_to).tokenCallback(msg.sender, _tokens, _data));\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction team() public view returns (address) {\r\n\t\treturn info.team;\r\n\t}\r\n\r\n\tfunction buybackAddress() public pure returns (address) {\r\n\t\treturn BUYBACK_ADDRESS;\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction currentPrices() public view returns (uint256 truePrice, uint256 buyPrice, uint256 sellPrice) {\r\n\t\ttruePrice = STARTING_PRICE + INCREMENT * totalSupply() / 1e18;\r\n\t\tbuyPrice = truePrice * 100 / (100 - BUY_TAX);\r\n\t\tsellPrice = truePrice * (100 - SELL_TAX) / 100;\r\n\t}\r\n\r\n\tfunction refOf(address _user) public view returns (address) {\r\n\t\treturn info.users[_user].ref;\r\n\t}\r\n\r\n\tfunction balanceOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].balance;\r\n\t}\r\n\r\n\tfunction rewardsOf(address _user) public view returns (uint256) {\r\n\t\treturn uint256(int256(info.scaledEthPerToken * balanceOf(_user)) - info.users[_user].scaledPayout) / FLOAT_SCALAR;\r\n\t}\r\n\r\n\tfunction allInfoFor(address _user) public view returns (uint256 contractBalance, uint256 totalTokenSupply, uint256 truePrice, uint256 buyPrice, uint256 sellPrice, uint256 userETH, uint256 userBalance, uint256 userRewards, uint256 userLiquidValue, address userRef) {\r\n\t\tcontractBalance = address(this).balance;\r\n\t\ttotalTokenSupply = totalSupply();\r\n\t\t(truePrice, buyPrice, sellPrice) = currentPrices();\r\n\t\tuserETH = _user.balance;\r\n\t\tuserBalance = balanceOf(_user);\r\n\t\tuserRewards = rewardsOf(_user);\r\n\t\tuserLiquidValue = calculateResult(userBalance, false, false) + userRewards;\r\n\t\tuserRef = refOf(_user);\r\n\t}\r\n\r\n\tfunction allowance(address _user, address _spender) public view returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\r\n\tfunction calculateResult(uint256 _amount, bool _isBuy, bool _inverse) public view returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\tuint256 _buyPrice;\r\n\t\t\tuint256 _sellPrice;\r\n\t\t\t( , _buyPrice, _sellPrice) = currentPrices();\r\n\t\t\tuint256 _rate = (_isBuy ? _buyPrice : _sellPrice);\r\n\t\t\tuint256 _increment = INCREMENT * (_isBuy ? 100 : (100 - SELL_TAX)) / (_isBuy ? (100 - BUY_TAX) : 100);\r\n\t\t\tif ((_isBuy && !_inverse) || (!_isBuy && _inverse)) {\r\n\t\t\t\tif (_inverse) {\r\n\t\t\t\t\treturn (2 * _rate - _sqrt(4 * _rate * _rate + _increment * _increment - 4 * _rate * _increment - 8 * _amount * _increment) - _increment) * 1e18 / (2 * _increment);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn (_sqrt((_increment + 2 * _rate) * (_increment + 2 * _rate) + 8 * _amount * _increment) - _increment - 2 * _rate) * 1e18 / (2 * _increment);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (_inverse) {\r\n\t\t\t\t\treturn (_rate * _amount + (_increment * (_amount + 1e18) / 2e18) * _amount) / 1e18;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn (_rate * _amount - (_increment * (_amount + 1e18) / 2e18) * _amount) / 1e18;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (bool) {\r\n\t\trequire(balanceOf(_from) >= _tokens);\r\n\t\tinfo.users[_from].balance -= _tokens;\r\n\t\tinfo.users[_from].scaledPayout -= int256(_tokens * info.scaledEthPerToken);\r\n\t\tinfo.users[_to].balance += _tokens;\r\n\t\tinfo.users[_to].scaledPayout += int256(_tokens * info.scaledEthPerToken);\r\n\t\temit Transfer(_from, _to, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _buy(uint256 _amount) internal returns (uint256 tokens) {\r\n\t\tuint256 _tax = _amount * BUY_TAX / 100;\r\n\t\ttokens = calculateResult(_amount, true, false);\r\n\t\tinfo.totalSupply += tokens;\r\n\t\tinfo.users[msg.sender].balance += tokens;\r\n\t\tinfo.users[msg.sender].scaledPayout += int256(tokens * info.scaledEthPerToken);\r\n\t\tuint256 _teamTax = _amount * TEAM_TAX / 100;\r\n\t\tinfo.users[team()].scaledPayout -= int256(_teamTax * FLOAT_SCALAR);\r\n\t\tuint256 _refTax = _amount * REF_TAX / 100;\r\n\t\taddress _ref = refOf(msg.sender);\r\n\t\tif (_ref != address(0x0) && balanceOf(_ref) >= REF_REQUIREMENT) {\r\n\t\t\tinfo.users[_ref].scaledPayout -= int256(_refTax * FLOAT_SCALAR);\r\n\t\t} else {\r\n\t\t\tinfo.users[buybackAddress()].scaledPayout -= int256(_refTax * FLOAT_SCALAR);\r\n\t\t}\r\n\t\tinfo.scaledEthPerToken += (_tax - _teamTax - _refTax) * FLOAT_SCALAR / info.totalSupply;\r\n\t\temit Transfer(address(0x0), msg.sender, tokens);\r\n\t\temit Buy(msg.sender, _amount, tokens);\r\n\t}\r\n\r\n\tfunction _sell(uint256 _tokens) internal returns (uint256 amount) {\r\n\t\trequire(balanceOf(msg.sender) >= _tokens);\r\n\t\tamount = calculateResult(_tokens, false, false);\r\n\t\tuint256 _tax = amount * SELL_TAX / (100 - SELL_TAX);\r\n\t\tinfo.totalSupply -= _tokens;\r\n\t\tinfo.users[msg.sender].balance -= _tokens;\r\n\t\tinfo.users[msg.sender].scaledPayout -= int256(_tokens * info.scaledEthPerToken);\r\n\t\tuint256 _teamTax = amount * TEAM_TAX / (100 - SELL_TAX);\r\n\t\tinfo.users[team()].scaledPayout -= int256(_teamTax * FLOAT_SCALAR);\r\n\t\tinfo.scaledEthPerToken += (_tax - _teamTax) * FLOAT_SCALAR / info.totalSupply;\r\n\t\tpayable(msg.sender).transfer(amount);\r\n\t\temit Transfer(msg.sender, address(0x0), _tokens);\r\n\t\temit Sell(msg.sender, _tokens, amount);\r\n\t}\r\n\r\n\r\n\tfunction _sqrt(uint256 _n) internal pure returns (uint256 result) {\r\n\t\tunchecked {\r\n\t\t\tuint256 _tmp = (_n + 1) / 2;\r\n\t\t\tresult = _n;\r\n\t\t\twhile (_tmp < result) {\r\n\t\t\t\tresult = _tmp;\r\n\t\t\t\t_tmp = (_n / _tmp + _tmp) / 2;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\ncontract Team {\r\n\r\n\tRouter constant private ROUTER = Router(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\r\n\r\n\tstruct Share {\r\n\t\taddress payable user;\r\n\t\tuint256 shares;\r\n\t}\r\n\tShare[] public shares;\r\n\tuint256 public totalShares;\r\n\tERC20 immutable public token;\r\n\tHEDGE immutable public hedge;\r\n\r\n\r\n\tconstructor() {\r\n\t\ttoken = ERC20(msg.sender);\r\n\t\thedge = new HEDGE();\r\n\t\t_addShare(0x7178523CD70c5E96C079701fE46Cda3E1799b4Ce, 9);\r\n\t\t_addShare(0xc61D594dff6D253142C7Fa83F41D318F157B018a, 9);\r\n\t\t_addShare(0x2000Af01b455C4cd3E65AED180eC3EE52BD6C264, 2);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\tfunction withdrawETH() public {\r\n\t\tuint256 _balance = address(this).balance;\r\n\t\tif (_balance > 0) {\r\n\t\t\tfor (uint256 i = 0; i < shares.length; i++) {\r\n\t\t\t\tShare memory _share = shares[i];\r\n\t\t\t\t!_share.user.send(_balance * _share.shares / totalShares);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdrawHAIR() external {\r\n\t\thedge.withdraw();\r\n\t\twithdrawETH();\r\n\t}\r\n\r\n\tfunction withdrawToken(ERC20 _token) public {\r\n\t\tWETH _weth = WETH(ROUTER.WETH9());\r\n\t\tif (address(_token) == address(_weth)) {\r\n\t\t\t_weth.withdraw(_weth.balanceOf(address(this)));\r\n\t\t\twithdrawETH();\r\n\t\t} else {\r\n\t\t\tuint256 _balance = _token.balanceOf(address(this));\r\n\t\t\tif (_balance > 0) {\r\n\t\t\t\tfor (uint256 i = 0; i < shares.length; i++) {\r\n\t\t\t\t\tShare memory _share = shares[i];\r\n\t\t\t\t\t_token.transfer(_share.user, _balance * _share.shares / totalShares);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdrawWETH() public {\r\n\t\twithdrawToken(ERC20(ROUTER.WETH9()));\r\n\t}\r\n\r\n\tfunction withdrawFees() external {\r\n\t\twithdrawWETH();\r\n\t\twithdrawToken(token);\r\n\t}\r\n\r\n\r\n\tfunction _addShare(address _user, uint256 _shares) internal {\r\n\t\tshares.push(Share(payable(_user), _shares));\r\n\t\ttotalShares += _shares;\r\n\t}\r\n}\r\n\r\n\r\ncontract Ambassadors {\r\n\r\n\tstruct Share {\r\n\t\taddress payable user;\r\n\t\tuint256 shares;\r\n\t}\r\n\tShare[] public shares;\r\n\tuint256 public totalShares;\r\n\tERC20 immutable public token;\r\n\r\n\r\n\tconstructor() {\r\n\t\ttoken = ERC20(msg.sender);\r\n\t\t_addShare(0x1427798f129b92F19927931a964D17bd6C2F5253, 10);\r\n\t\t_addShare(0x9D756A1848Ee62db36C17f000699f65BfEF9bf11, 7);\r\n\t\t_addShare(0x1248E5Ce0dB0F869A9A934b1677bd5A17e5B8DFe, 7);\r\n\t\t_addShare(0x6A5da854d5a3A0Fc4A760Bc6A9062D2A8e36431a, 7);\r\n\t\t_addShare(0x5a02FbCE3B19E9508F5Cc7F351f671795c1a81a4, 7);\r\n\t\t_addShare(0x1B1B694c797904D9B84ed636661C32C4DcaA17d9, 7);\r\n\t\t_addShare(0x492bb59126d7F06C2c5B13cD50caD209a43eA326, 7);\r\n\t\t_addShare(0x60d5567d7f8d05C899C89e63E00E4f6ca396ec13, 7);\r\n\t\t_addShare(0xBaE44b530f65Aa9A97bb0d17b4eafb07Ac67259C, 7);\r\n\t\t_addShare(0xe6eD771d0deC3a1F5B1A9bBc90fF9353E7Ec9c56, 7);\r\n\t\t_addShare(0xc44241b85051E5837B522289B2559d70496B16dC, 7);\r\n\t\t_addShare(0x0539480eE00A547974e7E38c1A9c8b046d767F22, 7);\r\n\t\t_addShare(0x7a3DD779b524C80e464B23AfCA6906539Df958D0, 7);\r\n\t\t_addShare(0xDfCE959d59F3E34c4f018cd91E4A5B9453Ff2D7d, 7);\r\n\t\t_addShare(0xAc537fcf993fAbCA3e795658B5b1a06c5DEC1e85, 7);\r\n\t\t_addShare(0x0d9997acB3f204fe3A09aCB1Fd594F906bCc88BB, 7);\r\n\t\t_addShare(0x6a49351D350245cFA979c1EBce7D18ADa46406d5, 7);\r\n\t\t_addShare(0x8E44aF6308e52b94157Ec9A898eC9f31cc1B0E16, 7);\r\n\t\t_addShare(0xf939FDa6330984F3E84EB32701bd404dACc27D50, 7);\r\n\t\t_addShare(0x29f3536D4E2a790f11d5827490390Dd1dca3e9b1, 7);\r\n\t\t_addShare(0xA4C501D7Cd0914fCfDb9E2bf367cC224a4531fAc, 7);\r\n\t\t_addShare(0x5dBFEAcf8f26e83314790f3Ee91eEAB97617F734, 7);\r\n\t\t_addShare(0xEBf184353dD81C21AAaB257143346584d75d1537, 7);\r\n\t\t_addShare(0xdAf028effC6e75307c54899a433b40514fEBB936, 7);\r\n\t\t_addShare(0xC4be049c2835D5F42c3B11a44c775F8A4909bd5F, 7);\r\n\t\t_addShare(0xD89eF44a1fBeA729912Fc40CAcF7d0CAe2A49841, 7);\r\n\t\t_addShare(0x5E056D473F95eA7Ef9660a46310297b2D457cAaD, 7);\r\n\t\t_addShare(0xb592016Dc145aFBA2aeE5B35e2Dfe0629BF83A36, 4);\r\n\t\t_addShare(0x95f572bD843b74C0d582b1BE5AF2583293ad2255, 2);\r\n\t}\r\n\r\n\tfunction distribute() external {\r\n\t\tuint256 _balance = token.balanceOf(address(this));\r\n\t\tif (_balance > 0) {\r\n\t\t\tfor (uint256 i = 0; i < shares.length; i++) {\r\n\t\t\t\tShare memory _share = shares[i];\r\n\t\t\t\ttoken.transfer(_share.user, _balance * _share.shares / totalShares);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction _addShare(address _user, uint256 _shares) internal {\r\n\t\tshares.push(Share(payable(_user), _shares));\r\n\t\ttotalShares += _shares;\r\n\t}\r\n}\r\n\r\n\r\ncontract MULLET {\r\n\r\n\tuint256 constant private UINT_MAX = type(uint256).max;\r\n\tuint128 constant private UINT128_MAX = type(uint128).max;\r\n\tuint256 constant private INITIAL_SUPPLY = 1e27; // 1 billion\r\n\tRouter constant private ROUTER = Router(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\r\n\tuint256 constant private INITIAL_ETH_MC = 5 ether; // 5 ETH initial market cap price\r\n\tuint256 constant private UPPER_ETH_MC = 1e6 ether; // 1,000,000 ETH max market cap price\r\n\tuint256 constant private LIMIT_TIME = 5 minutes;\r\n\tuint256 constant private TOKEN_LIMIT = (INITIAL_SUPPLY / 1000); // max buy of 1m tokens, approx. 0.005 ETH, for 5 minutes\r\n\r\n\tint24 constant private MIN_TICK = -887272;\r\n\tint24 constant private MAX_TICK = -MIN_TICK;\r\n\tuint160 constant private MIN_SQRT_RATIO = 4295128739;\r\n\tuint160 constant private MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\r\n\r\n\tstring constant public name = \"Mullet Money Mission\";\r\n\tstring constant public symbol = \"MULLET\";\r\n\tuint8 constant public decimals = 18;\r\n\r\n\tstruct User {\r\n\t\tuint256 balance;\r\n\t\tmapping(address => uint256) allowance;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tTeam team;\r\n\t\taddress pool;\r\n\t\tuint256 totalSupply;\r\n\t\tmapping(address => User) users;\r\n\t\tuint128 positionId;\r\n\t\tuint128 startTime;\r\n\t}\r\n\tInfo private info;\r\n\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\r\n\r\n\r\n\tconstructor() payable {\r\n\t\trequire(msg.value > 0);\r\n\t\tinfo.team = new Team();\r\n\t\taddress _this = address(this);\r\n\t\taddress _weth = ROUTER.WETH9();\r\n\t\t(uint160 _initialSqrtPrice, ) = _getPriceAndTickFromValues(_weth < _this, INITIAL_SUPPLY, INITIAL_ETH_MC);\r\n\t\tinfo.pool = Factory(ROUTER.factory()).createPool(_this, _weth, 10000);\r\n\t\tPool(pool()).initialize(_initialSqrtPrice);\r\n\t}\r\n\t\r\n\tfunction initialize() external {\r\n\t\trequire(totalSupply() == 0);\r\n\t\taddress _this = address(this);\r\n\t\taddress _weth = ROUTER.WETH9();\r\n\t\tbool _weth0 = _weth < _this;\r\n\t\tPositionManager _pm = PositionManager(ROUTER.positionManager());\r\n\t\tinfo.totalSupply = INITIAL_SUPPLY;\r\n\t\tinfo.users[_this].balance = INITIAL_SUPPLY;\r\n\t\temit Transfer(address(0x0), _this, INITIAL_SUPPLY);\r\n\t\t_approve(_this, address(_pm), INITIAL_SUPPLY);\r\n\t\t( , int24 _minTick) = _getPriceAndTickFromValues(_weth0, INITIAL_SUPPLY, INITIAL_ETH_MC);\r\n\t\t( , int24 _maxTick) = _getPriceAndTickFromValues(_weth0, INITIAL_SUPPLY, UPPER_ETH_MC);\r\n\t\t(uint256 _positionId, , , ) = _pm.mint(PositionManager.MintParams({\r\n\t\t\ttoken0: _weth0 ? _weth : _this,\r\n\t\t\ttoken1: !_weth0 ? _weth : _this,\r\n\t\t\tfee: 10000,\r\n\t\t\ttickLower: _weth0 ? _maxTick : _minTick,\r\n\t\t\ttickUpper: !_weth0 ? _maxTick : _minTick,\r\n\t\t\tamount0Desired: _weth0 ? 0 : INITIAL_SUPPLY,\r\n\t\t\tamount1Desired: !_weth0 ? 0 : INITIAL_SUPPLY,\r\n\t\t\tamount0Min: 0,\r\n\t\t\tamount1Min: 0,\r\n\t\t\trecipient: _this,\r\n\t\t\tdeadline: block.timestamp\r\n\t\t}));\r\n\t\tinfo.positionId = uint128(_positionId);\r\n\t\tAmbassadors _ambassadors = new Ambassadors();\r\n\t\tROUTER.exactInputSingle{value:_this.balance}(Router.ExactInputSingleParams({\r\n\t\t\ttokenIn: _weth,\r\n\t\t\ttokenOut: _this,\r\n\t\t\tfee: 10000,\r\n\t\t\trecipient: address(_ambassadors),\r\n\t\t\tamountIn: _this.balance,\r\n\t\t\tamountOutMinimum: 0,\r\n\t\t\tsqrtPriceLimitX96: 0\r\n\t\t}));\r\n\t\t_ambassadors.distribute();\r\n\t\tinfo.startTime = uint128(block.timestamp);\r\n\t}\r\n\r\n\tfunction collectTradingFees() external {\r\n\t\tPositionManager(ROUTER.positionManager()).collect(PositionManager.CollectParams({\r\n\t\t\ttokenId: position(),\r\n\t\t\trecipient: team(),\r\n\t\t\tamount0Max: UINT128_MAX,\r\n\t\t\tamount1Max: UINT128_MAX\r\n\t\t}));\r\n\t\tinfo.team.withdrawFees();\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\r\n\t\treturn _transfer(msg.sender, _to, _tokens);\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\r\n\t\treturn _approve(msg.sender, _spender, _tokens);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\r\n\t\tuint256 _allowance = allowance(_from, msg.sender);\r\n\t\trequire(_allowance >= _tokens);\r\n\t\tif (_allowance != UINT_MAX) {\r\n\t\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\r\n\t\t}\r\n\t\treturn _transfer(_from, _to, _tokens);\r\n\t}\r\n\r\n\tfunction transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {\r\n\t\t_transfer(msg.sender, _to, _tokens);\r\n\t\tuint32 _size;\r\n\t\tassembly {\r\n\t\t\t_size := extcodesize(_to)\r\n\t\t}\r\n\t\tif (_size > 0) {\r\n\t\t\trequire(Callable(_to).tokenCallback(msg.sender, _tokens, _data));\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\r\n\tfunction team() public view returns (address) {\r\n\t\treturn address(info.team);\r\n\t}\r\n\r\n\tfunction pool() public view returns (address) {\r\n\t\treturn info.pool;\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address _user) public view returns (uint256) {\r\n\t\treturn info.users[_user].balance;\r\n\t}\r\n\r\n\tfunction allowance(address _user, address _spender) public view returns (uint256) {\r\n\t\treturn info.users[_user].allowance[_spender];\r\n\t}\r\n\r\n\tfunction position() public view returns (uint256) {\r\n\t\treturn info.positionId;\r\n\t}\r\n\r\n\r\n\tfunction _approve(address _owner, address _spender, uint256 _tokens) internal returns (bool) {\r\n\t\tinfo.users[_owner].allowance[_spender] = _tokens;\r\n\t\temit Approval(_owner, _spender, _tokens);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (bool) {\r\n\t\tunchecked {\r\n\t\t\tif (block.timestamp < info.startTime + LIMIT_TIME) {\r\n\t\t\t\trequire(_tokens <= TOKEN_LIMIT);\r\n\t\t\t}\r\n\t\t\trequire(balanceOf(_from) >= _tokens);\r\n\t\t\tinfo.users[_from].balance -= _tokens;\r\n\t\t\tinfo.users[_to].balance += _tokens;\r\n\t\t\temit Transfer(_from, _to, _tokens);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction _getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\r\n\t\tunchecked {\r\n\t\t\tuint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\r\n\t\t\trequire(absTick <= uint256(int256(MAX_TICK)), 'T');\r\n\r\n\t\t\tuint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\r\n\t\t\tif (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n\t\t\tif (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n\t\t\tif (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n\t\t\tif (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n\t\t\tif (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n\t\t\tif (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n\t\t\tif (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n\t\t\tif (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n\t\t\tif (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n\t\t\tif (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n\t\t\tif (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n\t\t\tif (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n\t\t\tif (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n\t\t\tif (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n\t\t\tif (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n\t\t\tif (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n\t\t\tif (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n\t\t\tif (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n\t\t\tif (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n\r\n\t\t\tif (tick > 0) ratio = type(uint256).max / ratio;\r\n\r\n\t\t\tsqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\r\n\t\tunchecked {\r\n\t\t\trequire(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\r\n\t\t\tuint256 ratio = uint256(sqrtPriceX96) << 32;\r\n\r\n\t\t\tuint256 r = ratio;\r\n\t\t\tuint256 msb = 0;\r\n\r\n\t\t\tassembly {\r\n\t\t\t\tlet f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n\t\t\t\tmsb := or(msb, f)\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tlet f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n\t\t\t\tmsb := or(msb, f)\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tlet f := shl(5, gt(r, 0xFFFFFFFF))\r\n\t\t\t\tmsb := or(msb, f)\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tlet f := shl(4, gt(r, 0xFFFF))\r\n\t\t\t\tmsb := or(msb, f)\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tlet f := shl(3, gt(r, 0xFF))\r\n\t\t\t\tmsb := or(msb, f)\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tlet f := shl(2, gt(r, 0xF))\r\n\t\t\t\tmsb := or(msb, f)\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tlet f := shl(1, gt(r, 0x3))\r\n\t\t\t\tmsb := or(msb, f)\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tlet f := gt(r, 0x1)\r\n\t\t\t\tmsb := or(msb, f)\r\n\t\t\t}\r\n\r\n\t\t\tif (msb >= 128) r = ratio >> (msb - 127);\r\n\t\t\telse r = ratio << (127 - msb);\r\n\r\n\t\t\tint256 log_2 = (int256(msb) - 128) << 64;\r\n\r\n\t\t\tassembly {\r\n\t\t\t\tr := shr(127, mul(r, r))\r\n\t\t\t\tlet f := shr(128, r)\r\n\t\t\t\tlog_2 := or(log_2, shl(63, f))\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tr := shr(127, mul(r, r))\r\n\t\t\t\tlet f := shr(128, r)\r\n\t\t\t\tlog_2 := or(log_2, shl(62, f))\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tr := shr(127, mul(r, r))\r\n\t\t\t\tlet f := shr(128, r)\r\n\t\t\t\tlog_2 := or(log_2, shl(61, f))\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tr := shr(127, mul(r, r))\r\n\t\t\t\tlet f := shr(128, r)\r\n\t\t\t\tlog_2 := or(log_2, shl(60, f))\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tr := shr(127, mul(r, r))\r\n\t\t\t\tlet f := shr(128, r)\r\n\t\t\t\tlog_2 := or(log_2, shl(59, f))\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tr := shr(127, mul(r, r))\r\n\t\t\t\tlet f := shr(128, r)\r\n\t\t\t\tlog_2 := or(log_2, shl(58, f))\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tr := shr(127, mul(r, r))\r\n\t\t\t\tlet f := shr(128, r)\r\n\t\t\t\tlog_2 := or(log_2, shl(57, f))\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tr := shr(127, mul(r, r))\r\n\t\t\t\tlet f := shr(128, r)\r\n\t\t\t\tlog_2 := or(log_2, shl(56, f))\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tr := shr(127, mul(r, r))\r\n\t\t\t\tlet f := shr(128, r)\r\n\t\t\t\tlog_2 := or(log_2, shl(55, f))\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tr := shr(127, mul(r, r))\r\n\t\t\t\tlet f := shr(128, r)\r\n\t\t\t\tlog_2 := or(log_2, shl(54, f))\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tr := shr(127, mul(r, r))\r\n\t\t\t\tlet f := shr(128, r)\r\n\t\t\t\tlog_2 := or(log_2, shl(53, f))\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tr := shr(127, mul(r, r))\r\n\t\t\t\tlet f := shr(128, r)\r\n\t\t\t\tlog_2 := or(log_2, shl(52, f))\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tr := shr(127, mul(r, r))\r\n\t\t\t\tlet f := shr(128, r)\r\n\t\t\t\tlog_2 := or(log_2, shl(51, f))\r\n\t\t\t\tr := shr(f, r)\r\n\t\t\t}\r\n\t\t\tassembly {\r\n\t\t\t\tr := shr(127, mul(r, r))\r\n\t\t\t\tlet f := shr(128, r)\r\n\t\t\t\tlog_2 := or(log_2, shl(50, f))\r\n\t\t\t}\r\n\r\n\t\t\tint256 log_sqrt10001 = log_2 * 255738958999603826347141;\r\n\r\n\t\t\tint24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\r\n\t\t\tint24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\r\n\r\n\t\t\ttick = tickLow == tickHi ? tickLow : _getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _sqrt(uint256 _n) internal pure returns (uint256 result) {\r\n\t\tunchecked {\r\n\t\t\tuint256 _tmp = (_n + 1) / 2;\r\n\t\t\tresult = _n;\r\n\t\t\twhile (_tmp < result) {\r\n\t\t\t\tresult = _tmp;\r\n\t\t\t\t_tmp = (_n / _tmp + _tmp) / 2;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _getPriceAndTickFromValues(bool _weth0, uint256 _tokens, uint256 _weth) internal pure returns (uint160 price, int24 tick) {\r\n\t\tuint160 _tmpPrice = uint160(_sqrt(2**192 / (!_weth0 ? _tokens : _weth) * (_weth0 ? _tokens : _weth)));\r\n\t\ttick = _getTickAtSqrtRatio(_tmpPrice);\r\n\t\ttick = tick - (tick % 200);\r\n\t\tprice = _getSqrtRatioAtTick(tick);\r\n\t}\r\n}\r\n\r\n\r\ncontract Deploy {\r\n\tMULLET immutable public mullet;\r\n\tHEDGE immutable public hedge;\r\n\tconstructor() payable {\r\n\t\tmullet = new MULLET{value:msg.value}();\r\n\t\tmullet.initialize();\r\n\t\thedge = HEDGE(Team(payable(mullet.team())).hedge());\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectTradingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"position\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MULLET", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d4996163bb350842839b008fe49e9d1e61a43bef38996ab98d1324871b550481"}