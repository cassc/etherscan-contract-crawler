{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 15\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\\n\\nimport \\\"./EIP712.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/Mocks/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\"\r\n    },\r\n    \"contracts/staking/IMYCStakingFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IMYCStakingFactory {\\n    function treasury() external view returns (address);\\n\\n    function signer() external view returns (address);\\n\\n    function mycStakingManager() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/IMYCStakingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IMYCStakingManager {\\n    function addStakingPool(address poolAddress, bytes32 signature) external;\\n\\n    function treasury() external view returns (address);\\n\\n    function signer() external view returns (address);\\n\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/IMYCStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IMYCStakingPool {\\n    function factory() external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/LockedStaking/LockedStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../IMYCStakingFactory.sol\\\";\\nimport \\\"../IMYCStakingPool.sol\\\";\\nimport \\\"../../helpers/Mocks/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nstruct StakingPool {\\n    address tokenAddress; // staking token address\\n    address owner; // owner of pool\\n    uint256 dateStart; // start date for all pools\\n    uint256 dateEnd; // end date for all pools\\n    bool rescued; // if unused rewards are withdrawn by owner\\n    uint256 mycFeesWithdrawn; // withdrawn myc fees\\n}\\n\\nstruct StakingPlan {\\n    uint256 duration; // for how long user cannot unstake (seconds)\\n    uint256 maxTokensBeStaked; // maximum amount that can be staked amoung all stakers\\n    uint256 availableTokensBeStaked; // available tokens amount can be staked by user\\n    uint256 rewardsPool; // reward pool\\n    uint256 rewardsWithdrawn; // how many rewards withdrawn by stakers\\n    uint256 mycFeesPool; //myc fees pools\\n    uint256 maxStakingAmount; //max staking amount\\n    bool isSignatureRequired; // if signature is required\\n}\\n\\nstruct UserStake {\\n    uint256 stakeDate;\\n    uint256 amount;\\n}\\n\\n/// @title Locked Staking by MyCointainer\\n/// @notice Stake ERC20 tokens for rewards\\ncontract LockedStaking is IMYCStakingPool, ReentrancyGuard, EIP712 {\\n    using SafeERC20 for IERC20;\\n    /**\\n     * @dev Emitted when `staker` stakes tokens for `stakingPlanId`\\n     */\\n    event Staked(\\n        address indexed staker,\\n        uint256 indexed stakingPlanId,\\n        uint256 amount,\\n        uint256 unstakeDate\\n    );\\n\\n    event StakedWithSignature(\\n        address indexed staker,\\n        uint256 indexed stakingPlanId,\\n        uint256 amount,\\n        uint256 unstakeDate,\\n        uint256 nonce\\n    );\\n\\n    /**\\n     * @dev Emitted when `staker` unstakes tokens for `stakingPlanId`\\n     */\\n    event Unstaked(\\n        address indexed staker,\\n        uint256 indexed stakingPlanId,\\n        uint256 amount,\\n        uint256 reward\\n    );\\n\\n    /**\\n     * @dev Emitted when `staker` unstakes tokens wtih penalty(before staking period ends)\\n     */\\n    event UnstakedWithPenalty(\\n        address indexed staker,\\n        uint256 indexed stakingPlanId,\\n        uint256 staked,\\n        uint256 withdrawn\\n    );\\n\\n    error OnlyFactory();\\n    error StakeAlreadyExists();\\n    error NoSlotsAvailable();\\n    error StakeNotFound();\\n    error EndOfStakeNotReached();\\n    error StakingPeriodNotEnded();\\n    error NothingToWithdraw();\\n    error DateInFuture();\\n    error DateInPast();\\n    error NoTokensAvailableToStake();\\n    error AmountCantBeZero();\\n    error AlreadyRescued();\\n    error MaxStakingAmountExceed();\\n\\n    StakingPool internal _stakePool;\\n    mapping(address => mapping(uint256 => UserStake)) internal _userStake;\\n    StakingPlan[] internal _plans;\\n    IMYCStakingFactory internal _factory;\\n    mapping(uint256 => bool) public isNonceUsed;\\n\\n    /**\\n     * @dev Plans length\\n     */\\n    function getPlansLength() external view returns (uint256) {\\n        return _plans.length;\\n    }\\n\\n    /**\\n     * @dev Returns factory address\\n     */\\n    function factory() external view returns (address) {\\n        return address(_factory);\\n    }\\n\\n    /**\\n     * @dev Returns plans\\n     */\\n    function getPlans() external view returns (StakingPlan[] memory) {\\n        StakingPlan[] memory plans = new StakingPlan[](_plans.length);\\n        plans = _plans;\\n        return plans;\\n    }\\n\\n    /**\\n     * @dev Returns `planId` plan\\n     */\\n    function getPlan(\\n        uint256 planId\\n    ) external view returns (StakingPlan memory) {\\n        return _plans[planId];\\n    }\\n\\n    /**\\n     * @dev Returns {StakingPool} info\\n     */\\n    function stakingPool() external view returns (StakingPool memory) {\\n        return _stakePool;\\n    }\\n\\n    /**\\n     * @dev Returns stake info for each plan for staker\\n     */\\n    function stakesInfoOf(\\n        address staker\\n    ) external view returns (UserStake[] memory) {\\n        uint256 len = _plans.length;\\n        UserStake[] memory stakes = new UserStake[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            stakes[i] = _userStake[staker][i];\\n        }\\n        return stakes;\\n    }\\n\\n    /**\\n     * @dev Returns stake info for `staker` and `planId`\\n     */\\n    function stakeInfoOf(\\n        address staker,\\n        uint256 planId\\n    ) external view returns (UserStake memory) {\\n        return _userStake[staker][planId];\\n    }\\n\\n    constructor(\\n        address tokenAddress, // staking token address\\n        address owner, // owner of pool\\n        uint256 dateStart, // start date for all pools\\n        uint256 dateEnd, // end date for all pools\\n        StakingPlan[] memory plans //staking plans\\n    ) EIP712(\\\"MyCointainer\\\", \\\"1\\\") {\\n        //saving pool info\\n        StakingPool memory newConfig = StakingPool({\\n            tokenAddress: tokenAddress,\\n            owner: owner,\\n            dateStart: dateStart,\\n            dateEnd: dateEnd,\\n            rescued: false,\\n            mycFeesWithdrawn: 0\\n        });\\n        _stakePool = newConfig;\\n\\n        //saving _plans\\n        uint256 len = plans.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _plans.push(plans[i]);\\n        }\\n\\n        _factory = IMYCStakingFactory(msg.sender);\\n    }\\n\\n    function _checkDateInFutureOrZero(uint256 date) internal view {\\n        if (date == 0) {\\n            return;\\n        }\\n        if (date < block.timestamp) revert DateInPast();\\n    }\\n\\n    function _withdrawTokensFromContract(\\n        address[] memory to,\\n        uint256[] memory amount\\n    ) internal {\\n        require(to.length == amount.length, \\\"Length mismatch\\\");\\n        IERC20 stakeToken = IERC20(_stakePool.tokenAddress);\\n        address wethAddress = IMYCStakingFactory(_factory).WETH();\\n        uint256 sum;\\n        for (uint256 i = 0; i < to.length; i++) {\\n            sum += amount[i];\\n        }\\n        if (wethAddress == address(stakeToken)) {\\n            IWETH(wethAddress).withdraw(sum);\\n        }\\n        for (uint256 i = 0; i < to.length; i++) {\\n            if (wethAddress == address(stakeToken)) {\\n                payable(to[i]).transfer(amount[i]);\\n            } else {\\n                stakeToken.safeTransfer(to[i], amount[i]);\\n            }\\n        }\\n    }\\n\\n    function _depositTokensToContract(uint256 amount) internal {\\n        IERC20 stakeToken = IERC20(_stakePool.tokenAddress);\\n        address wethAddress = IMYCStakingFactory(_factory).WETH();\\n        if (wethAddress == address(stakeToken)) {\\n            require(amount == msg.value, \\\"Native currency mismatch\\\");\\n            IWETH(wethAddress).deposit{value: amount}();\\n        } else {\\n            stakeToken.safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n    }\\n\\n    function _checkDateInPastOrZero(uint256 date) internal view {\\n        if (date == 0) {\\n            return;\\n        }\\n        if (date > block.timestamp) revert DateInFuture();\\n    }\\n\\n    function _checkPlanAvailability(\\n        StakingPlan memory plan,\\n        uint256 amountToStake\\n    ) internal pure returns (uint256) {\\n        if (plan.availableTokensBeStaked == 0) {\\n            revert NoTokensAvailableToStake();\\n        } else if (plan.availableTokensBeStaked < amountToStake) {\\n            return plan.availableTokensBeStaked;\\n        } else {\\n            return amountToStake;\\n        }\\n    }\\n\\n    function stakeWithSignature(address staker, uint256 amount, uint256 stakingPlanId, uint256 nonce, uint256 deadline, bytes memory signature) external payable {\\n        StakingPlan memory plan = _plans[stakingPlanId];\\n        require(deadline == 0 || deadline >= block.timestamp, \\\"LockedStaking: Expired deadline\\\");\\n        require(!isNonceUsed[nonce] && staker != address(0), \\\"LockedStaking: nonce already used\\\");\\n        bytes32 typedHash = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"SignedEntrance(address staker,uint256 stakingPlanId,uint256 nonce,uint256 deadline)\\\"\\n                    ),\\n                    staker == address(0) ? address(0) : msg.sender, \\n                    stakingPlanId,\\n                    nonce,\\n                    deadline\\n                )\\n            )\\n        );\\n        if(staker != address(0)){\\n            isNonceUsed[nonce] = true;\\n        }\\n        require (ECDSA.recover(typedHash, signature) == _factory.signer(), \\\"LockedStaking: Invalid signature\\\");\\n        _stake(amount, stakingPlanId);\\n\\n        emit StakedWithSignature(msg.sender, stakingPlanId, amount, block.timestamp + plan.duration, nonce);\\n    }\\n\\n    function _stake(uint256 amount, uint256 stakingPlanId) internal nonReentrant{\\n        if (amount == 0) {\\n            revert AmountCantBeZero();\\n        }\\n        UserStake memory uStake = _userStake[msg.sender][stakingPlanId];\\n\\n        //only one active stake for each plan per staker\\n        if (uStake.stakeDate != 0) revert StakeAlreadyExists();\\n\\n        StakingPool memory sp = _stakePool;\\n\\n        //check start and end date\\n        _checkDateInPastOrZero(sp.dateStart);\\n        _checkDateInFutureOrZero(sp.dateEnd);\\n\\n        //check availability to stake such amount, decreasing amount to max available\\n        StakingPlan memory plan = _plans[stakingPlanId];\\n        amount = _checkPlanAvailability(plan, amount);\\n\\n        //check max staking amount\\n        if (amount > plan.maxStakingAmount) {\\n            revert MaxStakingAmountExceed();\\n        }\\n\\n        //transfering tokens to smart contract - allowance needed\\n        _depositTokensToContract(amount);\\n\\n        //store stake data for user\\n        _userStake[msg.sender][stakingPlanId] = UserStake({\\n            stakeDate: block.timestamp,\\n            amount: amount\\n        });\\n\\n        //decreasing available amount to stake for plan\\n        _plans[stakingPlanId].availableTokensBeStaked -= amount;\\n    }\\n\\n    /**\\n     * @dev Stakes tokens\\n     */\\n    function stake(uint256 amount, uint256 stakingPlanId) external payable{\\n        StakingPlan memory plan = _plans[stakingPlanId];\\n        require(!plan.isSignatureRequired, \\\"LockedStaking: Signature required\\\"); \\n        _stake(amount, stakingPlanId);\\n\\n        //emit event\\n        emit Staked(\\n            msg.sender,\\n            stakingPlanId,\\n            amount,\\n            block.timestamp + plan.duration\\n        );\\n    }\\n\\n    function _calculateReward(\\n        StakingPlan memory plan,\\n        uint256 stakedOnPlan\\n    ) internal pure returns (uint256) {\\n        return (plan.rewardsPool * stakedOnPlan) / plan.maxTokensBeStaked;\\n    }\\n\\n    /**\\n     * @dev Unstakes tokens on selected `poolIndex`\\n     */\\n    function unstake(uint256 stakingPlanId) external nonReentrant{\\n        _unstake(stakingPlanId);\\n    }\\n\\n\\n    function _unstake(uint256 stakingPlanId) internal {\\n        UserStake memory uStake = _userStake[msg.sender][stakingPlanId];\\n\\n        // checking is stake exist\\n        if (uStake.stakeDate == 0) revert StakeNotFound();\\n\\n        // check end staking date\\n        StakingPlan memory plan = _plans[stakingPlanId];\\n        if (uStake.stakeDate + plan.duration > block.timestamp)\\n            revert EndOfStakeNotReached();\\n\\n        // reset stake values for user\\n        _userStake[msg.sender][stakingPlanId] = UserStake({\\n            stakeDate: 0,\\n            amount: 0\\n        });\\n\\n        // update withrawn rewards\\n        uint256 rewardToWithdraw = _calculateReward(plan, uStake.amount);\\n        _plans[stakingPlanId].rewardsWithdrawn += rewardToWithdraw;\\n\\n        address[] memory addresses = new address[](1);\\n        uint256[] memory amounts = new uint256[](1);\\n        addresses[0] = msg.sender;\\n        amounts[0] = uStake.amount + rewardToWithdraw;\\n\\n        // transfer tokens\\n        _withdrawTokensFromContract(addresses, amounts);\\n\\n        // emit event\\n        emit Unstaked(\\n            msg.sender,\\n            stakingPlanId,\\n            uStake.amount,\\n            rewardToWithdraw\\n        );\\n    }\\n\\n    /**\\n     * @dev Unstakes tokens on selected `poolIndex` before end of staking period\\n     * Takes 10% fee\\n     */\\n    function unstakeWithPenalty(uint256 stakingPlanId) external nonReentrant{\\n        UserStake memory uStake = _userStake[msg.sender][stakingPlanId];\\n\\n        // checking is stake exist\\n        if (uStake.stakeDate == 0) revert StakeNotFound();\\n\\n        // if after locked period - do normal unstake\\n        StakingPlan memory plan = _plans[stakingPlanId];\\n        if (uStake.stakeDate + plan.duration < block.timestamp) {\\n            _unstake(stakingPlanId);\\n            return ();\\n        }\\n\\n        StakingPool memory sc = _stakePool;\\n        uint256 feeAmount = (uStake.amount * 5) / 100;\\n        uint256 toWithdraw = uStake.amount - 2 * feeAmount;\\n\\n        // reset stake values for user\\n        _userStake[msg.sender][stakingPlanId] = UserStake({\\n            stakeDate: 0,\\n            amount: 0\\n        });\\n\\n        // calculate and transfer tokens\\n        uint256 rescuedRewards = 0;\\n        if (sc.dateEnd > block.timestamp || sc.dateEnd == 0) {\\n            _plans[stakingPlanId].availableTokensBeStaked += uStake.amount;\\n        } else {\\n            rescuedRewards = _calculateReward(plan, uStake.amount);\\n            _plans[stakingPlanId].rewardsWithdrawn += rescuedRewards;\\n        }\\n        address[] memory addresses = new address[](3);\\n        uint256[] memory amounts = new uint256[](3);\\n        addresses[0] = sc.owner;\\n        addresses[1] = _factory.treasury();\\n        addresses[2] = msg.sender;\\n        amounts[0] = feeAmount + rescuedRewards;\\n        amounts[1] = feeAmount;\\n        amounts[2] = toWithdraw;\\n        _withdrawTokensFromContract(addresses, amounts);\\n        emit UnstakedWithPenalty(\\n            msg.sender,\\n            stakingPlanId,\\n            uStake.amount,\\n            toWithdraw\\n        );\\n    }\\n\\n    /**\\n     * @dev Sends unused reward tokens back to owner\\n     *\\n     * Note: Can be used only after stake period end\\n     */\\n    function claimUnusedRewards() external nonReentrant{\\n        StakingPool memory sc = _stakePool;\\n        if (sc.dateEnd >= block.timestamp || sc.dateEnd == 0) {\\n            revert StakingPeriodNotEnded();\\n        }\\n\\n        if (sc.rescued) {\\n            revert AlreadyRescued();\\n        }\\n\\n        uint256 sumToRescue;\\n        for (uint256 i = 0; i < _plans.length; i++) {\\n            StakingPlan memory plan = _plans[i];\\n            sumToRescue +=\\n                (plan.availableTokensBeStaked * (plan.rewardsPool)) /\\n                plan.maxTokensBeStaked;\\n        }\\n        if (sumToRescue == 0) revert NothingToWithdraw();\\n        _stakePool.rescued = true;\\n\\n        address[] memory addresses = new address[](1);\\n        uint256[] memory amounts = new uint256[](1);\\n        addresses[0] = sc.owner;\\n        amounts[0] = sumToRescue;\\n\\n        // transfer tokens\\n        _withdrawTokensFromContract(addresses, amounts);\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == IMYCStakingFactory(_factory).WETH()); // only accept ETH via fallback from the WETH contract\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/LockedStaking/LockedStakingFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./LockedStaking.sol\\\";\\nimport \\\"../IMYCStakingManager.sol\\\";\\nimport \\\"../IMYCStakingFactory.sol\\\";\\nimport \\\"../../helpers/Mocks/IWETH.sol\\\";\\n\\n/// @title Locked Staking Factory\\n/// @notice Creates new LockedStaking Contracts\\ncontract LockedStakingFactory is EIP712, IMYCStakingFactory {\\n    /**\\n     * @dev Emitted when withdawing MYC `reward` fees for `poolAddress`\\n     */\\n    event WithdrawnMYCFees(address indexed poolAddress, uint256 reward);\\n\\n    bytes32 public constant STAKING_PLAN_TYPEHASH =\\n        keccak256(\\n            \\\"StakingPlan(uint256 duration,uint256 maxTokensBeStaked,uint256 availableTokensBeStaked,uint256 rewardsPool,uint256 rewardsWithdrawn,uint256 mycFeesPool,uint256 maxStakingAmount,bool isSignatureRequired)\\\"\\n        );\\n\\n    bytes32 public constant LOCKED_STAKING_POOL_TYPEHASH =\\n        keccak256(\\n            \\\"LockedStakingPool(address poolOwner,address tokenAddress,address referralAddress,uint256 feeToReferral,uint256 dateStart,uint256 dateEnd,uint256 deadline,StakingPlan[] stakingPlans)StakingPlan(uint256 duration,uint256 maxTokensBeStaked,uint256 availableTokensBeStaked,uint256 rewardsPool,uint256 rewardsWithdrawn,uint256 mycFeesPool,uint256 maxStakingAmount,bool isSignatureRequired)\\\"\\n        );\\n\\n    struct LockedStakingPool {\\n        address poolOwner;\\n        address tokenAddress;\\n        address referralAddress;\\n        uint256 feeToReferral;\\n        uint256 dateStart;\\n        uint256 dateEnd;\\n        uint256 deadline;\\n        StakingPlan[] stakingPlans;\\n    }\\n\\n    error WrongExecutor();\\n\\n    IMYCStakingManager internal _mycStakingManager;\\n    IWETH internal _WETH;\\n\\n    constructor(\\n        IMYCStakingManager mycStakingManager_,\\n        IWETH weth_\\n    ) EIP712(\\\"MyCointainer\\\", \\\"1\\\") {\\n        _mycStakingManager = mycStakingManager_;\\n        _WETH = weth_;\\n    }\\n\\n    /**\\n     * @dev Returns WETH address\\n     *\\n     */\\n    function WETH() external view returns (address) {\\n        return address(_WETH);\\n    }\\n\\n    /**\\n     * @dev Returns MyCointainer Staking Manager Contract Address\\n     *\\n     */\\n    function mycStakingManager() external view returns (address) {\\n        return address(_mycStakingManager);\\n    }\\n\\n    /**\\n     * @dev Returns signer address\\n     */\\n    function signer() external view returns (address) {\\n        return _mycStakingManager.signer();\\n    }\\n\\n    /**\\n     * @dev Returns signer address\\n     */\\n    function treasury() external view returns (address) {\\n        return _mycStakingManager.treasury();\\n    }\\n\\n    /**\\n     * @dev Returns main owner address\\n     */\\n    function owner() external view returns (address) {\\n        return _mycStakingManager.owner();\\n    }\\n\\n    /**\\n     * @dev Creates {LockedStaking} new smart contract\\n     *\\n     */\\n    function createPool(\\n        LockedStakingPool calldata stakingPool,\\n        bytes calldata signature\\n    ) external payable {\\n        //check pool owner\\n        require(\\n            stakingPool.poolOwner == msg.sender ||\\n                stakingPool.poolOwner == address(0),\\n            \\\"LSF: Wrong executor\\\"\\n        );\\n\\n        // checking dates\\n        require(\\n            stakingPool.dateEnd >= stakingPool.dateStart,\\n            \\\"LSF: Dates sort\\\"\\n        );\\n\\n        require(\\n            block.timestamp <= stakingPool.deadline,\\n            \\\"LSF: Transaction overdue\\\"\\n        );\\n\\n        _verify(stakingPool, signature);\\n\\n        LockedStaking createdPool = new LockedStaking{salt: bytes32(signature)}(\\n            stakingPool.tokenAddress,\\n            msg.sender,\\n            stakingPool.dateStart,\\n            stakingPool.dateEnd,\\n            stakingPool.stakingPlans\\n        );\\n\\n        _transferTokens(stakingPool, address(createdPool));\\n\\n        _mycStakingManager.addStakingPool(\\n            address(createdPool),\\n            bytes32(signature)\\n        );\\n    }\\n\\n    function _transferTokens(\\n        LockedStakingPool calldata stakingPool,\\n        address poolAddress\\n    ) internal {\\n        uint256 rewardPoolSum = 0;\\n        uint256 mycFeeSum = 0;\\n        for (uint256 i = 0; i < stakingPool.stakingPlans.length; i++) {\\n            mycFeeSum += stakingPool.stakingPlans[i].mycFeesPool;\\n            rewardPoolSum += stakingPool.stakingPlans[i].rewardsPool;\\n        }\\n\\n        require(stakingPool.feeToReferral <= 10000, \\\"Fee too high\\\");\\n        if (stakingPool.feeToReferral > 0) {\\n            require(\\n                stakingPool.referralAddress != address(0),\\n                \\\"Referral address is zero\\\"\\n            );\\n        }\\n        uint256 feeToReferralWei = (stakingPool.feeToReferral * mycFeeSum) /\\n            10000;\\n\\n        if (address(_WETH) == stakingPool.tokenAddress) {\\n            require(\\n                rewardPoolSum + mycFeeSum == msg.value,\\n                \\\"Native currency amount mismatch\\\"\\n            );\\n            _WETH.deposit{value: msg.value}();\\n            _WETH.transfer(poolAddress, rewardPoolSum);\\n            if (mycFeeSum > 0) {\\n                _WETH.transfer(\\n                    _mycStakingManager.treasury(),\\n                    mycFeeSum - feeToReferralWei\\n                );\\n            }\\n            if (feeToReferralWei > 0) {\\n                _WETH.transfer(stakingPool.referralAddress, feeToReferralWei);\\n            }\\n        } else {\\n            IERC20(stakingPool.tokenAddress).transferFrom(\\n                msg.sender,\\n                poolAddress,\\n                rewardPoolSum\\n            );\\n\\n            if (feeToReferralWei > 0) {\\n                IERC20(stakingPool.tokenAddress).transferFrom(\\n                    msg.sender,\\n                    stakingPool.referralAddress,\\n                    feeToReferralWei\\n                );\\n            }\\n\\n            if (mycFeeSum > 0) {\\n                IERC20(stakingPool.tokenAddress).transferFrom(\\n                    msg.sender,\\n                    _mycStakingManager.treasury(),\\n                    mycFeeSum - feeToReferralWei\\n                );\\n            }\\n        }\\n    }\\n\\n    function _verify(\\n        LockedStakingPool calldata pool,\\n        bytes calldata signature\\n    ) internal view {\\n        require(\\n            _recoverAddressOfPool(pool, signature) ==\\n                _mycStakingManager.signer(),\\n            \\\"LSF: Invalid signature\\\"\\n        );\\n    }\\n\\n    function _recoverAddressOfPool(\\n        LockedStakingPool calldata pool,\\n        bytes calldata signature\\n    ) internal view returns (address) {\\n        bytes32 typedHash = _hashTypedDataV4(keccak256(_encodePool(pool)));\\n        return ECDSA.recover(typedHash, signature);\\n    }\\n\\n    function _recoverAddressOfPlan(\\n        StakingPlan calldata plan,\\n        bytes calldata signature\\n    ) internal view returns (address) {\\n        bytes32 typedHash = _hashTypedDataV4(keccak256(_encodePlan(plan)));\\n        return ECDSA.recover(typedHash, signature);\\n    }\\n\\n    function _encodePlan(\\n        StakingPlan calldata plan\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                STAKING_PLAN_TYPEHASH,\\n                plan.duration,\\n                plan.maxTokensBeStaked,\\n                plan.availableTokensBeStaked,\\n                plan.rewardsPool,\\n                plan.rewardsWithdrawn,\\n                plan.mycFeesPool,\\n                plan.maxStakingAmount,\\n                plan.isSignatureRequired\\n            );\\n    }\\n\\n    function _encodePool(\\n        LockedStakingPool calldata pool\\n    ) internal pure returns (bytes memory) {\\n        bytes32[] memory encodedPlans = new bytes32[](pool.stakingPlans.length);\\n        for (uint256 i = 0; i < pool.stakingPlans.length; i++) {\\n            encodedPlans[i] = keccak256(_encodePlan(pool.stakingPlans[i]));\\n        }\\n        return\\n            abi.encode(\\n                LOCKED_STAKING_POOL_TYPEHASH,\\n                pool.poolOwner,\\n                pool.tokenAddress,\\n                pool.referralAddress,\\n                pool.feeToReferral,\\n                pool.dateStart,\\n                pool.dateEnd,\\n                pool.deadline,\\n                keccak256(abi.encodePacked(encodedPlans))\\n            );\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IMYCStakingManager\",\"name\":\"mycStakingManager_\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"weth_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WrongExecutor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"WithdrawnMYCFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCKED_STAKING_POOL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_PLAN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeToReferral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dateEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokensBeStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableTokensBeStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mycFeesPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSignatureRequired\",\"type\":\"bool\"}],\"internalType\":\"struct StakingPlan[]\",\"name\":\"stakingPlans\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LockedStakingFactory.LockedStakingPool\",\"name\":\"stakingPool\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mycStakingManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LockedStakingFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "15", "ConstructorArguments": "000000000000000000000000db4e7d198530ec11adea1b049528118db70ca01b000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}