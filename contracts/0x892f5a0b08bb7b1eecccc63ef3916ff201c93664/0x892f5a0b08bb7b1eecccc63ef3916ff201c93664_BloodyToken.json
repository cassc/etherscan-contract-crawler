{"SourceCode": "/*\r\n\r\n@@@@@@@   @@@        @@@@@@    @@@@@@   @@@@@@@   @@@ @@@  \r\n@@@@@@@@  @@@       @@@@@@@@  @@@@@@@@  @@@@@@@@  @@@ @@@  \r\n@@!  @@@  @@!       @@!  @@@  @@!  @@@  @@!  @@@  @@! !@@  \r\n!@   @!@  !@!       !@!  @!@  !@!  @!@  !@!  @!@  !@! @!!  \r\n@!@!@!@   @!!       @!@  !@!  @!@  !@!  @!@  !@!   !@!@!   \r\n!!!@!!!!  !!!       !@!  !!!  !@!  !!!  !@!  !!!    @!!!   \r\n!!:  !!!  !!:       !!:  !!!  !!:  !!!  !!:  !!!    !!:    \r\n:!:  !:!   :!:      :!:  !:!  :!:  !:!  :!:  !:!    :!:    \r\n :: ::::   :: ::::  ::::: ::  ::::: ::   :::: ::     ::    \r\n:: : ::   : :: : :   : :  :    : :  :   :: :  :      :\r\n\r\nWebsite: bloodyfi.org\r\n\r\nBLOODY, a deflationary elastic experiment that clots if it \r\ndoesn't circulate\r\n\r\nHow does clotting work?\r\n\r\nWhenever the BLOODY transfer volume increases, everyone's \r\nBLOODY balance gets a little bit bigger, whenever the BLOODY \r\ntransfer volume decreases, everyone's BLOODY balance gets a \r\nlittle bit smaller.\r\n\r\nHow is it deflationary?\r\n\r\nWhenever there's a BLOODY transfer, it spills. The faster it\r\ncirculates, the higher the spill rate.\r\n\r\nHow often are rebases?\r\n\r\nRebases are hourly. After a rebase, transfers are frozen for \r\n5 minutes.\r\n\r\nHow are BLOODY liquidity provider incentivized?\r\n\r\n- Half the spills are redistributed to BLOODY-ETH, BLOODY-ROT \r\nand BLOODY-NICE liquidity providers (up to 6% of ANY transfer).\r\n- A BLOODY-ROT pool will be added to Rottenswap on Halloween.\r\n\r\nHow is BLOODY initially distributed?\r\n\r\nBLOODY cannot be minted, it is ditributed once on Halloween 2020 \r\nto ROT holders with a balance above 7,500. The snapshot block \r\n(11106871) was chosen at random \r\nhttps://twitter.com/TheTimTempleton/status/1320722096578727937\r\n\r\nAre contracts audited?\r\n\r\nBLOODY is written 100% from scratch, not tested nor audited. \r\nIt is not secure, use at your own risk.\r\n\r\nWhat does it BLOODY do?\r\n\r\nNothing, it is an experiment with no purpose.\r\n\r\n*/\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    // EDIT: make balanceOf virtual so it can be overridden\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    // function balanceOf(address account) public view override returns (uint256) {\r\n    //     return _balances[account];\r\n    // }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        // _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        // require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        // _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        // require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        // _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/ERC20TransferBurn.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\ncontract ERC20TransferBurn is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    constructor (string memory name, string memory symbol) ERC20(name, symbol) public {}\r\n\r\n    // the amount of burn during every transfer, i.e. 100 = 1%, 50 = 2%, 40 = 2.5%\r\n    uint256 private _burnDivisor = 100;\r\n\r\n    function burnDivisor() public view virtual returns (uint256) {\r\n        return _burnDivisor;\r\n    }\r\n\r\n    function _setBurnDivisor(uint256 burnDivisor) internal virtual {\r\n        require(burnDivisor > 0, \"_setBurnDivisor burnDivisor must be bigger than 0\");\r\n        _burnDivisor = burnDivisor;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        // calculate burn amount\r\n        uint256 burnAmount = amount.div(_burnDivisor);\r\n        // burn burn amount\r\n        burn(msg.sender, burnAmount);\r\n        // transfer amount minus burn amount\r\n        return super.transfer(recipient, amount.sub(burnAmount));\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        // calculate burn amount\r\n        uint256 burnAmount = amount.div(_burnDivisor);\r\n        // burn burn amount\r\n        burn(sender, burnAmount);\r\n        // transfer amount minus burn amount\r\n        return super.transferFrom(sender, recipient, amount.sub(burnAmount));\r\n    }\r\n\r\n    // keep track of total supply burned (for fun only, serves no purpose)\r\n    uint256 private _totalSupplyBurned;\r\n\r\n    function totalSupplyBurned() public view virtual returns (uint256) {\r\n        return _totalSupplyBurned;\r\n    }\r\n\r\n    function burn(address account, uint256 amount) private {\r\n        _burn(account, amount);\r\n        // keep track of total supply burned\r\n        _totalSupplyBurned = _totalSupplyBurned.add(amount);\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20ElasticTransferBurn.sol\r\n\r\n// ERC20Elastic is duplicated in ERC20Elastic.sol and ERC20ElasticTransferBurn.sol\r\n// because I don't know how to not duplicate it\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract ERC20ElasticTransferBurn is ERC20TransferBurn {\r\n    using SafeMath for uint256;\r\n\r\n    constructor (string memory name, string memory symbol) ERC20TransferBurn(name, symbol) public {}\r\n\r\n    uint256 private _elasticMultiplier = 100;\r\n\r\n    function elasticMultiplier() public view virtual returns (uint256) {\r\n        return _elasticMultiplier;\r\n    }\r\n\r\n    function _setElasticMultiplier(uint256 elasticMultiplier) internal virtual {\r\n        require(elasticMultiplier > 0, \"_setElasticMultiplier elasticMultiplier must be bigger than 0\");\r\n        _elasticMultiplier = elasticMultiplier;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return super.balanceOf(account).mul(_elasticMultiplier);\r\n    }\r\n\r\n    // don't override totalSupply to cause more madness and confusion\r\n    function totalSupplyElastic() public view virtual returns (uint256) {\r\n        return super.totalSupply().mul(_elasticMultiplier);\r\n    }\r\n\r\n    function balanceOfRaw(address account) public view virtual returns (uint256) {\r\n        return super.balanceOf(account);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        return super.transfer(recipient, amount.div(_elasticMultiplier));\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        return super.transferFrom(sender, recipient, amount.div(_elasticMultiplier));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/BloodyToken.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n\r\ncontract BloodyToken is ERC20ElasticTransferBurn(\"BloodyToken\", \"BLOODY\"), Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // store how many transfers have occurred every hour\r\n    // to calculate the burn divisor\r\n    uint256 public transferVolumeNowBucket;\r\n    uint256 public transferVolume1HourAgoBucket;\r\n\r\n    // store the now timestamp to know when it has expired\r\n    uint256 public transferVolumeNowBucketTimestamp;\r\n\r\n    constructor() public {\r\n        // set to arbitrary initial values\r\n        _setBurnDivisor(100);\r\n        _setElasticMultiplier(10);\r\n\r\n        // freeze transfers for 5 minutes after rebase\r\n        // to mitigate users transferring wrong amounts\r\n        transferAfterRebaseFreezeTime = 5 minutes;\r\n\r\n        transferVolumeNowBucketTimestamp = getTransferVolumeNowBucketTimestamp();\r\n    }\r\n\r\n    function getTransferVolumeNowBucketTimestamp() public view returns (uint256) {\r\n        // 3600 seconds per hour\r\n        // round the timestamp bucket every hour\r\n        return block.timestamp - (block.timestamp % 3600);\r\n    }\r\n\r\n    event Rebase(\r\n        uint256 indexed transferVolumeNowBucketTimestamp, uint256 burnDivisor, uint256 elasticMultiplier, \r\n        uint256 transferVolume1HourAgoBucket, uint256 transferVolume2HoursAgoBucket\r\n    );\r\n\r\n    uint256 public lastRebaseTimestamp;\r\n    uint256 public transferAfterRebaseFreezeTime;\r\n\r\n    function rebase() public {\r\n        // time is still in current bucket, does not need updating\r\n        require(requiresRebase() == true, \"someone else called rebase already\");\r\n\r\n        // update volume buckets\r\n        // shift buckets 1 spot\r\n        uint256 transferVolume2HoursAgoBucket = transferVolume1HourAgoBucket;\r\n        transferVolume1HourAgoBucket = transferVolumeNowBucket;\r\n        transferVolumeNowBucket = 0;\r\n\r\n        // store new timestamp\r\n        transferVolumeNowBucketTimestamp = getTransferVolumeNowBucketTimestamp();\r\n\r\n        // mint half the burn to the uniswap pairs\r\n        // make sure to sync the uniswap pairs after\r\n        uint256 uniswapPairReward = transferVolume1HourAgoBucket.div(burnDivisor()).div(2);\r\n        mintToUniswapPairs(uniswapPairReward);\r\n\r\n        // rebase supply and burn rate\r\n        uint256 newBurnDivisor = calculateBurnDivisor(burnDivisor(), transferVolume1HourAgoBucket, transferVolume2HoursAgoBucket);\r\n        // arbitrarily set elastic modifier to 10x the burn rate (10 * 100 / burnDivisor)\r\n        // if bloody circulates, spill rate increases, but clotting decreases\r\n        // if volume increases, burn rate increases (burn divisor decreases), supply increases\r\n        uint256 newElasticMultiplier = uint256(1000).div(newBurnDivisor);\r\n        _setBurnDivisor(newBurnDivisor);\r\n        _setElasticMultiplier(newElasticMultiplier);\r\n        emit Rebase(transferVolumeNowBucketTimestamp, newBurnDivisor, newElasticMultiplier, transferVolume1HourAgoBucket, transferVolume2HoursAgoBucket);\r\n\r\n        // if uniswap pairs are not synced loss of\r\n        // funds will occur after rebase or reward minting\r\n        syncUniswapPairs();\r\n\r\n        // set to false until next rebase\r\n        setRequiresRebase(false);\r\n        lastRebaseTimestamp = block.timestamp;\r\n    }\r\n\r\n    uint256 public constant minBurnPercent = 1;\r\n    uint256 public constant maxBurnPercent = 12;\r\n    // they are inversely correlated\r\n    uint256 public constant minBurnDivisor = 100 / maxBurnPercent;\r\n    uint256 public constant maxBurnDivisor = 100 / minBurnPercent;\r\n\r\n    // if bloody circulates, spill rate increases, but clotting decreases\r\n    // if volume decreases, burn rate decreases (burn divisor increases), supply decreases\r\n    // if supply decreases, price goes up, which stimulates more volume, which in turn\r\n    // increases burn\r\n    // if volume increases, burn rate increases (burn divisor decreases), supply increases\r\n    function calculateBurnDivisor(uint256 _previousBurnDivisor, uint256 _transferVolume1HourAgoBucket, uint256 _transferVolume2HoursAgoBucket) public view returns (uint256) {\r\n        // convert burn divisor to burn percent using division precision\r\n        int256 divisionPrecision = 10000;\r\n        int256 preciseMinBurnPercent = int256(minBurnPercent) * divisionPrecision;\r\n        int256 preciseMaxBurnPercent = int256(maxBurnPercent) * divisionPrecision;\r\n        // don't divide by 0\r\n        if (_previousBurnDivisor == 0) {\r\n            return minBurnDivisor;\r\n        }\r\n        int256 precisePreviousBurnPercent = (100 * divisionPrecision) / int256(_previousBurnDivisor);\r\n\r\n        // no update needed\r\n        if (_transferVolume1HourAgoBucket == _transferVolume2HoursAgoBucket) {\r\n            // never return burn divisor above or below max\r\n            if (precisePreviousBurnPercent < preciseMinBurnPercent) {\r\n                return maxBurnDivisor;\r\n            }\r\n            else if (precisePreviousBurnPercent > preciseMaxBurnPercent) {\r\n                return minBurnDivisor;\r\n            }\r\n            else {\r\n                return _previousBurnDivisor;\r\n            }\r\n        }\r\n\r\n        bool volumeHasIncreased = _transferVolume1HourAgoBucket > _transferVolume2HoursAgoBucket;\r\n\r\n        // check for min / max already reached\r\n        if (volumeHasIncreased) {\r\n            // volume has increased but \r\n            // burn percent is already max (burn divisor is already min)\r\n            if (precisePreviousBurnPercent >= preciseMaxBurnPercent) {\r\n                return minBurnDivisor;\r\n            }\r\n        }\r\n        // volume has decreased\r\n        else {\r\n            // volume has decreased but \r\n            // burn percent is already min (burn divisor is already max)\r\n            if (precisePreviousBurnPercent <= preciseMinBurnPercent) {\r\n                return maxBurnDivisor;\r\n            }\r\n        }\r\n\r\n        // find the transfer volume difference ratio between the 2 hour buckets\r\n        int256 transferVolumeRatio;\r\n        if (_transferVolume1HourAgoBucket == 0) {\r\n            transferVolumeRatio = -int256(_transferVolume2HoursAgoBucket + 1);\r\n        }\r\n        else if (_transferVolume2HoursAgoBucket == 0) {\r\n            transferVolumeRatio = int256(_transferVolume1HourAgoBucket + 1);\r\n        }\r\n        else if (volumeHasIncreased) {\r\n            transferVolumeRatio = int256(_transferVolume1HourAgoBucket / _transferVolume2HoursAgoBucket);\r\n        }\r\n        else {\r\n            transferVolumeRatio = -int256(_transferVolume2HoursAgoBucket / _transferVolume1HourAgoBucket);\r\n        }\r\n\r\n        // find the burn percent modifier and the new burn percent\r\n        // round division to 10000\r\n        int256 preciseNewBurnPercent = calculateBurnPercentFromTransferVolumeRatio(\r\n            precisePreviousBurnPercent,\r\n            transferVolumeRatio * divisionPrecision, \r\n            preciseMinBurnPercent, \r\n            preciseMaxBurnPercent\r\n        );\r\n\r\n        // convert the burn percent back to burn divisor, without forgetting division precision\r\n        return uint256((100 * divisionPrecision) / preciseNewBurnPercent);\r\n    }\r\n\r\n    function calculateBurnPercentFromTransferVolumeRatio(int256 _previousBurnPercent, int256 _transferVolumeRatio, int256 _minBurnPercent, int256 _maxBurnPercent) public pure returns (int256) {\r\n        // this is a pure function, don't use globals min and max\r\n        // because might use division precision\r\n\r\n        // previous burn percent should never be bigger or smaller than max or min\r\n        // but if the exception occurs it messes up the curve\r\n        if (_previousBurnPercent < _minBurnPercent) {\r\n            _previousBurnPercent = _minBurnPercent;\r\n        }\r\n        else if (_previousBurnPercent > _maxBurnPercent) {\r\n            _previousBurnPercent = _maxBurnPercent;\r\n        }\r\n\r\n        // attempt to find burn divisor curve\r\n        int256 burnPercentModifier = _transferVolumeRatio;\r\n        int8 maxAttempt = 5;\r\n        while (true) {\r\n            int256 newBurnPercent = _previousBurnPercent + burnPercentModifier;\r\n            // found burn divisor curve\r\n            if (newBurnPercent < _maxBurnPercent && newBurnPercent > _minBurnPercent) {\r\n                return _previousBurnPercent + burnPercentModifier;\r\n            }\r\n\r\n            // curve formula brings too little change to burn divisor, not worth it\r\n            if (maxAttempt-- == 0) {\r\n                // instead of returning the value very close to the min or max\r\n                // return min or max instead to avoid wasting gas\r\n                if (_transferVolumeRatio > 0) {\r\n                    // if _transferVolumeRatio is positive, burn should increase\r\n                    return _maxBurnPercent;\r\n                }\r\n                else {\r\n                    // bigger than max would give min\r\n                    return _minBurnPercent;\r\n                }\r\n            }\r\n\r\n            // divide by 2 until burnPercent + burnPercentModifier\r\n            // fit between min and max to find the perfect curve\r\n            burnPercentModifier = burnPercentModifier / 2;\r\n        }\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        // if time for rebase, freeze all transfers until someone calls rebase\r\n        require(requiresRebase() == false, \"transfers are frozen until someone calls rebase\");\r\n        require(transfersAreFrozenAfterRebase() == false, \"transfers are frozen for a few minutes after rebase\");\r\n        super.transfer(recipient, amount);\r\n        updateTransferVolume(amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        // if time for rebase, freeze all transfers until someone calls rebase\r\n        require(requiresRebase() == false, \"transfers are frozen until someone calls rebase\");\r\n        require(transfersAreFrozenAfterRebase() == false, \"transfers are frozen for a few minutes after rebase\");\r\n        super.transferFrom(sender, recipient, amount);\r\n        updateTransferVolume(amount);\r\n        return true;\r\n    }\r\n\r\n    function updateTransferVolume(uint256 volume) internal virtual {\r\n        // keep track of transfer volume on each transfer\r\n        // store the volume without elastic multiplier to know the real volume\r\n        transferVolumeNowBucket = transferVolumeNowBucket.add(volume.div(elasticMultiplier()));\r\n\r\n        // if 1 hour has passed, requires new rebase\r\n        if (transferVolumeNowBucketTimestamp != getTransferVolumeNowBucketTimestamp()) {\r\n            setRequiresRebase(true);\r\n        }\r\n    }\r\n\r\n    function transfersAreFrozenAfterRebase() public view returns (bool) {\r\n        // use < and not <= to always stop transfers that occur on the same block as a rebase\r\n        // even if transferAfterRebaseFreezeTime is set to 0\r\n        if (lastRebaseTimestamp + transferAfterRebaseFreezeTime < block.timestamp) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // if should rebase, freeze all transfers until someone calls rebase\r\n    bool private _requiresRebase = false;\r\n    // only require rebase on the next block\r\n    uint256 private lastSetRequiresRebaseTimestamp;\r\n\r\n    function requiresRebase() public view returns (bool) {\r\n        if (_requiresRebase) {\r\n            if (lastSetRequiresRebaseTimestamp < block.timestamp) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function setRequiresRebase (bool value) internal {\r\n        _requiresRebase = value;\r\n        lastSetRequiresRebaseTimestamp = block.timestamp;\r\n    }\r\n\r\n    // mint half the burn to the uniswap pair to incentivize liquidity\r\n    // swapping or providing liquidity on any other pairs will cause\r\n    // loss of funds after every rebase\r\n    address public bloodyEthUniswapPair;\r\n    address public bloodyNiceUniswapPair;\r\n    address public bloodyRotUniswapPair;\r\n\r\n    // called by owner after contract is deployed to set\r\n    // the uniswap pair which receives half the burn to incentivize liquidity\r\n    // then contract ownership is transfered to\r\n    // address 0x0000000000000000000000000000000000000000 and can never be called again\r\n    function setUniswapPairs(address _bloodyEthUniswapPair, address _bloodyNiceUniswapPair, address _bloodyRotUniswapPair) public virtual onlyOwner {\r\n        bloodyEthUniswapPair = _bloodyEthUniswapPair;\r\n        bloodyNiceUniswapPair = _bloodyNiceUniswapPair;\r\n        bloodyRotUniswapPair = _bloodyRotUniswapPair;\r\n    }\r\n\r\n    // mint half the burn to the uniswap pairs\r\n    // make sure to sync the uniswap pairs after\r\n    // reward is half of the burn split into 3 pairs\r\n    function mintToUniswapPairs(uint256 uniswapPairRewardAmount) internal {\r\n        if (uniswapPairRewardAmount == 0) {\r\n            return;\r\n        }\r\n        // reward is half of the burn split into 3 pairs\r\n        uint256 amountPerPair = uniswapPairRewardAmount.div(3);\r\n        if (uniswapPairRewardAmount == 0) {\r\n            return;\r\n        }\r\n        if (bloodyEthUniswapPair != address(0)) {\r\n            _mint(bloodyEthUniswapPair, amountPerPair);\r\n        }\r\n        if (bloodyNiceUniswapPair != address(0)) {\r\n            _mint(bloodyNiceUniswapPair, amountPerPair);\r\n        }\r\n        if (bloodyRotUniswapPair != address(0)) {\r\n            _mint(bloodyRotUniswapPair, amountPerPair);\r\n        }\r\n    }\r\n\r\n    // if uniswap pairs are not synced loss of\r\n    // funds will occur after rebase or reward minting\r\n    function syncUniswapPairs() internal {\r\n        if (bloodyEthUniswapPair != address(0)) {\r\n            IUniswapV2Pair(bloodyEthUniswapPair).sync();\r\n        }\r\n        if (bloodyNiceUniswapPair != address(0)) {\r\n            IUniswapV2Pair(bloodyNiceUniswapPair).sync();\r\n        }\r\n        if (bloodyRotUniswapPair != address(0)) {\r\n            IUniswapV2Pair(bloodyRotUniswapPair).sync();\r\n        }\r\n    }\r\n\r\n    // called by owner after contract is deployed to airdrop\r\n    // tokens to inital holders, then contract ownership is transfered to\r\n    // address 0x0000000000000000000000000000000000000000 and can never be called again\r\n    function airdrop(address[] memory recipients, uint256[] memory amounts) public onlyOwner {\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            _mint(recipients[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    // util external function for website\r\n    function totalSupplyBurnedElastic() external view returns (uint256) {\r\n        return totalSupplyBurned().mul(elasticMultiplier());\r\n    }\r\n\r\n    // util external function for website\r\n    // half the burn is minted to the uniswap pools\r\n    // might not be accurate if uniswap pools aren't set yet\r\n    function totalSupplyBurnedMinusRewards() public view returns (uint256) {\r\n        return totalSupplyBurned().div(2);\r\n    }\r\n\r\n    // util external function for website\r\n    function timeUntilNextRebase() external view returns (uint256) {\r\n        uint256 rebaseTime = transferVolumeNowBucketTimestamp + 3600;\r\n        if (rebaseTime <= block.timestamp) {\r\n            return 0;\r\n        }\r\n        return rebaseTime - block.timestamp;\r\n    }\r\n\r\n    // util external function for website\r\n    function nextRebaseTimestamp() external view returns (uint256) {\r\n        return transferVolumeNowBucketTimestamp + 3600;\r\n    }\r\n\r\n    // util external function for website\r\n    function transfersAreFrozen() external view returns (bool) {\r\n        if (transfersAreFrozenAfterRebase() || requiresRebase()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // util external function for website\r\n    function transfersAreFrozenRequiresRebase() external view returns (bool) {\r\n        return requiresRebase();\r\n    }\r\n\r\n    // util external function for website\r\n    function timeUntilNextTransferAfterRebaseUnfreeze() external view virtual returns (uint256) {\r\n        uint256 unfreezeTime = lastRebaseTimestamp + transferAfterRebaseFreezeTime;\r\n        if (unfreezeTime <= block.timestamp) {\r\n            return 0;\r\n        }\r\n        return unfreezeTime - block.timestamp;\r\n    }\r\n\r\n    // util external function for website\r\n    function nextTransferAfterRebaseUnfreezeTimestamp() external view virtual returns (uint256) {\r\n        return lastRebaseTimestamp + transferAfterRebaseFreezeTime;\r\n    }\r\n\r\n    // util external function for website\r\n    function balanceInUniswapPair(address user, address uniswapPair) public view returns (uint256) {\r\n        if (uniswapPair == address(0)) {\r\n            return 0;\r\n        }\r\n        uint256 pairBloodyBalance = balanceOf(uniswapPair);\r\n        if (pairBloodyBalance == 0) {\r\n            return 0;\r\n        }\r\n        uint256 userLpBalance = IUniswapV2Pair(uniswapPair).balanceOf(user);\r\n        if (userLpBalance == 0) {\r\n            return 0;\r\n        }\r\n        uint256 lpTotalSupply = IUniswapV2Pair(uniswapPair).totalSupply();\r\n        uint256 divisionPrecision = 1e12;\r\n        uint256 userLpTotalOwnershipRatio = userLpBalance.mul(divisionPrecision).div(lpTotalSupply);\r\n        return pairBloodyBalance.mul(userLpTotalOwnershipRatio).div(divisionPrecision);\r\n    }\r\n\r\n    // util external function for website\r\n    function balanceInUniswapPairs(address user) public view returns (uint256) {\r\n        return balanceInUniswapPair(user, bloodyEthUniswapPair)\r\n            .add(balanceInUniswapPair(user, bloodyNiceUniswapPair))\r\n            .add(balanceInUniswapPair(user, bloodyRotUniswapPair));\r\n    }\r\n\r\n    // util external function for website\r\n    function balanceIncludingUniswapPairs(address user) external view returns (uint256) {\r\n        return balanceOf(user).add(balanceInUniswapPairs(user));\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transferVolumeNowBucketTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnDivisor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"elasticMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferVolume1HourAgoBucket\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferVolume2HoursAgoBucket\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapPair\",\"type\":\"address\"}],\"name\":\"balanceInUniswapPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceInUniswapPairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceIncludingUniswapPairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfRaw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bloodyEthUniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bloodyNiceUniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bloodyRotUniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_previousBurnDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferVolume1HourAgoBucket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferVolume2HoursAgoBucket\",\"type\":\"uint256\"}],\"name\":\"calculateBurnDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_previousBurnPercent\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_transferVolumeRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_minBurnPercent\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_maxBurnPercent\",\"type\":\"int256\"}],\"name\":\"calculateBurnPercentFromTransferVolumeRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"elasticMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferVolumeNowBucketTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBurnDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBurnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBurnDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBurnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebaseTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTransferAfterRebaseUnfreezeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiresRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bloodyEthUniswapPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bloodyNiceUniswapPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bloodyRotUniswapPair\",\"type\":\"address\"}],\"name\":\"setUniswapPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeUntilNextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeUntilNextTransferAfterRebaseUnfreeze\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyBurnedElastic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyBurnedMinusRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyElastic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferAfterRebaseFreezeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferVolume1HourAgoBucket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferVolumeNowBucket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferVolumeNowBucketTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersAreFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersAreFrozenAfterRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersAreFrozenRequiresRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BloodyToken", "CompilerVersion": "v0.6.2+commit.bacdbe57", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8004802ec84dcc94442e25491577b7ee0a379b53cfec17e5e98bd9c340139238"}