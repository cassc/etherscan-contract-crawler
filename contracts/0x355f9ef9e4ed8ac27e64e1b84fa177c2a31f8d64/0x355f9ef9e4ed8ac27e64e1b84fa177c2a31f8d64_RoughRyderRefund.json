{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/RoughRyderRefunds.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n// solhint-disable-next-line\\npragma solidity 0.8.20;\\n\\nimport \\\"./IRoughRyderNFT.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract RoughRyderRefund is Ownable {\\n  /// @notice Signer address for encrypted signatures\\n  address public secret;\\n\\n  /// @notice ERC721A token address\\n  address public nftAddress;\\n\\n  /// @notice mapping of refunded tokens\\n  mapping(uint256 => bool) public refunded;\\n\\n  /// @param secretAddress Signer address\\n  /// @param _nftAddress ERC721A token address\\n  constructor(address secretAddress, address _nftAddress) {\\n    secret = secretAddress;\\n    nftAddress = _nftAddress;\\n  }\\n\\n  function requestRefund(\\n    uint256 tokenId,\\n    address tokenAddress,\\n    uint256 balance,\\n    bytes memory signature\\n  ) external {\\n    require(!refunded[tokenId], \\\"requestRefund: Token already refunded\\\");\\n    require(\\n      _verifyHashSignature(\\n        keccak256(\\n          abi.encode(\\n            msg.sender,\\n            tokenId,\\n            tokenAddress,\\n            balance,\\n            \\\"RR: Refund\\\"\\n          )\\n        ),\\n        signature\\n      ),\\n      \\\"requestRefund: Invalid signature\\\"\\n    );\\n\\n    refunded[tokenId] = true;\\n\\n    IRoughRyderNFT(nftAddress).refund(\\n      msg.sender,\\n      tokenId,\\n      tokenAddress,\\n      balance\\n    );\\n  }\\n\\n  /// @notice Verify that message is signed by secret wallet\\n  function _verifyHashSignature(\\n    bytes32 freshHash,\\n    bytes memory signature\\n  ) internal view returns (bool) {\\n    bytes32 hash = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", freshHash)\\n    );\\n\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n\\n    if (signature.length != 65) {\\n      return false;\\n    }\\n    assembly {\\n      r := mload(add(signature, 32))\\n      s := mload(add(signature, 64))\\n      v := byte(0, mload(add(signature, 96)))\\n    }\\n\\n    if (v < 27) {\\n      v += 27;\\n    }\\n\\n    address signer = address(0);\\n    if (v == 27 || v == 28) {\\n      // solium-disable-next-line arg-overflow\\n      signer = ecrecover(hash, v, r, s);\\n    }\\n    return secret == signer;\\n  }\\n\\n  /// OWNABLE FUNCTIONS\\n\\n  /// @notice Change the signer address\\n  /// @param secretAddress new signer for encrypted signatures\\n  /// @dev Can only be called by the contract owner\\n  function setSecret(address secretAddress) external onlyOwner {\\n    secret = secretAddress;\\n  }\\n\\n  function setNftAddress(address _nftAddress) external onlyOwner {\\n    nftAddress = _nftAddress;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/IRoughRyderNFT.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\r\\n\\r\\ninterface IRoughRyderNFT { \\r\\n    function refund(\\r\\n        address depositAddress,\\r\\n        uint256 tokenId,\\r\\n        address tokenAddress,\\r\\n        uint256 balance\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"secretAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"requestRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secret\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"secretAddress\",\"type\":\"address\"}],\"name\":\"setSecret\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RoughRyderRefund", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008246b06ecb7790c579ec137d26b8b37691230e7e00000000000000000000000009101f948aafd081a31d88a04c8e34812079a8f0", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}