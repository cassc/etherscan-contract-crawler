{"SourceCode": "// hevm: flattened sources of src/psm.sol\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity >=0.5.12 >=0.6.12 <0.7.0;\r\n\r\n////// lib/dss-interfaces/src/dss/DaiAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/dai.sol\r\ninterface DaiAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function version() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function nonces(address) external view returns (uint256);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external view returns (bytes32);\r\n    function transfer(address, uint256) external;\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function mint(address, uint256) external;\r\n    function burn(address, uint256) external;\r\n    function approve(address, uint256) external returns (bool);\r\n    function push(address, uint256) external;\r\n    function pull(address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function permit(address, address, uint256, uint256, bool, uint8, bytes32, bytes32) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/DaiJoinAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/join.sol\r\ninterface DaiJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function vat() external view returns (address);\r\n    function dai() external view returns (address);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n////// lib/dss-interfaces/src/dss/VatAbstract.sol\r\n/* pragma solidity >=0.5.12; */\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ninterface VatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address, address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function gem(bytes32, address) external view returns (uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function sin(address) external view returns (uint256);\r\n    function debt() external view returns (uint256);\r\n    function vice() external view returns (uint256);\r\n    function Line() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function cage() external;\r\n    function slip(bytes32, address, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function grab(bytes32, address, address, address, int256, int256) external;\r\n    function heal(uint256) external;\r\n    function suck(address, address, uint256) external;\r\n    function fold(bytes32, address, int256) external;\r\n}\r\n\r\n////// src/psm.sol\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n/* pragma solidity ^0.6.12; */\r\n\r\n/* import { DaiJoinAbstract } from \"dss-interfaces/dss/DaiJoinAbstract.sol\"; */\r\n/* import { DaiAbstract } from \"dss-interfaces/dss/DaiAbstract.sol\"; */\r\n/* import { VatAbstract } from \"dss-interfaces/dss/VatAbstract.sol\"; */\r\n\r\ninterface AuthGemJoinAbstract {\r\n    function dec() external view returns (uint256);\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function join(address, uint256, address) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n// Peg Stability Module\r\n// Allows anyone to go between Dai and the Gem by pooling the liquidity\r\n// An optional fee is charged for incoming and outgoing transfers\r\n\r\ncontract DssPsm {\r\n\r\n    // --- Auth ---\r\n    mapping (address => uint256) public wards;\r\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\r\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\r\n    modifier auth { require(wards[msg.sender] == 1); _; }\r\n\r\n    VatAbstract immutable public vat;\r\n    AuthGemJoinAbstract immutable public gemJoin;\r\n    DaiAbstract immutable public dai;\r\n    DaiJoinAbstract immutable public daiJoin;\r\n    bytes32 immutable public ilk;\r\n    address immutable public vow;\r\n\r\n    uint256 immutable internal to18ConversionFactor;\r\n\r\n    uint256 public tin;         // toll in [wad]\r\n    uint256 public tout;        // toll out [wad]\r\n\r\n    // --- Events ---\r\n    event Rely(address indexed usr);\r\n    event Deny(address indexed usr);\r\n    event File(bytes32 indexed what, uint256 data);\r\n    event SellGem(address indexed owner, uint256 value, uint256 fee);\r\n    event BuyGem(address indexed owner, uint256 value, uint256 fee);\r\n\r\n    // --- Init ---\r\n    constructor(address gemJoin_, address daiJoin_, address vow_) public {\r\n        wards[msg.sender] = 1;\r\n        emit Rely(msg.sender);\r\n        AuthGemJoinAbstract gemJoin__ = gemJoin = AuthGemJoinAbstract(gemJoin_);\r\n        DaiJoinAbstract daiJoin__ = daiJoin = DaiJoinAbstract(daiJoin_);\r\n        VatAbstract vat__ = vat = VatAbstract(address(gemJoin__.vat()));\r\n        DaiAbstract dai__ = dai = DaiAbstract(address(daiJoin__.dai()));\r\n        ilk = gemJoin__.ilk();\r\n        vow = vow_;\r\n        to18ConversionFactor = 10 ** (18 - gemJoin__.dec());\r\n        dai__.approve(daiJoin_, uint256(-1));\r\n        vat__.hope(daiJoin_);\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 constant WAD = 10 ** 18;\r\n    uint256 constant RAY = 10 ** 27;\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    // --- Administration ---\r\n    function file(bytes32 what, uint256 data) external auth {\r\n        if (what == \"tin\") tin = data;\r\n        else if (what == \"tout\") tout = data;\r\n        else revert(\"DssPsm/file-unrecognized-param\");\r\n\r\n        emit File(what, data);\r\n    }\r\n\r\n    // hope can be used to transfer control of the PSM vault to another contract\r\n    // This can be used to upgrade the contract\r\n    function hope(address usr) external auth {\r\n        vat.hope(usr);\r\n    }\r\n    function nope(address usr) external auth {\r\n        vat.nope(usr);\r\n    }\r\n\r\n    // --- Primary Functions ---\r\n    function sellGem(address usr, uint256 gemAmt) external {\r\n        uint256 gemAmt18 = mul(gemAmt, to18ConversionFactor);\r\n        uint256 fee = mul(gemAmt18, tin) / WAD;\r\n        uint256 daiAmt = sub(gemAmt18, fee);\r\n        gemJoin.join(address(this), gemAmt, msg.sender);\r\n        vat.frob(ilk, address(this), address(this), address(this), int256(gemAmt18), int256(gemAmt18));\r\n        vat.move(address(this), vow, mul(fee, RAY));\r\n        daiJoin.exit(usr, daiAmt);\r\n\r\n        emit SellGem(usr, gemAmt, fee);\r\n    }\r\n\r\n    function buyGem(address usr, uint256 gemAmt) external {\r\n        uint256 gemAmt18 = mul(gemAmt, to18ConversionFactor);\r\n        uint256 fee = mul(gemAmt18, tout) / WAD;\r\n        uint256 daiAmt = add(gemAmt18, fee);\r\n        require(dai.transferFrom(msg.sender, address(this), daiAmt), \"DssPsm/failed-transfer\");\r\n        daiJoin.join(address(this), daiAmt);\r\n        vat.frob(ilk, address(this), address(this), address(this), -int256(gemAmt18), -int256(gemAmt18));\r\n        gemJoin.exit(usr, gemAmt);\r\n        vat.move(address(this), vow, mul(fee, RAY));\r\n\r\n        emit BuyGem(usr, gemAmt, fee);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vow_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BuyGem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SellGem\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gemAmt\",\"type\":\"uint256\"}],\"name\":\"buyGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract DaiAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract DaiJoinAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemJoin\",\"outputs\":[{\"internalType\":\"contract AuthGemJoinAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"hope\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"nope\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gemAmt\",\"type\":\"uint256\"}],\"name\":\"sellGem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DssPsm", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007bbd8ca5e413bca521c2c80d8d1908616894cf210000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28000000000000000000000000a950524441892a31ebddf91d3ceefa04bf454466", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2387b01d82fcfe8fd32f3ef35669990d22bcb8c86ab6b0d28db3564eb0f25343"}