{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/v2/OmniseaDropsRepository.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./OmniseaONFT721Psi.sol\\\";\\r\\nimport \\\"../interfaces/IOmniseaDropsRepository.sol\\\";\\r\\nimport { CreateParams } from \\\"../structs/erc721/ERC721Structs.sol\\\";\\r\\n\\r\\ncontract OmniseaDropsRepository is IOmniseaDropsRepository {\\r\\n    address public dropsFactory;\\r\\n    address public dropsManager;\\r\\n    address public owner;\\r\\n    mapping(address => address[]) public userCollections;\\r\\n    mapping(address => bool) public collections;\\r\\n\\r\\n    constructor () {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function create(\\r\\n        CreateParams calldata _params,\\r\\n        address _creator\\r\\n    ) external override {\\r\\n        require(msg.sender == dropsFactory);\\r\\n\\r\\n        OmniseaONFT721Psi collection = new OmniseaONFT721Psi(_params, _creator, dropsManager);\\r\\n        userCollections[_creator].push(address(collection));\\r\\n        collections[address(collection)] = true;\\r\\n    }\\r\\n\\r\\n    function getAllByUser(address user) external view returns (address[] memory) {\\r\\n        return userCollections[user];\\r\\n    }\\r\\n\\r\\n    function setFactory(address factory) external {\\r\\n        require(msg.sender == owner);\\r\\n        dropsFactory = factory;\\r\\n    }\\r\\n\\r\\n    function setManager(address factory) external {\\r\\n        require(msg.sender == owner);\\r\\n        dropsManager = factory;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/v2/OmniseaONFT721Psi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"../interfaces/IOmniseaONFT721Psi.sol\\\";\\r\\nimport \\\"../interfaces/IOmniseaDropsScheduler.sol\\\";\\r\\nimport \\\"../interfaces/IERC2981Royalties.sol\\\";\\r\\nimport \\\"../onft/ONFT721Core.sol\\\";\\r\\nimport {CreateParams, Phase} from \\\"../structs/erc721/ERC721Structs.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"../ERC721Psi/ERC721Psi.sol\\\";\\r\\n\\r\\ncontract OmniseaONFT721Psi is ONFT721Core, IOmniseaONFT721Psi, ERC721Psi {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    IOmniseaDropsScheduler private immutable _scheduler = IOmniseaDropsScheduler(0x6ef0871ed810f323eA516A77B0988353b667dfa4);\\r\\n\\r\\n    // Basic\\r\\n    uint24 public maxSupply;\\r\\n    string public collectionURI;\\r\\n    address public dropsManager;\\r\\n    bool public isZeroIndexed;\\r\\n    string public tokensURI;\\r\\n    uint256 endTime;\\r\\n\\r\\n    constructor(\\r\\n        CreateParams memory params,\\r\\n        address _owner,\\r\\n        address _dropsManagerAddress\\r\\n    ) ERC721Psi(params.name, params.symbol) ONFT721Core(250000, address(0x66A71Dcef29A0fFBDBE3c6a460a3B5BC225Cd675)) {\\r\\n        dropsManager = _dropsManagerAddress;\\r\\n        tokensURI = params.tokensURI;\\r\\n        maxSupply = params.maxSupply;\\r\\n        collectionURI = params.uri;\\r\\n        isZeroIndexed = params.isZeroIndexed;\\r\\n        endTime = params.endTime;\\r\\n        _setNextTokenId(isZeroIndexed ? 0 : 1);\\r\\n        owner = _owner;\\r\\n        royaltyAmount = params.royaltyAmount;\\r\\n    }\\r\\n\\r\\n    function contractURI() public view returns (string memory) {\\r\\n        return string(abi.encodePacked(\\\"ipfs://\\\", collectionURI));\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\\r\\n        if (maxSupply == 0 || bytes(tokensURI).length == 0) {\\r\\n            return contractURI();\\r\\n        }\\r\\n\\r\\n        return string(abi.encodePacked(\\\"ipfs://\\\", tokensURI, \\\"/\\\", tokenId.toString(), \\\".json\\\"));\\r\\n    }\\r\\n\\r\\n    function mint(address _minter, uint24 _quantity, bytes32[] memory _merkleProof, uint8 _phaseId) external override nonReentrant {\\r\\n        require(msg.sender == dropsManager);\\r\\n        require(isAllowed(_minter, _quantity, _merkleProof, _phaseId), \\\"!isAllowed\\\");\\r\\n        _scheduler.increasePhaseMintedCount(_minter, _phaseId, _quantity);\\r\\n        _mint(_minter, _quantity);\\r\\n    }\\r\\n\\r\\n    function mintPrice(uint8 _phaseId) public view override returns (uint256) {\\r\\n        return _scheduler.mintPrice(_phaseId);\\r\\n    }\\r\\n\\r\\n    function getOwner() external view override returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    function isAllowed(address _account, uint24 _quantity, bytes32[] memory _merkleProof, uint8 _phaseId) internal view returns (bool) {\\r\\n        require(block.timestamp < endTime);\\r\\n        uint256 _newTotalMinted = totalMinted() + _quantity;\\r\\n        if (maxSupply > 0) require(maxSupply >= _newTotalMinted);\\r\\n\\r\\n        return _scheduler.isAllowed(_account, _quantity, _merkleProof, _phaseId);\\r\\n    }\\r\\n\\r\\n    function setPhase(\\r\\n        uint8 _phaseId,\\r\\n        uint256 _from,\\r\\n        uint256 _to,\\r\\n        bytes32 _merkleRoot,\\r\\n        uint24 _maxPerAddress,\\r\\n        uint256 _price\\r\\n    ) external onlyOwner {\\r\\n        _scheduler.setPhase(_phaseId, _from, _to, _merkleRoot, _maxPerAddress, _price);\\r\\n    }\\r\\n\\r\\n    function setTokensURI(string memory _uri) external onlyOwner {\\r\\n        require(block.timestamp < endTime);\\r\\n        tokensURI = _uri;\\r\\n    }\\r\\n\\r\\n    function preMintToTeam(uint256 _quantity) external onlyOwner {\\r\\n        require(block.timestamp < endTime);\\r\\n        if (maxSupply > 0) require(maxSupply >= totalMinted() + _quantity);\\r\\n        _safeMint(owner, _quantity);\\r\\n    }\\r\\n\\r\\n    function setTrustedRemoteAndLimits(\\r\\n        uint16 _remoteChainId,\\r\\n        bytes calldata _remoteAddress,\\r\\n        uint256 _dstChainIdToTransferGas,\\r\\n        uint256 _dstChainIdToBatchLimit\\r\\n    ) external onlyOwner {\\r\\n        require(_dstChainIdToTransferGas > 0 && _dstChainIdToBatchLimit > 0);\\r\\n        dstChainIdToTransferGas[_remoteChainId] = _dstChainIdToTransferGas;\\r\\n        dstChainIdToBatchLimit[_remoteChainId] = _dstChainIdToBatchLimit;\\r\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\r\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\r\\n    }\\r\\n\\r\\n    function _startTokenId() internal view override returns (uint256) {\\r\\n        return isZeroIndexed ? 0 : 1;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Psi, ONFT721Core) returns (bool) {\\r\\n        return interfaceId == type(IOmniseaONFT721Psi).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function _debitFrom(address _from, uint16, bytes memory, uint _tokenId) internal virtual override {\\r\\n        require(ownerOf(_tokenId) == _from);\\r\\n        require(_isApprovedOrOwner(_from, _tokenId));\\r\\n        transferFrom(_from, address(this), _tokenId);\\r\\n    }\\r\\n\\r\\n    function _creditTo(uint16, address _toAddress, uint _tokenId) internal virtual override {\\r\\n        require(_exists(_tokenId) && ownerOf(_tokenId) == address(this));\\r\\n        transferFrom(address(this), _toAddress, _tokenId);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IOmniseaDropsRepository.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport {CreateParams} from \\\"../structs/erc721/ERC721Structs.sol\\\";\\r\\n\\r\\ninterface IOmniseaDropsRepository {\\r\\n    function create(CreateParams calldata params, address creator) external;\\r\\n    function collections(address collection) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/structs/erc721/ERC721Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nstruct CreateParams {\\r\\n    string name;\\r\\n    string symbol;\\r\\n    string uri;\\r\\n    string tokensURI;\\r\\n    uint24 maxSupply;\\r\\n    bool isZeroIndexed;\\r\\n    uint24 royaltyAmount;\\r\\n    uint256 endTime;\\r\\n}\\r\\n\\r\\nstruct MintParams {\\r\\n    address collection;\\r\\n    uint24 quantity;\\r\\n    bytes32[] merkleProof;\\r\\n    uint8 phaseId;\\r\\n}\\r\\n\\r\\nstruct OmnichainMintParams {\\r\\n    address collection;\\r\\n    uint24 quantity;\\r\\n    uint256 paid;\\r\\n    uint8 phaseId;\\r\\n    address minter;\\r\\n}\\r\\n\\r\\nstruct Phase {\\r\\n    uint256 from;\\r\\n    uint256 to;\\r\\n    uint24 maxPerAddress;\\r\\n    uint256 price;\\r\\n    bytes32 merkleRoot;\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IOmniseaONFT721Psi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface IOmniseaONFT721Psi {\\r\\n    function mint(address minter, uint24 quantity, bytes32[] memory _merkleProof, uint8 _phaseId) external;\\r\\n    function mintPrice(uint8 _phaseId) external view returns (uint256);\\r\\n    function getOwner() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IOmniseaDropsScheduler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport {Phase} from \\\"../structs/erc721/ERC721Structs.sol\\\";\\r\\n\\r\\ninterface IOmniseaDropsScheduler {\\r\\n    function isAllowed(address _account, uint24 _quantity, bytes32[] memory _merkleProof, uint8 _phaseId) external view returns (bool);\\r\\n    function setPhase(\\r\\n        uint8 _phaseId,\\r\\n        uint256 _from,\\r\\n        uint256 _to,\\r\\n        bytes32 _merkleRoot,\\r\\n        uint24 _maxPerAddress,\\r\\n        uint256 _price\\r\\n    ) external;\\r\\n    function increasePhaseMintedCount(address _account,uint8 _phaseId, uint24 _quantity) external;\\r\\n    function mintPrice(uint8 _phaseId) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IERC2981Royalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC2981Royalties {\\r\\n    function royaltyInfo(uint256 _tokenId, uint256 _value) external view returns (address _receiver, uint256 _royaltyAmount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/onft/ONFT721Core.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IONFT721Core.sol\\\";\\nimport \\\"../lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"../interfaces/IERC2981Royalties.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nabstract contract ONFT721Core is NonblockingLzApp, ERC165, ReentrancyGuard, IONFT721Core, IERC2981Royalties {\\n    uint16 public constant FUNCTION_TYPE_SEND = 1;\\n    uint private constant BP_DENOMINATOR = 10000;\\n    uint16 public feeBp;\\n    address internal revenueManager;\\n    uint24 public royaltyAmount;\\n\\n    struct StoredCredit {\\n        uint16 srcChainId;\\n        address toAddress;\\n        uint256 index;\\n        bool creditsRemain;\\n    }\\n\\n    uint256 public minGasToTransferAndStore; // min amount of gas required to transfer, and also store the payload\\n    mapping(uint16 => uint256) public dstChainIdToBatchLimit;\\n    mapping(uint16 => uint256) public dstChainIdToTransferGas; // per transfer amount of gas required to mint/transfer on the dst\\n    mapping(bytes32 => StoredCredit) public storedCredits;\\n\\n    constructor(uint256 _minGasToTransferAndStore, address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {\\n        require(_minGasToTransferAndStore > 0);\\n        minGasToTransferAndStore = _minGasToTransferAndStore;\\n        revenueManager = address(0x61104fBe07ecc735D8d84422c7f045f8d29DBf15);\\n        feeBp = 1000;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC2981Royalties).interfaceId\\n        || interfaceId == type(IONFT721Core).interfaceId\\n        || super.supportsInterface(interfaceId);\\n    }\\n\\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        return estimateSendBatchFee(_dstChainId, _toAddress, _toSingletonArray(_tokenId), _useZro, _adapterParams);\\n    }\\n\\n    function estimateSendBatchFee(uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        bytes memory payload = abi.encode(_toAddress, _tokenIds);\\n        (nativeFee, zroFee) = lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n        uint fee = nativeFee * feeBp / BP_DENOMINATOR;\\n        nativeFee += fee;\\n    }\\n\\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\\n        _send(_from, _dstChainId, _toAddress, _toSingletonArray(_tokenId), _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function sendBatchFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\\n        _send(_from, _dstChainId, _toAddress, _tokenIds, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\\n        require(_tokenIds.length > 0, \\\"tokenIds[] is empty\\\");\\n        require(_tokenIds.length <= dstChainIdToBatchLimit[_dstChainId], \\\"batch size exceeds dst batch limit\\\");\\n\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            _debitFrom(_from, _dstChainId, _toAddress, _tokenIds[i]);\\n        }\\n\\n        bytes memory payload = abi.encode(_toAddress, _tokenIds);\\n        _checkGasLimit(_dstChainId, FUNCTION_TYPE_SEND, _adapterParams, dstChainIdToTransferGas[_dstChainId] * _tokenIds.length);\\n        (uint nativeFee) = _payONFTFee(msg.value);\\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams, nativeFee);\\n        emit SendToChain(_dstChainId, _from, _toAddress, _tokenIds);\\n    }\\n\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64, /*_nonce*/\\n        bytes memory _payload\\n    ) internal virtual override {\\n        (bytes memory toAddressBytes, uint[] memory tokenIds) = abi.decode(_payload, (bytes, uint[]));\\n\\n        address toAddress;\\n        assembly {\\n            toAddress := mload(add(toAddressBytes, 20))\\n        }\\n\\n        uint nextIndex = _creditTill(_srcChainId, toAddress, 0, tokenIds);\\n        if (nextIndex < tokenIds.length) {\\n            // not enough gas to complete transfers, store to be cleared in another tx\\n            bytes32 hashedPayload = keccak256(_payload);\\n            storedCredits[hashedPayload] = StoredCredit(_srcChainId, toAddress, nextIndex, true);\\n            emit CreditStored(hashedPayload, _payload);\\n        }\\n\\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenIds);\\n    }\\n\\n    // Public function for anyone to clear and deliver the remaining batch sent tokenIds\\n    function clearCredits(bytes memory _payload) external virtual nonReentrant {\\n        bytes32 hashedPayload = keccak256(_payload);\\n        require(storedCredits[hashedPayload].creditsRemain);\\n\\n        (,uint[] memory tokenIds) = abi.decode(_payload, (bytes, uint[]));\\n\\n        uint nextIndex = _creditTill(storedCredits[hashedPayload].srcChainId, storedCredits[hashedPayload].toAddress, storedCredits[hashedPayload].index, tokenIds);\\n        require(nextIndex > storedCredits[hashedPayload].index);\\n\\n        if (nextIndex == tokenIds.length) {\\n            // cleared the credits, delete the element\\n            delete storedCredits[hashedPayload];\\n            emit CreditCleared(hashedPayload);\\n        } else {\\n            // store the next index to mint\\n            storedCredits[hashedPayload] = StoredCredit(storedCredits[hashedPayload].srcChainId, storedCredits[hashedPayload].toAddress, nextIndex, true);\\n        }\\n    }\\n\\n    // When a srcChain has the ability to transfer more chainIds in a single tx than the dst can do.\\n    // Needs the ability to iterate and stop if the minGasToTransferAndStore is not met\\n    function _creditTill(uint16 _srcChainId, address _toAddress, uint _startIndex, uint[] memory _tokenIds) internal returns (uint256){\\n        uint i = _startIndex;\\n        while (i < _tokenIds.length) {\\n            // if not enough gas to process, store this index for next loop\\n            if (gasleft() < minGasToTransferAndStore) break;\\n\\n            _creditTo(_srcChainId, _toAddress, _tokenIds[i]);\\n            i++;\\n        }\\n\\n        // indicates the next index to send of tokenIds,\\n        // if i == tokenIds.length, we are finished\\n        return i;\\n    }\\n\\n    function setMinGasToTransferAndStore(uint256 _minGasToTransferAndStore) external onlyOwner {\\n        require(_minGasToTransferAndStore > 0);\\n        minGasToTransferAndStore = _minGasToTransferAndStore;\\n    }\\n\\n    // ensures enough gas in adapter params to handle batch transfer gas amounts on the dst\\n    function setDstChainIdToTransferGas(uint16 _dstChainId, uint256 _dstChainIdToTransferGas) external onlyOwner {\\n        require(_dstChainIdToTransferGas > 0);\\n        dstChainIdToTransferGas[_dstChainId] = _dstChainIdToTransferGas;\\n    }\\n\\n    // limit on src the amount of tokens to batch send\\n    function setDstChainIdToBatchLimit(uint16 _dstChainId, uint256 _dstChainIdToBatchLimit) external onlyOwner {\\n        require(_dstChainIdToBatchLimit > 0);\\n        dstChainIdToBatchLimit[_dstChainId] = _dstChainIdToBatchLimit;\\n    }\\n\\n    function setRevenueManager(address _manager) external {\\n        require(msg.sender == revenueManager);\\n        revenueManager = _manager;\\n    }\\n\\n    function setFeeBp(uint16 _feeBp) public virtual {\\n        require(msg.sender == revenueManager);\\n        require(_feeBp <= BP_DENOMINATOR);\\n        feeBp = _feeBp;\\n    }\\n\\n    function _payONFTFee(uint _nativeFee) internal virtual returns (uint amount) {\\n        uint fee = _nativeFee * feeBp / BP_DENOMINATOR;\\n        amount = _nativeFee - fee;\\n        if (fee > 0) {\\n            (bool p,) = payable(revenueManager).call{value : (fee)}(\\\"\\\");\\n            require(p, \\\"!fee\\\");\\n        }\\n    }\\n\\n    function royaltyInfo(uint256, uint256 value) external view returns (address _receiver, uint256 _royaltyAmount) {\\n        _receiver = owner;\\n        _royaltyAmount = (value * royaltyAmount) / 10000;\\n    }\\n\\n    function setRoyaltyAmount(uint24 _amount) external onlyOwner {\\n        royaltyAmount = _amount;\\n    }\\n\\n    function transferOwnership(address _owner) external onlyOwner {\\n        owner = _owner;\\n    }\\n\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId) internal virtual;\\n\\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _tokenId) internal virtual;\\n\\n    function _toSingletonArray(uint element) internal pure returns (uint[] memory) {\\n        uint[] memory array = new uint[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/ERC721Psi/ERC721Psi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n  ______ _____   _____ ______ ___  __ _  _  _ \\r\\n |  ____|  __ \\\\ / ____|____  |__ \\\\/_ | || || |\\r\\n | |__  | |__) | |        / /   ) || | \\\\| |/ |\\r\\n |  __| |  _  /| |       / /   / / | |\\\\_   _/ \\r\\n | |____| | \\\\ \\\\| |____  / /   / /_ | |  | |   \\r\\n |______|_|  \\\\_\\\\\\\\_____|/_/   |____||_|  |_|   \\r\\n\\r\\n - github: https://github.com/estarriolvetch/ERC721Psi\\r\\n - npm: https://www.npmjs.com/package/erc721psi\\r\\n                                          \\r\\n */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"./solidity-bits/BitMaps.sol\\\";\\r\\n\\r\\n\\r\\ncontract ERC721Psi is ERC165, IERC721 {\\r\\n    using Strings for uint256;\\r\\n    using BitMaps for BitMaps.BitMap;\\r\\n\\r\\n    BitMaps.BitMap private _batchHead;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    mapping(uint256 => address) internal _owners;\\r\\n    uint256 private _currentIndex;\\r\\n\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\r\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\r\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    function _startTokenId() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function _setNextTokenId(uint256 _index) internal virtual {\\r\\n        require(_currentIndex == 0);\\r\\n        _currentIndex = _index;\\r\\n    }\\r\\n\\r\\n    function _nextTokenId() internal view virtual returns (uint256) {\\r\\n        return _currentIndex;\\r\\n    }\\r\\n\\r\\n    function totalMinted() public view virtual returns (uint256) {\\r\\n        return _currentIndex - _startTokenId();\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC165, IERC165)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address owner)\\r\\n        public \\r\\n        view \\r\\n        virtual \\r\\n        override \\r\\n        returns (uint) \\r\\n    {\\r\\n        require(owner != address(0), \\\"ERC721Psi: balance query for the zero address\\\");\\r\\n\\r\\n        uint count;\\r\\n        for( uint i = _startTokenId(); i < _nextTokenId(); ++i ){\\r\\n            if(_exists(i)){\\r\\n                if( owner == ownerOf(i)){\\r\\n                    ++count;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    function ownerOf(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        (address owner, ) = _ownerAndBatchHeadOf(tokenId);\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    function _ownerAndBatchHeadOf(uint256 tokenId) internal view returns (address owner, uint256 tokenIdBatchHead){\\r\\n        require(_exists(tokenId), \\\"ERC721Psi: owner query for nonexistent token\\\");\\r\\n        tokenIdBatchHead = _getBatchHead(tokenId);\\r\\n        owner = _owners[tokenIdBatchHead];\\r\\n    }\\r\\n\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721Psi: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\\r\\n            \\\"ERC721Psi: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function getApproved(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Psi: approved query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        require(operator != msg.sender, \\\"ERC721Psi: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[msg.sender][operator] = approved;\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    function isApprovedForAll(address owner, address operator)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        require(\\r\\n            _isApprovedOrOwner(msg.sender, tokenId),\\r\\n            \\\"ERC721Psi: transfer caller is not owner nor approved\\\"\\r\\n        );\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(\\r\\n            _isApprovedOrOwner(msg.sender, tokenId),\\r\\n            \\\"ERC721Psi: transfer caller is not owner nor approved\\\"\\r\\n        );\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(from, to, tokenId, 1,_data),\\r\\n            \\\"ERC721Psi: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return tokenId < _nextTokenId() && _startTokenId() <= tokenId;\\r\\n    }\\r\\n\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Psi: operator query for nonexistent token\\\"\\r\\n        );\\r\\n        address owner = ownerOf(tokenId);\\r\\n        return (spender == owner ||\\r\\n            getApproved(tokenId) == spender ||\\r\\n            isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\r\\n        _safeMint(to, quantity, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        uint256 nextTokenId = _nextTokenId();\\r\\n        _mint(to, quantity);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, nextTokenId, quantity, _data),\\r\\n            \\\"ERC721Psi: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    function _mint(\\r\\n        address to,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {\\r\\n        uint256 nextTokenId = _nextTokenId();\\r\\n        \\r\\n        require(quantity > 0, \\\"ERC721Psi: quantity must be greater 0\\\");\\r\\n        require(to != address(0), \\\"ERC721Psi: mint to the zero address\\\");\\r\\n        \\r\\n        _beforeTokenTransfers(address(0), to, nextTokenId, quantity);\\r\\n        _currentIndex += quantity;\\r\\n        _owners[nextTokenId] = to;\\r\\n        _batchHead.set(nextTokenId);\\r\\n\\r\\n        uint256 toMasked;\\r\\n        uint256 end = nextTokenId + quantity;\\r\\n\\r\\n        assembly {\\r\\n            toMasked := and(to, _BITMASK_ADDRESS)\\r\\n            log4(\\r\\n                0,\\r\\n                0,\\r\\n                _TRANSFER_EVENT_SIGNATURE,\\r\\n                0,\\r\\n                toMasked,\\r\\n                nextTokenId\\r\\n            )\\r\\n\\r\\n            for {\\r\\n                let tokenId := add(nextTokenId, 1)\\r\\n            } iszero(eq(tokenId, end)) {\\r\\n                tokenId := add(tokenId, 1)\\r\\n            } {\\r\\n                log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _afterTokenTransfers(address(0), to, nextTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        (address owner, uint256 tokenIdBatchHead) = _ownerAndBatchHeadOf(tokenId);\\r\\n\\r\\n        require(\\r\\n            owner == from,\\r\\n            \\\"ERC721Psi: transfer of token that is not own\\\"\\r\\n        );\\r\\n        require(to != address(0), \\\"ERC721Psi: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        uint256 subsequentTokenId = tokenId + 1;\\r\\n\\r\\n        if(!_batchHead.get(subsequentTokenId) &&  \\r\\n            subsequentTokenId < _nextTokenId()\\r\\n        ) {\\r\\n            _owners[subsequentTokenId] = from;\\r\\n            _batchHead.set(subsequentTokenId);\\r\\n        }\\r\\n\\r\\n        _owners[tokenId] = to;\\r\\n        if(tokenId != tokenIdBatchHead) {\\r\\n            _batchHead.set(tokenId);\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n\\r\\n        _afterTokenTransfers(from, to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool r) {\\r\\n        if (isContract(to)) {\\r\\n            r = true;\\r\\n            for(uint256 tokenId = startTokenId; tokenId < startTokenId + quantity; tokenId++){\\r\\n                try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\\r\\n                    r = r && retval == IERC721Receiver.onERC721Received.selector;\\r\\n                } catch (bytes memory reason) {\\r\\n                    if (reason.length == 0) {\\r\\n                        revert(\\\"ERC721Psi: transfer to non ERC721Receiver implementer\\\");\\r\\n                    } else {\\r\\n                        assembly {\\r\\n                            revert(add(32, reason), mload(reason))\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            return r;\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getBatchHead(uint256 tokenId) internal view returns (uint256 tokenIdBatchHead) {\\r\\n        tokenIdBatchHead = _batchHead.scanForward(tokenId); \\r\\n    }\\r\\n\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public virtual view returns (uint256) {\\r\\n        return totalMinted();\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    function _afterTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/contracts/onft/IONFT721Core.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the ONFT Core standard\\n */\\ninterface IONFT721Core is IERC165 {\\n    /**\\n     * @dev Emitted when `_tokenIds[]` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce from\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes indexed _toAddress, uint[] _tokenIds);\\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint[] _tokenIds);\\n\\n    /**\\n     * @dev Emitted when `_payload` was received from lz, but not enough gas to deliver all tokenIds\\n     */\\n    event CreditStored(bytes32 _hashedPayload, bytes _payload);\\n    /**\\n     * @dev Emitted when `_hashedPayload` has been completely delivered\\n     */\\n    event CreditCleared(bytes32 _hashedPayload);\\n\\n    event CallONFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, address indexed _receiver);\\n\\n    /**\\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _tokenId - token Id to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send tokens `_tokenIds[]` to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendBatchFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint[] calldata _tokenIds, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _tokenIds[] - token Ids to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendBatchFee(uint16 _dstChainId, bytes calldata _toAddress, uint[] calldata _tokenIds, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n}\\n\"\r\n    },\r\n    \"src/contracts/lzApp/NonblockingLzApp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../util/ExcessivelySafeCall.sol\\\";\\n\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\n        require(msg.sender == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/contracts/lzApp/LzApp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../util/BytesLib.sol\\\";\\n\\nabstract contract LzApp is ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    address public owner;\\n\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"LzApp: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n        owner = msg.sender;\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        require(msg.sender == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0);\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/util/ExcessivelySafeCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/ILayerZeroReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    function setSendVersion(uint16 _version) external;\\n\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/ILayerZeroEndpoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    function getChainId() external view returns (uint16);\\n\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    function isSendingPayload() external view returns (bool);\\n\\n    function isReceivingPayload() external view returns (bool);\\n\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"src/contracts/util/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"src/contracts/ERC721Psi/solidity-bits/BitMaps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n   _____       ___     ___ __           ____  _ __      \\r\\n  / ___/____  / (_)___/ (_) /___  __   / __ )(_) /______\\r\\n  \\\\__ \\\\/ __ \\\\/ / / __  / / __/ / / /  / __  / / __/ ___/\\r\\n ___/ / /_/ / / / /_/ / / /_/ /_/ /  / /_/ / / /_(__  ) \\r\\n/____/\\\\____/_/_/\\\\__,_/_/\\\\__/\\\\__, /  /_____/_/\\\\__/____/  \\r\\n                           /____/                        \\r\\n\\r\\n- npm: https://www.npmjs.com/package/solidity-bits\\r\\n- github: https://github.com/estarriolvetch/solidity-bits\\r\\n\\r\\n */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./BitScan.sol\\\";\\r\\n\\r\\nlibrary BitMaps {\\r\\n    using BitScan for uint256;\\r\\n    uint256 private constant MASK_INDEX_ZERO = (1 << 255);\\r\\n    uint256 private constant MASK_FULL = type(uint256).max;\\r\\n\\r\\n    struct BitMap {\\r\\n        mapping(uint256 => uint256) _data;\\r\\n    }\\r\\n\\r\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\r\\n        uint256 bucket = index >> 8;\\r\\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\\r\\n        return bitmap._data[bucket] & mask != 0;\\r\\n    }\\r\\n\\r\\n    function set(BitMap storage bitmap, uint256 index) internal {\\r\\n        uint256 bucket = index >> 8;\\r\\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\\r\\n        bitmap._data[bucket] |= mask;\\r\\n    }\\r\\n\\r\\n    function scanForward(BitMap storage bitmap, uint256 index) internal view returns (uint256 setBitIndex) {\\r\\n        uint256 bucket = index >> 8;\\r\\n\\r\\n        // index within the bucket\\r\\n        uint256 bucketIndex = (index & 0xff);\\r\\n\\r\\n        // load a bitboard from the bitmap.\\r\\n        uint256 bb = bitmap._data[bucket];\\r\\n\\r\\n        // offset the bitboard to scan from `bucketIndex`.\\r\\n        bb = bb >> (0xff ^ bucketIndex); // bb >> (255 - bucketIndex)\\r\\n        \\r\\n        if(bb > 0) {\\r\\n            unchecked {\\r\\n                setBitIndex = (bucket << 8) | (bucketIndex -  bb.bitScanForward256());    \\r\\n            }\\r\\n        } else {\\r\\n            while(true) {\\r\\n                require(bucket > 0, \\\"BitMaps: The set bit before the index doesn't exist.\\\");\\r\\n                unchecked {\\r\\n                    bucket--;\\r\\n                }\\r\\n                // No offset. Always scan from the least significiant bit now.\\r\\n                bb = bitmap._data[bucket];\\r\\n                \\r\\n                if(bb > 0) {\\r\\n                    unchecked {\\r\\n                        setBitIndex = (bucket << 8) | (255 -  bb.bitScanForward256());\\r\\n                        break;\\r\\n                    }\\r\\n                } \\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/ERC721Psi/solidity-bits/BitScan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/**\\r\\n   _____       ___     ___ __           ____  _ __      \\r\\n  / ___/____  / (_)___/ (_) /___  __   / __ )(_) /______\\r\\n  \\\\__ \\\\/ __ \\\\/ / / __  / / __/ / / /  / __  / / __/ ___/\\r\\n ___/ / /_/ / / / /_/ / / /_/ /_/ /  / /_/ / / /_(__  ) \\r\\n/____/\\\\____/_/_/\\\\__,_/_/\\\\__/\\\\__, /  /_____/_/\\\\__/____/  \\r\\n                           /____/                        \\r\\n\\r\\n- npm: https://www.npmjs.com/package/solidity-bits\\r\\n- github: https://github.com/estarriolvetch/solidity-bits\\r\\n\\r\\n */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\nlibrary BitScan {\\r\\n    uint256 constant private DEBRUIJN_256 = 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff;\\r\\n    bytes constant private LOOKUP_TABLE_256 = hex\\\"0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8\\\";\\r\\n\\r\\n    /**\\r\\n        @dev Isolate the least significant set bit.\\r\\n     */ \\r\\n    function isolateLS1B256(uint256 bb) pure internal returns (uint256) {\\r\\n        require(bb > 0);\\r\\n        unchecked {\\r\\n            return bb & (0 - bb);\\r\\n        }\\r\\n    } \\r\\n\\r\\n    /**\\r\\n        @dev Isolate the most significant set bit.\\r\\n     */ \\r\\n    function isolateMS1B256(uint256 bb) pure internal returns (uint256) {\\r\\n        require(bb > 0);\\r\\n        unchecked {\\r\\n            bb |= bb >> 128;\\r\\n            bb |= bb >> 64;\\r\\n            bb |= bb >> 32;\\r\\n            bb |= bb >> 16;\\r\\n            bb |= bb >> 8;\\r\\n            bb |= bb >> 4;\\r\\n            bb |= bb >> 2;\\r\\n            bb |= bb >> 1;\\r\\n            \\r\\n            return (bb >> 1) + 1;\\r\\n        }\\r\\n    } \\r\\n\\r\\n    /**\\r\\n        @dev Find the index of the lest significant set bit. (trailing zero count)\\r\\n     */ \\r\\n    function bitScanForward256(uint256 bb) pure internal returns (uint8) {\\r\\n        unchecked {\\r\\n            return uint8(LOOKUP_TABLE_256[(isolateLS1B256(bb) * DEBRUIJN_256) >> 248]);\\r\\n        }   \\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Find the index of the most significant set bit.\\r\\n     */ \\r\\n    function bitScanReverse256(uint256 bb) pure internal returns (uint8) {\\r\\n        unchecked {\\r\\n            return 255 - uint8(LOOKUP_TABLE_256[((isolateMS1B256(bb) * DEBRUIJN_256) >> 248)]);\\r\\n        }   \\r\\n    }\\r\\n\\r\\n    function log2(uint256 bb) pure internal returns (uint8) {\\r\\n        unchecked {\\r\\n            return uint8(LOOKUP_TABLE_256[(isolateMS1B256(bb) * DEBRUIJN_256) >> 248]);\\r\\n        } \\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokensURI\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"maxSupply\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"isZeroIndexed\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"royaltyAmount\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropsFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropsManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllByUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userCollections\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OmniseaDropsRepository", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}