{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBaseVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBaseVault {\\n    function token() external view returns (IERC20);\\n\\n    function withdraw() external returns (uint256);\\n\\n    function deposit(\\n        uint256 _amount,\\n        address _recipient\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Migration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../contracts/interfaces/IBaseVault.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract Migration is Ownable, ReentrancyGuard {\\n    IBaseVault public vaultV1;\\n    IBaseVault public vaultV2;\\n\\n    address public treasury;\\n\\n    address[] public users;\\n\\n    IERC20 public token;\\n\\n    mapping(address user => uint256 balance) public userToBalance;\\n\\n    address[] public notWithdrawnUsers;\\n\\n    constructor(address _vaultV1, address[] memory _users, address _treasury) {\\n        vaultV1 = IBaseVault(_vaultV1);\\n        users = _users;\\n        treasury = _treasury;\\n        token = vaultV1.token();\\n        vaultV1.token().approve(treasury, type(uint256).max);\\n    }\\n\\n    function setVaultV2(address _vaultV2) external onlyOwner {\\n        vaultV2 = IBaseVault(_vaultV2);\\n        vaultV1.token().approve(address(vaultV2), type(uint256).max);\\n    }\\n\\n    function addUsers(address[] memory _newUsers) external onlyOwner {\\n        for (uint256 i = 0; i < _newUsers.length; i++) {\\n            users.push(_newUsers[i]);\\n        }\\n    }\\n\\n    function withdraw() external nonReentrant {\\n        for (uint256 i = 0; i < users.length; i++) {\\n            uint256 userBalance = IERC20(address(vaultV1)).balanceOf(users[i]);\\n            if (userBalance == 0) {\\n                continue;\\n            }\\n            if (\\n                IERC20(address(vaultV1)).allowance(users[i], address(this)) <\\n                userBalance\\n            ) {\\n                if (!checkUserExistence(users[i])) {\\n                    notWithdrawnUsers.push(users[i]);\\n                }\\n                continue;\\n            }\\n            IERC20(address(vaultV1)).transferFrom(\\n                users[i],\\n                address(this),\\n                userBalance\\n            );\\n\\n            userToBalance[users[i]] += userBalance;\\n        }\\n        if (IERC20(address(vaultV1)).balanceOf(address(this)) > 0) {\\n            vaultV1.withdraw();\\n        }\\n    }\\n\\n    function withdrawUsersWithDetectedError() external nonReentrant {\\n        for (uint256 i = 0; i < notWithdrawnUsers.length; i++) {\\n            if (notWithdrawnUsers[i] == address(0)) {\\n                continue;\\n            }\\n            uint256 userBalance = IERC20(address(vaultV1)).balanceOf(\\n                notWithdrawnUsers[i]\\n            );\\n            if (\\n                userBalance == 0 ||\\n                IERC20(address(vaultV1)).allowance(\\n                    notWithdrawnUsers[i],\\n                    address(this)\\n                ) <\\n                userBalance\\n            ) {\\n                continue;\\n            }\\n            IERC20(address(vaultV1)).transferFrom(\\n                notWithdrawnUsers[i],\\n                address(this),\\n                userBalance\\n            );\\n\\n            userToBalance[notWithdrawnUsers[i]] += userBalance;\\n\\n            notWithdrawnUsers[i] = address(0);\\n        }\\n        vaultV1.withdraw();\\n    }\\n\\n    function deposit() external nonReentrant {\\n        vaultV2.deposit(token.balanceOf(address(this)), address(this));\\n    }\\n\\n    function emergencyExit() external onlyOwner {\\n        vaultV1.token().transfer(treasury, token.balanceOf(address(this)));\\n        IERC20(address(vaultV2)).transfer(\\n            treasury,\\n            IERC20(address(vaultV2)).balanceOf(address(this))\\n        );\\n        IERC20(address(vaultV1)).transfer(\\n            treasury,\\n            IERC20(address(vaultV1)).balanceOf(address(this))\\n        );\\n    }\\n\\n    function checkUserExistence(address _user) internal view returns (bool) {\\n        for (uint256 i = 0; i < notWithdrawnUsers.length; i++) {\\n            if (notWithdrawnUsers[i] == _user) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"remappings\": [\r\n      \"@yearn-protocol/=lib/yearn-vaults/\"\r\n    ],\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultV1\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newUsers\",\"type\":\"address[]\"}],\"name\":\"addUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notWithdrawnUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultV2\",\"type\":\"address\"}],\"name\":\"setVaultV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userToBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultV1\",\"outputs\":[{\"internalType\":\"contract IBaseVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultV2\",\"outputs\":[{\"internalType\":\"contract IBaseVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUsersWithDetectedError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Migration", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "0000000000000000000000003edbe670d03c4a71367deda78e73ea4f8d68f2e40000000000000000000000000000000000000000000000000000000000000060000000000000000000000000f4bec3e032590347fc36ad40152c7155f8361d39000000000000000000000000000000000000000000000000000000000000004d00000000000000000000000084197fa35061a353fdfab8ee125bee39668c056b000000000000000000000000f793859ec763477ee2f282186ebb2fb2e6a71bba00000000000000000000000005745ca3ac6ffcb336fcf57e270e67a5ecf061750000000000000000000000009c6c56700f4952d45896757ac098968e97695a55000000000000000000000000facbeb3a6422116bbcc9f91f877fc2365076e38e0000000000000000000000000404b120a4006ec07f008905b7dc6a141edddb5a000000000000000000000000bc64827ddfd207be92435ac1c378f68571dd798c0000000000000000000000001858c0c5c0a5e18232b22ced0095b7e3dd8a7edc000000000000000000000000423bf3038eaee9cb3880dddc44b8aaa543aa5b4a000000000000000000000000eddc816d7f7798f2031cd9472719a2f2214b47f200000000000000000000000080b26ea44bab3d39516094b479b9565d9e80d4c60000000000000000000000007701ea24ff3f7f2d27a490fd56be79f934a513dc000000000000000000000000f70feaa153a0ffc391525c1226d6e0f00edf9974000000000000000000000000bfe11cd5c66764b2dd44bf2022abc5f7ea8958d2000000000000000000000000263a8a1297582c307a008de90372fbc98bec1ba8000000000000000000000000bfa0d7729e99ece0a64aad8a2f7ed54fdc122656000000000000000000000000f7aef5fc0f5d6b030c417d6a44fcc23497cd3e0a0000000000000000000000008967e0ead53c4a4c60fd1ade925bdbe0c93d58fe0000000000000000000000003fdb50f723ceb370470d314ed05c22d7359be529000000000000000000000000dc4f10b35da60b5e23d43dd7dca7a4b890ade2b8000000000000000000000000ab545c8eb7aebeb4f73b68503245e7050b7b8c19000000000000000000000000ec757b768f53607260af86ac2d9f32804a32e7e9000000000000000000000000f4bec3e032590347fc36ad40152c7155f8361d390000000000000000000000005ef7f250f74d4f11a68054ae4e150705474a6d4a000000000000000000000000b389efe19da39ded65657736e4ed298017d9238c0000000000000000000000008e69f1e96658d5820fcd56584f169b6a274c333000000000000000000000000028170471dec2a738301a2d792072817ee23b45c5000000000000000000000000eafb327daf090c3fdd1f9fe8f435d2106d81b8f200000000000000000000000040f61a408d6f05e74c454df0542754ed2232f48c0000000000000000000000003b0702b7664649321fb22174b48f1220f723810d00000000000000000000000067364e192dc953aa4c298e334f519aa8d85b114f000000000000000000000000d1ecdfc524ddbb8d32ad62f4a2f5554cb92afec5000000000000000000000000555eee16ef32ee87c46a50c0227a3bfa89e45ef900000000000000000000000029920a39e695b45f693139382e90ead7ad9cae18000000000000000000000000290226b6b5c6daae68a57e626481e7caf900f754000000000000000000000000417575a099bf120a31356e99cb41fa32b9c2a92d000000000000000000000000d87d8537494e703eb56d852c74726fbadff4b8180000000000000000000000007da64ba376697a73380289f60dab556e3cc1d6320000000000000000000000002319ad98c36dfbcd5e99a99685b317a71e14fcb60000000000000000000000004afed450a0db5483a7f70bfbcf0b5231a5e5899f0000000000000000000000004b3de3a8f39ac986445df67306001166710e98e300000000000000000000000078173cadc97432e09d6d00d7894b4074b83762c300000000000000000000000015bd2c4e267ae8e24d964c1a92cd16bce9583127000000000000000000000000549f317c3dc64886c947e345181f70a7cf65f4b600000000000000000000000091d45c9ac90c240062488364ecec5e6cb46d3f890000000000000000000000000141fe1110c12563dbe4e6161a1bc29af98ea1a70000000000000000000000005fe1d48622140c84fd89f8b01093de086c9798f50000000000000000000000008c05776efb1f4692164f5d6aff986b39bf5f4651000000000000000000000000a368c967c5ef51cca5769bcc20a86faca042b1f60000000000000000000000006b477e1ebbfbcd09b3fd3a48f32f0ce9c991581b000000000000000000000000ae7b63dad95581947d2925a9e62e57ccbb2da0460000000000000000000000003d8a8980ac68554da0af80972ab992628b5008080000000000000000000000005a69428dfe7af2e64bc40e065e139caf8fdb09b6000000000000000000000000b232b6791d83fce7a99222c63a525c88c227a53d000000000000000000000000f1f51f6af1eae25c1c135c1ed79c9917e4257f4a000000000000000000000000e0435d8a38817f2522c8ec2d7ecf0b3b0a36c2cf000000000000000000000000e24762f571fde7c2976f4dc16384aa6908bb9b0100000000000000000000000082d913cba9e05210f23d6ad6541e16aa07e82381000000000000000000000000382e8f34dc9821b55202dedd2fed738ff578e1960000000000000000000000005e94b9f280fcf1872e5c1aca6cb2077fd4aecbfb00000000000000000000000082c4bcd68508228d94959b3dbb912d8855a9b5940000000000000000000000004991c2e4604e4b98d58bfec26909c5f55577253100000000000000000000000069382c920955f400bf26bdc0c4f8729c83a679c20000000000000000000000001bd875c8f99f385e7f359f3ef23ef217ba5bc20f000000000000000000000000c431f1a982c3ebc18e7bfea5e20e7a89ae98294a000000000000000000000000a295fcb7a0c76972d586a61ba7a9f292f9d2a4660000000000000000000000008af764586e2bd2be98fb229f058f329d21f26c2a00000000000000000000000097654173d2b4340f3044ba8dba58829701c4efca0000000000000000000000002aefdc07ad78d5e78c8e32b4f7c018bc6d3cef0a00000000000000000000000042b0324918159bc1ddb4cac392b1418ec8aa2723000000000000000000000000cd803e594ad5ccf2060710ee00e95f65e07040bc0000000000000000000000007b90febfdddfcbf22db7becd6f2590b951363d3d0000000000000000000000002dbd99d8aec546ae171a68967354c5f6ea4d8a7f0000000000000000000000000f07d80641f015181dcd85a504b2b400f1859c07000000000000000000000000b5923cf3bba441f52578944603ac62e773cb9bea00000000000000000000000010b850c3abfca78d693c9cd6fce809c129109d1c000000000000000000000000036d6794fdde4b5c4ed216503d0717783df900aa", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}