{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Souls.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./utils/Base64.sol\\\";\\n\\nimport \\\"./SoulsDescriptor.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract Souls is ERC721 {\\n\\n    address public owner = 0xaF69610ea9ddc95883f97a6a3171d52165b69B03; // for opensea integration. doesn't do anything else.\\n\\n    address public collector; // address authorised to withdraw funds recipient\\n    address payable public recipient; // in this instance, it will be a mirror split on mainnet. 0xec0ef86a3872829F3EC40de1b1b9Df54a3D4a4b3\\n\\n    uint256 public buyableSoulSupply;\\n\\n    // minting time\\n    uint256 public startDate;\\n    uint256 public endDate;\\n\\n    mapping(uint256 => bool) public soulsType; // true == full soul\\n\\n    SoulsDescriptor public descriptor;\\n\\n    ERC721 public anchorCertificates;\\n\\n    // uint256 public newlyMinted;\\n\\n    mapping(uint256 => bool) public claimedACIDs;\\n\\n    event Claim(address indexed claimer, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_, address collector_, address payable recipient_, uint256 startDate_, uint256 endDate_, address certificates_) ERC721(name_, symbol_) {\\n        collector = collector_; \\n        recipient = recipient_;\\n        startDate = startDate_;\\n        endDate = endDate_;\\n        descriptor = new SoulsDescriptor();\\n        anchorCertificates = ERC721(certificates_);\\n\\n        /* INITIAL CLAIM/MINT */\\n        // initial claim for un_frontier outside campaign window.\\n        // allows metadata + graph + storefronts to propagate before launch.\\n        // let this initial claim come from simondlr's personal collection of anchor certificates.\\n        // it is default certificate #1.\\n        // https://opensea.io/assets/0x600a4446094c341693c415e6743567b9bfc8a4a8/86944833354306826451453519009172227432197817959411860297499850535918774474487\\n        claimedACIDs[86944833354306826451453519009172227432197817959411860297499850535918774474487] = true;\\n        _createSoul(true,address(0xaF69610ea9ddc95883f97a6a3171d52165b69B03)); // claim the soul for untitled frontier, not simondlr.\\n        emit Claim(0xaF69610ea9ddc95883f97a6a3171d52165b69B03, 86944833354306826451453519009172227432197817959411860297499850535918774474487);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory soulType = \\\"Sketched\\\";\\n        if(soulsType[tokenId] == true) {\\n            soulType = \\\"Fully Painted\\\";\\n        }\\n\\n        string memory name = descriptor.generateName(soulType, tokenId); \\n        string memory description = \\\"Paintings of forgotten souls by various simulated minds that try to remember those who they once knew in the default world.\\\";\\n\\n        string memory image = generateBase64Image(tokenId);\\n        string memory attributes = generateTraits(tokenId);\\n        return string(\\n            abi.encodePacked(\\n                'data:application/json;base64,',\\n                Base64.encode(\\n                    bytes(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"', \\n                            name,\\n                            '\\\", \\\"description\\\":\\\"', \\n                            description,\\n                            '\\\", \\\"image\\\": \\\"', \\n                            'data:image/svg+xml;base64,', \\n                            image,'\\\",',\\n                            attributes,\\n                            '}'\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function generateBase64Image(uint256 tokenId) public view returns (string memory) {\\n        bytes memory img = bytes(generateImage(tokenId));\\n        return Base64.encode(img);\\n    }\\n\\n    function generateImage(uint256 tokenId) public view returns (string memory) {\\n        return descriptor.generateImage(tokenId, soulsType[tokenId]);\\n    }\\n\\n    function generateTraits(uint256 tokenId) public view returns (string memory) {\\n        return descriptor.generateTraits(tokenId, soulsType[tokenId]);\\n    }\\n\\n    /*\\n    Owners of Anchor Certificates can claim a full soul.\\n    Max 160.\\n    */\\n    function claimSoul(uint ACID) public  {\\n        require(block.timestamp > startDate, \\\"NOT_STARTED\\\"); // ~ 2000 gas\\n        require(block.timestamp < endDate, \\\"ENDED\\\");\\n        require(claimedACIDs[ACID] == false, \\\"AC_ID ALREADY CLAIMED\\\");\\n        require(anchorCertificates.ownerOf(ACID) == msg.sender, \\\"AC_ID NOT OWNED BY SENDER\\\");\\n\\n        claimedACIDs[ACID] = true;\\n        _createSoul(true, msg.sender);\\n        emit Claim(msg.sender, ACID);\\n    }\\n\\n    function mintSoul() public payable {\\n        require(block.timestamp > startDate, \\\"NOT_STARTED\\\"); // ~ 2000 gas\\n        require(block.timestamp < endDate, \\\"ENDED\\\");\\n        require(msg.value >= 0.010 ether, 'MORE ETH NEEDED'); //~$30\\n\\n        if(msg.value >= 0.068 ether) { //~$200\\n            buyableSoulSupply += 1;\\n            require(buyableSoulSupply <= 96, \\\"MAX_SOLD_96\\\");\\n            _createSoul(true, msg.sender);\\n        } else { // don't need to check ETH amount here since it is checked in the require above\\n            _createSoul(false, msg.sender);\\n        }\\n    }\\n\\n    function _createSoul(bool fullSoul, address _owner) internal {\\n        uint256 tokenId = uint(keccak256(abi.encodePacked(block.timestamp, _owner)));\\n        soulsType[tokenId] = fullSoul;\\n        // newlyMinted = tokenId; // tests\\n        super._mint(_owner, tokenId);\\n    }\\n\\n    function withdrawETH() public {\\n        require(msg.sender == collector, \\\"NOT_COLLECTOR\\\");\\n        recipient.transfer(address(this).balance);\\n    }\\n}\"\r\n    },\r\n    \"contracts/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IERC721.sol\\\";\\nimport \\\"./interfaces/IERC721Receiver.sol\\\";\\nimport \\\"./interfaces/IERC721Metadata.sol\\\";\\nimport \\\"./utils/Address.sol\\\";\\n// import \\\"../../utils/Context.sol\\\";\\nimport \\\"./utils/Strings.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty \\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != msg.sender, \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        // _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        // _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        // _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    // modified from ERC721 template:\\n    // removed BeforeTokenTransfer\\n}\"\r\n    },\r\n    \"contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\"\r\n    },\r\n    \"contracts/SoulsDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\nContract that's primarily responsible for generating the metadata, including the image itself in SVG.\\nParts of the SVG is encapsulated into custom re-usable components specific to this collection.\\n*/\\ncontract SoulsDescriptor {\\n\\n    function generateName(string memory soulType, uint soulNr) public pure returns (string memory) {\\n        return string(abi.encodePacked(soulType, ' Forgotten Soul #', substring(toString(soulNr),0,8)));\\n    }\\n\\n    function generateTraits(uint256 tokenId, bool fullSoul) public pure returns (string memory) {\\n        bytes memory hash = abi.encodePacked(bytes32(tokenId));\\n\\n        string memory paintingTraits = \\\"\\\";\\n\\n        string memory paintingType = string(abi.encodePacked('{\\\"trait_type\\\": \\\"Type\\\", \\\"value\\\": \\\"Fully Painted\\\"},'));\\n        if(fullSoul == false) { paintingType = string(abi.encodePacked('{\\\"trait_type\\\": \\\"Type\\\", \\\"value\\\": \\\"Sketch\\\"},'));}\\n\\n        (uint colour1, uint colour2, uint colour3) = generateColours(hash);\\n        string memory compositionType = getColourCompositionType(toUint8(hash,2));\\n        uint saturation = 60 - uint256(toUint8(hash,30))*55/255;\\n\\n        string memory layersTrait = \\\"\\\";\\n        uint layers;\\n\\n        bool colours;\\n        if(toUint8(hash,22) < 128 || fullSoul == true) { \\n            paintingTraits = string(abi.encodePacked(paintingTraits, '{\\\"value\\\": \\\"Background\\\"}, {\\\"trait_type\\\": \\\"Colour 1\\\", \\\"value\\\":\\\"',toString(colour1),'\\\" },')); \\n            layers++;\\n            colours = true;\\n        }\\n        if(toUint8(hash,23) < 128 || fullSoul == true) { paintingTraits = string(abi.encodePacked(paintingTraits, '{\\\"value\\\": \\\"Frame\\\"},')); layers++; }\\n        if(toUint8(hash,24) < 128 || fullSoul == true) { paintingTraits = string(abi.encodePacked(paintingTraits, '{\\\"value\\\": \\\"Back Splash\\\"},')); layers++; }\\n        if(toUint8(hash,25) < 128 || fullSoul == true) { paintingTraits = string(abi.encodePacked(paintingTraits, '{\\\"value\\\": \\\"Body\\\"},')); layers++; }\\n        if(toUint8(hash,26) < 128 || fullSoul == true) { \\n            paintingTraits = string(abi.encodePacked(paintingTraits, '{\\\"value\\\": \\\"Back Head\\\"}, {\\\"trait_type\\\": \\\"Colour 2\\\", \\\"value\\\": \\\"',toString(colour2),'\\\" },')); \\n            layers++; \\n            colours = true;\\n        }\\n        if(toUint8(hash,27) < 128 || fullSoul == true) { \\n            paintingTraits = string(abi.encodePacked(paintingTraits, '{\\\"value\\\": \\\"Front Head\\\"}, {\\\"trait_type\\\": \\\"Colour 3\\\", \\\"value\\\": \\\"',toString(colour3),'\\\" },')); \\n            layers++; \\n            colours = true; \\n        }\\n        if(toUint8(hash,28) < 128 || fullSoul == true) { paintingTraits = string(abi.encodePacked(paintingTraits, '{\\\"value\\\": \\\"Rings\\\"},')); layers++; }\\n        if(toUint8(hash,29) < 128 || fullSoul == true) { paintingTraits = string(abi.encodePacked(paintingTraits, '{\\\"value\\\": \\\"Eyes\\\"},')); layers++; }\\n\\n        layersTrait = string(abi.encodePacked('{\\\"trait_type\\\": \\\"Layers\\\", \\\"value\\\": \\\"',toString(layers),'\\\"}'));\\n\\n        string memory colourCompositionTrait;\\n        if(colours == true) { colourCompositionTrait = string(abi.encodePacked('{\\\"trait_type\\\": \\\"Colour Composition Type\\\", \\\"value\\\": \\\"',compositionType,'\\\" }, {\\\"trait_type\\\": \\\"Saturation\\\", \\\"value\\\": \\\"',toString(saturation),'\\\" },')); }\\n\\n        return string(abi.encodePacked(\\n            '\\\"attributes\\\": [',\\n            paintingType,\\n            colourCompositionTrait,\\n            paintingTraits,\\n            layersTrait,\\n            ']'\\n        ));\\n    }\\n\\n    function generateImage(uint256 tokenId, bool fullSoul) public pure returns (string memory) {\\n        bytes memory hash = abi.encodePacked(bytes32(tokenId));\\n\\n        (uint colour1, uint colour2, uint colour3) = generateColours(hash);\\n\\n        string memory background = \\\"\\\";\\n        string memory innerFrame = \\\"\\\";\\n        string memory backSplash = \\\"\\\";\\n        string memory body = \\\"\\\";\\n        string memory backHead = \\\"\\\";\\n        string memory frontHead = \\\"\\\";\\n        string memory rings = \\\"\\\";\\n        string memory eyes = \\\"\\\";\\n\\n        // Hash Bytes used to this point-> 21\\n        if(toUint8(hash,22) < 128 || fullSoul == true) { background = generateBackground(hash, colour1); }\\n        if(toUint8(hash,23) < 128 || fullSoul == true) { innerFrame = generateInnerFrame(hash); }\\n        if(toUint8(hash,24) < 128 || fullSoul == true) { backSplash = generateBackSplash(hash); }\\n        if(toUint8(hash,25) < 128 || fullSoul == true) { body = generateBody(hash); }\\n        if(toUint8(hash,26) < 128 || fullSoul == true) { backHead = generateBackHead(hash, colour2); }\\n        if(toUint8(hash,27) < 128 || fullSoul == true) { frontHead = generateFrontHead(hash, colour3); }\\n        if(toUint8(hash,28) < 128 || fullSoul == true) { rings = generateRings(hash);}\\n        if(toUint8(hash,29) < 128 || fullSoul == true) { eyes = generateEyes(hash); }\\n\\n        return string(\\n            abi.encodePacked(\\n                '<svg width=\\\"600\\\" height=\\\"600\\\" viewBox=\\\"0 0 600 600\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n                '<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"600\\\" height=\\\"600\\\" fill=\\\"white\\\" />',\\n                background,\\n                innerFrame,\\n                backSplash,\\n                body,\\n                backHead,\\n                frontHead,\\n                rings,\\n                eyes,\\n                '</svg>'\\n            )\\n        );\\n    }\\n\\n    function generateColours(bytes memory hash) public pure returns (uint, uint, uint) {\\n        uint colour1 = uint256(toUint8(hash,1))*360/255; \\n        uint colourCompositionByte = toUint8(hash,2);\\n        uint colour2;\\n        uint colour3;\\n        string memory compositionType = getColourCompositionType(colourCompositionByte);\\n\\n        if(keccak256(bytes(compositionType)) == keccak256(bytes('Split Composition'))) {\\n            //split composition\\n            colour2 = (colour1+150) % 360;\\n            colour3 = (colour1+210) % 360;\\n        } else if(keccak256(bytes(compositionType)) == keccak256(bytes('Triad Composition'))) {\\n            // triad composition\\n            colour2 = (colour1+120) % 360;\\n            colour3 = (colour1+240) % 360;\\n        } else {\\n            // analogous composition\\n            colour2 = (colour1+30) % 360;\\n            colour3 = (colour1+90) % 360;\\n        }\\n\\n        return (colour1, colour2, colour3);\\n    }\\n\\n    function getColourCompositionType(uint compositionByte) public pure returns (string memory) {\\n        if(compositionByte >= 0 && compositionByte < 85) {\\n            return 'Split Composition';\\n        } else if(compositionByte >=85 && compositionByte < 170) {\\n            return 'Triad Composition';\\n        } else {\\n            return 'Analogous Composition';\\n        }\\n    }\\n\\n    /* GENERATION FUNCTIONS (in order of layers) */\\n\\n    // Layer 1 - Background.\\n    // Hash Bytes Used - 3,4,5\\n    function generateBackground(bytes memory hash, uint colour1) public pure returns (string memory) {\\n        uint backgroundFrequency = uint256(toUint8(hash,3))*1000/255; \\n        uint backgroundSurfaceScale = uint256(toUint8(hash,4))*10/255;\\n        uint elevation = 50 + uint256(toUint8(hash,5))*90/255; \\n        uint saturation = 60 - uint256(toUint8(hash,30))*55/255;\\n        return string(abi.encodePacked(\\n            svgFilter(\\\"backgroundDisplacement\\\"),\\n            svgFeTurbulence(\\\"100\\\",generateDecimalString(backgroundFrequency,2)),\\n            '<feMorphology in=\\\"turbulence\\\" result=\\\"morphed\\\" operator=\\\"erode\\\" radius=\\\"1\\\"></feMorphology>',\\n            '<feDiffuseLighting in=\\\"morphed\\\" lighting-color=\\\"hsl(',toString(colour1),', ',toString(saturation),'%, 50%)\\\" surfaceScale=\\\"',toString(backgroundSurfaceScale),'\\\"><feDistantLight azimuth=\\\"45\\\" elevation=\\\"',toString(elevation),'\\\" /></feDiffuseLighting>',\\n            '</filter><rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"600\\\" height=\\\"600\\\" style=\\\"filter: url(#backgroundDisplacement)\\\" />'\\n        ));\\n    }\\n\\n    // Layer 2 - Inner Frame\\n    // Hash Bytes Used - 6,7\\n    function generateInnerFrame(bytes memory hash) public pure returns (string memory) {\\n        uint frameFrequency = uint256(toUint8(hash,6))*1000/255; \\n        uint frameSeed = uint256(toUint8(hash,6))*1000/255; // added in post. more variation.\\n        uint frameStrokeWidth = uint256(toUint8(hash,7))*40/255;\\n\\n        return string(abi.encodePacked(\\n            svgFilter(\\\"frameDisplacement\\\"),\\n            svgFeTurbulence(toString(frameSeed),generateDecimalString(frameFrequency,4)),\\n            '<feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"50\\\" xChannelSelector=\\\"G\\\" yChannelSelector=\\\"A\\\"/></filter>',\\n            '<rect x=\\\"50\\\" y=\\\"50\\\" width=\\\"500\\\" height=\\\"500\\\" stroke=\\\"black\\\" opacity=\\\"0.5\\\" fill=\\\"white\\\" stroke-width=\\\"',toString(frameStrokeWidth),'\\\" style=\\\"filter: url(#frameDisplacement)\\\"/>'\\n        ));\\n    }\\n\\n    // Layer 3 - Back Splash\\n    // Hash Bytes Used - 8,9\\n    function generateBackSplash(bytes memory hash) public pure returns (string memory) {\\n        uint8 radii = toUint8(hash,0)/3;\\n        uint backSplashFrequency = uint256(toUint8(hash,8))*1000/255; \\n        uint backStrokeWidth = uint256(toUint8(hash,9))*40/255;\\n\\n        return string(abi.encodePacked(\\n            '<defs>',\\n            '<linearGradient id=\\\"backSplashGrad\\\" x2=\\\"0%\\\" y2=\\\"100%\\\">',\\n            '<stop offset=\\\"0%\\\" stop-color=\\\"black\\\" />',\\n            '<stop offset=\\\"50%\\\" stop-color=\\\"white\\\" />',\\n            '</linearGradient>',\\n            '</defs>',\\n            svgFilter(\\\"backSplash\\\"),\\n            svgFeTurbulence(\\\"2000\\\",generateDecimalString(backSplashFrequency,4)),\\n            '<feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"200\\\" xChannelSelector=\\\"G\\\" yChannelSelector=\\\"A\\\"/></filter>',\\n            svgCircle(\\\"300\\\",\\\"270\\\",toString(170-radii),\\\"url(#backSplashGrad)\\\",toString(backStrokeWidth),\\\"none\\\", \\\"filter: url(#backSplash)\\\")\\n        ));\\n    }\\n\\n    // Layer 4 - Body\\n    // Hash Bytes Used - 10\\n    function generateBody(bytes memory hash) public pure returns (string memory) {\\n        uint8 radii = toUint8(hash,0)/3;\\n        uint bodyFrequency = uint256(toUint8(hash,10))*1000/255;  \\n\\n        return string(abi.encodePacked(\\n            svgFilter(\\\"bodyDisplacement\\\"),\\n            svgFeTurbulence(\\\"100\\\",generateDecimalString(bodyFrequency,4)),\\n            '<feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"50\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\"/> </filter>',\\n            svgCircle(\\\"300\\\",toString(700-radii),toString(180-radii),\\\"black\\\",\\\"0\\\",\\\"black\\\",\\\"filter: url(#bodyDisplacement)\\\")\\n        ));\\n    }\\n\\n    // Layer 5 - Back Head\\n    // Hash Bytes Used - 11,12\\n    function generateBackHead(bytes memory hash, uint colour2) public pure returns (string memory) {\\n        uint8 radii = toUint8(hash,0)/3;\\n        uint backHeadFrequency = uint256(toUint8(hash,11))*1000/255; \\n        uint backHeadScale = uint256(toUint8(hash,12))*400/255;\\n        uint saturation = 60 - uint256(toUint8(hash,30))*55/255;\\n\\n        string memory fill = string(abi.encodePacked('hsl(',toString(colour2),', ',toString(saturation),'%, 50%)'));\\n\\n        return string(abi.encodePacked(\\n            svgFilter(\\\"headDisplacement\\\"), \\n            svgFeTurbulence(\\\"100\\\",generateDecimalString(backHeadFrequency,3)),\\n            '<feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"',toString(backHeadScale),'\\\" xChannelSelector=\\\"G\\\" yChannelSelector=\\\"A\\\"/> </filter>',\\n            svgCircle(\\\"300\\\",\\\"270\\\",toString(140-radii), \\\"none\\\", \\\"0\\\", fill, \\\"filter: url(#headDisplacement)\\\")\\n        ));\\n    }\\n\\n    // Layer 6 - Front Head\\n    // Hash Bytes Used - 13,14\\n    function generateFrontHead(bytes memory hash, uint colour3) public pure returns (string memory) {\\n        uint8 radii = toUint8(hash,0)/3;\\n        uint frontHeadFrequency = uint256(toUint8(hash,13))*1000/255; \\n        uint frontHeadFrequency2 = uint256(toUint8(hash,14))*1000/255; // added in post. more variation.\\n        uint frontHeadScale = uint256(toUint8(hash,14))*400/255;\\n        uint saturation = 60 - uint256(toUint8(hash,30))*55/255;\\n\\n        string memory fill = string(abi.encodePacked('hsl(',toString(colour3),', ',toString(saturation),'%, 50%)'));\\n        \\n        return string(abi.encodePacked(\\n            svgFilter(\\\"headDisplacement2\\\"), \\n            '<feTurbulence type=\\\"turbulence\\\" seed=\\\"50\\\" baseFrequency=\\\"',generateDecimalString(frontHeadFrequency,3),',',generateDecimalString(frontHeadFrequency2,3),'\\\" numOctaves=\\\"5\\\" result=\\\"turbulence\\\"/>'\\n            '<feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"',toString(frontHeadScale),'\\\" xChannelSelector=\\\"G\\\" yChannelSelector=\\\"R\\\"/> </filter>',\\n            svgCircle(\\\"300\\\",\\\"270\\\",toString(120-radii), \\\"none\\\", \\\"0\\\", fill, \\\"filter: url(#headDisplacement2)\\\")\\n        ));\\n    }\\n\\n    // Layer 7 - Rings\\n    // Hash Bytes Used - 15,16,17,18,19,20\\n    function generateRings(bytes memory hash) public pure returns (string memory) {\\n        string memory ring1 = generateRing(hash, \\\"ringDisplacement1\\\", 15, 16, \\\"grey\\\", \\\"R\\\", \\\"filter: url(#ringDisplacement1)\\\");        \\n        string memory ring2 = generateRing(hash, \\\"ringDisplacement2\\\", 17, 18, \\\"black\\\", \\\"G\\\", \\\"filter: url(#ringDisplacement2)\\\");        \\n        string memory ring3 = generateRing(hash, \\\"ringDisplacement3\\\", 19, 20, \\\"black\\\", \\\"B\\\", \\\"filter: url(#ringDisplacement3)\\\");        \\n\\n        return string(abi.encodePacked(ring1, ring2, ring3));\\n    }\\n\\n    function generateRing(bytes memory hash, string memory id, uint seedIndex1, uint seedIndex2, string memory stroke, string memory xChannel, string memory style) public pure returns (string memory) {\\n        uint8 radii = toUint8(hash,0)/3;\\n        uint ringSeed = uint256(toUint8(hash,seedIndex1))*1000/255;\\n        uint ringFrequency = uint256(toUint8(hash,seedIndex2))*1000/255;  \\n\\n        return string(abi.encodePacked(\\n            svgFilter(id), \\n            svgFeTurbulence(toString(ringSeed), generateDecimalString(ringFrequency,4)),\\n            '<feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"200\\\" xChannelSelector=\\\"',xChannel,'\\\" yChannelSelector=\\\"A\\\" /> </filter>',\\n            svgCircle(\\\"300\\\",\\\"270\\\",toString(140-radii),stroke,\\\"4\\\",\\\"none\\\",style)\\n        ));\\n    }\\n\\n    // Layer 8 - Eyes\\n    // Hash Bytes Used - 21\\n    function generateEyes(bytes memory hash) public pure returns (string memory) {\\n        uint eyesFrequency = uint256(toUint8(hash,21))*1000/255; \\n        uint eyesRadius = 25 - uint256(toUint8(hash,21))*15/255; \\n\\n        string memory eyeDisplacement = string(abi.encodePacked(\\n            svgFilter(\\\"eyeDisplacement\\\"),\\n            svgFeTurbulence(\\\"100\\\", generateDecimalString(eyesFrequency,4)),\\n            '<feDisplacementMap in2=\\\"turbulence\\\" in=\\\"SourceGraphic\\\" scale=\\\"100\\\" xChannelSelector=\\\"R\\\" yChannelSelector=\\\"G\\\"/></filter>'\\n        ));\\n\\n        string memory eyes = string(abi.encodePacked(\\n            svgCircle(\\\"250\\\",\\\"270\\\",toString(eyesRadius),\\\"black\\\",\\\"1\\\",\\\"white\\\",\\\"filter: url(#eyeDisplacement)\\\"),\\n            svgCircle(\\\"320\\\",\\\"270\\\",toString(eyesRadius),\\\"black\\\",\\\"1\\\",\\\"white\\\",\\\"filter: url(#eyeDisplacement)\\\")\\n        ));\\n\\n        return string(abi.encodePacked(eyeDisplacement,eyes));\\n    }\\n\\n    function svgCircle(string memory cx, string memory cy, string memory r, string memory stroke, string memory strokeWidth, string memory fill, string memory style) public pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            '<circle cx=\\\"',cx,'\\\" cy=\\\"',cy,'\\\" r=\\\"',r,'\\\" stroke=\\\"',stroke,'\\\" fill=\\\"',fill,'\\\" stroke-width=\\\"',strokeWidth,'\\\" style=\\\"',style,'\\\"/>'\\n        ));\\n    }\\n\\n    function svgFilter(string memory id) public pure returns (string memory) {\\n        return string(abi.encodePacked('<filter id=\\\"',id,'\\\" width=\\\"300%\\\" height=\\\"300%\\\">'));\\n    }\\n\\n    function svgFeTurbulence(string memory seed, string memory baseFrequency) public pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            '<feTurbulence type=\\\"turbulence\\\" seed=\\\"',seed,'\\\" baseFrequency=\\\"',baseFrequency,'\\\" numOctaves=\\\"5\\\" result=\\\"turbulence\\\"/>'\\n        ));\\n    }\\n\\n    // helper function for generation\\n    // from: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol \\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_start + 1 >= _start, \\\"toUint8_overflow\\\");\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n        return tempUint;\\n    }\\n\\n        // from: https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/utils/Strings.sol\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function generateDecimalString(uint nr, uint decimals) public pure returns (string memory) {\\n        if(decimals == 1) { return string(abi.encodePacked('0.',toString(nr))); }\\n        if(decimals == 2) { return string(abi.encodePacked('0.0',toString(nr))); }\\n        if(decimals == 3) { return string(abi.encodePacked('0.00',toString(nr))); }\\n        if(decimals == 4) { return string(abi.encodePacked('0.000',toString(nr))); }\\n    }\\n\\n    // from: https://ethereum.stackexchange.com/questions/31457/substring-in-solidity/31470\\n    function substring(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory result = new bytes(endIndex-startIndex);\\n        for(uint i = startIndex; i < endIndex; i++) {\\n            result[i-startIndex] = strBytes[i];\\n        }\\n        return string(result);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"collector_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"certificates_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"anchorCertificates\",\"outputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyableSoulSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ACID\",\"type\":\"uint256\"}],\"name\":\"claimSoul\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedACIDs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"descriptor\",\"outputs\":[{\"internalType\":\"contract SoulsDescriptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateBase64Image\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateTraits\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintSoul\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"soulsType\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Souls", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000af69610ea9ddc95883f97a6a3171d52165b69b03000000000000000000000000ec0ef86a3872829f3ec40de1b1b9df54a3d4a4b300000000000000000000000000000000000000000000000000000000614dd9e0000000000000000000000000000000000000000000000000000000006172c3e0000000000000000000000000600a4446094c341693c415e6743567b9bfc8a4a8000000000000000000000000000000000000000000000000000000000000001c5061696e74696e6773206f6620466f72676f7474656e20536f756c73000000000000000000000000000000000000000000000000000000000000000000000005534f554c53000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}