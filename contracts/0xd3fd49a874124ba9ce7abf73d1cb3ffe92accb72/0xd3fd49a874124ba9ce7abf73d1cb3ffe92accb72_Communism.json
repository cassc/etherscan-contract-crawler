{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Communism.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./libraries/Utils.sol\\\";\\n\\ncontract Communism is Context, IERC20, Ownable, ReentrancyGuard {\\n  using SafeMath for uint256;\\n  using Address for address payable;\\n\\n  mapping(address => uint256) private _balances;\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n  mapping(address => bool) private _isExcludedFromFee;\\n  mapping(address => bool) private _isExcludedFromMaxTx;\\n\\n  mapping(address => bool) public isBlacklisted;\\n  mapping(address => uint256) public nextAvailableClaimDate;\\n  mapping(address => uint256) public personalETHClaimed;\\n\\n  uint256 private _totalSupply = 100000000 * 10 ** 18;\\n  uint8 private _decimals = 18;\\n  string private _name = \\\"Communism\\\";\\n  string private _symbol = \\\"COMMUNISM\\\";\\n\\n  uint256 public rewardCycleBlock = 12 hours;\\n  uint256 public easyRewardCycleBlock = 3 hours;\\n  uint256 public _maxTxAmount = _totalSupply;\\n  uint256 public disableEasyRewardFrom = 0;\\n  uint256 public enableRedReservePurgeFrom = 0;\\n  uint256 public totalETHClaimed = 0;\\n  uint256 public claimDelay = 1 hours;\\n  uint256 public purgeRewardPercent = 2;\\n\\n  bool public tradingEnabled = false;\\n\\n  IUniswapV2Router02 public immutable uniswapV2Router;\\n\\n  address public immutable uniswapV2Pair;\\n  address public marketingAddress;\\n\\n  Taxes public taxes;\\n  Taxes public sellTaxes;\\n\\n  uint256 public _totalMarketing;\\n  uint256 public _totalReward;\\n\\n  struct Taxes {\\n    uint256 marketing;\\n    uint256 reward;\\n  }\\n\\n  event ClaimETHSuccessfully(\\n    address recipient,\\n    uint256 ethReceived,\\n    uint256 nextAvailableClaimDate\\n  );\\n\\n  event ClaimETHGambleSuccessfully(\\n    address recipient,\\n    uint256 ethReceived,\\n    uint256 nextAvailableClaimDate,\\n    bool isLotteryWon\\n  );\\n\\n  event RedReservePurged(address recipient, uint256 tokensSwapped);\\n\\n  constructor(address payable routerAddress) {\\n    _balances[_msgSender()] = _totalSupply;\\n\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);\\n    // Create a uniswap v2 pair for this new token\\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\n      address(this),\\n      _uniswapV2Router.WETH()\\n    );\\n\\n    uniswapV2Router = _uniswapV2Router;\\n\\n    _isExcludedFromFee[owner()] = true;\\n    _isExcludedFromFee[address(this)] = true;\\n\\n    _isExcludedFromMaxTx[owner()] = true;\\n    _isExcludedFromMaxTx[address(this)] = true;\\n    _isExcludedFromMaxTx[\\n      address(0x000000000000000000000000000000000000dEaD)\\n    ] = true;\\n    _isExcludedFromMaxTx[address(0)] = true;\\n\\n    emit Transfer(address(0), _msgSender(), _totalSupply);\\n  }\\n\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  function totalSupply() public view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address account) public view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  ) public view override returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 amount\\n  ) public override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  function _approve(address owner, address spender, uint256 amount) private {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function increaseAllowance(\\n    address spender,\\n    uint256 addedValue\\n  ) public virtual returns (bool) {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].add(addedValue)\\n    );\\n    return true;\\n  }\\n\\n  function decreaseAllowance(\\n    address spender,\\n    uint256 subtractedValue\\n  ) public virtual returns (bool) {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        \\\"ERC20: decreased allowance below zero\\\"\\n      )\\n    );\\n    return true;\\n  }\\n\\n  function transfer(\\n    address recipient,\\n    uint256 amount\\n  ) public override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(\\n        amount,\\n        \\\"ERC20: transfer amount exceeds allowance\\\"\\n      )\\n    );\\n    return true;\\n  }\\n\\n  function _transfer(address from, address to, uint256 amount) private {\\n    require(!isBlacklisted[from], \\\"Sender is blacklisted\\\");\\n    require(!isBlacklisted[to], \\\"Recipient is blacklisted\\\");\\n    require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n    require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n    if ((!_isExcludedFromFee[from] && !_isExcludedFromFee[to])) {\\n      require(tradingEnabled, \\\"Trading is not enabled yet\\\");\\n    }\\n    if (!_isExcludedFromMaxTx[from] && !_isExcludedFromMaxTx[to]) {\\n      require(\\n        amount <= _maxTxAmount,\\n        \\\"Transfer amount exceeds the maxTxAmount.\\\"\\n      );\\n    }\\n    //indicates if fee should be deducted from transfer\\n    bool takeFee = true;\\n    bool isSell = to == uniswapV2Pair;\\n    bool isSwapping = (to == uniswapV2Pair || from == uniswapV2Pair);\\n    uint256 tMarketing = calculateTaxFee(\\n      amount,\\n      isSell ? sellTaxes.marketing : taxes.marketing\\n    );\\n    uint256 tReward = calculateTaxFee(\\n      amount,\\n      isSell ? sellTaxes.reward : taxes.reward\\n    );\\n\\n    //if any account belongs to _isExcludedFromFee account then remove the fee\\n    if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\n      takeFee = false;\\n      tMarketing = 0;\\n      tReward = 0;\\n    }\\n    if (tMarketing != 0 || tReward != 0) {\\n      _tokenTransfer(from, address(this), tMarketing.add(tReward), isSwapping);\\n      _totalReward = _totalReward.add(tReward);\\n      _totalMarketing = _totalMarketing.add(tMarketing);\\n    }\\n\\n    _tokenTransfer(from, to, amount.sub(tMarketing).sub(tReward), isSwapping);\\n\\n    uint256 contractTokenBalance = balanceOf(address(this));\\n\\n    if (takeFee && marketingAddress != address(0) && !isSwapping) {\\n      if (contractTokenBalance >= _totalMarketing) {\\n        contractTokenBalance = contractTokenBalance.sub(_totalMarketing);\\n        _swapForEth(_totalMarketing, marketingAddress);\\n        _totalMarketing = 0;\\n      }\\n    }\\n    if (takeFee && !isSwapping) {\\n      if (contractTokenBalance >= _totalReward) {\\n        _swapForEth(_totalReward, address(this));\\n        _totalReward = 0;\\n      }\\n    }\\n  }\\n\\n  function _tokenTransfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount,\\n    bool isSwapping\\n  ) private {\\n    require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    topUpClaimCycleAfterTransfer(recipient, isSwapping);\\n\\n    uint256 senderBalance = _balances[sender];\\n    require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n    _balances[sender] = senderBalance - amount;\\n    _balances[recipient] += amount;\\n\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  function topUpClaimCycleAfterTransfer(\\n    address recipient,\\n    bool isSwapping\\n  ) private {\\n    if (recipient == address(uniswapV2Pair)) {\\n      recipient = tx.origin;\\n    }\\n    if (isSwapping) {\\n      if (balanceOf(recipient) == 0) {\\n        nextAvailableClaimDate[recipient] =\\n          block.timestamp +\\n          getRewardCycleBlock();\\n      }\\n      nextAvailableClaimDate[recipient] =\\n        nextAvailableClaimDate[recipient] +\\n        claimDelay;\\n    } else {\\n      nextAvailableClaimDate[recipient] =\\n        block.timestamp +\\n        getRewardCycleBlock();\\n    }\\n  }\\n\\n  function _swapForEth(uint256 reward, address recipient) private {\\n    address[] memory path = new address[](2);\\n    path[0] = address(this);\\n    path[1] = uniswapV2Router.WETH();\\n    // make the swap\\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n      reward,\\n      0, // accept any amount of ETH\\n      path,\\n      recipient,\\n      block.timestamp + 20 * 60\\n    );\\n  }\\n\\n  function calculateTaxFee(\\n    uint256 _amount,\\n    uint256 _fee\\n  ) private pure returns (uint256) {\\n    return _amount.mul(_fee).div(10 ** 2);\\n  }\\n\\n  function isExcludedFromFee(address account) public view returns (bool) {\\n    return _isExcludedFromFee[account];\\n  }\\n\\n  function calculateETHReward(address ofAddress) public view returns (uint256) {\\n    uint256 ethPool = address(this).balance;\\n    // now calculate reward\\n    uint256 reward = ethPool.mul(balanceOf(ofAddress)).div(totalSupply());\\n\\n    return reward;\\n  }\\n\\n  function getRewardCycleBlock() public view returns (uint256) {\\n    if (block.timestamp >= disableEasyRewardFrom) return rewardCycleBlock;\\n    return easyRewardCycleBlock;\\n  }\\n\\n  function getRedReserveEnabled() public view returns (bool) {\\n    if (block.timestamp >= enableRedReservePurgeFrom ) return true;\\n    return false;\\n  }\\n\\n  function getRedReserveValue()\\n    public\\n    view\\n    returns (uint256 estimatedETH)\\n  {\\n    // Construct the path for the swap\\n    address[] memory path = new address[](2);\\n    path[0] = address(this); // Token address\\n    path[1] = uniswapV2Router.WETH(); // WETH address\\n\\n    // Estimate how much ETH the caller would get for their share of tokens\\n    uint[] memory amountsOut = uniswapV2Router.getAmountsOut(\\n      _totalMarketing.add(_totalReward),\\n      path\\n    );\\n    return amountsOut[1]; // This would be the estimated amount of ETH that the caller would receive\\n  }\\n\\n  function getRedReservePurgeReward()\\n    public\\n    view\\n    returns (uint256 estimatedETH)\\n  {\\n    uint256 callerShareFromMarketing = _totalMarketing\\n      .mul(purgeRewardPercent)\\n      .div(100);\\n    uint256 callerShareFromReward = _totalReward.mul(purgeRewardPercent).div(\\n      100\\n    );\\n\\n    uint256 totalCallerShare = callerShareFromMarketing.add(\\n      callerShareFromReward\\n    );\\n\\n    // Construct the path for the swap\\n    address[] memory path = new address[](2);\\n    path[0] = address(this); // Token address\\n    path[1] = uniswapV2Router.WETH(); // WETH address\\n\\n    // Estimate how much ETH the caller would get for their share of tokens\\n    uint[] memory amountsOut = uniswapV2Router.getAmountsOut(\\n      totalCallerShare,\\n      path\\n    );\\n    return amountsOut[1]; // This would be the estimated amount of ETH that the caller would receive\\n  }\\n  \\n\\n  function purgeRedReserve() public nonReentrant {\\n    require(tx.origin == msg.sender, \\\"sorry humans only\\\");\\n    require(getRedReserveEnabled(), \\\"Red reserve purge is not enabled\\\");\\n    uint256 contractTokenBalance = balanceOf(address(this));\\n    bool swapSuccess = false;\\n    // Calculate the caller's share from _totalMarketing and _totalReward\\n    uint256 callerShareFromMarketing = _totalMarketing\\n      .mul(purgeRewardPercent)\\n      .div(100);\\n    uint256 callerShareFromReward = _totalReward.mul(purgeRewardPercent).div(\\n      100\\n    );\\n\\n    // Deduct the caller's share from _totalMarketing and _totalReward\\n    uint256 reducedMarketing = _totalMarketing.sub(callerShareFromMarketing);\\n    uint256 reducedReward = _totalReward.sub(callerShareFromReward);\\n    uint256 totalCallerShare = callerShareFromMarketing.add(\\n      callerShareFromReward\\n    );\\n    if (contractTokenBalance >= totalCallerShare) {\\n      _swapForEth(totalCallerShare, msg.sender);\\n    }\\n\\n    if (marketingAddress != address(0)) {\\n      if (contractTokenBalance >= reducedMarketing) {\\n        contractTokenBalance = contractTokenBalance.sub(reducedMarketing);\\n        _swapForEth(reducedMarketing, marketingAddress);\\n        _totalMarketing = 0;\\n        swapSuccess = true;\\n      }\\n    }\\n\\n    if (contractTokenBalance >= reducedReward) {\\n      contractTokenBalance = contractTokenBalance.sub(reducedReward);\\n      _swapForEth(reducedReward, address(this));\\n      _totalReward = 0;\\n      swapSuccess = true;\\n    } else {\\n      swapSuccess = false;\\n    }\\n    emit RedReservePurged(msg.sender, totalCallerShare);\\n    require(swapSuccess, \\\"Not all swaps succeeded \\\");\\n  }\\n\\n  function claimETHReward() public nonReentrant {\\n    require(tx.origin == msg.sender, \\\"sorry humans only\\\");\\n    require(\\n      nextAvailableClaimDate[msg.sender] <= block.timestamp,\\n      \\\"Error: next available not reached\\\"\\n    );\\n    require(\\n      balanceOf(msg.sender) >= 0,\\n      \\\"Error: must own Token to claim reward\\\"\\n    );\\n\\n    uint256 reward = calculateETHReward(msg.sender);\\n\\n    // update rewardCycleBlock\\n    nextAvailableClaimDate[msg.sender] =\\n      block.timestamp +\\n      getRewardCycleBlock();\\n\\n    emit ClaimETHSuccessfully(\\n      msg.sender,\\n      reward,\\n      nextAvailableClaimDate[msg.sender]\\n    );\\n\\n    totalETHClaimed = totalETHClaimed.add(reward);\\n    personalETHClaimed[msg.sender] = personalETHClaimed[msg.sender].add(reward);\\n\\n    (bool sent, ) = address(msg.sender).call{value: reward}(\\\"\\\");\\n    require(sent, \\\"Error: Cannot withdraw reward\\\");\\n  }\\n\\n  function claimETHRewardGamble() public nonReentrant {\\n    require(tx.origin == msg.sender, \\\"sorry humans only\\\");\\n    require(\\n      nextAvailableClaimDate[msg.sender] <= block.timestamp,\\n      \\\"Error: next available not reached\\\"\\n    );\\n    require(\\n      balanceOf(msg.sender) >= 0,\\n      \\\"Error: must own Token to claim reward\\\"\\n    );\\n\\n    uint256 reward = Utils.calculateETHRewardGamble(\\n      balanceOf(msg.sender),\\n      address(this).balance,\\n      totalSupply()\\n    );\\n\\n    nextAvailableClaimDate[msg.sender] =\\n      block.timestamp +\\n      getRewardCycleBlock();\\n\\n    emit ClaimETHGambleSuccessfully(\\n      msg.sender,\\n      reward,\\n      nextAvailableClaimDate[msg.sender],\\n      reward > 0\\n    );\\n\\n    totalETHClaimed = totalETHClaimed.add(reward);\\n    personalETHClaimed[msg.sender] = personalETHClaimed[msg.sender].add(reward);\\n\\n    if (reward > 0) {\\n      (bool sent, ) = address(msg.sender).call{value: reward}(\\\"\\\");\\n      require(sent, \\\"Error: Cannot withdraw reward\\\");\\n    }\\n  }\\n\\n  function addToBlacklist(address account) external onlyOwner {\\n    isBlacklisted[account] = true;\\n  }\\n  \\n  function addToBlacklistBulk(address[] calldata accounts) external onlyOwner {\\n    for (uint256 i = 0; i < accounts.length; i++) {\\n      isBlacklisted[accounts[i]] = true;\\n    }\\n  }\\n\\n  function removeFromBlacklist(address account) external onlyOwner {\\n    isBlacklisted[account] = false;\\n  }\\n\\n  function setExcludeFromMaxTx(address _address, bool value) public onlyOwner {\\n    _isExcludedFromMaxTx[_address] = value;\\n  }\\n\\n  function excludeFromFee(address account) public onlyOwner {\\n    _isExcludedFromFee[account] = true;\\n  }\\n\\n  function includeInFee(address account) public onlyOwner {\\n    _isExcludedFromFee[account] = false;\\n  }\\n\\n  function setMaxTxPercent(uint256 maxTxPercent) public onlyOwner {\\n    _maxTxAmount = _totalSupply.mul(maxTxPercent).div(10000);\\n  }\\n\\n  function setBuyFeePercents(\\n    uint256 marketingFee,\\n    uint256 rewardFee\\n  ) external onlyOwner {\\n    taxes.marketing = marketingFee;\\n    taxes.reward = rewardFee;\\n  }\\n\\n  function setSellFeePercents(\\n    uint256 marketingFee,\\n    uint256 rewardFee\\n  ) external onlyOwner {\\n    sellTaxes.marketing = marketingFee;\\n    sellTaxes.reward = rewardFee;\\n  }\\n\\n  function setMarketingWallet(address marketingWallet) external onlyOwner {\\n    marketingAddress = marketingWallet;\\n  }\\n\\n  function setClaimDelay(uint256 newDelay) external onlyOwner {\\n    claimDelay = newDelay;\\n  }\\n\\n  function rescueERC20(\\n    address tokenAddress,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IERC20(tokenAddress).transfer(owner(), amount);\\n  }\\n\\n  function rescueETH(uint256 weiAmount) external onlyOwner {\\n    payable(owner()).sendValue(weiAmount);\\n  }\\n\\n  function emergencyUpdateTotalMarketing(uint256 amount) external onlyOwner {\\n    _totalMarketing = amount;\\n  }\\n\\n  function emergencyUpdateTotalReward(uint256 amount) external onlyOwner {\\n    _totalReward = amount;\\n  }\\n\\n  function updatepurgeRewardPercent(uint256 percent) external onlyOwner {\\n    purgeRewardPercent = percent;\\n  }\\n\\n  function enableTrading() external onlyOwner {\\n    tradingEnabled = true;\\n  }\\n\\n  function activateContract() public onlyOwner {\\n    // reward claim\\n    disableEasyRewardFrom = block.timestamp + 3 days;\\n    enableRedReservePurgeFrom = block.timestamp + 12 hours;\\n    rewardCycleBlock = 12 hours;\\n    easyRewardCycleBlock = 6 hours;\\n\\n    setMaxTxPercent(200);\\n\\n    taxes.marketing = 20;\\n    taxes.reward = 10;\\n\\n    sellTaxes.marketing = 60;\\n    sellTaxes.reward = 20;\\n\\n    // approve contract\\n    _approve(address(this), address(uniswapV2Router), 2 ** 256 - 1);\\n    _approve(address(this), address(uniswapV2Pair), 2 ** 256 - 1);\\n  }\\n\\n  receive() external payable {\\n    // To receive ETH from UniswapV2Router when swapping\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint\\n  );\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (address pair);\\n\\n  function allPairs(uint) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint);\\n\\n  function createPair(address tokenA, address tokenB)\\n    external\\n    returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (\\n      uint amountA,\\n      uint amountB,\\n      uint liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint amountToken,\\n      uint amountETH,\\n      uint liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountToken, uint amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountToken, uint amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint[] memory amounts);\\n\\n  function quote(\\n    uint amountA,\\n    uint reserveA,\\n    uint reserveB\\n  ) external pure returns (uint amountB);\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) external pure returns (uint amountOut);\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) external pure returns (uint amountIn);\\n\\n  function getAmountsOut(uint amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint[] memory amounts);\\n\\n  function getAmountsIn(uint amountOut, address[] calldata path)\\n    external\\n    view\\n    returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Router.sol\\\";\\n\\nlibrary Utils {\\n  using SafeMath for uint256;\\n\\n  function random(\\n    uint256 from,\\n    uint256 to,\\n    uint256 salty\\n  ) private view returns (uint256) {\\n    uint256 seed = uint256(\\n      keccak256(\\n        abi.encodePacked(\\n          block.timestamp +\\n            block.difficulty +\\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) /\\n              (block.timestamp)) +\\n            block.gaslimit +\\n            ((uint256(keccak256(abi.encodePacked(msg.sender)))) /\\n              (block.timestamp)) +\\n            block.number +\\n            salty\\n        )\\n      )\\n    );\\n    return seed.mod(to - from) + from;\\n  }\\n\\n  function isLotteryWon(\\n    uint256 salty,\\n    uint256 winningDoubleRewardPercentage\\n  ) private view returns (bool) {\\n    uint256 luckyNumber = random(0, 100, salty);\\n    uint256 winPercentage = winningDoubleRewardPercentage;\\n    return luckyNumber <= winPercentage;\\n  }\\n\\n  function calculateETHRewardGamble(\\n    uint256 currentBalance,\\n    uint256 currentETHPool,\\n    uint256 totalSupply\\n  ) public view returns (uint256) {\\n    uint256 ethPool = currentETHPool;\\n\\n    uint256 reward = 0;\\n    // calculate reward to send\\n    bool isLotteryWonOnClaim = isLotteryWon(\\n      currentBalance,\\n      50\\n    );\\n    if (isLotteryWonOnClaim) {\\n      reward = ethPool.mul(2).mul(currentBalance).div(\\n        totalSupply\\n      );\\n    }\\n    return reward;\\n  }\\n\\n  function calculateTopUpClaim(\\n    uint256 currentRecipientBalance,\\n    uint256 basedRewardCycleBlock,\\n    uint256 threshHoldTopUpRate,\\n    uint256 amount\\n  ) public view returns (uint256) {\\n    if (currentRecipientBalance == 0) {\\n      return block.timestamp + basedRewardCycleBlock;\\n    } else {\\n      uint256 rate = amount.mul(100).div(currentRecipientBalance);\\n      if (uint256(rate) >= threshHoldTopUpRate) {\\n        uint256 incurCycleBlock = basedRewardCycleBlock.mul(uint256(rate)).div(\\n          100\\n        );\\n        if (incurCycleBlock >= basedRewardCycleBlock) {\\n          incurCycleBlock = basedRewardCycleBlock;\\n        }\\n\\n        return incurCycleBlock;\\n      }\\n\\n      return 0;\\n    }\\n  }\\n\\n  function doNothing() private pure returns (bool) {\\n    return true;\\n  }\\n\\n  function swapETHForTokens(\\n    address routerAddress,\\n    address recipient,\\n    uint256 ethAmount\\n  ) public {\\n    IUniswapV2Router02 router = IUniswapV2Router02(routerAddress);\\n\\n    // generate the pancake pair path of token -> weth\\n    address[] memory path = new address[](2);\\n    path[0] = router.WETH();\\n    path[1] = address(this);\\n\\n    // make the swap\\n    router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(\\n      0, // accept any amount of ETH\\n      path,\\n      address(recipient),\\n      block.timestamp + 360\\n    );\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/Utils.sol\": {\r\n        \"Utils\": \"0xc9a2cd396e85427a1e6383ab1ba8efdfa68bdea2\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextAvailableClaimDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLotteryWon\",\"type\":\"bool\"}],\"name\":\"ClaimETHGambleSuccessfully\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextAvailableClaimDate\",\"type\":\"uint256\"}],\"name\":\"ClaimETHSuccessfully\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"}],\"name\":\"RedReservePurged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addToBlacklistBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ofAddress\",\"type\":\"address\"}],\"name\":\"calculateETHReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimETHReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimETHRewardGamble\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableEasyRewardFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"easyRewardCycleBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyUpdateTotalMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyUpdateTotalReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRedReservePurgeFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedReserveEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedReservePurgeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedETH\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedReserveValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedETH\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardCycleBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextAvailableClaimDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"personalETHClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purgeRedReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purgeRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCycleBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFeePercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"setClaimDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeFromMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardFee\",\"type\":\"uint256\"}],\"name\":\"setSellFeePercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"updatepurgeRewardPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Communism", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}