{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/utils/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/topic/ITopic.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.0;\\n\\ninterface ITopic {\\n\\n    event SetTopic(\\n        uint256 indexed id,\\n        string name,\\n        uint256 startTime,\\n        uint256 totalSupply\\n    );\\n\\n    event SetOpinion(\\n        uint256 indexed id,\\n        string name,\\n        uint256 startTime,\\n        uint256 totalSupply,\\n        uint256 parentId\\n    );\\n\\n    event BuyPower(\\n        address indexed sender,\\n        uint256 id,\\n        uint256 price,\\n        uint256 costIn,\\n        uint256 amount,\\n        uint256 burned,\\n        uint256 fee\\n    );\\n\\n    event SellPower(\\n        address indexed sender,\\n        uint256 id,\\n        uint256 price,\\n        uint256 gainOut,\\n        uint256 amount,\\n        uint256 burned,\\n        uint256 fee\\n    );\\n\\n    event BuyVote(\\n        address indexed sender,\\n        uint256 id,\\n        uint256 ethPrice,\\n        uint256 price,\\n        uint256 powerIn,\\n        uint256 amount,\\n        uint256 burned,\\n        uint256 fee\\n    );\\n\\n    event SellVote(\\n        address indexed sender,\\n        uint256 id,\\n        uint256 ethPrice,\\n        uint256 price,\\n        uint256 powerOut,\\n        uint256 amount,\\n        uint256 burned,\\n        uint256 fee\\n    );\\n\\n    event Transfer(\\n        uint256 indexed id,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount);\\n\\n    event Burn(\\n        uint256 indexed id,\\n        address indexed from,\\n        uint256 amount);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transfer(\\n        uint256 id,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function burn(\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function getLiquidity(uint256 id) external view returns (uint256 liquidityPower, uint256 liquidity);\\n\\n    function topicPrice(uint256 id) external view returns (uint256);\\n\\n    function opinionPrice(uint256 id) external view returns (uint256);\\n\\n    function buyTopicPower(uint256 id, uint256 cost) external view returns (uint256);\\n\\n    function sellTopicGain(uint256 id, uint256 amount) external view returns (uint256);\\n\\n    function buyPower(uint256 id, uint256 amountOutMin) external payable;\\n\\n    function sellPower(uint256 id, uint256 amount, uint256 amountOutMin) external;\\n\\n    function buyOpinionVote(uint256 id, uint256 cost) external view returns (uint256);\\n\\n    function sellOpinionGain(uint256 id, uint256 amount) external view returns (uint256);\\n\\n    function buyVote(uint256 id, uint256 amountOutMin, uint256 cost) external;\\n\\n    function sellVote(uint256 id, uint256 amount, uint256 amountOutMin) external;\\n\\n    function buyVoteInETH(uint256 id, uint256 amountOutMin) external payable;\\n\\n    function sellVote2ETH(uint256 id, uint256 amount, uint256 amountOutMin) external;\\n}\\n\"\r\n    },\r\n    \"contracts/topic/Topic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../periphery/interfaces/IWETH.sol\\\";\\nimport '../lib/utils/TransferHelper.sol';\\nimport \\\"./ITopic.sol\\\";\\n\\ncontract Topic is ITopic, Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    mapping(uint256 => uint) private locked;\\n    mapping(uint256 => uint) public status;\\n\\n    address constant private DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address public immutable WETH;\\n    uint256 public fees;\\n    address public operatorAddress;\\n\\n    mapping(uint256 => uint256) public parentIds;\\n    mapping(uint256 => uint256) public childCount;\\n    mapping(uint256 => string) public name;\\n    mapping(uint256 => uint256) public start;\\n    mapping(uint256 => uint256) public totalSupply;\\n    mapping(uint256 => uint256) private _liquidityPower;\\n    mapping(uint256 => uint256) private _liquidity;\\n    mapping(uint256 => mapping(address => uint256)) public balanceOf;\\n    mapping(uint256 => uint256) public holders;\\n\\n    uint256 constant private BASE_PRICE = 1E15;\\n    uint256 constant private X = 1E6;\\n\\n    constructor(address _WETH){\\n        WETH = _WETH;\\n        operatorAddress = msg.sender;\\n    }\\n\\n    function decimals() override virtual public view returns (uint8) {\\n        return 18;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    modifier lock(uint256 id) {\\n        require(locked[id] == 0, 'LOCKED');\\n        locked[id] = 1;\\n        _;\\n        locked[id] = 0;\\n    }\\n\\n    modifier created(uint256 id){\\n        require(status[id] > 0, 'Not created');\\n        _;\\n    }\\n\\n\\n    modifier started(uint256 id){\\n        if (parentIds[id] > 0) {\\n            require(block.timestamp >= start[id] && block.timestamp >= start[parentIds[id]], 'Not started');\\n        } else {\\n            require(block.timestamp >= start[id], 'Not started');\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOperator(){\\n        require(msg.sender == operatorAddress, 'caller is not the operator');\\n        _;\\n    }\\n\\n    function setOperatorAddress(address newAddress) onlyOwner public {\\n        require(newAddress != DEAD, 'Error newAddress');\\n        operatorAddress = newAddress;\\n    }\\n\\n    function withdrawFee(uint256 amount) onlyOwner public {\\n        require(amount <= fees, 'Insufficient');\\n        fees -= amount;\\n        IWETH(WETH).withdraw(amount);\\n        TransferHelper.safeTransferETH(msg.sender, amount);\\n    }\\n\\n    function withdraw() onlyOwner public {\\n        uint256 amount = IERC20(WETH).balanceOf(address(this));\\n        IWETH(WETH).withdraw(amount);\\n        TransferHelper.safeTransferETH(msg.sender, amount);\\n    }\\n\\n    function getBaseData(uint256 id) public view returns (uint _status,\\n        uint256 _activeSupply,\\n        uint256 _holders,\\n        uint256 _price,\\n        uint256 liquidityPower,\\n        uint256 liquidity,\\n        uint256 burned,\\n        uint256 hold){\\n        if (status[id] == 0) {\\n            _status = 0; // Not created\\n            _holders = 0;\\n            _price = 0;\\n        } else {\\n            _holders = holders[id];\\n            if (block.timestamp < start[id]) {\\n                _status = 1; // Not start\\n                if (parentIds[id] == 0) _price = 1E15;\\n                else _price = 1E18;\\n            } else {\\n                if (parentIds[id] == 0) _price = topicPrice(id);\\n                else _price = opinionPrice(id);\\n                _status = 2; // Trading\\n            }\\n        }\\n        (liquidityPower, liquidity) = getLiquidity(id);\\n        if (parentIds[id] == 0) _activeSupply = totalSupply[id] - liquidityPower - balanceOf[id][DEAD];\\n        else _activeSupply = totalSupply[id] - liquidity - balanceOf[id][DEAD];\\n        burned = balanceOf[id][DEAD];\\n        hold = balanceOf[id][address(this)];\\n    }\\n\\n    function createTopic(uint256 _id,\\n        uint256 _start,\\n        string memory _name,\\n        uint256 _totalSupply) public onlyOperator {\\n        require(status[_id] == 0, 'Created');\\n        require(_id > 0, '_id zero');\\n        require(_totalSupply >= 20, '_totalSupply low');\\n        _liquidityPower[_id] = totalSupply[_id] = _totalSupply;\\n        _liquidity[_id] = _totalSupply * BASE_PRICE / 1E18;\\n        balanceOf[_id][address(this)] = totalSupply[_id];\\n        emit Transfer(_id, DEAD, address(this), totalSupply[_id]);\\n        holders[_id] += 1;\\n        childCount[0] += 1;\\n        parentIds[_id] = 0;\\n        status[_id] = 1;\\n        start[_id] = _start;\\n        name[_id] = _name;\\n        emit SetTopic(_id, _name, _start, totalSupply[_id]);\\n    }\\n\\n    function createOpinion(uint256 _id,\\n        uint256 _start,\\n        string memory _name,\\n        uint256 _topic) public onlyOperator {\\n        require(status[_id] == 0, 'Created');\\n        require(_id > 0, '_id zero');\\n        require(_id != _topic, '_id == _topic');\\n        require(status[_topic] > 0, '_topic Not created');\\n        require(parentIds[_topic] == 0, '_topic error');\\n        require(start[_topic] <= _start, '_start < topic start');\\n        _liquidityPower[_id] = _liquidity[_id] = totalSupply[_id] = totalSupply[_topic] * 5E4 / X;\\n        balanceOf[_id][address(this)] = totalSupply[_id];\\n        emit Transfer(_id, DEAD, address(this), totalSupply[_id]);\\n        holders[_id] += 1;\\n        childCount[_topic] += 1;\\n        parentIds[_id] = _topic;\\n        status[_id] = 1;\\n        start[_id] = _start;\\n        name[_id] = _name;\\n        emit SetOpinion(_id, _name, _start, totalSupply[_id], _topic);\\n    }\\n\\n    function setStartTime(uint256 _id, uint256 _start) created(_id) public onlyOperator {\\n        require(block.timestamp < start[_id], 'Trading');\\n        start[_id] = _start;\\n        if (parentIds[_id] == 0) emit SetTopic(_id, name[_id], _start, totalSupply[_id]);\\n        else emit SetOpinion(_id, name[_id], _start, totalSupply[_id], parentIds[_id]);\\n    }\\n\\n    function setName(uint256 _id, string memory _name) created(_id) public onlyOperator {\\n        name[_id] = _name;\\n        if (parentIds[_id] == 0) emit SetTopic(_id, _name, start[_id], totalSupply[_id]);\\n        else emit SetOpinion(_id, _name, start[_id], totalSupply[_id], parentIds[_id]);\\n    }\\n\\n    function getLiquidity(uint256 id) override virtual public view returns (uint256 liquidityPower, uint256 liquidity){\\n        liquidityPower = _liquidityPower[id];\\n        liquidity = _liquidity[id];\\n    }\\n\\n    function topicPrice(uint256 id) override virtual public view returns (uint256){\\n        require(parentIds[id] == 0, 'Opinion');\\n        return _liquidity[id].mul(1E18).div(_liquidityPower[id]);\\n    }\\n\\n    function opinionPrice(uint256 id) override virtual public view returns (uint256){\\n        require(parentIds[id] > 0, 'Topic');\\n        return _liquidityPower[id].mul(1E18).div(_liquidity[id]);\\n    }\\n\\n    function buyTopicPower(uint256 id, uint256 cost) override virtual public view returns (uint256){\\n        (uint256 amount,uint256 price,uint256 fee,uint256 burned,uint256 k) = _buyTopicPower(id, cost);\\n        return amount;\\n    }\\n\\n    function _buyTopicPower(uint256 id, uint256 cost) created(id) started(id) internal virtual view returns (uint256 amount, uint256 price, uint256 fee, uint256 burned, uint256 k){\\n        require(parentIds[id] == 0, 'Opinion');\\n        require(_liquidityPower[id] > 0, 'Insufficient liquidity');\\n        require(cost >= 1E12 && cost < 1E26, 'Overflow');\\n        k = _liquidityPower[id] * _liquidity[id];\\n        uint256 a1 = 2E4;\\n        uint256 a2 = 63E4;\\n        uint256 time = block.timestamp - start[id];\\n        time = time / 30;\\n        if (time < 60) a2 -= (time * 1E4);\\n        else a2 = 3E4;\\n        fee = cost * a1 / X;\\n        amount = _liquidityPower[id] - k / (_liquidity[id] + (cost - fee));\\n        price = (cost - fee) * 1E18 / amount;\\n        burned = amount * a2 / X;\\n        amount = amount * (X - a2) / X;\\n        require(amount > 0 && amount < _liquidityPower[id], 'Insufficient liquidity');\\n    }\\n\\n    function sellTopicGain(uint256 id, uint256 amount) override virtual public view returns (uint256){\\n        (uint256 gain,uint256 price,uint256 fee,uint256 burned,uint256 k) = _sellTopicGain(id, amount);\\n        return gain;\\n    }\\n\\n    function _sellTopicGain(uint256 id, uint256 amount) created(id) started(id) internal virtual view returns (uint256 gain, uint256 price, uint256 fee, uint256 burned, uint256 k){\\n        require(block.timestamp >= start[id], 'Not started');\\n        require(parentIds[id] == 0, 'Opinion');\\n        require(amount > 0 && _liquidity[id] > 0, 'Insufficient liquidity');\\n        uint256 b1 = 2E4;\\n        uint256 b2 = 3E4;\\n        k = _liquidityPower[id] * _liquidity[id];\\n        burned = amount * b2 / X;\\n        gain = _liquidity[id] - k / (_liquidityPower[id] + (amount - burned));\\n        fee = gain * b1 / X;\\n        gain = gain * (X - b1) / X;\\n        price = gain * 1E18 / amount;\\n        require(gain < _liquidity[id], 'Insufficient liquidity');\\n    }\\n\\n    function buyPower(uint256 id, uint256 amountOutMin) override virtual external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n        _buyPower(id, msg.sender, amountOutMin, msg.value);\\n    }\\n\\n    function _buyPower(uint256 id, address to, uint256 amountOutMin, uint256 cost) lock(id) internal virtual returns (uint256) {\\n        (uint256 amount,uint256 price,uint256 fee,uint256 burned,uint256 k) = _buyTopicPower(id, cost);\\n        require(amount >= amountOutMin, 'LT amountOutMin');\\n        _transfer(id, address(this), to, amount);\\n        _liquidityPower[id] -= (amount + burned);\\n        if (burned > 0) _burn(id, address(this), burned, k);\\n        _liquidity[id] += (cost - fee);\\n        fees += fee;\\n        emit BuyPower(to, id, price, cost, amount, burned, fee);\\n        return amount;\\n    }\\n\\n    function sellPower(uint256 id, uint256 amount, uint256 amountOutMin) override virtual external {\\n        _sellPower(id, msg.sender, amount, amountOutMin, false);\\n    }\\n\\n    function _sellPower(uint256 id, address to, uint256 amount, uint256 amountOutMin, bool isSellFee) lock(id) internal virtual returns (uint256){\\n        (uint256 gain,uint256 price,uint256 fee,uint256 burned,uint256 k) = _sellTopicGain(id, amount);\\n        require(gain >= amountOutMin, 'Insufficient output amount');\\n        _transfer(id, to, address(this), amount);\\n        if (burned > 0) _burn(id, address(this), burned, k);\\n        _liquidityPower[id] += (amount - burned);\\n        _liquidity[id] -= (gain + fee);\\n        fees += fee;\\n        if (isSellFee) fees += gain;\\n        else {\\n            require(gain <= IERC20(WETH).balanceOf(address(this)), 'Insufficient ETH');\\n            IWETH(WETH).withdraw(gain);\\n            TransferHelper.safeTransferETH(to, gain);\\n        }\\n        emit SellPower(to, id, price, gain, amount, burned, fee);\\n        return gain;\\n    }\\n\\n    function buyOpinionVote(uint256 id, uint256 cost) override virtual public view returns (uint256){\\n        (uint256 amount,uint256 price,uint256 fee,uint256 burned,uint256 k) = _buyOpinionVote(id, cost);\\n        return amount;\\n    }\\n\\n    function _buyOpinionVote(uint256 id, uint256 cost) created(id) started(id) internal view returns (uint256 amount, uint256 price, uint256 fee, uint256 burned, uint256 k){\\n        require(parentIds[id] > 0, 'Topic');\\n        require(cost >= 1E12, 'The minimum cost is 0.000001');\\n        require(_liquidity[id] > 0, 'Insufficient liquidity');\\n        uint256 a1 = 2E4;\\n        uint256 a2 = 63E4;\\n        k = _liquidity[id] * _liquidityPower[id];\\n        fee = cost * a1 / X;\\n        amount = _liquidity[id] - k / (_liquidityPower[id] + (cost - fee));\\n        price = (cost - fee) * 1E18 / amount;\\n        uint256 time = block.timestamp - start[id];\\n        time = time / 30;\\n        if (time < 60) a2 -= (time * 1E4);\\n        else a2 = 3E4;\\n        burned = amount * a2 / X;\\n        amount = amount * (X - a2) / X;\\n        require(amount > 0 && amount < _liquidity[id], 'Insufficient liquidity');\\n    }\\n\\n    function sellOpinionGain(uint256 id, uint256 amount) override virtual public view returns (uint256){\\n        (uint256 gain,uint256 price,uint256 fee,uint256 burned,uint256 k) = _sellOpinionGain(id, amount);\\n        return gain;\\n    }\\n\\n    function _sellOpinionGain(uint256 id, uint256 amount) created(id) started(id) internal view returns (uint256 gain, uint256 price, uint256 fee, uint256 burned, uint256 k){\\n        require(parentIds[id] > 0, 'Topic');\\n        require(amount >= 1E12, 'The minimum amount is 0.000001');\\n        require(_liquidityPower[id] > 0, 'Insufficient liquidity');\\n        uint256 b1 = 2E4;\\n        uint256 b2 = 3E4;\\n        k = _liquidityPower[id] * _liquidity[id];\\n        burned = amount * b2 / X;\\n        gain = _liquidityPower[id] - k / (_liquidity[id] + (amount - burned));\\n        fee = gain * b1 / X;\\n        gain = gain * (X - b1) / X;\\n        price = gain * 1E18 / amount;\\n        require(gain < _liquidityPower[id], 'Insufficient liquidity');\\n    }\\n\\n    function buyVote(uint256 id, uint256 amountOutMin, uint256 cost) override virtual external {\\n        _buyVote(id, msg.sender, amountOutMin, cost);\\n    }\\n\\n    function _buyVote(uint256 id, address to, uint256 amountOutMin, uint256 cost) lock(id) internal virtual {\\n        (uint256 amount,uint256 price,uint256 fee,uint256 burned,uint256 k) = _buyOpinionVote(id, cost);\\n        require(amount >= amountOutMin, 'Insufficient amount');\\n        uint256 parentId = parentIds[id];\\n        _transfer(parentId, to, address(this), cost - fee);\\n        _transfer(parentId, to, owner(), fee);\\n        _liquidity[id] -= (amount + burned);\\n        if (burned > 0) _burn(id, address(this), burned, k);\\n        _transfer(id, address(this), to, amount);\\n        _liquidityPower[id] += (cost - fee);\\n        _sellPower(parentId, owner(), fee, 0, true);\\n        uint256 ethPrice = (price * topicPrice(parentId)) / 1E18;\\n        emit BuyVote(to, id, ethPrice, price, cost, amount, burned, fee);\\n    }\\n\\n    function sellVote(uint256 id, uint256 amount, uint256 amountOutMin) override virtual external {\\n        _sellVote(id, msg.sender, amount, amountOutMin);\\n    }\\n\\n    function _sellVote(uint256 id, address to, uint256 amount, uint256 amountOutMin) lock(id) internal virtual returns (uint256) {\\n        (uint256 gain,uint256 price,uint256 fee,uint256 burned,uint256 k) = _sellOpinionGain(id, amount);\\n        require(gain >= amountOutMin, 'Insufficient output amount');\\n        _transfer(id, to, address(this), amount);\\n        if (burned > 0) _burn(id, address(this), burned, k);\\n        _liquidityPower[id] -= (gain + fee);\\n        _liquidity[id] += (amount - burned);\\n        uint256 parentId = parentIds[id];\\n        _transfer(parentId, address(this), owner(), fee);\\n        _sellPower(parentId, owner(), fee, 0, true);\\n        _transfer(parentId, address(this), to, gain);\\n        emit SellVote(to, id, (price * topicPrice(parentId)) / 1E18, price, gain, amount, burned, fee);\\n        return gain;\\n    }\\n\\n\\n    function buyVoteInETH(uint256 id, uint256 amountOutMin) override virtual external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n        uint256 power = _buyPower(parentIds[id], msg.sender, 0, msg.value);\\n        _buyVote(id, msg.sender, amountOutMin, power);\\n    }\\n\\n    function sellVote2ETH(uint256 id, uint256 amount, uint256 amountOutMin) override virtual external {\\n        uint256 power = _sellVote(id, msg.sender, amount, 0);\\n        _sellPower(parentIds[id], msg.sender, power, amountOutMin, false);\\n    }\\n\\n    function _transfer(\\n        uint256 id,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        if (to == DEAD) {\\n            uint256 k = _liquidityPower[id] * _liquidity[id];\\n            _burn(id, from, amount, k);\\n        } else {\\n            require(balanceOf[id][from] >= amount, 'Insufficient');\\n            balanceOf[id][from] -= amount;\\n            if (balanceOf[id][from] == 0 && holders[id] >= 1) holders[id] -= 1;\\n            if (balanceOf[id][to] == 0) holders[id] += 1;\\n            balanceOf[id][to] += amount;\\n            emit Transfer(id, from, to, amount);\\n        }\\n    }\\n\\n    function transfer(\\n        uint256 id,\\n        address to,\\n        uint256 amount\\n    ) created(id) public override {\\n        _transfer(id, msg.sender, to, amount);\\n    }\\n\\n    function burn(\\n        uint256 id,\\n        uint256 amount\\n    ) created(id) public override {\\n        uint256 k = _liquidityPower[id] * _liquidity[id];\\n        _burn(id, msg.sender, amount, k);\\n    }\\n\\n    function _burn(uint256 id, address from, uint256 amount, uint256 k) internal virtual {\\n        require(balanceOf[id][from] >= amount, 'Insufficient');\\n        balanceOf[id][from] -= amount;\\n        if (balanceOf[id][from] == 0 && holders[id] >= 1) holders[id] -= 1;\\n        if (balanceOf[id][DEAD] == 0) holders[id] += 1;\\n        balanceOf[id][DEAD] += amount;\\n        uint256 getEth = 0;\\n        if (parentIds[id] == 0) {\\n            getEth = k / (totalSupply[id] - balanceOf[id][DEAD]) - k / (totalSupply[id] - balanceOf[id][DEAD] + amount);\\n        } else {\\n            uint256 getPower = k / (totalSupply[id] - balanceOf[id][DEAD]) - k / (totalSupply[id] - balanceOf[id][DEAD] + amount);\\n            uint256 parentId = parentIds[id];\\n            k = _liquidityPower[parentId] * _liquidity[parentId];\\n            _burn(parentId, address(this), getPower, k);\\n        }\\n        fees += getEth;\\n        emit Transfer(id, from, DEAD, amount);\\n        emit Burn(id, from, amount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"costIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BuyPower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"powerIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BuyVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gainOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SellPower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"powerOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SellVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"}],\"name\":\"SetOpinion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"SetTopic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"buyOpinionVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"buyPower\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"buyTopicPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"buyVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"buyVoteInETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"childCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"}],\"name\":\"createOpinion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"createTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBaseData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_activeSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holders\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"opinionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"parentIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellOpinionGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"sellPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellTopicGain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"sellVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"sellVote2ETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"topicPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Topic", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}