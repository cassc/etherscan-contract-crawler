{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/FT500StakingWithRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract FT500StakingWithRewards is Ownable {\\n    using SafeMath for uint256;\\n\\n    IERC20 public stakingToken;\\n    uint256 public totalStaked;\\n    uint256 public totalRewards;\\n\\n    struct Stake {\\n        uint256 amount;\\n        uint256 startTime;\\n        uint256 duration; // 1, 3, 6, or 12 months represented as seconds\\n        uint256 tier; // Tier 1, 2, 3, 4, or 5\\n        uint256 reward;\\n        uint256 rewardDebt;\\n    }\\n\\n    // Mapping of user addresses to their staking positions\\n    mapping(address => Stake) public stakes;\\n\\n    bool public ethHarvestActive = false;\\n    \\n    uint256[5][] public rewardPercentages = [\\n        [200, 400, 800, 1600], // Tier 1\\n        [300, 600, 1200, 1800], // Tier 2\\n        [400, 800, 1600, 2000], // Tier 3\\n        [500, 1000, 2000, 2500], // Tier 4\\n        [800, 1600, 2400, 3200] // Tier 5\\n    ];\\n\\n    uint256 internal accRewardPerToken;\\n\\n    // ==============\\n    //   CONSTANTS\\n    // ==============\\n    uint256 internal constant PRECISION = 1e18;\\n\\n\\n    // ==============\\n    //    EVENTS\\n    // ==============\\n    event Deposit(address indexed user, uint256 indexed stakedAmount);\\n\\n    event Withdraw(address indexed user, uint256 indexed withdrawAmount);\\n\\n    event HarvestEth(address indexed user, uint256 indexed harvestAmount);\\n\\n    event RewardsAdded(uint256 amount);\\n\\n    constructor(address _stakingToken) {\\n        stakingToken = IERC20(_stakingToken);\\n    }\\n\\n    // Stake tokens with a specified lockup period and tier\\n    function stake(uint256 amount, uint256 duration) external {\\n        \\n        require(duration == 1 || duration == 3 || duration == 6 || duration == 12, \\\"Invalid duration\\\");\\n\\n        // Transfer tokens to the contract\\n        require(stakingToken.transferFrom(msg.sender, address(this), amount), \\\"Transfer failed\\\");\\n        \\n        //check if user already has stake\\n        if(stakes[msg.sender].amount > 0){\\n            totalStaked = totalStaked.sub(stakes[msg.sender].amount);\\n            totalRewards = totalRewards.sub(stakes[msg.sender].reward);\\n            amount += stakes[msg.sender].amount;\\n        } \\n\\n        \\n        uint8 tier;\\n        if(amount < 100_000 * 1e18){\\n            tier = 1;    \\n        }else if(amount >= 100_000 * 1e18 && amount < 250_000 * 1e18){\\n            tier = 2;\\n        }else if(amount >= 250_000 * 1e18 && amount < 500_000 * 1e18){\\n            tier = 3;\\n        }else if(amount >= 500_000 * 1e18 && amount < 1_000_000 * 1e18){\\n            tier = 4;\\n        }else if(amount >= 1_000_000 * 1e18){\\n            tier = 5;\\n        }\\n\\n        require(tier >= 1 && tier <= 5, \\\"Invalid tier\\\");\\n\\n        uint8 rewardPecentageIndex;\\n\\n        if(duration == 1){\\n            rewardPecentageIndex = 1;\\n        }else if(duration == 3){\\n            rewardPecentageIndex = 2;\\n        }else if(duration == 6){\\n            rewardPecentageIndex = 3;\\n        }else if(duration == 12){\\n            rewardPecentageIndex = 4;\\n        }\\n\\n\\n        uint256 rewardPercentage = rewardPercentages[tier - 1][rewardPecentageIndex - 1];\\n\\n        // use updated amount to calculate reward\\n        uint256 reward = amount.mul(rewardPercentage).div(10_000);\\n\\n        // Update user's staking position\\n        stakes[msg.sender] = Stake(amount, block.timestamp, duration * 30 days, tier, reward, 0);\\n        _updateUserDebt(msg.sender, amount);\\n\\n        // Update total staked amount\\n        totalStaked = totalStaked.add(amount);\\n        // Update total reward\\n        totalRewards = totalRewards.add(reward);\\n    }\\n\\n    // Withdraw staked tokens and rewards\\n    function withdraw() external {\\n        Stake storage userStake = stakes[msg.sender];\\n        require(userStake.amount > 0, \\\"No staking position\\\");\\n\\n        _harvestEth();\\n\\n        uint256 stakedAmount = userStake.amount;\\n        uint256 rewards = stakes[msg.sender].reward;\\n\\n        // Calculate the time elapsed since the start of the stake\\n        uint256 elapsedTime = block.timestamp.sub(userStake.startTime);\\n\\n        //else take earlyWithdrawal fees\\n\\n        // Update total staked amount\\n        totalStaked = totalStaked.sub(stakedAmount);\\n        //  update total rewards\\n        totalRewards = totalRewards.sub(rewards);\\n\\n        if(elapsedTime >= userStake.duration){\\n            delete stakes[msg.sender];\\n            //if stake time is elapsed, send rewards and send back staked funds\\n            require(stakingToken.transfer(msg.sender, rewards+stakedAmount), \\\"Transfer failed\\\");\\n\\n        }else{\\n            delete stakes[msg.sender];\\n\\n            // Calculate the early withdrawal fee (10% of the staked amount)\\n            uint256 earlyWithdrawalFee = (stakedAmount.mul(10)).div(100);\\n            // Adjust the staked amount after applying the fee\\n            stakedAmount = stakedAmount.sub(earlyWithdrawalFee);\\n            require(stakingToken.transfer(msg.sender, stakedAmount), \\\"Transfer failed\\\");\\n        }\\n    }\\n    //claim rewards\\n    function claimRewards() external{\\n        // ensure user has stake\\n        Stake storage userStake = stakes[msg.sender];\\n        require(userStake.amount > 0, \\\"No staking position\\\");\\n\\n        uint256 rewards = userStake.reward;\\n\\n        // Calculate the time elapsed since the start of the stake\\n        uint256 elapsedTime = block.timestamp.sub(userStake.startTime);\\n        require(elapsedTime >= userStake.duration, \\\"Staking duration not completed\\\");\\n        \\n        \\n        totalRewards = totalRewards.sub(rewards);\\n        stakes[msg.sender].reward = 0;\\n        require(stakingToken.transfer(msg.sender, rewards), \\\"Transfer failed\\\");\\n    }\\n\\n    function recommit() external {\\n        // ensure user has stake\\n        Stake storage userStake = stakes[msg.sender];\\n        require(userStake.amount > 0, \\\"No staking position\\\");\\n\\n        uint256 stakedAmount = userStake.amount;\\n        uint256 rewards = userStake.reward;\\n\\n        // Calculate the time elapsed since the start of the stake\\n        uint256 elapsedTime = block.timestamp.sub(userStake.startTime);\\n        require(elapsedTime >= userStake.duration, \\\"Staking duration not completed\\\");\\n        \\n        totalStaked = totalStaked.sub(stakedAmount);\\n        totalRewards = totalRewards.sub(rewards);\\n\\n        //update staked amount\\n        stakedAmount = stakedAmount.add(rewards);\\n        //update rewards based on increased amount\\n        uint8 rewardPecentageIndex;\\n\\n        //recalculate reward and tier  \\n        uint256 duration = userStake.duration / 30 days;\\n\\n        if(duration == 1){\\n            rewardPecentageIndex = 1;\\n        }else if(duration == 3){\\n            rewardPecentageIndex = 2;\\n        }else if(duration == 6){\\n            rewardPecentageIndex = 3;\\n        }else if(duration == 12){\\n            rewardPecentageIndex = 4;\\n        }\\n\\n        uint8 tier;\\n\\n        if(stakedAmount < 100_000 * 1e18){\\n            tier = 1;    \\n        }else if(stakedAmount >= 100_000 * 1e18 && stakedAmount < 250_000 * 1e18){\\n            tier = 2;\\n        }else if(stakedAmount >= 250_000 * 1e18 && stakedAmount < 500_000 * 1e18){\\n            tier = 3;\\n        }else if(stakedAmount >= 500_000 * 1e18 && stakedAmount < 1_000_000 * 1e18){\\n            tier = 4;\\n        }else if(stakedAmount >= 1_000_000 * 1e18){\\n            tier = 5;\\n        }\\n\\n        require(tier >= 1 && tier <= 5, \\\"Invalid tier\\\");\\n        uint256 rewardPercentage = rewardPercentages[tier - 1][rewardPecentageIndex - 1];\\n\\n        // use updated amount to calculate reward\\n        uint256 newReward = stakedAmount.mul(rewardPercentage).div(10_000);\\n\\n        // Update total staked amount\\n        totalStaked = totalStaked.add(stakedAmount);\\n        // Update total reward\\n        totalRewards = totalRewards.add(newReward);\\n\\n        stakes[msg.sender].amount = stakedAmount;\\n        stakes[msg.sender].amount = stakedAmount;\\n        stakes[msg.sender].startTime = block.timestamp;\\n        stakes[msg.sender].duration = duration * 30 days;      \\n        stakes[msg.sender].tier = tier;\\n        stakes[msg.sender].reward = newReward;\\n\\n        _updateUserDebt(msg.sender, stakedAmount);\\n\\n    }\\n\\n    // Owner-only function to withdraw any remaining tokens from the contract\\n    function withdrawTokens(address tokenAddress, uint256 amount) external onlyOwner {\\n        IERC20 token = IERC20(tokenAddress);\\n        require(token.balanceOf(address(this)) > 0, \\\"No tokens to withdraw\\\");\\n        require(token.transfer(owner(), amount), \\\"Transfer failed\\\");\\n    }\\n\\n    // Owner-only function to change the staking token\\n    function changeStakingToken(address newToken) external onlyOwner {\\n        stakingToken = IERC20(newToken);\\n    }\\n\\n    // Check if a wallet has staked\\n    function hasStake(address user) external view returns (bool) {\\n        return stakes[user].amount > 0;\\n    }\\n    \\n    function withdrawStuckEth(address toAddr) external onlyOwner {\\n        (bool success, ) = toAddr.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    receive() external payable {}\\n\\n    // =============\\n    //    ADMIN\\n    // =============\\n\\n    // Distribute rewards\\n    function distributeRewards(uint amount) external payable onlyOwner {\\n        require(msg.value == amount, \\\"Enter correct amount\\\");\\n        \\n        if (totalStaked > 0) accRewardPerToken += (amount * PRECISION) / totalStaked;\\n\\n        emit RewardsAdded(amount);\\n    }\\n\\n    // Harvest rewards\\n    function _harvestEth() internal {\\n\\n        uint256 minimumStakeDuration = 14 days;\\n        Stake memory _stake = stakes[msg.sender];\\n        uint256 elapsedTime = block.timestamp.sub(_stake.startTime);\\n\\n        if(ethHarvestActive && elapsedTime >= minimumStakeDuration){\\n            require(ethHarvestActive, \\\"Harvesting not started\\\");\\n            uint pendingRewards = _pendingHarvestRewards(_stake);\\n\\n            stakes[msg.sender].rewardDebt =\\n                (_stake.amount * accRewardPerToken) /\\n                PRECISION;\\n\\n            (bool success, ) = msg.sender.call{value: pendingRewards}(\\\"\\\");\\n            require(success);\\n\\n            emit HarvestEth(msg.sender, pendingRewards);\\n        }\\n    }\\n\\n    function harvestEth() public {\\n\\n        require(ethHarvestActive, \\\"Harvesting not started\\\");\\n        uint256 minimumStakeDuration = 14 days;\\n        Stake memory _stake = stakes[msg.sender];\\n        uint256 elapsedTime = block.timestamp.sub(_stake.startTime);\\n\\n        require(elapsedTime >= minimumStakeDuration, \\\"Minimum staking duration not reached\\\");\\n\\n        _harvestEth();\\n    }\\n\\n    function toggleEthHarvesting(bool _value) external payable onlyOwner {\\n        ethHarvestActive = _value;\\n    }\\n    // Rewards to be harvested\\n    function _pendingHarvestRewards(Stake memory _stake) internal view returns (uint) {\\n        return\\n            (_stake.amount * accRewardPerToken) / PRECISION - _stake.rewardDebt;\\n    }\\n\\n    function _updateUserDebt(address user, uint256 newAmount) internal {\\n        stakes[user].rewardDebt = (newAmount * accRewardPerToken) / PRECISION;\\n    }\\n\\n    function getPendingHarvestRewards() external view returns (uint){\\n        return _pendingHarvestRewards(stakes[msg.sender]);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"harvestAmount\",\"type\":\"uint256\"}],\"name\":\"HarvestEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"changeStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethHarvestActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingHarvestRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"toggleEthHarvesting\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddr\",\"type\":\"address\"}],\"name\":\"withdrawStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FT500StakingWithRewards", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ac7fa7d455fdab8390c4ab9f793520521d266597", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}