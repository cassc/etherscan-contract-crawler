{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MBS.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n    error NotOwner();    \\r\\n    error InvalidAddress();\\r\\n    error NoFunds();\\r\\n    error OverFlow();    \\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {    \\r\\n    \\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() internal view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }   \\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        //require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        if (owner() != _msgSender()) revert NotOwner();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    \\r\\n    //function renounceOwnership() public virtual onlyOwner {\\r\\n       // _transferOwnership(address(0));\\r\\n    //}\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        //require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        if (newOwner == address(0)) revert InvalidAddress();\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }    \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  function name() external view returns (string memory);  \\r\\n\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n  function getOwner() external view returns (address);\\r\\n\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool); \\r\\n\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\nlibrary SafeMath {    \\r\\n   \\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (b > a) revert OverFlow(); \\r\\n        return a - b;\\r\\n    } \\r\\n       \\r\\n}\\r\\n\\r\\n//DAO Safe Token Version 1.1.0\\r\\n\\r\\ncontract MonteBiancoSafe is IERC20, Ownable {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  mapping (address => uint256) private _balances;\\r\\n\\r\\n  mapping (address => mapping (address => uint256)) private _allowances;\\r\\n  \\r\\n  uint8 private _decimals;\\r\\n  uint256 private _totalSupply;  \\r\\n  string private _symbol;\\r\\n  string private _name;\\r\\n\\r\\n  //address private safeAddress;  \\r\\n\\r\\n\\r\\n  constructor() {\\r\\n    _name = \\\"Monte Bianco Safe\\\";\\r\\n    _symbol = \\\"MBS\\\";\\r\\n    _decimals = 18;\\r\\n    _totalSupply = 100_000 * 10 ** _decimals;\\r\\n    _balances[msg.sender] = _totalSupply;\\r\\n\\r\\n   emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n  }\\r\\n\\r\\n  receive() external payable {\\r\\n        // Allow the contract to receive native coins.\\r\\n  }  \\r\\n\\r\\n\\r\\n  function decimals() external view returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  function symbol() external view returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  function name() external view returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n  \\r\\n  function totalSupply() external view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) external view returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }  \\r\\n/*\\r\\n  function setSafeAddress(address _safeAddress) external onlyOwner {\\r\\n        //require(_safeAddress != address(0), \\\"Error: zero address\\\");\\r\\n        //require(_safeAddress != owner(), \\\"Error: owner address\\\");\\r\\n        if ((_safeAddress == address(0)) || (_safeAddress == owner())) revert InvalidAddress();        \\r\\n        \\r\\n        safeAddress = _safeAddress;\\r\\n    }\\r\\n*/\\r\\n\\r\\n  function getOwner() external view returns (address) {\\r\\n        return owner();\\r\\n  }\\r\\n\\r\\n  function withdrawTokens() external onlyOwner {        \\r\\n        //require(_balances[address(this)] > 0, \\\"Invalid token amount\\\");\\r\\n        if (_balances[address(this)] <= 0) revert NoFunds();     \\r\\n        _transfer(address(this), owner(), _balances[address(this)]); \\r\\n    }\\r\\n    \\r\\n    function withdrawFunds() external onlyOwner returns (bool _success) {        \\r\\n        //require(address(this).balance > 0, \\\"cannot withdraw zero funds\\\");\\r\\n        if (address(this).balance == 0) revert NoFunds();                \\r\\n        (_success,) = owner().call{value: address(this).balance}(\\\"\\\");        \\r\\n        return _success;        \\r\\n    }\\r\\n\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool) {\\r\\n    _transfer(_msgSender(), recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n/*\\r\\n  function transferToSafe(uint256 amount) external returns (bool) {    \\r\\n    _transfer(_msgSender(), safeAddress, amount);\\r\\n    return true;\\r\\n  }\\r\\n*/\\r\\n  function allowance(address owner, address spender) external view returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint256 amount) external returns (bool) {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));\\r\\n    return true;\\r\\n  }\\r\\n/*\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n    return true;\\r\\n  }\\r\\n*/\\r\\n  function burnOnlyOwner(address account, uint256 amount) external onlyOwner returns (bool) {\\r\\n    _burn(account, amount);    \\r\\n    return true;\\r\\n  }  \\r\\n\\r\\n  function _transfer(address sender, address recipient, uint256 amount) private {\\r\\n    //require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n    //require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n    if ((sender == address(0))  || (recipient == address(0))) revert InvalidAddress(); \\r\\n    \\r\\n    _balances[sender] = _balances[sender].sub(amount);\\r\\n    _balances[recipient] = _balances[recipient] + amount;\\r\\n    emit Transfer(sender, recipient, amount);\\r\\n  }  \\r\\n\\r\\n  function _burn(address account, uint256 amount) private {\\r\\n    //require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n    if (account == address(0)) revert InvalidAddress();\\r\\n    _balances[account] = _balances[account].sub(amount);\\r\\n    _totalSupply = _totalSupply - amount;\\r\\n    emit Transfer(account, address(0), amount);\\r\\n  }\\r\\n\\r\\n  function _approve(address owner, address spender, uint256 amount) private {\\r\\n    //require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n    //require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n    if ((owner == address(0)) || (spender == address(0))) revert InvalidAddress();\\r\\n    \\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  } \\r\\n  \\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverFlow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnOnlyOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MonteBiancoSafe", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}