{"SourceCode": "pragma solidity 0.7.6;     \r\n\r\n// SPDX-License-Identifier: UNLICENSED \r\n/*\r\n* Must wrap your ETH for fETH to use FEGex DEX\r\n\r\nBuilt for fETH - FEG Wapped ETH - Built in 1% frictionless rewards of ETH!  Stake ETH with fETHand earn rewards!\r\n*/\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract FSilver  {\r\n     function getColor()\r\n        external pure\r\n        returns (bytes32) {\r\n            return bytes32(\"BRONZE\");\r\n        }\r\n}\r\n\r\n\r\ncontract FConst is FSilver, ReentrancyGuard {\r\n    uint public constant BASE              = 10**18;\r\n\r\n    uint public constant MIN_BOUND_TOKENS  = 2;\r\n    uint public constant MAX_BOUND_TOKENS  = 8;\r\n\r\n    uint public constant MIN_FEE           = 2000000000000000; \r\n    uint public constant MAX_FEE           = 2000000000000000; // FREE BUYS\r\n    uint public constant EXIT_FEE          = BASE / 200;\r\n    uint public constant DEFAULT_RESERVES_RATIO = 0;\r\n\r\n    uint public constant MIN_WEIGHT        = BASE;\r\n    uint public constant MAX_WEIGHT        = BASE * 50;\r\n    uint public constant MAX_TOTAL_WEIGHT  = BASE * 50;\r\n    uint public constant MIN_BALANCE       = BASE / 10**12;\r\n\r\n    uint public constant INIT_POOL_SUPPLY  = BASE * 100;\r\n    \r\n    uint public  SM = 10;\r\n    uint public  M1 = 10;\r\n    address public FEGstake = 0x4c9BC793716e8dC05d1F48D8cA8f84318Ec3043C;\r\n\r\n    uint public constant MIN_BPOW_BASE     = 1 wei;\r\n    uint public constant MAX_BPOW_BASE     = (2 * BASE) - 1 wei;\r\n    uint public constant BPOW_PRECISION    = BASE / 10**10;\r\n\r\n    uint public constant MAX_IN_RATIO      = BASE / 2;\r\n    uint public constant MAX_OUT_RATIO     = (BASE / 3) + 1 wei;\r\n    uint public MAX_SELL_RATIO             = BASE / SM;\r\n    uint public MAX_1_RATIO             = BASE / M1;\r\n}\r\n\r\n\r\ncontract FNum is ReentrancyGuard, FConst {\r\n\r\n    function btoi(uint a)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        return a / BASE;\r\n    }\r\n\r\n    function bfloor(uint a)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        return btoi(a) * BASE;\r\n    }\r\n\r\n    function badd(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c = a + b;\r\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function bsub(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        (uint c, bool flag) = bsubSign(a, b);\r\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function bsubSign(uint a, uint b)\r\n        internal pure\r\n        returns (uint, bool)\r\n    {\r\n        if (a >= b) {\r\n            return (a - b, false);\r\n        } else {\r\n            return (b - a, true);\r\n        }\r\n    }\r\n\r\n    function bmul(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint c0 = a * b;\r\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\r\n        uint c1 = c0 + (BASE / 2);\r\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\r\n        uint c2 = c1 / BASE;\r\n        return c2;\r\n    }\r\n\r\n    function bdiv(uint a, uint b)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(b != 0, \"ERR_DIV_ZERO\");\r\n        uint c0 = a * BASE;\r\n        require(a == 0 || c0 / a == BASE, \"ERR_DIV_INTERNAL\"); // bmul overflow\r\n        uint c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\r\n        uint c2 = c1 / b;\r\n        return c2;\r\n    }\r\n\r\n    // DSMath.wpow\r\n    function bpowi(uint a, uint n)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        uint z = n % 2 != 0 ? a : BASE;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            a = bmul(a, a);\r\n\r\n            if (n % 2 != 0) {\r\n                z = bmul(z, a);\r\n            }\r\n        }\r\n        return z;\r\n    }\r\n\r\n    function bpow(uint base, uint exp)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\r\n        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\r\n\r\n        uint whole  = bfloor(exp);\r\n        uint remain = bsub(exp, whole);\r\n\r\n        uint wholePow = bpowi(base, btoi(whole));\r\n\r\n        if (remain == 0) {\r\n            return wholePow;\r\n        }\r\n\r\n        uint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\r\n        return bmul(wholePow, partialResult);\r\n    }\r\n\r\n    function bpowApprox(uint base, uint exp, uint precision)\r\n        internal pure\r\n        returns (uint)\r\n    {\r\n        // term 0:\r\n        uint a     = exp;\r\n        (uint x, bool xneg)  = bsubSign(base, BASE);\r\n        uint term = BASE;\r\n        uint sum   = term;\r\n        bool negative = false;\r\n\r\n\r\n        for (uint i = 1; term >= precision; i++) {\r\n            uint bigK = i * BASE;\r\n            (uint c, bool cneg) = bsubSign(a, bsub(bigK, BASE));\r\n            term = bmul(term, bmul(c, x));\r\n            term = bdiv(term, bigK);\r\n            if (term == 0) break;\r\n\r\n            if (xneg) negative = !negative;\r\n            if (cneg) negative = !negative;\r\n            if (negative) {\r\n                sum = bsub(sum, term);\r\n            } else {\r\n                sum = badd(sum, term);\r\n            }\r\n        }\r\n\r\n        return sum;\r\n    }\r\n}\r\n\r\ncontract FMath is FSilver, FConst, FNum {\r\n    \r\n        function calcSpotPrice(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint swapFee\r\n    )\r\n        public pure\r\n        returns (uint spotPrice)\r\n    {\r\n        uint numer = bdiv(tokenBalanceIn, tokenWeightIn);\r\n        uint denom = bdiv(tokenBalanceOut, tokenWeightOut);\r\n        uint ratio = bdiv(numer, denom);\r\n        uint scale = bdiv(BASE, bsub(BASE, swapFee));\r\n        return  (spotPrice = bmul(ratio, scale));\r\n    }\r\n\r\n\r\n    function calcOutGivenIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountIn,\r\n        uint swapFee\r\n    )\r\n        public pure\r\n        returns (uint tokenAmountOut, uint tokenInFee)\r\n    {\r\n        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\r\n        uint adjustedIn = bsub(BASE, swapFee);\r\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\r\n        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\r\n        uint foo = bpow(y, weightRatio);\r\n        uint bar = bsub(BASE, foo);\r\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\r\n        tokenInFee = bsub(tokenAmountIn, adjustedIn);\r\n        return (tokenAmountOut, tokenInFee);\r\n    }\r\n\r\n\r\n    function calcInGivenOut(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint tokenAmountOut,\r\n        uint swapFee\r\n    )\r\n        public pure\r\n        returns (uint tokenAmountIn, uint tokenInFee)\r\n    {\r\n        uint weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\r\n        uint diff = bsub(tokenBalanceOut, tokenAmountOut);\r\n        uint y = bdiv(tokenBalanceOut, diff);\r\n        uint foo = bpow(y, weightRatio);\r\n        foo = bsub(foo, BASE);\r\n        foo = bmul(tokenBalanceIn, foo);\r\n        tokenAmountIn = bsub(BASE, swapFee);\r\n        tokenAmountIn = bdiv(foo, tokenAmountIn);\r\n        tokenInFee = bdiv(foo, BASE);\r\n        tokenInFee = bsub(tokenAmountIn, tokenInFee);\r\n        return (tokenAmountIn, tokenInFee);\r\n    }\r\n\r\n\r\n    function calcPoolOutGivenSingleIn(\r\n        uint tokenBalanceIn,\r\n        uint tokenWeightIn,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint tokenAmountIn,\r\n        uint swapFee,\r\n        uint reservesRatio\r\n    )\r\n        public pure\r\n        returns (uint poolAmountOut, uint reserves)\r\n    {\r\n\r\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\r\n         uint zaz = bmul(bsub(BASE, normalizedWeight), swapFee);\r\n        uint tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BASE, zaz));\r\n\r\n        reserves = calcReserves(tokenAmountIn, tokenAmountInAfterFee, reservesRatio);\r\n        uint newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\r\n        uint tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\r\n\r\n \r\n        uint poolRatio = bpow(tokenInRatio, normalizedWeight);\r\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\r\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\r\n        return (poolAmountOut, reserves);\r\n    }\r\n\r\n    function calcSingleOutGivenPoolIn(\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint poolAmountIn,\r\n        uint swapFee\r\n    )\r\n        public pure\r\n        returns (uint tokenAmountOut)\r\n    {\r\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\r\n\r\n        uint poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BASE, EXIT_FEE));\r\n        uint newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\r\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\r\n\r\n\r\n        uint tokenOutRatio = bpow(poolRatio, bdiv(BASE, normalizedWeight));\r\n        uint newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\r\n\r\n        uint tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\r\n        uint zaz = bmul(bsub(BASE, normalizedWeight), swapFee);\r\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BASE, zaz));\r\n        return tokenAmountOut;\r\n    }\r\n\r\n\r\n    function calcPoolInGivenSingleOut(\r\n        uint tokenBalanceOut,\r\n        uint tokenWeightOut,\r\n        uint poolSupply,\r\n        uint totalWeight,\r\n        uint tokenAmountOut,\r\n        uint swapFee,\r\n        uint reservesRatio\r\n    )\r\n        public pure\r\n        returns (uint poolAmountIn, uint reserves)\r\n    {\r\n\r\n\r\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\r\n        uint zar = bmul(bsub(BASE, normalizedWeight), swapFee);\r\n        uint tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BASE, zar));\r\n        reserves = calcReserves(tokenAmountOutBeforeSwapFee, tokenAmountOut, reservesRatio);\r\n\r\n        uint newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\r\n        uint tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\r\n\r\n\r\n        uint poolRatio = bpow(tokenOutRatio, normalizedWeight);\r\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\r\n        uint poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\r\n\r\n\r\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BASE, EXIT_FEE));\r\n        return (poolAmountIn, reserves);\r\n    }\r\n\r\n    function calcReserves(uint amountWithFee, uint amountWithoutFee, uint reservesRatio)\r\n        internal pure\r\n        returns (uint reserves)\r\n    {\r\n        require(amountWithFee >= amountWithoutFee, \"ERR_MATH_APPROX\");\r\n        require(reservesRatio <= BASE, \"ERR_INVALID_RESERVE\");\r\n        uint swapFeeAndReserves = bsub(amountWithFee, amountWithoutFee);\r\n        reserves = bmul(swapFeeAndReserves, reservesRatio);\r\n        require(swapFeeAndReserves >= reserves, \"ERR_MATH_APPROX\");\r\n    }\r\n\r\n    function calcReservesFromFee(uint fee, uint reservesRatio)\r\n        internal pure\r\n        returns (uint reserves)\r\n    {\r\n        require(reservesRatio <= BASE, \"ERR_INVALID_RESERVE\");\r\n        reserves = bmul(fee, reservesRatio);\r\n    }\r\n}\r\n// Highly opinionated token implementation\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address whom) external view returns (uint);\r\n    function allowance(address src, address dst) external view returns (uint);\r\n\r\n    function approve(address dst, uint amt) external returns (bool);\r\n    function transfer(address dst, uint amt) external returns (bool);\r\n    function transferFrom(\r\n        address src, address dst, uint amt\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract FTokenBase is ReentrancyGuard, FNum {\r\n\r\n    mapping(address => uint)                   internal _balance;\r\n    mapping(address => mapping(address=>uint)) internal _allowance;\r\n    uint internal _totalSupply;\r\n\r\n    event Approval(address indexed src, address indexed dst, uint amt);\r\n    event Transfer(address indexed src, address indexed dst, uint amt);\r\n\r\n    function _mint(uint amt) internal {\r\n        _balance[address(this)] = badd(_balance[address(this)], amt);\r\n        _totalSupply = badd(_totalSupply, amt);\r\n        emit Transfer(address(0), address(this), amt);\r\n    }\r\n\r\n    function _burn(uint amt) internal {\r\n        require(_balance[address(this)] >= amt);\r\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\r\n        _totalSupply = bsub(_totalSupply, amt);\r\n        emit Transfer(address(this), address(0), amt);\r\n    }\r\n\r\n    function _move(address src, address dst, uint amt) internal {\r\n        require(_balance[src] >= amt);\r\n        _balance[src] = bsub(_balance[src], amt);\r\n        _balance[dst] = badd(_balance[dst], amt);\r\n        emit Transfer(src, dst, amt);\r\n    }\r\n\r\n    function _push(address to, uint amt) internal {\r\n        _move(address(this), to, amt);\r\n    }\r\n\r\n    function _pull(address from, uint amt) internal {\r\n        _move(from, address(this), amt);\r\n    }\r\n}\r\n\r\ncontract FToken is ReentrancyGuard, FTokenBase {\r\n\r\n    string  private _name     = \"FEGwETHpair\";\r\n    string  private _symbol   = \"FEGwETHLP\";\r\n    uint8   private _decimals = 18;\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function allowance(address src, address dst) external view returns (uint) {\r\n        return _allowance[src][dst];\r\n    }\r\n\r\n    function balanceOf(address whom) external view returns (uint) {\r\n        return _balance[whom];\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function approve(address dst, uint amt) external returns (bool) {\r\n        _allowance[msg.sender][dst] = amt;\r\n        emit Approval(msg.sender, dst, amt);\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address dst, uint amt) external returns (bool) {\r\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\r\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address dst, uint amt) external returns (bool) {\r\n        uint oldValue = _allowance[msg.sender][dst];\r\n        if (amt > oldValue) {\r\n            _allowance[msg.sender][dst] = 0;\r\n        } else {\r\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\r\n        }\r\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint amt) external returns (bool) {\r\n        FEGwETH ulock;\r\n        bool getlock = ulock.getUserLock(msg.sender);\r\n        \r\n        require(getlock == true, 'Liquidity is locked, you cannot removed liquidity until after lock time.');\r\n        \r\n        _move(msg.sender, dst, amt);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint amt) external returns (bool) {\r\n        require(msg.sender == src || amt <= _allowance[src][msg.sender]);\r\n        FEGwETH ulock;\r\n        bool getlock = ulock.getUserLock(msg.sender);\r\n        \r\n        require(getlock == true, 'Transfer is Locked ');\r\n        \r\n        \r\n        _move(src, dst, amt);\r\n        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\r\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\r\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract FEGwETH is FSilver, ReentrancyGuard, FToken, FMath {\r\n\r\n    struct Record {\r\n        bool bound;   // is token bound to pool\r\n        uint index;   // private\r\n        uint denorm;  // denormalized weight\r\n        uint balance;\r\n    }\r\n    \r\n    struct userLock {\r\n        bool setLock; // true = locked, false=unlocked\r\n        uint unlockTime;\r\n    }\r\n    \r\n    function getUserLock(address usr) public view returns(bool lock){\r\n        return _userlock[usr].setLock;\r\n    }\r\n    \r\n    event LOG_SWAP(\r\n        address indexed caller,\r\n        address indexed tokenIn,\r\n        address indexed tokenOut,\r\n        uint256         tokenAmountIn,\r\n        uint256         tokenAmountOut,\r\n        uint256         reservesAmount\r\n);\r\n\r\n    event LOG_JOIN(\r\n        address indexed caller,\r\n        address indexed tokenIn,\r\n        uint256         tokenAmountIn,\r\n        uint256         reservesAmount\r\n);\r\n\r\n    event LOG_EXIT(\r\n        address indexed caller,\r\n        address indexed tokenOut,\r\n        uint256         tokenAmountOut,\r\n        uint256         reservesAmount\r\n    );\r\n\r\n    event LOG_CLAIM_RESERVES(\r\n        address indexed caller,\r\n        address indexed tokenOut,\r\n        uint256         tokenAmountOut\r\n    );\r\n\r\n    event LOG_ADD_RESERVES(\r\n        address indexed token,\r\n        uint256         reservesAmount\r\n    );\r\n\r\n    event LOG_CALL(\r\n        bytes4  indexed sig,\r\n        address indexed caller,\r\n        bytes           data\r\n    ) anonymous;\r\n\r\n    modifier _logs_() {\r\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\r\n        _;\r\n    }\r\n\r\n    modifier _lock_() {\r\n        require(!_mutex);\r\n        _mutex = true;\r\n        _;\r\n        _mutex = false;\r\n    } \r\n\r\n    modifier _viewlock_() {\r\n        require(!_mutex);\r\n        _;\r\n    }\r\n\r\n    bool private _mutex;\r\n\r\n\r\n    address private _factory = 0x4c9BC793716e8dC05d1F48D8cA8f84318Ec3043C;    // BFactory address to push token exitFee to\r\n    address private _controller = 0x4c9BC793716e8dC05d1F48D8cA8f84318Ec3043C; // has CONTROL role \r\n    address private _poolOwner;\r\n    address public fETH = 0xf786c34106762Ab4Eeb45a51B42a62470E9D5332;\r\n    address public FEG = 0x389999216860AB8E0175387A0c90E5c52522C945;\r\n    address public pairRewardPool = 0x4c9BC793716e8dC05d1F48D8cA8f84318Ec3043C;\r\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\r\n\r\n    // `setSwapFee` and `Launch' require CONTROL\r\n    // `Launch` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\r\n    uint private _swapFee;\r\n    uint private _reservesRatio;\r\n    bool private _launched;\r\n\r\n    address[] private _tokens;\r\n    mapping(address=>Record) private  _records;\r\n    mapping(address=>userLock) public  _userlock;\r\n    mapping(address=>uint) public totalReserves;\r\n    mapping(address=>bool) public whiteListContract;\r\n    \r\n    uint private _totalWeight;\r\n\r\n    constructor() {\r\n        _poolOwner = msg.sender;\r\n        _swapFee = MIN_FEE;\r\n        _reservesRatio = DEFAULT_RESERVES_RATIO;\r\n        _publicSwap = false;\r\n        _launched = false;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        if(IsWhiteListContract(account)) {  return false; }\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    \r\n    function addWhiteListContract(address _addy, bool boolean) public {\r\n        require(msg.sender == _controller);\r\n        require(_addy != address(0), \"setting 0 address;;\");\r\n        \r\n        whiteListContract[_addy] = boolean;\r\n    }\r\n    \r\n    function IsWhiteListContract(address _addy) public view returns(bool){\r\n        require(_addy != address(0), \"setting 0 address;;\");\r\n        \r\n        return whiteListContract[_addy];\r\n    }\r\n    \r\n    modifier noContract() {\r\n        require(isContract(msg.sender) == false, 'Unapproved contracts are not allowed to interact with the swap');\r\n        _;\r\n    }\r\n    \r\n    function setMaxSellRatio(uint256 _amount) public {\r\n        require(msg.sender == _poolOwner, \"You do not have permission\");\r\n        require (_amount > 0, \"cannot turn off\");\r\n        require (_amount <= 100, \"cannot set under 1%\");\r\n        SM = _amount;\r\n    }\r\n    \r\n    function setMax1SideLiquidityRatio(uint256 _amount) public {\r\n        require(msg.sender == _poolOwner, \"You do not have permission\");\r\n        require (_amount > 10, \"cannot set over 10%\");\r\n        require (_amount <= 200, \"cannot set under 0.5%\");\r\n        M1 = _amount;\r\n    }\r\n    \r\n    function setStakePool(address _addy) public {\r\n        require(msg.sender == _controller);\r\n    FEGstake = _addy;\r\n    }\r\n    \r\n    function setPairRewardPool(address _addy) public {\r\n        require(msg.sender == _controller);\r\n    pairRewardPool = _addy;\r\n    }\r\n    \r\n    function isPublicSwap()\r\n        external view\r\n        returns (bool)\r\n    {\r\n        return _publicSwap;\r\n        \r\n    }    \r\n    \r\n    function isBound(address t)\r\n        external view\r\n        returns (bool)\r\n    {\r\n        return _records[t].bound;\r\n    }\r\n\r\n    function getFinalTokens()\r\n        external view\r\n        _viewlock_\r\n        returns (address[] memory tokens)\r\n    {\r\n        require(_launched);\r\n        return _tokens;\r\n    }\r\n\r\n    function getDenormalizedWeight(address token)\r\n        external view\r\n        _viewlock_\r\n        returns (uint)\r\n    {\r\n\r\n        require(_records[token].bound);\r\n        return _records[token].denorm;\r\n    }\r\n\r\n    function getTotalDenormalizedWeight()\r\n        external view\r\n        _viewlock_\r\n        returns (uint)\r\n    {\r\n        return _totalWeight;\r\n    }\r\n\r\n    function getNormalizedWeight(address token)\r\n        external view\r\n        _viewlock_\r\n        returns (uint)\r\n    {\r\n\r\n        require(_records[token].bound);\r\n        uint denorm = _records[token].denorm;\r\n        return bdiv(denorm, _totalWeight);\r\n    }\r\n\r\n    function getBalance(address token)\r\n        external view\r\n        _viewlock_\r\n        returns (uint)\r\n    {\r\n\r\n        require(_records[token].bound);\r\n        return _records[token].balance;\r\n    }\r\n\r\n    function getSwapFee()\r\n        external view\r\n        _viewlock_\r\n        returns (uint)\r\n    {\r\n        return _swapFee;\r\n    }\r\n\r\n    function getController()\r\n        external view\r\n        _viewlock_\r\n        returns (address)\r\n    {\r\n        return _controller;\r\n    }\r\n\r\n    function setController(address manager)\r\n        external\r\n        _logs_\r\n        _lock_\r\n    {\r\n        require(msg.sender == _controller);\r\n        _controller = manager;\r\n    }\r\n\r\n\r\n    function Launch()\r\n        external\r\n        _logs_\r\n        _lock_\r\n    {\r\n        require(msg.sender == _poolOwner);\r\n        require(!_launched);\r\n        require(_tokens.length >= MIN_BOUND_TOKENS);\r\n\r\n        _launched = true;\r\n        _publicSwap = true;\r\n\r\n        _mintPoolShare(INIT_POOL_SUPPLY);\r\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\r\n    }\r\n\r\n\r\n    function AddTokenInitial(address token, uint balance, uint denorm)\r\n        external\r\n        _logs_\r\n        // _lock_  Bind does not lock because it jumps to `rebind`, which does\r\n    {\r\n        require(msg.sender == _poolOwner);\r\n        require(!_records[token].bound);\r\n        require(!_launched);\r\n\r\n        require(_tokens.length < MAX_BOUND_TOKENS);\r\n\r\n        _records[token] = Record({\r\n            bound: true,\r\n            index: _tokens.length,\r\n            denorm: 0,    // balance and denorm will be validated\r\n            balance: 0  // and set by `rebind`\r\n            //locktime: block.timestamp\r\n        });\r\n        _tokens.push(token);\r\n        rebind(token, balance * 98/100, denorm);\r\n    }\r\n    \r\n    function AddfETHInitial(address token, uint balance, uint denorm)\r\n        external\r\n        _logs_\r\n        // _lock_  Bind does not lock because it jumps to `rebind`, which does\r\n    {\r\n        require(token == fETH);\r\n        require(msg.sender == _poolOwner);\r\n        require(!_records[token].bound);\r\n        require(!_launched);\r\n\r\n        require(_tokens.length < MAX_BOUND_TOKENS);\r\n\r\n        _records[token] = Record({\r\n            bound: true,\r\n            index: _tokens.length,\r\n            denorm: 0,    // balance and denorm will be validated\r\n            balance: 0  // and set by `rebind`\r\n            //locktime: block.timestamp\r\n        });\r\n        _tokens.push(token);\r\n        rebind(token, balance * 99/100, denorm);\r\n    }\r\n\r\n    function rebind(address token, uint balance, uint denorm)\r\n        public\r\n        _logs_\r\n        _lock_\r\n    {\r\n\r\n        require(msg.sender == _poolOwner);\r\n        require(_records[token].bound);\r\n        require(!_launched);\r\n\r\n        require(denorm >= MIN_WEIGHT);\r\n        require(denorm <= MAX_WEIGHT);\r\n        require(balance >= MIN_BALANCE);\r\n\r\n        // Adjust the denorm and totalWeight\r\n        uint oldWeight = _records[token].denorm;\r\n        if (denorm > oldWeight) {\r\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\r\n            require(_totalWeight <= MAX_TOTAL_WEIGHT);\r\n        } else if (denorm < oldWeight) {\r\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\r\n        }\r\n        _records[token].denorm = denorm;\r\n\r\n        // Adjust the balance record and actual token balance\r\n        uint oldBalance = _records[token].balance;\r\n        _records[token].balance = balance;\r\n        if (balance > oldBalance) {\r\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\r\n        } else if (balance < oldBalance) {\r\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\r\n            uint tokenBalanceWithdrawn = bsub(oldBalance, balance);\r\n            uint tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\r\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\r\n            _pushUnderlying(token, _factory, tokenExitFee);\r\n        }\r\n    }\r\n   \r\n    function saveLostTokens(address token, uint amount)\r\n        external\r\n        _logs_\r\n        _lock_\r\n    {\r\n        require(msg.sender == _controller);\r\n        require(!_records[token].bound);\r\n\r\n        uint bal = IERC20(token).balanceOf(address(this));\r\n        require(amount <= bal);\r\n\r\n        _pushUnderlying(token, msg.sender, amount);\r\n    }\r\n\r\n    function getSpotPrice(address tokenIn, address tokenOut)\r\n        external view\r\n        _viewlock_\r\n        returns (uint spotPrice)\r\n    {\r\n        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\r\n        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\r\n        Record storage inRecord = _records[tokenIn];\r\n        Record storage outRecord = _records[tokenOut];\r\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\r\n    }\r\n\r\n    function addBothLiquidity(uint poolAmountOut, uint[] calldata maxAmountsIn)\r\n        external\r\n        _logs_\r\n        _lock_\r\n    {\r\n        require(_launched, \"ERR_NOT_LAUNCHED\");\r\n\r\n        uint poolTotal = totalSupply();\r\n        uint ratio = bdiv(poolAmountOut, poolTotal);\r\n        require(ratio != 0, \"ERR_MATH_APPROX\");\r\n\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            address t = _tokens[i];\r\n            uint bal = _records[t].balance;\r\n            uint tokenAmountIn = bmul(ratio, bal);\r\n            require(tokenAmountIn != 0, \"ERR_MATH_APPROX\");\r\n            require(tokenAmountIn <= maxAmountsIn[i], \"ERR_LIMIT_IN\");\r\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn, 0);\r\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\r\n            _records[FEG].balance = IERC20(FEG).balanceOf(address(this));\r\n            _records[fETH].balance = IERC20(fETH).balanceOf(address(this));\r\n        }\r\n        _mintPoolShare(poolAmountOut);\r\n        _pushPoolShare(msg.sender, poolAmountOut);\r\n        \r\n    }\r\n   \r\n    function removeBothLiquidity(uint poolAmountIn, uint[] calldata minAmountsOut)\r\n        external\r\n        _logs_\r\n        _lock_\r\n    {\r\n        require(_launched, \"ERR_NOT_LAUNCHED\");\r\n        userLock storage ulock = _userlock[msg.sender];\r\n        \r\n        if(ulock.setLock == true) {\r\n            require(ulock.unlockTime <= block.timestamp, \"Liquidity is locked, you cannot removed liquidity until after lock time.\");\r\n        }\r\n\r\n        uint poolTotal = totalSupply();\r\n        uint exitFee = bmul(poolAmountIn, EXIT_FEE);\r\n        uint pAiAfterExitFee = bsub(poolAmountIn, exitFee);\r\n        uint ratio = bdiv(pAiAfterExitFee, poolTotal);\r\n        require(ratio != 0, \"ERR_MATH_APPROX\");\r\n\r\n        _pullPoolShare(msg.sender, poolAmountIn);\r\n        _pushPoolShare(_factory, exitFee);\r\n        _burnPoolShare(pAiAfterExitFee);\r\n        \r\n        \r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            address t = _tokens[i];\r\n            uint bal = _records[t].balance;\r\n            uint tokenAmountOut = bmul(ratio, bal);\r\n            require(tokenAmountOut != 0, \"ERR_MATH_APPROX\");\r\n            require(tokenAmountOut >= minAmountsOut[i], \"ERR_LIMIT_OUT\");\r\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut, 0);\r\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\r\n            _records[FEG].balance = IERC20(FEG).balanceOf(address(this));\r\n            _records[fETH].balance = IERC20(fETH).balanceOf(address(this));\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function BUY(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        address tokenOut,\r\n        uint minAmountOut,\r\n        uint maxPrice\r\n    ) noContract\r\n        external\r\n        _logs_\r\n        _lock_\r\n        returns (uint tokenAmountOut, uint spotPriceAfter)\r\n    {\r\n        \r\n        require(tokenIn == fETH, \"Can only buy with fETH\");\r\n        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\r\n        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\r\n        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\r\n        \r\n        Record storage inRecord = _records[address(tokenIn)];\r\n        Record storage outRecord = _records[address(tokenOut)];\r\n\r\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \"ERR_MAX_IN_RATIO\");\r\n\r\n        uint spotPriceBefore = calcSpotPrice(\r\n                                    inRecord.balance,\r\n                                    inRecord.denorm,\r\n                                    outRecord.balance,\r\n                                    outRecord.denorm,\r\n                                    _swapFee\r\n                                );\r\n        require(spotPriceBefore <= maxPrice, \"ERR_BAD_LIMIT_PRICE\");\r\n\r\n        uint tokenInFee;\r\n        (tokenAmountOut, tokenInFee) = calcOutGivenIn(\r\n                                            inRecord.balance,\r\n                                            inRecord.denorm,\r\n                                            outRecord.balance,\r\n                                            outRecord.denorm,\r\n                                            tokenAmountIn * 99/100,\r\n                                            _swapFee * 0\r\n                                        );\r\n        require(tokenAmountOut >= minAmountOut, \"ERR_LIMIT_OUT\");\r\n\r\n        uint reserves = calcReservesFromFee(tokenInFee, _reservesRatio);\r\n\r\n        spotPriceAfter = calcSpotPrice(\r\n                                inRecord.balance,\r\n                                inRecord.denorm,\r\n                                outRecord.balance,\r\n                                outRecord.denorm,\r\n                                _swapFee\r\n                            );\r\n        require(spotPriceAfter >= spotPriceBefore, \"ERR_MATH_APPROX\");\r\n        require(spotPriceAfter <= maxPrice, \"ERR_LIMIT_PRICE\");\r\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \"ERR_MATH_APPROX\");\r\n\r\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn * 99/100, tokenAmountOut, reserves);\r\n\r\n        totalReserves[address(tokenIn)] = badd(totalReserves[address(tokenIn)], reserves);\r\n        emit LOG_ADD_RESERVES(address(tokenIn), reserves);\r\n\r\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\r\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\r\n        _records[FEG].balance = IERC20(FEG).balanceOf(address(this));\r\n        _records[fETH].balance = IERC20(fETH).balanceOf(address(this));\r\n        return (tokenAmountOut, spotPriceAfter);\r\n    }\r\n\r\n    function SELL(\r\n        address tokenIn,\r\n        uint tokenAmountIn,\r\n        address tokenOut,\r\n        uint minAmountOut,\r\n        uint maxPrice\r\n    ) noContract\r\n        external\r\n        _logs_\r\n        _lock_\r\n        returns (uint tokenAmountOut, uint spotPriceAfter)\r\n    {\r\n        \r\n        require(tokenIn == FEG, \"Can only sell FEG\");\r\n        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\r\n        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\r\n        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\r\n\r\n        Record storage inRecord = _records[address(tokenIn)];\r\n        Record storage outRecord = _records[address(tokenOut)];\r\n\r\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_SELL_RATIO), \"ERR_SELL_RATIO\");\r\n\r\n        uint spotPriceBefore = calcSpotPrice(\r\n                                    inRecord.balance,\r\n                                    inRecord.denorm,\r\n                                    outRecord.balance,\r\n                                    outRecord.denorm,\r\n                                    _swapFee\r\n                                );\r\n        require(spotPriceBefore <= maxPrice, \"ERR_BAD_LIMIT_PRICE\");\r\n\r\n        uint tokenInFee;\r\n        (tokenAmountOut, tokenInFee) = calcOutGivenIn(\r\n                                            inRecord.balance,\r\n                                            inRecord.denorm,\r\n                                            outRecord.balance,\r\n                                            outRecord.denorm,\r\n                                            tokenAmountIn * 98/100,\r\n                                            _swapFee\r\n                                        );\r\n        require(tokenAmountOut >= minAmountOut, \"ERR_LIMIT_OUT\");\r\n\r\n        uint reserves = calcReservesFromFee(tokenInFee, _reservesRatio);\r\n\r\n        spotPriceAfter = calcSpotPrice(\r\n                                inRecord.balance,\r\n                                inRecord.denorm,\r\n                                outRecord.balance,\r\n                                outRecord.denorm,\r\n                                _swapFee\r\n                            );\r\n        require(spotPriceAfter >= spotPriceBefore, \"ERR_MATH_APPROX\");\r\n        require(spotPriceAfter <= maxPrice, \"ERR_LIMIT_PRICE\");\r\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \"ERR_MATH_APPROX\");\r\n\r\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn * 98/100, tokenAmountOut, reserves);\r\n\r\n        totalReserves[address(tokenIn)] = badd(totalReserves[address(tokenIn)], reserves);\r\n        emit LOG_ADD_RESERVES(address(tokenIn), reserves);\r\n        \r\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\r\n        uint256 tokAmountI  = bmul(tokenAmountOut, bdiv(25, 10000));\r\n        //uint256 tokAmountI2 =  bmul(tokenAmountOut, bdiv(10, 10000));\r\n        //uint256 tokAmountI1 = bsub(tokenAmountOut, badd(tokAmountI, tokAmountI2));\r\n        uint256 tokAmountI1 = bsub(tokenAmountOut, tokAmountI);\r\n        _pushUnderlying(tokenOut, msg.sender, tokAmountI1);\r\n        _pushUnderlying1(tokenOut, tokAmountI);\r\n        //_pushUnderlying2(tokenOut, tokAmountI2);\r\n        \r\n        _records[FEG].balance = IERC20(FEG).balanceOf(address(this));\r\n        _records[fETH].balance = IERC20(fETH).balanceOf(address(this));\r\n        return (tokenAmountOut, spotPriceAfter);\r\n    }\r\n    \r\n    function setLockLiquidity() external {\r\n        address user = msg.sender;\r\n        userLock storage ulock = _userlock[user];\r\n        \r\n        ulock.setLock = true;\r\n        ulock.unlockTime = block.timestamp + 90 days ; \r\n    }\r\n    \r\n    function emergencyLockOverride(address user, bool _bool) external {\r\n        require(msg.sender == _controller);\r\n        //address user = msg.sender;\r\n        userLock storage ulock = _userlock[user];\r\n        ulock.setLock = _bool;\r\n    }\r\n  \r\n    \r\n    function addLiquidityfETH(address tokenIn, uint tokenAmountIn, uint minPoolAmountOut)\r\n        external\r\n        _logs_\r\n        _lock_\r\n        returns (uint poolAmountOut)\r\n\r\n    {\r\n        require(tokenIn == fETH, \"Can only add fETH\");\r\n        require(_launched, \"ERR_NOT_FINALIZED\");\r\n        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\r\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_1_RATIO), \"ERR_MAX_IN_RATIO\");\r\n\r\n        Record storage inRecord = _records[tokenIn];\r\n\r\n        uint reserves;\r\n        (poolAmountOut, reserves) = calcPoolOutGivenSingleIn(\r\n                            inRecord.balance,\r\n                            inRecord.denorm,\r\n                            _totalSupply,\r\n                            _totalWeight,\r\n                            tokenAmountIn,\r\n                            _swapFee,\r\n                            _reservesRatio\r\n                        );\r\n\r\n        require(poolAmountOut >= minPoolAmountOut, \"ERR_LIMIT_OUT\");\r\n\r\n        //inRecord.balance = bsub(badd(inRecord.balance, reserves);\r\n\r\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn, reserves);\r\n\r\n        totalReserves[address(tokenIn)] = badd(totalReserves[address(tokenIn)], reserves);\r\n        emit LOG_ADD_RESERVES(address(tokenIn), reserves);\r\n\r\n        _mintPoolShare(poolAmountOut);\r\n        _pushPoolShare(msg.sender, poolAmountOut);\r\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\r\n        _records[FEG].balance = IERC20(FEG).balanceOf(address(this));\r\n        _records[fETH].balance = IERC20(fETH).balanceOf(address(this));\r\n        return poolAmountOut;\r\n    }\r\n\r\n    function addLiquidityFEG(address tokenIn, uint tokenAmountIn, uint minPoolAmountOut)\r\n        external\r\n        _logs_\r\n        _lock_\r\n        returns (uint poolAmountOut)\r\n\r\n    {\r\n        require(tokenIn == FEG, \"Can only add FEG\");\r\n        require(_launched, \"ERR_NOT_FINALIZED\");\r\n        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\r\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_1_RATIO), \"ERR_MAX_IN_RATIO\");\r\n\r\n        Record storage inRecord = _records[tokenIn];\r\n\r\n        uint reserves;\r\n        (poolAmountOut, reserves) = calcPoolOutGivenSingleIn(\r\n                            inRecord.balance,\r\n                            inRecord.denorm,\r\n                            _totalSupply,\r\n                            _totalWeight,\r\n                            tokenAmountIn,\r\n                            _swapFee,\r\n                            _reservesRatio\r\n                        );\r\n\r\n        require(poolAmountOut >= minPoolAmountOut, \"ERR_LIMIT_OUT\");\r\n\r\n       // inRecord.balance = bsub(badd(inRecord.balance, tokenAmountIn * 98/100), reserves);\r\n\r\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn, reserves);\r\n\r\n        totalReserves[address(tokenIn)] = badd(totalReserves[address(tokenIn)], reserves);\r\n        emit LOG_ADD_RESERVES(address(tokenIn), reserves);\r\n\r\n        _mintPoolShare(poolAmountOut);\r\n        _pushPoolShare(msg.sender, poolAmountOut);\r\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\r\n    \r\n        return poolAmountOut;\r\n    }\r\n\r\n    function RemoveLiquidityPoolAmountIn(address tokenOut, uint poolAmountIn, uint minAmountOut)\r\n        external\r\n        _logs_\r\n        _lock_\r\n        returns (uint tokenAmountOut)\r\n    {\r\n        require(_launched, \"ERR_NOT_LAUNCHED\");\r\n        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\r\n        \r\n        userLock storage ulock = _userlock[msg.sender];\r\n        \r\n        if(ulock.setLock == true) {\r\n            require(ulock.unlockTime <= block.timestamp, \"Liquidity is locked, you cannot removed liquidity until after lock time.\");\r\n        }\r\n\r\n        Record storage outRecord = _records[tokenOut];\r\n\r\n        tokenAmountOut = calcSingleOutGivenPoolIn(\r\n                            outRecord.balance,\r\n                            outRecord.denorm,\r\n                            _totalSupply,\r\n                            _totalWeight,\r\n                            poolAmountIn,\r\n                            _swapFee\r\n                        );\r\n\r\n        require(tokenAmountOut >= minAmountOut, \"ERR_LIMIT_OUT\");\r\n\r\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_1_RATIO), \"ERR_MAX_OUT_RATIO\");\r\n\r\n        uint tokenAmountOutZeroFee = calcSingleOutGivenPoolIn(\r\n            outRecord.balance,\r\n            outRecord.denorm,\r\n            _totalSupply,\r\n            _totalWeight,\r\n            poolAmountIn,\r\n            0\r\n        );\r\n        uint reserves = calcReserves(\r\n            tokenAmountOutZeroFee,\r\n            tokenAmountOut,\r\n            _reservesRatio\r\n        );\r\n\r\n        //outRecord.balance = bsub(bsub(outRecord.balance, tokenAmountOut), reserves);\r\n\r\n        uint exitFee = bmul(poolAmountIn, EXIT_FEE);\r\n\r\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut, reserves);\r\n\r\n        totalReserves[address(tokenOut)] = badd(totalReserves[address(tokenOut)], reserves);\r\n        emit LOG_ADD_RESERVES(address(tokenOut), reserves);\r\n\r\n        _pullPoolShare(msg.sender, poolAmountIn);\r\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\r\n        _pushPoolShare(_factory, exitFee);\r\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\r\n        _records[FEG].balance = IERC20(FEG).balanceOf(address(this));\r\n        _records[fETH].balance = IERC20(fETH).balanceOf(address(this));\r\n        return tokenAmountOut;\r\n    }\r\n\r\n    function RemoveLiquidityExtactAmountOut(address tokenOut, uint tokenAmountOut, uint maxPoolAmountIn)\r\n        external\r\n        _logs_\r\n        _lock_\r\n        returns (uint poolAmountIn)\r\n    {\r\n        require(_launched, \"ERR_NOT_LAUNCHED\");\r\n        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\r\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_1_RATIO), \"ERR_MAX_OUT_RATIO\");\r\n\r\n        userLock storage ulock = _userlock[msg.sender];\r\n        \r\n        if(ulock.setLock == true) {\r\n            require(ulock.unlockTime <= block.timestamp, \"Liquidity is locked, you cannot removed liquidity until after lock time.\");\r\n        }\r\n        \r\n        \r\n        Record storage outRecord = _records[tokenOut];\r\n\r\n        uint reserves;\r\n        (poolAmountIn, reserves) = calcPoolInGivenSingleOut(\r\n                            outRecord.balance,\r\n                            outRecord.denorm,\r\n                            _totalSupply,\r\n                            _totalWeight,\r\n                            tokenAmountOut,\r\n                            _swapFee,\r\n                            _reservesRatio\r\n                        );\r\n\r\n        require(poolAmountIn != 0, \"ERR_MATH_APPROX\");\r\n        require(poolAmountIn <= maxPoolAmountIn, \"ERR_LIMIT_IN\");\r\n\r\n        outRecord.balance = bsub(bsub(outRecord.balance, tokenAmountOut), reserves);\r\n\r\n        uint exitFee = bmul(poolAmountIn, EXIT_FEE);\r\n\r\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut, reserves);\r\n\r\n        totalReserves[address(tokenOut)] = badd(totalReserves[address(tokenOut)], reserves);\r\n        emit LOG_ADD_RESERVES(address(tokenOut), reserves);\r\n\r\n        _pullPoolShare(msg.sender, poolAmountIn);\r\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\r\n        _pushPoolShare(_factory, exitFee);\r\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\r\n        _records[FEG].balance = IERC20(FEG).balanceOf(address(this));\r\n        _records[fETH].balance = IERC20(fETH).balanceOf(address(this));\r\n        return poolAmountIn;\r\n    }\r\n\r\n    function claimTotalReserves(address reservesAddress)\r\n        external\r\n        _logs_\r\n        _lock_\r\n    {\r\n        require(msg.sender == _factory);\r\n\r\n        for (uint i = 0; i < _tokens.length; i++) {\r\n            address t = _tokens[i];\r\n            uint tokenAmountOut = totalReserves[t];\r\n            totalReserves[t] = 0;\r\n            emit LOG_CLAIM_RESERVES(reservesAddress, t, tokenAmountOut);\r\n            _pushUnderlying(t, reservesAddress, tokenAmountOut);\r\n        }\r\n    }\r\n\r\n    // ==\r\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\r\n    // You must `_lock_` or otherwise ensure reentry-safety\r\n\r\n    function _pullUnderlying(address erc20, address from, uint amount)\r\n        internal\r\n    {\r\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\r\n        require(xfer, \"ERR_ERC20_FALSE\");\r\n    }\r\n\r\n    function _pushUnderlying(address erc20, address to, uint amount)\r\n        internal\r\n    {\r\n        bool xfer = IERC20(erc20).transfer(to, amount);\r\n        require(xfer, \"ERR_ERC20_FALSE\");\r\n    }\r\n    \r\n    function _pushUnderlying1(address erc20, uint amount)\r\n        internal\r\n    {\r\n        bool xfer = IERC20(erc20).transfer(FEGstake, amount);\r\n        require(xfer, \"ERR_ERC20_FALSE\");\r\n    }\r\n    \r\n    function _pushUnderlying2(address erc20, uint amount)\r\n        internal\r\n    {\r\n        bool xfer = IERC20(erc20).transfer(pairRewardPool, amount);\r\n        require(xfer, \"ERR_ERC20_FALSE\");\r\n    }\r\n\r\n    function _pullPoolShare(address from, uint amount)\r\n        internal\r\n    {\r\n        _pull(from, amount);\r\n    }\r\n\r\n    function _pushPoolShare(address to, uint amount)\r\n        internal\r\n    {\r\n        _push(to, amount);\r\n    }\r\n\r\n    function _mintPoolShare(uint amount)\r\n        internal\r\n    {\r\n        _mint(amount);\r\n    }\r\n\r\n    function _burnPoolShare(uint amount)\r\n        internal\r\n    {\r\n        _burn(amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservesAmount\",\"type\":\"uint256\"}],\"name\":\"LOG_ADD_RESERVES\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LOG_CALL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"name\":\"LOG_CLAIM_RESERVES\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservesAmount\",\"type\":\"uint256\"}],\"name\":\"LOG_EXIT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservesAmount\",\"type\":\"uint256\"}],\"name\":\"LOG_JOIN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservesAmount\",\"type\":\"uint256\"}],\"name\":\"LOG_SWAP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denorm\",\"type\":\"uint256\"}],\"name\":\"AddTokenInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denorm\",\"type\":\"uint256\"}],\"name\":\"AddfETHInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BPOW_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"BUY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spotPriceAfter\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_RESERVES_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXIT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEGstake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_POOL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"IsWhiteListContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"M1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_1_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BOUND_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPOW_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_IN_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OUT_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SELL_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BALANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BOUND_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BPOW_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolAmountIn\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityExtactAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityPoolAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"SELL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spotPriceAfter\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"setLock\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"}],\"name\":\"addBothLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmountOut\",\"type\":\"uint256\"}],\"name\":\"addLiquidityFEG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmountOut\",\"type\":\"uint256\"}],\"name\":\"addLiquidityfETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"boolean\",\"type\":\"bool\"}],\"name\":\"addWhiteListContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalanceIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeightIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeightOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"calcInGivenOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenInFee\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalanceIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeightIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeightOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"calcOutGivenIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenInFee\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalanceOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeightOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservesRatio\",\"type\":\"uint256\"}],\"name\":\"calcPoolInGivenSingleOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalanceIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeightIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservesRatio\",\"type\":\"uint256\"}],\"name\":\"calcPoolOutGivenSingleIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalanceOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeightOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"calcSingleOutGivenPoolIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalanceIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeightIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalanceOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenWeightOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"calcSpotPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"spotPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reservesAddress\",\"type\":\"address\"}],\"name\":\"claimTotalReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"emergencyLockOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDenormalizedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFinalTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getNormalizedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getSpotPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"spotPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDenormalizedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getUserLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"name\":\"isBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairRewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denorm\",\"type\":\"uint256\"}],\"name\":\"rebind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"removeBothLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"saveLostTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLockLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMax1SideLiquidityRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxSellRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"setPairRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"setStakePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FEGwETH", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://23860faecfd2c1ef72621ad64b98986336c1cf930bda6351846fc22cc0612eba"}