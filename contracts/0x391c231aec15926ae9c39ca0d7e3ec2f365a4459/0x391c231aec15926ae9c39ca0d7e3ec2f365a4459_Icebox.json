{"SourceCode": "/**\r\n * The Icebox is the coolest way to freeze tokens and liquidity on the planet!\r\n * Join the fun here: https://icebox.ski\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IIGLOO {\r\n    function balanceOf(address account) external returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function resetLastFreeze(address account) external;\r\n}\r\n\r\ninterface IFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n}\r\n\r\ninterface IPair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ncontract Icebox is ReentrancyGuard {\r\n    struct Freeze {\r\n        uint256 id;\r\n        address user;\r\n        address token;\r\n        uint256 amount;\r\n        uint256 supply;\r\n        uint256 freezeDate;\r\n        uint256 thawDate;\r\n        bool frozen;\r\n    }\r\n\r\n    mapping (uint256 => Freeze) public freezes;\r\n    mapping (address => uint256[]) public freezesByUser;\r\n    uint256 public freezeCounter;\r\n\r\n    address public treasuryMPG;\r\n    address public treasuryIGLOO;\r\n    uint256 public treasuryMPGBps;\r\n    uint256 public treasuryIGLOOBps;\r\n    uint256 public fee;\r\n    uint256 public constant maxTokenValue = 15 * (10 ** 16);\r\n\r\n    IIGLOO public IGLOO;\r\n    address public weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    IFactory public factory = IFactory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    IERC20 public WETH = IERC20(weth);\r\n    IRouter public router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    event FeeReceived(uint256 indexed id, uint256 indexed amount, uint256 indexed timestamp);\r\n\r\n    modifier onlyTreasury() {\r\n        require(msg.sender == treasuryMPG || msg.sender == treasuryIGLOO);\r\n        _;\r\n    }\r\n\r\n    constructor(address _treasuryMPG, address _treasuryIGLOO, uint256 _treasuryMPGBps, uint256 _treasuryIGLOOBps, uint256 _fee, address _igloo) {\r\n        treasuryMPG = _treasuryMPG;\r\n        treasuryIGLOO = _treasuryIGLOO;\r\n        require(_treasuryMPGBps + _treasuryIGLOOBps == 10000);\r\n        treasuryMPGBps = _treasuryMPGBps;\r\n        treasuryIGLOOBps = _treasuryIGLOOBps;\r\n        fee = _fee;\r\n        IGLOO = IIGLOO(_igloo);\r\n    }\r\n\r\n    function freeze(address _token, uint256 _amount, uint256 _seconds) external payable nonReentrant {\r\n        require(msg.value == fee);\r\n        IERC20 _Token = IERC20(_token);\r\n        require(_Token.balanceOf(msg.sender) >= _amount, \"Balance too low\");\r\n        require(_Token.allowance(msg.sender, address(this)) >= _amount, \"Allowance too low\");\r\n        uint256 _balance = _Token.balanceOf(address(this));\r\n        _Token.transferFrom(msg.sender, address(this), _amount);\r\n        require(_Token.balanceOf(address(this)) == _balance + _amount);\r\n\r\n        freezes[freezeCounter] = Freeze({\r\n            id: freezeCounter,\r\n            user: msg.sender,\r\n            token: _token,\r\n            amount: _amount,\r\n            supply: _Token.totalSupply(),\r\n            freezeDate: block.timestamp,\r\n            thawDate: block.timestamp + _seconds,\r\n            frozen: true\r\n        });\r\n        freezesByUser[msg.sender].push(freezeCounter);\r\n        freezeCounter = freezeCounter + 1;\r\n\r\n        if (treasuryMPGBps > 0) {\r\n            payable(treasuryMPG).call{value: fee * treasuryMPGBps / 10000}(\"\");\r\n        }\r\n        if (treasuryIGLOOBps > 0) {\r\n            payable(treasuryIGLOO).call{value: fee * treasuryIGLOOBps / 10000}(\"\");\r\n        }\r\n        emit FeeReceived(freezeCounter - 1, fee, block.timestamp);\r\n\r\n        IPair _pair = IPair(_token);\r\n        try _pair.token0() {\r\n            (uint112 _reserveIn, uint112 _reserveOut, ) = _pair.getReserves();\r\n            if (_pair.token0() == weth) {\r\n                if (factory.getPair(weth, _pair.token1()) == _token) {\r\n                    uint256 _months = _seconds / 2629800;\r\n                    if (_months >= 1) {\r\n                        if (_months > 36) {\r\n                            _months = 36;\r\n                        }\r\n                        uint256 _tokens = IGLOO.balanceOf(address(this)) * _months / 1000000;\r\n                        uint256 _amountOut = router.getAmountOut(_tokens, _reserveOut, _reserveIn);\r\n                        if (_amountOut >= maxTokenValue) {\r\n                            _tokens = router.getAmountIn(maxTokenValue, _reserveOut, _reserveIn);\r\n                        }\r\n                        try IGLOO.transfer(msg.sender, _tokens) { IGLOO.resetLastFreeze(msg.sender); } catch {}\r\n                    }\r\n                }\r\n            } else if (_pair.token1() == weth) {\r\n                if (factory.getPair(_pair.token0(), weth) == _token) {\r\n                    uint256 _months = _seconds / 2629800;\r\n                    _months = 36;\r\n                    if (_months >= 1) {\r\n                        if (_months > 36) {\r\n                            _months = 36;\r\n                        }\r\n                        uint256 _tokens = IGLOO.balanceOf(address(this)) * _months / 10000;\r\n                        uint256 _amountOut = router.getAmountOut(_tokens, _reserveIn, _reserveOut);\r\n                        if (_amountOut >= maxTokenValue) {\r\n                            _tokens = router.getAmountIn(maxTokenValue, _reserveIn, _reserveOut);\r\n                        }\r\n                        try IGLOO.transfer(msg.sender, _tokens) { IGLOO.resetLastFreeze(msg.sender); } catch {}\r\n                    }\r\n                }\r\n            }\r\n        } catch {}\r\n    }\r\n\r\n    function transfer(uint256 _id, address _user) external nonReentrant {\r\n        require(freezeCounter > _id);\r\n        Freeze storage _freeze = freezes[_id];\r\n        require(_freeze.frozen);\r\n        require(_freeze.user == msg.sender);\r\n        _freeze.user = _user;\r\n        freezes[_freeze.id] = _freeze;\r\n        freezesByUser[_user].push(freezeCounter);\r\n    }\r\n\r\n    function refreeze(uint256 _id, uint256 _seconds) external nonReentrant {\r\n        require(freezeCounter > _id);\r\n        Freeze storage _freeze = freezes[_id];\r\n        require(_freeze.frozen);\r\n        require(_freeze.user == msg.sender);\r\n        require(block.timestamp + _seconds >= _freeze.thawDate);\r\n        if (block.timestamp >= _freeze.thawDate) {\r\n            require(block.timestamp + _seconds >= block.timestamp);\r\n        }\r\n        _freeze.thawDate = block.timestamp + _seconds;\r\n        freezes[_freeze.id] = _freeze;\r\n    }\r\n\r\n    function unfreeze(uint256 _id) external nonReentrant {\r\n        require(freezeCounter > _id);\r\n        Freeze storage _freeze = freezes[_id];\r\n        require(_freeze.frozen);\r\n        require(block.timestamp >= _freeze.thawDate);\r\n        require(_freeze.user == msg.sender);\r\n\r\n        _freeze.frozen = false;\r\n        freezes[_freeze.id] = _freeze;\r\n\r\n        IERC20 _Token = IERC20(_freeze.token);\r\n        _Token.transfer(_freeze.user, _freeze.amount);\r\n    }\r\n\r\n    function setFee(uint256 _fee) external nonReentrant onlyTreasury {\r\n        require(1 ether >= fee);\r\n        fee = _fee;\r\n    }\r\n\r\n    function setTreasuryMPG(address _treasuryMPG) external nonReentrant onlyTreasury {\r\n        treasuryMPG = _treasuryMPG;\r\n    }\r\n\r\n    function setTreasuryIGLOO(address _treasuryIGLOO) external nonReentrant onlyTreasury {\r\n        treasuryIGLOO = _treasuryIGLOO;\r\n    }\r\n\r\n    function setTreasuryBps(uint256 _treasuryMPGBps, uint256 _treasuryIGLOOBps) external nonReentrant onlyTreasury {\r\n        require(_treasuryMPGBps + _treasuryIGLOOBps == 10000);\r\n        treasuryMPGBps = _treasuryMPGBps;\r\n        treasuryIGLOOBps = _treasuryIGLOOBps;\r\n    }\r\n\r\n    function reqFee() external view returns (uint256) {\r\n        return fee;\r\n    }\r\n\r\n    function reqTreasuryMPG() external view returns (address) {\r\n        return treasuryMPG;\r\n    }\r\n\r\n    function reqTreasuryIGLOO() external view returns (address) {\r\n        return treasuryIGLOO;\r\n    }\r\n\r\n    function reqTreasuryBps() external view returns (uint256, uint256) {\r\n        return (treasuryMPGBps, treasuryIGLOOBps);\r\n    }\r\n\r\n    function reqIgloo() external view returns (address) {\r\n        return address(IGLOO);\r\n    }\r\n\r\n    function reqNumFreezes() external view returns (uint256) {\r\n        return freezeCounter;\r\n    }\r\n\r\n    function reqFreeze(uint256 _id, bool _updatedSupply) public view returns (Freeze memory) {\r\n        Freeze memory _freeze = freezes[_id];\r\n        if (_updatedSupply) {\r\n            _freeze.supply = IERC20(_freeze.token).totalSupply();\r\n        }\r\n        return _freeze;\r\n    }\r\n\r\n    function reqFreezes(uint256 _from, uint256 _to, bool _updatedSupply) external view returns (Freeze[] memory) {\r\n        Freeze[] memory _freezes = new Freeze[](_to - _from);\r\n        uint256 _i = 0;\r\n        for (uint256 _j = _from; _j < _to; _j++) {\r\n            _freezes[_i] = reqFreeze(_j, _updatedSupply);\r\n            _i++;\r\n        }\r\n        return _freezes;\r\n    }\r\n\r\n    function reqFreezeIDsByUser(address _user) external view returns (uint256[] memory) {\r\n        return freezesByUser[_user];\r\n    }\r\n\r\n    function reqFreezesByUser(address _user, bool _updatedSupply) external view returns (Freeze[] memory) {\r\n        Freeze[] memory _freezes = new Freeze[](freezesByUser[_user].length);\r\n        uint256 _i = 0;\r\n        for (uint256 _j = 0; _j < freezesByUser[_user].length; _j++) {\r\n            Freeze memory _freeze = reqFreeze(freezesByUser[_user][_j], _updatedSupply);\r\n            if (_freeze.user == _user) {\r\n                _freezes[_i] = _freeze;\r\n                _i++;\r\n            }\r\n        }\r\n        return _freezes;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryMPG\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryIGLOO\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryMPGBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryIGLOOBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_igloo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FeeReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IGLOO\",\"outputs\":[{\"internalType\":\"contract IIGLOO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thawDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezesByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"refreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reqFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_updatedSupply\",\"type\":\"bool\"}],\"name\":\"reqFreeze\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thawDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"internalType\":\"struct Icebox.Freeze\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"reqFreezeIDsByUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_updatedSupply\",\"type\":\"bool\"}],\"name\":\"reqFreezes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thawDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"internalType\":\"struct Icebox.Freeze[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_updatedSupply\",\"type\":\"bool\"}],\"name\":\"reqFreezesByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thawDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"internalType\":\"struct Icebox.Freeze[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reqIgloo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reqNumFreezes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reqTreasuryBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reqTreasuryIGLOO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reqTreasuryMPG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryMPGBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryIGLOOBps\",\"type\":\"uint256\"}],\"name\":\"setTreasuryBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryIGLOO\",\"type\":\"address\"}],\"name\":\"setTreasuryIGLOO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryMPG\",\"type\":\"address\"}],\"name\":\"setTreasuryMPG\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryIGLOO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryIGLOOBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryMPG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryMPGBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Icebox", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008f44172df47a3635772b3c0954c84e899869139d000000000000000000000000ba94e79b45b04da4fed98b3587b75dacb2ef28bd0000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000007d0000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000f12162fefe50d600a6604977d6cbbb0f83b0c328", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cbff74696880ec44d7d7782fab2a92090c26cb45c099684fa3b15fd2dd7e58a5"}