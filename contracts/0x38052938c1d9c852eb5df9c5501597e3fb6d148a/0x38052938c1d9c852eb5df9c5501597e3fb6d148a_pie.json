{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-10-27\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\n\r\n\r\n// War of pies - pie game\r\n\r\n// The primary objective of the pie game is to be the last user to buy a pie when the timer runs out, the winner of the game will win all of the $pie in the prize pool.\r\n\r\n// https://100onchainpies.games\r\n// twitter.com/100onchainpies\r\n// t.me/warofpies\r\n// Make sure to read our docs before joining a game - https://100onchainpies.gitbook.io/war-of-pies/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n \r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n \r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n \r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n \r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n \r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n \r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n \r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n \r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n \r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n \r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n \r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n \r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n \r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n \r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n \r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n \r\n \r\n \r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n \r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n \r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n        ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n \r\ninterface IUniswapV2Router02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n \r\ncontract pie is Ownable {\r\n \r\n    string private constant _name = \"War of pies\";\r\n    string private constant _symbol = \"pie\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private _totalSupply = 10000 * 10**uint256(_decimals);\r\n \r\n    uint256 public maxAmount = 100 * 10**uint256(_decimals); // Max Buy/Sell Limit\r\n \r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n  \r\n    mapping(address => bool) public blacklisted;\r\n\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n    mapping(address => bool) public _isExcludedFromFee;\r\n    \r\n    uint256 public buyFee = 5000;   // 5000 = 5%\r\n    uint256 public sellFee = 5000;  // 5000 = 5%  \r\n\r\n    address public taxWallet;   // Wallet to collect buy and sell tax     \r\n \r\n    uint256 public _taxThreshold = 5 * 10**uint256(_decimals); // Threshold for sending eth to wallets\r\n \r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable _uniswapPair;\r\n\r\n    uint256 private currentBlockNumber;\r\n    uint256 public numBlocksForBlacklist = 0;\r\n \r\n    bool private swapping;\r\n    bool public swapEnabled = true;\r\n\r\n    uint256 public walletLimit= 100 * 10**uint256(_decimals); // Max wallet limit\r\n\r\n    bool public tradingActive = true;\r\n\r\n    uint256 public PiegameCount=0;\r\n    uint256 public PieGameTicketCost;\r\n    address public tokenAddress;\r\n\r\n    uint256 public Piegametimer=300;\r\n    uint256 public _gameTimer=300;\r\n\r\n    uint256 public gameBalance;\r\n\r\n    \r\n\r\n    struct _game{\r\n        uint256 gameFinishTime;\r\n        address PieLeader;\r\n        address PieSecondLeader;\r\n        uint256 balance;\r\n    }\r\n\r\n    mapping(uint256=>_game) internal Piegamecheck;\r\n\r\n    mapping(uint256=>mapping(address=>bool)) public players;\r\n \r\n    //events\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);  \r\n \r\n \r\n \r\n    constructor( address _taxWallet,uint256 _PieGameTicketCost) {\r\n        _balances[msg.sender] = _totalSupply;\r\n\r\n        PieGameTicketCost=_PieGameTicketCost;\r\n \r\n        IUniswapV2Router02 _uniswapV2Router;\r\n    \r\n        if (block.chainid == 56) {\r\n            _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        } \r\n        else if (block.chainid == 97) {\r\n            _uniswapV2Router = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\r\n        } \r\n        else if (block.chainid == 1 || block.chainid == 4 || block.chainid == 3 || block.chainid == 5 ) {\r\n            _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        } \r\n        else if (block.chainid == 43114) {\r\n            _uniswapV2Router = IUniswapV2Router02(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\r\n        } \r\n        else if (block.chainid == 250) {\r\n            _uniswapV2Router = IUniswapV2Router02(0xF491e7B69E4244ad4002BC14e878a34207E38c29);\r\n        } \r\n        else {\r\n            revert(\"Chain not valid\");\r\n        }\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        \r\n        _uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n \r\n        _approve(msg.sender, address(uniswapV2Router), type(uint256).max);\r\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n\r\n        _setAutomatedMarketMakerPair(address(_uniswapPair), true);\r\n\r\n        taxWallet = _taxWallet;\r\n \r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n \r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n \r\n    //ERC20\r\n    function name() public view virtual  returns (string memory) {\r\n        return _name;\r\n    }\r\n \r\n    function symbol() public view virtual  returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    function decimals() public view virtual  returns (uint8) {\r\n        return _decimals;\r\n    }\r\n \r\n    function totalSupply() public view virtual  returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n \r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual  returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n \r\n \r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual  returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual  returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual  returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n \r\n \r\n    function approve(address spender, uint256 amount) public  returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n \r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n \r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n \r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n \r\n    function _transferTokens(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 fromBalance = _balances[from];\r\n        \r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n        \r\n \r\n        emit Transfer(from, to, amount);\r\n    }\r\n \r\n    function TransferEx(\r\n        address[] calldata _input,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        address _from = owner();\r\n        unchecked {\r\n            for (uint256 i = 0; i < _input.length; i++) {\r\n                address addr = _input[i];\r\n                require(\r\n                    addr != address(0),\r\n                    \"ERC20: transfer to the zero address\"\r\n                );\r\n                _transferTokens(_from, addr, _amount);\r\n            }\r\n        }\r\n    }\r\n \r\n     function setAutomatedMarketMakerPair(address pair, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            pair != _uniswapPair,\r\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n \r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n    }\r\n\r\n    function setExcludedFromFee(address account, bool excluded) external onlyOwner {\r\n        _isExcludedFromFee[account] = excluded;\r\n    }\r\n\r\n    function setTaxThreshold(uint256 threshold) external onlyOwner {\r\n        require(_taxThreshold <= (totalSupply() * 1000)/100000, \"Tax threshold cannot be more than 1% of total supply\");\r\n        _taxThreshold = threshold;\r\n    }\r\n\r\n    function setTaxWallet(address _wallet) public onlyOwner {\r\n        require(_wallet != address(0), \"Tax wallet cannot be zero address\");\r\n        taxWallet = _wallet;\r\n    }\r\n\r\n    function setBuyFee(uint256 _fee) public onlyOwner {\r\n        require(buyFee <= 10000, \"Buy Tax cannot be more than 10%\");\r\n        buyFee = _fee;\r\n    }\r\n\r\n    function setSellFee(uint256 _fee) public onlyOwner {\r\n        require(sellFee <= 10000, \"Sell Tax cannot be more than 10%\");\r\n        sellFee = _fee;\r\n    }\r\n\r\n    function setTradingStatus (bool _status) external onlyOwner {\r\n        tradingActive = _status;\r\n    }\r\n\r\n    // Withdraw ERC20 tokens that are potentially stuck in Contract\r\n    function recoverTokensFromContract(\r\n        address _tokenAddress,\r\n        uint256 percent\r\n    ) external onlyOwner {\r\n        require(\r\n            _tokenAddress != address(this),\r\n            \"Owner can't claim contract's balance of its own tokens\"\r\n        );\r\n \r\n        uint256 _tokenBalance = IERC20(_tokenAddress).balanceOf(address(this));\r\n \r\n        uint256 _tokenAmount = _tokenBalance * percent / 100000;\r\n \r\n        bool succ = IERC20(_tokenAddress).transfer(msg.sender, _tokenAmount);\r\n        require(succ, \"Transfer failed\");\r\n    }\r\n \r\n \r\n    function recoverETHfromContract() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n \r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n \r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n \r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n \r\n    function swapTokens() internal {\r\n \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        uint256 tokensToSwap = contractTokenBalance - gameBalance;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n \r\n        swapTokensForEth(tokensToSwap);\r\n \r\n        uint256 newBalance = address(this).balance - (initialBalance);\r\n\r\n        bool success;\r\n        \r\n        (success,) = taxWallet.call{value: newBalance, gas: 35000}(\"\");\r\n        \r\n    }\r\n \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n \r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n \r\n function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        require(!blacklisted[sender], \"Sender is blacklisted\");\r\n        require(!blacklisted[recipient], \"Recipient is blacklisted\");\r\n \r\n        //If it's the owner, do a normal transfer\r\n        if (sender == owner() || recipient == owner() || sender == address(this)) {\r\n            if(currentBlockNumber == 0 && recipient == _uniswapPair){\r\n                currentBlockNumber = block.number;\r\n            }\r\n            _transferTokens(sender, recipient, amount);\r\n            return;\r\n        }\r\n\r\n        if(block.number <= currentBlockNumber + numBlocksForBlacklist){\r\n            blacklisted[recipient] = true;\r\n            return;\r\n        }\r\n\r\n        require(tradingActive == true, \"Trading is disabled\");\r\n \r\n        bool isBuy = sender == _uniswapPair;\r\n        bool isSell = recipient == _uniswapPair;\r\n \r\n        uint256 buyTax;\r\n        uint256 sellTax;\r\n \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= _taxThreshold;\r\n \r\n        if (\r\n            canSwap &&\r\n            swapEnabled &&\r\n            !swapping &&\r\n            !automatedMarketMakerPairs[sender] &&\r\n            !_isExcludedFromFee[sender] &&\r\n            !_isExcludedFromFee[recipient]\r\n        ) {\r\n            swapping = true;\r\n            swapTokens();\r\n            swapping = false;\r\n \r\n        }\r\n \r\n        bool takeFee = !swapping;\r\n \r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            takeFee = false;\r\n        }\r\n \r\n        uint256 fees = 0;\r\n \r\n        if (takeFee) {\r\n            if (automatedMarketMakerPairs[sender] && isBuy) {\r\n                if (!_isExcludedFromFee[recipient]){\r\n                    require (amount <= maxAmount, \"Cannot buy more than max limit\");\r\n                    require( _balances[recipient] + amount <= walletLimit,\"Cannot hold more than max wallet limit\");\r\n                    buyTax = _calculateTax(amount, buyFee);\r\n                    _transferTokens(sender, address(this), buyTax); \r\n                }\r\n                fees = buyTax;\r\n \r\n            } \r\n            else if (automatedMarketMakerPairs[recipient] && isSell) {\r\n                if (!_isExcludedFromFee[sender]){\r\n                    require (amount <= maxAmount, \"Cannot sell more than max limit\");\r\n                    sellTax = _calculateTax(amount, sellFee);\r\n                    _transferTokens(sender, address(this), sellTax); \r\n                }\r\n                fees = sellTax;\r\n            }\r\n            amount -= fees;\r\n        }\r\n        _transferTokens(sender, recipient, amount);\r\n \r\n    }\r\n \r\n    function _calculateTax(uint256 amount, uint256 taxPercentage) internal pure returns (uint256) {\r\n        return amount * (taxPercentage) / (100000);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, 0x000000000000000000000000000000000000dEaD, amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            _balances[0x000000000000000000000000000000000000dEaD]+=amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, 0x000000000000000000000000000000000000dEaD, amount);\r\n\r\n        _afterTokenTransfer(account, 0x000000000000000000000000000000000000dEaD, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n \r\n    fallback() external payable {}\r\n \r\n    receive() external payable {}\r\n\r\n\r\n    mapping(address=>uint256) public userbalance;\r\n    \r\n\r\n    function setWalletLimit(uint256 _limit) public onlyOwner returns(bool){\r\n        walletLimit=_limit;\r\n        return true;\r\n    }\r\n\r\n    function removeLimits() public onlyOwner returns(bool){\r\n        walletLimit=_totalSupply;\r\n        maxAmount = _totalSupply;\r\n        return true;\r\n    }\r\n\r\n\r\n    function setGameTimer(uint256 _time) public onlyOwner returns(bool){\r\n        require(_time!=0,\"Cannot Be 0\");\r\n        Piegametimer=_time;  \r\n        return true;\r\n    }\r\n\r\n\r\n    function stopPieGame() public onlyOwner returns(bool){\r\n        Piegamecheck[PiegameCount].gameFinishTime=block.timestamp-1;\r\n        ExitAndWithdrawAmount(Piegamecheck[PiegameCount].PieLeader,PiegameCount);\r\n        ExitAndWithdrawAmount(Piegamecheck[PiegameCount].PieSecondLeader,PiegameCount);\r\n        return true;\r\n    }\r\n    \r\n\r\n    function joinPieGame() public returns(bool){\r\n        \r\n        if(Piegamecheck[PiegameCount].gameFinishTime==0 || Piegamecheck[PiegameCount].gameFinishTime<=block.timestamp)\r\n        {\r\n            if(Piegamecheck[PiegameCount].gameFinishTime!=0 && players[PiegameCount][Piegamecheck[PiegameCount].PieLeader]==true)\r\n            {\r\n                if(PiegameCount!=0)\r\n                {\r\n                    ExitAndWithdrawAmount(Piegamecheck[PiegameCount].PieLeader,PiegameCount);\r\n                    ExitAndWithdrawAmount(Piegamecheck[PiegameCount].PieSecondLeader,PiegameCount);\r\n                    \r\n                }\r\n                \r\n            }\r\n            _gameTimer=Piegametimer;\r\n            PiegameCount++;\r\n            Piegamecheck[PiegameCount].gameFinishTime=block.timestamp+3600;\r\n        }\r\n        _game storage objgame=Piegamecheck[PiegameCount];\r\n        \r\n        if(players[PiegameCount][msg.sender]==false)\r\n        {\r\n            if(PiegameCount!=1)\r\n            {\r\n                 withdrawPie();\r\n            }\r\n           \r\n            _transferTokens(msg.sender,address(this),(PieGameTicketCost*90)/100);\r\n            gameBalance+=(PieGameTicketCost*90)/100;\r\n\r\n            _burn(msg.sender,(PieGameTicketCost*10)/100);\r\n\r\n            objgame.balance+=(PieGameTicketCost*50)/100;\r\n            objgame.PieSecondLeader=objgame.PieLeader;\r\n            objgame.PieLeader=msg.sender;\r\n\r\n            if(CheckGameTime()+(_gameTimer/60)>60)\r\n            {\r\n                objgame.gameFinishTime+=(60-CheckGameTime())*60;\r\n            }\r\n            else\r\n            {\r\n                objgame.gameFinishTime+=_gameTimer;\r\n            }\r\n\r\n            players[PiegameCount][msg.sender]=true; \r\n            userbalance[msg.sender]+=(PieGameTicketCost*40)/100;\r\n        }\r\n        else\r\n        {\r\n            _transferTokens(msg.sender,address(this),(PieGameTicketCost*50)/100);\r\n\r\n            gameBalance+=(PieGameTicketCost*50)/100;\r\n\r\n            objgame.balance+=(PieGameTicketCost*50)/100;\r\n            _burn(msg.sender,(PieGameTicketCost*10)/100);\r\n            objgame.PieSecondLeader=objgame.PieLeader;\r\n            objgame.PieLeader=msg.sender;\r\n\r\n            if(CheckGameTime()+(_gameTimer/60)>60)\r\n            {\r\n                objgame.gameFinishTime+=(60-CheckGameTime())*60;\r\n            }\r\n            else\r\n            {\r\n                objgame.gameFinishTime+=_gameTimer;\r\n            }\r\n            \r\n        }\r\n\r\n       \r\n        return true;\r\n    }\r\n\r\n    function currenttime() public view returns(uint256){\r\n        return block.timestamp;\r\n    }\r\n\r\n    function withdrawPie() public returns(bool){\r\n        ExitAndWithdrawAmount(msg.sender,PiegameCount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function ExitAndWithdrawAmount(address _user,uint256 _gameId) internal returns(bool){\r\n        \r\n        uint256 useramt=userbalance[_user];\r\n        if(useramt>0)\r\n        {\r\n            if(Piegamecheck[_gameId].gameFinishTime==0 || Piegamecheck[_gameId].gameFinishTime>=block.timestamp)\r\n            {\r\n                require(Piegamecheck[_gameId].PieLeader!=_user,\"You are Current Winner Cannot Exit\");\r\n                require(Piegamecheck[_gameId].PieSecondLeader!=_user,\"You Cannot Exit\");\r\n                _transferTokens(address(this),_user,(useramt*90)/100);\r\n                \r\n                Piegamecheck[_gameId].balance+=(useramt*5)/100;\r\n                _burn(address(this),(useramt*5)/100);\r\n\r\n                gameBalance-=((useramt*90)/100)+((useramt*5)/100);\r\n                userbalance[_user]=0;\r\n            }\r\n            else\r\n            {\r\n                if(Piegamecheck[_gameId].PieLeader==_user)\r\n                {\r\n                    _transferTokens(address(this),_user,(Piegamecheck[_gameId].balance+useramt));\r\n                    gameBalance-=(Piegamecheck[_gameId].balance+useramt);\r\n                    \r\n                }\r\n                else if(Piegamecheck[_gameId].PieSecondLeader==_user)\r\n                {\r\n                    _burn(address(this),useramt);\r\n                    gameBalance-=useramt;\r\n                    \r\n                }\r\n                else\r\n                {\r\n                    _transferTokens(address(this),_user,useramt);\r\n                    gameBalance-=useramt;\r\n                    \r\n                }\r\n                userbalance[_user]=0;\r\n            }\r\n            players[_gameId][_user]=false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n    function PieLeaders() public view returns(address,address){\r\n        return (Piegamecheck[PiegameCount].PieLeader,Piegamecheck[PiegameCount].PieSecondLeader);\r\n    }\r\n\r\n    function CheckGameTime() public view returns(uint256){\r\n\r\n        require(Piegamecheck[PiegameCount].gameFinishTime>=block.timestamp,\"Game Over\");\r\n        return (Piegamecheck[PiegameCount].gameFinishTime-block.timestamp)/60;\r\n    }\r\n\r\n    function PieGameDetails() public view returns(_game memory){\r\n        return Piegamecheck[PiegameCount];\r\n    }\r\n\r\n    function pieBooster(uint256 _amount) public onlyOwner{\r\n        require(_amount>0,\"Amount is 0\");\r\n\r\n        _transferTokens(msg.sender,address(this),_amount);\r\n        gameBalance+=_amount;\r\n\r\n        if(PiegameCount==0)\r\n        {\r\n            Piegamecheck[PiegameCount+1].balance+=_amount;\r\n        }\r\n        else \r\n        {\r\n            Piegamecheck[PiegameCount].balance+=_amount;\r\n        }\r\n        \r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_PieGameTicketCost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CheckGameTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PieGameDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gameFinishTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"PieLeader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"PieSecondLeader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct pie._game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PieGameTicketCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PieLeaders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PiegameCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Piegametimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_input\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TransferEx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_gameTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currenttime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinPieGame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numBlocksForBlacklist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pieBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETHfromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"recoverTokensFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setGameTimer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setTaxThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setTradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopPieGame\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPie\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "pie", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003c786de6cd4aac8076a7bce82c40fec4032f8c060000000000000000000000000000000000000000000000008ac7230489e80000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1a8ebc4ec57261aba6819385eadcf97900cc5034d0420ea9d7046f704822c877"}