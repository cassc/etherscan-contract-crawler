{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Staking/CappedRewardCalculator.sol\\\";\\nimport \\\"./ClaimsRegistry.sol\\\";\\n\\n/// @title A staking contract which allows only verified users (by checking a separate contract for a valid signature)\\n/// @author Miguel Palhas <miguel@subvisual.co>\\ncontract Staking is CappedRewardCalculator, Ownable {\\n  /// @notice the token to stake\\n  ERC20 public immutable erc20;\\n\\n  /// @notice claim registry where signatures are to be stored and verified\\n  IClaimsRegistryVerifier public immutable registry;\\n\\n  /// @notice The expected attester address against which claims will be verified\\n  ///   (i.e. they must be signed by this address)\\n  address public immutable claimAttester;\\n\\n  /// @notice The minimum staking amount per account\\n  uint public immutable minAmount;\\n\\n  /// @notice The maximum staking amount per account\\n  uint public immutable maxAmount;\\n\\n  /// @notice Locked rewards pending withdrawal\\n  uint public lockedReward = 0;\\n\\n  /// @notice Rewards already distributed\\n  uint public distributedReward = 0;\\n\\n  /// @notice How much is currently staked\\n  uint public stakedAmount = 0;\\n\\n  /// @notice Subscription details for each account\\n  mapping(address => Subscription) public subscriptions;\\n\\n  /// @notice Emitted when an account stakes tokens and creates a new subscription\\n  event Subscribed(\\n    address subscriber,\\n    uint date,\\n    uint stakedAmount,\\n    uint maxReward\\n  );\\n\\n  /// @notice Emitted when an account withdraws an existing stake\\n  event Withdrawn(\\n    address subscriber,\\n    uint date,\\n    uint withdrawAmount\\n  );\\n\\n  /// @notice Details of a particular subscription\\n  struct Subscription {\\n    bool active;\\n    address subscriberAddress; // addres the subscriptions refers to\\n    uint startDate;      // Block timestamp at which the subscription was made\\n    uint stakedAmount;   // How much was staked\\n    uint maxReward;      // Maximum reward given if user stays until the end of the staking period\\n    uint withdrawAmount; // Total amount withdrawn (initial amount + final calculated reward)\\n    uint withdrawDate;   // Block timestamp at which the subscription was withdrawn (or 0 while staking is in progress)\\n  }\\n\\n  /// @notice Staking constructor\\n  /// @param _token ERC20 token address to use\\n  /// @param _registry ClaimsRegistry address to use\\n  /// @param _attester expected attester of claims when verifying them\\n  /// @param _startDate timestamp starting at which stakes are allowed. Must be greater than instantiation timestamp\\n  /// @param _endDate timestamp at which staking is over (no more rewards are given, and new stakes are not allowed)\\n  /// @param _minAmount minimum staking amount for each account\\n  /// @param _maxAmount maximum staking amount for each account\\n  /// @param _cap max % of individual reward for curve period\\n  constructor(\\n    address _token,\\n    address _registry,\\n    address _attester,\\n    uint _startDate,\\n    uint _endDate,\\n    uint _minAmount,\\n    uint _maxAmount,\\n    uint _cap\\n  ) CappedRewardCalculator(_startDate, _endDate, _cap) {\\n    require(_token != address(0), \\\"Staking: token address cannot be 0x0\\\");\\n    require(_registry != address(0), \\\"Staking: claims registry address cannot be 0x0\\\");\\n    require(_attester != address(0), \\\"Staking: claim attester cannot be 0x0\\\");\\n    require(block.timestamp <= _startDate, \\\"Staking: start date must be in the future\\\");\\n    require(_minAmount > 0, \\\"Staking: invalid individual min amount\\\");\\n    require(_maxAmount > _minAmount, \\\"Staking: max amount must be higher than min amount\\\");\\n\\n    erc20 = ERC20(_token);\\n    registry = IClaimsRegistryVerifier(_registry);\\n    claimAttester = _attester;\\n\\n    minAmount = _minAmount;\\n    maxAmount = _maxAmount;\\n  }\\n\\n  /// @notice Get the total size of the reward pool\\n  /// @return Returns the total size of the reward pool, including locked and distributed tokens\\n  function totalPool() public view returns (uint) {\\n    return erc20.balanceOf(address(this)) - stakedAmount + distributedReward;\\n  }\\n\\n  /// @notice Get the available size of the reward pool\\n  /// @return Returns the available size of the reward pool, no including locked or distributed rewards\\n  function availablePool() public view returns (uint) {\\n    return erc20.balanceOf(address(this)) - stakedAmount - lockedReward;\\n  }\\n\\n  /// @notice Requests a new stake to be created. Only one stake per account is\\n  ///   created, maximum rewards are calculated upfront, and a valid claim\\n  ///   signature needs to be provided, which will be checked against the expected\\n  ///   attester on the registry contract\\n  /// @param _amount Amount of tokens to stake\\n  /// @param claimSig Signature to check against the registry contract\\n  function stake(uint _amount, bytes calldata claimSig) external {\\n    uint time = block.timestamp;\\n    address subscriber = msg.sender;\\n\\n    require(registry.verifyClaim(msg.sender, claimAttester, claimSig), \\\"Staking: could not verify claim\\\");\\n    require(_amount >= minAmount, \\\"Staking: staked amount needs to be greater than or equal to minimum amount\\\");\\n    require(_amount <= maxAmount, \\\"Staking: staked amount needs to be lower than or equal to maximum amount\\\");\\n    require(time >= startDate, \\\"Staking: staking period not started\\\");\\n    require(time < endDate, \\\"Staking: staking period finished\\\");\\n    require(subscriptions[subscriber].active == false, \\\"Staking: this account has already staked\\\");\\n\\n\\n    uint maxReward = calculateReward(time, endDate, _amount);\\n    require(maxReward <= availablePool(), \\\"Staking: not enough tokens available in the pool\\\");\\n    lockedReward += maxReward;\\n    stakedAmount += _amount;\\n\\n    subscriptions[subscriber] = Subscription(\\n      true,\\n      subscriber,\\n      time,\\n      _amount,\\n      maxReward,\\n      0,\\n      0\\n    );\\n\\n    // transfer tokens from subscriber to the contract\\n    require(erc20.transferFrom(subscriber, address(this), _amount),\\n      \\\"Staking: Could not transfer tokens from subscriber\\\");\\n\\n    emit Subscribed(subscriber, time, _amount, maxReward);\\n  }\\n\\n  /// @notice Withdrawn the stake belonging to `msg.sender`\\n  function withdraw() external {\\n    address subscriber = msg.sender;\\n    uint time = block.timestamp;\\n\\n    require(subscriptions[subscriber].active == true, \\\"Staking: no active subscription found for this address\\\");\\n\\n    Subscription memory sub = subscriptions[subscriber];\\n\\n    uint actualReward = calculateReward(sub.startDate, time, sub.stakedAmount);\\n    uint total = sub.stakedAmount + actualReward;\\n\\n    // update subscription state\\n    sub.withdrawAmount = total;\\n    sub.withdrawDate = time;\\n    sub.active = false;\\n    subscriptions[subscriber] = sub;\\n\\n    // update locked amount\\n    lockedReward -= sub.maxReward;\\n    distributedReward += actualReward;\\n    stakedAmount -= sub.stakedAmount;\\n\\n    // transfer tokens back to subscriber\\n    require(erc20.transfer(subscriber, total), \\\"Staking: Transfer has failed\\\");\\n\\n    emit Withdrawn(subscriber, time, total);\\n  }\\n\\n  /// @notice returns the initial amount staked by a given account\\n  /// @param _subscriber The account to check\\n  /// @return The amount that was staked by the given account\\n  function getStakedAmount(address _subscriber) external view returns (uint) {\\n    if (subscriptions[_subscriber].stakedAmount > 0 && subscriptions[_subscriber].withdrawDate == 0) {\\n      return subscriptions[_subscriber].stakedAmount;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  /// @notice Gets the maximum reward for an existing subscription\\n  /// @param _subscriber address of the subscription to check\\n  /// @return Maximum amount of tokens the subscriber can get by staying until the end of the staking period\\n  function getMaxStakeReward(address _subscriber) external view returns (uint) {\\n    Subscription memory sub = subscriptions[_subscriber];\\n\\n    if (sub.active) {\\n      return subscriptions[_subscriber].maxReward;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  /// @notice Gets the amount already earned by an existing subscription\\n  /// @param _subscriber address of the subscription to check\\n  /// @return Amount the subscriber has earned to date\\n  function getCurrentReward(address _subscriber) external view returns (uint) {\\n    Subscription memory sub = subscriptions[_subscriber];\\n\\n    if (sub.active) {\\n      return calculateReward(sub.startDate, block.timestamp, sub.stakedAmount);\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  /// @notice Withdraws all unlocked tokens from the pool to the owner. Only works if staking period has already ended\\n  function withdrawPool() external onlyOwner {\\n    require(block.timestamp > endDate, \\\"Staking: staking not over yet\\\");\\n\\n    erc20.transfer(owner(), availablePool());\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking/CappedRewardCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\n/// @title Calculates rewards based on an initial downward curve period, and a second constant period\\n/// @notice Calculation of the reward is based on a few rules:\\n///   * start and end date of the staking period (the earlier you enter, and\\n///     the longer you stay, the greater your overall reward)\\n///\\n///   * At each point, the the current reward is described by a downward curve\\n///     (https://www.desmos.com/calculator/dz8vk1urep)\\n///\\n///   * Computing your total reward (which is done upfront in order to lock and\\n///     guarantee your reward) means computing the integral of the curve period from\\n///     your enter date until the end\\n///     (https://www.wolframalpha.com/input/?i=integrate+%28100-x%29%5E2)\\n///\\n///   * This integral is the one being calculated in the `integralAtPoint` function\\n///\\n///   * Besides this rule, rewards are also capped by a maximum percentage\\n///     provided at contract instantiation time (a cap of 40 means your maximum\\n///     possible reward is 40% of your initial stake\\n///\\n/// @author Miguel Palhas <miguel@subvisual.co>\\ncontract CappedRewardCalculator {\\n  /// @notice start of the staking period\\n  uint public immutable startDate;\\n  /// @notice end of the staking period\\n  uint public immutable endDate;\\n  /// @notice Reward cap for curve period\\n  uint public immutable cap;\\n\\n  uint constant private year = 365 days;\\n  uint constant private day = 1 days;\\n  uint private constant mul = 1000000;\\n\\n  /// @notice constructor\\n  /// @param _start The start timestamp for staking\\n  /// @param _start The end timestamp for staking\\n  /// @param _cap The cap percentage of the reward (40 == maximum of 40% of your initial stake)\\n  constructor(\\n    uint _start,\\n    uint _end,\\n    uint _cap\\n  ) {\\n    require(block.timestamp <= _start, \\\"CappedRewardCalculator: start date must be in the future\\\");\\n    require(\\n      _start < _end,\\n      \\\"CappedRewardCalculator: end date must be after start date\\\"\\n    );\\n\\n    require(_cap > 0, \\\"CappedRewardCalculator: curve cap cannot be 0\\\");\\n\\n    startDate = _start;\\n    endDate = _end;\\n    cap = _cap;\\n  }\\n\\n  /// @notice Given a timestamp range and an amount, calculates the expected nominal return\\n  /// @param _start The start timestamp to consider\\n  /// @param _end The end timestamp to consider\\n  /// @param _amount The amount to stake\\n  /// @return The nominal amount of the reward\\n  function calculateReward(\\n    uint _start,\\n    uint _end,\\n    uint _amount\\n  ) public view returns (uint) {\\n    (uint start, uint end) = truncatePeriod(_start, _end);\\n    (uint startPercent, uint endPercent) = toPeriodPercents(start, end);\\n\\n    uint percentage = curvePercentage(startPercent, endPercent);\\n\\n    uint reward = _amount * cap * percentage / (mul * 100);\\n\\n    return reward;\\n  }\\n\\n  /// @notice Estimates the current offered APY\\n  /// @return The estimated APY (40 == 40%)\\n  function currentAPY() public view returns (uint) {\\n    uint amount = 100 ether;\\n    uint today = block.timestamp;\\n\\n    if (today < startDate) {\\n      today = startDate;\\n    }\\n\\n    uint todayReward = calculateReward(startDate, today, amount);\\n\\n    uint tomorrow = today + day;\\n    uint tomorrowReward = calculateReward(startDate, tomorrow, amount);\\n\\n    uint delta = tomorrowReward - todayReward;\\n    uint apy = delta * 365 * 100 / amount;\\n\\n    return apy;\\n  }\\n\\n  function toPeriodPercents(\\n    uint _start,\\n    uint _end\\n  ) internal view returns (uint, uint) {\\n    uint totalDuration = endDate - startDate;\\n\\n    if (totalDuration == 0) {\\n      return (0, mul);\\n    }\\n\\n    uint startPercent = (_start - startDate) * mul / totalDuration;\\n    uint endPercent = (_end - startDate) * mul / totalDuration;\\n\\n    return (startPercent, endPercent);\\n  }\\n\\n  function truncatePeriod(\\n    uint _start,\\n    uint _end\\n  ) internal view returns (uint, uint) {\\n    if (_end <= startDate || _start >= endDate) {\\n      return (startDate, startDate);\\n    }\\n\\n    uint start = _start < startDate ? startDate : _start;\\n    uint end = _end > endDate ? endDate : _end;\\n\\n    return (start, end);\\n  }\\n\\n  function curvePercentage(uint _start, uint _end) internal pure returns (uint) {\\n    int maxArea = integralAtPoint(mul) - integralAtPoint(0);\\n    int actualArea = integralAtPoint(_end) - integralAtPoint(_start);\\n\\n    uint ratio = uint(actualArea * int(mul) / maxArea);\\n\\n    return ratio;\\n  }\\n\\n\\n  function integralAtPoint(uint _x) internal pure returns (int) {\\n    int x = int(_x);\\n    int p1 = ((x - int(mul)) ** 3) / (3 * int(mul));\\n\\n    return p1;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/ClaimsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./ClaimsRegistry/Verifier.sol\\\";\\n\\n/// @title The claim verification interface expected by the Staking contract\\n/// @author Miguel Palhas <miguel@subvisual.co>\\ninterface IClaimsRegistryVerifier {\\n  /// @notice Verifies that the given `sig` corresponds to a claim about `subject`, signed by `attester`\\n  /// @param subject The subject the claim refers to\\n  /// @param attester The account that is expected to have signed the claim\\n  /// @param sig The signature\\n  /// @return Whether a claim about `subject` and signed by `attester` does exist and matches `sig`\\n  function verifyClaim(address subject, address attester, bytes calldata sig) external view returns (bool);\\n}\\n\\n/// @title A claim registry. Does not actually store data, but only signatures of claims and their subjects\\n/// @author Miguel Palhas <miguel@subvisual.co>\\ncontract ClaimsRegistry is IClaimsRegistryVerifier, Verifier {\\n  /// @notice The mapping of keys to claims\\n  mapping(bytes32 => Claim) public registry;\\n\\n  /// @notice Struct containing all public data about a claim (currently only the subject)\\n  struct Claim {\\n    address subject; // Subject the claim refers to\\n    bool revoked;    // Whether the claim is revoked or not\\n  }\\n\\n  /// @notice Emitted when a signed claim is successfuly stored\\n  event ClaimStored(\\n    bytes sig\\n  );\\n\\n  /// @notice Emitted when a previously stored claim is successfuly revoked by the attester\\n  event ClaimRevoked(\\n    bytes sig\\n  );\\n\\n  /// @notice Stores a claim about `subject`, signed by `attester`. Instead of\\n  ///   actual data, receives only `claimHash` and `sig`, and checks whether the\\n  ///   signature matches the expected key, and is signed by `attester`\\n  /// @param subject Account the claim refers to\\n  /// @param attester Account that signed the claim\\n  /// @param claimHash the claimHash that was signed along with the subject\\n  /// @param sig The given signature that must match (`subject`, `claimhash`)\\n  function setClaimWithSignature(\\n    address subject,\\n    address attester,\\n    bytes32 claimHash,\\n    bytes calldata sig\\n  ) public {\\n    bytes32 signable = computeSignableKey(subject, claimHash);\\n\\n    require(verifyWithPrefix(signable, sig, attester), \\\"ClaimsRegistry: Claim signature does not match attester\\\");\\n\\n    bytes32 key = computeKey(attester, sig);\\n\\n    registry[key] = Claim(subject, false);\\n\\n    emit ClaimStored(sig);\\n  }\\n\\n  /// @notice Checks if a claim signature is valid and stored, and returns the corresponding subject\\n  /// @param attester Account that signed the claim\\n  /// @param sig The given signature that must match keccak256([`subject`, `claimhash`])\\n  /// @return The subject of the claim, or address(0) if none was found\\n  function getClaim(\\n    address attester,\\n    bytes calldata sig\\n  ) public view returns (address) {\\n    bytes32 key = keccak256(abi.encodePacked(attester, sig));\\n\\n    if (registry[key].revoked) {\\n      return address(0);\\n    } else {\\n      return registry[key].subject;\\n    }\\n\\n  }\\n\\n  /// @notice Checks if a claim signature is valid, and corresponds to the given subject\\n  /// @param subject Account the claim refers to\\n  /// @param attester Account that signed the claim\\n  /// @param sig The given signature that must match keccak256([`subject`, `claimhash`])\\n  /// @return The subject of the claim, or address(0) if none was found\\n  function verifyClaim(\\n    address subject,\\n    address attester,\\n    bytes calldata sig\\n  ) override external view returns (bool) {\\n    return getClaim(attester, sig) == subject;\\n  }\\n\\n  /// @notice Callable by an attester, to revoke previously signed claims about a subject\\n  /// @param sig The given signature that must match keccak256([`subject`, `claimhash`])\\n  function revokeClaim(\\n    bytes calldata sig\\n  ) public {\\n    bytes32 key = computeKey(msg.sender, sig);\\n\\n    require(registry[key].subject != address(0), \\\"ClaimsRegistry: Claim not found\\\");\\n\\n    registry[key].revoked = true;\\n\\n    emit ClaimRevoked(sig);\\n  }\\n\\n  /// @notice computes the hash that must be signed by the attester before storing a claim\\n  /// @param subject Account the claim refers to\\n  /// @param claimHash the claimHash that was signed along with the subject\\n  /// @return The hash to be signed by the attester\\n  function computeSignableKey(address subject, bytes32 claimHash) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(subject, claimHash));\\n  }\\n\\n  function computeKey(address attester, bytes calldata sig) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(attester, sig));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ClaimsRegistry/Verifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\n/// @title A set of helper functions to verify signatures, to be used in the ClaimsRegistry\\n/// @author Miguel Palhas <miguel@subvisual.co>\\ncontract Verifier {\\n\\n  /// @notice Verifies that the given signature matches the provided data, and\\n  ///   was signed by the provided issuer. Assumes data was signed using the\\n  ///   Ethereum prefix to protect against unkonwingly signing transactions\\n  /// @param hash The data to verify\\n  /// @param sig The signature of the data\\n  /// @param signer The expected signer of the data\\n  /// @return `true` if `signer` and `hash` match `sig`\\n  function verifyWithPrefix(bytes32 hash, bytes calldata sig, address signer) public pure returns (bool) {\\n    return verify(addPrefix(hash), sig, signer);\\n  }\\n\\n  /// @notice Recovers the signer of the given signature and data. Assumes data\\n  ///  was signed using the Ethereum prefix to protect against unknowingly signing\\n  ///  transaction.s\\n  /// @param hash The data to verify\\n  /// @param sig The signature of the data\\n  /// @return The address recovered by checking the signature against the data\\n  function recoverWithPrefix(bytes32 hash, bytes calldata sig) public pure returns (address) {\\n    return recover(addPrefix(hash), sig);\\n  }\\n\\n  function verify(bytes32 hash, bytes calldata sig, address signer) internal pure returns (bool) {\\n    return recover(hash, sig) == signer;\\n  }\\n\\n  function recover(bytes32 hash, bytes calldata _sig) internal pure returns (address) {\\n    bytes memory sig = _sig;\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n\\n    if (sig.length != 65) {\\n      return address(0);\\n    }\\n\\n    assembly {\\n      r := mload(add(sig, 32))\\n      s := mload(add(sig, 64))\\n      v := and(mload(add(sig, 65)), 255)\\n    }\\n\\n    if (v < 27) {\\n      v += 27;\\n    }\\n\\n    if (v != 27 && v != 28) {\\n      return address(0);\\n    }\\n\\n    return ecrecover(hash, v, r, s);\\n  }\\n\\n  function addPrefix(bytes32 hash) private pure returns (bytes32) {\\n    bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n\\n    return keccak256(abi.encodePacked(prefix, hash));\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_attester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxReward\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availablePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAttester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriber\",\"type\":\"address\"}],\"name\":\"getCurrentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriber\",\"type\":\"address\"}],\"name\":\"getMaxStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriber\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IClaimsRegistryVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"claimSig\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"subscriberAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000f4d861575ecc9493420a3f5a14f85b13f0b50eb30000000000000000000000001a5fa65e50d503a29ec57cd102f2e7970a6963bb000000000000000000000000a3015543ce7da7b9708076c1171e242c36452f1000000000000000000000000000000000000000000000000000000000609bca480000000000000000000000000000000000000000000000000000000060d329480000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000043c33c19375648000000000000000000000000000000000000000000000000000000000000000000028", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}