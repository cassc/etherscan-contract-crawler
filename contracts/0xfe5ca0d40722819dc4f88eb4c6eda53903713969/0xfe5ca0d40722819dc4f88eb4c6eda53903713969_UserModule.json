{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategyVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IStrategyVault {\\n    function totalSupply() external view returns (uint256);\\n\\n    function deposit(uint256 assets_, address receiver_) external returns (uint256 shares_);\\n\\n    function withdraw(uint256 assets_, address receiver_, address owner_) external returns (uint256 shares_);\\n\\n    function mint(uint256 shares_, address receiver_) external returns (uint256 assets_);\\n\\n    function redeem(uint256 shares_, address receiver_, address owner_) external returns (uint256 assetsAfterFee_);\\n\\n    function getWithdrawFee(uint256 _amount) external view returns (uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/main/lendingLogic/base/ILendingLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ILendingLogic\\n * @author Cian\\n * @notice Define the interface for the lending logic.\\n */\\ninterface ILendingLogic {\\n    enum PROTOCOL {\\n        PROTOCOL_AAVEV2,\\n        PROTOCOL_AAVEV3,\\n        PROTOCOL_COMPOUNDV3,\\n        PROTOCOL_MORPHO_AAVEV2\\n    }\\n\\n    function deposit(uint8 _protocolId, address asset, uint256 amount) external;\\n\\n    function withdraw(uint8 _protocolId, address asset, uint256 amount) external;\\n\\n    function borrow(uint8 _protocolId, address asset, uint256 amount) external;\\n\\n    function repay(uint8 _protocolId, address asset, uint256 amount) external;\\n\\n    function enterProtocol(uint8 _protocolId) external;\\n\\n    function exitProtocol(uint8 _protocolId) external;\\n\\n    function getAvailableBorrowsETH(uint8 _protocolId, address _account) external view returns (uint256);\\n\\n    function getAvailableWithdrawsStETH(uint8 _protocolId, address _account) external view returns (uint256);\\n\\n    function getProtocolCollateralRatio(uint8 _protocolId, address _account) external view returns (uint256 ratio);\\n\\n    function getProtocolLeverageAmount(\\n        uint8 _protocolId,\\n        address _account,\\n        bool _isDepositOrWithdraw,\\n        uint256 _depositOrWithdraw,\\n        uint256 _safeRatio\\n    ) external view returns (bool isLeverage, uint256 amount);\\n\\n    function getProtocolAccountData(uint8 _protocolId, address _account)\\n        external\\n        view\\n        returns (uint256 stEthAmount, uint256 debtEthAmount);\\n\\n    function getNetAssetsInfo(address _account)\\n        external\\n        view\\n        returns (uint256 totalAssets, uint256 totalDebt, uint256 netAssets, uint256 aggregatedRatio);\\n}\\n\"\r\n    },\r\n    \"contracts/main/strategyBase/basic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./variables.sol\\\";\\nimport \\\"../lendingLogic/base/ILendingLogic.sol\\\";\\nimport \\\"../../interfaces/IStrategyVault.sol\\\";\\n\\n/**\\n * @title Basic contract\\n * @author Cian\\n * @notice This contract encompasses the basic logic of the strategy pool.\\n * @dev In order to increase the code capacity of the contract, this contract\\n * will be inherited by various modules of the strategy pool. Each module\\n * contract will be deployed separately and share the same global variables.\\n */\\ncontract Basic is Variables, OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    // This is used to compensate balancers for the ETH they consume while updating prices.\\n    uint256 public constant UPDATE_FEE_BASE = 70500;\\n\\n    /**\\n     * @dev Ensure that this method is only called by the Vault contract.\\n     */\\n    modifier onlyVault() {\\n        require(vault == msg.sender, \\\"Caller is not the vault!\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Ensure that this method is only called by authorized portfolio managers.\\n     */\\n    modifier onlyAuth() {\\n        require(rebalancer[msg.sender], \\\"!Auth\\\");\\n        _;\\n    }\\n\\n    event UpdateExchangePrice(uint256 newExchangePrice, uint256 newRevenue);\\n\\n    /**\\n     * @dev Execute the operation to allow entry into the lending protocol.\\n     * This method will delegatecall to the LendingLogic contract.\\n     * @param _protocolId The ID of the lending protocol to be approved.\\n     */\\n    function executeEnterProtocol(uint8 _protocolId) internal {\\n        require(!availableProtocol[_protocolId], \\\"Already available!\\\");\\n        bytes memory callBytes_ = abi.encode(_protocolId);\\n        executeLendingLogic(ILendingLogic.enterProtocol.selector, callBytes_);\\n        availableProtocol[_protocolId] = true;\\n    }\\n\\n    /**\\n     * @dev Execute the operation to disable the lending protocol.\\n     * This method will delegatecall to the LendingLogic contract.\\n     * @param _protocolId The ID of the lending protocol to be disabled.\\n     */\\n    function executeExitProtocol(uint8 _protocolId) internal {\\n        require(availableProtocol[_protocolId], \\\"Already unavailable!\\\");\\n        bytes memory callBytes_ = abi.encode(_protocolId);\\n        executeLendingLogic(ILendingLogic.exitProtocol.selector, callBytes_);\\n        availableProtocol[_protocolId] = false;\\n    }\\n\\n    /**\\n     * @dev Execute the deposit operation in the lending protocol.\\n     * This method will delegatecall to the LendingLogic contract.\\n     * @param _protocolId The index of the lending protocol within this contract.\\n     * @param _asset The type of asset being deposited in this transaction.\\n     * @param _amount The amount of asset being deposited in this transaction.\\n     */\\n    function executeDeposit(uint8 _protocolId, address _asset, uint256 _amount) internal {\\n        require(availableProtocol[_protocolId], \\\"Protocol unavailable!\\\");\\n        if (_amount == 0) return;\\n        bytes memory callBytes_ = abi.encode(_protocolId, _asset, _amount);\\n        executeLendingLogic(ILendingLogic.deposit.selector, callBytes_);\\n    }\\n\\n    /**\\n     * @dev Execute the withdraw operation in the lending protocol.\\n     * This method will delegatecall to the LendingLogic contract.\\n     * @param _protocolId The index of the lending protocol within this contract.\\n     * @param _asset The type of asset being withdrawn in this transaction.\\n     * @param _amount The amount of asset being withdrawn in this transaction.\\n     */\\n    function executeWithdraw(uint8 _protocolId, address _asset, uint256 _amount) internal {\\n        require(availableProtocol[_protocolId], \\\"Protocol unavailable!\\\");\\n        if (_amount == 0) return;\\n        bytes memory callBytes_ = abi.encode(_protocolId, _asset, _amount);\\n        executeLendingLogic(ILendingLogic.withdraw.selector, callBytes_);\\n    }\\n\\n    /**\\n     * @dev Execute the borrow operation in the lending protocol.\\n     * This method will delegatecall to the LendingLogic contract.\\n     * @param _protocolId The index of the lending protocol within this contract.\\n     * @param _asset The type of asset being borrowed in this transaction.\\n     * @param _amount The amount of asset being borrowed in this transaction.\\n     */\\n    function executeBorrow(uint8 _protocolId, address _asset, uint256 _amount) internal {\\n        require(availableProtocol[_protocolId], \\\"Protocol unavailable!\\\");\\n        if (_amount == 0) return;\\n        bytes memory callBytes_ = abi.encode(_protocolId, _asset, _amount);\\n        executeLendingLogic(ILendingLogic.borrow.selector, callBytes_);\\n    }\\n\\n    /**\\n     * @dev Execute the repay operation in the lending protocol.\\n     * This method will delegatecall to the LendingLogic contract.\\n     * @param _protocolId The index of the lending protocol within this contract.\\n     * @param _asset The type of asset being repaid in this transaction.\\n     * @param _amount The amount of asset being repaid in this transaction.\\n     */\\n    function executeRepay(uint8 _protocolId, address _asset, uint256 _amount) internal {\\n        require(availableProtocol[_protocolId], \\\"Protocol unavailable!\\\");\\n        if (_amount == 0) return;\\n        bytes memory callBytes_ = abi.encode(_protocolId, _asset, _amount);\\n        executeLendingLogic(ILendingLogic.repay.selector, callBytes_);\\n    }\\n\\n    /**\\n     * @dev This method delegatecalls the method specified by the function signature to the lending logic.\\n     * @param _selector The function signature of the LendingLogic contract.\\n     * @param _callBytes The function parameter bytes of the LendingLogic contract.\\n     */\\n    function executeLendingLogic(bytes4 _selector, bytes memory _callBytes) internal {\\n        bytes memory callBytes = abi.encodePacked(_selector, _callBytes);\\n        (bool success, bytes memory returnData) = lendingLogic.delegatecall(callBytes);\\n        require(success, string(returnData));\\n    }\\n\\n    /**\\n     * @dev The reallocation operation will consume a significant amount of ETH gas, which will\\n     * be paid by the entire position using STETH.\\n     */\\n    function collectGasCompensation(uint256 _gasBefore, uint256 _overestimation) internal {\\n        uint256 gasUsed_ = (_gasBefore - gasleft() + _overestimation) * tx.gasprice;\\n        // IERC20(STETH_ADDR).safeTransfer(feeReceiver, gasUsed_);\\n    }\\n\\n    /**\\n     * @notice To prevent the contract from being attacked, the exchange rate of the contract\\n     * is intentionally made non-modifiable by unauthorized addresses. Users may incur some\\n     * price losses, but under normal circumstances, these losses are negligible and can be\\n     * covered by profits in a very short period of time.\\n     * @dev Update the exchange rate between the share token and the core asset stETH.\\n     * If the real price has increased, record the profit portion proportionally.\\n     * @return newExchangePrice The new exercise price.\\n     * @return newRevenue The new realized profit.\\n     */\\n    function updateExchangePrice() public onlyAuth returns (uint256 newExchangePrice, uint256 newRevenue) {\\n        uint256 gasBefore_ = gasleft();\\n        uint256 totalSupply_ = IStrategyVault(vault).totalSupply();\\n        if (totalSupply_ == 0) {\\n            return (exchangePrice, revenue);\\n        }\\n        uint256 currentNetAssets_ = getNetAssets();\\n        newExchangePrice = currentNetAssets_ * 1e18 / totalSupply_;\\n        if (newExchangePrice > revenueExchangePrice) {\\n            if (revenueExchangePrice == 0) {\\n                revenueExchangePrice = newExchangePrice;\\n                exchangePrice = newExchangePrice;\\n                return (exchangePrice, revenue);\\n            }\\n            uint256 newProfit_ = currentNetAssets_ - ((exchangePrice * totalSupply_) / 1e18);\\n            newRevenue = (newProfit_ * revenueRate) / 1e4;\\n            revenue += newRevenue;\\n            exchangePrice = ((currentNetAssets_ - newRevenue) * 1e18) / totalSupply_;\\n            revenueExchangePrice = exchangePrice;\\n        } else {\\n            exchangePrice = newExchangePrice;\\n        }\\n\\n        emit UpdateExchangePrice(newExchangePrice, newRevenue);\\n        collectGasCompensation(gasBefore_, UPDATE_FEE_BASE);\\n    }\\n\\n    /**\\n     * @dev Retrieve the maximum amount of ETH that this strategy pool address can still\\n     * borrow in the lending protocol.\\n     * @param _protocolId The index of the lending protocol within this contract.\\n     * @return availableBorrowsETH The maximum amount of ETH that can still be borrowed.\\n     */\\n    function getAvailableBorrowsETH(uint8 _protocolId) public view returns (uint256) {\\n        return ILendingLogic(lendingLogic).getAvailableBorrowsETH(_protocolId, address(this));\\n    }\\n\\n    /**\\n     * @dev Retrieve the maximum amount of stETH that this strategy pool address can still\\n     * withdraw in the lending protocol.\\n     * @param _protocolId The index of the lending protocol within this contract.\\n     * @return maxWithdrawsStETH The maximum amount of stETH that can still be withdrawn.\\n     */\\n    function getAvailableWithdrawsStETH(uint8 _protocolId) public view returns (uint256) {\\n        return ILendingLogic(lendingLogic).getAvailableWithdrawsStETH(_protocolId, address(this));\\n    }\\n\\n    /**\\n     * @dev Retrieve the collateral and debt quantities of this strategy pool in the lending protocol.\\n     * @param _protocolId The index of the lending protocol within this contract.\\n     * @return stEthAmount The amount of stETH collateral.\\n     * @return debtEthAmount The amount of ETH debt.\\n     */\\n    function getProtocolAccountData(uint8 _protocolId)\\n        public\\n        view\\n        returns (uint256 stEthAmount, uint256 debtEthAmount)\\n    {\\n        return ILendingLogic(lendingLogic).getProtocolAccountData(_protocolId, address(this));\\n    }\\n\\n    /**\\n     * @dev Retrieve the amount of net assets in the protocol.\\n     * @param _protocolId The index of the lending protocol within this contract.\\n     * @return net The amount of net assets.\\n     */\\n    function getProtocolNetAssets(uint8 _protocolId) public view returns (uint256 net) {\\n        (uint256 stEthAmount, uint256 debtEthAmount) = getProtocolAccountData(_protocolId);\\n        net = stEthAmount - debtEthAmount;\\n    }\\n\\n    /**\\n     * @dev Retrieve the ratio of debt to collateral, considering stETH and ETH as assets with a 1:1 ratio.\\n     * @param _protocolId The index of the lending protocol within this contract.\\n     * @return ratio The debt collateralization ratio, where 1e18 represents 100%.\\n     */\\n    function getProtocolRatio(uint8 _protocolId) public view returns (uint256 ratio) {\\n        (uint256 stEthAmount, uint256 debtEthAmount) = getProtocolAccountData(_protocolId);\\n        ratio = debtEthAmount * 1e18 / stEthAmount;\\n    }\\n\\n    /**\\n     * @dev Retrieve the debt collateralization ratio of this strategy pool in the lending protocol,\\n     * using the oracle associated with that lending protocol.\\n     * @param _protocolId The index of the lending protocol within this contract.\\n     * @return collateralRatio The debt collateralization ratio, where 1e18 represents 100%.\\n     * @return isOK This bool indicates whether the safe collateralization ratio has been exceeded.\\n     * If true, it indicates the need for a deleveraging operation.\\n     */\\n    function getProtocolCollateralRatio(uint8 _protocolId) public view returns (uint256 collateralRatio, bool isOK) {\\n        collateralRatio = ILendingLogic(lendingLogic).getProtocolCollateralRatio(_protocolId, address(this));\\n        isOK = safeProtocolRatio[_protocolId] + PERMISSIBLE_LIMIT > collateralRatio ? true : false;\\n    }\\n\\n    /**\\n     * @dev Retrieve the amount of WETH required for the flash loan in this operation.\\n     * When increasing leverage, it is also possible to deposit stETH into the lending\\n     * protocol simultaneously. When decreasing leverage, it is also possible to withdraw\\n     * stETH from the lending protocol simultaneously.\\n     * @param _protocolId The index of the lending protocol within this contract.\\n     * @param _isDepositOrWithdraw Whether an additional deposit of stETH is required.\\n     * @param _depositOrWithdraw The amount of stETH to be deposited or withdrawn.\\n     * @return isLeverage Returning \\\"true\\\" indicates the need to increase leverage, while returning\\n     * \\\"false\\\" indicates the need to decrease leverage.\\n     * @return amount The amount of flash loan required for this transaction.\\n     */\\n    function getProtocolLeverageAmount(uint8 _protocolId, bool _isDepositOrWithdraw, uint256 _depositOrWithdraw)\\n        public\\n        view\\n        returns (bool isLeverage, uint256 amount)\\n    {\\n        return ILendingLogic(lendingLogic).getProtocolLeverageAmount(\\n            _protocolId, address(this), _isDepositOrWithdraw, _depositOrWithdraw, safeProtocolRatio[_protocolId]\\n        );\\n    }\\n\\n    /**\\n     * @dev Retrieve the amount of assets in all lending protocols involved in this contract for the strategy pool.\\n     * @return totalAssets The total amount of collateral.\\n     * @return totalDebt The total amount of debt.\\n     * @return netAssets The total amount of net assets.\\n     * @return aggregatedRatio The aggregate collateral-to-debt ratio.\\n     */\\n    function getNetAssetsInfo() public view returns (uint256, uint256, uint256, uint256) {\\n        return ILendingLogic(lendingLogic).getNetAssetsInfo(address(this));\\n    }\\n\\n    /**\\n     * @dev Retrieve the amount of assets in all lending protocols involved in this contract for the strategy pool.\\n     * @return netAssets The total amount of net assets.\\n     */\\n    function getNetAssets() public view returns (uint256) {\\n        (,, uint256 currentNetAssets_,) = getNetAssetsInfo();\\n        return currentNetAssets_ + IERC20(STETH_ADDR).balanceOf(address(this)) - revenue;\\n    }\\n\\n    /**\\n     * @dev Retrieve the current real exchange rate and the new profit amount.\\n     * @return newExchangePrice The current real exchange rate.\\n     * @return newRevenue If there is a profit, it represents the amount of profit; otherwise, it is 0.\\n     */\\n    function getCurrentExchangePrice() public view returns (uint256 newExchangePrice, uint256 newRevenue) {\\n        uint256 totalSupply_ = IStrategyVault(vault).totalSupply();\\n        if (totalSupply_ == 0) {\\n            return (exchangePrice, revenue);\\n        }\\n        uint256 currentNetAssets_ = getNetAssets();\\n        newExchangePrice = (currentNetAssets_ * 1e18) / totalSupply_;\\n        if (newExchangePrice > revenueExchangePrice) {\\n            uint256 newProfit_ = currentNetAssets_ - ((exchangePrice * totalSupply_) / 1e18);\\n            newRevenue = (newProfit_ * revenueRate) / 1e4;\\n        }\\n    }\\n\\n    /**\\n     * @dev Used to check the overall health status of the strategy pool after\\n     * an operation to prevent the strategy pool from being in a risky position.\\n     */\\n    function checkAggregatedRatio() internal view {\\n        (,,, uint256 currentAggregatedRatio_) = getNetAssetsInfo();\\n        require(currentAggregatedRatio_ <= safeAggregatedRatio, \\\"AggregatedRatio out of range\\\");\\n    }\\n\\n    /**\\n     * @dev Used to check the health status of the strategy pool in a specific lending protocol\\n     * after an operation to prevent the strategy pool from being in a risky position.\\n     */\\n    function checkProtocolRatio(uint8 _protocolId) internal view {\\n        (, bool isOK_) = getProtocolCollateralRatio(_protocolId);\\n        require(isOK_, \\\"Ratio out of range\\\");\\n    }\\n\\n    /**\\n     * @dev Retrieve the version number of the strategy pool.\\n     */\\n    function getVersion() public pure returns (string memory) {\\n        return \\\"v0.0.2\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/main/strategyBase/variables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ncontract Constants {\\n    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public constant STETH_ADDR = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n    address public constant WSTETH_ADDR = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\n    // Permissible Deviation of Ratio, 0.2%. When the leveraged position is just established,\\n    // the ratio will be very close to the threshold value, and the value of stETH does\\n    // not increase with block number. However, some protocols such as Aave increase the\\n    // debt with block number. If the target ratio is 60%, then assuming 60.2% is also safe.\\n    uint256 public constant PERMISSIBLE_LIMIT = 2e15;\\n    // The Minimum Safe Aggregation Ratio cannot be lower than 70%.\\n    uint256 public constant MIN_SAFE_AGGREGATED_RATIO = 70e16;\\n    // The Maximum Safe Aggregation Ratio cannot be higher than 95%.\\n    uint256 public constant MAX_SAFE_AGGREGATED_RATIO = 95e16;\\n}\\n\\ncontract Variables is Constants {\\n    // Specify the operational logic for the lending protocol,\\n    // where the corresponding method will be delegatecalled when performing operations.\\n    address public lendingLogic;\\n    // The intermediary contract for executing flash loan operations.\\n    address public flashloanHelper;\\n    // The address of the flag used to prevent flash loan re-entry attacks.\\n    address public executor;\\n    // The token contract used to record the proportional equity of users.\\n    address public vault;\\n    // The address of the recipient for performance fees.\\n    address public feeReceiver;\\n    // The exchange rate used during user deposit and withdrawal operations.\\n    uint256 public exchangePrice;\\n    // The exchange rate used when calculating performance fees.\\n    // Performance fees will be recorded when the real exchange rate exceeds this rate.\\n    uint256 public revenueExchangePrice;\\n    // The amount of performance fees recorded after profits are generated in the strategy pool,\\n    // collected in the core asset stETH.\\n    uint256 public revenue;\\n    // The percentage of performance fees collected, where 1000 corresponds to 10%.\\n    uint256 public revenueRate;\\n    // The safe debt collateralization ratio for the entire strategy pool.\\n    uint256 public safeAggregatedRatio;\\n    // Map of safety line in the lending protocol. (protocolId => safeProtocolRatio)\\n    mapping(uint8 => uint256) public safeProtocolRatio;\\n    // Map of availability of the lending protocol. (protocolId => isAvailableProtocol)\\n    mapping(uint8 => bool) public availableProtocol;\\n    // Map of legitimacy of the rebalancer. (address => isRebalancer)\\n    mapping(address => bool) public rebalancer;\\n}\\n\"\r\n    },\r\n    \"contracts/main/strategyModules/UserModule/events.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../strategyBase/basic.sol\\\";\\n\\ncontract Events is Basic {\\n    event Deposit(uint256 amount);\\n    event Withdraw(uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/main/strategyModules/UserModule/main.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"./events.sol\\\";\\n\\n/**\\n * @title UserModule contract\\n * @author Cian\\n * @dev This module controls the flow of funds between the strategy contract\\n * and the vault contract when users deposit or withdraw funds.\\n */\\ncontract UserModule is Events {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev The asset deposit operation is called by the Vault contract on behalf of the user.\\n     * @param _amount The amount of stETH deposited by the user.\\n     * @param operateExchangePrice_ The exchange rate used during the deposit operation.\\n     */\\n    function deposit(uint256 _amount) external onlyVault returns (uint256 operateExchangePrice_) {\\n        require(_amount > 0, \\\"deposit: Invalid amount.\\\");\\n        operateExchangePrice_ = exchangePrice;\\n        IERC20(STETH_ADDR).safeTransferFrom(vault, address(this), _amount);\\n\\n        emit Deposit(_amount);\\n    }\\n\\n    /**\\n     * @dev The asset withdraw operation is called by the Vault contract on behalf of the user.\\n     * @param _amount The amount of stETH the user wants to withdraw.\\n     * @param withdrawAmount_ The actual amount of stETH withdrawn by the user.\\n     */\\n    function withdraw(uint256 _amount) external onlyVault returns (uint256 withdrawAmount_) {\\n        require(_amount > 0, \\\"withdraw: Invalid amount.\\\");\\n        IERC20(STETH_ADDR).safeTransfer(vault, _amount);\\n        withdrawAmount_ = _amount;\\n\\n        emit Withdraw(_amount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExchangePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRevenue\",\"type\":\"uint256\"}],\"name\":\"UpdateExchangePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SAFE_AGGREGATED_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_SAFE_AGGREGATED_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMISSIBLE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_FEE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WSTETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"availableProtocol\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"operateExchangePrice_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashloanHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_protocolId\",\"type\":\"uint8\"}],\"name\":\"getAvailableBorrowsETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_protocolId\",\"type\":\"uint8\"}],\"name\":\"getAvailableWithdrawsStETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentExchangePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newExchangePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRevenue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNetAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNetAssetsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_protocolId\",\"type\":\"uint8\"}],\"name\":\"getProtocolAccountData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stEthAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtEthAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_protocolId\",\"type\":\"uint8\"}],\"name\":\"getProtocolCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOK\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_protocolId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isDepositOrWithdraw\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_depositOrWithdraw\",\"type\":\"uint256\"}],\"name\":\"getProtocolLeverageAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isLeverage\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_protocolId\",\"type\":\"uint8\"}],\"name\":\"getProtocolNetAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"net\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_protocolId\",\"type\":\"uint8\"}],\"name\":\"getProtocolRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueExchangePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeAggregatedRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"safeProtocolRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateExchangePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newExchangePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRevenue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UserModule", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}