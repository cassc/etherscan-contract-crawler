{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IMintableBurnableERC20.sol\\\";\\n\\ninterface IFeeManager {\\n    function protocolFee(address, uint) external view returns (uint);\\n    function redemptionFee(address, uint) external view returns (uint);\\n    function protocolRedemptionFeeShare() external view returns (uint);\\n    function protocolFeeTo() external view returns (address);\\n    function redemptionFeeTo() external view returns (address);\\n\\n    function beforeRedeem(uint) external;\\n    function afterRedeem(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableBurnableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableBurnableERC20 is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n    function burn(uint256 _amount) external;\\n    function transferOwner(address _owner) external;\\n    function setMinter(address _minter, bool _status) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IVaultFactory.sol\\\";\\n\\ninterface IVault {\\n    function initialize(address) external;\\n\\n    function factory() external view returns (IVaultFactory);\\n    function owner() external view returns (address);\\n    function deposited() external view returns (uint);\\n    function minted() external view returns (uint);\\n    function availableBalance() external view returns (uint);\\n    function pendingYield() external view returns (uint);\\n    function mintRatio() external view returns (uint);\\n    \\n    function deposit(uint) external returns (uint);\\n    function withdraw(uint) external;\\n    function mint(uint) external;\\n    function burn(uint) external;\\n    function redeem(uint) external;\\n    function claim() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./IMintableBurnableERC20.sol\\\";\\n\\ninterface IVaultFactory {\\n    function collateral() external view returns (IERC20);\\n    function token() external view returns (IMintableBurnableERC20);\\n    function feeManager() external view returns (address);\\n\\n    function createVault(address) external returns (address);\\n    function getVault(address) external view returns (address);\\n    function allVaults(uint) external view returns (address);\\n    function isVault(address) external view returns (bool);\\n    function isVaultManager(address) external view returns (bool);\\n    function vaultsLength() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IFeeManager.sol\\\";\\n\\ncontract Vault is IVault {\\n\\n    /* ========== STATES ========== */\\n\\n    IVaultFactory public immutable override factory;\\n    address public override owner;\\n    uint public override deposited;\\n    uint public override minted;\\n    uint public constant PRECISION = 1e18;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor() {\\n        factory = IVaultFactory(msg.sender);\\n    }\\n\\n    // Called once by the factory on deployment\\n    function initialize(address _owner) external override {\\n        require(msg.sender == address(factory), '!factory');\\n        owner = _owner;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function availableBalance() public view override returns (uint) {\\n        // In extreme unlike scenario of multiple large negative rebases, vault balance can become < than deposited.\\n        // In this case vault owner need to transfer in stETH and make up for the diff before withdrawing.\\n        // This ensures collateral > debt at all times.\\n        return factory.collateral().balanceOf(address(this)) < deposited ? 0 : deposited - minted;\\n    }\\n\\n    function pendingYield() public view override returns (uint) {\\n        uint balance = factory.collateral().balanceOf(address(this));\\n        return balance <= deposited ? 0 : balance - deposited;\\n    }\\n\\n    function mintRatio() external view override returns (uint) {\\n        return deposited == 0 ? 0 : minted * PRECISION / deposited;\\n    }\\n\\n    /* ========== USER FUNCTIONS ========== */\\n\\n    // Deposit collateral from msg.sender to vault\\n    function deposit(uint _amount) external override onlyManagerOrOwner() returns (uint) {\\n        _claim();\\n        // stETH have known rounding error on transfers by 1-2 wei\\n        uint before = factory.collateral().balanceOf(address(this));\\n        factory.collateral().transferFrom(msg.sender, address(this), _amount);\\n        uint actualAmount = factory.collateral().balanceOf(address(this)) - before;\\n        deposited += actualAmount;\\n        emit Deposit(actualAmount);\\n        return actualAmount;\\n    }\\n\\n    // Withdraw available collateral to owner\\n    function withdraw(uint _amount) external override onlyManagerOrOwner() {\\n        _claim();\\n        _withdraw(_amount, owner);\\n        emit Withdraw(_amount);\\n    }\\n\\n    // Mint token to vault owner using available collateral\\n    function mint(uint _amount) external override onlyManagerOrOwner() {\\n        require(availableBalance() >= _amount, \\\"!available\\\");\\n        _claim();\\n        factory.token().mint(owner, _amount);\\n        minted += _amount;\\n        emit Mint(_amount);\\n    }\\n\\n    // Burn token from msg.sender for vault\\n    function burn(uint _amount) external override onlyManagerOrOwner() {\\n        _claim();\\n        _burn(_amount);\\n        emit Burn(_amount);\\n    }\\n\\n    // Claim pending yield into deposited, pay protocol fee\\n    function claim() external override {\\n        _claim();\\n    }\\n\\n    // Redeem collateral from vault by burning token from msg.sender and paying redemption fee\\n    function redeem(uint _amount) external {\\n        IFeeManager feeManager = IFeeManager(factory.feeManager());\\n        feeManager.beforeRedeem(_amount);\\n        uint fee = feeManager.redemptionFee(address(this), _amount);\\n        _claim();\\n        _burn(_amount);\\n        _withdraw(_amount - fee, msg.sender);\\n        uint protocolShare = fee * feeManager.protocolRedemptionFeeShare() / PRECISION;\\n        _withdraw(protocolShare, feeManager.redemptionFeeTo());\\n        feeManager.afterRedeem(_amount);\\n        emit Redeem(msg.sender, _amount, protocolShare, fee - protocolShare);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _claim() internal {\\n        uint yield = pendingYield();\\n        if (yield == 0) {\\n            return;\\n        }\\n        IFeeManager feeManager = IFeeManager(factory.feeManager());\\n        uint fee = feeManager.protocolFee(address(this), yield);\\n        factory.collateral().transfer(feeManager.protocolFeeTo(), fee);\\n        deposited += yield - fee;\\n        emit Claim(yield - fee, fee);\\n    }\\n\\n    function _burn(uint _amount) internal {\\n        require(minted >= _amount, \\\"!minted\\\");\\n        factory.token().transferFrom(msg.sender, address(this), _amount);\\n        factory.token().burn(_amount);\\n        minted -= _amount;\\n    }\\n\\n    function _withdraw(uint _amount, address _recipient) internal {\\n        require(availableBalance() >= _amount, \\\"!available\\\");\\n        deposited -= _amount;\\n        factory.collateral().transfer(_recipient, _amount);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyManagerOrOwner() {\\n        require(msg.sender == owner || factory.isVaultManager(msg.sender), \\\"!allowed\\\");\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Deposit(uint amount);\\n    event Withdraw(uint amount);\\n    event Mint(uint amount);\\n    event Burn(uint amount);\\n    event Claim(uint yieldAfterProtocolFee, uint protocolFee);\\n    event Redeem(address indexed redeemer, uint amount, uint protocolFee, uint ownerFee);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldAfterProtocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerFee\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}