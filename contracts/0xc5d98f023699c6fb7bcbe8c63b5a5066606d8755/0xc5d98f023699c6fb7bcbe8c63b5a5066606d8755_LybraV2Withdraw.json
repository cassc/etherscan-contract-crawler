{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"LybraV2Withdraw.sol\": {\r\n      \"content\": \"// commit a240b5339a90f4c765f04f2704512c7558bb45aa\\n// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.19;\\n\\ninterface ILybraVault {\\n    function burn(address onBehalfOf, uint256 amount) external;\\n\\n    function withdraw(address onBehalfOf, uint256 amount) external;\\n\\n    function getBorrowedOf(address user) external view returns (uint256);\\n\\n    function depositedAsset(address user) external view returns (uint256);\\n}\\n\\ninterface IERC20 {\\n    function approve(address to, uint256 amount) external;\\n}\\n\\ncontract LybraV2Withdraw {\\n    bytes32 public constant NAME = \\\"LybraV2Withdraw\\\";\\n    uint256 public constant VERSION = 1;\\n\\n    ILybraVault public constant stETHvault = ILybraVault(0xa980d4c0C2E48d305b582AA439a3575e3de06f0E);\\n    ILybraVault public constant rETHvault = ILybraVault(0x090B2787D6798000710a8e821EC6111d254bb958);\\n    ILybraVault public constant wstETHvault = ILybraVault(0x5e28B5858DA2C6fb4E449D69EEb5B82e271c45Ce);\\n    ILybraVault public constant wbETHvault = ILybraVault(0xB72dA4A9866B0993b9a7d842E5060716F74BF262);\\n\\n    IERC20 public constant peUSD = IERC20(0xD585aaafA2B58b1CD75092B51ade9Fa4Ce52F247);\\n\\n    function withdraw(address vault) external {\\n        require(vault == address(stETHvault) || vault == address(rETHvault) || vault == address(wstETHvault) || vault == address(wbETHvault), \\\"LybraV2Withdraw: vault not supported\\\");\\n        if (vault == address(stETHvault)) {\\n            handleEUSDRepayAndWithdraw();\\n        } else {\\n            handlePEUSDRepayAndWithdraw(vault);\\n        }\\n    }\\n\\n    function handlePEUSDRepayAndWithdraw(address vault) internal {\\n        ILybraVault actualVault = ILybraVault(vault);\\n        uint256 peUSD_amount;\\n        uint256 collateral;\\n        peUSD.approve(address(actualVault), 2 ** 256 - 1);\\n        (peUSD_amount, collateral) = getUserBorrowAndCollateral(actualVault);\\n        burnAndRepayVault(actualVault, peUSD_amount, collateral);\\n        peUSD.approve(address(actualVault), 0);\\n    }\\n\\n    function handleEUSDRepayAndWithdraw() internal {\\n        (uint256 eUSD_amount, uint256 collateral_amount) = getUserBorrowAndCollateral(stETHvault);\\n        burnAndRepayVault(stETHvault, eUSD_amount, collateral_amount);\\n    }\\n\\n    function getUserBorrowAndCollateral(\\n        ILybraVault vault\\n    ) internal view returns (uint256 borrowed, uint256 collateral) {\\n        borrowed = vault.getBorrowedOf(address(this));\\n\\n        collateral = vault.depositedAsset(address(this));\\n    }\\n\\n    function burnAndRepayVault(ILybraVault vault, uint256 borrowed, uint256 collateral) internal {\\n        if (borrowed > 0) {\\n            vault.burn(address(this), borrowed);\\n        }\\n        if (collateral > 1) {\\n            vault.withdraw(address(this), collateral - 1);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"LybraV2Withdraw.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rETHvault\",\"outputs\":[{\"internalType\":\"contract ILybraVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stETHvault\",\"outputs\":[{\"internalType\":\"contract ILybraVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbETHvault\",\"outputs\":[{\"internalType\":\"contract ILybraVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wstETHvault\",\"outputs\":[{\"internalType\":\"contract ILybraVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LybraV2Withdraw", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}