{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/wallet/v2/AccountFactoryProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.12;\\n\\nimport {AccountFactoryStorageBase} from \\\"./AccountFactoryStorage.sol\\\";\\n\\ncontract AccountFactoryProxy is AccountFactoryStorageBase {\\n    \\n    event ImplementationSet(address indexed oldImpl, address indexed newImpl);\\n\\n    constructor(address impl, address _owner, address walletTemplate) {\\n        implementation = impl;\\n        owner = _owner;\\n\\n        (bool success, bytes memory returnData) = implementation.delegatecall(\\n            abi.encodeWithSignature(\\\"initialize(address)\\\", \\n            walletTemplate\\n        ));\\n        require(success, string(returnData));\\n    }\\n\\n    function setImplementation(address impl) external onlyOwner {\\n        require(impl != address(0), \\\"implementation is address 0\\\");\\n        address oldImpl = implementation;\\n        implementation = impl;\\n        emit ImplementationSet(oldImpl, impl);\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"do not transfer to me\\\");\\n    }\\n\\n    /// @dev Fallback function forwards all transactions and returns all received return data.\\n    fallback() external payable {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let _singleton := and(\\n                sload(0),\\n                0xffffffffffffffffffffffffffffffffffffffff\\n            )\\n            calldatacopy(0, 0, calldatasize())\\n            let success := delegatecall(\\n                gas(),\\n                _singleton,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n            if eq(success, 0) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/wallet/v2/AccountFactoryStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.12;\\n\\ncontract AccountFactoryStorageBase {\\n    address public implementation; // keep it the 1st slot\\n    address public owner;     // keep it the 2nd slot\\n    uint8   public initialized; // for initialize method.\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    \\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"OnlyOwner allowed\\\");\\n        _;\\n    }\\n    \\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ncontract AccountFactoryStorage is AccountFactoryStorageBase {\\n    // SmartAccount template => bool, save the \\n    mapping(address => bool) public safeSingleton;\\n    // wallet address => bool,  save accounts created by this Factory.\\n    // mapping(address => bool) public walletWhiteList;\\n    \\n\\n    // NOTICE: add new storage variables below\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletTemplate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldImpl\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"ImplementationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AccountFactoryProxy", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000001bbfe892ddb1e1ded5e6ad98a8b267fa43682bd000000000000000000000000e24bfa481cee75e4fd64e14915e6d104f8696159000000000000000000000000ac78f1101883a68babcfbaccccaadc7d55e657ba", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}