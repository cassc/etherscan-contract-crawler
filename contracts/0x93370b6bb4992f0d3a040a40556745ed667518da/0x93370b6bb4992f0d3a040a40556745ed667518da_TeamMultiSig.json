{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity = 0.8.19;\r\n\r\n/* MULTISIG WALLET CONTRACT\r\n   - Max number of owners is 5. Then 4 confirmations are required to confirm a transaction.\r\n   - Min number of owners is 4. Then 3 confirmations are required to confirm a transaction.\r\n*/\r\ncontract TeamMultiSig {\r\n    event SubmitTransaction(\r\n        address indexed owner,\r\n        uint256 indexed txIndex,\r\n        address indexed to,\r\n        bytes data\r\n    );\r\n    event OwnerAdded(address indexed owner);\r\n    event OwnerRemoved(address indexed owner);\r\n    event ConfirmTransaction(address indexed owner, uint256 indexed txIndex);\r\n    event RejectTransaction(address indexed owner, uint256 indexed txIndex);\r\n    event ExecuteTransaction(address indexed owner, uint256 indexed txIndex);\r\n\r\n    uint8 public numConfirmationsRequired = 4; // 4 initially, can be modified to 3\r\n    uint256 public constant NUM_REJECTIONS_REQUIRED = 2;\r\n\r\n    struct Transaction {\r\n        address to;\r\n        address initiatorOwner;\r\n        bytes data;\r\n        bool executed;\r\n        bool rejected;\r\n        uint8 numConfirmations;\r\n        uint8 numRejections;\r\n    }\r\n\r\n    // mapping: tx index => owner => bool\r\n    mapping(uint256 => mapping(address => bool)) public isConfirmed;\r\n    mapping(uint256 => mapping(address => bool)) public isRejected;\r\n\r\n    mapping(address => bool) public isOwner;\r\n    address[] public owners;\r\n    Transaction[] private transactions;\r\n\r\n    modifier onlyWallet() {\r\n        require(msg.sender == address(this), \"not wallet\");\r\n        _;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner[msg.sender], \"not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier txExists(uint256 _txIndex) {\r\n        require(_txIndex < transactions.length, \"tx does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint256 _txIndex) {\r\n        require(!transactions[_txIndex].executed, \"tx already executed\");\r\n        _;\r\n    }\r\n\r\n    modifier notFullRejected(uint256 _txIndex) {\r\n        require(!transactions[_txIndex].rejected, \"tx already rejected\");\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint256 _txIndex) {\r\n        require(!isConfirmed[_txIndex][msg.sender], \"tx already confirmed by user\");\r\n        _;\r\n    }\r\n\r\n    modifier notRejected(uint256 _txIndex) {\r\n        require(!isRejected[_txIndex][msg.sender], \"tx already rejected by user\");\r\n        _;\r\n    }\r\n\r\n    constructor(address[] memory _owners) {\r\n        require(_owners.length == 5, \"5 owners required\"); // 5 wallets initially\r\n\r\n        for (uint256 i = 0; i < _owners.length; ) {\r\n            address owner = _owners[i];\r\n\r\n            require(owner != address(0), \"invalid owner\");\r\n            require(!isOwner[owner], \"owner not unique\");\r\n\r\n            isOwner[owner] = true;\r\n            owners.push(owner);\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* \r\n    Allows to add a new owner. Transaction has to be sent by wallet.\r\n    @param owner: Address of new owner.\r\n    */\r\n    function addOwner(address owner) external onlyWallet {\r\n        require(!isOwner[owner] && owners.length == 4, \"Already owner or MAX\");\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        numConfirmationsRequired = 4;\r\n        emit OwnerAdded(owner);\r\n    }\r\n\r\n    /*\r\n    Allows to remove a owner. Transaction has to be sent by wallet.\r\n    @param owner: Address of owner to be removed.\r\n    */\r\n    function removeOwner(address owner) external onlyWallet {\r\n        require(isOwner[owner] && owners.length == 5, \"Not owner or MIN\");\r\n        isOwner[owner] = false;\r\n        numConfirmationsRequired = 3;\r\n        for (uint256 i = 0; i < owners.length; ) {\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                owners.pop();\r\n                break;\r\n            }\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n        emit OwnerRemoved(owner);\r\n    }\r\n\r\n    /*\r\n    Allows to submit a new transaction. Transaction has to be sent by an owner.\r\n    @param _to: Target address.\r\n    @param _data: Transaction data.\r\n    */\r\n    function submitTransaction(\r\n        address _to,\r\n        bytes memory _data\r\n    ) external onlyOwner {\r\n\r\n        transactions.push(\r\n            Transaction({\r\n                to: _to,\r\n                initiatorOwner: msg.sender,\r\n                data: _data,\r\n                executed: false,\r\n                rejected: false,\r\n                numConfirmations: 1,\r\n                numRejections: 0\r\n            })\r\n        );\r\n        // Get the index of the transaction that has been pushed\r\n        uint256 txIndex = transactions.length - 1;\r\n        \r\n        isConfirmed[txIndex][msg.sender] = true;\r\n\r\n        emit SubmitTransaction(msg.sender, txIndex, _to, _data);\r\n        emit ConfirmTransaction(msg.sender, txIndex);\r\n    }\r\n\r\n    /*\r\n    Allows to confirm a pending transaction. Transaction has to be sent by an owner.\r\n    @param _txIndex: Transaction index.\r\n    */\r\n    function confirmTransaction(uint256 _txIndex)\r\n        external\r\n        onlyOwner\r\n        txExists(_txIndex)\r\n        notExecuted(_txIndex)\r\n        notConfirmed(_txIndex)\r\n        notRejected(_txIndex)\r\n        notFullRejected(_txIndex)\r\n    {\r\n        unchecked {\r\n            transactions[_txIndex].numConfirmations += 1;\r\n        }\r\n        \r\n        isConfirmed[_txIndex][msg.sender] = true;\r\n\r\n        // Automatically execute the transaction once the num of required confirmations is reached\r\n        if (transactions[_txIndex].numConfirmations == numConfirmationsRequired) {\r\n            executeTransaction(_txIndex);\r\n        }\r\n\r\n        emit ConfirmTransaction(msg.sender, _txIndex);\r\n    }\r\n\r\n    /*\r\n    Allows to reject a pending transaction. Transaction has to be sent by an owner.\r\n    @param _txIndex: Transaction index.\r\n    */\r\n    function rejectTransaction(uint256 _txIndex)\r\n        external\r\n        onlyOwner\r\n        txExists(_txIndex)\r\n        notExecuted(_txIndex)\r\n        notConfirmed(_txIndex)\r\n        notRejected(_txIndex)\r\n        notFullRejected(_txIndex)\r\n    {   \r\n        unchecked {\r\n            transactions[_txIndex].numRejections += 1;\r\n        }\r\n        isRejected[_txIndex][msg.sender] = true;\r\n\r\n        // Automatically reject the transaction once the num of required rejections is reached\r\n        if (transactions[_txIndex].numRejections == NUM_REJECTIONS_REQUIRED)\r\n            transactions[_txIndex].rejected = true;\r\n\r\n        emit RejectTransaction(msg.sender, _txIndex);\r\n    }\r\n\r\n    /*\r\n    Allows to execute a confirmed transaction. Last confirmation has to be sent by an owner through the confirmTransaction() function.\r\n    @param _txIndex: Transaction index.\r\n    */\r\n    function executeTransaction(uint256 _txIndex)\r\n        internal\r\n    {\r\n        transactions[_txIndex].executed = true;\r\n\r\n        (bool success, ) = transactions[_txIndex].to.call{value: 0}(\r\n            transactions[_txIndex].data\r\n        );\r\n        require(success, \"tx failed\");\r\n\r\n        emit ExecuteTransaction(msg.sender, _txIndex);\r\n    \r\n    }\r\n\r\n    function getOwners() external view returns (address[] memory) {\r\n        return owners;\r\n    }\r\n\r\n    function getTransactionCount() external view returns (uint256) {\r\n        return transactions.length;\r\n    }\r\n\r\n    function isConfirmedOrRejected(uint256 _txIndex, address _owner)\r\n        external\r\n        view\r\n        returns (bool, bool)\r\n    {\r\n        return (isConfirmed[_txIndex][_owner], isRejected[_txIndex][_owner]);\r\n    }\r\n\r\n    function getTransaction(uint256 _txIndex)\r\n        external\r\n        view\r\n        returns (\r\n            address to,\r\n            address initiatorOwner,\r\n            bytes memory data,\r\n            bool executed,\r\n            bool rejected,\r\n            uint8 numConfirmations,\r\n            uint8 numRejections\r\n        )\r\n    {\r\n        Transaction memory transaction = transactions[_txIndex];\r\n\r\n        return (\r\n            transaction.to,\r\n            transaction.initiatorOwner,\r\n            transaction.data,\r\n            transaction.executed,\r\n            transaction.rejected,\r\n            transaction.numConfirmations,\r\n            transaction.numRejections\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ConfirmTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"RejectTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SubmitTransaction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_REJECTIONS_REQUIRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initiatorOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rejected\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"numConfirmations\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"numRejections\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isConfirmedOrRejected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRejected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numConfirmationsRequired\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txIndex\",\"type\":\"uint256\"}],\"name\":\"rejectTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TeamMultiSig", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000050000000000000000000000002e8626a91d867b51b51500971d5988fe6c442dae0000000000000000000000003ad01e8a85d9edddb37e92fd4d29148e8f3ea257000000000000000000000000938b9d1af7790289442340154f78152464d1dcbf00000000000000000000000024da34aef97603d82e23a3449073baa7a66abf5500000000000000000000000016b9eade524f0d4561b7d1a517313614ff6d6ced", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://10748ad0025fe5c06f6efff97254ace1581dc712f6c0f4c51bcfc0d41c19b40e"}