{"SourceCode": "/** \r\n *  SourceUnit: /Users/twy/Projects/autonomous-proposals/contracts/CrowdProposal.sol\r\n*/\r\n            \r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.6.10;\r\n\r\ninterface IUnion {\r\n    function delegate(address delegatee) external;\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address dst, uint rawAmount) external returns (bool);\r\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool);\r\n}\r\n\r\ninterface IUnionGovernor {\r\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) external returns (uint);\r\n    function castVote(uint proposalId, uint8 support) external;\r\n}\r\n\r\n/** \r\n *  SourceUnit: /Users/twy/Projects/autonomous-proposals/contracts/CrowdProposal.sol\r\n*/\r\n\r\n////// SPDX-License-Identifier-FLATTEN-SUPPRESS-WARNING: GPL-3.0\r\n\r\npragma solidity ^0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\n////import './IUnion.sol';\r\n\r\ncontract CrowdProposal {\r\n    /// @notice The crowd proposal author\r\n    address payable public immutable author;\r\n\r\n    /// @notice Governance proposal data\r\n    address[] public targets;\r\n    uint[] public values;\r\n    string[] public signatures;\r\n    bytes[] public calldatas;\r\n    string public description;\r\n\r\n    /// @notice UNION token contract address\r\n    address public immutable union;\r\n    /// @notice UNION protocol `UnionGovernor` contract address\r\n    address public immutable governor;\r\n\r\n    /// @notice Governance proposal id\r\n    uint public govProposalId;\r\n    /// @notice Terminate flag\r\n    bool public terminated;\r\n\r\n    /// @notice An event emitted when the governance proposal is created\r\n    event CrowdProposalProposed(address indexed proposal, address indexed author, uint proposalId);\r\n    /// @notice An event emitted when the crowd proposal is terminated\r\n    event CrowdProposalTerminated(address indexed proposal, address indexed author);\r\n     /// @notice An event emitted when delegated votes are transfered to the governance proposal\r\n    event CrowdProposalVoted(address indexed proposal, uint proposalId);\r\n\r\n    /**\r\n    * @notice Construct crowd proposal\r\n    * @param author_ The crowd proposal author\r\n    * @param targets_ The ordered list of target addresses for calls to be made\r\n    * @param values_ The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n    * @param signatures_ The ordered list of function signatures to be called\r\n    * @param calldatas_ The ordered list of calldata to be passed to each call\r\n    * @param description_ The block at which voting begins: holders must delegate their votes prior to this block\r\n    * @param union_ `UNION` token contract address\r\n    * @param governor_ UNION protocol `UnionGovernor` contract address\r\n    */\r\n    constructor(address payable author_,\r\n                address[] memory targets_,\r\n                uint[] memory values_,\r\n                string[] memory signatures_,\r\n                bytes[] memory calldatas_,\r\n                string memory description_,\r\n                address union_,\r\n                address governor_) public {\r\n        author = author_;\r\n\r\n        // Save proposal data\r\n        targets = targets_;\r\n        values = values_;\r\n        signatures = signatures_;\r\n        calldatas = calldatas_;\r\n        description = description_;\r\n\r\n        // Save Union contracts data\r\n        union = union_;\r\n        governor = governor_;\r\n\r\n        terminated = false;\r\n\r\n        // Delegate votes to the crowd proposal\r\n        IUnion(union_).delegate(address(this));\r\n    }\r\n\r\n    /// @notice Create governance proposal\r\n    function propose() external returns (uint) {\r\n        require(govProposalId == 0, 'CrowdProposal::propose: gov proposal already exists');\r\n        require(!terminated, 'CrowdProposal::propose: proposal has been terminated');\r\n\r\n        // Create governance proposal and save proposal id\r\n        govProposalId = IUnionGovernor(governor).propose(targets, values, signatures, calldatas, description);\r\n        emit CrowdProposalProposed(address(this), author, govProposalId);\r\n\r\n        return govProposalId;\r\n    }\r\n\r\n    /// @notice Terminate the crowd proposal, send back staked union tokens\r\n    function terminate() external {\r\n        require(msg.sender == author, 'CrowdProposal::terminate: only author can terminate');\r\n        require(!terminated, 'CrowdProposal::terminate: proposal has been already terminated');\r\n\r\n        terminated = true;\r\n    \r\n        // Transfer staked union tokens from the crowd proposal contract back to the author\r\n        uint amount = IUnion(union).balanceOf(address(this));\r\n        if(amount > 0){\r\n            IUnion(union).transfer(author, amount);\r\n        }\r\n        emit CrowdProposalTerminated(address(this), author);\r\n    }\r\n\r\n    /// @notice Vote for the governance proposal with all delegated votes\r\n    function vote() external {\r\n        require(govProposalId > 0, 'CrowdProposal::vote: gov proposal has not been created yet');\r\n        // Support the proposal, vote value = 1\r\n        IUnionGovernor(governor).castVote(govProposalId, 1);\r\n\r\n        emit CrowdProposalVoted(address(this), govProposalId);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"author_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"targets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values_\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures_\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas_\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"union_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"CrowdProposalProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"CrowdProposalTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"CrowdProposalVoted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calldatas\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"union\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"values\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrowdProposal", "CompilerVersion": "v0.6.10+commit.00c0fcaf", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cbd1c32a1b3961cc43868b8bae431ab0da65beeb000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003e00000000000000000000000005dfe42eea70a3e6f93ee54ed9c321af07a85535c000000000000000000000000e1b3f07a9032f0d3dedf3e96c395a4da74130f6e000000000000000000000000000000000000000000000000000000000000000100000000000000000000000025ace71c97b33cc4729cf772ae268934f7ab5fa1000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000001e848000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002173656e644d65737361676528616464726573732c62797465732c75696e7433322900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000946a2c918f3d928b918c01d813644f27bcd29d96000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000001e848000000000000000000000000000000000000000000000000000000000000000c4b61d27f6000000000000000000000000206b0053f2435abe8e2bf974acbfc37e8f98b0a90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000245f84f302000000000000000000000000000000000000000000000000000000005e80a6bf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002990a5549502d3031303a204368616e67652074686520626f72726f772072617465206f6e204f7074696d69736d0a0a232041627374726163740a0a202d204368616e67652074686520626f72726f77207261746520746f203525206f6e204f7074696d69736d0a0a232053706563696669636174696f6e0a0a202d2043616c6c204669786564496e746572657374526174654d6f64656c2e736574496e74657265737452617465282920746f206368616e676520626f72726f77207261746520746f203525206f6e204f7074696d69736d2e200a0a2320496d706c656d656e746174696f6e730a0a466f72204f7074696d69736d3a0a2d2053656e642074686520656e636f646564207472616e73616374696f6e7320746f20746865205b4f7074696d69736d206272696467655d2868747470733a2f2f65746865727363616e2e696f2f616464726573732f3078323561636537316339374233334363343732394346373732616532363839333446376162356641312920746f2063616c6c20746865205b4f704f776e65725d2868747470733a2f2f6f7074696d69737469632e65746865727363616e2e696f2f616464726573732f30783934364132433931384633443932384239313843303144383133363434663237426364323944393629206f6e204f7074696d69736d2c20776869636820667572746865722063616c6c73205b4669786564496e746572657374526174654d6f64656c5d2868747470733a2f2f6f7074696d69737469632e65746865727363616e2e696f2f616464726573732f307832303662303035334632343335616245386532624639373461434266433337453846393862306139292e736574496e74657265737452617465283135383534383935393929206f6e204f7074696d69736d2e0a0a00000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://14f88f53952033a79e1f5f1403f27acf213556ee80277fb12a30e7094bcec093"}