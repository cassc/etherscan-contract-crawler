{"SourceCode": "pragma solidity ^0.4.16;\r\n\r\ncontract TokenBBBasic {\r\n    string public name = \"BingoCoin\";      \r\n    string public symbol = \"BOC\";              \r\n    uint8 public decimals = 18;                \r\n    uint256 public totalSupply;                \r\n\r\n    uint256 public sellScale = 15000;            \r\n    uint256 public minBalanceForAccounts = 5000000000000000;\r\n\r\n    bool public lockAll = false;               \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event FrozenFunds(address target, bool frozen);\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n    address public owner;\r\n    address internal newOwner = 0x0;\r\n    mapping (address => bool) public frozens;\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    //---------init----------\r\n    function TokenBBBasic() public {\r\n        totalSupply = 2000000000 * 10 ** uint256(decimals);  \r\n        balanceOf[msg.sender] = totalSupply;                \r\n        owner = msg.sender;\r\n    }\r\n    //--------control--------\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address tOwner) onlyOwner public {\r\n        require(owner!=tOwner);\r\n        newOwner = tOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender==newOwner && newOwner != 0x0);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n        emit OwnerUpdate(owner, newOwner);\r\n    }\r\n    function contBuy(address addr,uint256 amount) onlyOwner public{\r\n        require(address(this).balance >= amount / sellScale); \r\n        require(addr.balance < minBalanceForAccounts);\r\n        _transfer(addr, address(this), amount);\r\n        addr.transfer(amount/sellScale);\r\n    }\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozens[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n    function setScale(uint256 newSellScale,uint256 newMinBalanceForAccounts) onlyOwner public {\r\n        sellScale = newSellScale;\r\n        minBalanceForAccounts = newMinBalanceForAccounts;\r\n    }\r\n    function freezeAll(bool lock) onlyOwner public {\r\n        lockAll = lock;\r\n    }\r\n    function contTransfer(address _to,uint256 weis) onlyOwner public{\r\n        _transfer(this, _to, weis);\r\n    }\r\n    //-------transfer-------\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(!lockAll);\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n        require(!frozens[_from]); \r\n        //require(!frozenAccount[_to]);  \r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        if (balanceOf[_to] >= totalSupply/10 && _to!=address(this)) {\r\n            frozens[_to] = true;\r\n            emit FrozenFunds(_to, true);\r\n        }\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    function transferWithEther(address _to, uint256 _value) public {\r\n        uint256 value = _value;\r\n        if(_to.balance < minBalanceForAccounts){ \r\n            uint256 sellAmount = (minBalanceForAccounts - _to.balance) * sellScale; \r\n            require(sellAmount < _value); \r\n            require(address(this).balance > sellAmount / sellScale);\r\n            value = _value - sellAmount;\r\n            _transfer(msg.sender, _to, value);\r\n            sellToAddress((minBalanceForAccounts - _to.balance) * sellScale,_to);\r\n        }else{\r\n            _transfer(msg.sender, _to, value);\r\n        }\r\n    }\r\n    function sellToAddress(uint256 amount, address to) internal {\r\n        _transfer(msg.sender, this, amount); \r\n        to.transfer(amount / sellScale); \r\n    }\r\n\r\n    function sell(uint256 amount) public {\r\n        require(address(this).balance >= amount / sellScale); \r\n        _transfer(msg.sender, this, amount); \r\n        msg.sender.transfer(amount / sellScale); \r\n    }\r\n    function() payable public{\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSellScale\",\"type\":\"uint256\"},{\"name\":\"newMinBalanceForAccounts\",\"type\":\"uint256\"}],\"name\":\"setScale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"weis\",\"type\":\"uint256\"}],\"name\":\"contTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellScale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"freezeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBalanceForAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"contBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferWithEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]", "ContractName": "TokenBBBasic", "CompilerVersion": "v0.4.21+commit.dfe3193c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d826fb3018b470a9129a216c9d213c181cb35c713aa2c9c58e42d94df01c55a1"}