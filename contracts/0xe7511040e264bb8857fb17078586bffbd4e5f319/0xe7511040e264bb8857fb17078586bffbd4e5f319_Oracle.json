{"SourceCode": "/*                                                                                           \r\n*      ___ ___       ___         ___                                                             \r\n*      `MM `MMb     dMM'         `MM                                                             \r\n*       MM  MMM.   ,PMM           MM                                                             \r\n*   ____MM  M`Mb   d'MM    ___    MM   __   ____  ___  __   ____         _____  ___  __   __     \r\n*  6MMMMMM  M YM. ,P MM  6MMMMb   MM   d'  6MMMMb `MM 6MM  6MMMMb\\      6MMMMMb `MM 6MM  6MMbMMM \r\n* 6M'  `MM  M `Mb d' MM 8M'  `Mb  MM  d'  6M'  `Mb MM69 \" MM'    `     6M'   `Mb MM69 \" 6M'`Mb   \r\n* MM    MM  M  YM.P  MM     ,oMM  MM d'   MM    MM MM'    YM.          MM     MM MM'    MM  MM   \r\n* MM    MM  M  `Mb'  MM ,6MM9'MM  MMdM.   MMMMMMMM MM      YMMMMb      MM     MM MM     YM.,M9   \r\n* MM    MM  M   YP   MM MM'   MM  MMPYM.  MM       MM          `Mb     MM     MM MM      YMM9    \r\n* YM.  ,MM  M   `'   MM MM.  ,MM  MM  YM. YM    d9 MM     L    ,MM 68b YM.   ,M9 MM     (M       \r\n*  YMMMMMM__M_      _MM_`YMMM9'Yb_MM_  YM._YMMMM9 _MM_    MYMMMM9  Y89  YMMMMM9 _MM_     YMMMMb. \r\n*                                                                                       6M    Yb \r\n*                                                                                       YM.   d9 \r\n*                                                                                        YMMMM9  \r\n*/\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/ChainlinkRequestInterface.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface ChainlinkRequestInterface {\r\n  function oracleRequest(\r\n    address sender,\r\n    uint256 payment,\r\n    bytes32 id,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 nonce,\r\n    uint256 version,\r\n    bytes data\r\n  ) external;\r\n\r\n  function cancelOracleRequest(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    bytes4 callbackFunctionId,\r\n    uint256 expiration\r\n  ) external;\r\n}\r\n\r\n// File: contracts/interfaces/OracleInterface.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface OracleInterface {\r\n  function fulfillOracleRequest(\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    address callbackAddress,\r\n    bytes4 callbackFunctionId,\r\n    uint256 expiration,\r\n    bytes32 data\r\n  ) external returns (bool);\r\n  function getAuthorizationStatus(address node) external view returns (bool);\r\n  function setFulfillmentPermission(address node, bool allowed) external;\r\n  function withdraw(address recipient, uint256 amount) external;\r\n  function withdrawable() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/LinkTokenInterface.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external returns (bool success);\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n  function balanceOf(address owner) external returns (uint256 balance);\r\n  function decimals() external returns (uint8 decimalPlaces);\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n  function name() external returns (string tokenName);\r\n  function symbol() external returns (string tokenSymbol);\r\n  function totalSupply() external returns (uint256 totalTokensIssued);\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n  function transferAndCall(address to, uint256 value, bytes data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n}\r\n\r\n// File: contracts/Oracle.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title The Chainlink Oracle contract\r\n * @notice Node operators can deploy this contract to fulfill requests sent to them\r\n */\r\ncontract Oracle is ChainlinkRequestInterface, OracleInterface, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 constant public EXPIRY_TIME = 5 minutes;\r\n  uint256 constant private MINIMUM_CONSUMER_GAS_LIMIT = 400000;\r\n  // We initialize fields to 1 instead of 0 so that the first invocation\r\n  // does not cost more gas.\r\n  uint256 constant private ONE_FOR_CONSISTENT_GAS_COST = 1;\r\n  uint256 constant private SELECTOR_LENGTH = 4;\r\n  uint256 constant private EXPECTED_REQUEST_WORDS = 2;\r\n  // solium-disable-next-line zeppelin/no-arithmetic-operations\r\n  uint256 constant private MINIMUM_REQUEST_LENGTH = SELECTOR_LENGTH + (32 * EXPECTED_REQUEST_WORDS);\r\n\r\n  LinkTokenInterface internal LinkToken;\r\n  mapping(bytes32 => bytes32) private commitments;\r\n  mapping(address => bool) private authorizedNodes;\r\n  uint256 private withdrawableTokens = ONE_FOR_CONSISTENT_GAS_COST;\r\n\r\n  event OracleRequest(\r\n    bytes32 indexed specId,\r\n    address requester,\r\n    bytes32 requestId,\r\n    uint256 payment,\r\n    address callbackAddr,\r\n    bytes4 callbackFunctionId,\r\n    uint256 cancelExpiration,\r\n    uint256 dataVersion,\r\n    bytes data\r\n  );\r\n\r\n  event CancelOracleRequest(\r\n    bytes32 indexed requestId\r\n  );\r\n\r\n  /**\r\n   * @notice Deploy with the address of the LINK token\r\n   * @dev Sets the LinkToken address for the imported LinkTokenInterface\r\n   * @param _link The address of the LINK token\r\n   */\r\n  constructor(address _link) Ownable() public {\r\n    LinkToken = LinkTokenInterface(_link);\r\n  }\r\n\r\n  /**\r\n   * @notice Called when LINK is sent to the contract via `transferAndCall`\r\n   * @dev The data payload's first 2 words will be overwritten by the `_sender` and `_amount`\r\n   * values to ensure correctness. Calls oracleRequest.\r\n   * @param _sender Address of the sender\r\n   * @param _amount Amount of LINK sent (specified in wei)\r\n   * @param _data Payload of the transaction\r\n   */\r\n  function onTokenTransfer(\r\n    address _sender,\r\n    uint256 _amount,\r\n    bytes _data\r\n  )\r\n    public\r\n    onlyLINK\r\n    validRequestLength(_data)\r\n    permittedFunctionsForLINK(_data)\r\n  {\r\n    assembly {\r\n      // solium-disable-next-line security/no-low-level-calls\r\n      mstore(add(_data, 36), _sender) // ensure correct sender is passed\r\n      // solium-disable-next-line security/no-low-level-calls\r\n      mstore(add(_data, 68), _amount)    // ensure correct amount is passed\r\n    }\r\n    // solium-disable-next-line security/no-low-level-calls\r\n    require(address(this).delegatecall(_data), \"Unable to create request\"); // calls oracleRequest\r\n  }\r\n\r\n  /**\r\n   * @notice Creates the Chainlink request\r\n   * @dev Stores the hash of the params as the on-chain commitment for the request.\r\n   * Emits OracleRequest event for the Chainlink node to detect.\r\n   * @param _sender The sender of the request\r\n   * @param _payment The amount of payment given (specified in wei)\r\n   * @param _specId The Job Specification ID\r\n   * @param _callbackAddress The callback address for the response\r\n   * @param _callbackFunctionId The callback function ID for the response\r\n   * @param _nonce The nonce sent by the requester\r\n   * @param _dataVersion The specified data version\r\n   * @param _data The CBOR payload of the request\r\n   */\r\n  function oracleRequest(\r\n    address _sender,\r\n    uint256 _payment,\r\n    bytes32 _specId,\r\n    address _callbackAddress,\r\n    bytes4 _callbackFunctionId,\r\n    uint256 _nonce,\r\n    uint256 _dataVersion,\r\n    bytes _data\r\n  )\r\n    external\r\n    onlyLINK\r\n    checkCallbackAddress(_callbackAddress)\r\n  {\r\n    bytes32 requestId = keccak256(abi.encodePacked(_sender, _nonce));\r\n    require(commitments[requestId] == 0, \"Must use a unique ID\");\r\n    uint256 expiration = now.add(EXPIRY_TIME);\r\n\r\n    commitments[requestId] = keccak256(\r\n      abi.encodePacked(\r\n        _payment,\r\n        _callbackAddress,\r\n        _callbackFunctionId,\r\n        expiration\r\n      )\r\n    );\r\n\r\n    emit OracleRequest(\r\n      _specId,\r\n      _sender,\r\n      requestId,\r\n      _payment,\r\n      _callbackAddress,\r\n      _callbackFunctionId,\r\n      expiration,\r\n      _dataVersion,\r\n      _data);\r\n  }\r\n\r\n  /**\r\n   * @notice Called by the Chainlink node to fulfill requests\r\n   * @dev Given params must hash back to the commitment stored from `oracleRequest`.\r\n   * Will call the callback address' callback function without bubbling up error\r\n   * checking in a `require` so that the node can get paid.\r\n   * @param _requestId The fulfillment request ID that must match the requester's\r\n   * @param _payment The payment amount that will be released for the oracle (specified in wei)\r\n   * @param _callbackAddress The callback address to call for fulfillment\r\n   * @param _callbackFunctionId The callback function ID to use for fulfillment\r\n   * @param _expiration The expiration that the node should respond by before the requester can cancel\r\n   * @param _data The data to return to the consuming contract\r\n   * @return Status if the external call was successful\r\n   */\r\n  function fulfillOracleRequest(\r\n    bytes32 _requestId,\r\n    uint256 _payment,\r\n    address _callbackAddress,\r\n    bytes4 _callbackFunctionId,\r\n    uint256 _expiration,\r\n    bytes32 _data\r\n  )\r\n    external\r\n    onlyAuthorizedNode\r\n    isValidRequest(_requestId)\r\n    returns (bool)\r\n  {\r\n    bytes32 paramsHash = keccak256(\r\n      abi.encodePacked(\r\n        _payment,\r\n        _callbackAddress,\r\n        _callbackFunctionId,\r\n        _expiration\r\n      )\r\n    );\r\n    require(commitments[_requestId] == paramsHash, \"Params do not match request ID\");\r\n    withdrawableTokens = withdrawableTokens.add(_payment);\r\n    delete commitments[_requestId];\r\n    require(gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT, \"Must provide consumer enough gas\");\r\n    // All updates to the oracle's fulfillment should come before calling the\r\n    // callback(addr+functionId) as it is untrusted.\r\n    // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\r\n    return _callbackAddress.call(_callbackFunctionId, _requestId, _data); // solium-disable-line security/no-low-level-calls\r\n  }\r\n\r\n  /**\r\n   * @notice Use this to check if a node is authorized for fulfilling requests\r\n   * @param _node The address of the Chainlink node\r\n   * @return The authorization status of the node\r\n   */\r\n  function getAuthorizationStatus(address _node) external view returns (bool) {\r\n    return authorizedNodes[_node];\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\r\n   * @param _node The address of the Chainlink node\r\n   * @param _allowed Bool value to determine if the node can fulfill requests\r\n   */\r\n  function setFulfillmentPermission(address _node, bool _allowed) external onlyOwner {\r\n    authorizedNodes[_node] = _allowed;\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the node operator to withdraw earned LINK to a given address\r\n   * @dev The owner of the contract can be another wallet and does not have to be a Chainlink node\r\n   * @param _recipient The address to send the LINK token to\r\n   * @param _amount The amount to send (specified in wei)\r\n   */\r\n  function withdraw(address _recipient, uint256 _amount)\r\n    external\r\n    onlyOwner\r\n    hasAvailableFunds(_amount)\r\n  {\r\n    withdrawableTokens = withdrawableTokens.sub(_amount);\r\n    assert(LinkToken.transfer(_recipient, _amount));\r\n  }\r\n\r\n  /**\r\n   * @notice Displays the amount of LINK that is available for the node operator to withdraw\r\n   * @dev We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage\r\n   * @return The amount of withdrawable LINK on the contract\r\n   */\r\n  function withdrawable() external view onlyOwner returns (uint256) {\r\n    return withdrawableTokens.sub(ONE_FOR_CONSISTENT_GAS_COST);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK\r\n   * sent for the request back to the requester's address.\r\n   * @dev Given params must hash to a commitment stored on the contract in order for the request to be valid\r\n   * Emits CancelOracleRequest event.\r\n   * @param _requestId The request ID\r\n   * @param _payment The amount of payment given (specified in wei)\r\n   * @param _callbackFunc The requester's specified callback address\r\n   * @param _expiration The time of the expiration for the request\r\n   */\r\n  function cancelOracleRequest(\r\n    bytes32 _requestId,\r\n    uint256 _payment,\r\n    bytes4 _callbackFunc,\r\n    uint256 _expiration\r\n  ) external {\r\n    bytes32 paramsHash = keccak256(\r\n      abi.encodePacked(\r\n        _payment,\r\n        msg.sender,\r\n        _callbackFunc,\r\n        _expiration)\r\n    );\r\n    require(paramsHash == commitments[_requestId], \"Params do not match request ID\");\r\n    require(_expiration <= now, \"Request is not expired\");\r\n\r\n    delete commitments[_requestId];\r\n    emit CancelOracleRequest(_requestId);\r\n\r\n    assert(LinkToken.transfer(msg.sender, _payment));\r\n  }\r\n\r\n  // MODIFIERS\r\n\r\n  /**\r\n   * @dev Reverts if amount requested is greater than withdrawable balance\r\n   * @param _amount The given amount to compare to `withdrawableTokens`\r\n   */\r\n  modifier hasAvailableFunds(uint256 _amount) {\r\n    require(withdrawableTokens >= _amount.add(ONE_FOR_CONSISTENT_GAS_COST), \"Amount requested is greater than withdrawable balance\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if request ID does not exist\r\n   * @param _requestId The given request ID to check in stored `commitments`\r\n   */\r\n  modifier isValidRequest(bytes32 _requestId) {\r\n    require(commitments[_requestId] != 0, \"Must have a valid requestId\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if `msg.sender` is not authorized to fulfill requests\r\n   */\r\n  modifier onlyAuthorizedNode() {\r\n    require(authorizedNodes[msg.sender] || msg.sender == owner, \"Not an authorized node to fulfill requests\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if not sent from the LINK token\r\n   */\r\n  modifier onlyLINK() {\r\n    require(msg.sender == address(LinkToken), \"Must use LINK token\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the given data does not begin with the `oracleRequest` function selector\r\n   * @param _data The data payload of the request\r\n   */\r\n  modifier permittedFunctionsForLINK(bytes _data) {\r\n    bytes4 funcSelector;\r\n    assembly {\r\n      // solium-disable-next-line security/no-low-level-calls\r\n      funcSelector := mload(add(_data, 32))\r\n    }\r\n    require(funcSelector == this.oracleRequest.selector, \"Must use whitelisted functions\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the callback address is the LINK token\r\n   * @param _to The callback address\r\n   */\r\n  modifier checkCallbackAddress(address _to) {\r\n    require(_to != address(LinkToken), \"Cannot callback to LINK\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the given payload is less than needed to create a request\r\n   * @param _data The request payload\r\n   */\r\n  modifier validRequestLength(bytes _data) {\r\n    require(_data.length >= MINIMUM_REQUEST_LENGTH, \"Invalid request length\");\r\n    _;\r\n  }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_payment\",\"type\":\"uint256\"},{\"name\":\"_specId\",\"type\":\"bytes32\"},{\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_dataVersion\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"oracleRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"name\":\"_payment\",\"type\":\"uint256\"},{\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"name\":\"_expiration\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"fulfillOracleRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXPIRY_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"name\":\"_payment\",\"type\":\"uint256\"},{\"name\":\"_callbackFunc\",\"type\":\"bytes4\"},{\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"cancelOracleRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"address\"},{\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setFulfillmentPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"getAuthorizationStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_link\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"specId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"callbackAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"indexed\":false,\"name\":\"cancelExpiration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dataVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"CancelOracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "Oracle", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000020fe562d797a42dcb3399062ae9546cd06f63280", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ae860d61b1b4ca1b2569e074ceb88f9aa485d4ce0aafcf34ffb6749f428c6d5d"}