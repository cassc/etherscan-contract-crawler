{"SourceCode": "#pragma version 0.3.10\r\n#pragma optimize gas\r\n#pragma evm-version shanghai\r\n\"\"\"\r\n@title Curve Leverage Bot Factory\r\n@license Apache 2.0\r\n@author Volume.finance\r\n\"\"\"\r\n\r\nstruct SwapInfo:\r\n    route: address[11]\r\n    swap_params: uint256[5][5]\r\n    amount: uint256\r\n    expected: uint256\r\n    pools: address[5]\r\n\r\ninterface ControllerFactory:\r\n    def get_controller(collateral: address) -> address: view\r\n    def stablecoin() -> address: view\r\n    def WETH() -> address: view\r\n\r\ninterface ERC20:\r\n    def approve(_spender: address, _value: uint256) -> bool: nonpayable\r\n    def transfer(_to: address, _value: uint256) -> bool: nonpayable\r\n    def transferFrom(_from: address, _to: address, _value: uint256) -> bool: nonpayable\r\n\r\ninterface WrappedEth:\r\n    def withdraw(amount: uint256): nonpayable\r\n\r\ninterface Bot:\r\n    def create_loan_extended(collateral_amount: uint256, debt: uint256, N: uint256, callbacker: address, callback_args: DynArray[uint256,5]): nonpayable\r\n    def repay_extended(callbacker: address, callback_args: DynArray[uint256,5]) -> uint256: nonpayable\r\n    def state() -> uint256[4]: view\r\n    def health() -> int256: view\r\n\r\ninterface CurveSwapRouter:\r\n    def exchange(\r\n        _route: address[11],\r\n        _swap_params: uint256[5][5],\r\n        _amount: uint256,\r\n        _expected: uint256,\r\n        _pools: address[5]=empty(address[5]),\r\n        _receiver: address=msg.sender\r\n    ) -> uint256: payable\r\n\r\nevent BotStarted:\r\n    owner: address\r\n    bot: address\r\n    collateral: address\r\n    collateral_amount: uint256\r\n    debt: uint256\r\n    N: uint256\r\n    leverage: uint256\r\n    deleverage_percentage: uint256\r\n    health_threshold: uint256\r\n    expire: uint256\r\n    callbacker: address\r\n    callback_args: DynArray[uint256, 5]\r\n\r\nevent BotRepayed:\r\n    owner: address\r\n    bot: address\r\n    return_amount: uint256\r\n\r\nevent UpdateBlueprint:\r\n    old_blueprint: address\r\n    new_blueprint: address\r\n\r\nevent UpdateCompass:\r\n    old_compass: address\r\n    new_compass: address\r\n\r\nevent UpdateRefundWallet:\r\n    old_refund_wallet: address\r\n    new_refund_wallet: address\r\n\r\nevent SetPaloma:\r\n    paloma: bytes32\r\n\r\nevent UpdateGasFee:\r\n    old_gas_fee: uint256\r\n    new_gas_fee: uint256\r\n\r\nevent UpdateServiceFeeCollector:\r\n    old_service_fee_collector: address\r\n    new_service_fee_collector: address\r\n\r\nevent UpdateServiceFee:\r\n    old_service_fee: uint256\r\n    new_service_fee: uint256\r\n\r\nMAX_SIZE: constant(uint256) = 8\r\nDENOMINATOR: constant(uint256) = 10**18\r\nVETH: constant(address) = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\nWETH: immutable(address)\r\nCONTROLLER_FACTORY: immutable(address)\r\nROUTER: immutable(address)\r\nSTABLECOIN: immutable(address)\r\nblueprint: public(address)\r\ncompass: public(address)\r\nbot_to_owner: public(HashMap[address, address])\r\nrefund_wallet: public(address)\r\ngas_fee: public(uint256)\r\nservice_fee_collector: public(address)\r\nservice_fee: public(uint256)\r\npaloma: public(bytes32)\r\n\r\n@external\r\ndef __init__(_blueprint: address, _compass: address, controller_factory: address, router: address, _refund_wallet: address, _gas_fee: uint256, _service_fee_collector: address, _service_fee: uint256):\r\n    self.blueprint = _blueprint\r\n    self.compass = _compass\r\n    self.refund_wallet = _refund_wallet\r\n    self.gas_fee = _gas_fee\r\n    self.service_fee_collector = _service_fee_collector\r\n    self.service_fee = _service_fee\r\n    CONTROLLER_FACTORY = controller_factory\r\n    ROUTER = router\r\n    WETH = ControllerFactory(controller_factory).WETH()\r\n    STABLECOIN = ControllerFactory(CONTROLLER_FACTORY).stablecoin()\r\n    log UpdateCompass(empty(address), _compass)\r\n    log UpdateBlueprint(empty(address), _blueprint)\r\n    log UpdateRefundWallet(empty(address), _refund_wallet)\r\n    log UpdateGasFee(empty(uint256), _gas_fee)\r\n    log UpdateServiceFeeCollector(empty(address), _service_fee_collector)\r\n    log UpdateServiceFee(empty(uint256), _service_fee)\r\n\r\n@external\r\n@payable\r\n@nonreentrant('lock')\r\ndef create_bot(swap_infos: DynArray[SwapInfo, MAX_SIZE], collateral: address, debt: uint256, N: uint256, callbacker: address, callback_args: DynArray[uint256,5], leverage: uint256, deleverage_percentage: uint256, health_threshold: uint256, expire: uint256):\r\n    _gas_fee: uint256 = self.gas_fee\r\n    _service_fee: uint256 = self.service_fee\r\n    controller: address = ControllerFactory(CONTROLLER_FACTORY).get_controller(collateral)\r\n    collateral_amount: uint256 = 0\r\n    _value: uint256 = msg.value\r\n    for swap_info in swap_infos:\r\n        last_index: uint256 = 0\r\n        for i in range(6): # to the first\r\n            last_index = unsafe_sub(10, unsafe_add(i, i))\r\n            if swap_info.route[last_index] != empty(address):\r\n                break\r\n        assert swap_info.route[last_index] == collateral or (swap_info.route[last_index] == VETH and collateral == WETH), \"Wrong path\"\r\n        amount: uint256 = swap_info.amount\r\n        assert amount > 0, \"Insuf deposit\"\r\n        if collateral == WETH:\r\n            if swap_info.route[0] == VETH:\r\n                assert _value >= amount, \"Insuf deposit\"\r\n                _value = unsafe_sub(_value, amount)\r\n            else:\r\n                assert ERC20(swap_info.route[0]).transferFrom(msg.sender, self, amount, default_return_value=True), \"TF fail\"\r\n                if swap_info.route[0] == WETH:\r\n                    WrappedEth(WETH).withdraw(amount)\r\n                else:\r\n                    assert ERC20(swap_info.route[0]).approve(ROUTER, amount, default_return_value=True), \"Ap fail\"\r\n                    amount = CurveSwapRouter(ROUTER).exchange(swap_info.route, swap_info.swap_params, amount, swap_info.expected, swap_info.pools, self)\r\n        else:\r\n            if swap_info.route[0] == VETH:\r\n                assert _value >= amount, \"Insuf deposit\"\r\n                _value = unsafe_sub(_value, amount)\r\n                amount = CurveSwapRouter(ROUTER).exchange(swap_info.route, swap_info.swap_params, amount, swap_info.expected, swap_info.pools, self, value=amount)\r\n            else:\r\n                assert ERC20(swap_info.route[0]).transferFrom(msg.sender, self, amount, default_return_value=True), \"TF fail\"\r\n                if swap_info.route[0] != collateral:\r\n                    assert ERC20(swap_info.route[0]).approve(ROUTER, amount, default_return_value=True), \"Ap fail\"\r\n                    amount = CurveSwapRouter(ROUTER).exchange(swap_info.route, swap_info.swap_params, amount, swap_info.expected, swap_info.pools, self)\r\n        collateral_amount += amount\r\n    if _value > _gas_fee:\r\n        send(msg.sender, unsafe_sub(_value, _gas_fee))\r\n    else:\r\n        assert _value == _gas_fee, \"Insuf deposit\"\r\n    send(self.refund_wallet, _gas_fee)\r\n    bot: address = empty(address)\r\n    _service_fee_amount: uint256 = 0\r\n    if _service_fee > 0:\r\n        _service_fee_amount = unsafe_div(collateral_amount * _service_fee, DENOMINATOR)\r\n        collateral_amount = unsafe_sub(collateral_amount, _service_fee_amount)\r\n    assert collateral_amount > 0, \"Insuf deposit\"\r\n    if collateral == WETH:\r\n        send(self.service_fee_collector, _service_fee_amount)\r\n        bot = create_from_blueprint(self.blueprint, controller, WETH, msg.sender, collateral, STABLECOIN, value=collateral_amount, code_offset=3)\r\n    else:\r\n        bot = create_from_blueprint(self.blueprint, controller, WETH, msg.sender, collateral, STABLECOIN, code_offset=3)\r\n        assert ERC20(collateral).transfer(bot, collateral_amount, default_return_value=True), \"Tr fail\"\r\n        if _service_fee_amount > 0:\r\n            assert ERC20(collateral).transfer(self.service_fee_collector, _service_fee_amount, default_return_value=True), \"Tr fail\"\r\n    Bot(bot).create_loan_extended(collateral_amount, debt, N, callbacker, callback_args)\r\n    self.bot_to_owner[bot] = msg.sender\r\n    log BotStarted(msg.sender, bot, collateral, collateral_amount, debt, N, leverage, deleverage_percentage, health_threshold, expire, callbacker, callback_args)\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef repay_bot(bots: DynArray[address, MAX_SIZE], callbackers: DynArray[address, MAX_SIZE], callback_args: DynArray[DynArray[uint256,5], MAX_SIZE]):\r\n    assert len(bots) == len(callbackers) and len(bots) == len(callback_args), \"invalidate\"\r\n    if msg.sender == self.compass:\r\n        assert convert(slice(msg.data, unsafe_sub(len(msg.data), 32), 32), bytes32) == self.paloma, \"Unauthorized\"\r\n        for i in range(MAX_SIZE):\r\n            if i >= len(bots):\r\n                break\r\n            bal: uint256 = Bot(bots[i]).repay_extended(callbackers[i], callback_args[i])\r\n            log BotRepayed(self.bot_to_owner[bots[i]], bots[i], bal)\r\n    else:\r\n        for i in range(MAX_SIZE):\r\n            if i >= len(bots):\r\n                break\r\n            owner: address = self.bot_to_owner[bots[i]]\r\n            assert owner == msg.sender, \"Unauthorized\"\r\n            bal: uint256 = Bot(bots[i]).repay_extended(callbackers[i], callback_args[i])\r\n            log BotRepayed(owner, bots[i], bal)\r\n\r\n@external\r\n@view\r\ndef state(bot: address) -> uint256[4]:\r\n    return Bot(bot).state()\r\n\r\n@external\r\n@view\r\ndef health(bot: address) -> int256:\r\n    return Bot(bot).health()\r\n\r\n@external\r\ndef update_compass(new_compass: address):\r\n    assert msg.sender == self.compass and len(msg.data) == 68 and convert(slice(msg.data, 36, 32), bytes32) == self.paloma, \"Unauthorized\"\r\n    self.compass = new_compass\r\n    log UpdateCompass(msg.sender, new_compass)\r\n\r\n@external\r\ndef update_blueprint(new_blueprint: address):\r\n    assert msg.sender == self.compass and len(msg.data) == 68 and convert(slice(msg.data, 36, 32), bytes32) == self.paloma, \"Unauthorized\"\r\n    old_blueprint:address = self.blueprint\r\n    self.blueprint = new_blueprint\r\n    log UpdateCompass(old_blueprint, new_blueprint)\r\n\r\n@external\r\ndef set_paloma():\r\n    assert msg.sender == self.compass and self.paloma == empty(bytes32) and len(msg.data) == 36, \"Invalid\"\r\n    _paloma: bytes32 = convert(slice(msg.data, 4, 32), bytes32)\r\n    self.paloma = _paloma\r\n    log SetPaloma(_paloma)\r\n\r\n@external\r\ndef update_refund_wallet(new_refund_wallet: address):\r\n    assert msg.sender == self.compass and len(msg.data) == 68 and convert(slice(msg.data, 36, 32), bytes32) == self.paloma, \"Unauthorized\"\r\n    old_refund_wallet: address = self.refund_wallet\r\n    self.refund_wallet = new_refund_wallet\r\n    log UpdateRefundWallet(old_refund_wallet, new_refund_wallet)\r\n\r\n@external\r\ndef update_gas_fee(new_gas_fee: uint256):\r\n    assert msg.sender == self.compass and len(msg.data) == 68 and convert(slice(msg.data, 36, 32), bytes32) == self.paloma, \"Unauthorized\"\r\n    old_gas_fee: uint256 = self.gas_fee\r\n    self.gas_fee = new_gas_fee\r\n    log UpdateGasFee(old_gas_fee, new_gas_fee)\r\n\r\n@external\r\ndef update_service_fee_collector(new_service_fee_collector: address):\r\n    assert msg.sender == self.compass and len(msg.data) == 68 and convert(slice(msg.data, 36, 32), bytes32) == self.paloma, \"Unauthorized\"\r\n    old_service_fee_collector: address = self.service_fee_collector\r\n    self.service_fee_collector = new_service_fee_collector\r\n    log UpdateServiceFeeCollector(old_service_fee_collector, new_service_fee_collector)\r\n\r\n@external\r\ndef update_service_fee(new_service_fee: uint256):\r\n    assert msg.sender == self.compass and len(msg.data) == 68 and convert(slice(msg.data, 36, 32), bytes32) == self.paloma, \"Unauthorized\"\r\n    old_service_fee: uint256 = self.service_fee\r\n    self.service_fee = new_service_fee\r\n    log UpdateServiceFee(old_service_fee, new_service_fee)\r\n\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    pass", "ABI": "[{\"name\":\"BotStarted\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"debt\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"N\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"leverage\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"deleverage_percentage\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"health_threshold\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"expire\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"callbacker\",\"type\":\"address\",\"indexed\":false},{\"name\":\"callback_args\",\"type\":\"uint256[]\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"BotRepayed\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"return_amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateBlueprint\",\"inputs\":[{\"name\":\"old_blueprint\",\"type\":\"address\",\"indexed\":false},{\"name\":\"new_blueprint\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateCompass\",\"inputs\":[{\"name\":\"old_compass\",\"type\":\"address\",\"indexed\":false},{\"name\":\"new_compass\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateRefundWallet\",\"inputs\":[{\"name\":\"old_refund_wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"new_refund_wallet\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetPaloma\",\"inputs\":[{\"name\":\"paloma\",\"type\":\"bytes32\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateGasFee\",\"inputs\":[{\"name\":\"old_gas_fee\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"new_gas_fee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateServiceFeeCollector\",\"inputs\":[{\"name\":\"old_service_fee_collector\",\"type\":\"address\",\"indexed\":false},{\"name\":\"new_service_fee_collector\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateServiceFee\",\"inputs\":[{\"name\":\"old_service_fee\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"new_service_fee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_blueprint\",\"type\":\"address\"},{\"name\":\"_compass\",\"type\":\"address\"},{\"name\":\"controller_factory\",\"type\":\"address\"},{\"name\":\"router\",\"type\":\"address\"},{\"name\":\"_refund_wallet\",\"type\":\"address\"},{\"name\":\"_gas_fee\",\"type\":\"uint256\"},{\"name\":\"_service_fee_collector\",\"type\":\"address\"},{\"name\":\"_service_fee\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"create_bot\",\"inputs\":[{\"name\":\"swap_infos\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"route\",\"type\":\"address[11]\"},{\"name\":\"swap_params\",\"type\":\"uint256[5][5]\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expected\",\"type\":\"uint256\"},{\"name\":\"pools\",\"type\":\"address[5]\"}]},{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"debt\",\"type\":\"uint256\"},{\"name\":\"N\",\"type\":\"uint256\"},{\"name\":\"callbacker\",\"type\":\"address\"},{\"name\":\"callback_args\",\"type\":\"uint256[]\"},{\"name\":\"leverage\",\"type\":\"uint256\"},{\"name\":\"deleverage_percentage\",\"type\":\"uint256\"},{\"name\":\"health_threshold\",\"type\":\"uint256\"},{\"name\":\"expire\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"repay_bot\",\"inputs\":[{\"name\":\"bots\",\"type\":\"address[]\"},{\"name\":\"callbackers\",\"type\":\"address[]\"},{\"name\":\"callback_args\",\"type\":\"uint256[][]\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"state\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"health\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_compass\",\"inputs\":[{\"name\":\"new_compass\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_blueprint\",\"inputs\":[{\"name\":\"new_blueprint\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_paloma\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_refund_wallet\",\"inputs\":[{\"name\":\"new_refund_wallet\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_gas_fee\",\"inputs\":[{\"name\":\"new_gas_fee\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_service_fee_collector\",\"inputs\":[{\"name\":\"new_service_fee_collector\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_service_fee\",\"inputs\":[{\"name\":\"new_service_fee\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"blueprint\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"compass\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"bot_to_owner\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"refund_wallet\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gas_fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"service_fee_collector\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"service_fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"paloma\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}]}]", "ContractName": "Curve Leverage Bot Factory", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "00000000000000000000000010cd32b433e77ac75206897101267656bbed4ea7000000000000000000000000b01cc20fe02723d43822819ec57fcbadf31f1537000000000000000000000000c9332fdcb1c491dcc683bae86fe3cb70360738bc000000000000000000000000f0d4c12a5768d806021f80a262b4d39d26c58b8d0000000000000000000000006dc0a87638cd75cc700ccdb226c7ab6c054bc70b00000000000000000000000000000000000000000000000000354a6ba7a180000000000000000000000000007a16ff8270133f063aab6c9977183d9e7283542800000000000000000000000000000000000000000000000000071afd498d0000", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": ""}