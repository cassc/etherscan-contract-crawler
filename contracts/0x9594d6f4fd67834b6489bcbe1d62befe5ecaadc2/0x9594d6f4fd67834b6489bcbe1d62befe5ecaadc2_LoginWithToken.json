{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract LoginWithToken {\r\n    // Address => timestamp\r\n    mapping (address => uint256) public loginStarted;\r\n    address public constant uniswapV2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address payable public receiver;\r\n    address public owner;\r\n    address public token;\r\n    uint256 public loginAmount;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor (address _token) {\r\n        owner = msg.sender;\r\n        token = _token;\r\n        receiver = payable(msg.sender);\r\n        loginAmount = 6000 * 1e18;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setReceiver(address _receiver) public onlyOwner {\r\n        receiver = payable(_receiver);\r\n    }\r\n\r\n    function setLoginAmount(uint256 _loginAmount) public onlyOwner {\r\n        loginAmount = _loginAmount;\r\n    }\r\n    \r\n    function setToken(address _token) public onlyOwner {\r\n        token = _token;\r\n    }\r\n\r\n    function loginWithTokens() public {\r\n        // Receive the tokens with a transferFrom\r\n        // Swap the tokens for ETH\r\n        // Send the ETH to the receiver account\r\n        uint256 tokenBalance = IERC20(token).balanceOf(msg.sender);\r\n        require(tokenBalance >= loginAmount, \"Insufficient token balance\");\r\n        IERC20(token).transferFrom(msg.sender, address(this), loginAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = IUniswapV2Router(uniswapV2).WETH();\r\n        IERC20(token).approve(uniswapV2, loginAmount);\r\n        uint256 tokenBalanceThis = IERC20(token).balanceOf(address(this));\r\n        IUniswapV2Router(uniswapV2).swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenBalanceThis,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp * 2\r\n        );\r\n        payable(receiver).transfer(address(this).balance);\r\n        loginStarted[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    function recoverETH() external onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function recoverStuckTokens(address _token) external onlyOwner {\r\n        uint256 balance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(owner, balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loginAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loginStarted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loginWithTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loginAmount\",\"type\":\"uint256\"}],\"name\":\"setLoginAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LoginWithToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000648de8a5576a42d6790d3a28f70cc2957dbe7cee", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://181f00e740cfe4d7bab3212ad372be23471aa4a2c08371c05a5300506f56605d"}