{"SourceCode": "pragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/GSN/Context.sol\r\n// SPDX-License-Identifier: MIT\r\n// File: contracts/token/ERC20/IERC20.sol\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/utils/Address.sol\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20.sol\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IVault is IERC20 {\r\n    function token() external view returns (address);\r\n\r\n    function claimInsurance() external; // NOTE: Only yDelegatedVault implements this\r\n\r\n    function getRatio() external view returns (uint256);\r\n\r\n    function deposit(uint256) external;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function earn() external;\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function flashLoan(address, uint256, bytes calldata) external;\r\n\r\n    function loanFee() external view returns (uint256);\r\n\r\n    function loanFeeMax() external view returns (uint256);\r\n}\r\n\r\ninterface ICurveFi_2 {\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\r\n    external;\r\n\r\n    function remove_liquidity_imbalance(\r\n        uint256[2] calldata amounts,\r\n        uint256 max_burn_amount\r\n    ) external;\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts)\r\n    external;\r\n\r\n    function exchange(\r\n        int128 from,\r\n        int128 to,\r\n        uint256 _from_amount,\r\n        uint256 _min_to_amount\r\n    ) external;\r\n\r\n    function balances(int128) external view returns (uint256);\r\n}\r\n\r\ninterface ICurveFi_3 {\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\r\n    external;\r\n\r\n    function remove_liquidity_imbalance(\r\n        uint256[3] calldata amounts,\r\n        uint256 max_burn_amount\r\n    ) external;\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts)\r\n    external;\r\n\r\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external;\r\n\r\n    function exchange(\r\n        int128 from,\r\n        int128 to,\r\n        uint256 _from_amount,\r\n        uint256 _min_to_amount\r\n    ) external;\r\n\r\n    function balances(uint256) external view returns (uint256);\r\n}\r\n\r\ninterface ICurveFi_4 {\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\r\n    external;\r\n\r\n    function remove_liquidity_imbalance(\r\n        uint256[4] calldata amounts,\r\n        uint256 max_burn_amount\r\n    ) external;\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts)\r\n    external;\r\n\r\n    function exchange(\r\n        int128 from,\r\n        int128 to,\r\n        uint256 _from_amount,\r\n        uint256 _min_to_amount\r\n    ) external;\r\n\r\n    function balances(int128) external view returns (uint256);\r\n}\r\n\r\ninterface ICurveZap_4 {\r\n    function add_liquidity(\r\n        uint256[4] calldata uamounts,\r\n        uint256 min_mint_amount\r\n    ) external;\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[4] calldata min_uamounts)\r\n    external;\r\n\r\n    function remove_liquidity_imbalance(\r\n        uint256[4] calldata uamounts,\r\n        uint256 max_burn_amount\r\n    ) external;\r\n\r\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\r\n    external\r\n    returns (uint256);\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_uamount\r\n    ) external;\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_uamount,\r\n        bool donate_dust\r\n    ) external;\r\n\r\n    function withdraw_donated_dust() external;\r\n\r\n    function coins(int128 arg0) external returns (address);\r\n\r\n    function underlying_coins(int128 arg0) external returns (address);\r\n\r\n    function curve() external returns (address);\r\n\r\n    function token() external returns (address);\r\n}\r\n\r\ninterface ICurveGauge {\r\n    function deposit(uint256 _value) external;\r\n\r\n    function deposit(uint256 _value, address addr) external;\r\n\r\n    function balanceOf(address arg0) external view returns (uint256);\r\n\r\n    function withdraw(uint256 _value) external;\r\n\r\n    function withdraw(uint256 _value, bool claim_rewards) external;\r\n\r\n    function claim_rewards() external;\r\n\r\n    function claim_rewards(address addr) external;\r\n\r\n    function claimable_tokens(address addr) external returns (uint256);\r\n\r\n    function claimable_reward(address addr) external view returns (uint256);\r\n\r\n    function integrate_fraction(address arg0) external view returns (uint256);\r\n}\r\n\r\ninterface ICurveMintr {\r\n    function mint(address) external;\r\n\r\n    function minted(address arg0, address arg1) external view returns (uint256);\r\n}\r\n\r\ninterface ICurveVotingEscrow {\r\n    function locked(address arg0)\r\n    external\r\n    view\r\n    returns (int128 amount, uint256 end);\r\n\r\n    function locked__end(address _addr) external view returns (uint256);\r\n\r\n    function create_lock(uint256, uint256) external;\r\n\r\n    function increase_amount(uint256) external;\r\n\r\n    function increase_unlock_time(uint256 _unlock_time) external;\r\n\r\n    function withdraw() external;\r\n\r\n    function smart_wallet_checker() external returns (address);\r\n}\r\n\r\ninterface ICurveSmartContractChecker {\r\n    function wallets(address) external returns (bool);\r\n\r\n    function approveWallet(address _wallet) external;\r\n}\r\n\r\ninterface UniswapRouterV2 {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 blockTimestampLast\r\n    );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n    external\r\n    returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n    external\r\n    view\r\n    returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\ninterface IController {\r\n    function vaults(address) external view returns (address);\r\n\r\n    function rewards() external view returns (address);\r\n\r\n    function devfund() external view returns (address);\r\n\r\n    function treasury() external view returns (address);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function withdraw(address, uint256) external;\r\n\r\n    function earn(address, uint256) external;\r\n}\r\n\r\ninterface IMasterchef {\r\n    function BONUS_MULTIPLIER() external view returns (uint256);\r\n\r\n    function add(\r\n        uint256 _allocPoint,\r\n        address _lpToken,\r\n        bool _withUpdate\r\n    ) external;\r\n\r\n    function bonusEndBlock() external view returns (uint256);\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    function dev(address _devaddr) external;\r\n\r\n    function devFundDivRate() external view returns (uint256);\r\n\r\n    function devaddr() external view returns (address);\r\n\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n\r\n    function getMultiplier(uint256 _from, uint256 _to)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function massUpdatePools() external;\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function pendingMM(uint256 _pid, address _user)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function mm() external view returns (address);\r\n\r\n    function mmPerBlock() external view returns (uint256);\r\n\r\n    function poolInfo(uint256)\r\n    external\r\n    view\r\n    returns (\r\n        address lpToken,\r\n        uint256 allocPoint,\r\n        uint256 lastRewardBlock,\r\n        uint256 accMMPerShare\r\n    );\r\n\r\n    function poolLength() external view returns (uint256);\r\n\r\n    function renounceOwnership() external;\r\n\r\n    function set(\r\n        uint256 _pid,\r\n        uint256 _allocPoint,\r\n        bool _withUpdate\r\n    ) external;\r\n\r\n    function setBonusEndBlock(uint256 _bonusEndBlock) external;\r\n\r\n    function setDevFundDivRate(uint256 _devFundDivRate) external;\r\n\r\n    function setMMPerBlock(uint256 _mmPerBlock) external;\r\n\r\n    function startBlock() external view returns (uint256);\r\n\r\n    function totalAllocPoint() external view returns (uint256);\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function updatePool(uint256 _pid) external;\r\n\r\n    function userInfo(uint256, address)\r\n    external\r\n    view\r\n    returns (uint256 amount, uint256 rewardDebt);\r\n\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n\r\n    function notifyBuybackReward(uint256 _amount) external;\r\n}\r\n\r\n// Strategy Contract Basics\r\nabstract contract StrategyBase {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    // Perfomance fee 30% to buyback\r\n    uint256 public performanceFee = 30000;\r\n    uint256 public constant performanceMax = 100000;\r\n\r\n    // Withdrawal fee 0.2% to buyback\r\n    // - 0.14% to treasury\r\n    // - 0.06% to dev fund\r\n    uint256 public treasuryFee = 140;\r\n    uint256 public constant treasuryMax = 100000;\r\n\r\n    uint256 public devFundFee = 60;\r\n    uint256 public constant devFundMax = 100000;\r\n\r\n    // delay yield profit realization\r\n    uint256 public delayBlockRequired = 1000;\r\n    uint256 public lastHarvestBlock;\r\n    uint256 public lastHarvestInWant;\r\n\r\n    // buyback ready\r\n    bool public buybackEnabled = true;\r\n    address public mmToken = 0xa283aA7CfBB27EF0cfBcb2493dD9F4330E0fd304;\r\n    address public masterChef = 0xf8873a6080e8dbF41ADa900498DE0951074af577;\r\n\r\n    //curve rewards\r\n    address public crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\r\n\r\n    // Tokens\r\n    address public want;\r\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // buyback coins\r\n    address public constant usdcBuyback = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public constant zrxBuyback = 0xE41d2489571d322189246DaFA5ebDe1F4699F498;\r\n\r\n    // User accounts\r\n    address public governance;\r\n    address public controller;\r\n    address public strategist;\r\n    address public timelock;\r\n\r\n    // Dex\r\n    address public univ2Router2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    //Sushi\r\n    address constant public sushiRouter = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n\r\n    constructor(\r\n        address _want,\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _timelock\r\n    ) public {\r\n        require(_want != address(0));\r\n        require(_governance != address(0));\r\n        require(_strategist != address(0));\r\n        require(_controller != address(0));\r\n        require(_timelock != address(0));\r\n\r\n        want = _want;\r\n        governance = _governance;\r\n        strategist = _strategist;\r\n        controller = _controller;\r\n        timelock = _timelock;\r\n    }\r\n\r\n    // **** Modifiers **** //\r\n\r\n    modifier onlyBenevolent {\r\n        require(\r\n            msg.sender == tx.origin ||\r\n            msg.sender == governance ||\r\n            msg.sender == strategist\r\n        );\r\n        _;\r\n    }\r\n\r\n    // **** Views **** //\r\n\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfPool() public virtual view returns (uint256);\r\n\r\n    function balanceOf() public view returns (uint256) {\r\n        uint256 delayReduction;\r\n        uint256 currentBlock = block.number;\r\n        if (delayBlockRequired > 0 && lastHarvestInWant > 0 && currentBlock.sub(lastHarvestBlock) < delayBlockRequired){\r\n            uint256 diffBlock = lastHarvestBlock.add(delayBlockRequired).sub(currentBlock);\r\n            delayReduction = lastHarvestInWant.mul(diffBlock).mul(1e18).div(delayBlockRequired).div(1e18);\r\n        }\r\n        return balanceOfWant().add(balanceOfPool()).sub(delayReduction);\r\n    }\r\n\r\n    function getName() external virtual pure returns (string memory);\r\n\r\n    // **** Setters **** //\r\n\r\n    function setDelayBlockRequired(uint256 _delayBlockRequired) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        delayBlockRequired = _delayBlockRequired;\r\n    }\r\n\r\n    function setDevFundFee(uint256 _devFundFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        devFundFee = _devFundFee;\r\n    }\r\n\r\n    function setTreasuryFee(uint256 _treasuryFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        treasuryFee = _treasuryFee;\r\n    }\r\n\r\n    function setPerformanceFee(uint256 _performanceFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        performanceFee = _performanceFee;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setTimelock(address _timelock) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        timelock = _timelock;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function setMmToken(address _mmToken) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        mmToken = _mmToken;\r\n    }\r\n\r\n    function setBuybackEnabled(bool _buybackEnabled) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        buybackEnabled = _buybackEnabled;\r\n    }\r\n\r\n    function setMasterChef(address _masterChef) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        masterChef = _masterChef;\r\n    }\r\n\r\n    // **** State mutations **** //\r\n    function deposit() public virtual;\r\n\r\n    function withdraw(IERC20 _asset) external virtual returns (uint256 balance);\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function _withdrawNonWantAsset(IERC20 _asset) internal returns (uint256 balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n\r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint256 _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint256 _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n\r\n        uint256 _feeDev = _amount.mul(devFundFee).div(devFundMax);\r\n        uint256 _feeTreasury = _amount.mul(treasuryFee).div(treasuryMax);\r\n\r\n        if (buybackEnabled == true) {\r\n            // we want buyback mm using LP token\r\n            (address _buybackPrinciple, uint256 _buybackAmount) = _convertWantToBuyback(_feeDev.add(_feeTreasury));\r\n            buybackAndNotify(_buybackPrinciple, _buybackAmount);\r\n        } else {\r\n            IERC20(want).safeTransfer(IController(controller).devfund(), _feeDev);\r\n            IERC20(want).safeTransfer(IController(controller).treasury(), _feeTreasury);\r\n        }\r\n\r\n        address _vault = IController(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n\r\n        IERC20(want).safeTransfer(_vault, _amount.sub(_feeDev).sub(_feeTreasury));\r\n    }\r\n\r\n    // buyback MM and notify MasterChef\r\n    function buybackAndNotify(address _buybackPrinciple, uint256 _buybackAmount) internal {\r\n        if (buybackEnabled == true) {\r\n            _swapUniswap(_buybackPrinciple, mmToken, _buybackAmount);\r\n            uint256 _mmBought = IERC20(mmToken).balanceOf(address(this));\r\n            IERC20(mmToken).safeTransfer(masterChef, _mmBought);\r\n            IMasterchef(masterChef).notifyBuybackReward(_mmBought);\r\n        }\r\n    }\r\n\r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint256 balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _withdrawAll();\r\n\r\n        balance = IERC20(want).balanceOf(address(this));\r\n\r\n        address _vault = IController(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n    }\r\n\r\n    function _withdrawAll() internal {\r\n        _withdrawSome(balanceOfPool());\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\r\n\r\n    // convert LP to buyback principle token\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal virtual returns (address, uint256);\r\n\r\n    // each harvest need to update `lastHarvestBlock=block.number` and `lastHarvestInWant=yield profit converted to want for re-invest`\r\n    function harvest() public virtual;\r\n\r\n    // **** Emergency functions ****\r\n\r\n    function execute(address _target, bytes memory _data)\r\n    public\r\n    payable\r\n    returns (bytes memory response)\r\n    {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        require(_target != address(0), \"!target\");\r\n\r\n        // call contract in current context\r\n        assembly {\r\n            let succeeded := delegatecall(\r\n            sub(gas(), 5000),\r\n            _target,\r\n            add(_data, 0x20),\r\n            mload(_data),\r\n            0,\r\n            0\r\n            )\r\n            let size := returndatasize()\r\n\r\n            response := mload(0x40)\r\n            mstore(\r\n            0x40,\r\n            add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\r\n            )\r\n            mstore(response, size)\r\n            returndatacopy(add(response, 0x20), 0, size)\r\n\r\n            switch iszero(succeeded)\r\n            case 1 {\r\n            // throw if delegatecall failed\r\n                revert(add(response, 0x20), size)\r\n            }\r\n        }\r\n    }\r\n\r\n    // **** Internal functions ****\r\n    function _swapUniswap(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(_to != address(0));\r\n\r\n        if (_amount > 0){\r\n            // Swap with uniswap\r\n            IERC20(_from).safeApprove(univ2Router2, 0);\r\n            IERC20(_from).safeApprove(univ2Router2, _amount);\r\n\r\n            address[] memory path;\r\n            address[] memory sushipath;\r\n            if (_to == mmToken && buybackEnabled == true) {\r\n                if (_from == usdcBuyback){\r\n                    path = new address[](2);\r\n                    path[0] = _from;\r\n                    path[1] = _to;\r\n                }else{\r\n                    path = new address[](3);\r\n                    path[0] = _from;\r\n                    path[1] = usdcBuyback;\r\n                    path[2] = _to;\r\n                }\r\n            } else{\r\n                if (_from == weth || _to == weth) {\r\n                    path = new address[](2);\r\n                    path[0] = _from;\r\n                    path[1] = _to;\r\n                }else if(_from == crv){\r\n                    path = new address[](3);\r\n                    path[0] = _from;\r\n                    path[1] = weth;\r\n                    path[2] = _to;\r\n\r\n                    sushipath = new address[](3);\r\n                    sushipath[0] = _from;\r\n                    sushipath[1] = weth;\r\n                    sushipath[2] = _to;\r\n                }else{\r\n                    path = new address[](3);\r\n                    path[0] = _from;\r\n                    path[1] = weth;\r\n                    path[2] = _to;\r\n                }\r\n            }\r\n\r\n            uint256 _sushiOut = 0;\r\n            if (sushipath.length > 0){\r\n                _sushiOut = UniswapRouterV2(sushiRouter).getAmountsOut(_amount, sushipath)[sushipath.length-1];\r\n            }\r\n            uint256 _uniOut = UniswapRouterV2(univ2Router2).getAmountsOut(_amount, path)[path.length-1];\r\n\r\n            bool useSushi = false;\r\n            UniswapRouterV2 router;\r\n            if (_sushiOut > _uniOut){\r\n                IERC20(_from).safeApprove(sushiRouter, 0);\r\n                IERC20(_from).safeApprove(sushiRouter, _amount);\r\n                router = UniswapRouterV2(sushiRouter);\r\n                useSushi = true;\r\n            }else {\r\n                router = UniswapRouterV2(univ2Router2);\r\n            }\r\n\r\n            router.swapExactTokensForTokens(\r\n                _amount,\r\n                0,\r\n                useSushi ? sushipath : path,\r\n                address(this),\r\n                now\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// Base contract for Curve based staking contract interfaces\r\nabstract contract StrategyCurveBase is StrategyBase {\r\n    // curve dao\r\n    address public gauge;\r\n    address public curve;\r\n    address public mintr = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\r\n\r\n    // stablecoins\r\n    address public dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n    address public usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address public susd = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\r\n\r\n    // bitcoins\r\n    address public wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n    address public renbtc = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\r\n\r\n\r\n    // How much CRV tokens to keep\r\n    uint256 public keepCRV = 0;\r\n    uint256 public keepCRVMax = 10000;\r\n\r\n    constructor(\r\n        address _curve,\r\n        address _gauge,\r\n        address _want,\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _timelock\r\n    )\r\n    public\r\n    StrategyBase(_want, _governance, _strategist, _controller, _timelock)\r\n    {\r\n        curve = _curve;\r\n        gauge = _gauge;\r\n\r\n        IERC20(_want).safeApprove(gauge, uint256(-1));\r\n    }\r\n\r\n    // **** Getters ****\r\n\r\n    function balanceOfPool() public override view returns (uint256) {\r\n        return ICurveGauge(gauge).balanceOf(address(this));\r\n    }\r\n\r\n    function getHarvestable() external returns (uint256) {\r\n        return ICurveGauge(gauge).claimable_tokens(address(this));\r\n    }\r\n\r\n    function getMostPremium() public virtual view returns (address, uint256);\r\n\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal virtual override returns (address, uint256);\r\n\r\n    // **** Setters ****\r\n\r\n    function setKeepCRV(uint256 _keepCRV) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        keepCRV = _keepCRV;\r\n    }\r\n\r\n    // **** State Mutation functions ****\r\n\r\n    function deposit() public override {\r\n        uint256 _want = IERC20(want).balanceOf(address(this));\r\n        if (_want > 0) {\r\n            ICurveGauge(gauge).deposit(_want);\r\n        }\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount)\r\n    internal\r\n    override\r\n    returns (uint256)\r\n    {\r\n        ICurveGauge(gauge).withdraw(_amount);\r\n        return _amount;\r\n    }\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external override returns (uint256 balance) {\r\n        balance = _withdrawNonWantAsset(_asset);\r\n    }\r\n}\r\n\r\ncontract StrategyCurveUSDPv1 is StrategyCurveBase {\r\n    // Curve stuff\r\n    address public usdp_wrapped_pool = 0x3c8cAee4E09296800f8D29A68Fa3837e2dae4940;\r\n    address public usdp_pool = 0x42d7025938bEc20B69cBae5A77421082407f053A;\r\n    address public usdp_gauge = 0x055be5DDB7A925BfEF3417FC157f53CA77cA7222;\r\n    address public usdp_crv = 0x7Eb40E450b9655f4B3cC4259BCC731c63ff55ae6;\r\n    address public three_pool = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\r\n\r\n    constructor(\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _timelock\r\n    )\r\n    public\r\n    StrategyCurveBase(\r\n        usdp_wrapped_pool,\r\n        usdp_gauge,\r\n        usdp_crv,\r\n        _governance,\r\n        _strategist,\r\n        _controller,\r\n        _timelock\r\n    )\r\n    {\r\n        IERC20(usdc).safeApprove(usdp_wrapped_pool, uint256(-1));\r\n        IERC20(usdp_crv).safeApprove(usdp_wrapped_pool, uint256(-1));\r\n    }\r\n\r\n    // **** Views ****\r\n\r\n    function getMostPremium()\r\n    public\r\n    override\r\n    view\r\n    returns (address, uint256)\r\n    {\r\n        return (usdc, 2);\r\n    }\r\n\r\n    function getName() external override pure returns (string memory) {\r\n        return \"StrategyCurveUSDPv1\";\r\n    }\r\n\r\n    // **** State Mutations ****\r\n\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal override returns (address, uint256){\r\n        (address to, uint256 toIndex) = getMostPremium();\r\n        ICurveFi_3(curve).remove_liquidity_one_coin(_lpAmount, int128(toIndex), 0);\r\n        uint256 _to = IERC20(to).balanceOf(address(this));\r\n        return (to, _to);\r\n    }\r\n\r\n    function harvest() public onlyBenevolent override {\r\n        // Anyone can harvest it at any given time.\r\n        // I understand the possibility of being frontrun\r\n        // But ETH is a dark forest, and I wanna see how this plays out\r\n        // i.e. will be be heavily frontrunned?\r\n        //      if so, a new strategy will be deployed.\r\n\r\n        // stablecoin we want to convert to\r\n        (address to, uint256 toIndex) = getMostPremium();\r\n\r\n        // Collects crv tokens\r\n        // Don't bother voting in v1\r\n        ICurveMintr(mintr).mint(gauge);\r\n        uint256 _crv = IERC20(crv).balanceOf(address(this));\r\n        if (_crv > 0) {\r\n            // x% is sent back to the rewards holder\r\n            // to be used to lock up in as veCRV in a future date\r\n            uint256 _keepCRV = _crv.mul(keepCRV).div(keepCRVMax);\r\n            if (_keepCRV > 0) {\r\n                IERC20(crv).safeTransfer(\r\n                    IController(controller).treasury(),\r\n                    _keepCRV\r\n                );\r\n            }\r\n            _crv = _crv.sub(_keepCRV);\r\n            _swapUniswap(crv, to, _crv);\r\n        }\r\n\r\n        // Adds liquidity to curve.fi's pool\r\n        // to get back want (usdp3crv)\r\n        uint256 _to = IERC20(to).balanceOf(address(this));\r\n        uint256 _buybackAmount = _to.mul(performanceFee).div(performanceMax);\r\n        if (_to > 0) {\r\n            if (buybackEnabled == true && _to > 0) {\r\n                _to = _to.mul(performanceMax.sub(performanceFee)).div(performanceMax);\r\n            }\r\n\r\n            uint256[4] memory liquidity;\r\n            liquidity[toIndex] = _to;\r\n            ICurveFi_4(curve).add_liquidity(liquidity, 0);\r\n        }\r\n\r\n        uint256 _want = IERC20(want).balanceOf(address(this));\r\n        if (buybackEnabled == true && _buybackAmount > 0) {\r\n            buybackAndNotify(to, _buybackAmount);\r\n        } else {\r\n            // We want to get back usdp3crv\r\n            if (_want > 0) {\r\n                // Performance Fees goes to treasury\r\n                IERC20(want).safeTransfer(IController(controller).treasury(), _want.mul(performanceFee).div(performanceMax));\r\n            }\r\n        }\r\n\r\n        // re-invest to compounding profit\r\n        if (_want > 0) {\r\n            lastHarvestBlock = block.number;\r\n            lastHarvestInWant = IERC20(want).balanceOf(address(this));\r\n            deposit();\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayBlockRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostPremium\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepCRVMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestInWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buybackEnabled\",\"type\":\"bool\"}],\"name\":\"setBuybackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delayBlockRequired\",\"type\":\"uint256\"}],\"name\":\"setDelayBlockRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFundFee\",\"type\":\"uint256\"}],\"name\":\"setDevFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keepCRV\",\"type\":\"uint256\"}],\"name\":\"setKeepCRV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterChef\",\"type\":\"address\"}],\"name\":\"setMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mmToken\",\"type\":\"address\"}],\"name\":\"setMmToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"susd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"three_pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"univ2Router2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcBuyback\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdp_crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdp_gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdp_pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdp_wrapped_pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zrxBuyback\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StrategyCurveUSDPv1", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000043229759e12efbe3e2a0fb0510b15e516d0464420000000000000000000000000bd1d668d8e83d14252f2e01d5873df77a6511f00000000000000000000000004bf5059065541a2b176500928e91fbfd0b121d070000000000000000000000005dae9b27313670663b34ac8bffd18825bb9df736", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e6b80a3e202597df3de8ee3b491347fce88558983acebb1a9e6df434ebce6dc6"}