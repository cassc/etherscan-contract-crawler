{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFACTORY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IFACTORY {\\n    function proofRevenueAddress() external view returns (address);\\n\\n    function proofRewardPoolAddress() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IProofReflectionTokenCutter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../libraries/ProofReflectionFactoryFees.sol\\\";\\n\\ninterface IProofReflectionTokenCutter is IERC20, IERC20Metadata {\\n    struct BaseData {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint256 initialSupply;\\n        uint256 percentToLP;\\n        address owner;\\n        address devWallet;\\n        address routerAddress;\\n        address initialProofAdmin;\\n        uint256 antiSnipeDuration;\\n    }\\n\\n    function setBasicData(\\n        BaseData memory _baseData,\\n        ProofReflectionFactoryFees.allFees memory fees\\n    ) external;\\n\\n    function changeIsTxLimitExempt(\\n        address holder,\\n        bool exempt\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITeamFinanceLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface ITeamFinanceLocker {\\n    function lockToken(\\n        address _tokenAddress,\\n        address _withdrawalAddress,\\n        uint256 _amount,\\n        uint256 _unlockTime,\\n        bool _mintNFT,\\n        address referrer\\n    ) external payable returns (uint256 _id);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITokenCutter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface ITokenCutter {\\n    function swapTradingStatus() external;\\n\\n    function setLaunchedAt() external;\\n\\n    function cancelToken() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n}\"\r\n    },\r\n    \"contracts/libraries/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/ProofReflectionFactoryFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nlibrary ProofReflectionFactoryFees {\\n    struct allFees {\\n        uint256 reflectionFee;\\n        uint256 reflectionFeeOnSell;\\n        uint256 lpFee;\\n        uint256 lpFeeOnSell;\\n        uint256 devFee;\\n        uint256 devFeeOnSell;\\n    }\\n}\"\r\n    },\r\n    \"contracts/proofReflectionFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./libraries/Context.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./libraries/ProofReflectionFactoryFees.sol\\\";\\nimport \\\"./interfaces/ITeamFinanceLocker.sol\\\";\\nimport \\\"./interfaces/ITokenCutter.sol\\\";\\nimport \\\"./interfaces/IFACTORY.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IProofReflectionTokenCutter.sol\\\";\\nimport \\\"./tokenCutters/ProofReflectionTokenCutter.sol\\\";\\n\\ncontract ProofReflectionFactory is Ownable {\\n    struct ProofToken {\\n        bool status;\\n        address pair;\\n        address owner;\\n        uint256 unlockTime;\\n        uint256 lockId;\\n    }\\n\\n    struct TokenParam {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint256 initialSupply;\\n        uint256 percentToLP;\\n        uint256 initialReflectionFee;\\n        uint256 initialReflectionFeeOnSell;\\n        uint256 initialLpFee;\\n        uint256 initialLpFeeOnSell;\\n        uint256 initialDevFee;\\n        uint256 initialDevFeeOnSell;\\n        uint256 unlockTime;\\n        address devWallet;\\n        uint256 antiSnipeDuration;\\n    }\\n\\n    mapping(address => ProofToken) public validatedPairs;\\n\\n    address public proofAdmin;\\n    address public routerAddress;\\n    address public lockerAddress;\\n    address payable public revenueAddress;\\n    address payable public rewardPoolAddress;\\n\\n    event TokenCreated(address _address);\\n\\n    constructor(\\n        address initialRouterAddress,\\n        address initialLockerAddress,\\n        address initialRewardPoolAddress,\\n        address initialRevenueAddress\\n    ) {\\n        routerAddress = initialRouterAddress;\\n        lockerAddress = initialLockerAddress;\\n        proofAdmin = msg.sender;\\n        revenueAddress = payable(initialRevenueAddress);\\n        rewardPoolAddress = payable(initialRewardPoolAddress);\\n    }\\n\\n    function createToken(TokenParam memory tokenParam_) external payable {\\n        require(\\n            tokenParam_.unlockTime >= block.timestamp + 30 days,\\n            \\\"unlock under 30 days\\\"\\n        );\\n        require(msg.value >= 1 ether, \\\"not enough LP\\\");\\n        require(tokenParam_.antiSnipeDuration <= 36, \\\"36 sec anti-snipe max\\\");\\n\\n        //create token\\n\\n        ProofReflectionFactoryFees.allFees\\n            memory fees = ProofReflectionFactoryFees.allFees(\\n                tokenParam_.initialReflectionFee,\\n                tokenParam_.initialReflectionFeeOnSell,\\n                tokenParam_.initialLpFee,\\n                tokenParam_.initialLpFeeOnSell,\\n                tokenParam_.initialDevFee,\\n                tokenParam_.initialDevFeeOnSell\\n            );\\n\\n        ProofReflectionTokenCutter newToken = new ProofReflectionTokenCutter();\\n        IProofReflectionTokenCutter(address(newToken)).setBasicData(\\n            IProofReflectionTokenCutter.BaseData(\\n                tokenParam_.tokenName,\\n                tokenParam_.tokenSymbol,\\n                tokenParam_.initialSupply,\\n                tokenParam_.percentToLP,\\n                msg.sender,\\n                tokenParam_.devWallet,\\n                routerAddress,\\n                proofAdmin,\\n                tokenParam_.antiSnipeDuration\\n            ),\\n            fees\\n        );\\n        emit TokenCreated(address(newToken));\\n\\n        //add liquidity\\n        newToken.approve(routerAddress, type(uint256).max);\\n        IUniswapV2Router02 router = IUniswapV2Router02(routerAddress);\\n        router.addLiquidityETH{value: msg.value}(\\n            address(newToken),\\n            newToken.balanceOf(address(this)),\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp + 111\\n        );\\n\\n        // disable trading\\n        newToken.swapTradingStatus();\\n\\n        validatedPairs[address(newToken)] = ProofToken(\\n            false,\\n            newToken.pair(),\\n            msg.sender,\\n            tokenParam_.unlockTime,\\n            0\\n        );\\n    }\\n\\n    function finalizeToken(address tokenAddress) public payable {\\n        require(validatedPairs[tokenAddress].owner == msg.sender, \\\"!owner\\\");\\n        require(validatedPairs[tokenAddress].status == false, \\\"validated\\\");\\n\\n        address _pair = validatedPairs[tokenAddress].pair;\\n        uint256 _unlockTime = validatedPairs[tokenAddress].unlockTime;\\n        IERC20(_pair).approve(lockerAddress, type(uint256).max);\\n\\n        uint256 lpBalance = IERC20(_pair).balanceOf(address(this));\\n\\n        uint256 _lockId = ITeamFinanceLocker(lockerAddress).lockToken{\\n            value: msg.value\\n        }(_pair, msg.sender, lpBalance, _unlockTime, false, 0x0000000000000000000000000000000000000000);\\n        validatedPairs[tokenAddress].lockId = _lockId;\\n        \\n        //enable trading\\n        ITokenCutter(tokenAddress).swapTradingStatus();\\n        ITokenCutter(tokenAddress).setLaunchedAt();\\n\\n        validatedPairs[tokenAddress].status = true;\\n    }\\n\\n    function cancelToken(address tokenAddress) public {\\n        require(validatedPairs[tokenAddress].owner == msg.sender, \\\"!owner\\\");\\n        require(validatedPairs[tokenAddress].status == false, \\\"validated\\\");\\n\\n        address _pair = validatedPairs[tokenAddress].pair;\\n        address _owner = validatedPairs[tokenAddress].owner;\\n\\n        IUniswapV2Router02 router = IUniswapV2Router02(routerAddress);\\n        IERC20(_pair).approve(routerAddress, type(uint256).max);\\n        uint256 _lpBalance = IERC20(_pair).balanceOf(address(this));\\n\\n        // enable transfer and allow router to exceed tx limit to remove liquidity\\n        ITokenCutter(tokenAddress).cancelToken();\\n        router.removeLiquidityETH(\\n            address(tokenAddress),\\n            _lpBalance,\\n            0,\\n            0,\\n            _owner,\\n            block.timestamp\\n        );\\n\\n        // disable transfer of token\\n        ITokenCutter(tokenAddress).swapTradingStatus();\\n\\n        delete validatedPairs[tokenAddress];\\n    }\\n\\n    function distributeExcessFunds() external onlyOwner {\\n        (bool sent, ) = revenueAddress.call{value: address(this).balance / 2}(\\\"\\\");\\n        require(sent, \\\"\\\");\\n        (bool sent1, ) = rewardPoolAddress.call{value: address(this).balance}(\\\"\\\");\\n        require(sent1, \\\"\\\");\\n    }\\n\\n    function proofRevenueAddress() external view returns (address) {\\n        return revenueAddress;\\n    }\\n\\n    function proofRewardPoolAddress() external view returns (address) {\\n        return rewardPoolAddress;\\n    }\\n\\n    function setLockerAddress(address newlockerAddress) external onlyOwner {\\n        lockerAddress = newlockerAddress;\\n    }\\n\\n    function setRouterAddress(address newRouterAddress) external onlyOwner {\\n        routerAddress = payable(newRouterAddress);\\n    }\\n\\n    function setProofAdmin(address newProofAdmin) external onlyOwner {\\n        proofAdmin = newProofAdmin;\\n    }\\n\\n    function setRevenueAddress(address newRevenueAddress) external onlyOwner {\\n        revenueAddress = payable(newRevenueAddress);\\n    }\\n\\n    function setRewardPoolAddress(\\n        address newRewardPoolAddress\\n    ) external onlyOwner {\\n        rewardPoolAddress = payable(newRewardPoolAddress);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/tokenCutters/ProofReflectionTokenCutter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../libraries/Context.sol\\\";\\nimport \\\"../libraries/ProofReflectionFactoryFees.sol\\\";\\nimport \\\"../interfaces/IFACTORY.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../interfaces/IProofReflectionTokenCutter.sol\\\";\\n\\ncontract ProofReflectionTokenCutter is Context, IProofReflectionTokenCutter {\\n    //This token was created with PROOF, and audited by Solidity Finance \u2014 https://proofplatform.io/projects\\n    mapping(address => uint256) private _rOwned;\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint256 private constant MAX = ~uint256(0);\\n\\n    uint256 private _tTotal;\\n    uint256 private _rTotal;\\n    uint256 private _tFeeTotal;\\n    uint256 public swapThreshold;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private constant _decimals = 9;\\n\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\\n    address public proofAdmin;\\n\\n    mapping(address => bool) public isFeeExempt;\\n    mapping (address => bool) private _isExcluded;\\n    mapping(address => bool) public isTxLimitExempt;\\n\\n    address[] private _excluded;\\n\\n    uint256 public launchedAt;\\n\\n    uint256 public reflectionFee;\\n    uint256 public lpFee;\\n    uint256 public devFee;\\n\\n    uint256 public reflectionFeeOnSell;\\n    uint256 public lpFeeOnSell;\\n    uint256 public devFeeOnSell;\\n\\n    uint256 public totalFee;\\n    uint256 public totalFeeIfSelling;\\n\\n    uint256 private txnCurrentTaxFee = 0;\\n    uint256 private txnCurrentReflectionFee = 0;\\n\\n    uint256 public revenueFee = 2;\\n\\n    IUniswapV2Router02 public router;\\n    address public pair;\\n    address public factory;\\n    address public tokenOwner;\\n    address payable public devWallet;\\n\\n    bool public inSwapAndLiquify;\\n    bool public swapAndLiquifyEnabled = true;\\n    bool public tradingStatus = true;\\n\\n    mapping(address => bool) private bots;\\n\\n    uint256 public antiSnipeDuration;\\n    uint256 public antiSnipeEndTime;\\n\\n    uint256 public _maxTxAmount;\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    modifier onlyProofAdmin() {\\n        require(proofAdmin == _msgSender(), \\\"Caller is not the proofAdmin\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(tokenOwner == _msgSender(), \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(factory == _msgSender(), \\\"Caller is not the factory\\\");\\n        _;\\n    }\\n    \\n\\n    function setBasicData(\\n        BaseData memory _baseData,\\n        ProofReflectionFactoryFees.allFees memory fees\\n    ) external onlyFactory {\\n        _name = _baseData.tokenName;\\n        _symbol = _baseData.tokenSymbol;\\n        _tTotal += _baseData.initialSupply;\\n        _rTotal = (MAX - (MAX % _tTotal));\\n        swapThreshold = (_baseData.initialSupply * 5) / 4000;\\n\\n        //Initial supply\\n        require(_baseData.percentToLP >= 70, \\\"Too Low\\\");\\n        uint256 forLP = (_baseData.initialSupply * _baseData.percentToLP) / 100; //95%\\n        uint256 forOwner = _baseData.initialSupply - forLP; //5%\\n\\n        _maxTxAmount = (_baseData.initialSupply * 1) / 100;\\n\\n        router = IUniswapV2Router02(_baseData.routerAddress);\\n        pair = IUniswapV2Factory(router.factory()).createPair(\\n            router.WETH(),\\n            address(this)\\n        );\\n\\n        _allowances[address(this)][address(router)] = MAX;\\n\\n        isFeeExempt[address(this)] = true;\\n        isFeeExempt[factory] = true;\\n\\n        isTxLimitExempt[address(this)] = true;\\n        isTxLimitExempt[_baseData.owner] = true;\\n        isTxLimitExempt[pair] = true;\\n        isTxLimitExempt[factory] = true;\\n        isTxLimitExempt[DEAD] = true;\\n        isTxLimitExempt[ZERO] = true;\\n\\n        _isExcluded[pair] = true;\\n\\n        reflectionFee = fees.reflectionFee;\\n        lpFee = fees.lpFee;\\n        devFee = fees.devFee;\\n\\n        reflectionFeeOnSell = fees.reflectionFeeOnSell;\\n        lpFeeOnSell = fees.lpFeeOnSell;\\n        devFeeOnSell = fees.devFeeOnSell;\\n\\n        totalFee = devFee + lpFee + revenueFee;\\n        totalFeeIfSelling = devFeeOnSell + lpFeeOnSell + revenueFee;\\n\\n        require(totalFee <= 12, \\\"Too high\\\");\\n        require(totalFeeIfSelling <= 17, \\\"Too high\\\");\\n\\n        tokenOwner = _baseData.owner;\\n        devWallet = payable(_baseData.devWallet);\\n        proofAdmin = _baseData.initialProofAdmin;\\n\\n        _rOwned[address(0)] += _rTotal;\\n\\n        _transferStandard(address(0), _msgSender(), forLP);\\n        _transferStandard(address(0), _baseData.owner, forOwner);\\n\\n        antiSnipeDuration = _baseData.antiSnipeDuration;\\n\\n        emit Transfer(address(0), _msgSender(), forLP);\\n        emit Transfer(address(0), _baseData.owner, forOwner);\\n    }\\n\\n    //proofAdmin functions\\n    function updateProofAdmin(address newAdmin) public virtual onlyProofAdmin {\\n        proofAdmin = newAdmin;\\n    }\\n\\n    //Factory functions\\n    function swapTradingStatus() public onlyFactory {\\n        tradingStatus = !tradingStatus;\\n    }\\n\\n    function setLaunchedAt() public onlyFactory {\\n        require(launchedAt == 0, \\\"already launched\\\");\\n        launchedAt = block.timestamp;\\n        antiSnipeEndTime = block.timestamp + antiSnipeDuration;\\n    }\\n\\n    function cancelToken() public onlyFactory {\\n        isFeeExempt[address(router)] = true;\\n        isTxLimitExempt[address(router)] = true;\\n        isTxLimitExempt[tokenOwner] = true;\\n        tradingStatus = true;\\n        swapAndLiquifyEnabled = false;\\n    }\\n\\n    function changeFees(\\n        uint256 initialReflectionFee,\\n        uint256 initialReflectionFeeOnSell,\\n        uint256 initialLpFee,\\n        uint256 initialLpFeeOnSell,\\n        uint256 initialDevFee,\\n        uint256 initialDevFeeOnSell\\n    ) external onlyOwner {\\n        reflectionFee = initialReflectionFee;\\n        lpFee = initialLpFee;\\n        devFee = initialDevFee;\\n\\n        reflectionFeeOnSell = initialReflectionFeeOnSell;\\n        lpFeeOnSell = initialLpFeeOnSell;\\n        devFeeOnSell = initialDevFeeOnSell;\\n\\n        totalFee = devFee + lpFee + revenueFee;\\n        totalFeeIfSelling = devFeeOnSell + lpFeeOnSell + revenueFee;\\n\\n        require(totalFee + reflectionFee <= 12, \\\"Too high\\\");\\n        require(totalFeeIfSelling + reflectionFeeOnSell <= 17, \\\"Too high\\\");\\n    }\\n\\n    function reduceProofFee() external onlyOwner {\\n        require(revenueFee == 2, \\\"!already reduced\\\");\\n        require(launchedAt != 0, \\\"!launched\\\");\\n        require(block.timestamp >= launchedAt + 72 hours, \\\"too soon\\\");\\n\\n        revenueFee = 1;\\n        totalFee = devFee + lpFee + revenueFee;\\n        totalFeeIfSelling = devFeeOnSell + lpFeeOnSell + revenueFee;\\n    }\\n\\n    function adjustProofFee(uint256 _proofFee) external onlyProofAdmin {\\n        require(launchedAt != 0, \\\"!launched\\\");\\n        if (block.timestamp >= launchedAt + 72 hours) {\\n            require(_proofFee <= 1);\\n            revenueFee = _proofFee;\\n            totalFee = devFee + lpFee + revenueFee;\\n            totalFeeIfSelling = devFeeOnSell + lpFeeOnSell + revenueFee;\\n        } else {\\n            require(_proofFee <= 2);\\n            revenueFee = _proofFee;\\n            totalFee = devFee + lpFee + revenueFee;\\n            totalFeeIfSelling = devFeeOnSell + lpFeeOnSell + revenueFee;\\n        }\\n    }\\n\\n    function changeTxLimit(uint256 newLimit) external onlyOwner {\\n        require(launchedAt != 0, \\\"!launched\\\");\\n        require(newLimit >= (_tTotal * 5) / 1000, \\\"Min 0.5% limit\\\");\\n        require(newLimit <= (_tTotal * 3) / 100, \\\"Max 3% limit\\\");\\n        _maxTxAmount = newLimit;\\n    }\\n\\n    function changeIsFeeExempt(address holder, bool exempt) external onlyOwner {\\n        isFeeExempt[holder] = exempt;\\n    }\\n\\n    function changeIsTxLimitExempt(\\n        address holder,\\n        bool exempt\\n    ) external onlyOwner {\\n        isTxLimitExempt[holder] = exempt;\\n    }\\n\\n    function setDevWallet(address payable newDevWallet) external onlyOwner {\\n        devWallet = payable(newDevWallet);\\n    }\\n    \\n    function setOwnerWallet(address payable newOwnerWallet) external onlyOwner {\\n        tokenOwner = newOwnerWallet;\\n    }\\n\\n    function changeSwapBackSettings(\\n        bool enableSwapBack,\\n        uint256 newSwapBackLimit\\n    ) external onlyOwner {\\n        swapAndLiquifyEnabled = enableSwapBack;\\n        swapThreshold = newSwapBackLimit;\\n    }\\n\\n    function delBot(address notbot) external {\\n        address sender = _msgSender();\\n        require(\\n            sender == proofAdmin || sender == tokenOwner,\\n            \\\"Owanble: caller doesn't have permission\\\"\\n        );\\n        bots[notbot] = false;\\n    }\\n\\n    function excludeFromReward(address account) public onlyOwner {\\t\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\t\\n        if(_rOwned[account] > 0) {\\t\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\t\\n        }\\t\\n        _isExcluded[account] = true;\\t\\n        _excluded.push(account);\\t\\n    }\\t\\n\\n    function includeInReward(address account) external onlyOwner {\\t\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\t\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\t\\n            if (_excluded[i] == account) {\\t\\n                _excluded[i] = _excluded[_excluded.length - 1];\\t\\n                _tOwned[account] = 0;\\t\\n                _isExcluded[account] = false;\\t\\n                _excluded.pop();\\t\\n                break;\\t\\n            }\\t\\n        }\\t\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(\\t\\n        address account\\t\\n    ) public view virtual override returns (uint256) {\\t\\n        if (_isExcluded[account]) return _tOwned[account];\\t\\n        return tokenFromReflection(_rOwned[account]);\\t\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function tokenFromReflection(\\n        uint256 rAmount\\n    ) private view returns (uint256) {\\n        require(\\n            rAmount <= _rTotal,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n        uint256 currentRate = _getRate();\\n        return rAmount / currentRate;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        require(\\n            _allowances[sender][_msgSender()] >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()] - amount\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        require(!bots[sender] && !bots[recipient] && !bots[tx.origin]);\\n        if (antiSnipeEndTime != 0 && block.timestamp < antiSnipeEndTime) {\\n            bots[tx.origin] = true;\\n            if (recipient != tx.origin) {\\n                revert('antisnipe');\\n            }\\n        }\\n        if (recipient != pair || sender != pair) {\\n            require(\\n                amount <= _maxTxAmount ||\\n                    (isTxLimitExempt[sender] && isTxLimitExempt[recipient]),\\n                \\\"Max TX Amount\\\"\\n            );\\n        }\\n\\n        if (\\n            sender != tokenOwner &&\\n            recipient != tokenOwner &&\\n            !isTxLimitExempt[recipient]\\n        ) {\\n\\n            if (\\n                sender == pair &&\\n                recipient != address(router) &&\\n                !isFeeExempt[recipient]\\n            ) {\\n                require(tradingStatus, \\\"!trading\\\");\\n            }\\n        }\\n\\n        if (\\n            !inSwapAndLiquify &&\\n            sender != pair &&\\n            tradingStatus &&\\n            swapAndLiquifyEnabled &&\\n            balanceOf(address(this)) >= swapThreshold\\n        ) {\\n            swapTokensForEth();\\n        }\\n\\n        if (isFeeExempt[sender] || isFeeExempt[recipient]) {\\n            txnCurrentTaxFee = 0;\\n            txnCurrentReflectionFee = 0;\\n        } else if (recipient == pair) {\\n            txnCurrentTaxFee = totalFeeIfSelling;\\n            txnCurrentReflectionFee = reflectionFeeOnSell;\\n        } else if (sender == pair) {\\n            txnCurrentTaxFee = totalFee;\\n            txnCurrentReflectionFee = reflectionFee;\\n        } else {\\n            txnCurrentTaxFee = 0;\\n            txnCurrentReflectionFee = 0;\\n        }\\n\\n         _tokenTransfer(sender,recipient,amount);\\n    }\\n\\n    function _tokenTransfer(address sender, address recipient, uint256 amount) private {\\t\\n        \\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\t\\n            _transferFromExcluded(sender, recipient, amount);\\t\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\t\\n            _transferToExcluded(sender, recipient, amount);\\t\\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\\t\\n            _transferStandard(sender, recipient, amount);\\t\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\t\\n            _transferBothExcluded(sender, recipient, amount);\\t\\n        } else {\\t\\n            _transferStandard(sender, recipient, amount);\\t\\n        }\\n    }\\n\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tDev) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\\n        _tOwned[recipient] = _tOwned[recipient] + (tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);           \\n        _takeDev(tDev);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tDev) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender] - (tAmount);\\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);   \\n        _takeDev(tDev);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tDev) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender] - (tAmount);\\n        _rOwned[sender] = _rOwned[sender] - (rAmount);\\n        _tOwned[recipient] = _tOwned[recipient] + (tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient] + (rTransferAmount);        \\n        _takeDev(tDev);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }    \\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _takeDev(uint256 tDev) private {\\t\\n        uint256 currentRate = _getRate();\\t\\n        uint256 rDev = tDev * currentRate;\\t\\n        _rOwned[address(this)] = _rOwned[address(this)] + rDev;\\t\\n        if(_isExcluded[address(this)])\\t\\n            _tOwned[address(this)] = _tOwned[address(this)] + (tDev);\\t\\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal - rFee;\\n        _tFeeTotal = _tFeeTotal + tFee;\\n    }\\n\\n    function _transferStandard(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tDev\\n        ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender] - rAmount;\\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\\n        _takeDev(tDev);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _getValues(\\n        uint256 tAmount\\n    )\\n        private\\n        view\\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\\n    {\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tDev) = _getTValues(\\n            tAmount,\\n            txnCurrentReflectionFee,\\n            txnCurrentTaxFee\\n        );\\n        uint256 currentRate = _getRate();\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\n            tAmount,\\n            tFee,\\n            tDev,\\n            currentRate\\n        );\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tDev);\\n    }\\n\\n    function _getTValues(\\n        uint256 tAmount,\\n        uint256 _taxFee,\\n        uint256 _devFee\\n    ) private pure returns (uint256, uint256, uint256) {\\n        uint256 tFee = (tAmount * _taxFee) / 100;\\n        uint256 tDev = (tAmount * _devFee) / 100;\\n        uint256 tTransferAmount = tAmount - tFee - tDev;\\n        return (tTransferAmount, tFee, tDev);\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply / (tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;      \\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\n            rSupply = rSupply - (_rOwned[_excluded[i]]);\\n            tSupply = tSupply - (_tOwned[_excluded[i]]);\\n        }\\n        if (rSupply < _rTotal / (_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _getRValues(\\n        uint256 tAmount,\\n        uint256 tFee,\\n        uint256 tDev,\\n        uint256 currentRate\\n    ) private pure returns (uint256, uint256, uint256) {\\n        uint256 rAmount = tAmount * currentRate;\\n        uint256 rFee = tFee * currentRate;\\n        uint256 rDev = tDev * currentRate;\\n        uint256 rTransferAmount = rAmount - rFee - rDev;\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function swapTokensForEth() private lockTheSwap {\\n        uint256 tokensToLiquify = swapThreshold;\\n\\n        uint256 amountToLiquify = (tokensToLiquify * lpFee) / totalFee / 2;\\n        uint256 amountToSwap = tokensToLiquify - amountToLiquify;\\n        if (amountToSwap == 0) return;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n\\n        _approve(address(this), address(router), tokensToLiquify);\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountETH = address(this).balance;\\n        uint256 amountEthLiquidity = (amountETH * lpFee) / totalFee / 2;\\n\\n        if (amountToLiquify > 0) {\\n            router.addLiquidityETH{value: amountEthLiquidity}(\\n                address(this),\\n                amountToLiquify,\\n                0,\\n                0,\\n                0x000000000000000000000000000000000000dEaD,\\n                block.timestamp\\n            );\\n        }\\n        uint256 amountETHafterLP = address(this).balance;\\n\\n        uint256 devBalance = (amountETHafterLP * devFee) / totalFee;\\n        uint256 revenueBalance = (amountETHafterLP * revenueFee) / totalFee;\\n\\n        if (amountETH > 0) {\\n            if (revenueBalance > 0) {\\n                uint256 revenueSplit = revenueBalance / 2;\\n                (bool sent, ) = payable(IFACTORY(factory).proofRevenueAddress()).call{value: revenueSplit}(\\\"\\\");\\n                require(sent);\\n                (bool sent1, ) = payable(IFACTORY(factory).proofRewardPoolAddress()).call{value: revenueSplit}(\\\"\\\");\\n                require(sent1);\\n            }\\n            if (devBalance > 0) {\\n                (bool sent, ) = devWallet.call{value: devBalance}(\\\"\\\");\\n                require(sent, \\\"ETH transfer failed\\\");\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialLockerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialRewardPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialRevenueAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"cancelToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentToLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialReflectionFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDevFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"antiSnipeDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct ProofReflectionFactory.TokenParam\",\"name\":\"tokenParam_\",\"type\":\"tuple\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeExcessFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"finalizeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofRevenueAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofRewardPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlockerAddress\",\"type\":\"address\"}],\"name\":\"setLockerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newProofAdmin\",\"type\":\"address\"}],\"name\":\"setProofAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRevenueAddress\",\"type\":\"address\"}],\"name\":\"setRevenueAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardPoolAddress\",\"type\":\"address\"}],\"name\":\"setRewardPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouterAddress\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validatedPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ProofReflectionFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000e2fe530c047f2d85298b07d9333c05737f1435fb000000000000000000000000cf170d0b07a54844b471cbbe74d2af254245ab54000000000000000000000000e9b4d32f829951a3ce145d2caa84cf66af56ca5e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}