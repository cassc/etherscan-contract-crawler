{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/errors/Airdrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title AirdropErrors\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This file contains all custom errors for the Arcade Token airdrop contract.\\n * All errors are prefixed by  \\\"AA_\\\" for ArcadeAirdrop. Errors located in one place\\n * to make it possible to holistically look at all the failure cases.\\n */\\n\\n// ==================================== ARCADE AIRDROP ======================================\\n/// @notice All errors prefixed with AA_, to separate from other contracts in governance.\\n\\n/**\\n * @notice Ensure airdrop claim period has expired before reclaiming tokens.\\n */\\nerror AA_ClaimingNotExpired();\\n\\n/**\\n * @notice Cannot claim tokens after airdrop has expired.\\n */\\nerror AA_ClaimingExpired();\\n\\n/**\\n * @notice Cannot claim tokens multiple times.\\n */\\nerror AA_AlreadyClaimed();\\n\\n/**\\n * @notice Merkle proof not verified. User is not a participant in the airdrop.\\n */\\nerror AA_NonParticipant();\\n\\n/**\\n * @notice Zero address passed in where not allowed.\\n *\\n * @param addressType                The name of the parameter for which a zero\\n *                                   address was provided.\\n */\\nerror AA_ZeroAddress(string addressType);\\n\\n/**\\n * @notice Thrown when the merkle root is set to bytes32(0).\\n */\\nerror AA_NotInitialized();\\n\"\r\n    },\r\n    \"contracts/external/council/libraries/Authorizable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.0;\\n\\ncontract Authorizable {\\n    // This contract allows a flexible authorization scheme\\n\\n    // The owner who can change authorization status\\n    address public owner;\\n    // A mapping from an address to its authorization status\\n    mapping(address => bool) public authorized;\\n\\n    /// @dev We set the deployer to the owner\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /// @dev This modifier checks if the msg.sender is the owner\\n    modifier onlyOwner() {\\n\\n        require(msg.sender == owner, \\\"Sender not owner\\\");\\n        _;\\n\\n    }\\n\\n    /// @dev This modifier checks if an address is authorized\\n    modifier onlyAuthorized() {\\n        require(isAuthorized(msg.sender), \\\"Sender not Authorized\\\");\\n        _;\\n    }\\n\\n    /// @dev Returns true if an address is authorized\\n    /// @param who the address to check\\n    /// @return true if authorized false if not\\n    function isAuthorized(address who) public view returns (bool) {\\n        return authorized[who];\\n    }\\n\\n    /// @dev Privileged function authorize an address\\n    /// @param who the address to authorize\\n    function authorize(address who) external onlyOwner() {\\n        _authorize(who);\\n    }\\n\\n    /// @dev Privileged function to de authorize an address\\n    /// @param who The address to remove authorization from\\n    function deauthorize(address who) external onlyOwner() {\\n        authorized[who] = false;\\n    }\\n\\n    /// @dev Function to change owner\\n    /// @param who The new owner address\\n    function setOwner(address who) public onlyOwner() {\\n        owner = who;\\n    }\\n\\n    /// @dev Inheritable function which authorizes someone\\n    /// @param who the address to authorize\\n    function _authorize(address who) internal {\\n        authorized[who] = true;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/INFTBoostVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/NFTBoostVaultStorage.sol\\\";\\n\\ninterface INFTBoostVault {\\n    /**\\n     * @notice Events\\n     */\\n    event MultiplierSet(address tokenAddress, uint128 tokenId, uint128 multiplier, uint128 expiration);\\n    event WithdrawalsUnlocked();\\n    event AirdropContractUpdated(address newAirdropContract);\\n\\n    /**\\n     * @notice View functions\\n     */\\n    function getIsLocked() external view returns (uint256);\\n\\n    function getRegistration(address who) external view returns (NFTBoostVaultStorage.Registration memory);\\n\\n    function getMultiplier(address tokenAddress, uint128 tokenId) external view returns (uint128);\\n\\n    function getMultiplierExpiration(address tokenAddress, uint128 tokenId) external view returns (uint128);\\n\\n    function getAirdropContract() external view returns (address);\\n\\n    /**\\n     * @notice NFT boost vault functionality\\n     */\\n    function addNftAndDelegate(uint128 amount, uint128 tokenId, address tokenAddress, address delegatee) external;\\n\\n    function airdropReceive(address user, uint128 amount, address delegatee) external;\\n\\n    function delegate(address to) external;\\n\\n    function withdraw(uint128 amount) external;\\n\\n    function addTokens(uint128 amount) external;\\n\\n    function withdrawNft() external;\\n\\n    function updateNft(uint128 newTokenId, address newTokenAddress) external;\\n\\n    function updateVotingPower(address[] memory userAddresses) external;\\n\\n    /**\\n     * @notice Only Manager function\\n     */\\n    function setMultiplier(address tokenAddress, uint128 tokenId, uint128 multiplierValue, uint128 expiration) external;\\n\\n    /**\\n     * @notice Only Timelock function\\n     */\\n    function unlock() external;\\n\\n    /**\\n     * @notice Only Airdrop contract function\\n     */\\n    function setAirdropContract(address _newAirdropContract) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ArcadeMerkleRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/INFTBoostVault.sol\\\";\\n\\nimport {\\n    AA_ClaimingExpired,\\n    AA_AlreadyClaimed,\\n    AA_NonParticipant,\\n    AA_ZeroAddress,\\n    AA_NotInitialized\\n} from \\\"../errors/Airdrop.sol\\\";\\n\\n/**\\n * @title Arcade Merkle Rewards\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This contract validates merkle proofs and allows users to claim their airdrop. It is designed to\\n * be inherited by other contracts. This contract does not have a way to transfer tokens out of it\\n * or change the merkle root.\\n *\\n * As users claim their tokens, this contract will deposit them into a voting vault for use in\\n * Arcade Governance. When claiming, the user can delegate voting power to themselves or another\\n * account.\\n */\\nabstract contract ArcadeMerkleRewards {\\n    // ============================================ STATE ==============================================\\n\\n    // =================== Immutable references =====================\\n\\n    /// @notice the token to airdrop\\n    IERC20 public immutable token;\\n\\n    // ==================== Reward Claim State ======================\\n\\n    /// @notice the merkle root with deposits encoded into it as hash [address, amount]\\n    bytes32 public rewardsRoot;\\n\\n    /// @notice the timestamp expiration of the rewards root\\n    uint256 public expiration;\\n\\n    /// @notice user claim history by merkle root used to claim\\n    mapping(address => mapping(bytes32 => uint256)) public claimed;\\n\\n    /// @notice the voting vault vault which receives airdropped tokens\\n    INFTBoostVault public votingVault;\\n\\n    // ========================================== CONSTRUCTOR ===========================================\\n\\n    /**\\n     * @notice Initiate the contract with a merkle tree root, a token for distribution,\\n     *         an expiration time for claims, and the voting vault that tokens will be\\n     *         airdropped into.\\n     *\\n     * @param _rewardsRoot           The merkle root with deposits encoded into it as hash [address, amount]\\n     * @param _token                 The token to airdrop\\n     * @param _expiration            The expiration of the airdrop\\n     * @param _votingVault           The voting vault to deposit tokens to\\n     */\\n    constructor(bytes32 _rewardsRoot, IERC20 _token, uint256 _expiration, INFTBoostVault _votingVault) {\\n        if (_expiration <= block.timestamp) revert AA_ClaimingExpired();\\n        if (address(_token) == address(0)) revert AA_ZeroAddress(\\\"token\\\");\\n        if (address(_votingVault) == address(0)) revert AA_ZeroAddress(\\\"votingVault\\\");\\n\\n        rewardsRoot = _rewardsRoot;\\n        token = _token;\\n        expiration = _expiration;\\n        votingVault = _votingVault;\\n    }\\n\\n    // ===================================== CLAIM FUNCTIONALITY ========================================\\n\\n    /**\\n     * @notice Claims an amount of tokens in the tree and delegates to governance. If the user has\\n     *         not received an airdrop, they can claim it and delegate to themselves by passing in\\n     *         their address as the delegate or address(0). If a user has claimed before, they must\\n     *         use the same delegate address they are already delegating to.\\n     *\\n     * @param delegate               The address the user will delegate to\\n     * @param totalGrant             The total amount of tokens the user was granted\\n     * @param merkleProof            The merkle proof showing the user is in the merkle tree\\n     */\\n    function claimAndDelegate(address delegate, uint128 totalGrant, bytes32[] calldata merkleProof) external {\\n        if (rewardsRoot == bytes32(0)) revert AA_NotInitialized();\\n        // must be before the expiration time\\n        if (block.timestamp > expiration) revert AA_ClaimingExpired();\\n        // validate the withdraw\\n        _validateWithdraw(totalGrant, merkleProof);\\n\\n        // approve the voting vault to transfer tokens\\n        token.approve(address(votingVault), uint256(totalGrant));\\n        // deposit tokens in voting vault for this msg.sender and delegate\\n        votingVault.airdropReceive(msg.sender, totalGrant, delegate);\\n    }\\n\\n    // =========================================== HELPERS ==============================================\\n\\n    /**\\n     * @notice Validate a withdraw attempt by checking merkle proof and ensuring the user has not\\n     *         previously withdrawn.\\n     *\\n     * @param totalGrant             The total amount of tokens the user was granted\\n     * @param merkleProof            The merkle proof showing the user is in the merkle tree\\n     */\\n    function _validateWithdraw(uint256 totalGrant, bytes32[] memory merkleProof) internal {\\n        // validate proof and leaf hash\\n        bytes32 leafHash = keccak256(abi.encodePacked(msg.sender, totalGrant));\\n        if (!MerkleProof.verify(merkleProof, rewardsRoot, leafHash)) revert AA_NonParticipant();\\n\\n        // ensure the user has not already claimed the airdrop for this merkle root\\n        if (claimed[msg.sender][rewardsRoot] != 0) revert AA_AlreadyClaimed();\\n        claimed[msg.sender][rewardsRoot] = totalGrant;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/NFTBoostVaultStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title NFTBoostVaultStorage\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Contract based on Council's `Storage.sol` with modified scope to match the NFTBoostVault\\n * requirements. This library will return storage pointers based on a hashed name and type string.\\n */\\nlibrary NFTBoostVaultStorage {\\n    /**\\n    * This library follows a pattern which if solidity had higher level\\n    * type or macro support would condense quite a bit.\\n\\n    * Each basic type which does not support storage locations is encoded as\\n    * a struct of the same name capitalized and has functions 'load' and 'set'\\n    * which load the data and set the data respectively.\\n\\n    * All types will have a function of the form 'typename'Ptr('name') -> storage ptr\\n    * which will return a storage version of the type with slot which is the hash of\\n    * the variable name and type string. This pointer allows easy state management between\\n    * upgrades and overrides the default solidity storage slot system.\\n    */\\n\\n    /// @dev typehash of the 'MultiplierData' mapping\\n    bytes32 public constant MULTIPLIER_TYPEHASH = keccak256(\\\"mapping(address => mapping(uint128 => MultiplierData))\\\");\\n\\n    /// @dev typehash of the 'Registration' mapping\\n    bytes32 public constant REGISTRATION_TYPEHASH = keccak256(\\\"mapping(address => Registration)\\\");\\n\\n    /// @dev struct which represents 1 packed storage location (Registration)\\n    struct Registration {\\n        uint128 amount; // token amount\\n        uint128 latestVotingPower;\\n        uint128 withdrawn; // amount of tokens withdrawn from voting vault\\n        uint128 tokenId; // ERC1155 token id\\n        address tokenAddress; // the address of the ERC1155 token\\n        address delegatee;\\n    }\\n\\n    /// @dev struct which represents 1 packed storage location (MultiplierData)\\n    struct MultiplierData {\\n        uint128 multiplier;\\n        uint128 expiration;\\n    }\\n\\n    /**\\n     * @notice Returns the storage pointer for a mapping of address to registration data\\n     *\\n     * @param name                      The variable name for the pointer.\\n     *\\n     * @return data                     The mapping pointer.\\n     */\\n    function mappingAddressToRegistrationPtr(\\n        string memory name\\n    ) internal pure returns (mapping(address => Registration) storage data) {\\n        bytes32 offset = keccak256(abi.encodePacked(REGISTRATION_TYPEHASH, name));\\n        assembly {\\n            data.slot := offset\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the storage pointer for a mapping of address to a uint128 pair\\n     *\\n     * @param name                      The variable name for the pointer.\\n     *\\n     * @return data                     The mapping pointer.\\n     */\\n    function mappingAddressToMultiplierData(\\n        string memory name\\n    ) internal pure returns (mapping(address => mapping(uint128 => MultiplierData)) storage data) {\\n        bytes32 offset = keccak256(abi.encodePacked(MULTIPLIER_TYPEHASH, name));\\n        assembly {\\n            data.slot := offset\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/ArcadeAirdrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../external/council/libraries/Authorizable.sol\\\";\\n\\nimport \\\"../libraries/ArcadeMerkleRewards.sol\\\";\\n\\nimport { AA_ClaimingNotExpired, AA_ClaimingExpired, AA_ZeroAddress } from \\\"../errors/Airdrop.sol\\\";\\n\\n/**\\n * @title Arcade Airdrop\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * This contract receives tokens from the ArcadeTokenDistributor and facilitates airdrop claims.\\n * The contract is ownable, where the owner can reclaim any remaining tokens once the airdrop is\\n * over and also change the merkle root and its expiration at their discretion.\\n */\\ncontract ArcadeAirdrop is ArcadeMerkleRewards, Authorizable {\\n    using SafeERC20 for IERC20;\\n\\n    // ============================================= EVENTS =============================================\\n\\n    event SetMerkleRoot(bytes32 indexed merkleRoot, uint256 indexed expiration);\\n\\n    // ========================================== CONSTRUCTOR ===========================================\\n\\n    /**\\n     * @notice Initiate the contract with a merkle tree root, a token for distribution,\\n     *         an expiration time for claims, and the voting vault that tokens will be\\n     *         airdropped into.\\n     *\\n     * @param _merkleRoot           The merkle root with deposits encoded into it as hash [address, amount]\\n     * @param _token                The token to airdrop\\n     * @param _expiration           The expiration of the airdrop\\n     * @param _votingVault          The voting vault to deposit tokens to\\n     */\\n    constructor(\\n        bytes32 _merkleRoot,\\n        IERC20 _token,\\n        uint256 _expiration,\\n        INFTBoostVault _votingVault\\n    ) ArcadeMerkleRewards(_merkleRoot, _token, _expiration, _votingVault) {}\\n\\n    // ===================================== ADMIN FUNCTIONALITY ========================================\\n\\n    /**\\n     * @notice Allows governance to remove the funds in this contract once the airdrop is over.\\n     *         This function can only be called after the expiration time.\\n     *\\n     * @param destination        The address which will receive the remaining tokens\\n     */\\n    function reclaim(address destination) external onlyOwner {\\n        if (block.timestamp <= expiration) revert AA_ClaimingNotExpired();\\n        if (destination == address(0)) revert AA_ZeroAddress(\\\"destination\\\");\\n\\n        uint256 unclaimed = token.balanceOf(address(this));\\n        token.safeTransfer(destination, unclaimed);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to set a merkle root and its expiration timestamp. When creating\\n     *         a merkle trie, a users address should not be associated with multiple leaves.\\n     *\\n     * @param _merkleRoot        The new merkle root\\n     * @param _expiration        The new expiration timestamp for this root\\n     */\\n    function setMerkleRoot(bytes32 _merkleRoot, uint256 _expiration) external onlyOwner {\\n        if (_expiration <= block.timestamp) revert AA_ClaimingExpired();\\n\\n        rewardsRoot = _merkleRoot;\\n        expiration = _expiration;\\n\\n        emit SetMerkleRoot(_merkleRoot, _expiration);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"contract INFTBoostVault\",\"name\":\"_votingVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AA_AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AA_ClaimingExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AA_ClaimingNotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AA_NonParticipant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AA_NotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"addressType\",\"type\":\"string\"}],\"name\":\"AA_ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"SetMerkleRoot\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"totalGrant\",\"type\":\"uint128\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claimAndDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"deauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"reclaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingVault\",\"outputs\":[{\"internalType\":\"contract INFTBoostVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ArcadeAirdrop", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "495d278436486f1847ada9a1a5b34618b5d972192b692d8ca7f1bfccbc03fae2000000000000000000000000e020b01b6fbd83066aa2e8ee0ccd1eb8d9cc70bf0000000000000000000000000000000000000000000000000000000065d65927000000000000000000000000be951d1b791c6878eec5d9129adeb72a28d59e68", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}