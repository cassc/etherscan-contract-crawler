{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Exchange pool processor abstract contract.\\n * @dev Keeps an enumerable set of designated exchange addresses as well as a single primary pool address.\\n */\\ninterface IPoolManager {\\n    /// @notice Primary exchange pool address.\\n    function primaryPool() external view returns (address);\\n\\n    /**\\n     * @notice Check if the given address is pool address.\\n     * @param addr Address to check.\\n     * @return bool True if the given address is pool address.\\n     */\\n    function isPoolAddress(address addr) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITreasuryHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Treasury handler interface\\n * @dev Any class that implements this interface can be used for protocol-specific operations pertaining to the treasury.\\n */\\ninterface ITreasuryHandler {\\n    /**\\n     * @notice Perform operations before a transfer is executed.\\n     * @param benefactor Address of the benefactor.\\n     * @param beneficiary Address of the beneficiary.\\n     * @param amount Number of tokens in the transfer.\\n     */\\n    function processTreasury(address benefactor, address beneficiary, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/WarpedTreasuryHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n __      __  _____ _______________________________________   \\n/  \\\\    /  \\\\/  _  \\\\\\\\______   \\\\______   \\\\_   _____/\\\\______ \\\\  \\n\\\\   \\\\/\\\\/   /  /_\\\\  \\\\|       _/|     ___/|    __)_  |    |  \\\\ \\n \\\\        /    |    \\\\    |   \\\\|    |    |        \\\\ |    `   \\\\\\n  \\\\__/\\\\  /\\\\____|__  /____|_  /|____|   /_______  //_______  /\\n       \\\\/         \\\\/       \\\\/                  \\\\/         \\\\/ \\n */\\n\\npragma solidity 0.8.18;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IUniswapV2Router02} from \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IPoolManager} from \\\"./interfaces/IPoolManager.sol\\\";\\nimport {ITreasuryHandler} from \\\"./interfaces/ITreasuryHandler.sol\\\";\\n\\n/**\\n * @title Treasury handler contract\\n * @dev Sells tokens that have accumulated through taxes and sends the resulting ETH to the treasury. If\\n * `liquidityBasisPoints` has been set to a non-zero value, then that percentage will instead be added to the designated\\n * liquidity pool.\\n */\\ncontract WarpedTreasuryHandler is ITreasuryHandler, Ownable {\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    IPoolManager public poolManager;\\n\\n    /// @notice The Treasury address.\\n    address payable public treasury;\\n\\n    /// @notice The token that accumulates through taxes. This will be sold for ETH.\\n    IERC20 public token;\\n\\n    /// @notice The basis points of tokens to sell and add as liquidity to the pool.\\n    uint256 public liquidityBasisPoints;\\n\\n    /// @notice The maximum price impact the sell (initiated from this contract) may have.\\n    uint256 public priceImpactBasisPoints;\\n\\n    /// @dev swap contract balance if it's over this value\\n    uint256 private _taxSwap;\\n\\n    bool private _isInitialized;\\n\\n    /// @notice The Uniswap router that handles the sell and liquidity operations.\\n    IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    /// @notice Emitted when the basis points value of tokens to add as liquidity is updated.\\n    event LiquidityBasisPointsUpdated(uint256 oldBasisPoints, uint256 newBasisPoints);\\n\\n    /// @notice Emitted when the maximum price impact basis points value is updated.\\n    event PriceImpactBasisPointsUpdated(uint256 oldBasisPoints, uint256 newBasisPoints);\\n\\n    /// @notice Emitted when the treasury address is updated.\\n    event TreasuryAddressUpdated(address oldTreasuryAddress, address newTreasuryAddress);\\n\\n    /// @notice Emitted when _taxSwap is updated.\\n    event TaxSwapUpdated(uint256 newValue);\\n\\n    /// @notice Emitted when liquidity added successfully\\n    event LiquidityAdded(uint amountToken, uint amountETH, uint liquidity);\\n\\n    /// @notice Constructor of tax handler contract\\n    /// @param _poolManager exchange pool manager address\\n    constructor(IPoolManager _poolManager) {\\n        poolManager = _poolManager;\\n    }\\n\\n    /**\\n     * @notice Allow contract to accept ETH.\\n     */\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    /**\\n     * @param treasuryAddress Address of treasury to use.\\n     * @param tokenAddress Address of token to accumulate and sell.\\n     */\\n    function initialize(address treasuryAddress, address tokenAddress) external onlyOwner {\\n        require(!_isInitialized, \\\"Already initialized\\\");\\n        require(treasuryAddress != address(0), \\\"treasury is zero address\\\");\\n        require(tokenAddress != address(0), \\\"token address is zero address\\\");\\n\\n        treasury = payable(treasuryAddress);\\n        token = IERC20(tokenAddress);\\n        liquidityBasisPoints = 0;\\n        priceImpactBasisPoints = 500;\\n        _taxSwap = 10_000_000 * 10 ** 18;\\n        _isInitialized = true;\\n    }\\n\\n    /**\\n     * @notice Perform operations before a sell action (or a liquidity addition) is executed. The accumulated tokens are\\n     * then sold for ETH. In case the number of accumulated tokens exceeds the price impact percentage threshold, then\\n     * the number will be adjusted to stay within the threshold. If a non-zero percentage is set for liquidity, then\\n     * that percentage will be added to the primary liquidity pool instead of being sold for ETH and sent to the\\n     * treasury.\\n     * @param benefactor Address of the benefactor.\\n     * @param beneficiary Address of the beneficiary.\\n     * @param amount Number of tokens in the transfer.\\n     */\\n    function processTreasury(address benefactor, address beneficiary, uint256 amount) external override {\\n        if (!_isInitialized || benefactor == address(0x0)) {\\n            // skip when not initialized or mint\\n            return;\\n        }\\n\\n        // No actions are done on transfers other than sells.\\n        if (!poolManager.isPoolAddress(beneficiary)) {\\n            return;\\n        }\\n\\n        uint256 contractTokenBalance = token.balanceOf(address(this));\\n        if (contractTokenBalance > _taxSwap) {\\n            uint256 primaryPoolBalance = token.balanceOf(poolManager.primaryPool());\\n            uint256 maxPriceImpactSale = (primaryPoolBalance * priceImpactBasisPoints) / 10000;\\n\\n            contractTokenBalance = _taxSwap > amount ? amount : _taxSwap;\\n\\n            // Ensure the price impact is within reasonable bounds.\\n            if (contractTokenBalance > maxPriceImpactSale) {\\n                contractTokenBalance = maxPriceImpactSale;\\n            }\\n\\n            // The number of tokens to sell for liquidity purposes. This is calculated as follows:\\n            //\\n            //      B     P\\n            //  L = - * -----\\n            //      2   10000\\n            //\\n            // Where:\\n            //  L = tokens to sell for liquidity\\n            //  B = available token balance\\n            //  P = basis points of tokens to use for liquidity\\n            //\\n            // The number is divided by two to preserve the token side of the token/WETH pool.\\n            uint256 tokensForLiquidity = (contractTokenBalance * liquidityBasisPoints) / 20000;\\n            uint256 tokensForSwap = contractTokenBalance - tokensForLiquidity;\\n\\n            uint256 currentWeiBalance = address(this).balance;\\n            _swapTokensForEth(tokensForSwap);\\n            uint256 weiEarned = address(this).balance - currentWeiBalance;\\n\\n            // No need to divide this number, because that was only to have enough tokens remaining to pair with this\\n            // ETH value.\\n            uint256 weiForLiquidity = (weiEarned * liquidityBasisPoints) / 10000;\\n\\n            if (tokensForLiquidity > 0) {\\n                _addLiquidity(tokensForLiquidity, weiForLiquidity);\\n            }\\n\\n            // It's cheaper to get the active balance rather than calculating based off of the `currentWeiBalance` and\\n            // `weiForLiquidity` numbers.\\n            uint256 remainingWeiBalance = address(this).balance;\\n            if (remainingWeiBalance > 0) {\\n                treasury.sendValue(remainingWeiBalance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Set new liquidity basis points value.\\n     * @param newBasisPoints New liquidity basis points value. Cannot exceed 10,000 (i.e., 100%) as that would break the\\n     * calculation.\\n     */\\n    function setLiquidityBasisPoints(uint256 newBasisPoints) external onlyOwner {\\n        require(newBasisPoints <= 10000, \\\"Max is 10000\\\");\\n\\n        uint256 oldBasisPoints = liquidityBasisPoints;\\n        liquidityBasisPoints = newBasisPoints;\\n\\n        emit LiquidityBasisPointsUpdated(oldBasisPoints, newBasisPoints);\\n    }\\n\\n    /**\\n     * @notice Set new price impact basis points value.\\n     * @param newBasisPoints New price impact basis points value.\\n     */\\n    function setPriceImpactBasisPoints(uint256 newBasisPoints) external onlyOwner {\\n        require(newBasisPoints < 1500, \\\"Too high value\\\");\\n\\n        uint256 oldBasisPoints = priceImpactBasisPoints;\\n        priceImpactBasisPoints = newBasisPoints;\\n\\n        emit PriceImpactBasisPointsUpdated(oldBasisPoints, newBasisPoints);\\n    }\\n\\n    /**\\n     * @notice Set new treasury address.\\n     * @param newTreasuryAddress New treasury address.\\n     */\\n    function setTreasury(address newTreasuryAddress) external onlyOwner {\\n        require(newTreasuryAddress != address(0), \\\"Zero address\\\");\\n\\n        address oldTreasuryAddress = address(treasury);\\n        treasury = payable(newTreasuryAddress);\\n\\n        emit TreasuryAddressUpdated(oldTreasuryAddress, newTreasuryAddress);\\n    }\\n\\n    /**\\n     * @notice Withdraw any tokens or ETH stuck in the treasury handler.\\n     * @param tokenAddress Address of the token to withdraw. If set to the zero address, ETH will be withdrawn.\\n     * @param amount The number of tokens to withdraw.\\n     */\\n    function withdraw(address tokenAddress, uint256 amount) external onlyOwner {\\n        if (tokenAddress == address(0)) {\\n            treasury.sendValue(amount);\\n        } else {\\n            IERC20(tokenAddress).safeTransfer(address(treasury), amount);\\n        }\\n    }\\n\\n    function updateTaxSwap(uint256 taxSwap) external onlyOwner {\\n        require(taxSwap > 0, \\\"Zero taxSwap\\\");\\n        _taxSwap = taxSwap;\\n        emit TaxSwapUpdated(taxSwap);\\n    }\\n\\n    /**\\n     * @dev Swap accumulated tokens for ETH.\\n     * @param tokenAmount Number of tokens to swap for ETH.\\n     */\\n    function _swapTokensForEth(uint256 tokenAmount) internal {\\n        // The ETH/token pool is the primary pool. It always exists.\\n        address[] memory path = new address[](2);\\n        path[0] = address(token);\\n        path[1] = UNISWAP_V2_ROUTER.WETH();\\n\\n        // Call the getAmountsOut function to estimate the output amounts\\n        uint256[] memory amountsOut = UNISWAP_V2_ROUTER.getAmountsOut(tokenAmount, path);\\n        // Set the minimum amounts slightly below the estimated output amounts\\n        uint256 amountETHMin = amountsOut[1] - (amountsOut[1] / 100); // consider about 1 percent slippage\\n\\n        // Ensure the router can perform the swap for the designated number of tokens.\\n        token.safeApprove(address(UNISWAP_V2_ROUTER), tokenAmount);\\n        UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            amountETHMin,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Add liquidity to primary pool.\\n     * @param tokenAmount Number of tokens to add as liquidity.\\n     * @param weiAmount ETH value to pair with the tokens.\\n     */\\n    function _addLiquidity(uint256 tokenAmount, uint256 weiAmount) internal {\\n        // Ensure the router can perform the transfer for the designated number of tokens.\\n        token.safeApprove(address(UNISWAP_V2_ROUTER), tokenAmount);\\n\\n        // Create a dynamic array containing the token and ETH addresses in the desired order\\n        address[] memory path = new address[](2);\\n        path[0] = address(token);\\n        path[1] = UNISWAP_V2_ROUTER.WETH();\\n\\n        // Call the getAmountsOut function to estimate the output amounts\\n        uint256[] memory amountsOut = UNISWAP_V2_ROUTER.getAmountsOut(tokenAmount, path);\\n\\n        // Set the minimum amounts slightly below the estimated output amounts\\n        uint256 amountTokenMin = amountsOut[0] - (amountsOut[0] / 100); // consider about 1 percent slippage\\n        uint256 amountETHMin = amountsOut[1] - (amountsOut[1] / 100); // consider about 1 percent slippage\\n\\n        // Both minimum values are set to zero to allow for any form of slippage.\\n        (uint amountToken, uint amountETH, uint liquidity) = UNISWAP_V2_ROUTER.addLiquidityETH{value: weiAmount}(\\n            address(token),\\n            tokenAmount,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(treasury),\\n            block.timestamp\\n        );\\n        emit LiquidityAdded(amountToken, amountETH, liquidity);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"_poolManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBasisPoints\",\"type\":\"uint256\"}],\"name\":\"LiquidityBasisPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBasisPoints\",\"type\":\"uint256\"}],\"name\":\"PriceImpactBasisPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"TaxSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryAddress\",\"type\":\"address\"}],\"name\":\"TreasuryAddressUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceImpactBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"processTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setLiquidityBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setPriceImpactBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxSwap\",\"type\":\"uint256\"}],\"name\":\"updateTaxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WarpedTreasuryHandler", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000002747f8ef90dfa11e33fbc14a246bbd108ca68118", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}