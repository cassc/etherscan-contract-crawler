{"SourceCode": "// File: contracts/ownership/Ownable.sol\r\n\r\npragma solidity <6.0 >=0.4.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n// File: contracts/iotube/UniqueAppendOnlyAddressList.sol\r\n\r\npragma solidity <6.0 >=0.4.24;\r\n\r\n\r\ncontract UniqueAppendOnlyAddressList is Ownable {\r\n    struct ExistAndActive {\r\n        bool exist;\r\n        bool active;\r\n    }\r\n    uint256 internal num;\r\n    address[] internal items;\r\n    mapping(address => ExistAndActive) internal existAndActives;\r\n\r\n    function count() public view returns (uint256) {\r\n        return items.length;\r\n    }\r\n\r\n    function numOfActive() public view returns (uint256) {\r\n        return num;\r\n    }\r\n\r\n    function isExist(address _item) public view returns (bool) {\r\n        return existAndActives[_item].exist;\r\n    }\r\n\r\n    function isActive(address _item) public view returns (bool) {\r\n        return existAndActives[_item].active;\r\n    }\r\n\r\n    function activateItem(address _item) internal returns (bool) {\r\n        if (existAndActives[_item].active) {\r\n            return false;\r\n        }\r\n        if (!existAndActives[_item].exist) {\r\n            items.push(_item);\r\n        }\r\n        num++;\r\n        existAndActives[_item] = ExistAndActive(true, true);\r\n        return true;\r\n    }\r\n\r\n    function deactivateItem(address _item) internal returns (bool) {\r\n        if (existAndActives[_item].exist && existAndActives[_item].active) {\r\n            num--;\r\n            existAndActives[_item].active = false;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getActiveItems(uint256 offset, uint8 limit) public view returns (uint256 count_, address[] memory items_) {\r\n        require(offset < items.length && limit != 0);\r\n        items_ = new address[](limit);\r\n        for (uint256 i = 0; i < limit; i++) {\r\n            if (offset + i >= items.length) {\r\n                break;\r\n            }\r\n            if (existAndActives[items[offset + i]].active) {\r\n                items_[count_] = items[offset + i];\r\n                count_++;\r\n            }\r\n        }\r\n    }\r\n}\r\n// File: contracts/iotube/TokenList.sol\r\n\r\npragma solidity <6.0 >=0.4.24;\r\n\r\n\r\n\r\ncontract TokenList is Ownable, UniqueAppendOnlyAddressList {\r\n    event TokenAdded(address indexed token, uint256 minAmount, uint256 maxAmount);\r\n    event TokenUpdated(address indexed token, uint256 minAmount, uint256 maxAmount);\r\n    event TokenRemoved(address indexed token);\r\n\r\n    struct Setting {\r\n        uint256 minAmount;\r\n        uint256 maxAmount;\r\n    }\r\n\r\n    mapping(address => Setting) private settings;\r\n\r\n    function isAllowed(address _token) public view returns (bool) {\r\n        return isActive(_token);\r\n    }\r\n\r\n    function addToken(address _token, uint256 _min, uint256 _max) public onlyOwner returns (bool success_) {\r\n        if (activateItem(_token)) {\r\n            require(_min > 0 && _max > _min, \"invalid parameters\");\r\n            settings[_token] = Setting(_min, _max);\r\n            emit TokenAdded(_token, _min, _max);\r\n            success_ = true;\r\n        }\r\n    }\r\n\r\n    function addTokens(address[] memory _tokens, uint256[] memory _mins, uint256[] memory _maxs) public onlyOwner returns (bool success_) {\r\n        require(_tokens.length == _mins.length && _mins.length == _maxs.length, \"invalid parameters\");\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            if (addToken(_tokens[i], _mins[i], _maxs[i])) {\r\n                success_ = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeToken(address _token) public onlyOwner returns (bool success_) {\r\n        if (deactivateItem(_token)) {\r\n            emit TokenRemoved(_token);\r\n            success_ = true;\r\n        }\r\n    }\r\n\r\n    function setMinAmount(address _token, uint256 _minAmount) public onlyOwner {\r\n        require(isExist(_token), \"token not added\");\r\n        require(settings[_token].maxAmount >= _minAmount);\r\n        require(_minAmount > 0);\r\n        settings[_token].minAmount = _minAmount;\r\n    }\r\n\r\n    function setMaxAmount(address _token, uint256 _maxAmount) public onlyOwner {\r\n        require(isExist(_token), \"token not added\");\r\n        require(_maxAmount >= settings[_token].minAmount);\r\n        settings[_token].maxAmount = _maxAmount;\r\n    }\r\n\r\n    function minAmount(address _token) public view returns (uint256 minAmount_) {\r\n        if (isExist(_token)) {\r\n            minAmount_ = settings[_token].minAmount;\r\n        }\r\n    }\r\n\r\n    function maxAmount(address _token) public view returns (uint256 maxAmount_) {\r\n        if (isExist(_token)) {\r\n            maxAmount_ = settings[_token].maxAmount;\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_mins\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxs\",\"type\":\"uint256[]\"}],\"name\":\"addTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"limit\",\"type\":\"uint8\"}],\"name\":\"getActiveItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"items_\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_item\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_item\",\"type\":\"address\"}],\"name\":\"isExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfActive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenList", "CompilerVersion": "v0.5.12+commit.7709ece9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://33cd5aa8e6f8b99fa5dcac2cb88f894806bb1d128842acea9ace091f2465b289"}