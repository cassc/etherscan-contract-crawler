{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/Clonable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\n\\ninterface IClonable {\\n    function initialize() external;\\n    function version() external returns(uint256);  \\n}\\nabstract contract Clonable {\\n\\n    function initialize() public virtual;\\n\\n    function version() public pure virtual returns (uint256) {\\n        return 1;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/ERC1155Upgradable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.13;\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\nimport \\\"./IHandlerCallback.sol\\\";\\nimport \\\"./IsSerializedUpgradable.sol\\\";\\nimport \\\"./Clonable.sol\\\";\\n// import \\\"./Stream.sol\\\";\\n// import \\\"./EventableERC1155.sol\\\";\\nimport \\\"./ERC2981Royalties.sol\\\";\\nimport \\\"./UpgradableERC1155.sol\\\";\\nimport \\\"operator-filter-registry/src/upgradeable/OperatorFiltererUpgradeable.sol\\\";\\n\\ncontract ERC1155Upgradable is ERC165, IERC1155MetadataURI, IsSerializedUpgradable, Clonable, ERC2981Royalties, UpgradableERC1155, OperatorFiltererUpgradeable {\\n    using SafeMath for uint256;\\n    address payable public streamAddress;\\n\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n    mapping (uint256 => bool) private usedTokenId;\\n    // uint256[] public tokenIds;\\n\\n    string private name;\\n    string private symbol;\\n\\n    string private _uri;\\n\\n    mapping (address => mapping (uint => bool)) seenInBlock;\\n\\n    mapping(uint256 => mapping(address => uint256[])) internal tokenIdToOwnerToSerialNumbers;\\n\\n    address private serialManagerAddress;\\n    uint private managerUpgradeBlock;\\n\\n    constructor () {\\n        // __Ownable_init();\\n    }\\n\\n    function initialize() public override initializer {\\n        __Ownable_init();\\n        _registerInterface(0xd9b67a26); //_INTERFACE_ID_ERC1155\\n        _registerInterface(0x0e89341c); //_INTERFACE_ID_ERC1155_METADATA_URI\\n        initializeERC165();\\n        _registerInterface(0x2a55205a); // ERC2981\\n        __OperatorFilterer_init(0x9dC5EE2D52d014f8b81D662FA8f4CA525F27cD6b, true);\\n        _uri = \\\"https://api.emblemvault.io/s:evmetadata/meta/\\\"; \\n        serialized = true;\\n        overloadSerial = true;\\n        isClaimable = true;\\n    }\\n\\n    function fireEvent( address _to, uint256 _tokenId, uint256 _amount) public onlyOwner {\\n        emit TransferSingle(_msgSender(), address(0), _to, _tokenId, _amount);\\n    }\\n\\n    function fireEvents(address[] memory _to, uint256[] memory _tokenIds, uint256[] memory _amounts) public onlyOwner {\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            emit TransferSingle(_msgSender(), address(0), _to[i], _tokenIds[i], _amounts[i]);\\n        }\\n    }\\n\\n    function initSerialManager(address _address) public onlyOwner {\\n        require(serialManagerAddress == address(0), \\\"Already initialized\\\");\\n        serialManagerAddress = _address;\\n        managerUpgradeBlock = block.number;\\n    }\\n\\n    function updateSerialManagerBlock(uint _block) public onlyOwner {\\n        managerUpgradeBlock = _block;\\n    }\\n\\n    function version() public pure override returns(uint256) {\\n        return 12;\\n    }\\n\\n    function changeName(string calldata _name, string calldata _symbol) public onlyOwner {\\n      name = _name;\\n      symbol = _symbol;\\n    }\\n\\n    function mint(address _to, uint256 _tokenId, uint256 _amount) public onlyOwner {\\n        bytes memory empty = abi.encodePacked(uint256(0));        \\n        mintWithSerial(_to, _tokenId, _amount, empty);\\n    }\\n\\n    function mintWithSerial(address _to, uint256 _tokenId, uint256 _amount, bytes memory serialNumber) public onlyOwner {\\n        _mint(_to, _tokenId, _amount, serialNumber);\\n    }\\n\\n    function migrationMint(uint256 serialNumber, address account, uint256 tokenId) public onlyOwner {\\n        tokenIdToSerials[tokenId].push(serialNumber);\\n        serialToTokenId[serialNumber] = tokenId;\\n        serialToOwner[serialNumber] = account;\\n        tokenIdToOwnerToSerialNumbers[tokenId][account].push(serialNumber);\\n        // _balances[tokenId][account] = _balances[tokenId][account].add(1);\\n        emit TransferSingle(_msgSender(), address(0), account, tokenId, 1);\\n    }\\n\\n    function migrationMintMany(uint256[] memory serialNumber, address[] memory account, uint256[] memory tokenId) public onlyOwner {\\n        for (uint i = 0; i < serialNumber.length; i++) { \\n            tokenIdToSerials[tokenId[i]].push(serialNumber[i]);\\n            serialToTokenId[serialNumber[i]] = tokenId[i];\\n            serialToOwner[serialNumber[i]] = account[i];\\n            tokenIdToOwnerToSerialNumbers[tokenId[i]][account[i]].push(serialNumber[i]);\\n            // _balances[tokenId[i]][account[i]] = _balances[tokenId[i]][account[i]].add(1);\\n            emit TransferSingle(_msgSender(), address(0), account[i], tokenId[i], 1);\\n        }\\n    }\\n\\n    function mintBatch(address[] memory to, uint256[] memory ids, uint256[] memory amounts, bytes[] memory serialNumbers) public onlyOwner {\\n        _mintBatch(to, ids, amounts, serialNumbers);\\n    }\\n\\n    function burn(address _from, uint256 _tokenId, uint256 _amount) public {\\n        require(_from == _msgSender() || isApprovedForAll(_from, _msgSender()), 'Not Approved to burn');\\n        _burn(_from, _tokenId, _amount);\\n    }\\n\\n    function setURI(string memory newuri) public onlyOwner {\\n        _uri = newuri;\\n    }\\n    \\n    function uri(uint256 _tokenId) external view override returns (string memory) {\\n        return string(abi.encodePacked(_uri, toString(_tokenId)));\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function balanceOf(address account, uint256 tokenId) public view returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return tokenIdToOwnerToSerialNumbers[tokenId][account].length;\\n        // return _balances[id][account];\\n    }\\n    \\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids) public view returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            require(accounts[i] != address(0), \\\"ERC1155: batch balance query for the zero address\\\");\\n            // batchBalances[i] = _balances[ids[i]][accounts[i]];\\n            batchBalances[i] = tokenIdToOwnerToSerialNumbers[ids[i]][accounts[i]].length;\\n        }\\n        return batchBalances;\\n    }\\n    \\n    function setApprovalForAll(address operator, bool approved) public virtual onlyAllowedOperatorApproval(operator) {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n    \\n    function isApprovedForAll(address account, address operator) public view returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n    \\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory) public virtual onlyAllowedOperatorApproval(from) {\\n        bool _canBypass = canBypassForTokenId(id);\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()) || _canBypass, \\\"ERC1155: caller is not owner nor approved nor bypasser\\\");\\n\\n        address operator = _msgSender();\\n\\n        // _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        // _balances[id][to] = _balances[id][to].add(amount);\\n\\n        if (isSerialized()) {\\n            for (uint i = 0; i < amount; i++) {            \\n                uint256 serialNumber = getFirstSerialByOwner(from, id);\\n                if (serialNumber != 0 ) {\\n                    transferSerial(serialNumber, from, to);\\n                }\\n            }\\n        }\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n        if (registeredOfType[3].length > 0 && registeredOfType[3][0] != address(0)) {\\n            for (uint i = 0; i < amount; i++) {\\n                IHandlerCallback(registeredOfType[3][0]).executeCallbacks(from, to, id, IHandlerCallback.CallbackType.TRANSFER);\\n            }\\n        }\\n    }\\n\\n    function safeBatchTransferIdFrom(address from, address[] calldata tos, uint256 id, uint256 amount, bytes memory data) public virtual onlyAllowedOperator(from) {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        for (uint256 i = 0; i < tos.length; ++i) {\\n            address to = tos[i];\\n            require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n            safeTransferFrom(from, to, id, amount, data);\\n        }\\n    }\\n    \\n    function safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual onlyAllowedOperator(from) {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n            safeTransferFrom(from, to, id, amount, data);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n    }\\n\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory serialNumber) internal virtual {\\n        address operator = _msgSender();\\n        if (isSerialized()) {\\n            for (uint i = 0; i < amount; i++) {\\n                if (overloadSerial){\\n                    require(toUint256(serialNumber, 0) != 0, \\\"Must provide serial number\\\");\\n                    uint256 _serialNumber = amount > 1?  decodeUintArray(abi.encodePacked(serialNumber))[i]: decodeSingle(abi.encodePacked(serialNumber));\\n                    mintSerial(_serialNumber, account, id);\\n                } else {\\n                    mintSerial(id, account);\\n                }\\n            }            \\n        }\\n        if (registeredOfType[3].length > 0 && registeredOfType[3][0] == _msgSender()) {\\n            for (uint i = 0; i < amount; i++) {\\n                IHandlerCallback(_msgSender()).executeCallbacks(address(0), account, id, IHandlerCallback.CallbackType.MINT);\\n            }\\n        }\\n        // _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n    }\\n\\n    function _mintBatch(address[] memory to, uint256[] memory ids, uint256[] memory amounts, bytes[] memory serialNumbers) internal virtual {\\n        \\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            // If a particular id entry has multiple amounts, pack the serial numbers into a byte array\\n            // If there is only one amount, use the serial number as is\\n            // Example using web3.js:\\n            // let serialNumbers = [123, 456, 789];\\n            // let packedSerialNumbers = web3.eth.abi.encodeParameter('uint256[]', serialNumbers);\\n            bytes memory _serialNumber = amounts[i] > 1? abi.encode(decodeUintArray(serialNumbers[i])) : serialNumbers[i];\\n            _mint(to[i], ids[i], amounts[i], _serialNumber);\\n        }        \\n    }\\n\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        // _balances[id][account] = _balances[id][account].sub(\\n        //     amount,\\n        //     \\\"ERC1155: burn amount exceeds balance\\\"\\n        // );\\n\\n        if (isSerialized()) {\\n            uint256 serialNumber = getFirstSerialByOwner(account, id);\\n            if (serialNumber != 0 ) {\\n                burnSerial(serialNumber);\\n            }\\n        }\\n        if (registeredOfType[3].length > 0 && registeredOfType[3][0] != address(0)) {\\n            IHandlerCallback(registeredOfType[3][0]).executeCallbacks(account, address(0), id, IHandlerCallback.CallbackType.BURN);\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    function isSerialized() public view returns (bool) {\\n        return serialized;\\n    }\\n\\n    function isOverloadSerial() public view returns (bool) {\\n        return overloadSerial;\\n    }\\n\\n    function toggleSerialization() public onlyOwner {\\n        require(!hasSerialized, \\\"Already has serialized items\\\");\\n        serialized = !serialized;\\n    }\\n\\n    function toggleOverloadSerial() public onlyOwner {\\n        overloadSerial = !overloadSerial;\\n    }\\n\\n    function mintSerial(uint256 tokenId, address _owner) internal onlyOwner {\\n        uint256 serialNumber = uint256(keccak256(abi.encode(tokenId, _owner, serialCount)));\\n        _mintSerial(serialNumber, _owner, tokenId);\\n    }\\n\\n    function mintSerial(uint256 serialNumber, address _owner, uint256 tokenId) internal onlyOwner {\\n        _mintSerial(serialNumber, _owner, tokenId);\\n    }\\n\\n    function _mintSerial(uint256 serialNumber, address _owner, uint256 tokenId)internal onlyOwner {\\n        require(serialToTokenId[serialNumber] == 0 && serialToOwner[serialNumber] == address(0), \\\"Serial number already used\\\");\\n        tokenIdToSerials[tokenId].push(serialNumber);\\n        serialToTokenId[serialNumber] = tokenId;\\n        serialToOwner[serialNumber] = _owner;\\n        tokenIdToOwnerToSerialNumbers[tokenId][_owner].push(serialNumber);\\n        if (!hasSerialized) {\\n            hasSerialized = true;\\n        }\\n        serialCount++;\\n    }\\n    \\n    function transferSerial(uint256 serialNumber, address from, address to) internal {\\n        require(serialToOwner[serialNumber] == from, 'Not correct owner of serialnumber');\\n        uint256 tokenId = serialToTokenId[serialNumber];\\n        serialToOwner[serialNumber] = to;\\n        uint256[] storage serialNumbersTo = tokenIdToOwnerToSerialNumbers[tokenId][to];\\n        uint256[] storage serialNumbersFrom = tokenIdToOwnerToSerialNumbers[tokenId][from];\\n        for(uint i=0; i<serialNumbersFrom.length; i++) {\\n            if (serialNumbersFrom[i] == serialNumber) {\\n                serialNumbersFrom[i] = serialNumbersFrom[serialNumbersFrom.length-1];\\n                serialNumbersFrom.pop();\\n                serialNumbersTo.push(serialNumber);\\n                break;\\n            }\\n        }\\n    }\\n\\n    function burnSerial(uint256 serialNumber) internal {\\n        uint256[] storage serialNumbersFrom = tokenIdToOwnerToSerialNumbers[serialToTokenId[serialNumber]][serialToOwner[serialNumber]];\\n        uint256 tokenId = serialToTokenId[serialNumber];\\n        serialToOwner[serialNumber] = address(0);\\n        for(uint i=0; i<serialNumbersFrom.length; i++) {\\n            if (serialNumbersFrom[i] == serialNumber) {\\n                serialNumbersFrom[i] = serialNumbersFrom[serialNumbersFrom.length-1];\\n                serialNumbersFrom.pop();\\n                break;\\n            }\\n        }\\n        for(uint i=0; i<tokenIdToSerials[tokenId].length; i++) {\\n            if (tokenIdToSerials[tokenId][i] == serialNumber) {\\n                tokenIdToSerials[tokenId][i] = tokenIdToSerials[tokenId][tokenIdToSerials[tokenId].length - 1];\\n                tokenIdToSerials[tokenId].pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n\\n    function getSerial(uint256 tokenId, uint256 index) public view returns (uint256) {\\n        return tokenIdToSerials[tokenId][index];\\n    }\\n\\n    function getFirstSerialByOwner(address _owner, uint256 tokenId) public view returns (uint256) {\\n        return tokenIdToOwnerToSerialNumbers[tokenId][_owner].length == 0? 0: tokenIdToOwnerToSerialNumbers[tokenId][_owner][0];\\n    }\\n\\n    function getSerialByOwnerAtIndex(address _owner, uint256 tokenId, uint256 index) public view returns (uint256) {\\n        return (tokenIdToOwnerToSerialNumbers[tokenId][_owner].length == 0 || index > tokenIdToOwnerToSerialNumbers[tokenId][_owner].length-1) ? 0: tokenIdToOwnerToSerialNumbers[tokenId][_owner][index];\\n    }\\n\\n    function getOwnerOfSerial(uint256 serialNumber) public view returns (address) {\\n        return serialToOwner[serialNumber];\\n    }\\n\\n    function getTokenIdForSerialNumber(uint256 serialNumber) public view returns (uint256) {\\n        return serialToTokenId[serialNumber];\\n    }\\n\\n    function decodeUintArray(bytes memory encoded) internal pure returns(uint256[] memory ids){\\n        ids = abi.decode(encoded, (uint256[]));\\n    }\\n\\n    // To pack the value using web3.js, you can use the following code:\\n    // let value = 123;\\n    // let packedValue = web3.eth.abi.encodeParameter('uint256', value);     \\n    function decodeSingle(bytes memory encoded) internal pure returns(uint256 id) {\\n        id = abi.decode(encoded, (uint256));\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) private pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\n\\ncontract ERC165 {\\n\\n    mapping(bytes4 => bool) private supportedInterfaces;\\n\\n    function initializeERC165() internal {\\n        require(supportedInterfaces[0x01ffc9a7] == false, \\\"Already Registered\\\");\\n        _registerInterface(0x01ffc9a7);\\n    }\\n    \\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return supportedInterfaces[interfaceId];\\n    }\\n    \\n    function _registerInterface(bytes4 interfaceId) internal {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\\n// interface IERC1155Receiver {\\n//     function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns(bytes4);\\n//     function onERC1155BatchReceived(address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external returns(bytes4);\\n// }\\n\\n// interface IERC1155MetadataURI  {\\n//     function uri(uint256 id) external view returns (string memory);\\n// }\"\r\n    },\r\n    \"contracts/ERC2981Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport './IERC2981Royalties.sol';\\n\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\nabstract contract ERC2981Base is IERC2981Royalties {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint24 amount;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/ERC2981Royalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport './ERC2981Base.sol';\\nimport './OwnableUpgradeable.sol';\\n\\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\\n/// @dev This implementation has the same royalties for each and every tokens\\nabstract contract ERC2981Royalties is ERC2981Base {\\n    RoyaltyInfo private _contractRoyalties;\\n    mapping(uint256 => RoyaltyInfo) private _individualRoyalties;\\n\\n    \\n    /// @dev Sets token royalties\\n    /// @param tokenId the token id fir which we register the royalties\\n    /// @param recipient recipient of the royalties\\n    /// @param value percentage (using 2 decimals - 10000 = 100, 0 = 0)\\n    function setTokenRoyalty(uint256 tokenId, address recipient, uint256 value) public override {\\n        require(msg.sender == OwnableUpgradeable(address(this)).owner(), \\\"Not Owner\\\");\\n        require(value <= 10000, 'ERC2981Royalties: Too high');\\n        if (tokenId == 0) {\\n            _contractRoyalties = RoyaltyInfo(recipient, uint24(value));\\n        } else {\\n            _individualRoyalties[tokenId] = RoyaltyInfo(recipient, uint24(value));\\n        }\\n    }\\n\\n    function royaltyInfo(uint256 tokenId, uint256 value) public view override returns (address receiver, uint256 royaltyAmount) {\\n        RoyaltyInfo memory royalties = _individualRoyalties[tokenId].recipient != address(0)? _individualRoyalties[tokenId]: _contractRoyalties;\\n        \\n        receiver = royalties.recipient;\\n        royaltyAmount = (value * royalties.amount) / 10000;\\n    }\\n}\"\r\n    },\r\n    \"contracts/EventableERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\n\\ninterface IEventableERC1155 {\\n\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n    event URI(string value, uint256 indexed id);\\n\\n    // function makeEvents(address[] calldata operators, uint256[] calldata tokenIds, address[] calldata _from, address[] calldata _to, uint256[] calldata amounts) external;\\n}\\n\\nabstract contract EventableERC1155 is IEventableERC1155 {\\n    // function makeEvents(address[] calldata operators, uint256[] calldata tokenIds, address[] calldata _from, address[] calldata _to, uint256[] calldata amounts) public virtual override {\\n    //     _handleEventOperatorLoops(operators, tokenIds, _from, _to, amounts);\\n    // }    \\n    // function _handleEventOperatorLoops(address[] calldata operators, uint256[] calldata tokenIds, address[] calldata _from, address[] calldata _to, uint256[] calldata  amounts) internal {\\n    //     for (uint i=0; i < operators.length; i++) {\\n    //         if (amounts.length == operators.length && amounts.length == _from.length && amounts.length == _to.length && amounts.length == tokenIds.length) {\\n    //             _handleEventEmits(operators[i], tokenIds[i], _from[i], _to[i], makeSingleArray(amounts, i));\\n    //         } else {\\n    //             _handleEventTokenIdLoops(operators[i], tokenIds, _from, _to, amounts);\\n    //         }\\n    //     }\\n    // }\\n    // function _handleEventTokenIdLoops(address operator, uint256[] calldata tokenIds, address[] calldata _from, address[] calldata _to, uint256[] calldata  amounts) internal {\\n    //     for (uint i=0; i < tokenIds.length; i++) {\\n    //         if (amounts.length == tokenIds.length && tokenIds.length == amounts.length && _from.length == amounts.length && _to.length == amounts.length) {\\n    //             _handleEventEmits(operator, tokenIds[i], _from[i], _to[i], makeSingleArray(amounts, i));\\n    //         } else {\\n    //             _handleEventFromLoops(operator, tokenIds[i], _from, _to, amounts);\\n    //         }\\n    //     }\\n    // }\\n    // function _handleEventFromLoops(address operator, uint256 tokenId, address[] calldata _from, address[] calldata _to, uint256[] calldata amounts) internal {\\n    //     for (uint i=0; i < _from.length; i++) {\\n    //         if (amounts.length == _from.length && amounts.length == _to.length) {\\n    //             _handleEventEmits(operator, tokenId, _from[i], _to[i], makeSingleArray(amounts, i));\\n    //         } else if (amounts.length == _from.length && amounts.length != _to.length) {\\n    //             _handleEventToLoops(operator, tokenId, _from[i], _to, makeSingleArray(amounts, i));\\n    //         } else {\\n    //             _handleEventToLoops(operator, tokenId, _from[i], _to, amounts);\\n    //         }\\n    //     }\\n    // }\\n    // function _handleEventToLoops(address operator, uint256 tokenId, address _from, address[] calldata _to, uint256[] memory amounts) internal {\\n    //     for (uint i=0; i < _to.length; i++) {\\n    //         if (amounts.length == _to.length) {\\n    //             _handleEventEmits(operator, tokenId, _from, _to[i], makeSingleArray(amounts, i));\\n    //         } else {\\n    //             _handleEventEmits(operator, tokenId,_from, _to[i], amounts);\\n    //         }\\n    //     }\\n    // }\\n    // function _handleEventEmits(address operator, uint256 tokenId, address _from, address _to, uint256[] memory amounts) internal {\\n    //     for (uint i=0; i < amounts.length; i++) {\\n    //         emit TransferSingle(operator, _from, _to, tokenId, amounts[i]);\\n    //     }\\n    // }\\n    // function makeSingleArray(uint256[] memory amount, uint index) internal pure returns (uint256[] memory) {\\n    //     uint256[] memory arr = new uint256[](1);\\n    //     arr[0] = amount[index];\\n    //     return arr;\\n    // }\\n}\"\r\n    },\r\n    \"contracts/HasRegistration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\nimport \\\"./IsBypassable.sol\\\";\\n\\ncontract HasRegistration is IsBypassable {\\n\\n    mapping(address => uint256) public registeredContracts; // 0 EMPTY, 1 ERC1155, 2 ERC721, 3 HANDLER, 4 ERC20, 5 BALANCE, 6 CLAIM, 7 UNKNOWN, 8 FACTORY, 9 STAKING, 10 BYPASS\\n    mapping(uint256 => address[]) internal registeredOfType;\\n\\n    modifier isRegisteredContract(address _contract) {\\n        require(registeredContracts[_contract] > 0, \\\"Contract is not registered\\\");\\n        _;\\n    }\\n\\n    modifier isRegisteredContractOrOwner(address _contract) {\\n        require(registeredContracts[_contract] > 0 || owner() == _msgSender(), \\\"Contract is not registered nor Owner\\\");\\n        _;\\n    }\\n\\n    function registerContract(address _contract, uint _type) public isRegisteredContractOrOwner(_msgSender()) {\\n        registeredContracts[_contract] = _type;\\n        registeredOfType[_type].push(_contract);\\n    }\\n\\n    function unregisterContract(address _contract, uint256 index) public onlyOwner isRegisteredContract(_contract) {\\n        address[] storage arr = registeredOfType[registeredContracts[_contract]];\\n        arr[index] = arr[arr.length - 1];\\n        arr.pop();\\n        delete registeredContracts[_contract];\\n    }\\n\\n    function isRegistered(address _contract, uint256 _type) public view returns (bool) {\\n        return registeredContracts[_contract] == _type;\\n    }\\n\\n    function getAllRegisteredContractsOfType(uint256 _type) public view returns (address[] memory) {\\n        return registeredOfType[_type];\\n    }\\n}\"\r\n    },\r\n    \"contracts/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC1155 {\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n    event URI(string value, uint256 indexed id);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n    function setApprovalForAll(address operator, bool approved) external;\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n    function mint(address _to, uint256 _tokenId, uint256 _amount) external;\\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes[] memory serialNumbers) external;\\n    function burn(address _from, uint256 _tokenId, uint256 _amount) external;\\n    function mintWithSerial(address _to, uint256 _tokenId, uint256 _amount, bytes memory serialNumber) external;\\n}\\n\\ninterface IERC1155Receiver {\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns(bytes4);\\n    function onERC1155BatchReceived(address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external returns(bytes4);\\n}\\n\\ninterface IERC1155MetadataURI  {\\n    function uri(uint256 id) external view returns (string memory);\\n}\"\r\n    },\r\n    \"contracts/IERC2981Royalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IERC2981Royalties {\\n   function setTokenRoyalty(uint256 tokenId, address recipient, uint256 value) external;\\n   function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address receiver, uint256 royaltyAmount);\\n}\"\r\n    },\r\n    \"contracts/IHandlerCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\n\\ninterface IHandlerCallback {\\n    enum CallbackType {\\n        MINT, TRANSFER, CLAIM, BURN, FALLBACK\\n    }\\n\\n    struct Callback {\\n        address vault;\\n        address registrant;\\n        address target;\\n        bytes4 targetFunction;\\n        bool canRevert;\\n    }\\n    function executeCallbacksInternal(address _from, address _to, uint256 tokenId, CallbackType _type) external;\\n    function executeCallbacks(address _from, address _to, uint256 tokenId, CallbackType _type) external;\\n    function executeStoredCallbacksInternal(address _nftAddress, address _from, address _to, uint256 tokenId, IHandlerCallback.CallbackType _type) external;\\n    \\n}\"\r\n    },\r\n    \"contracts/IsBypassable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IsClaimable.sol\\\";\\n// import \\\"operator-filter-registry/src/upgradeable/OperatorFiltererUpgradeable.sol\\\";\\n\\nabstract contract IsBypassable is IsClaimable {\\n\\n    bool byPassable;\\n    mapping(address => mapping(bytes4 => bool)) byPassableFunction;\\n    mapping(address => mapping(uint256 => bool)) byPassableIds;\\n\\n    modifier onlyOwner virtual override {\\n        bool _canBypass = byPassable && byPassableFunction[_msgSender()][msg.sig];\\n        require(owner() == _msgSender() || _canBypass, \\\"Not owner or able to bypass\\\");        \\n            _;\\n    }\\n\\n    modifier onlyOwnerOrBypassWithId(uint256 id) {\\n        require (owner() == _msgSender() || (id != 0 && byPassableIds[_msgSender()][id] ), \\\"Invalid id\\\");\\n            _;\\n    }\\n\\n    function canBypass() internal view returns(bool) {\\n        return (byPassable && byPassableFunction[_msgSender()][msg.sig]);\\n    }\\n\\n    function canBypassForTokenId(uint256 id) internal view returns(bool) {\\n        return (byPassable && canBypass() && byPassableIds[_msgSender()][id]);\\n    }\\n\\n    function toggleBypassability() public onlyOwner {\\n      byPassable = !byPassable;\\n    }\\n\\n    function addBypassRule(address who, bytes4 functionSig, uint256 id) public onlyOwner {\\n        byPassableFunction[who][functionSig] = true;\\n        if (id != 0) {\\n            byPassableIds[who][id] = true;\\n        }        \\n    }\\n\\n    function removeBypassRule(address who, bytes4 functionSig, uint256 id) public onlyOwner {\\n        byPassableFunction[who][functionSig] = false;\\n        if (id !=0) {\\n            byPassableIds[who][id] = true;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/IsClaimable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nabstract contract IsClaimable is OwnableUpgradeable {\\n\\n    bool public isClaimable;\\n\\n    function toggleClaimable() public onlyOwner {\\n        isClaimable = !isClaimable;\\n    }\\n   \\n}\"\r\n    },\r\n    \"contracts/IsSerializedUpgradable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\nimport \\\"./HasRegistration.sol\\\";\\n\\ncontract IsSerializedUpgradable is HasRegistration {\\n    bool internal serialized;\\n    bool internal hasSerialized;\\n    bool internal overloadSerial;\\n    uint256 serialCount;\\n    mapping(uint256 => uint256[]) internal tokenIdToSerials;\\n    mapping(uint256 => uint256) internal serialToTokenId;\\n    mapping(uint256 => address) internal serialToOwner;\\n    event TransferSerial(address indexed from, address indexed to, uint256 serial);\\n    \\n}\"\r\n    },\r\n    \"contracts/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n}\"\r\n    },\r\n    \"contracts/UpgradableERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CLOSED - Pending Licensing Audit\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./EventableERC1155.sol\\\";\\n\\ninterface IUpgradableERC1155 {\\n    function upgradeFrom(address oldContract) external;\\n}\\n\\nabstract contract UpgradableERC1155 is IUpgradableERC1155, EventableERC1155  {\\n    using SafeMath for uint256;\\n\\n    bool internal _isUpgrade;\\n    address public upgradedFrom;\\n    uint256 internal _totalMoved;\\n    mapping(address => uint256) internal _supplyMoved;\\n    mapping(address => bool) public seen;\\n\\n    function isUpgrade() public view returns (bool) {\\n        return _isUpgrade;\\n    }\\n\\n    function upgradeFrom(address oldContract) public virtual override {\\n        require(!_isUpgrade, \\\"Contract already an upgrade\\\");\\n        require(oldContract != address(0), \\\"Invalid Upgrade\\\");\\n        _isUpgrade = true;\\n        upgradedFrom = oldContract;\\n    }\\n\\n    function transferHook(address sender, address recipient, uint256 tokenId, mapping(uint256 => mapping(address => uint256)) storage _balances) internal returns (uint256, uint256) {\\n        uint256 pastSenderBalance = 0;\\n        uint256 pastRecipientBalance = 0;\\n        if (!seen[sender]) {\\n            seen[sender] = true;\\n        }\\n        if (!seen[recipient]) {\\n            seen[recipient] = true;\\n        }\\n        address seenSenderAddress = tokenIdToAddress(sender, tokenId);\\n        address seenRecipientAddress = tokenIdToAddress(recipient, tokenId);\\n        if (isUpgrade()) {\\n            if (!seen[seenSenderAddress]) {\\n                seen[seenSenderAddress] = true;\\n                pastSenderBalance = IERC1155(upgradedFrom).balanceOf(sender, tokenId);\\n                _supplyMoved[sender] = _supplyMoved[sender].add(pastSenderBalance);\\n                _balances[tokenId][sender] = _balances[tokenId][sender].add(pastSenderBalance);\\n                _totalMoved = _totalMoved.add(pastSenderBalance);\\n            }\\n            if (!seen[seenRecipientAddress]) {\\n                seen[seenRecipientAddress] = true;\\n                pastRecipientBalance = IERC1155(upgradedFrom).balanceOf(recipient, tokenId);\\n                _supplyMoved[sender] = _supplyMoved[sender].add(pastRecipientBalance);\\n                _balances[tokenId][recipient] = _balances[tokenId][recipient].add(pastRecipientBalance);\\n            }\\n        } else {\\n            if (!seen[seenSenderAddress]) {\\n                seen[seenSenderAddress] = true;\\n            }\\n            if (!seen[seenRecipientAddress]) {\\n                seen[seenRecipientAddress] = true;\\n            }\\n        }\\n        return (pastSenderBalance, pastRecipientBalance);\\n    }\\n\\n    function transferEventHook(address operator, address sender, address recipient, uint256 tokenId, uint256 pastSenderBalance, uint256 pastRecipientBalance) internal {\\n        if (pastSenderBalance > 0) {\\n                emit TransferSingle(operator, address(0), sender, tokenId, pastSenderBalance);\\n            }\\n            if (pastRecipientBalance >0) {\\n                emit TransferSingle(operator, address(0), recipient, tokenId, pastRecipientBalance);\\n            }\\n    }\\n\\n    function balanceOfHook(address account, uint256 tokenId, mapping(uint256 => mapping(address => uint256)) storage _balances) internal view returns(uint256) {\\n        uint256 oldBalance = 0;\\n        if (isUpgrade()) {\\n            oldBalance = IERC1155(upgradedFrom).balanceOf(account, tokenId);\\n        }\\n        return (isUpgrade() && !seen[account]) ? IERC1155(upgradedFrom).balanceOf(account, tokenId):  _balances[tokenId][account];\\n    }\\n\\n    function mintHook(address account, uint256 tokenId, uint256 amount) internal returns (uint256) {\\n        if (!seen[account]) {\\n            seen[account] = true;\\n        }\\n        address seenAddress = tokenIdToAddress(account, tokenId);\\n        if (isUpgrade()) {\\n            if (!seen[seenAddress]) {\\n                seen[seenAddress] = true;\\n                uint256 pastBalance = IERC1155(upgradedFrom).balanceOf(account, tokenId);\\n                _supplyMoved[account] = _supplyMoved[account].add(pastBalance);\\n                amount = amount.add(pastBalance);\\n                _totalMoved = _totalMoved.add(pastBalance);\\n            }\\n        } else {\\n            if (!seen[account]) {\\n                seen[account] = true;\\n            }\\n        }\\n        return amount;\\n    }\\n\\n    function tokenIdToAddress(address account, uint256 tokenId) internal pure returns (address) {\\n        bytes32 seenHash = keccak256(abi.encodePacked(account, tokenId));\\n        return address(uint160(uint256(seenHash)));\\n    }\\n}\"\r\n    },\r\n    \"operator-filter-registry/src/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/upgradeable/OperatorFiltererUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IOperatorFilterRegistry} from \\\"../IOperatorFilterRegistry.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract OperatorFiltererUpgradeable is Initializable {\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry constant operatorFilterRegistry =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    function __OperatorFilterer_init(address subscriptionOrRegistrantToCopy, bool subscribe)\\n        internal\\n        onlyInitializing\\n    {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        operatorFilterRegistry.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == msg.sender) {\\n                _;\\n                return;\\n            }\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)) {\\n                revert OperatorNotAllowed(msg.sender);\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serial\",\"type\":\"uint256\"}],\"name\":\"TransferSerial\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"addBypassRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fireEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"fireEvents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"getAllRegisteredContractsOfType\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getFirstSerialByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"}],\"name\":\"getOwnerOfSerial\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSerial\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSerialByOwnerAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"}],\"name\":\"getTokenIdForSerialNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"initSerialManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOverloadSerial\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSerialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUpgrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serialNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"migrationMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"serialNumber\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"migrationMintMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"serialNumbers\",\"type\":\"bytes[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"serialNumber\",\"type\":\"bytes\"}],\"name\":\"mintWithSerial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"registerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"removeBypassRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferIdFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"seen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"streamAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBypassability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleOverloadSerial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSerialization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unregisterContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"updateSerialManagerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldContract\",\"type\":\"address\"}],\"name\":\"upgradeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradedFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "ERC1155Upgradable", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}