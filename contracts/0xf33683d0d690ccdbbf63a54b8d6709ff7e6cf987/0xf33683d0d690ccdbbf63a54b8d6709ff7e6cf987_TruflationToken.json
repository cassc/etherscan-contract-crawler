{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TruflationToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.11;\\nimport \\\"./vendor/ERC677Token.sol\\\";\\nimport { StandardToken as linkStandardToken } from \\\"./vendor/StandardToken.sol\\\";\\n\\ncontract TruflationToken is linkStandardToken, ERC677Token {\\n\\n  uint public constant totalSupply = 10**26; // 100 million tokens\\n  string public constant name = \\\"Truflation\\\";\\n  uint8 public constant decimals = 18;\\n  string public constant symbol = \\\"TFI\\\";\\n\\n  function TruflationToken()\\n    public\\n  {\\n    balances[msg.sender] = totalSupply;\\n  }\\n\\n  /**\\n  * @dev transfer token to a specified address with additional data if the recipient is a contract.\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  * @param _data The extra data to be passed to the receiving contract.\\n  */\\n  function transferAndCall(address _to, uint _value, bytes _data)\\n    public\\n    validRecipient(_to)\\n    returns (bool success)\\n  {\\n    return super.transferAndCall(_to, _value, _data);\\n  }\\n\\n  /**\\n  * @dev transfer token to a specified address.\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint _value)\\n    public\\n    validRecipient(_to)\\n    returns (bool success)\\n  {\\n    return super.transfer(_to, _value);\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value)\\n    public\\n    validRecipient(_spender)\\n    returns (bool)\\n  {\\n    return super.approve(_spender,  _value);\\n  }\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value)\\n    public\\n    validRecipient(_to)\\n    returns (bool)\\n  {\\n    return super.transferFrom(_from, _to, _value);\\n  }\\n\\n\\n  // MODIFIERS\\n\\n  modifier validRecipient(address _recipient) {\\n    require(_recipient != address(0) && _recipient != address(this));\\n    _;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/ERC677Token.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.11;\\n\\nimport \\\"../interfaces/ERC677.sol\\\";\\nimport \\\"../interfaces/ERC677Receiver.sol\\\";\\n\\ncontract ERC677Token is ERC677 {\\n\\n  /**\\n  * @dev transfer token to a contract address with additional data if the recipient is a contact.\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  * @param _data The extra data to be passed to the receiving contract.\\n  */\\n  function transferAndCall(address _to, uint _value, bytes _data)\\n    public\\n    returns (bool success)\\n  {\\n    super.transfer(_to, _value);\\n    Transfer(msg.sender, _to, _value, _data);\\n    if (isContract(_to)) {\\n      contractFallback(_to, _value, _data);\\n    }\\n    return true;\\n  }\\n\\n\\n  // PRIVATE\\n\\n  function contractFallback(address _to, uint _value, bytes _data)\\n    private\\n  {\\n    ERC677Receiver receiver = ERC677Receiver(_to);\\n    receiver.onTokenTransfer(msg.sender, _value, _data);\\n  }\\n\\n  function isContract(address _addr)\\n    private\\n    returns (bool hasCode)\\n  {\\n    uint length;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly { length := extcodesize(_addr) }\\n    return length > 0;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/StandardToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.11;\\n\\nimport { BasicToken as linkBasicToken } from \\\"./BasicToken.sol\\\";\\nimport { ERC20 as linkERC20 } from \\\"../interfaces/ERC20.sol\\\";\\n\\n/** changes from chainlink\\n * add visibility and fix solhint issues\\n */\\n\\n// solhint-disable max-line-length\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\n// solhint-disable max-line-length\\ncontract StandardToken is linkERC20, linkBasicToken {\\n\\n  mapping (address => mapping (address => uint256)) public allowed;\\n\\n\\n  /**\\n   * @dev Transfer tokens from one address to another\\n   * @param _from address The address which you want to send tokens from\\n   * @param _to address The address which you want to transfer to\\n   * @param _value uint256 the amount of tokens to be transferred\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value)\\n    public returns (bool) {\\n    var _allowance = allowed[_from][msg.sender];\\n\\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n    // require (_value <= _allowance);\\n\\n    balances[_from] = balances[_from].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    allowed[_from][msg.sender] = _allowance.sub(_value);\\n    Transfer(_from, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n   * @param _spender The address which will spend the funds.\\n   * @param _value The amount of tokens to be spent.\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n    allowed[msg.sender][_spender] = _value;\\n    Approval(msg.sender, _spender, _value);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n   * @param _owner address The address which owns the funds.\\n   * @param _spender address The address which will spend the funds.\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n   */\\n  function allowance(address _owner, address _spender) public constant\\n    returns (uint256 remaining) {\\n    return allowed[_owner][_spender];\\n  }\\n  \\n    /*\\n   * approve should be called when allowed[_spender] == 0. To increment\\n   * allowed value is better to use this function to avoid 2 calls (and wait until \\n   * the first transaction is mined)\\n   * From MonolithDAO Token.sol\\n   */\\n  function increaseApproval (address _spender, uint _addedValue) \\n    public returns (bool success) {\\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n  function decreaseApproval (address _spender, uint _subtractedValue) \\n    public returns (bool success) {\\n    uint oldValue = allowed[msg.sender][_spender];\\n    if (_subtractedValue > oldValue) {\\n      allowed[msg.sender][_spender] = 0;\\n    } else {\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n    }\\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n    return true;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC677.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.8;\\n\\nimport { ERC20 as linkERC20 } from \\\"./ERC20.sol\\\";\\n\\ncontract ERC677 is linkERC20 {\\n  function transferAndCall(address to, uint value, bytes data) public returns (bool success);\\n\\n  event Transfer(address indexed from, address indexed to, uint value, bytes data);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC677Receiver.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.8;\\n\\n\\ncontract ERC677Receiver {\\n  function onTokenTransfer(address _sender, uint _value, bytes _data) public;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.11;\\n\\n\\nimport { ERC20Basic as linkERC20Basic } from \\\"./ERC20Basic.sol\\\";\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is linkERC20Basic {\\n  function allowance(address owner, address spender) public constant returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC20Basic.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.11;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  uint256 public totalSupply;\\n  function balanceOf(address who) public constant returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/BasicToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n\\nimport { ERC20Basic as linkERC20Basic } from \\\"../interfaces/ERC20Basic.sol\\\";\\nimport { SafeMathChainlink as linkSafeMath } from \\\"./SafeMathChainlink.sol\\\";\\n\\n/* changed from chainlink source\\n * fix visibiility warnings in solidity\\n */\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances. \\n */\\ncontract BasicToken is linkERC20Basic {\\n  using linkSafeMath for uint256;\\n\\n  mapping(address => uint256) public balances;\\n\\n  /**\\n  * @dev transfer token for a specified address\\n  * @param _to The address to transfer to.\\n  * @param _value The amount to be transferred.\\n  */\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n    balances[_to] = balances[_to].add(_value);\\n    Transfer(msg.sender, _to, _value);\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Gets the balance of the specified address.\\n  * @param _owner The address to query the the balance of. \\n  * @return An uint256 representing the amount owned by the passed address.\\n  */\\n  function balanceOf(address _owner) public constant\\n    returns (uint256 balance) {\\n    return balances[_owner];\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/SafeMathChainlink.sol\": {\r\n      \"content\": \"pragma solidity ^0.4.11;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMathChainlink {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (_a == 0) {\\n      return 0;\\n    }\\n\\n    c = _a * _b;\\n    assert(c / _a == _b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = _a / _b;\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n    return _a / _b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    assert(_b <= _a);\\n    return _a - _b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n    c = _a + _b;\\n    assert(c >= _a);\\n    return c;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "TruflationToken", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}