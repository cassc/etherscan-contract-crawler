{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private  _owner;\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult( bool success, bytes memory returndata, string memory errorMessage) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        uint256 valueIndex = set._indexes[value];\r\n        if (valueIndex != 0) {\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            set._indexes[lastvalue] = toDeleteIndex + 1;\r\n            set._values.pop();\r\n            delete set._indexes[value];\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\nlibrary EnumerableMap {\r\n    struct MapEntry {\r\n        bytes32 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct Map {\r\n        MapEntry[] _entries;\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        if (keyIndex == 0) {\r\n            map._entries.push(MapEntry({_key: key, _value: value}));\r\n            map._indexes[key] = map._entries.length;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex != 0) {\r\n            uint256 toDeleteIndex = keyIndex - 1;\r\n            uint256 lastIndex = map._entries.length - 1;\r\n            MapEntry storage lastEntry = map._entries[lastIndex];\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1;\r\n            map._entries.pop();\r\n            delete map._indexes[key];\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._entries.length;\r\n    }\r\n\r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\r\n\r\n        MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\r\n    }\r\n\r\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, errorMessage);\r\n        return map._entries[keyIndex - 1]._value;\r\n    }\r\n\r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\r\n    }\r\n\r\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint256(key), address(uint256(value)));\r\n    }\r\n\r\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key))));\r\n    }\r\n    \r\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + (temp % 10)));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function burn(uint256 burnQuantity) external returns (bool);\r\n    function mintTokens(address account, uint256 amount) external;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract NFTI is IERC721, IERC721Metadata, IERC721Enumerable, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n    using Strings for uint256;\r\n\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(uint256 => uint256) _expandedTokens;\r\n    mapping(address => EnumerableSet.UintSet) private _holderTokens;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n    mapping(address => uint256) _privateTokens;\r\n\r\n    EnumerableMap.UintToAddressMap private _tokenOwners;\r\n\r\n    address private _ISETAddress;\r\n\r\n    uint256 private _expandedTokensSupply = 0;\r\n    uint256 private _seed = 679;\r\n\r\n    /*\r\n        Magic numbers(we hard code constants for save gas)\r\n        SALE_SUPPLY = 1294;\r\n        SALE_SUPPLY_PER_PERSON = 10;\r\n        EXPAND_SUPPLY = 1287;\r\n        EXPAND_SUPPLY_PER_PERSON = 11;\r\n        GIFT_SUPPLY = 20;\r\n        BUY_NFTS_ONCE = 10;\r\n        EXPAND_COST = 100;\r\n        BURN_COST = 35;\r\n        BUY_COST = 50;\r\n        \r\n        FIRST_PRICE = 100000000000000000; // 0.1 ETH\r\n        SECOND_PRICE = 300000000000000000; // 0.3 ETH\r\n        THIRD_PRICE = 500000000000000000; // 0.5 ETH\r\n        FOURTH_PRICE = 700000000000000000; // 0.7 ETH\r\n        FIFTH_PRICE = 1000000000000000000; // 1 ETH\r\n        SIXTH_PRICE = 4000000000000000000; // 4 ETH\r\n        \r\n        FIRST_PRICE_LINE = 50; // 0.1 ETH\r\n        SECOND_PRICE_LINE = 390; // 0.3 ETH\r\n        THIRD_PRICE_LINE = 1090; // 0.5 ETH\r\n        FOURTH_PRICE_LINE = 1240; // 1 ETH\r\n        FIFTH_PRICE_LINE = 1280; // 4 ETH\r\n        SIXTH_PRICE_LINE = 1284; // 0 ETH\r\n        \r\n    */\r\n\r\n\r\n    uint256 private _finish_reveal_time = 1616868000;\r\n    uint256 private _start_sold_time = 1616263200;\r\n    uint256 private _start_presale_time = 1616259600;\r\n\r\n\r\n    modifier paused() {\r\n        require(block.timestamp > _start_presale_time);\r\n        _;\r\n    }\r\n\r\n    /*\r\n        (Count left part size and multiply to left price) plus (Count right part size and multiply to right price) \r\n    */\r\n    function getNftPrice(uint256 numberOfNfts) public view returns (uint256) {\r\n        require(totalSold() < 1294, \"Sale has already ended\");\r\n        \r\n        if(totalSold() >= 1284) {\r\n            return uint256(0).mul(numberOfNfts);\r\n        } else if(totalSold() >= 1280) {\r\n            return uint256(4000000000000000000).mul(min(totalSold().add(numberOfNfts), 1284).sub(totalSold())).add(\r\n                uint256(0).mul(totalSold().add(numberOfNfts) >= 1284 ? totalSold().add(numberOfNfts).sub(1284) : 0));\r\n        } else if(totalSold() >= 1240) {\r\n            return uint256(1000000000000000000).mul(min(totalSold().add(numberOfNfts), 1280).sub(totalSold())).add(\r\n                uint256(4000000000000000000).mul(totalSold().add(numberOfNfts) >= 1280 ? totalSold().add(numberOfNfts).sub(1280) : 0));\r\n        } else if(totalSold() >= 1090) {\r\n            return uint256(700000000000000000).mul(min(totalSold().add(numberOfNfts), 1240).sub(totalSold())).add(\r\n                uint256(1000000000000000000).mul(totalSold().add(numberOfNfts) >= 1240 ? totalSold().add(numberOfNfts).sub(1240) : 0));\r\n        } else if(totalSold() >= 390) {\r\n            return uint256(500000000000000000).mul(min(totalSold().add(numberOfNfts), 1090).sub(totalSold())).add( \r\n                uint256(700000000000000000).mul(totalSold().add(numberOfNfts) >= 1090 ? totalSold().add(numberOfNfts).sub(1090) : 0));\r\n        } else if(totalSold() >= 50) {\r\n            return uint256(300000000000000000).mul(min(totalSold().add(numberOfNfts), 390).sub(totalSold())).add(\r\n                uint256(500000000000000000).mul(totalSold().add(numberOfNfts) >= 390 ? totalSold().add(numberOfNfts).sub(390) : 0));\r\n        } else {\r\n            return uint256(100000000000000000).mul(min(totalSold().add(numberOfNfts), 50).sub(totalSold())).add( \r\n                uint256(300000000000000000).mul(totalSold().add(numberOfNfts) >= 50 ? totalSold().add(numberOfNfts).sub(50) : 0));\r\n        }\r\n    \r\n    }\r\n\r\n    constructor(address ISETAddress) {\r\n        _ISETAddress = ISETAddress;\r\n    }\r\n\r\n    /*\r\n        People who help us\r\n    */\r\n    function setGiftAddress(address[] memory customers) public onlyOwner {\r\n        require(customers.length == 10, \"Length must be 10\");\r\n        for (uint256 i = 0; i < 10; ++i) {\r\n            _privateTokens[customers[i]] = 1294 + 1309 + i + 1;\r\n        }\r\n    }\r\n\r\n    /*\r\n        People who wins in contest\r\n    */\r\n    function setAirdropAddress(address[] memory customers) public onlyOwner {\r\n        require(customers.length == 10, \"Length must be 10\");\r\n        for (uint256 i = 0; i < 10; ++i) {\r\n            _privateTokens[customers[i]] = 1294 + 1309 + 10 + i + 1;\r\n        }\r\n    }\r\n\r\n    function name() public pure override returns (string memory) {\r\n        return \"NFT Idols\";\r\n    }\r\n\r\n    function symbol() public pure override returns (string memory) {\r\n        return \"NFTI\";\r\n    }\r\n\r\n    function isAdressInPreSale(address customer) public pure returns (bool) {\r\n        return customer == address(0x5ad0734530568E5C80036fd814A8B50ac0A3EB4F) ||\r\n               customer == address(0xb3aAb295861Ffd41071337A4Bf2a8357b4b6a353) ||\r\n               customer == address(0x2993E1D02b11377f44455AEdc618C705acbb0591) ||\r\n               customer == address(0xc04B87e282D5dC43D0e6605D574867E7cea7e25d) ||\r\n               customer == address(0x2a0F818DCA7109a11Ae7C1bb1266Bddd4C1194a7) ||\r\n               customer == address(0xf3453f0a63f72BEE573449d446895C805920A4b1) ||\r\n               customer == address(0x443b29e221b54f7bE8C0805859f57028CFF0A1CA) ||\r\n               customer == address(0xa5126a1D3A39beB4679e9BF20ebeA12E8006ADEa) ||\r\n               customer == address(0x337ec021aCE842e3D2c76931921942d10945d5ba) ||\r\n               customer == address(0xf601b1c1Dce139469E4969938c1ce9D58e30bdB9);\r\n    }\r\n\r\n    function baseURI() public pure returns (string memory) {\r\n        return \"https://gateway.pinata.cloud/ipfs/QmQd2BcnhEYYcZjwH5MDa4ArzTBc5uaumBe1uwfwgQnK6z/\";\r\n    }\r\n\r\n    function totalSupply() public pure virtual override returns (uint256) {\r\n        return 1294 + 1309 + 20;\r\n    }\r\n\r\n    function getISETAddress() public view returns (address) {\r\n        return _ISETAddress;\r\n    }\r\n\r\n    function startingIndex() public view returns (uint256) {\r\n        return _seed;\r\n    }\r\n\r\n    function startSoldIime() public view returns (uint256) {\r\n        return _start_sold_time;\r\n    }\r\n\r\n    function isRevealEnd() public view returns (bool) {\r\n        return block.timestamp > _finish_reveal_time || totalSold() == 1294;\r\n    }\r\n\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _holderTokens[owner].length();\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\r\n    }\r\n\r\n    function _getTokenURI(uint256 tokenId) internal view returns (uint256) {\r\n        return tokenId <= 1294 ? (tokenId + _seed) % 1294 + 1 : tokenId;\r\n    }\r\n\r\n    function withdraw(uint256 amount) onlyOwner external {\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        if (!isRevealEnd()) {\r\n            return string(abi.encodePacked(baseURI(), \"0\"));\r\n        }\r\n    \r\n        return string(abi.encodePacked(baseURI(), _getTokenURI(tokenId).toString()));\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\r\n        (uint256 tokenId, ) = _tokenOwners.at(index);\r\n        return tokenId;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\r\n        return _holderTokens[owner].at(index);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function totalSold() public view returns (uint256) {\r\n        return _tokenOwners.length().sub(_expandedTokensSupply);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _tokenOwners.contains(tokenId);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\r\n        return interfaceId == 0x01ffc9a7 || interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f || interfaceId == 0x780e9d63;\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()), \"ERC721: approve caller is not owner nor approved for all\");\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function getRevealTime() public view returns (uint256) {\r\n        return _finish_reveal_time;\r\n    }\r\n\r\n    function isPreSaleNow() public view returns (bool) {\r\n        return block.timestamp < _start_sold_time && block.timestamp >= _start_presale_time;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n        _holderTokens[to].add(tokenId);\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n        _approve(address(0), tokenId);\r\n        _holderTokens[from].remove(tokenId);\r\n        _holderTokens[to].add(tokenId);\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool)    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes memory returndata =\r\n            to.functionCall(\r\n                abi.encodeWithSelector(\r\n                    IERC721Receiver(to).onERC721Received.selector,\r\n                    _msgSender(),\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                ),\r\n                \"ERC721: transfer to non ERC721Receiver implementer\"\r\n            );\r\n        bytes4 retval = abi.decode(returndata, (bytes4));\r\n        return (retval == 0x150b7a02);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) private {\r\n        _tokenApprovals[tokenId] = to;\r\n\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    // 11 bit (first chank current state) | 11 bit (how much was taken from first chank) | 11 bit (zero chank current state) | 11 bit (how much was taken from zero chank)\r\n    uint256 private _bitarray;\r\n    uint256 private constant _ZERO_PRIME = 13;\r\n    uint256 private constant _FIRST_PRIME = 1273;\r\n\r\n    function _getWasTaken(uint256 chankId) internal view returns (uint256) {\r\n        return (_bitarray >> (22 * chankId)) & ((1 << 11) - 1);\r\n    }\r\n\r\n    function _getCurrentState(uint256 chankId) internal view returns (uint256) {\r\n        return ((_bitarray >> (22 * chankId)) >> 11) & ((1 << 11) - 1);\r\n    }\r\n\r\n    function _addWasTaken(uint256 chankId, uint256 bitarray) pure internal returns (uint256) {\r\n        return bitarray + (1 << (22 * chankId));\r\n    }\r\n\r\n    function _setCurrentState(uint256 chankId, uint256 value, uint256 bitarray) pure internal returns (uint256) {\r\n        bitarray &= ((1 << 44) - 1) - (((1 << 11) - 1) << (11 + 22 * chankId));\r\n        bitarray |= value << (11 + 22 * chankId);\r\n        return bitarray;\r\n    }\r\n\r\n    function _getChankSize() internal pure returns (uint256) {\r\n        return 1294 / 2;\r\n    }\r\n\r\n    /*\r\n        We have two chanks(even and odd) id sale. Randomly choose chank. Next number = last token id + prime number\r\n    */\r\n    function _getNewRandomTokenId() internal returns (uint256) {\r\n        uint256 random_chank = (block.number + block.timestamp) % 2;\r\n        \r\n        if (_getWasTaken(random_chank) == _getChankSize()) {\r\n            random_chank = random_chank == 0 ? 1 : 0;\r\n        }\r\n\r\n        uint256 current_state = _getCurrentState(random_chank);\r\n        uint256 bitarray = _addWasTaken(random_chank, _bitarray);\r\n        bitarray = _setCurrentState(random_chank, (current_state + (1 - random_chank) * _ZERO_PRIME + random_chank * _FIRST_PRIME) % _getChankSize(), bitarray);\r\n\r\n        _bitarray = bitarray;\r\n\r\n        uint256 result = (current_state + 1) * 2 - random_chank;\r\n\r\n        return result;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function buyItem(uint256 numberOfNfts) public payable paused {\r\n        require(_tokenOwners.length() < 1294, \"Sale has already ended\");\r\n        require(numberOfNfts > 0, \"numberOfNfts can't be 0\");\r\n        require(numberOfNfts <= 10, \"You may not buy more than 10 NFTs at once\");\r\n        require(!isPreSaleNow() || isPreSaleNow() && balanceOf(_msgSender()).add(numberOfNfts) <= 10 && isAdressInPreSale(_msgSender()), \"\");\r\n        require(_tokenOwners.length().add(numberOfNfts) <= 1294, \"Exceeds Sale Supply!\");\r\n        require(msg.value == getNftPrice(numberOfNfts), string(abi.encodePacked(\"Need to send exactly the matching ether: \", getNftPrice(numberOfNfts).toString())));\r\n\r\n        for (uint256 i = 0; i < numberOfNfts; ++i) {\r\n            _safeMint(_msgSender(), _getNewRandomTokenId());\r\n        }\r\n        \r\n        if (!isRevealEnd()) {\r\n            _seed += block.number + block.timestamp;\r\n        }\r\n\r\n        IERC20(_ISETAddress).mintTokens(_msgSender(), numberOfNfts * 50);\r\n    }\r\n\r\n    function burn(uint256 tokenId) public {\r\n        require(_msgSender() == _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\"), \"You are not owner of token\");\r\n        require(ownerOf(tokenId) == _msgSender(), \"ERC721: transfer of token that is not own\");\r\n\r\n        _approve(address(0), tokenId);\r\n        _holderTokens[_msgSender()].remove(tokenId);\r\n        _holderTokens[address(0)].add(tokenId);\r\n        _tokenOwners.set(tokenId, address(0));\r\n\r\n        emit Transfer(_msgSender(), address(0), tokenId);\r\n\r\n        IERC20(_ISETAddress).mintTokens(_msgSender(), 35);\r\n    }\r\n\r\n    function expandToken(uint256 tokenId) public returns (uint256) {\r\n        require(isRevealEnd(), \"Reveal is not ended\");\r\n        require(_msgSender() == ownerOf(tokenId), string(abi.encodePacked(\"You are not owner \", tokenId.toString())));\r\n        \r\n        uint256 tokenURI = _getTokenURI(tokenId);\r\n\r\n        require(tokenURI <= 10 * 119 || tokenURI > 1294 && tokenURI <= 1294 + 1309, \"This cards not expandeble\");\r\n        require(IERC20(_ISETAddress).balanceOf(_msgSender()) >= 100, \"Not enought ERC20 tokens\");\r\n        \r\n        uint256 idGroup = tokenURI <= 1294 ? tokenURI.add(10 - 1).div(10) : (tokenURI - 1294).add(11 - 1).div(11);\r\n        require(_expandedTokens[idGroup] < 11, \"Upgradable tokens are ended\");\r\n\r\n        uint256 startingGroupTokenId = 1294 + 1 + (idGroup - 1) * 11;\r\n        uint256 relativeStart = (block.number + block.timestamp) % 11;\r\n        uint256 expandedTokenId = 0;\r\n        for (uint256 offset = 0; offset < 11; ++offset) {\r\n            expandedTokenId = startingGroupTokenId + ((relativeStart + offset) % 11);\r\n            if (!_exists(expandedTokenId)) {\r\n                IERC20(_ISETAddress).transferFrom(_msgSender(), address(this), 100);\r\n                IERC20(_ISETAddress).burn(100);\r\n                _safeMint(_msgSender(), expandedTokenId);\r\n                _expandedTokens[idGroup]++;\r\n                _expandedTokensSupply++;\r\n                return expandedTokenId;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n     function claim() public returns (uint256) {\r\n        require(_privateTokens[_msgSender()] != 0, \"You don't have private tokens\");\r\n        require(!_exists(_privateTokens[_msgSender()]), \"You gift is already minted\");\r\n\r\n        _safeMint(_msgSender(), _privateTokens[_msgSender()]);\r\n\r\n        return _privateTokens[_msgSender()];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ISETAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfNfts\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"expandToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getISETAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfNfts\",\"type\":\"uint256\"}],\"name\":\"getNftPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevealTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"isAdressInPreSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPreSaleNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevealEnd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"customers\",\"type\":\"address[]\"}],\"name\":\"setAirdropAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"customers\",\"type\":\"address[]\"}],\"name\":\"setGiftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSoldIime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTI", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000ed3cbe11e32a4db7d81b9055e464848b344fee8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://217c578285b532e667e989b24cb2acb755ef5f06b8af7ee45db96cd1c22da3e4"}