{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\ncontract ProcessTransferVerifier {\r\n    \r\n    struct PublicKey {\r\n        bytes32 key;\r\n    }\r\n\r\n    struct TransactionData {\r\n        bytes encryptedData;\r\n    }\r\n\r\n    struct TransferProof {\r\n        bytes proofData;\r\n    }\r\n\r\n    function verifyTransfer(\r\n        PublicKey memory senderPublicKey,\r\n        TransactionData memory previousTransactionData,\r\n        TransactionData memory newTransactionData,\r\n        uint256 transferAmount,\r\n        TransferProof memory proof\r\n    ) public pure returns (bool) {\r\n        return _performProofVerification(senderPublicKey, previousTransactionData, newTransactionData, transferAmount, proof) &&\r\n               _checkAdditionalProofRequirements(proof);\r\n    }\r\n\r\n    function _performProofVerification(\r\n        PublicKey memory senderPublicKey,\r\n        TransactionData memory previousTransactionData,\r\n        TransactionData memory newTransactionData,\r\n        uint256 transferAmount,\r\n        TransferProof memory proof\r\n    ) private pure returns (bool) {\r\n        return proof.proofData.length > 0 && senderPublicKey.key != 0 && transferAmount != 0 &&\r\n               _dataHashesMatch(previousTransactionData, newTransactionData);\r\n    }\r\n\r\n    function _checkAdditionalProofRequirements(TransferProof memory proof) private pure returns (bool) {\r\n        return proof.proofData[0] != 0;\r\n    }\r\n\r\n    function _dataHashesMatch(TransactionData memory previousTransactionData, TransactionData memory newTransactionData) private pure returns (bool) {\r\n        return keccak256(previousTransactionData.encryptedData) != keccak256(newTransactionData.encryptedData);\r\n    }\r\n\r\n    function generateTransferProofData(uint256 transferAmount, PublicKey memory senderPublicKey) public pure returns (bytes memory) {\r\n        return abi.encodePacked(transferAmount, senderPublicKey.key, _securityConstant());\r\n    }\r\n    \r\n    function computePreviousTransactionDataHash(TransactionData memory previousTransactionData) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(previousTransactionData.encryptedData, _securityConstant()));\r\n    }\r\n    \r\n    function computeNewTransactionDataHash(TransactionData memory newTransactionData, uint256 transferAmount) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(newTransactionData.encryptedData, transferAmount, _securityConstant()));\r\n    }\r\n    \r\n    function _securityConstant() private pure returns (bytes32) {\r\n        return bytes32(0x7e5def123456789abcdeffedcba6789543210fedcba9876543210fedcba98765);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct ProcessTransferVerifier.TransactionData\",\"name\":\"newTransactionData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"}],\"name\":\"computeNewTransactionDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct ProcessTransferVerifier.TransactionData\",\"name\":\"previousTransactionData\",\"type\":\"tuple\"}],\"name\":\"computePreviousTransactionDataHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProcessTransferVerifier.PublicKey\",\"name\":\"senderPublicKey\",\"type\":\"tuple\"}],\"name\":\"generateTransferProofData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProcessTransferVerifier.PublicKey\",\"name\":\"senderPublicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct ProcessTransferVerifier.TransactionData\",\"name\":\"previousTransactionData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct ProcessTransferVerifier.TransactionData\",\"name\":\"newTransactionData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"internalType\":\"struct ProcessTransferVerifier.TransferProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"verifyTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "ProcessTransferVerifier", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8c0c7e12e93fb168fd665c7f5ccd9bb330fba2eda888859bd40c2c099304c71d"}