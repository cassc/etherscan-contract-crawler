{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/AutoPxEth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {Ownable2Step} from \\\"openzeppelin-contracts/contracts/access/Ownable2Step.sol\\\";\\nimport {ERC4626} from \\\"solmate/mixins/ERC4626.sol\\\";\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/utils/SafeTransferLib.sol\\\";\\nimport {Errors} from \\\"./libraries/Errors.sol\\\";\\nimport {IPirexEth} from \\\"./interfaces/IPirexEth.sol\\\";\\n\\n/**\\n * @title AutoPxEth\\n * @notice Autocompounding vault for (staked) pxETH, adapted from pxCVX vault system\\n * @dev This contract enables autocompounding for pxETH assets and includes various fee mechanisms.\\n * @author redactedcartel.finance\\n */\\ncontract AutoPxEth is Ownable2Step, ERC4626 {\\n    /**\\n     * @dev Library: SafeTransferLib - Provides safe transfer functions for ERC20 tokens.\\n     */\\n    using SafeTransferLib for ERC20;\\n\\n    /**\\n     * @dev Library: FixedPointMathLib - Provides fixed-point arithmetic for uint256.\\n     */\\n    using FixedPointMathLib for uint256;\\n\\n    // Constants\\n\\n    /**\\n     * @dev Maximum withdrawal penalty percentage.\\n     */\\n    uint256 private constant MAX_WITHDRAWAL_PENALTY = 50_000;\\n    \\n\\n    /**\\n     * @dev Maximum platform fee percentage.\\n     */\\n    uint256 private constant MAX_PLATFORM_FEE = 200_000;\\n\\n    /**\\n     * @dev Fee denominator for precise fee calculations.\\n     */\\n    uint256 private constant FEE_DENOMINATOR = 1_000_000;\\n\\n    /**\\n     * @dev Duration of the rewards period.\\n     */\\n    uint256 private constant REWARDS_DURATION = 7 days;\\n\\n    // State variables for tracking rewards and actively staked assets\\n\\n    /**\\n     * @notice Reference to the PirexEth contract.\\n     */\\n    IPirexEth public pirexEth;\\n    \\n    /**\\n     * @notice Timestamp when the current rewards period will end.\\n     */\\n    uint256 public periodFinish;\\n    \\n    /**\\n     * @notice Rate at which rewards are distributed per second.\\n     */\\n    uint256 public rewardRate;\\n    \\n    /**\\n     * @notice Timestamp of the last update to the reward variables.\\n     */\\n    uint256 public lastUpdateTime;\\n    \\n    /**\\n     * @notice Accumulated reward per token stored.\\n     */\\n    uint256 public rewardPerTokenStored;\\n    \\n    /**\\n     * @notice Last calculated reward per token paid to stakers.\\n     */\\n    uint256 public rewardPerTokenPaid;\\n    \\n    /**\\n     * @notice Total rewards available for distribution.\\n     */\\n    uint256 public rewards;\\n    \\n    /**\\n     * @notice Total assets actively staked in the vault.\\n     */\\n    uint256 public totalStaked;\\n\\n    // State variables related to fees\\n    /**\\n     * @notice Withdrawal penalty percentage.\\n     */\\n    uint256 public withdrawalPenalty = 30_000;\\n    \\n    /**\\n     * @notice Platform fee percentage.\\n     */\\n    uint256 public platformFee = 100_000;\\n    \\n    /**\\n     * @notice Address of the platform that receives fees.\\n     */\\n    address public platform;\\n\\n    // Events\\n\\n    /**\\n     * @notice Emitted when rewards are harvested and staked.\\n     * @dev This event is emitted when a user triggers the harvest function.\\n     * @param caller address indexed Address that triggered the harvest.\\n     * @param value  uint256         Amount of rewards harvested.\\n     */\\n    event Harvest(address indexed caller, uint256 value);\\n\\n    /**\\n     * @notice Emitted when the withdrawal penalty is updated.\\n     * @dev This event is emitted when the withdrawal penalty is modified.\\n     * @param penalty uint256 New withdrawal penalty percentage.\\n     */\\n    event WithdrawalPenaltyUpdated(uint256 penalty);\\n\\n    /**\\n     * @notice Emitted when the platform fee is updated.\\n     * @dev This event is emitted when the platform fee is modified.\\n     * @param fee uint256 New platform fee percentage.\\n     */\\n    event PlatformFeeUpdated(uint256 fee);\\n    \\n    /**\\n     * @notice Emitted when the platform address is updated.\\n     * @dev This event is emitted when the platform address is modified.\\n     * @param _platform address New platform address.\\n     */\\n    event PlatformUpdated(address _platform);\\n\\n    /**\\n     * @notice Emitted when new rewards are added to the vault.\\n     * @dev This event is emitted when new rewards are added to the vault.\\n     * @param reward uint256 Amount of rewards added.\\n     */\\n    event RewardAdded(uint256 reward);\\n\\n    /**\\n     * @notice Emitted when the PirexEth contract address is set.\\n     * @dev This event is emitted when the PirexEth contract address is set.\\n     * @param _pirexEth address New PirexEth contract address.\\n     */\\n    event SetPirexEth(address _pirexEth);\\n\\n    // Modifiers\\n    /**\\n     * @dev Update reward states modifier\\n     * @param updateEarned bool Whether to update earned amount so far\\n     */\\n    modifier updateReward(bool updateEarned) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n\\n        if (updateEarned) {\\n            rewards = earned();\\n            rewardPerTokenPaid = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract constructor\\n     * @param _asset address Asset contract address\\n     * @param _platform address Platform address\\n     */\\n    constructor(\\n        address _asset,\\n        address _platform\\n    ) ERC4626(ERC20(_asset), \\\"Autocompounding Pirex Ether\\\", \\\"apxETH\\\") {\\n        if (_platform == address(0)) revert Errors.ZeroAddress();\\n\\n        platform = _platform;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        RESTRICTED FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Set the PirexEth contract address\\n     * @dev Function access restricted to only owner\\n     * @param _pirexEth address PirexEth contract address\\n     */\\n    function setPirexEth(address _pirexEth) external onlyOwner {\\n        if (_pirexEth == address(0)) revert Errors.ZeroAddress();\\n\\n        emit SetPirexEth(_pirexEth);\\n\\n        pirexEth = IPirexEth(_pirexEth);\\n    }\\n\\n    /**\\n     * @notice Set the withdrawal penalty\\n     * @dev Function access restricted to only owner\\n     * @param penalty uint256 Withdrawal penalty\\n     */\\n    function setWithdrawalPenalty(uint256 penalty) external onlyOwner {\\n        if (penalty > MAX_WITHDRAWAL_PENALTY) revert Errors.ExceedsMax();\\n\\n        withdrawalPenalty = penalty;\\n\\n        emit WithdrawalPenaltyUpdated(penalty);\\n    }\\n\\n    /**\\n     * @notice Set the platform fee\\n     * @dev Function access restricted to only owner\\n     * @param fee uint256 Platform fee\\n     */\\n    function setPlatformFee(uint256 fee) external onlyOwner {\\n        if (fee > MAX_PLATFORM_FEE) revert Errors.ExceedsMax();\\n\\n        platformFee = fee;\\n\\n        emit PlatformFeeUpdated(fee);\\n    }\\n\\n    /**\\n     * @notice Set the platform\\n     * @dev Function access restricted to only owner\\n     * @param _platform address Platform\\n     */\\n    function setPlatform(address _platform) external onlyOwner {\\n        if (_platform == address(0)) revert Errors.ZeroAddress();\\n\\n        platform = _platform;\\n\\n        emit PlatformUpdated(_platform);\\n    }\\n\\n    /**\\n     * @notice Notify and sync the newly added rewards to be streamed over time\\n     * @dev Rewards are streamed following the duration set in REWARDS_DURATION\\n     */\\n    function notifyRewardAmount() external updateReward(false) {\\n        if (msg.sender != address(pirexEth)) revert Errors.NotPirexEth();\\n\\n        // Rewards transferred directly to this contract are not added to totalStaked\\n        // To get the rewards w/o relying on a potentially incorrect passed in arg,\\n        // we can use the difference between the asset balance and totalStaked.\\n        // Additionally, to avoid re-distributing rewards, deduct the output of `earned`\\n        uint256 rewardBalance = asset.balanceOf(address(this)) -\\n            totalStaked -\\n            earned();\\n\\n        rewardRate = rewardBalance / REWARDS_DURATION;\\n\\n        if (rewardRate == 0) revert Errors.NoRewards();\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp + REWARDS_DURATION;\\n\\n        emit RewardAdded(rewardBalance);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                VIEWS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @inheritdoc ERC4626\\n     * @notice Get the amount of available pxETH in the contract\\n     * @dev Rewards are streamed for the duration set in REWARDS_DURATION\\n     */\\n    function totalAssets() public view override returns (uint256) {\\n        // Based on the current totalStaked and available rewards\\n        uint256 _totalStaked = totalStaked;\\n        uint256 _rewards = ((_totalStaked *\\n            (rewardPerToken() - rewardPerTokenPaid)) / 1e18) + rewards;\\n\\n        // Deduct the exact reward amount staked (after fees are deducted when calling `harvest`)\\n        return\\n            _totalStaked +\\n            (\\n                _rewards == 0\\n                    ? 0\\n                    : (_rewards - ((_rewards * platformFee) / FEE_DENOMINATOR))\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the last effective timestamp of the current reward period\\n     * @return uint256 Timestamp\\n     */\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    /**\\n     * @notice Returns the amount of rewards per staked token/asset\\n     * @return uint256 Rewards amount\\n     */\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalStaked == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored +\\n            ((((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate) *\\n                1e18) / totalStaked);\\n    }\\n\\n    /**\\n     * @notice Returns the earned rewards amount so far\\n     * @return uint256 Rewards amount\\n     */\\n    function earned() public view returns (uint256) {\\n        return\\n            ((totalStaked * (rewardPerToken() - rewardPerTokenPaid)) / 1e18) +\\n            rewards;\\n    }\\n\\n    /**\\n     * @notice Return the amount of assets per 1 (1e18) share\\n     * @return uint256 Assets\\n     */\\n    function assetsPerShare() external view returns (uint256) {\\n        return previewRedeem(1e18);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            INTERNAL FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Internal method to keep track of the total amount of staked token/asset on deposit/mint\\n     */\\n    function _stake(uint256 amount) internal updateReward(true) {\\n        totalStaked += amount;\\n    }\\n\\n    /**\\n     * @dev Internal method to keep track of the total amount of staked token/asset on withdrawal/redeem\\n     */\\n    function _withdraw(uint256 amount) internal updateReward(true) {\\n        totalStaked -= amount;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC4626 OVERRIDES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @inheritdoc ERC4626\\n     * @dev Deduct the specified amount of assets from totalStaked to prepare for transfer to the user\\n     * @param assets uint256 Assets\\n     */\\n    function beforeWithdraw(uint256 assets, uint256) internal override {\\n        // Perform harvest to make sure that totalStaked is always equal or larger than assets to be withdrawn\\n        if (assets > totalStaked) harvest();\\n\\n        _withdraw(assets);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC4626\\n     * @dev Include the new assets in totalStaked so that rewards can be properly distributed\\n     * @param assets uint256 Assets\\n     */\\n    function afterDeposit(uint256 assets, uint256) internal override {\\n        _stake(assets);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC4626\\n     * @dev Preview the amount of assets a user would receive from redeeming shares\\n     */\\n    function previewRedeem(\\n        uint256 shares\\n    ) public view override returns (uint256) {\\n        // Calculate assets based on a user's % ownership of vault shares\\n        uint256 assets = convertToAssets(shares);\\n\\n        uint256 _totalSupply = totalSupply;\\n\\n        // Calculate a penalty - zero if user is the last to withdraw.\\n        uint256 penalty = (_totalSupply == 0 || _totalSupply - shares == 0)\\n            ? 0\\n            : assets.mulDivUp(withdrawalPenalty, FEE_DENOMINATOR); // Round up the penalty in favour of the protocol.\\n\\n        // Redeemable amount is the post-penalty amount\\n        return assets - penalty;\\n    }\\n\\n    /**\\n     * @inheritdoc ERC4626\\n     * @notice Preview the amount of shares a user would need to redeem the specified asset amount\\n     * @dev This modified version takes into consideration the withdrawal fee\\n     */\\n    function previewWithdraw(\\n        uint256 assets\\n    ) public view override returns (uint256) {\\n        // Calculate shares based on the specified assets' proportion of the pool\\n        uint256 shares = convertToShares(assets);\\n\\n        // Save 1 SLOAD\\n        uint256 _totalSupply = totalSupply;\\n\\n        // Factor in additional shares to fulfill withdrawal if user is not the last to withdraw\\n        return\\n            (_totalSupply == 0 || _totalSupply - shares == 0)\\n                ? shares\\n                : (shares * FEE_DENOMINATOR) /\\n                    (FEE_DENOMINATOR - withdrawalPenalty);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MUTATIVE FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Harvest and stake available rewards after distributing fees to the platform\\n     * @dev This function claims and stakes the available rewards, deducting a fee for the platform.\\n     */\\n    function harvest() public updateReward(true) {\\n        uint256 _rewards = rewards;\\n\\n        if (_rewards != 0) {\\n            rewards = 0;\\n\\n            // Fee for platform\\n            uint256 feeAmount = (_rewards * platformFee) / FEE_DENOMINATOR;\\n\\n            // Deduct fee from reward balance\\n            _rewards -= feeAmount;\\n\\n            // Claimed rewards should be in pxETH\\n            asset.safeTransfer(platform, feeAmount);\\n\\n            // Stake rewards sans fee\\n            _stake(_rewards);\\n\\n            emit Harvest(msg.sender, _rewards);\\n        }\\n    }\\n\\n    /**\\n     * @notice Override transfer logic to trigger direct `initiateRedemption`.\\n     * @dev This function overrides the standard transfer logic to initiate redemption when transferring to the PirexEth contract.\\n     * @param to     address Transfer destination\\n     * @param amount uint256 Amount\\n     * @return       bool\\n     */\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        super.transfer(to, amount);\\n\\n        if (to == address(pirexEth)) {\\n            pirexEth.initiateRedemption(amount, msg.sender, false);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Override transferFrom logic to trigger direct `initiateRedemption`.\\n     * @dev This function overrides the standard transferFrom logic to initiate redemption when transferring from the PirexEth contract.\\n     * @param from   Address of the transfer origin.\\n     * @param to     Address of the transfer destination.\\n     * @param amount Amount of tokens to transfer.\\n     * @return       A boolean indicating the success of the transfer.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        super.transferFrom(from, to, amount);\\n\\n        if (to == address(pirexEth)) {\\n            pirexEth.initiateRedemption(amount, from, false);\\n        }\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/mixins/ERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/FixedPointMathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nlibrary Errors {\\n    /**\\n     * @dev Zero address specified\\n     */\\n    error ZeroAddress();\\n\\n    /**\\n     * @dev Zero amount specified\\n     */\\n    error ZeroAmount();\\n\\n    /**\\n     * @dev Invalid fee specified\\n     */\\n    error InvalidFee();\\n\\n    /**\\n     * @dev Invalid max fee specified\\n     */\\n    error InvalidMaxFee();\\n\\n    /**\\n     * @dev Zero multiplier used\\n     */\\n    error ZeroMultiplier();\\n\\n    /**\\n     * @dev ETH deposit is paused\\n     */\\n    error DepositingEtherPaused();\\n\\n    /**\\n     * @dev ETH deposit is not paused\\n     */\\n    error DepositingEtherNotPaused();\\n\\n    /**\\n     * @dev Contract is paused\\n     */\\n    error Paused();\\n\\n    /**\\n     * @dev Contract is not paused\\n     */\\n    error NotPaused();\\n\\n    /**\\n     * @dev Validator not yet dissolved\\n     */\\n    error NotDissolved();\\n\\n    /**\\n     * @dev Validator not yet withdrawable\\n     */\\n    error NotWithdrawable();\\n\\n    /**\\n     * @dev Validator has been previously used before\\n     */\\n    error NoUsedValidator();\\n\\n    /**\\n     * @dev Not oracle adapter\\n     */\\n    error NotOracleAdapter();\\n\\n    /**\\n     * @dev Not reward recipient\\n     */\\n    error NotRewardRecipient();\\n\\n    /**\\n     * @dev Exceeding max value\\n     */\\n    error ExceedsMax();\\n\\n    /**\\n     * @dev No rewards available\\n     */\\n    error NoRewards();\\n\\n    /**\\n     * @dev Not PirexEth\\n     */\\n    error NotPirexEth();\\n\\n    /**\\n     * @dev Not minter\\n     */\\n    error NotMinter();\\n\\n    /**\\n     * @dev Not burner\\n     */\\n    error NotBurner();\\n\\n    /**\\n     * @dev Empty string\\n     */\\n    error EmptyString();\\n\\n    /**\\n     * @dev Validator is Not Staking\\n     */\\n    error ValidatorNotStaking();\\n\\n    /**\\n     * @dev not enough buffer\\n     */\\n    error NotEnoughBuffer();\\n\\n    /**\\n     * @dev validator queue empty\\n     */\\n    error ValidatorQueueEmpty();\\n\\n    /**\\n     * @dev out of bounds\\n     */\\n    error OutOfBounds();\\n\\n    /**\\n     * @dev cannot trigger validator exit\\n     */\\n    error NoValidatorExit();\\n\\n    /**\\n     * @dev cannot initiate redemption partially\\n     */\\n    error NoPartialInitiateRedemption();\\n\\n    /**\\n     * @dev not enough validators\\n     */\\n    error NotEnoughValidators();\\n\\n    /**\\n     * @dev not enough ETH\\n     */\\n    error NotEnoughETH();\\n\\n    /**\\n     * @dev max processed count is invalid (< 1)\\n     */\\n    error InvalidMaxProcessedCount();\\n\\n    /**\\n     * @dev fromIndex and toIndex are invalid\\n     */\\n    error InvalidIndexRanges();\\n\\n    /**\\n     * @dev ETH is not allowed\\n     */\\n    error NoETHAllowed();\\n\\n    /**\\n     * @dev ETH is not passed\\n     */\\n    error NoETH();\\n\\n    /**\\n     * @dev validator status is neither dissolved nor slashed\\n     */\\n    error StatusNotDissolvedOrSlashed();\\n\\n    /**\\n     * @dev validator status is neither withdrawable nor staking\\n     */\\n    error StatusNotWithdrawableOrStaking();\\n\\n    /**\\n     * @dev account is not approved\\n     */\\n    error AccountNotApproved();\\n\\n    /**\\n     * @dev invalid token specified\\n     */\\n    error InvalidToken();\\n\\n    /**\\n     * @dev not same as deposit size\\n     */\\n    error InvalidAmount();\\n\\n    /**\\n     * @dev contract not recognised\\n     */\\n    error UnrecorgnisedContract();\\n\\n    /**\\n     * @dev empty array\\n     */\\n    error EmptyArray();\\n\\n    /**\\n     * @dev arrays length mismatch\\n     */\\n    error MismatchedArrayLengths();\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IPirexEth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {DataTypes} from \\\"../libraries/DataTypes.sol\\\";\\n\\n/**\\n * @title IPirexEth\\n * @notice Interface for the PirexEth contract\\n * @dev This interface defines the methods for interacting with PirexEth.\\n * @author redactedcartel.finance\\n */\\ninterface IPirexEth {\\n    /**\\n     * @notice Initiate redemption by burning pxETH in return for upxETH\\n     * @dev This function allows the initiation of redemption by burning pxETH in exchange for upxETH.\\n     * @param _assets                     uint256 The amount of assets to burn. If the caller is AutoPxEth, then apxETH; pxETH otherwise.\\n     * @param _receiver                   address The address to receive upxETH.\\n     * @param _shouldTriggerValidatorExit bool    Whether the initiation should trigger voluntary exit.\\n     * @return postFeeAmount              uint256 The amount of pxETH burnt for the receiver.\\n     * @return feeAmount                  uint256 The amount of pxETH distributed as fees.\\n     */\\n    function initiateRedemption(\\n        uint256 _assets,\\n        address _receiver,\\n        bool _shouldTriggerValidatorExit\\n    ) external returns (uint256 postFeeAmount, uint256 feeAmount);\\n\\n    /**\\n     * @notice Dissolve validator\\n     * @dev This function dissolves a validator.\\n     * @param _pubKey bytes The public key of the validator.\\n     */\\n    function dissolveValidator(bytes calldata _pubKey) external payable;\\n\\n    /**\\n     * @notice Update validator state to be slashed\\n     * @dev This function updates the validator state to be slashed.\\n     * @param _pubKey         bytes                     The public key of the validator.\\n     * @param _removeIndex    uint256                   The index of the validator to be slashed.\\n     * @param _amount         uint256                   The ETH amount released from the Beacon chain.\\n     * @param _unordered      bool                      Whether to remove from the staking validator queue in order or not.\\n     * @param _useBuffer      bool                      Whether to use a buffer to compensate for the loss.\\n     * @param _burnerAccounts DataTypes.BurnerAccount[] Burner accounts.\\n     */\\n    function slashValidator(\\n        bytes calldata _pubKey,\\n        uint256 _removeIndex,\\n        uint256 _amount,\\n        bool _unordered,\\n        bool _useBuffer,\\n        DataTypes.BurnerAccount[] calldata _burnerAccounts\\n    ) external payable;\\n\\n    /**\\n     * @notice Harvest and mint staking rewards when available\\n     * @dev This function harvests and mints staking rewards when available.\\n     * @param _endBlock uint256 The block until which ETH rewards are computed.\\n     */\\n    function harvest(uint256 _endBlock) external payable;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title DataTypes\\n * @notice Library containing various data structures and enums for the PirexEth.\\n * @dev This library provides data structures and enums crucial for the functionality of the Pirex protocol.\\n * @author redactedcartel.finance\\n */\\nlibrary DataTypes {\\n    // Validator struct type\\n    struct Validator {\\n        // Publickey of the validator\\n        bytes pubKey;\\n        // Signature associated with the validator\\n        bytes signature;\\n        // Root hash of deposit data for the validator\\n        bytes32 depositDataRoot;\\n        // beneficiazry address to receive pxEth against preDeposit\\n        address receiver;\\n    }\\n\\n    // ValidatorDeque struct type\\n    struct ValidatorDeque {\\n        // Beginning index of the validator deque\\n        int128 _begin;\\n        // End index of the validator deque\\n        int128 _end;\\n        // Mapping of validator index to Validator struct\\n        mapping(int128 => Validator) _validators;\\n    }\\n\\n    // Burner Account Type\\n    struct BurnerAccount {\\n        // Address of the burner account\\n        address account;\\n        // Amount associated with the burner account\\n        uint256 amount;\\n    }\\n\\n    // Configurable fees\\n    enum Fees {\\n        // Fee type for deposit\\n        Deposit,\\n        // Fee type for redemption\\n        Redemption,\\n        // Fee type for instant redemption\\n        InstantRedemption\\n    }\\n\\n    // Configurable contracts\\n    enum Contract {\\n        // PxEth contract\\n        PxEth,\\n        // UpxEth contract\\n        UpxEth,\\n        // AutoPxEth contract\\n        AutoPxEth,\\n        // OracleAdapter contract\\n        OracleAdapter,\\n        // PirexEth contract\\n        PirexEth,\\n        // RewardRecipient contract\\n        RewardRecipient\\n    }\\n\\n    // Validator statuses\\n    enum ValidatorStatus {\\n        // The validator is not staking and has no defined status.\\n        None,\\n        // The validator is actively participating in the staking process.\\n        // It could be in one of the following states: pending_initialized, pending_queued, or active_ongoing.\\n        Staking,\\n        // The validator has proceed with the withdrawal process.\\n        // It represents a meta state for active_exiting, exited_unslashed, and the withdrawal process being possible.\\n        Withdrawable,\\n        // The validator's status indicating that ETH is released to the pirexEthValidators\\n        // It represents the withdrawal_done status.\\n        Dissolved,\\n        // The validator's status indicating that it has been slashed due to misbehavior.\\n        // It serves as a meta state encompassing active_slashed, exited_slashed,\\n        // and the possibility of starting the withdrawal process (withdrawal_possible) or already completed (withdrawal_done)\\n        // with the release of ETH, subject to a penalty for the misbehavior.\\n        Slashed\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"src/libraries/ValidatorQueue.sol\": {\r\n        \"ValidatorQueue\": \"0x9e0d7d79735e1c63333128149c7b616a0dc0bbdb\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExceedsMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPirexEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"PlatformUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pirexEth\",\"type\":\"address\"}],\"name\":\"SetPirexEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"WithdrawalPenaltyUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pirexEth\",\"outputs\":[{\"internalType\":\"contract IPirexEth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pirexEth\",\"type\":\"address\"}],\"name\":\"setPirexEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"setPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AutoPxEth", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000004c154b66cb340f3ae24111cc767e0184ed00cc6000000000000000000000000a52fd396891e7a74b641a2cb1a6999fcf56b077e", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}