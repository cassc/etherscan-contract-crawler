{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Timelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ncontract Timelock {\\n  error NotOwnerError();\\n  error AlreadyQueuedError(bytes32 txId);\\n  error TimestampNotInRangeError(uint blockTimestamp, uint timestamp);\\n  error NotQueuedError(bytes32 txId);\\n  error TimestampNotPassedError(uint blockTimestmap, uint timestamp);\\n  error TimestampExpiredError(uint blockTimestamp, uint expiresAt);\\n  error TxFailedError();\\n\\n  event Queue(bytes32 indexed txId, address indexed target, uint value, string func, bytes data, uint timestamp);\\n  event Execute(bytes32 indexed txId, address indexed target, uint value, string func, bytes data, uint timestamp);\\n  event Cancel(bytes32 indexed txId);\\n\\n  uint public constant MIN_DELAY = 172800; // seconds\\n  uint public constant MAX_DELAY = 604800; // seconds\\n  uint public constant GRACE_PERIOD = 1000; // seconds\\n\\n  address public owner;\\n  // tx id => queued\\n  mapping(bytes32 => bool) public queued;\\n\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n  modifier onlyOwner() {\\n    if (msg.sender != owner) {\\n      revert NotOwnerError();\\n    }\\n    _;\\n  }\\n\\n  receive() external payable {}\\n\\n  function getTxId(\\n    address _target,\\n    uint _value,\\n    string calldata _func,\\n    bytes calldata _data,\\n    uint _timestamp\\n  ) public pure returns (bytes32) {\\n    return keccak256(abi.encode(_target, _value, _func, _data, _timestamp));\\n  }\\n\\n  /**\\n   * @param _target Address of contract or account to call\\n   * @param _value Amount of ETH to send\\n   * @param _func Function signature, for example \\\"foo(address,uint256)\\\"\\n   * @param _data ABI encoded data send.\\n   * @param _timestamp Timestamp after which the transaction can be executed.\\n   */\\n  function queue(\\n    address _target,\\n    uint _value,\\n    string calldata _func,\\n    bytes calldata _data,\\n    uint _timestamp\\n  ) external onlyOwner returns (bytes32 txId) {\\n    txId = getTxId(_target, _value, _func, _data, _timestamp);\\n    if (queued[txId]) {\\n      revert AlreadyQueuedError(txId);\\n    }\\n    // ---|------------|---------------|-------\\n    //  block    block + min     block + max\\n    if (_timestamp < block.timestamp + MIN_DELAY || _timestamp > block.timestamp + MAX_DELAY) {\\n      revert TimestampNotInRangeError(block.timestamp, _timestamp);\\n    }\\n\\n    queued[txId] = true;\\n\\n    emit Queue(txId, _target, _value, _func, _data, _timestamp);\\n  }\\n\\n  function execute(\\n    address _target,\\n    uint _value,\\n    string calldata _func,\\n    bytes calldata _data,\\n    uint _timestamp\\n  ) external payable onlyOwner returns (bytes memory) {\\n    bytes32 txId = getTxId(_target, _value, _func, _data, _timestamp);\\n    if (!queued[txId]) {\\n      revert NotQueuedError(txId);\\n    }\\n    // ----|-------------------|-------\\n    //  timestamp    timestamp + grace period\\n    if (block.timestamp < _timestamp) {\\n      revert TimestampNotPassedError(block.timestamp, _timestamp);\\n    }\\n    if (block.timestamp > _timestamp + GRACE_PERIOD) {\\n      revert TimestampExpiredError(block.timestamp, _timestamp + GRACE_PERIOD);\\n    }\\n\\n    queued[txId] = false;\\n\\n    // prepare data\\n    bytes memory data;\\n    if (bytes(_func).length > 0) {\\n      // data = func selector + _data\\n      data = abi.encodePacked(bytes4(keccak256(bytes(_func))), _data);\\n    } else {\\n      // call fallback with data\\n      data = _data;\\n    }\\n\\n    // call target\\n    (bool ok, bytes memory res) = _target.call{value: _value}(data);\\n    if (!ok) {\\n      revert TxFailedError();\\n    }\\n\\n    emit Execute(txId, _target, _value, _func, _data, _timestamp);\\n\\n    return res;\\n  }\\n\\n  function cancel(bytes32 _txId) external onlyOwner {\\n    if (!queued[_txId]) {\\n      revert NotQueuedError(_txId);\\n    }\\n\\n    queued[_txId] = false;\\n\\n    emit Cancel(_txId);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"@uniswap/v3-core/=lib/v3-core/\",\r\n      \"@uniswap/v3-periphery/=lib/v3-periphery/contracts/\",\r\n      \"v3-core/=lib/v3-core/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"}],\"name\":\"AlreadyQueuedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"}],\"name\":\"NotQueuedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"TimestampExpiredError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TimestampNotInRangeError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockTimestmap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TimestampNotPassedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TxFailedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"func\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"func\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Queue\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txId\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_func\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_func\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getTxId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_func\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queued\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Timelock", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}