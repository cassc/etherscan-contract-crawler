{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../core/interfaces/IBitSwapFactory.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\\nabstract contract Base {\\n    /// @notice address of BitSwapFactory\\n    address public immutable factory;\\n\\n    /// @notice address of weth9 token\\n    address public immutable WETH9;\\n\\n    modifier checkDeadline(uint256 deadline) {\\n        require(block.timestamp <= deadline, 'Out of time');\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    /// @notice Constructor of base.\\n    /// @param _factory address of BitSwapFactory\\n    /// @param _WETH9 address of weth9 token\\n    constructor(address _factory, address _WETH9) {\\n        factory = _factory;\\n        WETH9 = _WETH9;\\n    }\\n\\n    /// @notice Make multiple function calls in this contract in a single transaction\\n    ///     and return the data for each function call, revert if any function call fails\\n    /// @param data The encoded function data for each function call\\n    /// @return results result of each function call\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n\\n    /// @notice Transfer tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfer tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approve the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfer ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n\\n    /// @notice Withdraw all weth9 token of this contract and send the withdrawed eth to recipient\\n    ///    usually used in multicall when mint/swap/update limitorder with eth\\n    ///    normally this contract has no any erc20 token or eth after or before a transaction\\n    ///    we donot need to worry that some one can steal eth from this contract\\n    /// @param minAmount The minimum amount of WETH9 to withdraw\\n    /// @param recipient The address to receive all withdrawed eth from this contract\\n    function unwrapWETH9(uint256 minAmount, address recipient) external payable {\\n        uint256 all = IWETH9(WETH9).balanceOf(address(this));\\n        require(all >= minAmount, 'WETH9 Not Enough');\\n\\n        if (all > 0) {\\n            IWETH9(WETH9).withdraw(all);\\n            safeTransferETH(recipient, all);\\n        }\\n    }\\n\\n    /// @notice Send all balance of specified token in this contract to recipient\\n    ///    usually used in multicall when mint/swap/update limitorder with eth\\n    ///    normally this contract has no any erc20 token or eth after or before a transaction\\n    ///    we donot need to worry that some one can steal some token from this contract\\n    /// @param token address of the token\\n    /// @param minAmount balance should >= minAmount\\n    /// @param recipient the address to receive specified token from this contract\\n    function sweepToken(\\n        address token,\\n        uint256 minAmount,\\n        address recipient\\n    ) external payable {\\n        uint256 all = IERC20(token).balanceOf(address(this));\\n        require(all >= minAmount, 'WETH9 Not Enough');\\n\\n        if (all > 0) {\\n            safeTransfer(token, recipient, all);\\n        }\\n    }\\n\\n    /// @notice Send all balance of eth in this contract to msg.sender\\n    ///    usually used in multicall when mint/swap/update limitorder with eth\\n    ///    normally this contract has no any erc20 token or eth after or before a transaction\\n    ///    we donot need to worry that some one can steal some token from this contract\\n    function refundETH() external payable {\\n        if (address(this).balance > 0) safeTransferETH(msg.sender, address(this).balance);\\n    }\\n\\n    /// @param token The token to pay\\n    /// @param payer The entity that must pay\\n    /// @param recipient The entity that will receive payment\\n    /// @param value The amount to pay\\n    function pay(\\n        address token,\\n        address payer,\\n        address recipient,\\n        uint256 value\\n    ) internal {\\n        if (token == WETH9 && address(this).balance >= value) {\\n            // pay with WETH9\\n            IWETH9(WETH9).deposit{value: value}(); // wrap only what is needed to pay\\n            IWETH9(WETH9).transfer(recipient, value);\\n        } else if (payer == address(this)) {\\n            // pay with tokens already in the contract (for the exact input multihop case)\\n            safeTransfer(token, recipient, value);\\n        } else {\\n            // pull payment\\n            safeTransferFrom(token, payer, recipient, value);\\n        }\\n    }\\n\\n    /// @notice Query pool address from factory by (tokenX, tokenY, fee).\\n    /// @param tokenX tokenX of swap pool\\n    /// @param tokenY tokenY of swap pool\\n    /// @param fee fee amount of swap pool\\n    function pool(address tokenX, address tokenY, uint24 fee) public view returns(address) {\\n        return IBitSwapFactory(factory).pool(tokenX, tokenY, fee);\\n    }\\n    function verify(address tokenX, address tokenY, uint24 fee) internal view {\\n        require (msg.sender == pool(tokenX, tokenY, fee), \\\"sp\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/core/interfaces/IBitSwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IBitSwapMintCallback {\\n\\n    /// @notice Called to msg.sender in BitSwapPool#mint call\\n    /// @param x Amount of tokenX need to pay from miner\\n    /// @param y Amount of tokenY need to pay from miner\\n    /// @param data Any data passed through by the msg.sender via the BitSwapPool#mint call\\n    function mintDepositCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n}\\n\\ninterface IBitSwapCallback {\\n\\n    /// @notice Called to msg.sender in BitSwapPool#swapY2X(DesireX) call\\n    /// @param x Amount of tokenX trader will acquire\\n    /// @param y Amount of tokenY trader will pay\\n    /// @param data Any dadta passed though by the msg.sender via the BitSwapPool#swapY2X(DesireX) call\\n    function swapY2XCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Called to msg.sender in BitSwapPool#swapX2Y(DesireY) call\\n    /// @param x Amount of tokenX trader will pay\\n    /// @param y Amount of tokenY trader will require\\n    /// @param data Any dadta passed though by the msg.sender via the BitSwapPool#swapX2Y(DesireY) call\\n    function swapX2YCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n}\\n\\ninterface IBitSwapAddLimOrderCallback {\\n\\n    /// @notice Called to msg.sender in BitSwapPool#addLimOrderWithX(Y) call\\n    /// @param x Amount of tokenX seller will pay\\n    /// @param y Amount of tokenY seller will pay\\n    /// @param data Any dadta passed though by the msg.sender via the BitSwapPool#addLimOrderWithX(Y) call\\n    function payCallback(\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n}\"\r\n    },\r\n    \"contracts/core/interfaces/IBitSwapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IBitSwapFactory {\\n\\n    /// @notice emit when successfuly create a new pool (calling BitSwapFactory#newPool)\\n    /// @param tokenX address of erc-20 tokenX\\n    /// @param tokenY address of erc-20 tokenY\\n    /// @param fee fee amount of swap (3000 means 0.3%)\\n    /// @param pointDelta minimum number of distance between initialized or limitorder points\\n    /// @param pool address of swap pool\\n    event NewPool(\\n        address indexed tokenX,\\n        address indexed tokenY,\\n        uint24 indexed fee,\\n        uint24 pointDelta,\\n        address pool\\n    );\\n\\n    /// @notice module to support swap from tokenX to tokenY\\n    /// @return swapX2YModule address\\n    function swapX2YModule() external returns (address);\\n\\n    /// @notice module to support swap from tokenY to tokenX\\n    /// @return swapY2XModule address\\n    function swapY2XModule() external returns (address);\\n\\n    /// @notice module to support mint/burn/collect function of pool\\n    /// @return liquidityModule address\\n    function liquidityModule() external returns (address);\\n\\n    /// @notice address of module for user to manage limit orders\\n    /// @return limitOrderModule address\\n    function limitOrderModule() external returns (address);\\n\\n    /// @notice address of module for flash loan\\n    /// @return flashModule address\\n    function flashModule() external returns (address);\\n\\n    /// @notice default fee rate from miner's fee gain\\n    /// @return defaultFeeChargePercent default fee rate * 100\\n    function defaultFeeChargePercent() external returns (uint24);\\n\\n    /// @notice Enables a fee amount with the given pointDelta\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee fee amount (3000 means 0.3%)\\n    /// @param pointDelta The spacing between points to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, uint24 pointDelta) external;\\n\\n    /// @notice Create a new pool which not exists.\\n    /// @param tokenX address of tokenX\\n    /// @param tokenY address of tokenY\\n    /// @param fee fee amount\\n    /// @param currentPoint initial point (log 1.0001 of price)\\n    /// @return address of newly created pool\\n    function newPool(\\n        address tokenX,\\n        address tokenY,\\n        uint24 fee,\\n        int24 currentPoint\\n    ) external returns (address);\\n\\n    /// @notice Charge receiver of all pools.\\n    /// @return address of charge receiver\\n    function chargeReceiver() external view returns(address);\\n\\n    /// @notice Get pool of (tokenX, tokenY, fee), address(0) for not exists.\\n    /// @param tokenX address of tokenX\\n    /// @param tokenY address of tokenY\\n    /// @param fee fee amount\\n    /// @return address of pool\\n    function pool(\\n        address tokenX,\\n        address tokenY,\\n        uint24 fee\\n    ) external view returns(address);\\n\\n    /// @notice Get point delta of a given fee amount.\\n    /// @param fee fee amount\\n    /// @return pointDelta the point delta\\n    function fee2pointDelta(uint24 fee) external view returns (int24 pointDelta);\\n\\n    /// @notice Change charge receiver, only owner of factory can call.\\n    /// @param _chargeReceiver address of new receiver\\n    function modifyChargeReceiver(address _chargeReceiver) external;\\n\\n    /// @notice Change defaultFeeChargePercent\\n    /// @param _defaultFeeChargePercent new charge percent\\n    function modifyDefaultFeeChargePercent(uint24 _defaultFeeChargePercent) external;\\n\\n    function deployPoolParams() external view returns(\\n        address tokenX,\\n        address tokenY,\\n        uint24 fee,\\n        int24 currentPoint,\\n        int24 pointDelta,\\n        uint24 feeChargePercent\\n    );\\n    \\n}\"\r\n    },\r\n    \"contracts/core/interfaces/IBitSwapPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IBitSwapPool {\\n\\n    /// @notice Emitted when miner successfully add liquidity (mint).\\n    /// @param sender the address that minted the liquidity\\n    /// @param owner the owner who will benefit from this liquidity\\n    /// @param leftPoint left endpoint of the liquidity\\n    /// @param rightPoint right endpoint of the liquidity\\n    /// @param liquidity the amount of liquidity minted to the range [leftPoint, rightPoint)\\n    /// @param amountX amount of tokenX deposit\\n    /// @param amountY amount of tokenY deposit\\n    event Mint(\\n        address sender, \\n        address indexed owner, \\n        int24 indexed leftPoint, \\n        int24 indexed rightPoint, \\n        uint128 liquidity, \\n        uint256 amountX, \\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted when miner successfully decrease liquidity (withdraw).\\n    /// @param owner owner address of liquidity\\n    /// @param leftPoint left endpoint of liquidity\\n    /// @param rightPoint right endpoint of liquidity\\n    /// @param liquidity amount of liquidity decreased\\n    /// @param amountX amount of tokenX withdrawed\\n    /// @param amountY amount of tokenY withdrawed\\n    event Burn(\\n        address indexed owner, \\n        int24 indexed leftPoint,\\n        int24 indexed rightPoint,\\n        uint128 liquidity,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted when fees and withdrawed liquidity are collected \\n    /// @param owner The owner of the Liquidity\\n    /// @param recipient recipient of those token\\n    /// @param leftPoint The left point of the liquidity\\n    /// @param rightPoint The right point of the liquidity\\n    /// @param amountX The amount of tokenX (fees and withdrawed tokenX from liquidity)\\n    /// @param amountY The amount of tokenY (fees and withdrawed tokenY from liquidity)\\n    event CollectLiquidity(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed leftPoint,\\n        int24 indexed rightPoint,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted when a trader successfully exchange.\\n    /// @param tokenX tokenX of pool\\n    /// @param tokenY tokenY of pool\\n    /// @param fee fee amount of pool\\n    /// @param sellXEarnY true for selling tokenX, false for buying tokenX\\n    /// @param amountX amount of tokenX in this exchange\\n    /// @param amountY amount of tokenY in this exchange\\n    event Swap(\\n        address indexed tokenX,\\n        address indexed tokenY,\\n        uint24 indexed fee,\\n        bool sellXEarnY,\\n        uint256 amountX,\\n        uint256 amountY\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of tokenX/tokenY.\\n    /// @param sender the address that initiated the swap call, and that received the callback\\n    /// @param recipient the address that received the tokens from flash\\n    /// @param amountX the amount of tokenX that was flashed\\n    /// @param amountY the amount of tokenY that was flashed\\n    /// @param paidX the amount of tokenX paid for the flash, which can exceed the amountX plus the fee\\n    /// @param paidY the amount of tokenY paid for the flash, which can exceed the amountY plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amountX,\\n        uint256 amountY,\\n        uint256 paidX,\\n        uint256 paidY\\n    );\\n\\n    /// @notice Emitted when a seller successfully add a limit order.\\n    /// @param owner owner of limit order\\n    /// @param addAmount amount of token to sell the seller added\\n    /// @param acquireAmount amount of earn-token acquired, if there exists some opposite order before \\n    /// @param point point of limit order\\n    /// @param claimSold claimed sold sell-token, if this owner has order with same direction on this point before\\n    /// @param claimEarn claimed earned earn-token, if this owner has order with same direction on this point before\\n    /// @param sellXEarnY direction of limit order, etc. sell tokenX or sell tokenY\\n    event AddLimitOrder(\\n        address indexed owner,\\n        uint128 addAmount,\\n        uint128 acquireAmount,\\n        int24 indexed point,\\n        uint128 claimSold,\\n        uint128 claimEarn,\\n        bool sellXEarnY\\n    );\\n\\n    /// @notice Emitted when a seller successfully decrease a limit order.\\n    /// @param owner owner of limit order\\n    /// @param decreaseAmount amount of token to sell the seller decreased\\n    /// @param point point of limit order\\n    /// @param claimSold claimed sold sell-token\\n    /// @param claimEarn claimed earned earn-token\\n    /// @param sellXEarnY direction of limit order, etc. sell tokenX or sell tokenY\\n    event DecLimitOrder(\\n        address indexed owner,\\n        uint128 decreaseAmount,\\n        int24 indexed point,\\n        uint128 claimSold,\\n        uint128 claimEarn,\\n        bool sellXEarnY\\n    );\\n\\n    /// @notice Emitted when collect from a limit order\\n    /// @param owner The owner of the Liquidity\\n    /// @param recipient recipient of those token\\n    /// @param point The point of the limit order\\n    /// @param collectDec The amount of decreased sell token collected\\n    /// @param collectEarn The amount of earn token collected\\n    /// @param sellXEarnY direction of limit order, etc. sell tokenX or sell tokenY\\n    event CollectLimitOrder(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed point,\\n        uint128 collectDec,\\n        uint128 collectEarn,\\n        bool sellXEarnY\\n    );\\n\\n    /// @notice Returns the information about a liquidity by the liquidity's key.\\n    /// @param key the liquidity's key is a hash of a preimage composed by the miner(owner), pointLeft and pointRight\\n    /// @return liquidity the amount of liquidity,\\n    /// @return lastFeeScaleX_128 fee growth of tokenX inside the range as of the last mint/burn/collect,\\n    /// @return lastFeeScaleY_128 fee growth of tokenY inside the range as of the last mint/burn/collect,\\n    /// @return tokenOwedX the computed amount of tokenX miner can collect as of the last mint/burn/collect,\\n    /// @return tokenOwedY the computed amount of tokenY miner can collect as of the last mint/burn/collect\\n    function liquidity(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 liquidity,\\n            uint256 lastFeeScaleX_128,\\n            uint256 lastFeeScaleY_128,\\n            uint256 tokenOwedX,\\n            uint256 tokenOwedY\\n        );\\n    \\n    /// @notice Returns the information about a user's limit order (sell tokenY and earn tokenX).\\n    /// @param key the limit order's key is a hash of a preimage composed by the seller, point\\n    /// @return lastAccEarn total amount of tokenX earned by all users at this point as of the last add/dec/collect\\n    /// @return sellingRemain amount of tokenY not selled in this limit order\\n    /// @return sellingDec amount of tokenY decreased by seller from this limit order\\n    /// @return earn amount of unlegacy earned tokenX in this limit order not assigned\\n    /// @return legacyEarn amount of legacy earned tokenX in this limit order not assgined\\n    /// @return earnAssign assigned amount of tokenX earned (both legacy and unlegacy) in this limit order\\n    function userEarnX(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint256 lastAccEarn,\\n            uint128 sellingRemain,\\n            uint128 sellingDec,\\n            uint128 earn,\\n            uint128 legacyEarn,\\n            uint128 earnAssign\\n        );\\n    \\n    /// @notice Returns the information about a user's limit order (sell tokenX and earn tokenY).\\n    /// @param key the limit order's key is a hash of a preimage composed by the seller, point\\n    /// @return lastAccEarn total amount of tokenY earned by all users at this point as of the last add/dec/collect\\n    /// @return sellingRemain amount of tokenX not selled in this limit order\\n    /// @return sellingDec amount of tokenX decreased by seller from this limit order\\n    /// @return earn amount of unlegacy earned tokenY in this limit order not assigned\\n    /// @return legacyEarn amount of legacy earned tokenY in this limit order not assgined\\n    /// @return earnAssign assigned amount of tokenY earned (both legacy and unlegacy) in this limit order\\n    function userEarnY(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint256 lastAccEarn,\\n            uint128 sellingRemain,\\n            uint128 sellingDec,\\n            uint128 earn,\\n            uint128 legacyEarn,\\n            uint128 earnAssign\\n        );\\n    \\n    /// @notice Mark a given amount of tokenY in a limitorder(sellx and earn y) as assigned.\\n    /// @param point point (log Price) of seller's limit order,be sure to be times of pointDelta\\n    /// @param assignY max amount of tokenY to mark assigned\\n    /// @param fromLegacy true for assigning earned token from legacyEarnY\\n    /// @return actualAssignY actual amount of tokenY marked\\n    function assignLimOrderEarnY(\\n        int24 point,\\n        uint128 assignY,\\n        bool fromLegacy\\n    ) external returns(uint128 actualAssignY);\\n    \\n    /// @notice Mark a given amount of tokenX in a limitorder(selly and earn x) as assigned.\\n    /// @param point point (log Price) of seller's limit order,be sure to be times of pointDelta\\n    /// @param assignX max amount of tokenX to mark assigned\\n    /// @param fromLegacy true for assigning earned token from legacyEarnX\\n    /// @return actualAssignX actual amount of tokenX marked\\n    function assignLimOrderEarnX(\\n        int24 point,\\n        uint128 assignX,\\n        bool fromLegacy\\n    ) external returns(uint128 actualAssignX);\\n\\n    /// @notice Decrease limitorder of selling X.\\n    /// @param point point of seller's limit order, be sure to be times of pointDelta\\n    /// @param deltaX max amount of tokenX seller wants to decrease\\n    /// @return actualDeltaX actual amount of tokenX decreased\\n    /// @return legacyAccEarn legacyAccEarnY of pointOrder at point when calling this interface\\n    function decLimOrderWithX(\\n        int24 point,\\n        uint128 deltaX\\n    ) external returns (uint128 actualDeltaX, uint256 legacyAccEarn);\\n    \\n    /// @notice Decrease limitorder of selling Y.\\n    /// @param point point of seller's limit order, be sure to be times of pointDelta\\n    /// @param deltaY max amount of tokenY seller wants to decrease\\n    /// @return actualDeltaY actual amount of tokenY decreased\\n    /// @return legacyAccEarn legacyAccEarnX of pointOrder at point when calling this interface\\n    function decLimOrderWithY(\\n        int24 point,\\n        uint128 deltaY\\n    ) external returns (uint128 actualDeltaY, uint256 legacyAccEarn);\\n    \\n    /// @notice Add a limit order (selling x) in the pool.\\n    /// @param recipient owner of the limit order\\n    /// @param point point of the order, be sure to be times of pointDelta\\n    /// @param amountX amount of tokenX to sell\\n    /// @param data any data that should be passed through to the callback\\n    /// @return orderX actual added amount of tokenX\\n    /// @return acquireY amount of tokenY acquired if there is a limit order to sell y before adding\\n    function addLimOrderWithX(\\n        address recipient,\\n        int24 point,\\n        uint128 amountX,\\n        bytes calldata data\\n    ) external returns (uint128 orderX, uint128 acquireY);\\n\\n    /// @notice Add a limit order (selling y) in the pool.\\n    /// @param recipient owner of the limit order\\n    /// @param point point of the order, be sure to be times of pointDelta\\n    /// @param amountY amount of tokenY to sell\\n    /// @param data any data that should be passed through to the callback\\n    /// @return orderY actual added amount of tokenY\\n    /// @return acquireX amount of tokenX acquired if there exists a limit order to sell x before adding\\n    function addLimOrderWithY(\\n        address recipient,\\n        int24 point,\\n        uint128 amountY,\\n        bytes calldata data\\n    ) external returns (uint128 orderY, uint128 acquireX);\\n\\n    /// @notice Collect earned or decreased token from limit order.\\n    /// @param recipient address to benefit\\n    /// @param point point of limit order, be sure to be times of pointDelta\\n    /// @param collectDec max amount of decreased selling token to collect\\n    /// @param collectEarn max amount of earned token to collect\\n    /// @param isEarnY direction of this limit order, true for sell y, false for sell x\\n    /// @return actualCollectDec actual amount of decresed selling token collected\\n    /// @return actualCollectEarn actual amount of earned token collected\\n    function collectLimOrder(\\n        address recipient, int24 point, uint128 collectDec, uint128 collectEarn, bool isEarnY\\n    ) external returns(uint128 actualCollectDec, uint128 actualCollectEarn);\\n\\n    /// @notice Add liquidity to the pool.\\n    /// @param recipient newly created liquidity will belong to this address\\n    /// @param leftPt left endpoint of the liquidity, be sure to be times of pointDelta\\n    /// @param rightPt right endpoint of the liquidity, be sure to be times of pointDelta\\n    /// @param liquidDelta amount of liquidity to add\\n    /// @param data any data that should be passed through to the callback\\n    /// @return amountX The amount of tokenX that was paid for the liquidity. Matches the value in the callback\\n    /// @return amountY The amount of tokenY that was paid for the liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint128 liquidDelta,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    /// @notice Decrease a given amount of liquidity from msg.sender's liquidities.\\n    /// @param leftPt left endpoint of the liquidity\\n    /// @param rightPt right endpoint of the liquidity\\n    /// @param liquidDelta amount of liquidity to burn\\n    /// @return amountX The amount of tokenX should be refund after burn\\n    /// @return amountY The amount of tokenY should be refund after burn\\n    function burn(\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint128 liquidDelta\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    /// @notice Collect tokens (fee or refunded after burn) from a liquidity.\\n    /// @param recipient the address which should receive the collected tokens\\n    /// @param leftPt left endpoint of the liquidity\\n    /// @param rightPt right endpoint of the liquidity\\n    /// @param amountXLim max amount of tokenX the owner wants to collect\\n    /// @param amountYLim max amount of tokenY the owner wants to collect\\n    /// @return actualAmountX the amount tokenX collected\\n    /// @return actualAmountY the amount tokenY collected\\n    function collect(\\n        address recipient,\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint256 amountXLim,\\n        uint256 amountYLim\\n    ) external returns (uint256 actualAmountX, uint256 actualAmountY);\\n\\n    /// @notice Swap tokenY for tokenX, given max amount of tokenY user willing to pay.\\n    /// @param recipient the address to receive tokenX\\n    /// @param amount the max amount of tokenY user willing to pay\\n    /// @param highPt the highest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX payed\\n    /// @return amountY amount of tokenY acquired\\n    function swapY2X(\\n        address recipient,\\n        uint128 amount,\\n        int24 highPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n    \\n    /// @notice Swap tokenY for tokenX, given amount of tokenX user desires.\\n    /// @param recipient the address to receive tokenX\\n    /// @param desireX the amount of tokenX user desires\\n    /// @param highPt the highest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX payed\\n    /// @return amountY amount of tokenY acquired\\n    function swapY2XDesireX(\\n        address recipient,\\n        uint128 desireX,\\n        int24 highPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n    \\n    /// @notice Swap tokenX for tokenY, given max amount of tokenX user willing to pay.\\n    /// @param recipient the address to receive tokenY\\n    /// @param amount the max amount of tokenX user willing to pay\\n    /// @param lowPt the lowest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX acquired\\n    /// @return amountY amount of tokenY payed\\n    function swapX2Y(\\n        address recipient,\\n        uint128 amount,\\n        int24 lowPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n    \\n    /// @notice Swap tokenX for tokenY, given amount of tokenY user desires.\\n    /// @param recipient the address to receive tokenY\\n    /// @param desireY the amount of tokenY user desires\\n    /// @param lowPt the lowest point(price) of x/y during swap\\n    /// @param data any data to be passed through to the callback\\n    /// @return amountX amount of tokenX acquired\\n    /// @return amountY amount of tokenY payed\\n    function swapX2YDesireY(\\n        address recipient,\\n        uint128 desireY,\\n        int24 lowPt,\\n        bytes calldata data\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    /// @notice Returns sqrt(1.0001), in 96 bit fixpoint number.\\n    function sqrtRate_96() external view returns(uint160);\\n    \\n    /// @notice State values of pool.\\n    /// @return sqrtPrice_96 a 96 fixpoing number describe the sqrt value of current price(tokenX/tokenY)\\n    /// @return currentPoint the current point of the pool, 1.0001 ^ currentPoint = price\\n    /// @return observationCurrentIndex the index of the last oracle observation that was written,\\n    /// @return observationQueueLen the current maximum number of observations stored in the pool,\\n    /// @return observationNextQueueLen the next maximum number of observations, to be updated when the observation.\\n    /// @return locked whether the pool is locked (only used for checking reentrance)\\n    /// @return liquidity liquidity on the currentPoint (currX * sqrtPrice + currY / sqrtPrice)\\n    /// @return liquidityX liquidity of tokenX\\n    function state()\\n        external view\\n        returns(\\n            uint160 sqrtPrice_96,\\n            int24 currentPoint,\\n            uint16 observationCurrentIndex,\\n            uint16 observationQueueLen,\\n            uint16 observationNextQueueLen,\\n            bool locked,\\n            uint128 liquidity,\\n            uint128 liquidityX\\n        );\\n    \\n    /// @notice LimitOrder info on a given point.\\n    /// @param point the given point \\n    /// @return sellingX total amount of tokenX selling on the point\\n    /// @return earnY total amount of unclaimed earned tokenY for unlegacy sellingX\\n    /// @return accEarnY total amount of earned tokenY(via selling tokenX) by all users at this point as of the last swap\\n    /// @return legacyAccEarnY latest recorded 'accEarnY' value when sellingX is clear (legacy)\\n    /// @return legacyEarnY total amount of unclaimed earned tokenY for legacy (cleared during swap) sellingX\\n    /// @return sellingY total amount of tokenYselling on the point\\n    /// @return earnX total amount of unclaimed earned tokenX for unlegacy sellingY\\n    /// @return legacyEarnX total amount of unclaimed earned tokenX for legacy (cleared during swap) sellingY\\n    /// @return accEarnX total amount of earned tokenX(via selling tokenY) by all users at this point as of the last swap\\n    /// @return legacyAccEarnX latest recorded 'accEarnX' value when sellingY is clear (legacy)\\n    function limitOrderData(int24 point)\\n        external view\\n        returns(\\n            uint128 sellingX,\\n            uint128 earnY,\\n            uint256 accEarnY,\\n            uint256 legacyAccEarnY,\\n            uint128 legacyEarnY,\\n            uint128 sellingY,\\n            uint128 earnX,\\n            uint128 legacyEarnX,\\n            uint256 accEarnX,\\n            uint256 legacyAccEarnX\\n        );\\n    \\n    /// @notice Query infomation about a point whether has limit order or is an liquidity's endpoint.\\n    /// @param point point to query\\n    /// @return val endpoint for val&1>0 and has limit order for val&2 > 0\\n    function orderOrEndpoint(int24 point) external returns(int24 val);\\n\\n    /// @notice Returns observation data about a specific index.\\n    /// @param index the index of observation array\\n    /// @return timestamp the timestamp of the observation,\\n    /// @return accPoint the point multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// @return init whether the observation has been initialized and the above values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 timestamp,\\n            int56 accPoint,\\n            bool init\\n        );\\n\\n    /// @notice Point status in the pool.\\n    /// @param point the point\\n    /// @return liquidSum the total amount of liquidity that uses the point either as left endpoint or right endpoint\\n    /// @return liquidDelta how much liquidity changes when the pool price crosses the point from left to right\\n    /// @return accFeeXOut_128 the fee growth on the other side of the point from the current point in tokenX\\n    /// @return accFeeYOut_128 the fee growth on the other side of the point from the current point in tokenY\\n    /// @return isEndpt whether the point is an endpoint of a some miner's liquidity, true if liquidSum > 0\\n    function points(int24 point)\\n        external\\n        view\\n        returns (\\n            uint128 liquidSum,\\n            int128 liquidDelta,\\n            uint256 accFeeXOut_128,\\n            uint256 accFeeYOut_128,\\n            bool isEndpt\\n        );\\n\\n    /// @notice Returns 256 packed point (statusVal>0) boolean values. See PointBitmap for more information.\\n    function pointBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the integral value of point(time) and integral value of 1/liquidity(time)\\n    ///     at some target timestamps (block.timestamp - secondsAgo[i])\\n    /// @dev Reverts if target timestamp is early than oldest observation in the queue\\n    /// @dev If you call this method with secondsAgos = [3600, 0]. the average point of this pool during recent hour is \\n    /// (accPoints[1] - accPoints[0]) / 3600\\n    /// @param secondsAgos describe the target timestamp , targetTimestimp[i] = block.timestamp - secondsAgo[i]\\n    /// @return accPoints integral value of point(time) from 0 to each target timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory accPoints);\\n    \\n    /// @notice Expand max-length of observation queue.\\n    /// @param newNextQueueLen new value of observationNextQueueLen, which should be greater than current observationNextQueueLen\\n    function expandObservationQueue(uint16 newNextQueueLen) external;\\n\\n    /// @notice Borrow tokenX and/or tokenY and pay it back within a block.\\n    /// @dev The caller needs to implement a IBitSwapPool#flashCallback callback function\\n    /// @param recipient the address which will receive the tokenY and/or tokenX\\n    /// @param amountX the amount of tokenX to borrow\\n    /// @param amountY the amount of tokenY to borrow\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amountX,\\n        uint256 amountY,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Returns a snapshot infomation of Liquidity in [leftPoint, rightPoint).\\n    /// @param leftPoint left endpoint of range, should be times of pointDelta\\n    /// @param rightPoint right endpoint of range, should be times of pointDelta\\n    /// @return deltaLiquidities an array of delta liquidity for points in the range\\n    ///    note 1. delta liquidity here is amount of liquidity changed when cross a point from left to right\\n    ///    note 2. deltaLiquidities only contains points which are times of pointDelta\\n    ///    note 3. this function may cost a ENORMOUS amount of gas, be careful to call\\n    function liquiditySnapshot(int24 leftPoint, int24 rightPoint) external view returns(int128[] memory deltaLiquidities);\\n\\n    struct LimitOrderStruct {\\n        uint128 sellingX;\\n        uint128 earnY;\\n        uint256 accEarnY;\\n        uint128 sellingY;\\n        uint128 earnX;\\n        uint256 accEarnX;\\n    }\\n\\n    /// @notice Returns a snapshot infomation of Limit Order in [leftPoint, rightPoint).\\n    /// @param leftPoint left endpoint of range, should be times of pointDelta\\n    /// @param rightPoint right endpoint of range, should be times of pointDelta\\n    /// @return limitOrders an array of Limit Orders for points in the range\\n    ///    note 1. this function may cost a HUGE amount of gas, be careful to call\\n    function limitOrderSnapshot(int24 leftPoint, int24 rightPoint) external view returns(LimitOrderStruct[] memory limitOrders); \\n\\n    /// @notice Amount of charged fee on tokenX.\\n    function totalFeeXCharged() external view returns(uint256);\\n\\n    /// @notice Amount of charged fee on tokenY.\\n    function totalFeeYCharged() external view returns(uint256);\\n\\n    /// @notice Percent to charge from miner's fee.\\n    function feeChargePercent() external view returns(uint24);\\n\\n    /// @notice Collect charged fee, only factory's chargeReceiver can call.\\n    function collectFeeCharged() external;\\n\\n    /// @notice modify 'feeChargePercent', only owner has authority.\\n    /// @param newFeeChargePercent new value of feeChargePercent, a nature number range in [0, 100], \\n    function modifyFeeChargePercent(uint24 newFeeChargePercent) external;\\n    \\n}\"\r\n    },\r\n    \"contracts/libraries/AmountMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n  \\nimport \\\"./MulDivMath.sol\\\";\\nimport \\\"./TwoPower.sol\\\";\\nimport \\\"./LogPowMath.sol\\\";\\n\\nlibrary AmountMath {\\n\\n    function getAmountYUnitLiquidity_96(\\n        uint160 sqrtPriceL_96,\\n        uint160 sqrtPriceR_96,\\n        uint160 sqrtRate_96\\n    ) internal pure returns (uint256 amount_96) {\\n        uint160 numerator = sqrtPriceR_96 - sqrtPriceL_96;\\n        uint160 denominator = sqrtRate_96 - uint160(TwoPower.pow96);\\n        amount_96 = MulDivMath.mulDivCeil(TwoPower.pow96, numerator, denominator);\\n    }\\n\\n    function getAmountXUnitLiquidity_96(\\n        int24 leftPt,\\n        int24 rightPt,\\n        uint160 sqrtPriceR_96,\\n        uint160 sqrtRate_96\\n    ) internal pure returns (uint256 amount_96) {\\n        // rightPt - (leftPt - 1), pc = leftPt - 1\\n        uint160 sqrtPricePrPc_96 = LogPowMath.getSqrtPrice(rightPt - leftPt + 1);\\n        uint160 sqrtPricePrPd_96 = LogPowMath.getSqrtPrice(rightPt + 1);\\n\\n        uint160 numerator = sqrtPricePrPc_96 - sqrtRate_96;\\n        uint160 denominator = sqrtPricePrPd_96 - sqrtPriceR_96;\\n        amount_96 = MulDivMath.mulDivCeil(TwoPower.pow96, numerator, denominator);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LogPowMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary LogPowMath {\\n\\n    int24 internal constant MIN_POINT = -887272;\\n\\n    int24 internal constant MAX_POINT = -MIN_POINT;\\n\\n\\n    uint160 internal constant MIN_SQRT_PRICE = 4295128739;\\n\\n    uint160 internal constant MAX_SQRT_PRICE = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice sqrt(1.0001^point) in form oy 96-bit fix point num\\n    function getSqrtPrice(int24 point) internal pure returns (uint160 sqrtPrice_96) {\\n        uint256 absIdx = point < 0 ? uint256(-int256(point)) : uint256(int256(point));\\n        require(absIdx <= uint256(int256(MAX_POINT)), 'T');\\n\\n        uint256 value = absIdx & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absIdx & 0x2 != 0) value = (value * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absIdx & 0x4 != 0) value = (value * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absIdx & 0x8 != 0) value = (value * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absIdx & 0x10 != 0) value = (value * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absIdx & 0x20 != 0) value = (value * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absIdx & 0x40 != 0) value = (value * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absIdx & 0x80 != 0) value = (value * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absIdx & 0x100 != 0) value = (value * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absIdx & 0x200 != 0) value = (value * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absIdx & 0x400 != 0) value = (value * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absIdx & 0x800 != 0) value = (value * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absIdx & 0x1000 != 0) value = (value * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absIdx & 0x2000 != 0) value = (value * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absIdx & 0x4000 != 0) value = (value * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absIdx & 0x8000 != 0) value = (value * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absIdx & 0x10000 != 0) value = (value * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absIdx & 0x20000 != 0) value = (value * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absIdx & 0x40000 != 0) value = (value * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absIdx & 0x80000 != 0) value = (value * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (point > 0) value = type(uint256).max / value;\\n\\n        sqrtPrice_96 = uint160((value >> 32) + (value % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    // floor(log1.0001(sqrtPrice_96))\\n    function getLogSqrtPriceFloor(uint160 sqrtPrice_96) internal pure returns (int24 logValue) {\\n        // second inequality must be < because the price can nevex reach the price at the max tick\\n        require(sqrtPrice_96 >= MIN_SQRT_PRICE && sqrtPrice_96 < MAX_SQRT_PRICE, 'R');\\n        uint256 sqrtPrice_128 = uint256(sqrtPrice_96) << 32;\\n\\n        uint256 x = sqrtPrice_128;\\n        uint256 m = 0;\\n\\n        assembly {\\n            let y := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(5, gt(x, 0xFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(4, gt(x, 0xFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(3, gt(x, 0xFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(2, gt(x, 0xF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(1, gt(x, 0x3))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := gt(x, 0x1)\\n            m := or(m, y)\\n        }\\n\\n        if (m >= 128) x = sqrtPrice_128 >> (m - 127);\\n        else x = sqrtPrice_128 << (127 - m);\\n\\n        int256 l2 = (int256(m) - 128) << 64;\\n\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(63, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(62, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(61, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(60, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(59, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(58, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(57, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(56, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(55, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(54, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(53, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(52, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(51, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(50, y))\\n        }\\n\\n        int256 ls10001 = l2 * 255738958999603826347141;\\n\\n        int24 logFloor = int24((ls10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 logUpper = int24((ls10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        logValue = logFloor == logUpper ? logFloor : getSqrtPrice(logUpper) <= sqrtPrice_96 ? logUpper : logFloor;\\n    }\\n\\n    function getLogSqrtPriceFU(uint160 sqrtPrice_96) internal pure returns (int24 logFloor, int24 logUpper) {\\n        // second inequality must be < because the price can nevex reach the price at the max tick\\n        require(sqrtPrice_96 >= MIN_SQRT_PRICE && sqrtPrice_96 < MAX_SQRT_PRICE, 'R');\\n        uint256 sqrtPrice_128 = uint256(sqrtPrice_96) << 32;\\n\\n        uint256 x = sqrtPrice_128;\\n        uint256 m = 0;\\n\\n        assembly {\\n            let y := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(5, gt(x, 0xFFFFFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(4, gt(x, 0xFFFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(3, gt(x, 0xFF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(2, gt(x, 0xF))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := shl(1, gt(x, 0x3))\\n            m := or(m, y)\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            let y := gt(x, 0x1)\\n            m := or(m, y)\\n        }\\n\\n        if (m >= 128) x = sqrtPrice_128 >> (m - 127);\\n        else x = sqrtPrice_128 << (127 - m);\\n\\n        int256 l2 = (int256(m) - 128) << 64;\\n\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(63, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(62, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(61, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(60, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(59, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(58, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(57, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(56, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(55, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(54, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(53, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(52, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(51, y))\\n            x := shr(y, x)\\n        }\\n        assembly {\\n            x := shr(127, mul(x, x))\\n            let y := shr(128, x)\\n            l2 := or(l2, shl(50, y))\\n        }\\n\\n        int256 ls10001 = l2 * 255738958999603826347141;\\n\\n        logFloor = int24((ls10001 - 3402992956809132418596140100660247210) >> 128);\\n        logUpper = int24((ls10001 + 291339464771989622907027621153398088495) >> 128);\\n    }\\n    \\n}\\n\"\r\n    },\r\n    \"contracts/libraries/MintMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"./TwoPower.sol\\\";\\nimport \\\"./AmountMath.sol\\\";\\n\\nlibrary MintMath {\\n\\n    struct MintMathParam {\\n        int24 pl;\\n        int24 pr;\\n        uint128 xLim;\\n        uint128 yLim;\\n    }\\n\\n    /// @dev [pl, pr)\\n    function _computeDepositXYPerUnit(\\n        int24 pl,\\n        int24 pr,\\n        int24 pc,\\n        uint160 sqrtPrice_96,\\n        uint160 sqrtRate_96\\n    ) private pure returns (uint256 x, uint256 y) {\\n        x = 0;\\n        y = 0;\\n        uint160 sqrtPriceR_96 = LogPowMath.getSqrtPrice(pr);\\n        if (pl < pc) {\\n            uint160 sqrtPriceL_96 = LogPowMath.getSqrtPrice(pl);\\n            if (pr < pc) {\\n                y += AmountMath.getAmountYUnitLiquidity_96(sqrtPriceL_96, sqrtPriceR_96, sqrtRate_96);\\n            } else {\\n                y += AmountMath.getAmountYUnitLiquidity_96(sqrtPriceL_96, sqrtPrice_96, sqrtRate_96);\\n            }\\n        }\\n        if (pr > pc) {\\n            // we need compute XR\\n            int24 xrLeft = (pl > pc) ? pl : pc + 1;\\n            x = AmountMath.getAmountXUnitLiquidity_96(\\n                xrLeft,\\n                pr,\\n                sqrtPriceR_96,\\n                sqrtRate_96\\n            );\\n        }\\n        if (pl <= pc && pr > pc) {\\n            // we nned compute yc at point of current price\\n            y += sqrtPrice_96;\\n        }\\n    }\\n\\n    function computeLiquidity(\\n        MintMathParam memory mp, int24 currPt, uint160 sqrtPrice_96, uint160 sqrtRate_96\\n    ) internal pure returns(uint128 liquidity) {\\n        liquidity = type(uint128).max / 2;\\n        (uint256 x, uint256 y) = _computeDepositXYPerUnit(mp.pl, mp.pr, currPt, sqrtPrice_96, sqrtRate_96);\\n        if (x > 0) {\\n            uint256 xl = uint256(mp.xLim) * TwoPower.pow96 / x;\\n            if (liquidity > xl) {\\n                liquidity = uint128(xl);\\n            }\\n        }\\n        if (y > 0) {\\n            // we take yLim - 1, because in the core, the amountY to deposit is\\n            // calculated by range [left, pc) and point at pc respectively\\n            uint256 yl = uint256(mp.yLim - 1) * TwoPower.pow96 / y;\\n            if (liquidity > yl) {\\n                liquidity = uint128(yl);\\n            }\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/libraries/MulDivMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nlibrary MulDivMath {\\n\\n    // compute res = floor(a * b / c), assuming res < 2^256\\n    function mulDivFloor(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint256 res) {\\n        \\n        // let prodMod2_256 = a * b % 2^256\\n        uint256 prodMod2_256; \\n        // let prodDiv2_256 = a * b / 2^256\\n        uint256 prodDiv2_256;\\n        assembly {\\n            let prodModM1 := mulmod(a, b, not(0))\\n            prodMod2_256 := mul(a, b)\\n            prodDiv2_256 := sub(sub(prodModM1, prodMod2_256), lt(prodModM1, prodMod2_256))\\n        }\\n\\n        if (prodDiv2_256 == 0) {\\n            require(c > 0);\\n            assembly {\\n                res := div(prodMod2_256, c)\\n            }\\n            return res;\\n        }\\n\\n        // we should ensure that a * b /c < 2^256 before calling\\n        require(c > prodDiv2_256);\\n\\n        uint256 resMod;\\n        assembly {\\n            resMod := mulmod(a, b, c)\\n            // a * b - resMod\\n            prodDiv2_256 := sub(prodDiv2_256, gt(resMod, prodMod2_256))\\n            prodMod2_256 := sub(prodMod2_256, resMod)\\n\\n            // compute lowbit of c\\n            let lowbit := not(c)\\n            lowbit := add(lowbit, 1)\\n            lowbit := and(lowbit, c)\\n\\n            // c / lowbit\\n            c := div(c, lowbit)\\n            // a * b / lowbit\\n            prodMod2_256 := div(prodMod2_256, lowbit)\\n            lowbit := add(div(sub(0, lowbit), lowbit), 1)\\n            prodDiv2_256 := mul(prodDiv2_256, lowbit)\\n            prodMod2_256 := or(prodMod2_256, prodDiv2_256)\\n\\n            // get inv of c\\n            // cInv * c = 1 (mod 2^4)\\n            let cInv := xor(mul(3, c), 2)\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^8\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^16\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^32\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^64\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^128\\n            cInv := mul(cInv, sub(2, mul(c, cInv))) // shift to 2^256\\n\\n            // a * b / c = prodMod2_256 * cInv (mod 2^256)\\n            res := mul(prodMod2_256, cInv)\\n        }\\n    }\\n\\n    // compute res = ceil(a * b / c), assuming res < 2^256\\n    function mulDivCeil(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint256 res) {\\n        res = mulDivFloor(a, b, c);\\n        if (mulmod(a, b, c) > 0) {\\n            require(res < type(uint256).max);\\n            res++;\\n        }\\n    }\\n    \\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TwoPower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.4;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary TwoPower {\\n\\n    uint256 internal constant pow96 = 0x1000000000000000000000000;\\n    uint256 internal constant pow128 = 0x100000000000000000000000000000000;\\n    uint8 internal constant RESOLUTION = 96;\\n\\n}\"\r\n    },\r\n    \"contracts/LiquidityManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./core/interfaces/IBitSwapCallback.sol\\\";\\nimport \\\"./core/interfaces/IBitSwapFactory.sol\\\";\\nimport \\\"./core/interfaces/IBitSwapPool.sol\\\";\\n\\nimport \\\"./libraries/MintMath.sol\\\";\\nimport \\\"./libraries/TwoPower.sol\\\";\\n\\nimport \\\"./base/base.sol\\\";\\n\\ncontract LiquidityManager is Ownable, Base, ERC721Enumerable, IBitSwapMintCallback {\\n\\n    /// @notice Emitted when miner successfully add liquidity on an existing liquidity-nft\\n    /// @param nftId id of minted liquidity nft\\n    /// @param pool address of swap pool\\n    /// @param liquidityDelta the amount of liquidity added\\n    /// @param amountX amount of tokenX deposit\\n    /// @param amountY amount of tokenY deposit\\n    event AddLiquidity(\\n        uint256 indexed nftId,\\n        address pool,\\n        uint128 liquidityDelta, \\n        uint256 amountX, \\n        uint256 amountY\\n    );\\n    /// @notice Emitted when miner successfully add decrease liquidity on an existing liquidity-nft\\n    /// @param nftId id of minted liquidity nft\\n    /// @param pool address of swap pool\\n    /// @param liquidityDelta the amount of liquidity decreased\\n    /// @param amountX amount of tokenX withdrawed\\n    /// @param amountY amount of tokenY withdrawed\\n    event DecLiquidity(\\n        uint256 indexed nftId,\\n        address pool,\\n        uint128 liquidityDelta, \\n        uint256 amountX, \\n        uint256 amountY\\n    );\\n\\n    // callback data passed through BitSwapPool#mint to the callback\\n    struct MintCallbackData {\\n        // tokenX of swap\\n        address tokenX;\\n        // tokenY of swap\\n        address tokenY;\\n        // fee amount of swap\\n        uint24 fee;\\n        // address to pay tokenX and tokenY to BitSwapPool\\n        address payer;\\n    }\\n\\n    // max-poolId in poolIds, poolId starts from 1\\n    uint128 private maxPoolId = 1;\\n\\n    // infomation of liquidity provided by miner\\n    struct Liquidity {\\n        // left point of liquidity-token, the range is [leftPt, rightPt)\\n        int24 leftPt;\\n        // right point of liquidity-token, the range is [leftPt, rightPt)\\n        int24 rightPt;\\n        // amount of liquidity on each point in [leftPt, rightPt)\\n        uint128 liquidity;\\n        // a 128-fixpoint number, as integral of { fee(pt, t)/L(pt, t) }. \\n        // here fee(pt, t) denotes fee generated on point pt at time t\\n        // L(pt, t) denotes liquidity on point pt at time t\\n        // pt varies in [leftPt, rightPt)\\n        // t moves from pool created until miner last modify this liquidity-token (mint/addLiquidity/decreaseLiquidity/create)\\n        uint256 lastFeeScaleX_128;\\n        uint256 lastFeeScaleY_128;\\n        // remained tokenX miner can collect, including fee and withdrawed token\\n        uint256 remainTokenX;\\n        uint256 remainTokenY;\\n        // id of pool in which this liquidity is added\\n        uint128 poolId;\\n    }\\n\\n    /// @notice mapping from nftId to Liquidity info\\n    mapping(uint256 =>Liquidity) public liquidities;\\n\\n    /// @notice num of liquidity token\\n    uint256 public liquidityNum = 0;\\n\\n    struct PoolMeta {\\n        // tokenX of pool\\n        address tokenX;\\n        // tokenY of pool\\n        address tokenY;\\n        // fee amount of pool\\n        uint24 fee;\\n    }\\n\\n    /// @notice mapping from poolId to meta info of pool\\n    mapping(uint128 =>PoolMeta) public poolMetas;\\n\\n    /// @notice mapping from address to poolId within this contract\\n    mapping(address =>uint128) public poolIds;\\n\\n    modifier checkAuth(uint256 lid) {\\n        require(_isApprovedOrOwner(msg.sender, lid), 'Not approved');\\n        _;\\n    }\\n\\n    string public baseURI;\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function setBaseURI(string calldata newBaseURI) external onlyOwner {\\n        baseURI = newBaseURI;\\n    }\\n\\n    /// @notice Constructor to create this contract.\\n    /// @param factory address of BitSwapFactory\\n    /// @param weth address of WETH token\\n    constructor(\\n        address factory,\\n        address weth\\n    ) ERC721(\\\"BitSwap Liquidity NFT\\\", \\\"BitSwap-LIQUIDITY-NFT\\\") Base(factory, weth) {\\n    }\\n\\n    /// @notice Callback for mining, in order to deposit tokens.\\n    /// @param x amount of tokenX pay from miner\\n    /// @param y amount of tokenY pay from miner\\n    /// @param data encoded MintCallbackData\\n    function mintDepositCallback(\\n        uint256 x, uint256 y, bytes calldata data\\n    ) external override {\\n        MintCallbackData memory dt = abi.decode(data, (MintCallbackData));\\n        verify(dt.tokenX, dt.tokenY, dt.fee);\\n\\n        if (x > 0) {\\n            pay(dt.tokenX, dt.payer, msg.sender, x);\\n        }\\n        if (y > 0) {\\n            pay(dt.tokenY, dt.payer, msg.sender, y);\\n        }\\n    }\\n \\n    /// @notice Get or create a pool for (tokenX/tokenY/fee) if not exists.\\n    /// @param tokenX tokenX of swap pool\\n    /// @param tokenY tokenY of swap pool\\n    /// @param fee fee amount of swap pool\\n    /// @param initialPoint initial point if need to create a new pool\\n    /// @return corresponding pool address\\n    function createPool(address tokenX, address tokenY, uint24 fee, int24 initialPoint) external returns (address) {\\n        require(tokenX < tokenY, \\\"x<y\\\");\\n        address pool = IBitSwapFactory(factory).pool(tokenX, tokenY, fee);\\n        if (pool == address(0)) {\\n            pool = IBitSwapFactory(factory).newPool(tokenX, tokenY, fee, initialPoint);\\n            return pool;\\n        }\\n        return pool;\\n    }\\n\\n    function liquidityKey(address miner, int24 pl, int24 pr) internal pure returns(bytes32) {\\n        return keccak256(abi.encodePacked(miner, pl, pr));\\n    }\\n\\n    function cachePoolKey(address pool, PoolMeta memory meta) private returns (uint128 poolId) {\\n        poolId = poolIds[pool];\\n        if (poolId == 0) {\\n            poolIds[pool] = (poolId = maxPoolId++);\\n            poolMetas[poolId] = meta;\\n        }\\n    }\\n\\n    function getLastFeeScale(address pool, bytes32 key) private view returns(uint256, uint256) {\\n\\n        (, uint256 lastFeeScaleX_128, uint256 lastFeeScaleY_128, , ) = IBitSwapPool(pool).liquidity(\\n            key\\n        );\\n        return (lastFeeScaleX_128, lastFeeScaleY_128);\\n    }\\n\\n    function getPoolPrice(address pool) private view returns (uint160, int24) {\\n        (\\n            uint160 sqrtPrice_96,\\n            int24 currPt,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n        ) = IBitSwapPool(pool).state();\\n        return (sqrtPrice_96, currPt);\\n    }\\n\\n    /// parameters when calling mint, grouped together to avoid stake too deep\\n    struct MintParam {\\n        // miner address\\n        address miner;\\n        // tokenX of swap pool\\n        address tokenX;\\n        // tokenY of swap pool\\n        address tokenY;\\n        // fee amount of swap pool\\n        uint24 fee;\\n        // left point of added liquidity\\n        int24 pl;\\n        // right point of added liquidity\\n        int24 pr;\\n        // amount limit of tokenX miner willing to deposit\\n        uint128 xLim;\\n        // amount limit tokenY miner willing to deposit\\n        uint128 yLim;\\n        // minimum amount of tokenX miner willing to deposit\\n        uint128 amountXMin;\\n        // minimum amount of tokenY miner willing to deposit\\n        uint128 amountYMin;\\n\\n        uint256 deadline;\\n    }\\n\\n    function _addLiquidity(MintParam memory mp) private returns(\\n        uint128 liquidity, uint256 amountX, uint256 amountY, address pool\\n    ) {\\n        int24 currPt;\\n        uint160 sqrtPrice_96;\\n        pool = IBitSwapFactory(factory).pool(mp.tokenX, mp.tokenY, mp.fee);\\n        uint160 sqrtRate_96 = IBitSwapPool(pool).sqrtRate_96();\\n        require(pool != address(0), \\\"P0\\\");\\n        (sqrtPrice_96, currPt) = getPoolPrice(pool);\\n        liquidity = MintMath.computeLiquidity(\\n            MintMath.MintMathParam({\\n                pl: mp.pl,\\n                pr: mp.pr,\\n                xLim: mp.xLim,\\n                yLim: mp.yLim\\n            }),\\n            currPt,\\n            sqrtPrice_96,\\n            sqrtRate_96\\n        );\\n        (amountX, amountY) = IBitSwapPool(pool).mint(address(this), mp.pl, mp.pr, liquidity, \\n            abi.encode(MintCallbackData({tokenX: mp.tokenX, tokenY: mp.tokenY, fee: mp.fee, payer: msg.sender})));\\n    }\\n\\n    /// @notice Add a new liquidity and generate a nft.\\n    /// @param mintParam params, see MintParam for more\\n    /// @return lid id of nft\\n    /// @return liquidity amount of liquidity added\\n    /// @return amountX amount of tokenX deposited\\n    /// @return amountY amount of tokenY depsoited\\n    function mint(MintParam calldata mintParam) external payable checkDeadline(mintParam.deadline) returns(\\n        uint256 lid,\\n        uint128 liquidity,\\n        uint256 amountX,\\n        uint256 amountY\\n    ) {\\n        require(mintParam.tokenX < mintParam.tokenY, \\\"x<y\\\");\\n        address pool;\\n        (liquidity, amountX, amountY, pool) = _addLiquidity(mintParam);\\n        require(amountX >= mintParam.amountXMin, \\\"XMIN\\\");\\n        require(amountY >= mintParam.amountYMin, \\\"YMIN\\\");\\n        lid = liquidityNum ++;\\n        (uint256 lastFeeScaleX_128, uint256 lastFeeScaleY_128) = getLastFeeScale(\\n            pool, liquidityKey(address(this), mintParam.pl, mintParam.pr)\\n        );\\n        uint128 poolId = cachePoolKey(pool, PoolMeta({tokenX: mintParam.tokenX, tokenY: mintParam.tokenY, fee: mintParam.fee}));\\n        liquidities[lid] = Liquidity({\\n            leftPt: mintParam.pl,\\n            rightPt: mintParam.pr,\\n            liquidity: liquidity,\\n            lastFeeScaleX_128: lastFeeScaleX_128,\\n            lastFeeScaleY_128: lastFeeScaleY_128,\\n            remainTokenX: 0,\\n            remainTokenY: 0,\\n            poolId: poolId\\n        });\\n        _mint(mintParam.miner, lid);\\n        emit AddLiquidity(lid, pool, liquidity, amountX, amountY);\\n    }\\n\\n    /// @notice Burn a generated nft.\\n    /// @param lid nft (liquidity) id\\n    /// @return success successfully burn or not\\n    function burn(uint256 lid) external checkAuth(lid) returns (bool success) {\\n        Liquidity storage liquid = liquidities[lid];\\n        require(liquid.liquidity == 0 && liquid.remainTokenX == 0 && liquid.remainTokenY == 0, 'NC');\\n        delete liquidities[lid];\\n        _burn(lid);\\n        return true;\\n    }\\n\\n    /// parameters when calling addLiquidity, grouped together to avoid stake too deep\\n    struct AddLiquidityParam {\\n        // id of nft\\n        uint256 lid;\\n        // amount limit of tokenX user willing to deposit\\n        uint128 xLim;\\n        // amount limit of tokenY user willing to deposit\\n        uint128 yLim;\\n        // min amount of tokenX user willing to deposit\\n        uint128 amountXMin;\\n        // min amount of tokenY user willing to deposit\\n        uint128 amountYMin;\\n\\n        uint256 deadline;\\n    }\\n\\n    function updateLiquidity(\\n        Liquidity storage liquid,\\n        address pool,\\n        uint128 newLiquidity,\\n        uint256 amountX,\\n        uint256 amountY\\n    ) private {\\n        (uint256 lastFeeScaleX_128, uint256 lastFeeScaleY_128) = getLastFeeScale(\\n            pool, liquidityKey(address(this), liquid.leftPt, liquid.rightPt)\\n        );\\n        (uint256 deltaScaleX, uint256 deltaScaleY) = (liquid.lastFeeScaleX_128, liquid.lastFeeScaleY_128);\\n        assembly {\\n            deltaScaleX := sub(lastFeeScaleX_128, deltaScaleX)\\n            deltaScaleY := sub(lastFeeScaleY_128, deltaScaleY)\\n        }\\n        liquid.remainTokenX += amountX + MulDivMath.mulDivFloor(deltaScaleX, liquid.liquidity, TwoPower.pow128);\\n        liquid.remainTokenY += amountY + MulDivMath.mulDivFloor(deltaScaleY, liquid.liquidity, TwoPower.pow128);\\n        liquid.lastFeeScaleX_128 = lastFeeScaleX_128;\\n        liquid.lastFeeScaleY_128 = lastFeeScaleY_128;\\n        liquid.liquidity = newLiquidity;\\n    }\\n    \\n    /// @notice Add liquidity to a existing nft.\\n    /// @param addLiquidityParam see AddLiquidityParam for more\\n    /// @return liquidityDelta amount of added liquidity\\n    /// @return amountX amount of tokenX deposited\\n    /// @return amountY amonut of tokenY deposited\\n    function addLiquidity(\\n        AddLiquidityParam calldata addLiquidityParam\\n    ) external payable checkAuth(addLiquidityParam.lid) checkDeadline(addLiquidityParam.deadline) returns (\\n        uint128 liquidityDelta,\\n        uint256 amountX,\\n        uint256 amountY\\n    ) {\\n        require(addLiquidityParam.lid < liquidityNum, \\\"LN\\\");\\n        Liquidity storage liquid = liquidities[addLiquidityParam.lid];\\n        PoolMeta memory poolMeta = poolMetas[liquid.poolId];\\n        int24 currPt;\\n        uint160 sqrtPrice_96;\\n        address pool = IBitSwapFactory(factory).pool(poolMeta.tokenX, poolMeta.tokenY, poolMeta.fee);\\n        // uint160 sqrtRate_96 = IBitSwapPool(pool).sqrtRate_96();\\n        require(pool != address(0), \\\"P0\\\");\\n        (sqrtPrice_96, currPt) = getPoolPrice(pool);\\n        liquidityDelta = MintMath.computeLiquidity(\\n            MintMath.MintMathParam({\\n                pl: liquid.leftPt,\\n                pr: liquid.rightPt,\\n                xLim: addLiquidityParam.xLim,\\n                yLim: addLiquidityParam.yLim\\n            }),\\n            currPt,\\n            sqrtPrice_96,\\n            // sqrtRate_96\\n            IBitSwapPool(pool).sqrtRate_96()\\n        );\\n        require(int128(liquid.liquidity) == int256(uint256(liquid.liquidity)), \\\"LO\\\");\\n        uint128 newLiquidity = liquidityDelta + liquid.liquidity;\\n        (amountX, amountY) = IBitSwapPool(pool).mint(address(this), liquid.leftPt, liquid.rightPt, liquidityDelta, \\n            abi.encode(MintCallbackData({tokenX: poolMeta.tokenX, tokenY: poolMeta.tokenY, fee: poolMeta.fee, payer: msg.sender})));\\n        require(amountX >= addLiquidityParam.amountXMin, \\\"XMIN\\\");\\n        require(amountY >= addLiquidityParam.amountYMin, \\\"YMIN\\\");\\n        updateLiquidity(liquid, pool, newLiquidity, 0, 0);\\n        emit AddLiquidity(addLiquidityParam.lid, pool, liquidityDelta, amountX, amountY);\\n    }\\n\\n    /// @notice Decrease liquidity from a nft.\\n    /// @param lid id of nft\\n    /// @param liquidDelta amount of liqudity to decrease\\n    /// @param amountXMin min amount of tokenX user want to withdraw\\n    /// @param amountYMin min amount of tokenY user want to withdraw\\n    /// @param deadline deadline timestamp of transaction\\n    /// @return amountX amount of tokenX refund to user\\n    /// @return amountY amount of tokenY refund to user\\n    function decLiquidity(\\n        uint256 lid,\\n        uint128 liquidDelta,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256 deadline\\n    ) external checkAuth(lid) checkDeadline(deadline) returns (\\n        uint256 amountX,\\n        uint256 amountY\\n    ) {\\n        require(lid < liquidityNum, \\\"LN\\\");\\n        Liquidity storage liquidity = liquidities[lid];\\n        if (liquidity.liquidity == 0) {\\n            // no need to call core to update fee\\n            return (0, 0);\\n        }\\n        if (liquidDelta > liquidity.liquidity) {\\n            liquidDelta = liquidity.liquidity;\\n        }\\n        PoolMeta memory poolMeta = poolMetas[liquidity.poolId];\\n        address pool = IBitSwapFactory(factory).pool(poolMeta.tokenX, poolMeta.tokenY, poolMeta.fee);\\n        require(pool != address(0), \\\"P0\\\");\\n        \\n        uint128 newLiquidity = liquidity.liquidity - liquidDelta;\\n        (amountX, amountY) = IBitSwapPool(pool).burn(liquidity.leftPt, liquidity.rightPt, liquidDelta);\\n        require(amountX >= amountXMin, \\\"XMIN\\\");\\n        require(amountY >= amountYMin, \\\"YMIN\\\");\\n        updateLiquidity(liquidity, pool, newLiquidity, amountX, amountY);\\n        emit DecLiquidity(lid, pool, liquidDelta, amountX, amountY);\\n    }\\n\\n    /// @notice Collect fee gained of token withdrawed from nft.\\n    /// @param recipient address to receive token\\n    /// @param lid id of nft\\n    /// @param amountXLim amount limit of tokenX to collect\\n    /// @param amountYLim amount limit of tokenY to collect\\n    /// @return amountX amount of tokenX actually collect\\n    /// @return amountY amount of tokenY actually collect\\n    function collect(\\n        address recipient,\\n        uint256 lid,\\n        uint128 amountXLim,\\n        uint128 amountYLim\\n    ) external payable checkAuth(lid) returns (\\n        uint256 amountX,\\n        uint256 amountY\\n    ) {\\n        if (recipient == address(0)) {\\n            recipient = address(this);\\n        }\\n        require(lid < liquidityNum, \\\"LN\\\");\\n        Liquidity storage liquidity = liquidities[lid];\\n        PoolMeta memory poolMeta = poolMetas[liquidity.poolId];\\n        address pool = IBitSwapFactory(factory).pool(poolMeta.tokenX, poolMeta.tokenY, poolMeta.fee);\\n        require(pool != address(0), \\\"P0\\\");\\n        if (liquidity.liquidity > 0) {\\n            IBitSwapPool(pool).burn(liquidity.leftPt, liquidity.rightPt, 0);\\n            updateLiquidity(liquidity, pool, liquidity.liquidity, 0, 0);\\n        }\\n        if (amountXLim > liquidity.remainTokenX) {\\n            amountXLim = uint128(liquidity.remainTokenX);\\n        }\\n        if (amountYLim > liquidity.remainTokenY) {\\n            amountYLim = uint128(liquidity.remainTokenY);\\n        }\\n        (amountX, amountY) = IBitSwapPool(pool).collect(recipient, liquidity.leftPt, liquidity.rightPt, amountXLim, amountYLim);\\n        // amountX(Y)Lim may be a little greater than actual value\\n        liquidity.remainTokenX -= amountXLim;\\n        liquidity.remainTokenY -= amountYLim;\\n    }\\n    \\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidityDelta\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidityDelta\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"}],\"name\":\"DecLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lid\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"xLim\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"yLim\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountXMin\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountYMin\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityManager.AddLiquidityParam\",\"name\":\"addLiquidityParam\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityDelta\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lid\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lid\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amountXLim\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountYLim\",\"type\":\"uint128\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"initialPoint\",\"type\":\"int24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lid\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidDelta\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amountXMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountYMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"decLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidities\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"leftPt\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"rightPt\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"lastFeeScaleX_128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastFeeScaleY_128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainTokenX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainTokenY\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"poolId\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"pl\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"pr\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"xLim\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"yLim\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountXMin\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountYMin\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityManager.MintParam\",\"name\":\"mintParam\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lid\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintDepositCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolIds\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"name\":\"poolMetas\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LiquidityManager", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "000000000000000000000000c78fd8021fb191501e6be7c1da4beafb1b81cf8c000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}