{"SourceCode": "pragma solidity =0.8.21;\r\n\r\nerror NotMaster();\r\nerror NotProposed();\r\n\r\ncontract OwnableMaster {\r\n\r\n    address public master;\r\n    address public proposedMaster;\r\n\r\n    address constant ZERO_ADDRESS = address(0x0);\r\n\r\n    modifier onlyProposed() {\r\n        _onlyProposed();\r\n        _;\r\n    }\r\n\r\n    function _onlyMaster()\r\n        private\r\n        view\r\n    {\r\n        if (msg.sender == master) {\r\n            return;\r\n        }\r\n\r\n        revert NotMaster();\r\n    }\r\n\r\n    modifier onlyMaster() {\r\n        _onlyMaster();\r\n        _;\r\n    }\r\n\r\n    function _onlyProposed()\r\n        private\r\n        view\r\n    {\r\n        if (msg.sender == proposedMaster) {\r\n            return;\r\n        }\r\n\r\n        revert NotProposed();\r\n    }\r\n\r\n    event ProposedOwner(\r\n        address proposed,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event ClaimedOwnership(\r\n        address master,\r\n        uint256 timestamp\r\n    );\r\n\r\n    constructor(\r\n        address _master\r\n    ) {\r\n        master = _master;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to propose next master.\r\n     * Must be claimed by proposer.\r\n     */\r\n    function proposeOwner(\r\n        address _proposedOwner\r\n    )\r\n        external\r\n        onlyMaster\r\n    {\r\n        proposedMaster = _proposedOwner;\r\n\r\n        emit ProposedOwner(\r\n            _proposedOwner,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to claim master role.\r\n     * Must be called by proposer.\r\n     */\r\n    function claimOwnership()\r\n        external\r\n        onlyProposed\r\n    {\r\n        master = proposedMaster;\r\n\r\n        emit ClaimedOwnership(\r\n            proposedMaster,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Removes master role.\r\n     * No ability to be in control.\r\n     */\r\n    function renounceOwnership()\r\n        external\r\n        onlyMaster\r\n    {\r\n        master = ZERO_ADDRESS;\r\n        proposedMaster = ZERO_ADDRESS;\r\n    }\r\n}\r\n\r\ninterface IPositionNFTs {\r\n\r\n    function ownerOf(\r\n        uint256 _nftId\r\n    )\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function getOwner(\r\n        uint256 _nftId\r\n    )\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n\r\n    function totalSupply()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function mintPosition()\r\n        external;\r\n\r\n    function tokenOfOwnerByIndex(\r\n        address _owner,\r\n        uint256 _index\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function mintPositionForUser(\r\n        address _user\r\n    )\r\n        external\r\n        returns (uint256);\r\n\r\n    function getApproved(\r\n        uint256 _nftId\r\n    )\r\n        external\r\n        returns (address);\r\n}\r\n\r\nstruct CurveSwapStruct {\r\n    uint256 curvePoolTokenIndexFrom;\r\n    uint256 curvePoolTokenIndexTo;\r\n    uint256 curveMetaPoolTokenIndexFrom;\r\n    uint256 curveMetaPoolTokenIndexTo;\r\n    uint256 curvePoolSwapAmount;\r\n    uint256 curveMetaPoolSwapAmount;\r\n}\r\n\r\ninterface IWiseSecurity {\r\n\r\n    function overallUSDBorrowHeartbeat(\r\n        uint256 _nftId\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 buffer);\r\n\r\n    function checkBadDebt(\r\n        uint256 _nftId\r\n    )\r\n        external;\r\n\r\n    function getFullCollateralUSD(\r\n        uint256 _nftId,\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function checksLiquidation(\r\n        uint256 _nftIdLiquidate,\r\n        address _caller,\r\n        address _tokenToPayback,\r\n        uint256 _shareAmountToPay\r\n    )\r\n        external\r\n        view;\r\n\r\n    function onlyIsolationPool(\r\n        address _poolAddress\r\n    )\r\n        external\r\n        view;\r\n\r\n    function getPositionBorrowAmount(\r\n        uint256 _nftId,\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getPositionLendingAmount(\r\n        uint256 _nftId,\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getLiveDebtratioNormalPool(\r\n        uint256 _nftId\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function overallUSDCollateralsBare(\r\n        uint256 _nftId\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 amount);\r\n\r\n    function FEE_MANAGER()\r\n        external\r\n        returns (address);\r\n\r\n    function AAVE_HUB()\r\n        external\r\n        returns (address);\r\n\r\n    function WISE_LIQUIDATION()\r\n        external\r\n        returns (address);\r\n\r\n    function curveSecurityCheck(\r\n        address _poolAddress\r\n    )\r\n        external;\r\n\r\n    function prepareCurvePools(\r\n        address _poolToken,\r\n        address _curvePool,\r\n        address _curveMetaPool,\r\n        CurveSwapStruct memory _curveSwapStruct\r\n    )\r\n        external;\r\n\r\n    function setUnderlyingPoolTokensFromPoolToken(\r\n        address _poolToken,\r\n        address[] memory _underlyingTokens\r\n    )\r\n        external;\r\n\r\n    function checksDeposit(\r\n        uint256 _nftId,\r\n        address _caller,\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        view;\r\n\r\n    function checksWithdraw(\r\n        uint256 _nftId,\r\n        address _caller,\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        view;\r\n\r\n    function checksBorrow(\r\n        uint256 _nftId,\r\n        address _caller,\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        view;\r\n\r\n    function checksSolelyWithdraw(\r\n        uint256 _nftId,\r\n        address _caller,\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        view;\r\n\r\n    function checkOwnerPosition(\r\n        uint256 _nftId,\r\n        address _caller\r\n    )\r\n        external\r\n        view;\r\n\r\n    function checksCollateralizeDeposit(\r\n        uint256 _nftIdCaller,\r\n        address _caller,\r\n        address _poolAddress\r\n    )\r\n        external\r\n        view;\r\n\r\n    function checksDecollateralizeDeposit(\r\n        uint256 _nftIdCaller,\r\n        address _poolToken\r\n    )\r\n        external\r\n        view;\r\n\r\n    function checkBorrowLimit(\r\n        uint256 _nftId,\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        view;\r\n\r\n    function checkPositionLocked(\r\n        uint256 _nftId,\r\n        address _caller\r\n    )\r\n        external\r\n        view;\r\n\r\n    function checkPaybackLendingShares(\r\n        uint256 _nftIdReceiver,\r\n        uint256 _nftIdCaller,\r\n        address _caller,\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        view;\r\n\r\n    function checksRegistrationIsolationPool(\r\n        uint256 _nftId,\r\n        address _caller,\r\n        address _isolationPool\r\n    )\r\n        external\r\n        view;\r\n\r\n    function checksRegister(\r\n        uint256 _nftId,\r\n        address _caller\r\n    )\r\n        external\r\n        view;\r\n\r\n    function getLendingRate(\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\nstruct GlobalPoolEntry {\r\n    uint256 totalPool;\r\n    uint256 utilization;\r\n    uint256 totalBareToken;\r\n    uint256 poolFee;\r\n}\r\n\r\nstruct BorrowPoolEntry {\r\n    bool allowBorrow;\r\n    uint256 pseudoTotalBorrowAmount;\r\n    uint256 totalBorrowShares;\r\n    uint256 borrowRate;\r\n}\r\n\r\nstruct LendingPoolEntry {\r\n    uint256 pseudoTotalPool;\r\n    uint256 totalDepositShares;\r\n    uint256 collateralFactor;\r\n}\r\n\r\nstruct PoolEntry {\r\n    uint256 totalPool;\r\n    uint256 utilization;\r\n    uint256 totalBareToken;\r\n    uint256 poolFee;\r\n}\r\n\r\ninterface IWiseLending {\r\n\r\n    function newBorrowRate(\r\n        address _poolToken\r\n    )\r\n        external;\r\n\r\n    function calculateBorrowShares(\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function borrowPoolData(\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (BorrowPoolEntry memory);\r\n\r\n    function lendingPoolData(\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (LendingPoolEntry memory);\r\n\r\n    function getPositionBorrowShares(\r\n        uint256 _nftId,\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTimeStamp(\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getPureCollateralAmount(\r\n        uint256 _nftId,\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getCollateralState(\r\n        uint256 _nftId,\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function veryfiedIsolationPool(\r\n        address _poolAddress\r\n    )\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function positionLocked(\r\n        uint256 _nftId\r\n    )\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function getTotalBareToken(\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function maxDepositValueToken(\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function master()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function WETH_ADDRESS()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function WISE_ORACLE()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function POSITION_NFT()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function FEE_MANAGER()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function WISE_SECURITY()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function WISE_LIQUIDATION()\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function lastUpdated(\r\n        address _poolAddress\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function isolationPoolRegistered(\r\n        uint256 _nftId,\r\n        address _isolationPool\r\n    )\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function calculateLendingShares(\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function liquidationCorePayback(\r\n        uint256 _nftId,\r\n        address _poolToken,\r\n        uint256 _amount,\r\n        uint256 _shares\r\n    )\r\n        external;\r\n\r\n    function liquidationDecreaseCollateral(\r\n        uint256 _nftId,\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external;\r\n\r\n    function liquidationDecreaseTotalBareToken(\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external;\r\n\r\n    function positionPureCollateralAmount(\r\n        uint256 _nftId,\r\n        address _poolToken\r\n    )\r\n        external\r\n        returns (uint256);\r\n\r\n    function liquidationCoreWithdraw(\r\n        address _poolToken,\r\n        uint256 _nftId,\r\n        uint256 _amount,\r\n        uint256 _shares\r\n    )\r\n        external;\r\n\r\n    function liquidationDecreaseLendingShares(\r\n        uint256 _nftId,\r\n        address _poolToken,\r\n        uint256 _shares\r\n    )\r\n        external;\r\n\r\n    function liquidationIncreaseLendingShares(\r\n        uint256 _nftId,\r\n        address _poolToken,\r\n        uint256 _shares\r\n    )\r\n        external;\r\n\r\n    function liquidationAddPosition(\r\n        uint256 _nftId,\r\n        address _poolToken\r\n    )\r\n        external;\r\n\r\n    function getTotalPool(\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function depositExactAmount(\r\n        uint256 _nftId,\r\n        address _poolToken,\r\n        uint256 _amount,\r\n        bool _collateralState\r\n    )\r\n        external\r\n        returns (uint256);\r\n\r\n    function withdrawOnBehalfExactAmount(\r\n        uint256 _nftId,\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        returns (uint256);\r\n\r\n    function syncManually(\r\n        address _poolToken\r\n    )\r\n        external;\r\n\r\n    function withdrawOnBehalfExactShares(\r\n        uint256 _nftId,\r\n        address _poolToken,\r\n        uint256 _shares\r\n    )\r\n        external\r\n        returns (uint256);\r\n\r\n    function borrowOnBehalfExactAmount(\r\n        uint256 _nftId,\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        returns (uint256);\r\n\r\n    function solelyDeposit(\r\n        uint256 _nftId,\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external;\r\n\r\n    function solelyWithdrawOnBehalf(\r\n        uint256 _nftId,\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external;\r\n\r\n    function paybackExactAmount(\r\n        uint256 _nftId,\r\n        address _poolToken,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        returns (uint256);\r\n\r\n    function paybackExactShares(\r\n        uint256 _nftId,\r\n        address _poolToken,\r\n        uint256 _shares\r\n    )\r\n        external\r\n        returns (uint256);\r\n\r\n    function setPoolFee(\r\n        address _poolToken,\r\n        uint256 _newFee\r\n    )\r\n        external;\r\n\r\n    function getPositionLendingShares(\r\n        uint256 _nftId,\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function withdrawExactShares(\r\n        uint256 _nftId,\r\n        address _poolToken,\r\n        uint256 _shares\r\n    )\r\n        external\r\n        returns (uint256);\r\n\r\n    function poolTokenAddresses()\r\n        external\r\n        returns (address[] memory);\r\n\r\n    function corePaybackFeeManager(\r\n        address _poolToken,\r\n        uint256 _nftId,\r\n        uint256 _amount,\r\n        uint256 _shares\r\n    )\r\n        external;\r\n\r\n    /*\r\n    function curveSecurityCheck(\r\n        address _poolToken\r\n    )\r\n        external;\r\n    */\r\n\r\n    function preparePool(\r\n        address _poolToken\r\n    )\r\n        external;\r\n\r\n    function getPositionBorrowTokenLength(\r\n        uint256 _nftId\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getPositionBorrowTokenByIndex(\r\n        uint256 _nftId,\r\n        uint256 _index\r\n    )\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function getPositionLendingTokenByIndex(\r\n        uint256 _nftId,\r\n        uint256 _index\r\n    )\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function getPositionLendingTokenLength(\r\n        uint256 _nftId\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function globalPoolData(\r\n        address _poolToken\r\n    )\r\n        external\r\n        view\r\n        returns (GlobalPoolEntry memory);\r\n\r\n\r\n    function getGlobalBorrowAmount(\r\n        address _token\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getPseudoTotalBorrowAmount(\r\n        address _token\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getInitialBorrowAmountUser(\r\n        address _user,\r\n        address _token\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getPseudoTotalPool(\r\n        address _token\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getInitialDepositAmountUser(\r\n        address _user,\r\n        address _token\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getGlobalDepositAmount(\r\n        address _token\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function paybackAmount(\r\n        address _token,\r\n        uint256 _shares\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getPositionBorrowShares(\r\n        address _user,\r\n        address _token\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getPositionLendingShares(\r\n        address _user,\r\n        address _token\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function cashoutAmount(\r\n        address _token,\r\n        uint256 _shares\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTotalDepositShares(\r\n        address _token\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTotalBorrowShares(\r\n        address _token\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function setRegistrationIsolationPool(\r\n        uint256 _nftId,\r\n        bool _state,\r\n        address _isolationPool\r\n    )\r\n        external;\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply()\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function balanceOf(\r\n        address _account\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transferFrom(\r\n        address _sender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        returns (bool);\r\n\r\n    function transfer(\r\n        address _recipient,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    )\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(\r\n        address _spender,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        returns (bool);\r\n\r\n    function decimals()\r\n        external\r\n        view\r\n        returns (uint8);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    event  Deposit(\r\n        address indexed dst,\r\n        uint wad\r\n    );\r\n\r\n    event  Withdrawal(\r\n        address indexed src,\r\n        uint wad\r\n    );\r\n}\r\n\r\ncontract TransferHelper {\r\n\r\n    /**\r\n     * @dev\r\n     * Allows to execute transfer for a token\r\n     */\r\n    function _safeTransfer(\r\n        address _token,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        internal\r\n    {\r\n        IERC20 token = IERC20(\r\n            _token\r\n        );\r\n\r\n        _callOptionalReturnBool(\r\n            _token,\r\n            abi.encodeWithSelector(\r\n                token.transfer.selector,\r\n                _to,\r\n                _value\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev\r\n     * Allows to execute transferFrom for a token\r\n     */\r\n    function _safeTransferFrom(\r\n        address _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n        internal\r\n    {\r\n        IERC20 token = IERC20(\r\n            _token\r\n        );\r\n\r\n        _callOptionalReturnBool(\r\n            _token,\r\n            abi.encodeWithSelector(\r\n                token.transferFrom.selector,\r\n                _from,\r\n                _to,\r\n                _value\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev\r\n     * Helper function to do the token call\r\n     */\r\n    function _callOptionalReturn(\r\n        address _token,\r\n        bytes memory _data\r\n    )\r\n        private\r\n    {\r\n        (\r\n            bool success,\r\n            bytes memory returndata\r\n        ) = _token.call(_data);\r\n\r\n        require(\r\n            success,\r\n            \"TransferHelper: CALL_FAILED\"\r\n        );\r\n\r\n        if (returndata.length > 0) {\r\n            require(\r\n                abi.decode(\r\n                    returndata,\r\n                    (bool)\r\n                ),\r\n                \"TransferHelper: OPERATION_FAILED\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function _callOptionalReturnBool(\r\n        address token,\r\n        bytes memory data\r\n    )\r\n        private\r\n        returns (bool)\r\n    {\r\n        (\r\n            bool success,\r\n            bytes memory returndata\r\n        ) = token.call(\r\n            data\r\n        );\r\n\r\n        bool results = returndata.length == 0 || abi.decode(\r\n            returndata,\r\n            (bool)\r\n        );\r\n\r\n        return success\r\n            && results\r\n            && token.code.length > 0;\r\n    }\r\n}\r\n\r\ninterface IWETH is IERC20 {\r\n\r\n    function deposit()\r\n        external\r\n        payable;\r\n\r\n    function withdraw(\r\n        uint256\r\n    )\r\n        external;\r\n}\r\n\r\ninterface IAave is IERC20 {\r\n\r\n    struct ReserveData {\r\n\r\n        // Stores the reserve configuration\r\n        ReserveConfigurationMap configuration;\r\n\r\n        // Liquidity index. Expressed in ray\r\n        uint128 liquidityIndex;\r\n\r\n        // Current supply rate. Expressed in ray\r\n        uint128 currentLiquidityRate;\r\n\r\n        // Variable borrow index. Expressed in ray\r\n        uint128 variableBorrowIndex;\r\n\r\n        // Current variable borrow rate. Expressed in ray\r\n        uint128 currentVariableBorrowRate;\r\n\r\n        // Current stable borrow rate. Expressed in ray\r\n        uint128 currentStableBorrowRate;\r\n\r\n        // Timestamp of last update\r\n        uint40 lastUpdateTimestamp;\r\n\r\n        // Id of the reserve.\r\n        uint16 id;\r\n\r\n        // aToken address\r\n        address aTokenAddress;\r\n\r\n        // stableDebtToken address\r\n        address stableDebtTokenAddress;\r\n\r\n        // VariableDebtToken address\r\n        address variableDebtTokenAddress;\r\n\r\n        // Address of the interest rate strategy\r\n        address interestRateStrategyAddress;\r\n\r\n        // Current treasury balance, scaled\r\n        uint128 accruedToTreasury;\r\n\r\n        // Outstanding unbacked aTokens minted through the bridging feature\r\n        uint128 unbacked;\r\n\r\n        // Outstanding debt borrowed against this asset in isolation mode\r\n        uint128 isolationModeTotalDebt;\r\n    }\r\n\r\n    struct ReserveConfigurationMap {\r\n        uint256 data;\r\n    }\r\n\r\n    function deposit(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _owner,\r\n        uint16 _referralCode\r\n    )\r\n        external;\r\n\r\n    function withdraw(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _recipient\r\n    )\r\n        external\r\n        returns (uint256);\r\n\r\n    function getReserveData(\r\n        address asset\r\n    )\r\n        external\r\n        view\r\n        returns (ReserveData memory);\r\n}\r\n\r\ncontract AaveEvents {\r\n\r\n    event SetAaveTokenAddress(\r\n        address underlyingAsset,\r\n        address aaveToken,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event IsDepositAave(\r\n        uint256 nftId,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event IsWithdrawAave(\r\n        uint256 nftId,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event IsBorrowAave(\r\n        uint256 nftId,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event IsPaybackAave(\r\n        uint256 nftId,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event IsSolelyDepositAave(\r\n        uint256 nftId,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event IsSolelyWithdrawAave(\r\n        uint256 nftId,\r\n        uint256 timestamp\r\n    );\r\n}\r\n\r\nerror AlreadySet();\r\n\r\ncontract Declarations is OwnableMaster, AaveEvents {\r\n\r\n    IAave immutable AAVE;\r\n    IWETH immutable WETH;\r\n\r\n    IWiseLending immutable public WISE_LENDING;\r\n    IPositionNFTs immutable public POSITION_NFT;\r\n\r\n    uint16 constant REF_CODE = 0;\r\n    IWiseSecurity public WISE_SECURITY;\r\n\r\n    address immutable public WETH_ADDRESS;\r\n    address immutable public AAVE_ADDRESS;\r\n\r\n    uint256 constant PRECISION_FACTOR_E9 = 1E9;\r\n    uint256 constant PRECISION_FACTOR_E18 = 1E18;\r\n    uint256 constant MAX_AMOUNT = type(uint256).max;\r\n\r\n    mapping (address => address) public aaveTokenAddress;\r\n\r\n    modifier checkOwner(\r\n        uint256 _nftId\r\n    ) {\r\n        _checkOwner(\r\n            _nftId\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier checkPositionLocked(\r\n        uint256 _nftId\r\n    ) {\r\n        _checkLocked(\r\n            _nftId\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _master,\r\n        address _aaveAddress,\r\n        address _lendingAddress\r\n    )\r\n        OwnableMaster(\r\n            _master\r\n        )\r\n    {\r\n        AAVE_ADDRESS = _aaveAddress;\r\n\r\n        WISE_LENDING = IWiseLending(\r\n            _lendingAddress\r\n        );\r\n\r\n        WETH_ADDRESS = WISE_LENDING.WETH_ADDRESS();\r\n\r\n        AAVE = IAave(\r\n            AAVE_ADDRESS\r\n        );\r\n\r\n        WETH = IWETH(\r\n            WETH_ADDRESS\r\n        );\r\n\r\n        POSITION_NFT = IPositionNFTs(\r\n            WISE_LENDING.POSITION_NFT()\r\n        );\r\n    }\r\n\r\n    function _checkOwner(\r\n        uint256 _nftId\r\n    )\r\n        private\r\n        view\r\n    {\r\n        WISE_SECURITY.checkOwnerPosition(\r\n            _nftId,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function _checkLocked(\r\n        uint256 _nftId\r\n    )\r\n        private\r\n        view\r\n    {\r\n        WISE_SECURITY.checkPositionLocked(\r\n            _nftId,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function _checksDeposit(\r\n        uint256 _nftId,\r\n        address _underlyingToken,\r\n        uint256 _depositAmount\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        WISE_SECURITY.checksDeposit(\r\n            _nftId,\r\n            msg.sender,\r\n            aaveTokenAddress[_underlyingToken],\r\n            _depositAmount\r\n        );\r\n    }\r\n\r\n    function _checksWithdraw(\r\n        uint256 _nftId,\r\n        address _underlyingToken,\r\n        uint256 _withdrawAmount\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        WISE_SECURITY.checksWithdraw(\r\n            _nftId,\r\n            msg.sender,\r\n            aaveTokenAddress[_underlyingToken],\r\n            _withdrawAmount\r\n        );\r\n    }\r\n\r\n    function _checksBorrow(\r\n        uint256 _nftId,\r\n        address _underlyingToken,\r\n        uint256 _borrowAmount\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        WISE_SECURITY.checksBorrow(\r\n            _nftId,\r\n            msg.sender,\r\n            aaveTokenAddress[_underlyingToken],\r\n            _borrowAmount\r\n        );\r\n    }\r\n\r\n    function _checksSolelyWithdraw(\r\n        uint256 _nftId,\r\n        address _underlyingToken,\r\n        uint256 _withdrawAmount\r\n    )\r\n        internal\r\n        view\r\n    {\r\n        WISE_SECURITY.checksSolelyWithdraw(\r\n            _nftId,\r\n            msg.sender,\r\n            aaveTokenAddress[_underlyingToken],\r\n            _withdrawAmount\r\n        );\r\n    }\r\n\r\n    function _syncPool(\r\n        address _underlyingToken\r\n    )\r\n        private\r\n    {\r\n        WISE_LENDING.syncManually(\r\n            aaveTokenAddress[_underlyingToken]\r\n        );\r\n    }\r\n\r\n    function setWiseSecurity(\r\n        address _securityAddress\r\n    )\r\n        external\r\n        onlyMaster\r\n    {\r\n        WISE_SECURITY = IWiseSecurity(\r\n            _securityAddress\r\n        );\r\n    }\r\n}\r\n\r\nabstract contract AaveHelper is Declarations {\r\n\r\n    modifier syncPool(\r\n        address _underlyingToken\r\n    ) {\r\n        if (WISE_LENDING.veryfiedIsolationPool(msg.sender) == false) {\r\n            WISE_LENDING.preparePool(\r\n                aaveTokenAddress[\r\n                    _underlyingToken\r\n                ]\r\n            );\r\n        }\r\n        _;\r\n    }\r\n\r\n    function _prepareAssetsPosition(\r\n        uint256 _nftId,\r\n        address _underlyingToken\r\n    )\r\n        private\r\n    {\r\n        if (WISE_LENDING.veryfiedIsolationPool(msg.sender) == true) {\r\n            return;\r\n        }\r\n\r\n        _prepareCollaterals(\r\n            _nftId,\r\n            aaveTokenAddress[_underlyingToken]\r\n        );\r\n\r\n        _prepareBorrows(\r\n            _nftId,\r\n            aaveTokenAddress[_underlyingToken]\r\n        );\r\n    }\r\n\r\n    function _mintPosition()\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        return POSITION_NFT.mintPositionForUser(\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function _wrapDepositExactAmount(\r\n        uint256 _nftId,\r\n        address _underlyingAsset,\r\n        uint256 _depositAmount,\r\n        bool _collateralState\r\n    )\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        _prepareAssetsPosition(\r\n            _nftId,\r\n            _underlyingAsset\r\n        );\r\n\r\n        AAVE.deposit(\r\n            _underlyingAsset,\r\n            _depositAmount,\r\n            address(this),\r\n            REF_CODE\r\n        );\r\n\r\n        uint256 lendingShares = WISE_LENDING.depositExactAmount(\r\n            _nftId,\r\n            aaveTokenAddress[_underlyingAsset],\r\n            _depositAmount,\r\n            _collateralState\r\n        );\r\n\r\n        return lendingShares;\r\n    }\r\n\r\n    function _wrapWithdrawExactAmount(\r\n        uint256 _nftId,\r\n        address _underlyingAsset,\r\n        address _underlyingAssetRecipient,\r\n        uint256 _withdrawAmount\r\n    )\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        _prepareAssetsPosition(\r\n            _nftId,\r\n            _underlyingAsset\r\n        );\r\n\r\n        uint256 withdrawnShares = WISE_LENDING.withdrawOnBehalfExactAmount(\r\n            _nftId,\r\n            aaveTokenAddress[_underlyingAsset],\r\n            _withdrawAmount\r\n        );\r\n\r\n        AAVE.withdraw(\r\n            _underlyingAsset,\r\n            _withdrawAmount,\r\n            _underlyingAssetRecipient\r\n        );\r\n\r\n        return withdrawnShares;\r\n    }\r\n\r\n    function _wrapWithdrawExactShares(\r\n        uint256 _nftId,\r\n        address _underlyingAsset,\r\n        address _underlyingAssetRecipient,\r\n        uint256 _shareAmount\r\n    )\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        _prepareAssetsPosition(\r\n            _nftId,\r\n            _underlyingAsset\r\n        );\r\n\r\n        address aaveToken = aaveTokenAddress[\r\n            _underlyingAsset\r\n        ];\r\n\r\n        uint256 withdrawAmount = WISE_LENDING.cashoutAmount(\r\n            aaveToken,\r\n            _shareAmount\r\n        );\r\n\r\n        WISE_SECURITY.checksWithdraw(\r\n            _nftId,\r\n            msg.sender,\r\n            aaveToken,\r\n            withdrawAmount\r\n        );\r\n\r\n        WISE_LENDING.withdrawOnBehalfExactShares(\r\n            _nftId,\r\n            aaveToken,\r\n            _shareAmount\r\n        );\r\n\r\n        AAVE.withdraw(\r\n            _underlyingAsset,\r\n            withdrawAmount,\r\n            _underlyingAssetRecipient\r\n        );\r\n\r\n        return withdrawAmount;\r\n    }\r\n\r\n    function _wrapBorrowExactAmount(\r\n        uint256 _nftId,\r\n        address _underlyingAsset,\r\n        address _underlyingAssetRecipient,\r\n        uint256 _borrowAmount\r\n    )\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        _prepareAssetsPosition(\r\n            _nftId,\r\n            _underlyingAsset\r\n        );\r\n\r\n        uint256 borrowShares = WISE_LENDING.borrowOnBehalfExactAmount(\r\n            _nftId,\r\n            aaveTokenAddress[_underlyingAsset],\r\n            _borrowAmount\r\n        );\r\n\r\n        AAVE.withdraw(\r\n            _underlyingAsset,\r\n            _borrowAmount,\r\n            _underlyingAssetRecipient\r\n        );\r\n\r\n        return borrowShares;\r\n    }\r\n\r\n    function _wrapAaveReturnValueDeposit(\r\n        address _underlyingAsset,\r\n        uint256 _depositAmount,\r\n        address _targetAddress\r\n    )\r\n        internal\r\n        returns (uint256 res)\r\n    {\r\n        IERC20 token = IERC20(\r\n            aaveTokenAddress[_underlyingAsset]\r\n        );\r\n\r\n        uint256 balanceBefore = token.balanceOf(\r\n            address(this)\r\n        );\r\n\r\n        AAVE.deposit(\r\n            _underlyingAsset,\r\n            _depositAmount,\r\n            _targetAddress,\r\n            REF_CODE\r\n        );\r\n\r\n        uint256 balanceAfter = token.balanceOf(\r\n            address(this)\r\n        );\r\n\r\n        res = balanceAfter\r\n            - balanceBefore;\r\n    }\r\n\r\n    function _wrapSolelyDeposit(\r\n        uint256 _nftId,\r\n        address _underlyingAsset,\r\n        uint256 _depositAmount\r\n    )\r\n        internal\r\n    {\r\n        AAVE.deposit(\r\n            _underlyingAsset,\r\n            _depositAmount,\r\n            address(this),\r\n            REF_CODE\r\n        );\r\n\r\n        WISE_LENDING.solelyDeposit(\r\n            _nftId,\r\n            aaveTokenAddress[_underlyingAsset],\r\n            _depositAmount\r\n        );\r\n    }\r\n\r\n    function _wrapSolelyWithdraw(\r\n        uint256 _nftId,\r\n        address _underlyingAsset,\r\n        address _underlyingAssetRecipient,\r\n        uint256 _withdrawAmount\r\n    )\r\n        internal\r\n    {\r\n        _prepareAssetsPosition(\r\n            _nftId,\r\n            _underlyingAsset\r\n        );\r\n\r\n        WISE_LENDING.solelyWithdrawOnBehalf(\r\n            _nftId,\r\n            aaveTokenAddress[_underlyingAsset],\r\n            _withdrawAmount\r\n        );\r\n\r\n        AAVE.withdraw(\r\n            _underlyingAsset,\r\n            _withdrawAmount,\r\n            _underlyingAssetRecipient\r\n        );\r\n    }\r\n\r\n    function _wrapETH(\r\n        uint256 _value\r\n    )\r\n        internal\r\n    {\r\n        WETH.deposit{\r\n            value: _value\r\n        }();\r\n    }\r\n\r\n    function _unwrapETH(\r\n        uint256 _value\r\n    )\r\n        internal\r\n    {\r\n        WETH.withdraw(\r\n            _value\r\n        );\r\n    }\r\n\r\n    function _getInfoPayback(\r\n        uint256 _ethSent,\r\n        uint256 _maxPaybackAmount\r\n    )\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        if (_ethSent > _maxPaybackAmount) {\r\n            return (\r\n                _maxPaybackAmount,\r\n                _ethSent - _maxPaybackAmount\r\n            );\r\n        }\r\n\r\n        return (\r\n            _ethSent,\r\n            0\r\n        );\r\n    }\r\n\r\n    function _prepareCollaterals(\r\n        uint256 _nftId,\r\n        address _poolToken\r\n    )\r\n        private\r\n    {\r\n        uint256 i;\r\n        uint256 l = WISE_LENDING.getPositionLendingTokenLength(\r\n            _nftId\r\n        );\r\n\r\n        for (i = 0; i < l; ++i) {\r\n\r\n            address currentAddress = WISE_LENDING.getPositionLendingTokenByIndex(\r\n                _nftId,\r\n                i\r\n            );\r\n\r\n            if (currentAddress == _poolToken) {\r\n                continue;\r\n            }\r\n\r\n            WISE_LENDING.preparePool(\r\n                currentAddress\r\n            );\r\n\r\n            WISE_LENDING.newBorrowRate(\r\n                _poolToken\r\n            );\r\n        }\r\n    }\r\n\r\n    function _prepareBorrows(\r\n        uint256 _nftId,\r\n        address _poolToken\r\n    )\r\n        private\r\n    {\r\n        uint256 i;\r\n        uint256 l = WISE_LENDING.getPositionBorrowTokenLength(\r\n            _nftId\r\n        );\r\n\r\n        for (i = 0; i < l; ++i) {\r\n\r\n            address currentAddress = WISE_LENDING.getPositionBorrowTokenByIndex(\r\n                _nftId,\r\n                i\r\n            );\r\n\r\n            if (currentAddress == _poolToken) {\r\n                continue;\r\n            }\r\n\r\n            WISE_LENDING.preparePool(\r\n                currentAddress\r\n            );\r\n\r\n            WISE_LENDING.newBorrowRate(\r\n                _poolToken\r\n            );\r\n        }\r\n    }\r\n\r\n    function getAavePoolAPY(\r\n        address _underlyingAsset\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return AAVE.getReserveData(_underlyingAsset).currentLiquidityRate\r\n            / PRECISION_FACTOR_E9;\r\n    }\r\n}\r\n\r\n/**\r\n * @author Christoph Krpoun\r\n * @author Ren\u00e9 Hochmuth\r\n * @author Vitally Marinchenko\r\n */\r\n\r\n/**\r\n * @dev Purpose of this contract is to optimize capital efficency by using\r\n * aave pools. Not borrowed funds are deposited into correspoding aave pools\r\n * to earn supply APY.\r\n *\r\n * The aToken are holded by the wiseLending contract but the accounting\r\n * is managed by the position NFTs. This is possible due to the included\r\n * onBehlaf functionallity inside wiseLending.\r\n */\r\n\r\ncontract AaveHub is AaveHelper, TransferHelper {\r\n\r\n    constructor(\r\n        address _master,\r\n        address _aaveAddress,\r\n        address _lendingAddress\r\n    )\r\n        Declarations(\r\n            _master,\r\n            _aaveAddress,\r\n            _lendingAddress\r\n        )\r\n    {}\r\n\r\n    /**\r\n     * @dev Adds new mapping to aaveHub. Needed\r\n     * to link underlying assets with corresponding\r\n     * aTokens. Can only be called by master.\r\n     */\r\n    function setAaveTokenAddress(\r\n        address _underlyingAsset,\r\n        address _aaveToken\r\n    )\r\n        external\r\n        onlyMaster\r\n    {\r\n        if (aaveTokenAddress[_underlyingAsset] > ZERO_ADDRESS) {\r\n            revert AlreadySet();\r\n        }\r\n\r\n        aaveTokenAddress[_underlyingAsset] = _aaveToken;\r\n\r\n        IERC20(_aaveToken).approve(\r\n            address(WISE_LENDING),\r\n            MAX_AMOUNT\r\n        );\r\n\r\n        IERC20(_underlyingAsset).approve(\r\n            AAVE_ADDRESS,\r\n            MAX_AMOUNT\r\n        );\r\n\r\n        emit SetAaveTokenAddress(\r\n            _underlyingAsset,\r\n            _aaveToken,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Receive functions forwarding\r\n     * sent ETH to the master address\r\n     */\r\n    receive()\r\n        external\r\n        payable\r\n    {\r\n        if (msg.sender == WETH_ADDRESS) {\r\n            return;\r\n        }\r\n\r\n        payable(master).transfer(\r\n            msg.value\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Allows deposit ERC20 token to\r\n     * wiseLending and takes token amount\r\n     * as arguement. Also mints position\r\n     * NFT to reduce needed transactions.\r\n     */\r\n    function depositExactAmountMint(\r\n        address _underlyingAsset,\r\n        uint256 _amount,\r\n        bool _collateralStat\r\n    )\r\n        external\r\n        returns (uint256)\r\n    {\r\n        return depositExactAmount(\r\n            _mintPosition(),\r\n            _underlyingAsset,\r\n            _amount,\r\n            _collateralStat\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Allows deposit ERC20 token to\r\n     * wiseLending and takes token amount as\r\n     * argument.\r\n     */\r\n    function depositExactAmount(\r\n        uint256 _nftId,\r\n        address _underlyingAsset,\r\n        uint256 _amount,\r\n        bool _collateralState\r\n    )\r\n        public\r\n        syncPool(_underlyingAsset)\r\n        returns (uint256)\r\n    {\r\n        _checksDeposit(\r\n            _nftId,\r\n            _underlyingAsset,\r\n            _amount\r\n        );\r\n\r\n        IERC20(_underlyingAsset).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n\r\n        uint256 lendingShares = _wrapDepositExactAmount(\r\n            _nftId,\r\n            _underlyingAsset,\r\n            _amount,\r\n            _collateralState\r\n        );\r\n\r\n        emit IsDepositAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n\r\n        return lendingShares;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to deposit ETH token directly to\r\n     * wiseLending and takes token amount as argument.\r\n     * Also mints position to reduce needed transactions.\r\n     */\r\n    function depositExactAmountETHMint(\r\n        bool _collateralState\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256)\r\n    {\r\n        return depositExactAmountETH(\r\n            _mintPosition(),\r\n            _collateralState\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to deposit ETH token directly to\r\n     * wiseLending and takes token amount as argument.\r\n     */\r\n    function depositExactAmountETH(\r\n        uint256 _nftId,\r\n        bool _collateralState\r\n    )\r\n        public\r\n        payable\r\n        syncPool(WETH_ADDRESS)\r\n        returns (uint256)\r\n    {\r\n        _checksDeposit(\r\n            _nftId,\r\n            WETH_ADDRESS,\r\n            msg.value\r\n        );\r\n\r\n        _wrapETH(\r\n            msg.value\r\n        );\r\n\r\n        uint256 lendingShares = _wrapDepositExactAmount(\r\n            _nftId,\r\n            WETH_ADDRESS,\r\n            msg.value,\r\n            _collateralState\r\n        );\r\n\r\n        emit IsDepositAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n\r\n        return lendingShares;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to withdraw deposited ERC20 token.\r\n     * Takes token amount as argument.\r\n     */\r\n    function withdrawExactAmount(\r\n        uint256 _nftId,\r\n        address _underlyingAsset,\r\n        uint256 _withdrawAmount\r\n    )\r\n        external\r\n        checkOwner(_nftId)\r\n        syncPool(_underlyingAsset)\r\n        returns (uint256)\r\n    {\r\n        _checksWithdraw(\r\n            _nftId,\r\n            _underlyingAsset,\r\n            _withdrawAmount\r\n        );\r\n\r\n        uint256 withdrawnShares = _wrapWithdrawExactAmount(\r\n            _nftId,\r\n            _underlyingAsset,\r\n            msg.sender,\r\n            _withdrawAmount\r\n        );\r\n\r\n        emit IsWithdrawAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n\r\n        return withdrawnShares;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to withdraw deposited ETH token.\r\n     * Takes token amount as argument.\r\n     */\r\n    function withdrawExactAmountETH(\r\n        uint256 _nftId,\r\n        uint256 _withdrawAmount\r\n    )\r\n        external\r\n        checkOwner(_nftId)\r\n        syncPool(WETH_ADDRESS)\r\n        returns (uint256)\r\n    {\r\n        _checksWithdraw(\r\n            _nftId,\r\n            WETH_ADDRESS,\r\n            _withdrawAmount\r\n        );\r\n\r\n        uint256 withdrawnShares = _wrapWithdrawExactAmount(\r\n            _nftId,\r\n            WETH_ADDRESS,\r\n            address(this),\r\n            _withdrawAmount\r\n        );\r\n\r\n        _unwrapETH(\r\n            _withdrawAmount\r\n        );\r\n\r\n        payable(msg.sender).transfer(\r\n            _withdrawAmount\r\n        );\r\n\r\n        emit IsWithdrawAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n\r\n        return withdrawnShares;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to withdraw deposited ERC20 token.\r\n     * Takes shares as argument.\r\n     */\r\n    function withdrawExactShares(\r\n        uint256 _nftId,\r\n        address _underlyingAsset,\r\n        uint256 _shareAmount\r\n    )\r\n        external\r\n        checkOwner(_nftId)\r\n        syncPool(_underlyingAsset)\r\n        returns (uint256)\r\n    {\r\n        uint256 withdrawAmount = _wrapWithdrawExactShares(\r\n            _nftId,\r\n            _underlyingAsset,\r\n            msg.sender,\r\n            _shareAmount\r\n        );\r\n\r\n        emit IsWithdrawAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n\r\n        return withdrawAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to withdraw deposited ETH token.\r\n     * Takes shares as argument.\r\n     */\r\n    function withdrawExactSharesETH(\r\n        uint256 _nftId,\r\n        uint256 _shareAmount\r\n    )\r\n        external\r\n        checkOwner(_nftId)\r\n        syncPool(WETH_ADDRESS)\r\n        returns (uint256)\r\n    {\r\n        uint256 withdrawAmount = _wrapWithdrawExactShares(\r\n            _nftId,\r\n            WETH_ADDRESS,\r\n            address(this),\r\n            _shareAmount\r\n        );\r\n\r\n        _unwrapETH(\r\n            withdrawAmount\r\n        );\r\n\r\n        payable(msg.sender).transfer(\r\n            withdrawAmount\r\n        );\r\n\r\n        emit IsWithdrawAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n\r\n        return withdrawAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to borrow ERC20 token from a\r\n     * wiseLending pool. Needs supplied collateral\r\n     * inside the same position and to approve\r\n     * aaveHub to borrow onBehalf for the caller.\r\n     * Takes token amount as argument.\r\n     */\r\n    function borrowExactAmount(\r\n        uint256 _nftId,\r\n        address _underlyingAsset,\r\n        uint256 _borrowAmount\r\n    )\r\n        external\r\n        checkOwner(_nftId)\r\n        syncPool(_underlyingAsset)\r\n        returns (uint256)\r\n    {\r\n        _checksBorrow(\r\n            _nftId,\r\n            _underlyingAsset,\r\n            _borrowAmount\r\n        );\r\n\r\n        uint256 borrowShares = _wrapBorrowExactAmount(\r\n            _nftId,\r\n            _underlyingAsset,\r\n            msg.sender,\r\n            _borrowAmount\r\n        );\r\n\r\n        emit IsBorrowAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n\r\n        return borrowShares;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to borrow ETH token from\r\n     * wiseLending. Needs supplied collateral\r\n     * inside the same position and to approve\r\n     * aaveHub to borrow onBehalf for the caller.\r\n     * Takes token amount as argument.\r\n     */\r\n    function borrowExactAmountETH(\r\n        uint256 _nftId,\r\n        uint256 _borrowAmount\r\n    )\r\n        external\r\n        checkOwner(_nftId)\r\n        syncPool(WETH_ADDRESS)\r\n        returns (uint256)\r\n    {\r\n        _checksBorrow(\r\n            _nftId,\r\n            WETH_ADDRESS,\r\n            _borrowAmount\r\n        );\r\n\r\n        uint256 borrowShares = _wrapBorrowExactAmount(\r\n            _nftId,\r\n            WETH_ADDRESS,\r\n            address(this),\r\n            _borrowAmount\r\n        );\r\n\r\n        _unwrapETH(\r\n            _borrowAmount\r\n        );\r\n\r\n        payable(msg.sender).transfer(\r\n            _borrowAmount\r\n        );\r\n\r\n        emit IsBorrowAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n\r\n        return borrowShares;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to payback ERC20 token for\r\n     * any postion. Takes token amount as argument.\r\n     */\r\n    function paybackExactAmount(\r\n        uint256 _nftId,\r\n        address _underlyingAsset,\r\n        uint256 _paybackAmount\r\n    )\r\n        external\r\n        syncPool(_underlyingAsset)\r\n        checkPositionLocked(_nftId)\r\n        returns (uint256)\r\n    {\r\n        address aaveToken = aaveTokenAddress[\r\n            _underlyingAsset\r\n        ];\r\n\r\n        _safeTransferFrom(\r\n            _underlyingAsset,\r\n            msg.sender,\r\n            address(this),\r\n            _paybackAmount\r\n        );\r\n\r\n        uint256 actualAmountDeposit = _wrapAaveReturnValueDeposit(\r\n            _underlyingAsset,\r\n            _paybackAmount,\r\n            address(this)\r\n        );\r\n\r\n        uint256 borrowSharesReduction = WISE_LENDING.paybackExactAmount(\r\n            _nftId,\r\n            aaveToken,\r\n            actualAmountDeposit\r\n        );\r\n\r\n        emit IsPaybackAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n\r\n        return borrowSharesReduction;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to payback ETH token for\r\n     * any postion. Takes token amount as argument.\r\n     */\r\n    function paybackExactAmountETH(\r\n        uint256 _nftId\r\n    )\r\n        external\r\n        payable\r\n        syncPool(WETH_ADDRESS)\r\n        checkPositionLocked(_nftId)\r\n        returns (uint256)\r\n    {\r\n        address aaveWrappedETH = aaveTokenAddress[\r\n            WETH_ADDRESS\r\n        ];\r\n\r\n        uint256 userBorrowShares = WISE_LENDING.getPositionBorrowShares(\r\n            _nftId,\r\n            aaveWrappedETH\r\n        );\r\n\r\n        uint256 maxPaybackAmount = WISE_LENDING.paybackAmount(\r\n            aaveWrappedETH,\r\n            userBorrowShares\r\n        );\r\n\r\n        (\r\n            uint256 paybackAmount,\r\n            uint256 ethRefundAmount\r\n\r\n        ) = _getInfoPayback(\r\n            msg.value,\r\n            maxPaybackAmount\r\n        );\r\n\r\n        _wrapETH(\r\n            paybackAmount\r\n        );\r\n\r\n        uint256 actualAmountDeposit = _wrapAaveReturnValueDeposit(\r\n            WETH_ADDRESS,\r\n            paybackAmount,\r\n            address(this)\r\n        );\r\n\r\n        uint256 borrowSharesReduction = WISE_LENDING.paybackExactAmount(\r\n            _nftId,\r\n            aaveWrappedETH,\r\n            actualAmountDeposit\r\n        );\r\n\r\n        if (ethRefundAmount > 0) {\r\n            payable(msg.sender).transfer(\r\n                ethRefundAmount\r\n            );\r\n        }\r\n\r\n        emit IsPaybackAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n\r\n        return borrowSharesReduction;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to payback ERC20 token for\r\n     * any postion. Takes shares as argument.\r\n     */\r\n    function paybackExactShares(\r\n        uint256 _nftId,\r\n        address _underlyingAsset,\r\n        uint256 _shares\r\n    )\r\n        external\r\n        syncPool(_underlyingAsset)\r\n        checkPositionLocked(_nftId)\r\n        returns (uint256)\r\n    {\r\n        address aaveToken = aaveTokenAddress[\r\n            _underlyingAsset\r\n        ];\r\n\r\n        uint256 paybackAmount = WISE_LENDING.paybackAmount(\r\n            aaveToken,\r\n            _shares\r\n        );\r\n\r\n        _safeTransferFrom(\r\n            _underlyingAsset,\r\n            msg.sender,\r\n            address(this),\r\n            paybackAmount\r\n        );\r\n\r\n        AAVE.deposit(\r\n            _underlyingAsset,\r\n            paybackAmount,\r\n            address(this),\r\n            REF_CODE\r\n        );\r\n\r\n        WISE_LENDING.paybackExactShares(\r\n            _nftId,\r\n            aaveToken,\r\n            _shares\r\n        );\r\n\r\n        emit IsPaybackAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n\r\n        return paybackAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to deposit ERC20 token in\r\n     * private mode. These funds are saved from\r\n     * borrowed out. User can withdraw private funds\r\n     * anytime even the pools are empty. Private funds\r\n     * don't earn any APY! Also a postion NFT is minted\r\n     * to reduce transactions.\r\n     */\r\n    function solelyDepositMint(\r\n        address _underlyingAsset,\r\n        uint256 _depositAmount\r\n    )\r\n        external\r\n    {\r\n        solelyDeposit(\r\n            _mintPosition(),\r\n            _underlyingAsset,\r\n            _depositAmount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to deposit ERC20 token in\r\n     * private mode. These funds are saved from\r\n     * borrowing by other users. User can withdraw\r\n     * private funds anytime even the pools are empty.\r\n     * Private funds don't earn any APY!\r\n     */\r\n    function solelyDeposit(\r\n        uint256 _nftId,\r\n        address _underlyingAsset,\r\n        uint256 _depositAmount\r\n    )\r\n        public\r\n        syncPool(_underlyingAsset)\r\n    {\r\n        _checksDeposit(\r\n            _nftId,\r\n            _underlyingAsset,\r\n            _depositAmount\r\n        );\r\n\r\n        _safeTransferFrom(\r\n            _underlyingAsset,\r\n            msg.sender,\r\n            address(this),\r\n            _depositAmount\r\n        );\r\n\r\n        _wrapSolelyDeposit(\r\n            _nftId,\r\n            _underlyingAsset,\r\n            _depositAmount\r\n        );\r\n\r\n        emit IsSolelyDepositAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to withdraw ERC20 token from\r\n     * private mode.\r\n     */\r\n    function solelyWithdraw(\r\n        uint256 _nftId,\r\n        address _underlyingAsset,\r\n        uint256 _withdrawAmount\r\n    )\r\n        external\r\n        checkOwner(_nftId)\r\n        syncPool(_underlyingAsset)\r\n    {\r\n        _checksSolelyWithdraw(\r\n            _nftId,\r\n            _underlyingAsset,\r\n            _withdrawAmount\r\n        );\r\n\r\n        _wrapSolelyWithdraw(\r\n            _nftId,\r\n            _underlyingAsset,\r\n            msg.sender,\r\n            _withdrawAmount\r\n        );\r\n\r\n        emit IsSolelyWithdrawAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to deposit ETH token in\r\n     * private mode. These funds are saved from\r\n     * borrowing by other users. User can withdraw\r\n     * private funds anytime even the pools are empty.\r\n     * Private funds don't earn any APY! Also a position\r\n     * NFT is minted to reduce transactions.\r\n     */\r\n    function solelyDepositETHMint()\r\n        external\r\n        payable\r\n    {\r\n        solelyDepositETH(\r\n            _mintPosition()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to deposit ETH token in\r\n     * private mode. These funds are saved from\r\n     * borrowing by other users. User can withdraw\r\n     * private funds anytime even the pools are empty.\r\n     * Private funds don't earn any APY!\r\n     */\r\n    function solelyDepositETH(\r\n        uint256 _nftId\r\n    )\r\n        public\r\n        payable\r\n        syncPool(WETH_ADDRESS)\r\n    {\r\n        _checksDeposit(\r\n            _nftId,\r\n            WETH_ADDRESS,\r\n            msg.value\r\n        );\r\n\r\n        _wrapETH(\r\n            msg.value\r\n        );\r\n\r\n        _wrapSolelyDeposit(\r\n            _nftId,\r\n            WETH_ADDRESS,\r\n            msg.value\r\n        );\r\n\r\n        emit IsSolelyDepositAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to withdraw ETH token from\r\n     * private mode.\r\n     */\r\n    function solelyWithdrawETH(\r\n        uint256 _nftId,\r\n        uint256 _withdrawAmount\r\n    )\r\n        external\r\n        checkOwner(_nftId)\r\n        syncPool(WETH_ADDRESS)\r\n    {\r\n        _checksSolelyWithdraw(\r\n            _nftId,\r\n            WETH_ADDRESS,\r\n            _withdrawAmount\r\n        );\r\n\r\n        _wrapSolelyWithdraw(\r\n            _nftId,\r\n            WETH_ADDRESS,\r\n            address(this),\r\n            _withdrawAmount\r\n        );\r\n\r\n        _unwrapETH(\r\n            _withdrawAmount\r\n        );\r\n\r\n        payable(msg.sender).transfer(\r\n            _withdrawAmount\r\n        );\r\n\r\n        emit IsSolelyWithdrawAave(\r\n            _nftId,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev View functions returning the combined rate\r\n     * from aave supply APY and wiseLending borrow APY\r\n     * of a pool.\r\n     */\r\n    function getLendingRate(\r\n        address _underlyingAssert\r\n    )\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address aToken = aaveTokenAddress[\r\n            _underlyingAssert\r\n        ];\r\n\r\n        uint256 lendingRate = WISE_SECURITY.getLendingRate(\r\n            aToken\r\n        );\r\n\r\n        uint256 aaveRate = getAavePoolAPY(\r\n            _underlyingAssert\r\n        );\r\n\r\n        uint256 pseudoPool = WISE_LENDING.getPseudoTotalPool(\r\n            aToken\r\n        );\r\n\r\n        uint256 pseudoBorrow = WISE_LENDING.getPseudoTotalBorrowAmount(\r\n            aToken\r\n        );\r\n\r\n        uint256 balanceAToken = IERC20(aToken).balanceOf(\r\n            address(WISE_LENDING)\r\n        );\r\n\r\n        uint256 increaseToken = (\r\n            lendingRate\r\n            * pseudoBorrow\r\n            + aaveRate\r\n            * balanceAToken\r\n        );\r\n\r\n        return increaseToken\r\n            / pseudoPool;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMaster\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProposed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ClaimedOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IsBorrowAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IsDepositAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IsPaybackAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IsSolelyDepositAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IsSolelyWithdrawAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IsWithdrawAave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProposedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aaveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetAaveTokenAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSITION_NFT\",\"outputs\":[{\"internalType\":\"contract IPositionNFTs\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WISE_LENDING\",\"outputs\":[{\"internalType\":\"contract IWiseLending\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WISE_SECURITY\",\"outputs\":[{\"internalType\":\"contract IWiseSecurity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aaveTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowExactAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowExactAmountETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_collateralState\",\"type\":\"bool\"}],\"name\":\"depositExactAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_collateralState\",\"type\":\"bool\"}],\"name\":\"depositExactAmountETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_collateralState\",\"type\":\"bool\"}],\"name\":\"depositExactAmountETHMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_collateralStat\",\"type\":\"bool\"}],\"name\":\"depositExactAmountMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"}],\"name\":\"getAavePoolAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAssert\",\"type\":\"address\"}],\"name\":\"getLendingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_paybackAmount\",\"type\":\"uint256\"}],\"name\":\"paybackExactAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"paybackExactAmountETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"paybackExactShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"proposeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aaveToken\",\"type\":\"address\"}],\"name\":\"setAaveTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_securityAddress\",\"type\":\"address\"}],\"name\":\"setWiseSecurity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"solelyDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"solelyDepositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"solelyDepositETHMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"solelyDepositMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"solelyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"solelyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawExactAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawExactAmountETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawExactShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawExactSharesETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AaveHub", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000641ad78baca220c5bd28b51ce8e0f495e85fe68900000000000000000000000087870bca3f3fd6335c3f4ce8392d69350b4fa4e20000000000000000000000009f0f51d6358b4bbbe6d7d392000c7969b391d85c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e0b2f42ea56dafb0f90e384d3c01fe00d85709a16ba455280606016973f4e447"}