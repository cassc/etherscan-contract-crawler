{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@mimic-fi/v3-authorizer/contracts/Authorized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.17;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\nimport './AuthorizedHelpers.sol';\\nimport './interfaces/IAuthorized.sol';\\nimport './interfaces/IAuthorizer.sol';\\n\\n/**\\n * @title Authorized\\n * @dev Implementation using an authorizer as its access-control mechanism. It offers `auth` and `authP` modifiers to\\n * tag its own functions in order to control who can access them against the authorizer referenced.\\n */\\ncontract Authorized is IAuthorized, Initializable, AuthorizedHelpers {\\n    // Authorizer reference\\n    address public override authorizer;\\n\\n    /**\\n     * @dev Modifier that should be used to tag protected functions\\n     */\\n    modifier auth() {\\n        _authenticate(msg.sender, msg.sig);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that should be used to tag protected functions with params\\n     */\\n    modifier authP(uint256[] memory params) {\\n        _authenticate(msg.sender, msg.sig, params);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a new authorized contract. Note that initializers are disabled at creation time.\\n     */\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initializes the authorized contract. It does call upper contracts initializers.\\n     * @param _authorizer Address of the authorizer to be set\\n     */\\n    function __Authorized_init(address _authorizer) internal onlyInitializing {\\n        __Authorized_init_unchained(_authorizer);\\n    }\\n\\n    /**\\n     * @dev Initializes the authorized contract. It does not call upper contracts initializers.\\n     * @param _authorizer Address of the authorizer to be set\\n     */\\n    function __Authorized_init_unchained(address _authorizer) internal onlyInitializing {\\n        authorizer = _authorizer;\\n    }\\n\\n    /**\\n     * @dev Reverts if `who` is not allowed to call `what`\\n     * @param who Address to be authenticated\\n     * @param what Function selector to be authenticated\\n     */\\n    function _authenticate(address who, bytes4 what) internal view {\\n        _authenticate(who, what, new uint256[](0));\\n    }\\n\\n    /**\\n     * @dev Reverts if `who` is not allowed to call `what` with `how`\\n     * @param who Address to be authenticated\\n     * @param what Function selector to be authenticated\\n     * @param how Params to be authenticated\\n     */\\n    function _authenticate(address who, bytes4 what, uint256[] memory how) internal view {\\n        if (!_isAuthorized(who, what, how)) revert AuthSenderNotAllowed(who, what, how);\\n    }\\n\\n    /**\\n     * @dev Tells whether `who` has any permission on this contract\\n     * @param who Address asking permissions for\\n     */\\n    function _hasPermissions(address who) internal view returns (bool) {\\n        return IAuthorizer(authorizer).hasPermissions(who, address(this));\\n    }\\n\\n    /**\\n     * @dev Tells whether `who` is allowed to call `what`\\n     * @param who Address asking permission for\\n     * @param what Function selector asking permission for\\n     */\\n    function _isAuthorized(address who, bytes4 what) internal view returns (bool) {\\n        return _isAuthorized(who, what, new uint256[](0));\\n    }\\n\\n    /**\\n     * @dev Tells whether `who` is allowed to call `what` with `how`\\n     * @param who Address asking permission for\\n     * @param what Function selector asking permission for\\n     * @param how Params asking permission for\\n     */\\n    function _isAuthorized(address who, bytes4 what, uint256[] memory how) internal view returns (bool) {\\n        return IAuthorizer(authorizer).isAuthorized(who, address(this), what, how);\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-authorizer/contracts/AuthorizedHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title AuthorizedHelpers\\n * @dev Syntax sugar methods to operate with authorizer params easily\\n */\\ncontract AuthorizedHelpers {\\n    function authParams(address p1) internal pure returns (uint256[] memory r) {\\n        return authParams(uint256(uint160(p1)));\\n    }\\n\\n    function authParams(bytes32 p1) internal pure returns (uint256[] memory r) {\\n        return authParams(uint256(p1));\\n    }\\n\\n    function authParams(uint256 p1) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](1);\\n        r[0] = p1;\\n    }\\n\\n    function authParams(address p1, bool p2) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](2);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = p2 ? 1 : 0;\\n    }\\n\\n    function authParams(address p1, uint256 p2) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](2);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = p2;\\n    }\\n\\n    function authParams(address p1, address p2) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](2);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = uint256(uint160(p2));\\n    }\\n\\n    function authParams(bytes32 p1, bytes32 p2) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](2);\\n        r[0] = uint256(p1);\\n        r[1] = uint256(p2);\\n    }\\n\\n    function authParams(address p1, address p2, uint256 p3) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](3);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = uint256(uint160(p2));\\n        r[2] = p3;\\n    }\\n\\n    function authParams(address p1, address p2, address p3) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](3);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = uint256(uint160(p2));\\n        r[2] = uint256(uint160(p3));\\n    }\\n\\n    function authParams(address p1, address p2, bytes4 p3) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](3);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = uint256(uint160(p2));\\n        r[2] = uint256(uint32(p3));\\n    }\\n\\n    function authParams(address p1, uint256 p2, uint256 p3) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](3);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = p2;\\n        r[2] = p3;\\n    }\\n\\n    function authParams(uint256 p1, uint256 p2, uint256 p3, uint256 p4) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](4);\\n        r[0] = p1;\\n        r[1] = p2;\\n        r[2] = p3;\\n        r[3] = p4;\\n    }\\n\\n    function authParams(address p1, address p2, uint256 p3, uint256 p4) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](4);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = uint256(uint160(p2));\\n        r[2] = p3;\\n        r[3] = p4;\\n    }\\n\\n    function authParams(address p1, uint256 p2, uint256 p3, uint256 p4) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](4);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = p2;\\n        r[2] = p3;\\n        r[3] = p4;\\n    }\\n\\n    function authParams(bytes32 p1, address p2, uint256 p3, bool p4) internal pure returns (uint256[] memory r) {\\n        r = new uint256[](4);\\n        r[0] = uint256(p1);\\n        r[1] = uint256(uint160(p2));\\n        r[2] = p3;\\n        r[3] = p4 ? 1 : 0;\\n    }\\n\\n    function authParams(address p1, uint256 p2, uint256 p3, uint256 p4, uint256 p5)\\n        internal\\n        pure\\n        returns (uint256[] memory r)\\n    {\\n        r = new uint256[](5);\\n        r[0] = uint256(uint160(p1));\\n        r[1] = p2;\\n        r[2] = p3;\\n        r[3] = p4;\\n        r[4] = p5;\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-authorizer/contracts/interfaces/IAuthorized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Authorized interface\\n */\\ninterface IAuthorized {\\n    /**\\n     * @dev Sender `who` is not allowed to call `what` with `how`\\n     */\\n    error AuthSenderNotAllowed(address who, bytes4 what, uint256[] how);\\n\\n    /**\\n     * @dev Tells the address of the authorizer reference\\n     */\\n    function authorizer() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-authorizer/contracts/interfaces/IAuthorizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Authorizer interface\\n */\\ninterface IAuthorizer {\\n    /**\\n     * @dev Permission change\\n     * @param where Address of the contract to change a permission for\\n     * @param changes List of permission changes to be executed\\n     */\\n    struct PermissionChange {\\n        address where;\\n        GrantPermission[] grants;\\n        RevokePermission[] revokes;\\n    }\\n\\n    /**\\n     * @dev Grant permission data\\n     * @param who Address to be authorized\\n     * @param what Function selector to be authorized\\n     * @param params List of params to restrict the given permission\\n     */\\n    struct GrantPermission {\\n        address who;\\n        bytes4 what;\\n        Param[] params;\\n    }\\n\\n    /**\\n     * @dev Revoke permission data\\n     * @param who Address to be unauthorized\\n     * @param what Function selector to be unauthorized\\n     */\\n    struct RevokePermission {\\n        address who;\\n        bytes4 what;\\n    }\\n\\n    /**\\n     * @dev Params used to validate permissions params against\\n     * @param op ID of the operation to compute in order to validate a permission param\\n     * @param value Comparison value\\n     */\\n    struct Param {\\n        uint8 op;\\n        uint248 value;\\n    }\\n\\n    /**\\n     * @dev Sender is not authorized to call `what` on `where` with `how`\\n     */\\n    error AuthorizerSenderNotAllowed(address who, address where, bytes4 what, uint256[] how);\\n\\n    /**\\n     * @dev The operation param is invalid\\n     */\\n    error AuthorizerInvalidParamOp(uint8 op);\\n\\n    /**\\n     * @dev Emitted every time `who`'s permission to perform `what` on `where` is granted with `params`\\n     */\\n    event Authorized(address indexed who, address indexed where, bytes4 indexed what, Param[] params);\\n\\n    /**\\n     * @dev Emitted every time `who`'s permission to perform `what` on `where` is revoked\\n     */\\n    event Unauthorized(address indexed who, address indexed where, bytes4 indexed what);\\n\\n    /**\\n     * @dev Tells whether `who` has any permission on `where`\\n     * @param who Address asking permission for\\n     * @param where Target address asking permission for\\n     */\\n    function hasPermissions(address who, address where) external view returns (bool);\\n\\n    /**\\n     * @dev Tells the number of permissions `who` has on `where`\\n     * @param who Address asking permission for\\n     * @param where Target address asking permission for\\n     */\\n    function getPermissionsLength(address who, address where) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells whether `who` has permission to call `what` on `where`. Note `how` is not evaluated here,\\n     * which means `who` might be authorized on or not depending on the call at the moment of the execution\\n     * @param who Address asking permission for\\n     * @param where Target address asking permission for\\n     * @param what Function selector asking permission for\\n     */\\n    function hasPermission(address who, address where, bytes4 what) external view returns (bool);\\n\\n    /**\\n     * @dev Tells whether `who` is allowed to call `what` on `where` with `how`\\n     * @param who Address asking permission for\\n     * @param where Target address asking permission for\\n     * @param what Function selector asking permission for\\n     * @param how Params asking permission for\\n     */\\n    function isAuthorized(address who, address where, bytes4 what, uint256[] memory how) external view returns (bool);\\n\\n    /**\\n     * @dev Tells the params set for a given permission\\n     * @param who Address asking permission params of\\n     * @param where Target address asking permission params of\\n     * @param what Function selector asking permission params of\\n     */\\n    function getPermissionParams(address who, address where, bytes4 what) external view returns (Param[] memory);\\n\\n    /**\\n     * @dev Executes a list of permission changes\\n     * @param changes List of permission changes to be executed\\n     */\\n    function changePermissions(PermissionChange[] memory changes) external;\\n\\n    /**\\n     * @dev Authorizes `who` to call `what` on `where` restricted by `params`\\n     * @param who Address to be authorized\\n     * @param where Target address to be granted for\\n     * @param what Function selector to be granted\\n     * @param params Optional params to restrict a permission attempt\\n     */\\n    function authorize(address who, address where, bytes4 what, Param[] memory params) external;\\n\\n    /**\\n     * @dev Unauthorizes `who` to call `what` on `where`. Sender must be authorized.\\n     * @param who Address to be authorized\\n     * @param where Target address to be revoked for\\n     * @param what Function selector to be revoked\\n     */\\n    function unauthorize(address who, address where, bytes4 what) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-connectors/contracts/interfaces/bridge/IAxelarConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Axelar connector interface\\n */\\ninterface IAxelarConnector {\\n    /**\\n     * @dev The recipient address is zero\\n     */\\n    error AxelarBridgeRecipientZero();\\n\\n    /**\\n     * @dev The source and destination chains are the same\\n     */\\n    error AxelarBridgeSameChain(uint256 chainId);\\n\\n    /**\\n     * @dev The chain ID is not supported\\n     */\\n    error AxelarBridgeUnknownChainId(uint256 chainId);\\n\\n    /**\\n     * @dev The post token balance is lower than the previous token balance minus the amount bridged\\n     */\\n    error AxelarBridgeBadPostTokenBalance(uint256 postBalance, uint256 preBalance, uint256 amount);\\n\\n    /**\\n     * @dev Tells the reference to the Axelar gateway of the source chain\\n     */\\n    function axelarGateway() external view returns (address);\\n\\n    /**\\n     * @dev Executes a bridge of assets using Axelar\\n     * @param chainId ID of the destination chain\\n     * @param token Address of the token to be bridged\\n     * @param amount Amount of tokens to be bridged\\n     * @param recipient Address that will receive the tokens on the destination chain\\n     */\\n    function execute(uint256 chainId, address token, uint256 amount, address recipient) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-connectors/contracts/interfaces/bridge/IConnextConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Connext connector interface\\n * @dev Interfaces with Connext to bridge tokens\\n */\\ninterface IConnextConnector {\\n    /**\\n     * @dev The recipient address is zero\\n     */\\n    error ConnextBridgeRecipientZero();\\n\\n    /**\\n     * @dev The source and destination chains are the same\\n     */\\n    error ConnextBridgeSameChain(uint256 chainId);\\n\\n    /**\\n     * @dev The chain ID is not supported\\n     */\\n    error ConnextBridgeUnknownChainId(uint256 chainId);\\n\\n    /**\\n     * @dev The relayer fee is greater than the amount to be bridged\\n     */\\n    error ConnextBridgeRelayerFeeGtAmount(uint256 relayerFee, uint256 amount);\\n\\n    /**\\n     * @dev The minimum amount out is greater than the amount to be bridged minus the relayer fee\\n     */\\n    error ConnextBridgeMinAmountOutTooBig(uint256 minAmountOut, uint256 amount, uint256 relayerFee);\\n\\n    /**\\n     * @dev The post token balance is lower than the previous token balance minus the amount bridged\\n     */\\n    error ConnextBridgeBadPostTokenBalance(uint256 postBalance, uint256 preBalance, uint256 amount);\\n\\n    /**\\n     * @dev Tells the reference to the Connext contract of the source chain\\n     */\\n    function connext() external view returns (address);\\n\\n    /**\\n     * @dev Executes a bridge of assets using Connext\\n     * @param chainId ID of the destination chain\\n     * @param token Address of the token to be bridged\\n     * @param amount Amount of tokens to be bridged\\n     * @param minAmountOut Min amount of tokens to receive on the destination chain after relayer fees and slippage\\n     * @param recipient Address that will receive the tokens on the destination chain\\n     * @param relayerFee Fee to be paid to the relayer\\n     */\\n    function execute(\\n        uint256 chainId,\\n        address token,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address recipient,\\n        uint256 relayerFee\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-connectors/contracts/interfaces/bridge/IHopConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Hop connector interface\\n */\\ninterface IHopConnector {\\n    /**\\n     * @dev The source and destination chains are the same\\n     */\\n    error HopBridgeSameChain(uint256 chainId);\\n\\n    /**\\n     * @dev The bridge operation is not supported\\n     */\\n    error HopBridgeOpNotSupported();\\n\\n    /**\\n     * @dev The recipient address is zero\\n     */\\n    error HopBridgeRecipientZero();\\n\\n    /**\\n     * @dev The relayer was sent when not needed\\n     */\\n    error HopBridgeRelayerNotNeeded();\\n\\n    /**\\n     * @dev The deadline was sent when not needed\\n     */\\n    error HopBridgeDeadlineNotNeeded();\\n\\n    /**\\n     * @dev The deadline is in the past\\n     */\\n    error HopBridgePastDeadline(uint256 deadline, uint256 currentTimestamp);\\n\\n    /**\\n     * @dev The post token balance is lower than the previous token balance minus the amount bridged\\n     */\\n    error HopBridgeBadPostTokenBalance(uint256 postBalance, uint256 preBalance, uint256 amount);\\n\\n    /**\\n     * @dev Tells the reference to the wrapped native token address\\n     */\\n    function wrappedNativeToken() external view returns (address);\\n\\n    /**\\n     * @dev Executes a bridge of assets using Hop Exchange\\n     * @param chainId ID of the destination chain\\n     * @param token Address of the token to be bridged\\n     * @param amount Amount of tokens to be bridged\\n     * @param minAmountOut Minimum amount of tokens willing to receive on the destination chain\\n     * @param recipient Address that will receive the tokens on the destination chain\\n     * @param bridge Address of the bridge component (i.e. hopBridge or hopAMM)\\n     * @param deadline Deadline to be used when bridging to L2 in order to swap the corresponding hToken\\n     * @param relayer Only used when transferring from L1 to L2 if a 3rd party is relaying the transfer on the user's behalf\\n     * @param fee Fee to be sent to the bridge based on the source and destination chain (i.e. relayerFee or bonderFee)\\n     */\\n    function execute(\\n        uint256 chainId,\\n        address token,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address recipient,\\n        address bridge,\\n        uint256 deadline,\\n        address relayer,\\n        uint256 fee\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-connectors/contracts/interfaces/bridge/IWormholeConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Wormhole connector interface\\n */\\ninterface IWormholeConnector {\\n    /**\\n     * @dev The recipient address is zero\\n     */\\n    error WormholeBridgeRecipientZero();\\n\\n    /**\\n     * @dev The source and destination chains are the same\\n     */\\n    error WormholeBridgeSameChain(uint256 chainId);\\n\\n    /**\\n     * @dev The chain ID is not supported\\n     */\\n    error WormholeBridgeUnknownChainId(uint256 chainId);\\n\\n    /**\\n     * @dev The relayer fee is greater than the amount to be bridged\\n     */\\n    error WormholeBridgeRelayerFeeGtAmount(uint256 relayerFee, uint256 amount);\\n\\n    /**\\n     * @dev The minimum amount out is greater than the amount to be bridged minus the relayer fee\\n     */\\n    error WormholeBridgeMinAmountOutTooBig(uint256 minAmountOut, uint256 amount, uint256 relayerFee);\\n\\n    /**\\n     * @dev The post token balance is lower than the previous token balance minus the amount bridged\\n     */\\n    error WormholeBridgeBadPostTokenBalance(uint256 postBalance, uint256 preBalance, uint256 amount);\\n\\n    /**\\n     * @dev Tells the reference to the Wormhole's CircleRelayer contract of the source chain\\n     */\\n    function wormholeCircleRelayer() external view returns (address);\\n\\n    /**\\n     * @dev Executes a bridge of assets using Wormhole's CircleRelayer integration\\n     * @param chainId ID of the destination chain\\n     * @param token Address of the token to be bridged\\n     * @param amount Amount of tokens to be bridged\\n     * @param minAmountOut Minimum amount of tokens willing to receive on the destination chain after relayer fees\\n     * @param recipient Address that will receive the tokens on the destination chain\\n     */\\n    function execute(uint256 chainId, address token, uint256 amount, uint256 minAmountOut, address recipient) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-connectors/contracts/interfaces/liquidity/convex/IConvexConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Convex connector interface\\n */\\ninterface IConvexConnector {\\n    /**\\n     * @dev Missing Convex pool for the requested Curve pool\\n     */\\n    error ConvexCvxPoolNotFound(address curvePool);\\n\\n    /**\\n     * @dev Failed to deposit tokens into the Convex booster\\n     */\\n    error ConvexBoosterDepositFailed(uint256 poolId, uint256 amount);\\n\\n    /**\\n     * @dev Failed to withdraw tokens from Convex pool\\n     */\\n    error ConvexCvxPoolWithdrawFailed(address cvxPool, uint256 amount);\\n\\n    /**\\n     * @dev Tells the reference to the Convex booster\\n     */\\n    function booster() external view returns (address);\\n\\n    /**\\n     * @dev Finds the Curve pool address associated to a Convex pool\\n     */\\n    function getCurvePool(address cvxPool) external view returns (address);\\n\\n    /**\\n     * @dev Finds the Curve pool address associated to a Convex pool\\n     */\\n    function getCvxPool(address curvePool) external view returns (address);\\n\\n    /**\\n     * @dev Claims Convex pool rewards for a Curve pool\\n     */\\n    function claim(address cvxPool) external returns (address[] memory tokens, uint256[] memory amounts);\\n\\n    /**\\n     * @dev Deposits Curve pool tokens into Convex\\n     * @param curvePool Address of the Curve pool to join Convex\\n     * @param amount Amount of Curve pool tokens to be deposited into Convex\\n     */\\n    function join(address curvePool, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @dev Withdraws Curve pool tokens from Convex\\n     * @param cvxPool Address of the Convex pool to exit from Convex\\n     * @param amount Amount of Convex tokens to be withdrawn\\n     */\\n    function exit(address cvxPool, uint256 amount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-connectors/contracts/interfaces/liquidity/curve/ICurve2CrvConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Curve 2CRV connector interface\\n */\\ninterface ICurve2CrvConnector {\\n    /**\\n     * @dev Failed to find the token in the 2CRV pool\\n     */\\n    error Curve2CrvTokenNotFound(address pool, address token);\\n\\n    /**\\n     * @dev Token decimals exceed 18\\n     */\\n    error Curve2CrvTokenDecimalsAbove18(address token, uint256 decimals);\\n\\n    /**\\n     * @dev The slippage is above one\\n     */\\n    error Curve2CrvSlippageAboveOne(uint256 slippage);\\n\\n    /**\\n     * @dev Adds liquidity to the 2CRV pool\\n     * @param pool Address of the 2CRV pool to join\\n     * @param tokenIn Address of the token to join the 2CRV pool\\n     * @param amountIn Amount of tokens to join the 2CRV pool\\n     * @param slippage Slippage value to be used to compute the desired min amount out of pool tokens\\n     */\\n    function join(address pool, address tokenIn, uint256 amountIn, uint256 slippage) external returns (uint256);\\n\\n    /**\\n     * @dev Removes liquidity from 2CRV pool\\n     * @param pool Address of the 2CRV pool to exit\\n     * @param amountIn Amount of pool tokens to exit from the 2CRV pool\\n     * @param tokenOut Address of the token to exit the pool\\n     * @param slippage Slippage value to be used to compute the desired min amount out of tokens\\n     */\\n    function exit(address pool, uint256 amountIn, address tokenOut, uint256 slippage)\\n        external\\n        returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-connectors/contracts/interfaces/swap/IHopSwapConnector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Hop swap connector interface\\n */\\ninterface IHopSwapConnector {\\n    /**\\n     * @dev The dex address is zero\\n     */\\n    error HopDexAddressZero();\\n\\n    /**\\n     * @dev The token in is the same as the token out\\n     */\\n    error HopSwapSameToken(address token);\\n\\n    /**\\n     * @dev The amount out is lower than the minimum amount out\\n     */\\n    error HopBadAmountOut(uint256 amountOut, uint256 minAmountOut);\\n\\n    /**\\n     * @dev The post token in balance is lower than the pre token in balance minus the amount in\\n     */\\n    error HopBadPostTokenInBalance(uint256 postBalanceIn, uint256 preBalanceIn, uint256 amountIn);\\n\\n    /**\\n     * @dev Executes a token swap in Hop\\n     * @param tokenIn Token being sent\\n     * @param tokenOut Token being received\\n     * @param amountIn Amount of tokenIn being swapped\\n     * @param minAmountOut Minimum amount of tokenOut willing to receive\\n     * @param hopDexAddress Address of the Hop dex to be used\\n     */\\n    function execute(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut, address hopDexAddress)\\n        external\\n        returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-connectors/contracts/interfaces/swap/IOneInchV5Connector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title 1inch V5 connector interface\\n */\\ninterface IOneInchV5Connector {\\n    /**\\n     * @dev The token in is the same as the token out\\n     */\\n    error OneInchV5SwapSameToken(address token);\\n\\n    /**\\n     * @dev The amount out is lower than the minimum amount out\\n     */\\n    error OneInchV5BadAmountOut(uint256 amountOut, uint256 minAmountOut);\\n\\n    /**\\n     * @dev The post token in balance is lower than the previous token in balance minus the amount in\\n     */\\n    error OneInchV5BadPostTokenInBalance(uint256 postBalanceIn, uint256 preBalanceIn, uint256 amountIn);\\n\\n    /**\\n     * @dev Tells the reference to 1inch aggregation router v5\\n     */\\n    function oneInchV5Router() external view returns (address);\\n\\n    /**\\n     * @dev Executes a token swap in 1Inch V5\\n     * @param tokenIn Token to be sent\\n     * @param tokenOut Token to be received\\n     * @param amountIn Amount of token in to be swapped\\n     * @param minAmountOut Minimum amount of token out willing to receive\\n     * @param data Calldata to be sent to the 1inch aggregation router\\n     */\\n    function execute(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut, bytes memory data)\\n        external\\n        returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-connectors/contracts/interfaces/swap/IParaswapV5Connector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Paraswap V5 connector interface\\n */\\ninterface IParaswapV5Connector {\\n    /**\\n     * @dev The token in is the same as the token out\\n     */\\n    error ParaswapV5SwapSameToken(address token);\\n\\n    /**\\n     * @dev The amount out is lower than the minimum amount out\\n     */\\n    error ParaswapV5BadAmountOut(uint256 amountOut, uint256 minAmountOut);\\n\\n    /**\\n     * @dev The post token in balance is lower than the previous token in balance minus the amount in\\n     */\\n    error ParaswapV5BadPostTokenInBalance(uint256 postBalanceIn, uint256 preBalanceIn, uint256 amountIn);\\n\\n    /**\\n     * @dev Tells the reference to Paraswap V5 Augustus swapper\\n     */\\n    function paraswapV5Augustus() external view returns (address);\\n\\n    /**\\n     * @dev Executes a token swap in Paraswap V5\\n     * @param tokenIn Token being sent\\n     * @param tokenOut Token being received\\n     * @param amountIn Amount of tokenIn being swapped\\n     * @param minAmountOut Minimum amount of tokenOut willing to receive\\n     * @param data Calldata to be sent to the Augusuts swapper\\n     */\\n    function execute(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut, bytes memory data)\\n        external\\n        returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-connectors/contracts/interfaces/swap/IUniswapV2Connector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Uniswap V2 connector interface\\n */\\ninterface IUniswapV2Connector {\\n    /**\\n     * @dev The token in is the same as the token out\\n     */\\n    error UniswapV2SwapSameToken(address token);\\n\\n    /**\\n     * @dev The pool does not exist\\n     */\\n    error UniswapV2InvalidPool(address tokenA, address tokenB);\\n\\n    /**\\n     * @dev The amount out is lower than the minimum amount out\\n     */\\n    error UniswapV2BadAmountOut(uint256 amountOut, uint256 minAmountOut);\\n\\n    /**\\n     * @dev The post token in balance is lower than the previous token in balance minus the amount in\\n     */\\n    error UniswapV2BadPostTokenInBalance(uint256 postBalanceIn, uint256 preBalanceIn, uint256 amountIn);\\n\\n    /**\\n     * @dev Tells the reference to UniswapV2 router\\n     */\\n    function uniswapV2Router() external view returns (address);\\n\\n    /**\\n     * @dev Executes a token swap in Uniswap V2\\n     * @param tokenIn Token being sent\\n     * @param tokenOut Token being received\\n     * @param amountIn Amount of tokenIn being swapped\\n     * @param minAmountOut Minimum amount of tokenOut willing to receive\\n     * @param hopTokens Optional list of hop-tokens between tokenIn and tokenOut, only used for multi-hops\\n     */\\n    function execute(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address[] memory hopTokens\\n    ) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-connectors/contracts/interfaces/swap/IUniswapV3Connector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Uniswap V3 connector interface\\n */\\ninterface IUniswapV3Connector {\\n    /**\\n     * @dev The input length mismatch\\n     */\\n    error UniswapV3InputLengthMismatch();\\n\\n    /**\\n     * @dev The token in is the same as the token out\\n     */\\n    error UniswapV3SwapSameToken(address token);\\n\\n    /**\\n     * @dev A pool with the given tokens and fee does not exist\\n     */\\n    error UniswapV3InvalidPoolFee(address token0, address token1, uint24 fee);\\n\\n    /**\\n     * @dev The amount out is lower than the minimum amount out\\n     */\\n    error UniswapV3BadAmountOut(uint256 amountOut, uint256 minAmountOut);\\n\\n    /**\\n     * @dev The post token in balance is lower than the previous token in balance minus the amount in\\n     */\\n    error UniswapV3BadPostTokenInBalance(uint256 postBalanceIn, uint256 preBalanceIn, uint256 amountIn);\\n\\n    /**\\n     * @dev Tells the reference to UniswapV3 router\\n     */\\n    function uniswapV3Router() external view returns (address);\\n\\n    /**\\n     * @dev Executes a token swap in Uniswap V3\\n     * @param tokenIn Token being sent\\n     * @param tokenOut Token being received\\n     * @param amountIn Amount of tokenIn being swapped\\n     * @param minAmountOut Minimum amount of tokenOut willing to receive\\n     * @param fee Fee to be used\\n     * @param hopTokens Optional list of hop-tokens between tokenIn and tokenOut, only used for multi-hops\\n     * @param hopFees Optional list of hop-fees between tokenIn and tokenOut, only used for multi-hops\\n     */\\n    function execute(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        uint24 fee,\\n        address[] memory hopTokens,\\n        uint24[] memory hopFees\\n    ) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-connectors/contracts/swap/hop/IHopL2Amm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\ninterface IHopL2Amm {\\n    function hToken() external view returns (address);\\n\\n    function exchangeAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title FixedPoint\\n * @dev Math library to operate with fixed point values with 18 decimals\\n */\\nlibrary FixedPoint {\\n    // 1 in fixed point value: 18 decimal places\\n    uint256 internal constant ONE = 1e18;\\n\\n    /**\\n     * @dev Multiplication overflow\\n     */\\n    error FixedPointMulOverflow(uint256 a, uint256 b);\\n\\n    /**\\n     * @dev Division by zero\\n     */\\n    error FixedPointZeroDivision();\\n\\n    /**\\n     * @dev Division internal error\\n     */\\n    error FixedPointDivInternal(uint256 a, uint256 aInflated);\\n\\n    /**\\n     * @dev Multiplies two fixed point numbers rounding down\\n     */\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 product = a * b;\\n            if (a != 0 && product / a != b) revert FixedPointMulOverflow(a, b);\\n            return product / ONE;\\n        }\\n    }\\n\\n    /**\\n     * @dev Multiplies two fixed point numbers rounding up\\n     */\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 product = a * b;\\n            if (a != 0 && product / a != b) revert FixedPointMulOverflow(a, b);\\n            return product == 0 ? 0 : (((product - 1) / ONE) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two fixed point numbers rounding down\\n     */\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            if (b == 0) revert FixedPointZeroDivision();\\n            if (a == 0) return 0;\\n            uint256 aInflated = a * ONE;\\n            if (aInflated / a != ONE) revert FixedPointDivInternal(a, aInflated);\\n            return aInflated / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two fixed point numbers rounding up\\n     */\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            if (b == 0) revert FixedPointZeroDivision();\\n            if (a == 0) return 0;\\n            uint256 aInflated = a * ONE;\\n            if (aInflated / a != ONE) revert FixedPointDivInternal(a, aInflated);\\n            return ((aInflated - 1) / b) + 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-helpers/contracts/mocks/TokenMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\ncontract TokenMock is ERC20 {\\n    uint8 internal _decimals;\\n\\n    constructor(string memory symbol, uint8 dec) ERC20(symbol, symbol) {\\n        _decimals = dec;\\n    }\\n\\n    function mint(address account, uint256 amount) external {\\n        _mint(account, amount);\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-helpers/contracts/utils/BytesHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title BytesHelpers\\n * @dev Provides a list of Bytes helper methods\\n */\\nlibrary BytesHelpers {\\n    /**\\n     * @dev The length is shorter than start plus 32\\n     */\\n    error BytesOutOfBounds(uint256 start, uint256 length);\\n\\n    /**\\n     * @dev Concatenates an address to a bytes array\\n     */\\n    function concat(bytes memory self, address value) internal pure returns (bytes memory) {\\n        return abi.encodePacked(self, value);\\n    }\\n\\n    /**\\n     * @dev Concatenates an uint24 to a bytes array\\n     */\\n    function concat(bytes memory self, uint24 value) internal pure returns (bytes memory) {\\n        return abi.encodePacked(self, value);\\n    }\\n\\n    /**\\n     * @dev Decodes a bytes array into an uint256\\n     */\\n    function toUint256(bytes memory self) internal pure returns (uint256) {\\n        return toUint256(self, 0);\\n    }\\n\\n    /**\\n     * @dev Reads an uint256 from a bytes array starting at a given position\\n     */\\n    function toUint256(bytes memory self, uint256 start) internal pure returns (uint256 result) {\\n        if (self.length < start + 32) revert BytesOutOfBounds(start, self.length);\\n        assembly {\\n            result := mload(add(add(self, 0x20), start))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-helpers/contracts/utils/Denominations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Denominations\\n * @dev Provides a list of ground denominations for those tokens that cannot be represented by an ERC20.\\n * For now, the only needed is the native token that could be ETH, MATIC, or other depending on the layer being operated.\\n */\\nlibrary Denominations {\\n    address internal constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n    address internal constant USD = address(840);\\n\\n    function isNativeToken(address token) internal pure returns (bool) {\\n        return token == NATIVE_TOKEN;\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-helpers/contracts/utils/ERC20Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './Denominations.sol';\\n\\n/**\\n * @title ERC20Helpers\\n * @dev Provides a list of ERC20 helper methods\\n */\\nlibrary ERC20Helpers {\\n    function approve(address token, address to, uint256 amount) internal {\\n        SafeERC20.safeApprove(IERC20(token), to, 0);\\n        SafeERC20.safeApprove(IERC20(token), to, amount);\\n    }\\n\\n    function transfer(address token, address to, uint256 amount) internal {\\n        if (Denominations.isNativeToken(token)) Address.sendValue(payable(to), amount);\\n        else SafeERC20.safeTransfer(IERC20(token), to, amount);\\n    }\\n\\n    function balanceOf(address token, address account) internal view returns (uint256) {\\n        if (Denominations.isNativeToken(token)) return address(account).balance;\\n        else return IERC20(token).balanceOf(address(account));\\n    }\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-price-oracle/contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '@mimic-fi/v3-authorizer/contracts/interfaces/IAuthorized.sol';\\n\\n/**\\n * @title IPriceOracle\\n * @dev Price oracle interface\\n *\\n * Tells the price of a token (base) in a given quote based the following rule: the response is expressed using the\\n * corresponding number of decimals so that when performing a fixed point product of it by a `base` amount it results\\n * in a value expressed in `quote` decimals. For example, if `base` is ETH and `quote` is USDC, then the returned\\n * value is expected to be expressed using 6 decimals:\\n *\\n * FixedPoint.mul(X[ETH], price[USDC/ETH]) = FixedPoint.mul(X[18], price[6]) = X * price [6]\\n */\\ninterface IPriceOracle is IAuthorized {\\n    /**\\n     * @dev Price data\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     * @param rate Price of a token (base) expressed in `quote`\\n     * @param deadline Expiration timestamp until when the given quote is considered valid\\n     */\\n    struct PriceData {\\n        address base;\\n        address quote;\\n        uint256 rate;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev The signer is not allowed\\n     */\\n    error PriceOracleInvalidSigner(address signer);\\n\\n    /**\\n     * @dev The feed for the given (base, quote) pair doesn't exist\\n     */\\n    error PriceOracleMissingFeed(address base, address quote);\\n\\n    /**\\n     * @dev The price deadline is in the past\\n     */\\n    error PriceOracleOutdatedPrice(address base, address quote, uint256 deadline, uint256 currentTimestamp);\\n\\n    /**\\n     * @dev The base decimals are bigger than the quote decimals plus the fixed point decimals\\n     */\\n    error PriceOracleBaseDecimalsTooBig(address base, uint256 baseDecimals, address quote, uint256 quoteDecimals);\\n\\n    /**\\n     * @dev The inverse feed decimals are bigger than the maximum inverse feed decimals\\n     */\\n    error PriceOracleInverseFeedDecimalsTooBig(address inverseFeed, uint256 inverseFeedDecimals);\\n\\n    /**\\n     * @dev The quote feed decimals are bigger than the base feed decimals plus the fixed point decimals\\n     */\\n    error PriceOracleQuoteFeedDecimalsTooBig(uint256 quoteFeedDecimals, uint256 baseFeedDecimals);\\n\\n    /**\\n     * @dev Emitted every time a signer is changed\\n     */\\n    event SignerSet(address indexed signer, bool allowed);\\n\\n    /**\\n     * @dev Emitted every time a feed is set for (base, quote) pair\\n     */\\n    event FeedSet(address indexed base, address indexed quote, address feed);\\n\\n    /**\\n     * @dev Tells whether an address is as an allowed signer or not\\n     * @param signer Address of the signer being queried\\n     */\\n    function isSignerAllowed(address signer) external view returns (bool);\\n\\n    /**\\n     * @dev Tells the list of allowed signers\\n     */\\n    function getAllowedSigners() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Tells the digest expected to be signed by the off-chain oracle signers for a list of prices\\n     * @param prices List of prices to be signed\\n     */\\n    function getPricesDigest(PriceData[] memory prices) external view returns (bytes32);\\n\\n    /**\\n     * @dev Tells the price of a token `base` expressed in a token `quote`\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     */\\n    function getPrice(address base, address quote) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the price of a token `base` expressed in a token `quote`\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     * @param data Encoded data to validate in order to compute the requested rate\\n     */\\n    function getPrice(address base, address quote, bytes memory data) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the feed address for (base, quote) pair. It returns the zero address if there is no one set.\\n     * @param base Token to be rated\\n     * @param quote Token used for the price rate\\n     */\\n    function getFeed(address base, address quote) external view returns (address);\\n\\n    /**\\n     * @dev Sets a signer condition\\n     * @param signer Address of the signer to be set\\n     * @param allowed Whether the requested signer is allowed\\n     */\\n    function setSigner(address signer, bool allowed) external;\\n\\n    /**\\n     * @dev Sets a feed for a (base, quote) pair\\n     * @param base Token base to be set\\n     * @param quote Token quote to be set\\n     * @param feed Feed to be set\\n     */\\n    function setFeed(address base, address quote, address feed) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-relayer/contracts/interfaces/IRelayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @dev Relayer interface\\n */\\ninterface IRelayer {\\n    /**\\n     * @dev The token is zero\\n     */\\n    error RelayerTokenZero();\\n\\n    /**\\n     * @dev The amount is zero\\n     */\\n    error RelayerAmountZero();\\n\\n    /**\\n     * @dev The collector is zero\\n     */\\n    error RelayerCollectorZero();\\n\\n    /**\\n     * @dev The recipient is zero\\n     */\\n    error RelayerRecipientZero();\\n\\n    /**\\n     * @dev The executor is zero\\n     */\\n    error RelayerExecutorZero();\\n\\n    /**\\n     * @dev Relayer no task given to execute\\n     */\\n    error RelayerNoTaskGiven();\\n\\n    /**\\n     * @dev Relayer input length mismatch\\n     */\\n    error RelayerInputLengthMismatch();\\n\\n    /**\\n     * @dev The sender is not allowed\\n     */\\n    error RelayerExecutorNotAllowed(address sender);\\n\\n    /**\\n     * @dev Trying to execute tasks from different smart vaults\\n     */\\n    error RelayerMultipleTaskSmartVaults(address task, address taskSmartVault, address expectedSmartVault);\\n\\n    /**\\n     * @dev The task to execute does not have permissions on the associated smart vault\\n     */\\n    error RelayerTaskDoesNotHavePermissions(address task, address smartVault);\\n\\n    /**\\n     * @dev The smart vault balance plus the available quota are lower than the amount to pay the relayer\\n     */\\n    error RelayerPaymentInsufficientBalance(address smartVault, uint256 balance, uint256 quota, uint256 amount);\\n\\n    /**\\n     * @dev It failed to send amount minus quota to the smart vault's collector\\n     */\\n    error RelayerPaymentFailed(address smartVault, uint256 amount, uint256 quota);\\n\\n    /**\\n     * @dev The smart vault balance is lower than the amount to withdraw\\n     */\\n    error RelayerWithdrawInsufficientBalance(address sender, uint256 balance, uint256 amount);\\n\\n    /**\\n     * @dev It failed to send the amount to the sender\\n     */\\n    error RelayerWithdrawFailed(address sender, uint256 amount);\\n\\n    /**\\n     * @dev The value sent and the amount differ\\n     */\\n    error RelayerValueDoesNotMatchAmount(uint256 value, uint256 amount);\\n\\n    /**\\n     * @dev The simulation executed properly\\n     */\\n    error RelayerSimulationResult(TaskResult[] taskResults);\\n\\n    /**\\n     * @dev Emitted every time an executor is configured\\n     */\\n    event ExecutorSet(address indexed executor, bool allowed);\\n\\n    /**\\n     * @dev Emitted every time the default collector is set\\n     */\\n    event DefaultCollectorSet(address indexed collector);\\n\\n    /**\\n     * @dev Emitted every time a collector is set for a smart vault\\n     */\\n    event SmartVaultCollectorSet(address indexed smartVault, address indexed collector);\\n\\n    /**\\n     * @dev Emitted every time a smart vault's maximum quota is set\\n     */\\n    event SmartVaultMaxQuotaSet(address indexed smartVault, uint256 maxQuota);\\n\\n    /**\\n     * @dev Emitted every time a smart vault's task is executed\\n     */\\n    event TaskExecuted(\\n        address indexed smartVault,\\n        address indexed task,\\n        bytes data,\\n        bool success,\\n        bytes result,\\n        uint256 gas,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @dev Emitted every time some native tokens are deposited for the smart vault's balance\\n     */\\n    event Deposited(address indexed smartVault, uint256 amount);\\n\\n    /**\\n     * @dev Emitted every time some native tokens are withdrawn from the smart vault's balance\\n     */\\n    event Withdrawn(address indexed smartVault, uint256 amount);\\n\\n    /**\\n     * @dev Emitted every time some ERC20 tokens are withdrawn from the relayer to an external account\\n     */\\n    event FundsRescued(address indexed token, address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @dev Emitted every time a smart vault's quota is paid\\n     */\\n    event QuotaPaid(address indexed smartVault, uint256 amount);\\n\\n    /**\\n     * @dev Emitted every time a smart vault pays for transaction gas to the relayer\\n     */\\n    event GasPaid(address indexed smartVault, uint256 amount, uint256 quota);\\n\\n    /**\\n     * @dev Task result\\n     * @param success Whether the task execution succeeds or not\\n     * @param result Result of the task execution\\n     */\\n    struct TaskResult {\\n        bool success;\\n        bytes result;\\n    }\\n\\n    /**\\n     * @dev Tells the default collector address\\n     */\\n    function defaultCollector() external view returns (address);\\n\\n    /**\\n     * @dev Tells whether an executor is allowed\\n     * @param executor Address of the executor being queried\\n     */\\n    function isExecutorAllowed(address executor) external view returns (bool);\\n\\n    /**\\n     * @dev Tells the smart vault available balance to relay transactions\\n     * @param smartVault Address of the smart vault being queried\\n     */\\n    function getSmartVaultBalance(address smartVault) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the custom collector address set for a smart vault\\n     * @param smartVault Address of the smart vault being queried\\n     */\\n    function getSmartVaultCollector(address smartVault) external view returns (address);\\n\\n    /**\\n     * @dev Tells the smart vault maximum quota to be used\\n     * @param smartVault Address of the smart vault being queried\\n     */\\n    function getSmartVaultMaxQuota(address smartVault) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the smart vault used quota\\n     * @param smartVault Address of the smart vault being queried\\n     */\\n    function getSmartVaultUsedQuota(address smartVault) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the collector address applicable for a smart vault\\n     * @param smartVault Address of the smart vault being queried\\n     */\\n    function getApplicableCollector(address smartVault) external view returns (address);\\n\\n    /**\\n     * @dev Configures an external executor\\n     * @param executor Address of the executor to be set\\n     * @param allowed Whether the given executor should be allowed or not\\n     */\\n    function setExecutor(address executor, bool allowed) external;\\n\\n    /**\\n     * @dev Sets the default collector\\n     * @param collector Address of the new default collector to be set\\n     */\\n    function setDefaultCollector(address collector) external;\\n\\n    /**\\n     * @dev Sets a custom collector for a smart vault\\n     * @param smartVault Address of smart vault to set a collector for\\n     * @param collector Address of the collector to be set for the given smart vault\\n     */\\n    function setSmartVaultCollector(address smartVault, address collector) external;\\n\\n    /**\\n     * @dev Sets a maximum quota for a smart vault\\n     * @param smartVault Address of smart vault to set a maximum quota for\\n     * @param maxQuota Maximum quota to be set for the given smart vault\\n     */\\n    function setSmartVaultMaxQuota(address smartVault, uint256 maxQuota) external;\\n\\n    /**\\n     * @dev Deposits native tokens for a given smart vault\\n     * @param smartVault Address of smart vault to deposit balance for\\n     * @param amount Amount of native tokens to be deposited, must match msg.value\\n     */\\n    function deposit(address smartVault, uint256 amount) external payable;\\n\\n    /**\\n     * @dev Withdraws native tokens from a given smart vault\\n     * @param amount Amount of native tokens to be withdrawn\\n     */\\n    function withdraw(uint256 amount) external;\\n\\n    /**\\n     * @dev Executes a list of tasks\\n     * @param tasks Addresses of the tasks to execute\\n     * @param data List of calldata to execute each of the given tasks\\n     * @param continueIfFailed Whether the execution should fail in case one of the tasks fail\\n     */\\n    function execute(address[] memory tasks, bytes[] memory data, bool continueIfFailed) external;\\n\\n    /**\\n     * @dev Simulates an execution.\\n     * WARNING: THIS METHOD IS MEANT TO BE USED AS A VIEW FUNCTION\\n     * This method will always revert. Successful results or task execution errors are returned as\\n     * `RelayerSimulationResult` errors. Any other error should be treated as failure.\\n     * @param tasks Addresses of the tasks to simulate the execution of\\n     * @param data List of calldata to simulate each of the given tasks execution\\n     * @param continueIfFailed Whether the simulation should fail in case one of the tasks execution fails\\n     */\\n    function simulate(address[] memory tasks, bytes[] memory data, bool continueIfFailed) external;\\n\\n    /**\\n     * @dev Withdraw ERC20 tokens to an external account. To be used in case of accidental token transfers.\\n     * @param token Address of the token to be withdrawn\\n     * @param recipient Address where the tokens will be transferred to\\n     * @param amount Amount of tokens to withdraw\\n     */\\n    function rescueFunds(address token, address recipient, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@mimic-fi/v3-smart-vault/contracts/interfaces/ISmartVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '@mimic-fi/v3-authorizer/contracts/interfaces/IAuthorized.sol';\\n\\n/**\\n * @dev Smart Vault interface\\n */\\ninterface ISmartVault is IAuthorized {\\n    /**\\n     * @dev The smart vault is paused\\n     */\\n    error SmartVaultPaused();\\n\\n    /**\\n     * @dev The smart vault is unpaused\\n     */\\n    error SmartVaultUnpaused();\\n\\n    /**\\n     * @dev The token is zero\\n     */\\n    error SmartVaultTokenZero();\\n\\n    /**\\n     * @dev The amount is zero\\n     */\\n    error SmartVaultAmountZero();\\n\\n    /**\\n     * @dev The recipient is zero\\n     */\\n    error SmartVaultRecipientZero();\\n\\n    /**\\n     * @dev The connector is deprecated\\n     */\\n    error SmartVaultConnectorDeprecated(address connector);\\n\\n    /**\\n     * @dev The connector is not registered\\n     */\\n    error SmartVaultConnectorNotRegistered(address connector);\\n\\n    /**\\n     * @dev The connector is not stateless\\n     */\\n    error SmartVaultConnectorNotStateless(address connector);\\n\\n    /**\\n     * @dev The connector ID is zero\\n     */\\n    error SmartVaultBalanceConnectorIdZero();\\n\\n    /**\\n     * @dev The balance connector's balance is lower than the requested amount to be deducted\\n     */\\n    error SmartVaultBalanceConnectorInsufficientBalance(bytes32 id, address token, uint256 balance, uint256 amount);\\n\\n    /**\\n     * @dev The smart vault's native token balance is lower than the requested amount to be deducted\\n     */\\n    error SmartVaultInsufficientNativeTokenBalance(uint256 balance, uint256 amount);\\n\\n    /**\\n     * @dev Emitted every time a smart vault is paused\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted every time a smart vault is unpaused\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted every time the price oracle is set\\n     */\\n    event PriceOracleSet(address indexed priceOracle);\\n\\n    /**\\n     * @dev Emitted every time a connector check is overridden\\n     */\\n    event ConnectorCheckOverridden(address indexed connector, bool ignored);\\n\\n    /**\\n     * @dev Emitted every time a balance connector is updated\\n     */\\n    event BalanceConnectorUpdated(bytes32 indexed id, address indexed token, uint256 amount, bool added);\\n\\n    /**\\n     * @dev Emitted every time `execute` is called\\n     */\\n    event Executed(address indexed connector, bytes data, bytes result);\\n\\n    /**\\n     * @dev Emitted every time `call` is called\\n     */\\n    event Called(address indexed target, bytes data, uint256 value, bytes result);\\n\\n    /**\\n     * @dev Emitted every time `wrap` is called\\n     */\\n    event Wrapped(uint256 amount);\\n\\n    /**\\n     * @dev Emitted every time `unwrap` is called\\n     */\\n    event Unwrapped(uint256 amount);\\n\\n    /**\\n     * @dev Emitted every time `collect` is called\\n     */\\n    event Collected(address indexed token, address indexed from, uint256 amount);\\n\\n    /**\\n     * @dev Emitted every time `withdraw` is called\\n     */\\n    event Withdrawn(address indexed token, address indexed recipient, uint256 amount, uint256 fee);\\n\\n    /**\\n     * @dev Tells if the smart vault is paused or not\\n     */\\n    function isPaused() external view returns (bool);\\n\\n    /**\\n     * @dev Tells the address of the price oracle\\n     */\\n    function priceOracle() external view returns (address);\\n\\n    /**\\n     * @dev Tells the address of the Mimic's registry\\n     */\\n    function registry() external view returns (address);\\n\\n    /**\\n     * @dev Tells the address of the Mimic's fee controller\\n     */\\n    function feeController() external view returns (address);\\n\\n    /**\\n     * @dev Tells the address of the wrapped native token\\n     */\\n    function wrappedNativeToken() external view returns (address);\\n\\n    /**\\n     * @dev Tells if a connector check is ignored\\n     * @param connector Address of the connector being queried\\n     */\\n    function isConnectorCheckIgnored(address connector) external view returns (bool);\\n\\n    /**\\n     * @dev Tells the balance to a balance connector for a token\\n     * @param id Balance connector identifier\\n     * @param token Address of the token querying the balance connector for\\n     */\\n    function getBalanceConnector(bytes32 id, address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells whether someone has any permission over the smart vault\\n     */\\n    function hasPermissions(address who) external view returns (bool);\\n\\n    /**\\n     * @dev Pauses a smart vault\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses a smart vault\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @dev Sets the price oracle\\n     * @param newPriceOracle Address of the new price oracle to be set\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @dev Overrides connector checks\\n     * @param connector Address of the connector to override its check\\n     * @param ignored Whether the connector check should be ignored\\n     */\\n    function overrideConnectorCheck(address connector, bool ignored) external;\\n\\n    /**\\n     * @dev Updates a balance connector\\n     * @param id Balance connector identifier to be updated\\n     * @param token Address of the token to update the balance connector for\\n     * @param amount Amount to be updated to the balance connector\\n     * @param add Whether the balance connector should be increased or decreased\\n     */\\n    function updateBalanceConnector(bytes32 id, address token, uint256 amount, bool add) external;\\n\\n    /**\\n     * @dev Executes a connector inside of the Smart Vault context\\n     * @param connector Address of the connector that will be executed\\n     * @param data Call data to be used for the delegate-call\\n     * @return result Call response if it was successful, otherwise it reverts\\n     */\\n    function execute(address connector, bytes memory data) external returns (bytes memory result);\\n\\n    /**\\n     * @dev Executes an arbitrary call from the Smart Vault\\n     * @param target Address where the call will be sent\\n     * @param data Call data to be used for the call\\n     * @param value Value in wei that will be attached to the call\\n     * @return result Call response if it was successful, otherwise it reverts\\n     */\\n    function call(address target, bytes memory data, uint256 value) external returns (bytes memory result);\\n\\n    /**\\n     * @dev Wrap an amount of native tokens to the wrapped ERC20 version of it\\n     * @param amount Amount of native tokens to be wrapped\\n     */\\n    function wrap(uint256 amount) external;\\n\\n    /**\\n     * @dev Unwrap an amount of wrapped native tokens\\n     * @param amount Amount of wrapped native tokens to unwrapped\\n     */\\n    function unwrap(uint256 amount) external;\\n\\n    /**\\n     * @dev Collect tokens from an external account to the Smart Vault\\n     * @param token Address of the token to be collected\\n     * @param from Address where the tokens will be transferred from\\n     * @param amount Amount of tokens to be transferred\\n     */\\n    function collect(address token, address from, uint256 amount) external;\\n\\n    /**\\n     * @dev Withdraw tokens to an external account\\n     * @param token Address of the token to be withdrawn\\n     * @param recipient Address where the tokens will be transferred to\\n     * @param amount Amount of tokens to withdraw\\n     */\\n    function withdraw(address token, address recipient, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@quant-finance/solidity-datetime/contracts/DateTime.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// ----------------------------------------------------------------------------\\n// DateTime Library v2.0\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day - 32075 + (1461 * (_year + 4800 + (_month - 14) / 12)) / 4\\n            + (367 * (_month - 2 - ((_month - 14) / 12) * 12)) / 12\\n            - (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) / 4 - OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days) internal pure returns (uint256 year, uint256 month, uint256 day) {\\n        unchecked {\\n            int256 __days = int256(_days);\\n\\n            int256 L = __days + 68569 + OFFSET19700101;\\n            int256 N = (4 * L) / 146097;\\n            L = L - (146097 * N + 3) / 4;\\n            int256 _year = (4000 * (L + 1)) / 1461001;\\n            L = L - (1461 * _year) / 4 + 31;\\n            int256 _month = (80 * L) / 2447;\\n            int256 _day = L - (2447 * _month) / 80;\\n            L = _month / 11;\\n            _month = _month + 2 - 12 * L;\\n            _year = 100 * (N - 49) + _year + L;\\n\\n            year = uint256(_year);\\n            month = uint256(_month);\\n            day = uint256(_day);\\n        }\\n    }\\n\\n    function timestampFromDate(uint256 year, uint256 month, uint256 day) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    )\\n        internal\\n        pure\\n        returns (uint256 timestamp)\\n    {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR\\n            + minute * SECONDS_PER_MINUTE + second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp) internal pure returns (uint256 year, uint256 month, uint256 day) {\\n        unchecked {\\n            (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        }\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second)\\n    {\\n        unchecked {\\n            (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n            uint256 secs = timestamp % SECONDS_PER_DAY;\\n            hour = secs / SECONDS_PER_HOUR;\\n            secs = secs % SECONDS_PER_HOUR;\\n            minute = secs / SECONDS_PER_MINUTE;\\n            second = secs % SECONDS_PER_MINUTE;\\n        }\\n    }\\n\\n    function isValidDate(uint256 year, uint256 month, uint256 day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint256 daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isValidDateTime(uint256 year, uint256 month, uint256 day, uint256 hour, uint256 minute, uint256 second)\\n        internal\\n        pure\\n        returns (bool valid)\\n    {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isLeapYear(uint256 timestamp) internal pure returns (bool leapYear) {\\n        (uint256 year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp) internal pure returns (uint256 daysInMonth) {\\n        (uint256 year, uint256 month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month) internal pure returns (uint256 daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (,, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years) internal pure returns (uint256 newTimestamp) {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months) internal pure returns (uint256 newTimestamp) {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint256 timestamp, uint256 _years) internal pure returns (uint256 newTimestamp) {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMonths(uint256 timestamp, uint256 _months) internal pure returns (uint256 newTimestamp) {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = (yearMonth % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subDays(uint256 timestamp, uint256 _days) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subHours(uint256 timestamp, uint256 _hours) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMinutes(uint256 timestamp, uint256 _minutes) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subSeconds(uint256 timestamp, uint256 _seconds) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n\\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, uint256 fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, uint256 toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n\\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n\\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n\\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n\\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp) internal pure returns (uint256 _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-authorizer/contracts/Authorized.sol';\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-helpers/contracts/utils/Denominations.sol';\\nimport '@mimic-fi/v3-price-oracle/contracts/interfaces/IPriceOracle.sol';\\nimport '@mimic-fi/v3-smart-vault/contracts/interfaces/ISmartVault.sol';\\n\\nimport '../interfaces/base/IBaseTask.sol';\\n\\n/**\\n * @title BaseTask\\n * @dev Base task implementation with a Smart Vault reference and using the Authorizer\\n */\\nabstract contract BaseTask is IBaseTask, Authorized {\\n    // Smart Vault reference\\n    address public override smartVault;\\n\\n    // Optional balance connector id for the previous task in the workflow\\n    bytes32 internal previousBalanceConnectorId;\\n\\n    // Optional balance connector id for the next task in the workflow\\n    bytes32 internal nextBalanceConnectorId;\\n\\n    /**\\n     * @dev Base task config. Only used in the initializer.\\n     * @param smartVault Address of the smart vault this task will reference, it cannot be changed once set\\n     * @param previousBalanceConnectorId Balance connector id for the previous task in the workflow\\n     * @param nextBalanceConnectorId Balance connector id for the next task in the workflow\\n     */\\n    struct BaseConfig {\\n        address smartVault;\\n        bytes32 previousBalanceConnectorId;\\n        bytes32 nextBalanceConnectorId;\\n    }\\n\\n    /**\\n     * @dev Initializes the base task. It does call upper contracts initializers.\\n     * @param config Base task config\\n     */\\n    function __BaseTask_init(BaseConfig memory config) internal onlyInitializing {\\n        __Authorized_init(ISmartVault(config.smartVault).authorizer());\\n        __BaseTask_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the base task. It does not call upper contracts initializers.\\n     * @param config Base task config\\n     */\\n    function __BaseTask_init_unchained(BaseConfig memory config) internal onlyInitializing {\\n        smartVault = config.smartVault;\\n        _setBalanceConnectors(config.previousBalanceConnectorId, config.nextBalanceConnectorId);\\n    }\\n\\n    /**\\n     * @dev Tells the address from where the token amounts to execute this task are fetched.\\n     * Since by default tasks are supposed to use balance connectors, the tokens source has to be the smart vault.\\n     * In case a task does not need to rely on a previous balance connector, it must override this function to specify\\n     * where it is getting its tokens from.\\n     */\\n    function getTokensSource() external view virtual override returns (address) {\\n        return smartVault;\\n    }\\n\\n    /**\\n     * @dev Tells the amount a task should use for a token. By default tasks are expected to use balance connectors.\\n     * In case a task relies on an external tokens source, it must override how the task amount is calculated.\\n     * @param token Address of the token being queried\\n     */\\n    function getTaskAmount(address token) public view virtual override returns (uint256) {\\n        return ISmartVault(smartVault).getBalanceConnector(previousBalanceConnectorId, token);\\n    }\\n\\n    /**\\n     * @dev Tells the previous and next balance connectors id of the previous task in the workflow\\n     */\\n    function getBalanceConnectors() external view returns (bytes32 previous, bytes32 next) {\\n        previous = previousBalanceConnectorId;\\n        next = nextBalanceConnectorId;\\n    }\\n\\n    /**\\n     * @dev Sets the balance connectors\\n     * @param previous Balance connector id of the previous task in the workflow\\n     * @param next Balance connector id of the next task in the workflow\\n     */\\n    function setBalanceConnectors(bytes32 previous, bytes32 next) external override authP(authParams(previous, next)) {\\n        _setBalanceConnectors(previous, next);\\n    }\\n\\n    /**\\n     * @dev Tells the wrapped native token address if the given address is the native token\\n     * @param token Address of the token to be checked\\n     */\\n    function _wrappedIfNative(address token) internal view returns (address) {\\n        return Denominations.isNativeToken(token) ? _wrappedNativeToken() : token;\\n    }\\n\\n    /**\\n     * @dev Tells whether a token is the native or the wrapped native token\\n     * @param token Address of the token to be checked\\n     */\\n    function _isWrappedOrNative(address token) internal view returns (bool) {\\n        return Denominations.isNativeToken(token) || token == _wrappedNativeToken();\\n    }\\n\\n    /**\\n     * @dev Tells the wrapped native token address\\n     */\\n    function _wrappedNativeToken() internal view returns (address) {\\n        return ISmartVault(smartVault).wrappedNativeToken();\\n    }\\n\\n    /**\\n     * @dev Fetches a base/quote price from the smart vault's price oracle\\n     * @param base Token to rate\\n     * @param quote Token used for the price rate\\n     */\\n    function _getPrice(address base, address quote) internal view virtual returns (uint256) {\\n        address priceOracle = ISmartVault(smartVault).priceOracle();\\n        if (priceOracle == address(0)) revert TaskSmartVaultPriceOracleNotSet(smartVault);\\n        bytes memory extraCallData = _decodeExtraCallData();\\n        return\\n            extraCallData.length == 0\\n                ? IPriceOracle(priceOracle).getPrice(_wrappedIfNative(base), _wrappedIfNative(quote))\\n                : IPriceOracle(priceOracle).getPrice(_wrappedIfNative(base), _wrappedIfNative(quote), extraCallData);\\n    }\\n\\n    /**\\n     * @dev Before base task hook\\n     */\\n    function _beforeBaseTask(address token, uint256 amount) internal virtual {\\n        _decreaseBalanceConnector(token, amount);\\n    }\\n\\n    /**\\n     * @dev After base task hook\\n     */\\n    function _afterBaseTask(address, uint256) internal virtual {\\n        emit Executed();\\n    }\\n\\n    /**\\n     * @dev Decreases the previous balance connector in the smart vault if defined\\n     * @param token Address of the token to update the previous balance connector of\\n     * @param amount Amount to be updated\\n     */\\n    function _decreaseBalanceConnector(address token, uint256 amount) internal {\\n        if (previousBalanceConnectorId != bytes32(0)) {\\n            ISmartVault(smartVault).updateBalanceConnector(previousBalanceConnectorId, token, amount, false);\\n        }\\n    }\\n\\n    /**\\n     * @dev Increases the next balance connector in the smart vault if defined\\n     * @param token Address of the token to update the next balance connector of\\n     * @param amount Amount to be updated\\n     */\\n    function _increaseBalanceConnector(address token, uint256 amount) internal {\\n        if (nextBalanceConnectorId != bytes32(0)) {\\n            ISmartVault(smartVault).updateBalanceConnector(nextBalanceConnectorId, token, amount, true);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the balance connectors\\n     * @param previous Balance connector id of the previous task in the workflow\\n     * @param next Balance connector id of the next task in the workflow\\n     */\\n    function _setBalanceConnectors(bytes32 previous, bytes32 next) internal virtual {\\n        if (previous == next && previous != bytes32(0)) revert TaskSameBalanceConnectors(previous);\\n        previousBalanceConnectorId = previous;\\n        nextBalanceConnectorId = next;\\n        emit BalanceConnectorsSet(previous, next);\\n    }\\n\\n    /**\\n     * @dev Decodes any potential extra calldata stored in the calldata space. Tasks relying on the extra calldata\\n     * pattern, assume that the last word of the calldata stores the extra calldata length so it can be decoded. Note\\n     * that tasks relying on this pattern must contemplate this function may return bogus data if no extra calldata\\n     * was given.\\n     */\\n    function _decodeExtraCallData() private pure returns (bytes memory data) {\\n        uint256 length = uint256(_decodeLastCallDataWord());\\n        if (msg.data.length < length) return new bytes(0);\\n        data = new bytes(length);\\n        assembly {\\n            calldatacopy(add(data, 0x20), sub(sub(calldatasize(), length), 0x20), length)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the last calldata word. This function returns zero if the calldata is not long enough.\\n     */\\n    function _decodeLastCallDataWord() private pure returns (bytes32 result) {\\n        if (msg.data.length < 36) return bytes32(0);\\n        assembly {\\n            result := calldataload(sub(calldatasize(), 0x20))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/GasLimitedTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.17;\\n\\nimport '@mimic-fi/v3-authorizer/contracts/Authorized.sol';\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-smart-vault/contracts/interfaces/ISmartVault.sol';\\n\\nimport '../interfaces/base/IGasLimitedTask.sol';\\n\\n/**\\n * @dev Gas config for tasks. It allows setting different gas-related configs, specially useful to control relayed txs.\\n */\\nabstract contract GasLimitedTask is IGasLimitedTask, Authorized {\\n    using FixedPoint for uint256;\\n\\n    // Variable used to allow a better developer experience to reimburse tx gas cost\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private __initialGas__;\\n\\n    // Gas limits config\\n    GasLimitConfig internal gasLimits;\\n\\n    /**\\n     * @dev Gas limits config\\n     * @param gasPriceLimit Gas price limit expressed in the native token\\n     * @param priorityFeeLimit Priority fee limit expressed in the native token\\n     * @param txCostLimit Transaction cost limit to be set\\n     * @param txCostLimitPct Transaction cost limit percentage to be set\\n     */\\n    struct GasLimitConfig {\\n        uint256 gasPriceLimit;\\n        uint256 priorityFeeLimit;\\n        uint256 txCostLimit;\\n        uint256 txCostLimitPct;\\n    }\\n\\n    /**\\n     * @dev Initializes the gas limited task. It does call upper contracts initializers.\\n     * @param config Gas limited task config\\n     */\\n    function __GasLimitedTask_init(GasLimitConfig memory config) internal onlyInitializing {\\n        __GasLimitedTask_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the gas limited task. It does not call upper contracts initializers.\\n     * @param config Gas limited task config\\n     */\\n    function __GasLimitedTask_init_unchained(GasLimitConfig memory config) internal onlyInitializing {\\n        _setGasLimits(config.gasPriceLimit, config.priorityFeeLimit, config.txCostLimit, config.txCostLimitPct);\\n    }\\n\\n    /**\\n     * @dev Tells the gas limits config\\n     */\\n    function getGasLimits()\\n        external\\n        view\\n        returns (uint256 gasPriceLimit, uint256 priorityFeeLimit, uint256 txCostLimit, uint256 txCostLimitPct)\\n    {\\n        return (gasLimits.gasPriceLimit, gasLimits.priorityFeeLimit, gasLimits.txCostLimit, gasLimits.txCostLimitPct);\\n    }\\n\\n    /**\\n     * @dev Sets the gas limits config\\n     * @param newGasPriceLimit New gas price limit to be set\\n     * @param newPriorityFeeLimit New priority fee limit to be set\\n     * @param newTxCostLimit New tx cost limit to be set\\n     * @param newTxCostLimitPct New tx cost percentage limit to be set\\n     */\\n    function setGasLimits(\\n        uint256 newGasPriceLimit,\\n        uint256 newPriorityFeeLimit,\\n        uint256 newTxCostLimit,\\n        uint256 newTxCostLimitPct\\n    ) external override authP(authParams(newGasPriceLimit, newPriorityFeeLimit, newTxCostLimit, newTxCostLimitPct)) {\\n        _setGasLimits(newGasPriceLimit, newPriorityFeeLimit, newTxCostLimit, newTxCostLimitPct);\\n    }\\n\\n    /**\\n     * @dev Fetches a base/quote price\\n     */\\n    function _getPrice(address base, address quote) internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Initializes gas limited tasks and validates gas price limit\\n     */\\n    function _beforeGasLimitedTask(address, uint256) internal virtual {\\n        __initialGas__ = gasleft();\\n        GasLimitConfig memory config = gasLimits;\\n        bool isGasPriceAllowed = config.gasPriceLimit == 0 || tx.gasprice <= config.gasPriceLimit;\\n        if (!isGasPriceAllowed) revert TaskGasPriceLimitExceeded(tx.gasprice, config.gasPriceLimit);\\n\\n        uint256 priorityFee = tx.gasprice - block.basefee;\\n        bool isPriorityFeeAllowed = config.priorityFeeLimit == 0 || priorityFee <= config.priorityFeeLimit;\\n        if (!isPriorityFeeAllowed) revert TaskPriorityFeeLimitExceeded(priorityFee, config.priorityFeeLimit);\\n    }\\n\\n    /**\\n     * @dev Validates transaction cost limit\\n     */\\n    function _afterGasLimitedTask(address token, uint256 amount) internal virtual {\\n        if (__initialGas__ == 0) revert TaskGasNotInitialized();\\n\\n        GasLimitConfig memory config = gasLimits;\\n        uint256 totalGas = __initialGas__ - gasleft();\\n        uint256 totalCost = totalGas * tx.gasprice;\\n        bool isTxCostAllowed = config.txCostLimit == 0 || totalCost <= config.txCostLimit;\\n        if (!isTxCostAllowed) revert TaskTxCostLimitExceeded(totalCost, config.txCostLimit);\\n        delete __initialGas__;\\n\\n        if (config.txCostLimitPct > 0 && amount > 0) {\\n            uint256 price = _getPrice(ISmartVault(this.smartVault()).wrappedNativeToken(), token);\\n            uint256 totalCostInToken = totalCost.mulUp(price);\\n            uint256 txCostPct = totalCostInToken.divUp(amount);\\n            if (txCostPct > config.txCostLimitPct) revert TaskTxCostLimitPctExceeded(txCostPct, config.txCostLimitPct);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the gas limits config\\n     * @param newGasPriceLimit New gas price limit to be set\\n     * @param newPriorityFeeLimit New priority fee limit to be set\\n     * @param newTxCostLimit New tx cost limit to be set\\n     * @param newTxCostLimitPct New tx cost percentage limit to be set\\n     */\\n    function _setGasLimits(\\n        uint256 newGasPriceLimit,\\n        uint256 newPriorityFeeLimit,\\n        uint256 newTxCostLimit,\\n        uint256 newTxCostLimitPct\\n    ) internal {\\n        if (newTxCostLimitPct > FixedPoint.ONE) revert TaskTxCostLimitPctAboveOne();\\n\\n        gasLimits.gasPriceLimit = newGasPriceLimit;\\n        gasLimits.priorityFeeLimit = newPriorityFeeLimit;\\n        gasLimits.txCostLimit = newTxCostLimit;\\n        gasLimits.txCostLimitPct = newTxCostLimitPct;\\n        emit GasLimitsSet(newGasPriceLimit, newPriorityFeeLimit, newTxCostLimit, newTxCostLimitPct);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/PausableTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.17;\\n\\nimport '@mimic-fi/v3-authorizer/contracts/Authorized.sol';\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\n\\nimport '../interfaces/base/IPausableTask.sol';\\n\\n/**\\n * @dev Pausable config for tasks\\n */\\nabstract contract PausableTask is IPausableTask, Authorized {\\n    using FixedPoint for uint256;\\n\\n    // Whether the task is paused or not\\n    bool public override isPaused;\\n\\n    /**\\n     * @dev Initializes the pausable task. It does call upper contracts initializers.\\n     */\\n    function __PausableTask_init() internal onlyInitializing {\\n        __PausableTask_init_unchained();\\n    }\\n\\n    /**\\n     * @dev Initializes the pausable task. It does not call upper contracts initializers.\\n     */\\n    function __PausableTask_init_unchained() internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Pauses a task\\n     */\\n    function pause() external override auth {\\n        if (isPaused) revert TaskPaused();\\n        isPaused = true;\\n        emit Paused();\\n    }\\n\\n    /**\\n     * @dev Unpauses a task\\n     */\\n    function unpause() external override auth {\\n        if (!isPaused) revert TaskUnpaused();\\n        isPaused = false;\\n        emit Unpaused();\\n    }\\n\\n    /**\\n     * @dev Before pausable task hook\\n     */\\n    function _beforePausableTask(address, uint256) internal virtual {\\n        if (isPaused) revert TaskPaused();\\n    }\\n\\n    /**\\n     * @dev After pausable task hook\\n     */\\n    function _afterPausableTask(address, uint256) internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/TimeLockedTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.3;\\n\\nimport '@quant-finance/solidity-datetime/contracts/DateTime.sol';\\nimport '@mimic-fi/v3-authorizer/contracts/Authorized.sol';\\n\\nimport '../interfaces/base/ITimeLockedTask.sol';\\n\\n/**\\n * @dev Time lock config for tasks. It allows limiting the frequency of a task.\\n */\\nabstract contract TimeLockedTask is ITimeLockedTask, Authorized {\\n    using DateTime for uint256;\\n\\n    uint256 private constant DAYS_28 = 60 * 60 * 24 * 28;\\n\\n    /**\\n     * @dev Time-locks supports different frequency modes\\n     * @param Seconds To indicate the execution must occur every certain number of seconds\\n     * @param OnDay To indicate the execution must occur on day number from 1 to 28 every certain months\\n     * @param OnLastMonthDay To indicate the execution must occur on the last day of the month every certain months\\n     */\\n    enum Mode {\\n        Seconds,\\n        OnDay,\\n        OnLastMonthDay\\n    }\\n\\n    // Time lock mode\\n    Mode internal _mode;\\n\\n    // Time lock frequency\\n    uint256 internal _frequency;\\n\\n    // Future timestamp since when the task can be executed\\n    uint256 internal _allowedAt;\\n\\n    // Next future timestamp since when the task can be executed to be set, only used internally\\n    uint256 internal _nextAllowedAt;\\n\\n    // Period in seconds during when a time-locked task can be executed since the allowed timestamp\\n    uint256 internal _window;\\n\\n    /**\\n     * @dev Time lock config params. Only used in the initializer.\\n     * @param mode Time lock mode\\n     * @param frequency Time lock frequency value\\n     * @param allowedAt Time lock allowed date\\n     * @param window Time lock execution window\\n     */\\n    struct TimeLockConfig {\\n        uint8 mode;\\n        uint256 frequency;\\n        uint256 allowedAt;\\n        uint256 window;\\n    }\\n\\n    /**\\n     * @dev Initializes the time locked task. It does not call upper contracts initializers.\\n     * @param config Time locked task config\\n     */\\n    function __TimeLockedTask_init(TimeLockConfig memory config) internal onlyInitializing {\\n        __TimeLockedTask_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the time locked task. It does call upper contracts initializers.\\n     * @param config Time locked task config\\n     */\\n    function __TimeLockedTask_init_unchained(TimeLockConfig memory config) internal onlyInitializing {\\n        _setTimeLock(config.mode, config.frequency, config.allowedAt, config.window);\\n    }\\n\\n    /**\\n     * @dev Tells the time-lock related information\\n     */\\n    function getTimeLock() external view returns (uint8 mode, uint256 frequency, uint256 allowedAt, uint256 window) {\\n        return (uint8(_mode), _frequency, _allowedAt, _window);\\n    }\\n\\n    /**\\n     * @dev Sets a new time lock\\n     */\\n    function setTimeLock(uint8 mode, uint256 frequency, uint256 allowedAt, uint256 window)\\n        external\\n        override\\n        authP(authParams(mode, frequency, allowedAt, window))\\n    {\\n        _setTimeLock(mode, frequency, allowedAt, window);\\n    }\\n\\n    /**\\n     * @dev Before time locked task hook\\n     */\\n    function _beforeTimeLockedTask(address, uint256) internal virtual {\\n        // Load storage variables\\n        Mode mode = _mode;\\n        uint256 frequency = _frequency;\\n        uint256 allowedAt = _allowedAt;\\n        uint256 window = _window;\\n\\n        // First we check the current timestamp is not in the past\\n        if (block.timestamp < allowedAt) revert TaskTimeLockActive(block.timestamp, allowedAt);\\n\\n        if (mode == Mode.Seconds) {\\n            if (frequency == 0) return;\\n\\n            // If no window is set, the next allowed date is simply moved the number of seconds set as frequency.\\n            // Otherwise, the offset must be validated and the next allowed date is set to the next period.\\n            if (window == 0) _nextAllowedAt = block.timestamp + frequency;\\n            else {\\n                uint256 diff = block.timestamp - allowedAt;\\n                uint256 periods = diff / frequency;\\n                uint256 offset = diff - (periods * frequency);\\n                if (offset > window) revert TaskTimeLockActive(block.timestamp, allowedAt);\\n                _nextAllowedAt = allowedAt + ((periods + 1) * frequency);\\n            }\\n        } else {\\n            if (block.timestamp >= allowedAt && block.timestamp <= allowedAt + window) {\\n                // Check the current timestamp has not passed the allowed date set\\n                _nextAllowedAt = _getNextAllowedDate(allowedAt, frequency);\\n            } else {\\n                // Check the current timestamp is not before the current allowed date\\n                uint256 currentAllowedDay = mode == Mode.OnDay ? allowedAt.getDay() : block.timestamp.getDaysInMonth();\\n                uint256 currentAllowedAt = _getCurrentAllowedDate(allowedAt, currentAllowedDay);\\n                if (block.timestamp < currentAllowedAt) revert TaskTimeLockActive(block.timestamp, currentAllowedAt);\\n\\n                // Check the current timestamp has not passed the allowed execution window\\n                uint256 extendedCurrentAllowedAt = currentAllowedAt + window;\\n                bool exceedsExecutionWindow = block.timestamp > extendedCurrentAllowedAt;\\n                if (exceedsExecutionWindow) revert TaskTimeLockActive(block.timestamp, extendedCurrentAllowedAt);\\n\\n                // Finally set the next allowed date to the corresponding number of months from the current date\\n                _nextAllowedAt = _getNextAllowedDate(currentAllowedAt, frequency);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev After time locked task hook\\n     */\\n    function _afterTimeLockedTask(address, uint256) internal virtual {\\n        if (_nextAllowedAt == 0) return;\\n        _setTimeLockAllowedAt(_nextAllowedAt);\\n        _nextAllowedAt = 0;\\n    }\\n\\n    /**\\n     * @dev Sets a new time lock\\n     */\\n    function _setTimeLock(uint8 mode, uint256 frequency, uint256 allowedAt, uint256 window) internal {\\n        if (mode == uint8(Mode.Seconds)) {\\n            // The execution window and timestamp are optional, but both must be given or none\\n            // If given the execution window cannot be larger than the number of seconds\\n            // Also, if these are given the frequency must be checked as well, otherwise it could be unsetting the lock\\n            if (window > 0 || allowedAt > 0) {\\n                if (frequency == 0) revert TaskInvalidFrequency(mode, frequency);\\n                if (window == 0 || window > frequency) revert TaskInvalidAllowedWindow(mode, window);\\n                if (allowedAt == 0) revert TaskInvalidAllowedDate(mode, allowedAt);\\n            }\\n        } else {\\n            // The other modes can be \\\"on-day\\\" or \\\"on-last-day\\\" where the frequency represents a number of months\\n            // There is no limit for the frequency, it simply cannot be zero\\n            if (frequency == 0) revert TaskInvalidFrequency(mode, frequency);\\n\\n            // The execution window cannot be larger than the number of months considering months of 28 days\\n            if (window == 0 || window > frequency * DAYS_28) revert TaskInvalidAllowedWindow(mode, window);\\n\\n            // The allowed date cannot be zero\\n            if (allowedAt == 0) revert TaskInvalidAllowedDate(mode, allowedAt);\\n\\n            // If the mode is \\\"on-day\\\", the allowed date must be valid for every month, then the allowed day cannot be\\n            // larger than 28. But if the mode is \\\"on-last-day\\\", the allowed date day must be the last day of the month\\n            if (mode == uint8(Mode.OnDay)) {\\n                if (allowedAt.getDay() > 28) revert TaskInvalidAllowedDate(mode, allowedAt);\\n            } else if (mode == uint8(Mode.OnLastMonthDay)) {\\n                if (allowedAt.getDay() != allowedAt.getDaysInMonth()) revert TaskInvalidAllowedDate(mode, allowedAt);\\n            } else {\\n                revert TaskInvalidFrequencyMode(mode);\\n            }\\n        }\\n\\n        _mode = Mode(mode);\\n        _frequency = frequency;\\n        _allowedAt = allowedAt;\\n        _window = window;\\n\\n        emit TimeLockSet(mode, frequency, allowedAt, window);\\n    }\\n\\n    /**\\n     * @dev Sets the time-lock execution allowed timestamp\\n     * @param allowedAt New execution allowed timestamp to be set\\n     */\\n    function _setTimeLockAllowedAt(uint256 allowedAt) internal {\\n        _allowedAt = allowedAt;\\n        emit TimeLockAllowedAtSet(allowedAt);\\n    }\\n\\n    /**\\n     * @dev Tells the corresponding allowed date based on a current timestamp\\n     */\\n    function _getCurrentAllowedDate(uint256 allowedAt, uint256 day) private view returns (uint256) {\\n        (uint256 year, uint256 month, ) = block.timestamp.timestampToDate();\\n        return _getAllowedDateFor(allowedAt, year, month, day);\\n    }\\n\\n    /**\\n     * @dev Tells the next allowed date based on a current allowed date considering a number of months to increase\\n     */\\n    function _getNextAllowedDate(uint256 allowedAt, uint256 monthsToIncrease) private view returns (uint256) {\\n        (uint256 year, uint256 month, uint256 day) = allowedAt.timestampToDate();\\n        uint256 increasedMonth = month + monthsToIncrease;\\n        uint256 nextMonth = increasedMonth % 12;\\n        uint256 nextYear = year + (increasedMonth / 12);\\n        uint256 nextDay = _mode == Mode.OnLastMonthDay ? DateTime._getDaysInMonth(nextYear, nextMonth) : day;\\n        return _getAllowedDateFor(allowedAt, nextYear, nextMonth, nextDay);\\n    }\\n\\n    /**\\n     * @dev Builds an allowed date using a specific year, month, and day\\n     */\\n    function _getAllowedDateFor(uint256 allowedAt, uint256 year, uint256 month, uint256 day)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            DateTime.timestampFromDateTime(\\n                year,\\n                month,\\n                day,\\n                allowedAt.getHour(),\\n                allowedAt.getMinute(),\\n                allowedAt.getSecond()\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/TokenIndexedTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.3;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport '@mimic-fi/v3-authorizer/contracts/Authorized.sol';\\n\\nimport '../interfaces/base/ITokenIndexedTask.sol';\\n\\n/**\\n * @dev Token indexed task. It defines a token acceptance list to tell which are the tokens supported by the\\n * task. Tokens acceptance can be configured either as an allow list or as a deny list.\\n */\\nabstract contract TokenIndexedTask is ITokenIndexedTask, Authorized {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Acceptance list type\\n    TokensAcceptanceType public override tokensAcceptanceType;\\n\\n    // Enumerable set of tokens included in the acceptance list\\n    EnumerableSet.AddressSet internal _tokens;\\n\\n    /**\\n     * @dev Token index config. Only used in the initializer.\\n     * @param acceptanceType Token acceptance type to be set\\n     * @param tokens List of token addresses to be set for the acceptance list\\n     */\\n    struct TokenIndexConfig {\\n        TokensAcceptanceType acceptanceType;\\n        address[] tokens;\\n    }\\n\\n    /**\\n     * @dev Initializes the token indexed task. It does not call upper contracts initializers.\\n     * @param config Token indexed task config\\n     */\\n    function __TokenIndexedTask_init(TokenIndexConfig memory config) internal onlyInitializing {\\n        __TokenIndexedTask_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the token indexed task. It does call upper contracts initializers.\\n     * @param config Token indexed task config\\n     */\\n    function __TokenIndexedTask_init_unchained(TokenIndexConfig memory config) internal onlyInitializing {\\n        _setTokensAcceptanceType(config.acceptanceType);\\n\\n        for (uint256 i = 0; i < config.tokens.length; i++) {\\n            _setTokenAcceptanceList(config.tokens[i], true);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tells whether a token is allowed or not\\n     * @param token Address of the token being queried\\n     */\\n    function isTokenAllowed(address token) public view override returns (bool) {\\n        bool containsToken = _tokens.contains(token);\\n        return tokensAcceptanceType == TokensAcceptanceType.AllowList ? containsToken : !containsToken;\\n    }\\n\\n    /**\\n     * @dev Sets the tokens acceptance type of the task\\n     * @param newTokensAcceptanceType New token acceptance type to be set\\n     */\\n    function setTokensAcceptanceType(TokensAcceptanceType newTokensAcceptanceType)\\n        external\\n        override\\n        authP(authParams(uint8(newTokensAcceptanceType)))\\n    {\\n        _setTokensAcceptanceType(newTokensAcceptanceType);\\n    }\\n\\n    /**\\n     * @dev Updates the list of tokens of the tokens acceptance list\\n     * @param tokens List of tokens to be updated from the acceptance list\\n     * @param added Whether each of the given tokens should be added or removed from the list\\n     */\\n    function setTokensAcceptanceList(address[] memory tokens, bool[] memory added) external override auth {\\n        if (tokens.length != added.length) revert TaskAcceptanceInputLengthMismatch();\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _setTokenAcceptanceList(tokens[i], added[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Before token indexed task hook\\n     */\\n    function _beforeTokenIndexedTask(address token, uint256) internal virtual {\\n        if (!isTokenAllowed(token)) revert TaskTokenNotAllowed(token);\\n    }\\n\\n    /**\\n     * @dev After token indexed task hook\\n     */\\n    function _afterTokenIndexedTask(address token, uint256) internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Sets the tokens acceptance type of the task\\n     * @param newTokensAcceptanceType New token acceptance type to be set\\n     */\\n    function _setTokensAcceptanceType(TokensAcceptanceType newTokensAcceptanceType) internal {\\n        tokensAcceptanceType = newTokensAcceptanceType;\\n        emit TokensAcceptanceTypeSet(newTokensAcceptanceType);\\n    }\\n\\n    /**\\n     * @dev Updates a token from the tokens acceptance list\\n     * @param token Token to be updated from the acceptance list\\n     * @param added Whether the token should be added or removed from the list\\n     */\\n    function _setTokenAcceptanceList(address token, bool added) internal {\\n        if (token == address(0)) revert TaskAcceptanceTokenZero();\\n        added ? _tokens.add(token) : _tokens.remove(token);\\n        emit TokensAcceptanceListSet(token, added);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/TokenThresholdTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.3;\\n\\nimport '@mimic-fi/v3-authorizer/contracts/Authorized.sol';\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\n\\nimport '../interfaces/base/ITokenThresholdTask.sol';\\n\\n/**\\n * @dev Token threshold task. It mainly works with token threshold configs that can be used to tell if\\n * a specific token amount is compliant with certain minimum or maximum values. Token threshold tasks\\n * make use of a default threshold config as a fallback in case there is no custom threshold defined for the token\\n * being evaluated.\\n */\\nabstract contract TokenThresholdTask is ITokenThresholdTask, Authorized {\\n    using FixedPoint for uint256;\\n\\n    // Default threshold\\n    Threshold internal _defaultThreshold;\\n\\n    // Custom thresholds per token\\n    mapping (address => Threshold) internal _customThresholds;\\n\\n    /**\\n     * @dev Threshold defined by a token address and min/max values\\n     */\\n    struct Threshold {\\n        address token;\\n        uint256 min;\\n        uint256 max;\\n    }\\n\\n    /**\\n     * @dev Custom token threshold config. Only used in the initializer.\\n     */\\n    struct CustomThresholdConfig {\\n        address token;\\n        Threshold threshold;\\n    }\\n\\n    /**\\n     * @dev Token threshold config. Only used in the initializer.\\n     * @param defaultThreshold Default threshold to be set\\n     * @param customThresholdConfigs List of custom threshold configs to be set\\n     */\\n    struct TokenThresholdConfig {\\n        Threshold defaultThreshold;\\n        CustomThresholdConfig[] customThresholdConfigs;\\n    }\\n\\n    /**\\n     * @dev Initializes the token threshold task. It does not call upper contracts initializers.\\n     * @param config Token threshold task config\\n     */\\n    function __TokenThresholdTask_init(TokenThresholdConfig memory config) internal onlyInitializing {\\n        __TokenThresholdTask_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the token threshold task. It does call upper contracts initializers.\\n     * @param config Token threshold task config\\n     */\\n    function __TokenThresholdTask_init_unchained(TokenThresholdConfig memory config) internal onlyInitializing {\\n        Threshold memory defaultThreshold = config.defaultThreshold;\\n        _setDefaultTokenThreshold(defaultThreshold.token, defaultThreshold.min, defaultThreshold.max);\\n\\n        for (uint256 i = 0; i < config.customThresholdConfigs.length; i++) {\\n            CustomThresholdConfig memory customThresholdConfig = config.customThresholdConfigs[i];\\n            Threshold memory custom = customThresholdConfig.threshold;\\n            _setCustomTokenThreshold(customThresholdConfig.token, custom.token, custom.min, custom.max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tells the default token threshold\\n     */\\n    function defaultTokenThreshold() external view override returns (address thresholdToken, uint256 min, uint256 max) {\\n        Threshold memory threshold = _defaultThreshold;\\n        return (threshold.token, threshold.min, threshold.max);\\n    }\\n\\n    /**\\n     * @dev Tells the token threshold defined for a specific token\\n     * @param token Address of the token being queried\\n     */\\n    function customTokenThreshold(address token)\\n        external\\n        view\\n        override\\n        returns (address thresholdToken, uint256 min, uint256 max)\\n    {\\n        Threshold memory threshold = _customThresholds[token];\\n        return (threshold.token, threshold.min, threshold.max);\\n    }\\n\\n    /**\\n     * @dev Tells the threshold that should be used for a token, it prioritizes custom thresholds over the default one\\n     * @param token Address of the token being queried\\n     */\\n    function getTokenThreshold(address token)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address thresholdToken, uint256 min, uint256 max)\\n    {\\n        Threshold memory threshold = _getTokenThreshold(token);\\n        return (threshold.token, threshold.min, threshold.max);\\n    }\\n\\n    /**\\n     * @dev Sets a new default threshold config\\n     * @param thresholdToken New threshold token to be set\\n     * @param min New threshold minimum to be set\\n     * @param max New threshold maximum to be set\\n     */\\n    function setDefaultTokenThreshold(address thresholdToken, uint256 min, uint256 max)\\n        external\\n        override\\n        authP(authParams(thresholdToken, min, max))\\n    {\\n        _setDefaultTokenThreshold(thresholdToken, min, max);\\n    }\\n\\n    /**\\n     * @dev Sets a custom token threshold\\n     * @param token Address of the token to set a custom threshold for\\n     * @param thresholdToken New custom threshold token to be set\\n     * @param min New custom threshold minimum to be set\\n     * @param max New custom threshold maximum to be set\\n     */\\n    function setCustomTokenThreshold(address token, address thresholdToken, uint256 min, uint256 max)\\n        external\\n        override\\n        authP(authParams(token, thresholdToken, min, max))\\n    {\\n        _setCustomTokenThreshold(token, thresholdToken, min, max);\\n    }\\n\\n    /**\\n     * @dev Fetches a base/quote price\\n     */\\n    function _getPrice(address base, address quote) internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Tells the threshold that should be used for a token, it prioritizes custom thresholds over the default one\\n     * @param token Address of the token being queried\\n     */\\n    function _getTokenThreshold(address token) internal view returns (Threshold memory) {\\n        Threshold storage customThreshold = _customThresholds[token];\\n        return customThreshold.token == address(0) ? _defaultThreshold : customThreshold;\\n    }\\n\\n    /**\\n     * @dev Before token threshold task hook\\n     */\\n    function _beforeTokenThresholdTask(address token, uint256 amount) internal virtual {\\n        Threshold memory threshold = _getTokenThreshold(token);\\n        if (threshold.token == address(0)) return;\\n\\n        uint256 convertedAmount = threshold.token == token ? amount : amount.mulDown(_getPrice(token, threshold.token));\\n        bool isValid = convertedAmount >= threshold.min && (threshold.max == 0 || convertedAmount <= threshold.max);\\n        if (!isValid) revert TaskTokenThresholdNotMet(threshold.token, convertedAmount, threshold.min, threshold.max);\\n    }\\n\\n    /**\\n     * @dev After token threshold task hook\\n     */\\n    function _afterTokenThresholdTask(address, uint256) internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Sets a new default threshold config\\n     * @param thresholdToken New threshold token to be set\\n     * @param min New threshold minimum to be set\\n     * @param max New threshold maximum to be set\\n     */\\n    function _setDefaultTokenThreshold(address thresholdToken, uint256 min, uint256 max) internal {\\n        _setTokenThreshold(_defaultThreshold, thresholdToken, min, max);\\n        emit DefaultTokenThresholdSet(thresholdToken, min, max);\\n    }\\n\\n    /**\\n     * @dev Sets a custom of tokens thresholds\\n     * @param token Address of the token to set a custom threshold for\\n     * @param thresholdToken New custom threshold token to be set\\n     * @param min New custom threshold minimum to be set\\n     * @param max New custom threshold maximum to be set\\n     */\\n    function _setCustomTokenThreshold(address token, address thresholdToken, uint256 min, uint256 max) internal {\\n        if (token == address(0)) revert TaskThresholdTokenZero();\\n        _setTokenThreshold(_customThresholds[token], thresholdToken, min, max);\\n        emit CustomTokenThresholdSet(token, thresholdToken, min, max);\\n    }\\n\\n    /**\\n     * @dev Sets a threshold\\n     * @param threshold Threshold to be updated\\n     * @param token New threshold token to be set\\n     * @param min New threshold minimum to be set\\n     * @param max New threshold maximum to be set\\n     */\\n    function _setTokenThreshold(Threshold storage threshold, address token, uint256 min, uint256 max) private {\\n        // If there is no threshold, all values must be zero\\n        bool isZeroThreshold = token == address(0) && min == 0 && max == 0;\\n        bool isNonZeroThreshold = token != address(0) && (max == 0 || max >= min);\\n        if (!isZeroThreshold && !isNonZeroThreshold) revert TaskInvalidThresholdInput(token, min, max);\\n\\n        threshold.token = token;\\n        threshold.min = min;\\n        threshold.max = max;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/VolumeLimitedTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.17;\\n\\nimport '@mimic-fi/v3-authorizer/contracts/Authorized.sol';\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\n\\nimport '../interfaces/base/IVolumeLimitedTask.sol';\\n\\n/**\\n * @dev Volume limit config for tasks. It allows setting volume limit per period of time.\\n */\\nabstract contract VolumeLimitedTask is IVolumeLimitedTask, Authorized {\\n    using FixedPoint for uint256;\\n\\n    // Default volume limit\\n    VolumeLimit internal _defaultVolumeLimit;\\n\\n    // Custom volume limits per token\\n    mapping (address => VolumeLimit) internal _customVolumeLimits;\\n\\n    /**\\n     * @dev Volume limit config\\n     * @param token Address to measure the volume limit\\n     */\\n    struct VolumeLimit {\\n        address token;\\n        uint256 amount;\\n        uint256 accrued;\\n        uint256 period;\\n        uint256 nextResetTime;\\n    }\\n\\n    /**\\n     * @dev Volume limit params. Only used in the initializer.\\n     */\\n    struct VolumeLimitParams {\\n        address token;\\n        uint256 amount;\\n        uint256 period;\\n    }\\n\\n    /**\\n     * @dev Custom token volume limit config. Only used in the initializer.\\n     */\\n    struct CustomVolumeLimitConfig {\\n        address token;\\n        VolumeLimitParams volumeLimit;\\n    }\\n\\n    /**\\n     * @dev Volume limit config. Only used in the initializer.\\n     */\\n    struct VolumeLimitConfig {\\n        VolumeLimitParams defaultVolumeLimit;\\n        CustomVolumeLimitConfig[] customVolumeLimitConfigs;\\n    }\\n\\n    /**\\n     * @dev Initializes the volume limited task. It does call upper contracts initializers.\\n     * @param config Volume limited task config\\n     */\\n    function __VolumeLimitedTask_init(VolumeLimitConfig memory config) internal onlyInitializing {\\n        __VolumeLimitedTask_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the volume limited task. It does not call upper contracts initializers.\\n     * @param config Volume limited task config\\n     */\\n    function __VolumeLimitedTask_init_unchained(VolumeLimitConfig memory config) internal onlyInitializing {\\n        VolumeLimitParams memory defaultLimit = config.defaultVolumeLimit;\\n        _setDefaultVolumeLimit(defaultLimit.token, defaultLimit.amount, defaultLimit.period);\\n\\n        for (uint256 i = 0; i < config.customVolumeLimitConfigs.length; i++) {\\n            CustomVolumeLimitConfig memory customVolumeLimitConfig = config.customVolumeLimitConfigs[i];\\n            VolumeLimitParams memory custom = customVolumeLimitConfig.volumeLimit;\\n            _setCustomVolumeLimit(customVolumeLimitConfig.token, custom.token, custom.amount, custom.period);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tells the default volume limit set\\n     */\\n    function defaultVolumeLimit()\\n        external\\n        view\\n        override\\n        returns (address limitToken, uint256 amount, uint256 accrued, uint256 period, uint256 nextResetTime)\\n    {\\n        VolumeLimit memory limit = _defaultVolumeLimit;\\n        return (limit.token, limit.amount, limit.accrued, limit.period, limit.nextResetTime);\\n    }\\n\\n    /**\\n     * @dev Tells the custom volume limit set for a specific token\\n     * @param token Address of the token being queried\\n     */\\n    function customVolumeLimit(address token)\\n        external\\n        view\\n        override\\n        returns (address limitToken, uint256 amount, uint256 accrued, uint256 period, uint256 nextResetTime)\\n    {\\n        VolumeLimit memory limit = _customVolumeLimits[token];\\n        return (limit.token, limit.amount, limit.accrued, limit.period, limit.nextResetTime);\\n    }\\n\\n    /**\\n     * @dev Tells the volume limit that should be used for a token, it prioritizes custom limits over the default one\\n     * @param token Address of the token being queried\\n     */\\n    function getVolumeLimit(address token)\\n        external\\n        view\\n        override\\n        returns (address limitToken, uint256 amount, uint256 accrued, uint256 period, uint256 nextResetTime)\\n    {\\n        VolumeLimit memory limit = _getVolumeLimit(token);\\n        return (limit.token, limit.amount, limit.accrued, limit.period, limit.nextResetTime);\\n    }\\n\\n    /**\\n     * @dev Sets a the default volume limit config\\n     * @param limitToken Address of the token to measure the volume limit\\n     * @param limitAmount Amount of tokens to be applied for the volume limit\\n     * @param limitPeriod Frequency to Amount of tokens to be applied for the volume limit\\n     */\\n    function setDefaultVolumeLimit(address limitToken, uint256 limitAmount, uint256 limitPeriod)\\n        external\\n        override\\n        authP(authParams(limitToken, limitAmount, limitPeriod))\\n    {\\n        _setDefaultVolumeLimit(limitToken, limitAmount, limitPeriod);\\n    }\\n\\n    /**\\n     * @dev Sets a custom volume limit\\n     * @param token Address of the token to set a custom volume limit for\\n     * @param limitToken Address of the token to measure the volume limit\\n     * @param limitAmount Amount of tokens to be applied for the volume limit\\n     * @param limitPeriod Frequency to Amount of tokens to be applied for the volume limit\\n     */\\n    function setCustomVolumeLimit(address token, address limitToken, uint256 limitAmount, uint256 limitPeriod)\\n        external\\n        override\\n        authP(authParams(token, limitToken, limitAmount, limitPeriod))\\n    {\\n        _setCustomVolumeLimit(token, limitToken, limitAmount, limitPeriod);\\n    }\\n\\n    /**\\n     * @dev Fetches a base/quote price\\n     */\\n    function _getPrice(address base, address quote) internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Tells the volume limit that should be used for a token, it prioritizes custom limits over the default one\\n     * @param token Address of the token being queried\\n     */\\n    function _getVolumeLimit(address token) internal view returns (VolumeLimit storage) {\\n        VolumeLimit storage customLimit = _customVolumeLimits[token];\\n        return customLimit.token == address(0) ? _defaultVolumeLimit : customLimit;\\n    }\\n\\n    /**\\n     * @dev Before volume limited task hook\\n     */\\n    function _beforeVolumeLimitedTask(address token, uint256 amount) internal virtual {\\n        VolumeLimit memory limit = _getVolumeLimit(token);\\n        if (limit.token == address(0)) return;\\n\\n        uint256 amountInLimitToken = limit.token == token ? amount : amount.mulDown(_getPrice(token, limit.token));\\n        uint256 processedVolume = amountInLimitToken + (block.timestamp < limit.nextResetTime ? limit.accrued : 0);\\n        if (processedVolume > limit.amount) revert TaskVolumeLimitExceeded(limit.token, limit.amount, processedVolume);\\n    }\\n\\n    /**\\n     * @dev After volume limited task hook\\n     */\\n    function _afterVolumeLimitedTask(address token, uint256 amount) internal virtual {\\n        VolumeLimit storage limit = _getVolumeLimit(token);\\n        if (limit.token == address(0)) return;\\n\\n        uint256 amountInLimitToken = limit.token == token ? amount : amount.mulDown(_getPrice(token, limit.token));\\n        if (block.timestamp >= limit.nextResetTime) {\\n            limit.accrued = 0;\\n            limit.nextResetTime = block.timestamp + limit.period;\\n        }\\n        limit.accrued += amountInLimitToken;\\n    }\\n\\n    /**\\n     * @dev Sets the default volume limit\\n     * @param limitToken Address of the token to measure the volume limit\\n     * @param limitAmount Amount of tokens to be applied for the volume limit\\n     * @param limitPeriod Frequency to Amount of tokens to be applied for the volume limit\\n     */\\n    function _setDefaultVolumeLimit(address limitToken, uint256 limitAmount, uint256 limitPeriod) internal {\\n        _setVolumeLimit(_defaultVolumeLimit, limitToken, limitAmount, limitPeriod);\\n        emit DefaultVolumeLimitSet(limitToken, limitAmount, limitPeriod);\\n    }\\n\\n    /**\\n     * @dev Sets a custom volume limit\\n     * @param token Address of the token to set a custom volume limit for\\n     * @param limitToken Address of the token to measure the volume limit\\n     * @param limitAmount Amount of tokens to be applied for the volume limit\\n     * @param limitPeriod Frequency to Amount of tokens to be applied for the volume limit\\n     */\\n    function _setCustomVolumeLimit(address token, address limitToken, uint256 limitAmount, uint256 limitPeriod)\\n        internal\\n    {\\n        if (token == address(0)) revert TaskVolumeLimitTokenZero();\\n        _setVolumeLimit(_customVolumeLimits[token], limitToken, limitAmount, limitPeriod);\\n        emit CustomVolumeLimitSet(token, limitToken, limitAmount, limitPeriod);\\n    }\\n\\n    /**\\n     * @dev Sets a volume limit\\n     * @param limit Volume limit to be updated\\n     * @param token Address of the token to measure the volume limit\\n     * @param amount Amount of tokens to be applied for the volume limit\\n     * @param period Frequency to Amount of tokens to be applied for the volume limit\\n     */\\n    function _setVolumeLimit(VolumeLimit storage limit, address token, uint256 amount, uint256 period) private {\\n        // If there is no limit, all values must be zero\\n        bool isZeroLimit = token == address(0) && amount == 0 && period == 0;\\n        bool isNonZeroLimit = token != address(0) && amount > 0 && period > 0;\\n        if (!isZeroLimit && !isNonZeroLimit) revert TaskInvalidVolumeLimitInput(token, amount, period);\\n\\n        // Changing the period only affects the end time of the next period, but not the end date of the current one\\n        limit.period = period;\\n\\n        // Changing the amount does not affect the totalizator, it only applies when updating the accrued amount.\\n        // Note that it can happen that the new amount is lower than the accrued amount if the amount is lowered.\\n        // However, there shouldn't be any accounting issues with that.\\n        limit.amount = amount;\\n\\n        // Therefore, only clean the totalizators if the limit is being removed\\n        if (isZeroLimit) {\\n            limit.accrued = 0;\\n            limit.nextResetTime = 0;\\n        } else {\\n            // If limit is not zero, set the next reset time if it wasn't set already\\n            // Otherwise, if the token is being changed the accrued amount must be updated accordingly\\n            if (limit.nextResetTime == 0) {\\n                limit.accrued = 0;\\n                limit.nextResetTime = block.timestamp + period;\\n            } else if (limit.token != token) {\\n                uint256 price = _getPrice(limit.token, token);\\n                limit.accrued = limit.accrued.mulDown(price);\\n            }\\n        }\\n\\n        // Finally simply set the new requested token\\n        limit.token = token;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/AxelarBridger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-connectors/contracts/interfaces/bridge/IAxelarConnector.sol';\\n\\nimport './BaseBridgeTask.sol';\\nimport '../interfaces/bridge/IAxelarBridger.sol';\\n\\n/**\\n * @title Axelar bridger\\n * @dev Task that extends the base bridge task to use Axelar\\n */\\ncontract AxelarBridger is IAxelarBridger, BaseBridgeTask {\\n    using FixedPoint for uint256;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('AXELAR_BRIDGER');\\n\\n    /**\\n     * @dev Axelar bridge config. Only used in the initializer.\\n     */\\n    struct AxelarBridgeConfig {\\n        BaseBridgeConfig baseBridgeConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the Axelar bridger\\n     * @param config Axelar bridge config\\n     */\\n    function initialize(AxelarBridgeConfig memory config) external virtual initializer {\\n        __AxelarBridger_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Axelar bridger. It does call upper contracts initializers.\\n     * @param config Axelar bridge config\\n     */\\n    function __AxelarBridger_init(AxelarBridgeConfig memory config) internal onlyInitializing {\\n        __BaseBridgeTask_init(config.baseBridgeConfig);\\n        __AxelarBridger_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Axelar bridger. It does not call upper contracts initializers.\\n     * @param config Axelar bridge config\\n     */\\n    function __AxelarBridger_init_unchained(AxelarBridgeConfig memory config) internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Execute Axelar bridger\\n     */\\n    function call(address token, uint256 amount) external override authP(authParams(token, amount)) {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeAxelarBridger(token, amount);\\n\\n        bytes memory connectorData = abi.encodeWithSelector(\\n            IAxelarConnector.execute.selector,\\n            getDestinationChain(token),\\n            token,\\n            amount,\\n            recipient\\n        );\\n\\n        ISmartVault(smartVault).execute(connector, connectorData);\\n        _afterAxelarBridger(token, amount);\\n    }\\n\\n    /**\\n     * @dev Before Axelar bridger hook\\n     */\\n    function _beforeAxelarBridger(address token, uint256 amount) internal virtual {\\n        // Axelar does not support specifying slippage nor fee\\n        _beforeBaseBridgeTask(token, amount, 0, 0);\\n    }\\n\\n    /**\\n     * @dev After Axelar bridger task hook\\n     */\\n    function _afterAxelarBridger(address token, uint256 amount) internal virtual {\\n        // Axelar does not support specifying slippage nor fee\\n        _afterBaseBridgeTask(token, amount, 0, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/BaseBridgeTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\n\\nimport '../Task.sol';\\nimport '../interfaces/bridge/IBaseBridgeTask.sol';\\n\\n/**\\n * @title Base bridge task\\n * @dev Task that offers the basic components for more detailed bridge tasks\\n */\\nabstract contract BaseBridgeTask is IBaseBridgeTask, Task {\\n    using FixedPoint for uint256;\\n\\n    // Connector address\\n    address public override connector;\\n\\n    // Connector address\\n    address public override recipient;\\n\\n    // Default destination chain\\n    uint256 public override defaultDestinationChain;\\n\\n    // Default maximum slippage in fixed point\\n    uint256 public override defaultMaxSlippage;\\n\\n    // Default maximum fee\\n    MaxFee internal _defaultMaxFee;\\n\\n    // Destination chain per token address\\n    mapping (address => uint256) public override customDestinationChain;\\n\\n    // Maximum slippage per token address\\n    mapping (address => uint256) public override customMaxSlippage;\\n\\n    // Maximum fee per token address\\n    mapping (address => MaxFee) internal _customMaxFee;\\n\\n    /**\\n     * @dev Maximum fee defined by a token address and a max fee value\\n     */\\n    struct MaxFee {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @dev Custom destination chain config. Only used in the initializer.\\n     */\\n    struct CustomDestinationChain {\\n        address token;\\n        uint256 destinationChain;\\n    }\\n\\n    /**\\n     * @dev Custom max slippage config. Only used in the initializer.\\n     */\\n    struct CustomMaxSlippage {\\n        address token;\\n        uint256 maxSlippage;\\n    }\\n\\n    /**\\n     * @dev Custom max fee config. Only used in the initializer.\\n     */\\n    struct CustomMaxFee {\\n        address token;\\n        MaxFee maxFee;\\n    }\\n\\n    /**\\n     * @dev Base bridge config. Only used in the initializer.\\n     */\\n    struct BaseBridgeConfig {\\n        address connector;\\n        address recipient;\\n        uint256 destinationChain;\\n        uint256 maxSlippage;\\n        MaxFee maxFee;\\n        CustomDestinationChain[] customDestinationChains;\\n        CustomMaxSlippage[] customMaxSlippages;\\n        CustomMaxFee[] customMaxFees;\\n        TaskConfig taskConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the base bridge task. It does call upper contracts initializers.\\n     * @param config Base bridge config\\n     */\\n    function __BaseBridgeTask_init(BaseBridgeConfig memory config) internal onlyInitializing {\\n        __Task_init(config.taskConfig);\\n        __BaseBridgeTask_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the base bridge task. It does not call upper contracts initializers.\\n     * @param config Base bridge config\\n     */\\n    function __BaseBridgeTask_init_unchained(BaseBridgeConfig memory config) internal onlyInitializing {\\n        _setConnector(config.connector);\\n        _setRecipient(config.recipient);\\n        _setDefaultDestinationChain(config.destinationChain);\\n        _setDefaultMaxSlippage(config.maxSlippage);\\n        MaxFee memory defaultFee = config.maxFee;\\n        _setDefaultMaxFee(defaultFee.token, defaultFee.amount);\\n\\n        for (uint256 i = 0; i < config.customDestinationChains.length; i++) {\\n            CustomDestinationChain memory customConfig = config.customDestinationChains[i];\\n            _setCustomDestinationChain(customConfig.token, customConfig.destinationChain);\\n        }\\n\\n        for (uint256 i = 0; i < config.customMaxSlippages.length; i++) {\\n            _setCustomMaxSlippage(config.customMaxSlippages[i].token, config.customMaxSlippages[i].maxSlippage);\\n        }\\n\\n        for (uint256 i = 0; i < config.customMaxFees.length; i++) {\\n            CustomMaxFee memory customConfig = config.customMaxFees[i];\\n            MaxFee memory maxFee = customConfig.maxFee;\\n            _setCustomMaxFee(customConfig.token, maxFee.token, maxFee.amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tells the default max fee\\n     */\\n    function defaultMaxFee() external view override returns (address maxFeeToken, uint256 amount) {\\n        MaxFee memory maxFee = _defaultMaxFee;\\n        return (maxFee.token, maxFee.amount);\\n    }\\n\\n    /**\\n     * @dev Tells the max fee defined for a specific token\\n     * @param token Address of the token being queried\\n     */\\n    function customMaxFee(address token) external view override returns (address maxFeeToken, uint256 amount) {\\n        MaxFee memory maxFee = _customMaxFee[token];\\n        return (maxFee.token, maxFee.amount);\\n    }\\n\\n    /**\\n     * @dev Tells the destination chain that should be used for a token\\n     * @param token Address of the token to get the destination chain for\\n     */\\n    function getDestinationChain(address token) public view virtual override returns (uint256) {\\n        uint256 chain = customDestinationChain[token];\\n        return chain == 0 ? defaultDestinationChain : chain;\\n    }\\n\\n    /**\\n     * @dev Tells the max slippage that should be used for a token\\n     * @param token Address of the token to get the max slippage for\\n     */\\n    function getMaxSlippage(address token) public view virtual override returns (uint256) {\\n        uint256 maxSlippage = customMaxSlippage[token];\\n        return maxSlippage == 0 ? defaultMaxSlippage : maxSlippage;\\n    }\\n\\n    /**\\n     * @dev Tells the max fee that should be used for a token\\n     * @param token Address of the token to get the max fee for\\n     */\\n    function getMaxFee(address token) external view virtual override returns (address maxFeeToken, uint256 amount) {\\n        MaxFee memory maxFee = _getMaxFee(token);\\n        return (maxFee.token, maxFee.amount);\\n    }\\n\\n    /**\\n     * @dev Sets a new connector\\n     * @param newConnector Address of the connector to be set\\n     */\\n    function setConnector(address newConnector) external override authP(authParams(newConnector)) {\\n        _setConnector(newConnector);\\n    }\\n\\n    /**\\n     * @dev Sets the recipient address. Sender must be authorized.\\n     * @param newRecipient Address of the new recipient to be set\\n     */\\n    function setRecipient(address newRecipient) external override authP(authParams(newRecipient)) {\\n        _setRecipient(newRecipient);\\n    }\\n\\n    /**\\n     * @dev Sets the default destination chain\\n     * @param destinationChain Default destination chain to be set\\n     */\\n    function setDefaultDestinationChain(uint256 destinationChain)\\n        external\\n        override\\n        authP(authParams(destinationChain))\\n    {\\n        _setDefaultDestinationChain(destinationChain);\\n    }\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     * @param maxSlippage Default max slippage to be set\\n     */\\n    function setDefaultMaxSlippage(uint256 maxSlippage) external override authP(authParams(maxSlippage)) {\\n        _setDefaultMaxSlippage(maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Sets the default max fee\\n     * @param maxFeeToken Default max fee token to be set\\n     * @param amount Default max fee amount to be set\\n     */\\n    function setDefaultMaxFee(address maxFeeToken, uint256 amount)\\n        external\\n        override\\n        authP(authParams(maxFeeToken, amount))\\n    {\\n        _setDefaultMaxFee(maxFeeToken, amount);\\n    }\\n\\n    /**\\n     * @dev Sets a custom destination chain\\n     * @param token Address of the token to set a custom destination chain for\\n     * @param destinationChain Destination chain to be set\\n     */\\n    function setCustomDestinationChain(address token, uint256 destinationChain)\\n        external\\n        override\\n        authP(authParams(token, destinationChain))\\n    {\\n        _setCustomDestinationChain(token, destinationChain);\\n    }\\n\\n    /**\\n     * @dev Sets a custom max slippage\\n     * @param token Address of the token to set a custom max slippage for\\n     * @param maxSlippage Max slippage to be set\\n     */\\n    function setCustomMaxSlippage(address token, uint256 maxSlippage)\\n        external\\n        override\\n        authP(authParams(token, maxSlippage))\\n    {\\n        _setCustomMaxSlippage(token, maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Sets a custom max fee\\n     * @param token Address of the token to set a custom max fee for\\n     * @param maxFeeToken Max fee token to be set for the given token\\n     * @param amount Max fee amount to be set for the given token\\n     */\\n    function setCustomMaxFee(address token, address maxFeeToken, uint256 amount)\\n        external\\n        override\\n        authP(authParams(token, maxFeeToken, amount))\\n    {\\n        _setCustomMaxFee(token, maxFeeToken, amount);\\n    }\\n\\n    /**\\n     * @dev Tells the max fee that should be used for a token\\n     * @param token Address of the token to get the max fee for\\n     */\\n    function _getMaxFee(address token) internal view virtual returns (MaxFee memory) {\\n        MaxFee memory maxFee = _customMaxFee[token];\\n        return maxFee.token == address(0) ? _defaultMaxFee : maxFee;\\n    }\\n\\n    /**\\n     * @dev Before base bridge task hook\\n     */\\n    function _beforeBaseBridgeTask(address token, uint256 amount, uint256 slippage, uint256 fee) internal virtual {\\n        _beforeTask(token, amount);\\n        if (token == address(0)) revert TaskTokenZero();\\n        if (amount == 0) revert TaskAmountZero();\\n        if (getDestinationChain(token) == 0) revert TaskDestinationChainNotSet();\\n\\n        uint256 maxSlippage = getMaxSlippage(token);\\n        if (slippage > maxSlippage) revert TaskSlippageAboveMax(slippage, maxSlippage);\\n\\n        // If no fee is given we simply ignore the max fee config\\n        if (fee == 0) return;\\n\\n        // Otherwise, we revert in case there is no max fee set\\n        MaxFee memory maxFee = _getMaxFee(token);\\n        if (maxFee.token == address(0)) revert TaskFeeAboveMax(fee, maxFee.amount);\\n\\n        uint256 convertedFee = maxFee.token == token ? fee : fee.mulDown(_getPrice(token, maxFee.token));\\n        if (convertedFee > maxFee.amount) revert TaskFeeAboveMax(convertedFee, maxFee.amount);\\n    }\\n\\n    /**\\n     * @dev After base bridge task hook\\n     */\\n    function _afterBaseBridgeTask(address token, uint256 amount, uint256, uint256) internal virtual {\\n        _afterTask(token, amount);\\n    }\\n\\n    /**\\n     * @dev Sets the balance connectors. Next balance connector must be unset.\\n     * @param previous Balance connector id of the previous task in the workflow\\n     * @param next Balance connector id of the next task in the workflow\\n     */\\n    function _setBalanceConnectors(bytes32 previous, bytes32 next) internal virtual override {\\n        if (next != bytes32(0)) revert TaskNextConnectorNotZero(next);\\n        super._setBalanceConnectors(previous, next);\\n    }\\n\\n    /**\\n     * @dev Sets a new connector\\n     * @param newConnector Address of the connector to be set\\n     */\\n    function _setConnector(address newConnector) internal {\\n        if (newConnector == address(0)) revert TaskConnectorZero();\\n        connector = newConnector;\\n        emit ConnectorSet(newConnector);\\n    }\\n\\n    /**\\n     * @dev Sets the recipient address\\n     * @param newRecipient Address of the new recipient to be set\\n     */\\n    function _setRecipient(address newRecipient) internal {\\n        if (newRecipient == address(0)) revert TaskRecipientZero();\\n        recipient = newRecipient;\\n        emit RecipientSet(newRecipient);\\n    }\\n\\n    /**\\n     * @dev Sets the default destination chain\\n     * @param destinationChain Default destination chain to be set\\n     */\\n    function _setDefaultDestinationChain(uint256 destinationChain) internal {\\n        if (destinationChain == block.chainid) revert TaskBridgeCurrentChainId(destinationChain);\\n        defaultDestinationChain = destinationChain;\\n        emit DefaultDestinationChainSet(destinationChain);\\n    }\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     * @param maxSlippage Default max slippage to be set\\n     */\\n    function _setDefaultMaxSlippage(uint256 maxSlippage) internal {\\n        if (maxSlippage > FixedPoint.ONE) revert TaskSlippageAboveOne();\\n        defaultMaxSlippage = maxSlippage;\\n        emit DefaultMaxSlippageSet(maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Sets the default max fee\\n     * @param maxFeeToken Default max fee token to be set\\n     * @param amount Default max fee amount to be set\\n     */\\n    function _setDefaultMaxFee(address maxFeeToken, uint256 amount) internal {\\n        _setMaxFee(_defaultMaxFee, maxFeeToken, amount);\\n        emit DefaultMaxFeeSet(maxFeeToken, amount);\\n    }\\n\\n    /**\\n     * @dev Sets a custom destination chain for a token\\n     * @param token Address of the token to set the custom destination chain for\\n     * @param destinationChain Destination chain to be set\\n     */\\n    function _setCustomDestinationChain(address token, uint256 destinationChain) internal {\\n        if (token == address(0)) revert TaskTokenZero();\\n        if (destinationChain == block.chainid) revert TaskBridgeCurrentChainId(destinationChain);\\n        customDestinationChain[token] = destinationChain;\\n        emit CustomDestinationChainSet(token, destinationChain);\\n    }\\n\\n    /**\\n     * @dev Sets a custom max slippage for a token\\n     * @param token Address of the token to set the custom max slippage for\\n     * @param maxSlippage Max slippage to be set\\n     */\\n    function _setCustomMaxSlippage(address token, uint256 maxSlippage) internal {\\n        if (token == address(0)) revert TaskTokenZero();\\n        if (maxSlippage > FixedPoint.ONE) revert TaskSlippageAboveOne();\\n        customMaxSlippage[token] = maxSlippage;\\n        emit CustomMaxSlippageSet(token, maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Sets a custom max fee for a token\\n     * @param token Address of the token to set the custom max fee for\\n     * @param maxFeeToken Max fee token to be set for the given token\\n     * @param amount Max fee amount to be set for the given token\\n     */\\n    function _setCustomMaxFee(address token, address maxFeeToken, uint256 amount) internal {\\n        if (token == address(0)) revert TaskTokenZero();\\n        _setMaxFee(_customMaxFee[token], maxFeeToken, amount);\\n        emit CustomMaxFeeSet(token, maxFeeToken, amount);\\n    }\\n\\n    /**\\n     * @dev Sets a max fee\\n     * @param maxFee Max fee to be updated\\n     * @param token Max fee token to be set\\n     * @param amount Max fee amount to be set\\n     */\\n    function _setMaxFee(MaxFee storage maxFee, address token, uint256 amount) private {\\n        if (token == address(0) && amount != 0) revert TaskInvalidMaxFee();\\n        maxFee.token = token;\\n        maxFee.amount = amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/ConnextBridger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-connectors/contracts/interfaces/bridge/IConnextConnector.sol';\\n\\nimport './BaseBridgeTask.sol';\\nimport '../interfaces/bridge/IConnextBridger.sol';\\n\\n/**\\n * @title Connext bridger\\n * @dev Task that extends the base bridge task to use Connext\\n */\\ncontract ConnextBridger is IConnextBridger, BaseBridgeTask {\\n    using FixedPoint for uint256;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('CONNEXT_BRIDGER');\\n\\n    /**\\n     * @dev Connext bridge config. Only used in the initializer.\\n     */\\n    struct ConnextBridgeConfig {\\n        BaseBridgeConfig baseBridgeConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the Connext bridger\\n     * @param config Connext bridge config\\n     */\\n    function initialize(ConnextBridgeConfig memory config) external virtual initializer {\\n        __ConnextBridger_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Connext bridger. It does call upper contracts initializers.\\n     * @param config Connext bridge config\\n     */\\n    function __ConnextBridger_init(ConnextBridgeConfig memory config) internal onlyInitializing {\\n        __BaseBridgeTask_init(config.baseBridgeConfig);\\n        __ConnextBridger_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Connext bridger. It does not call upper contracts initializers.\\n     * @param config Connext bridge config\\n     */\\n    function __ConnextBridger_init_unchained(ConnextBridgeConfig memory config) internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Execute Connext bridger\\n     */\\n    function call(address token, uint256 amount, uint256 slippage, uint256 fee)\\n        external\\n        override\\n        authP(authParams(token, amount, slippage, fee))\\n    {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeConnextBridger(token, amount, slippage, fee);\\n\\n        uint256 amountAfterFees = amount - fee;\\n        uint256 minAmountOut = amountAfterFees.mulUp(FixedPoint.ONE - slippage);\\n        bytes memory connectorData = abi.encodeWithSelector(\\n            IConnextConnector.execute.selector,\\n            getDestinationChain(token),\\n            token,\\n            amount,\\n            minAmountOut,\\n            recipient,\\n            fee\\n        );\\n\\n        ISmartVault(smartVault).execute(connector, connectorData);\\n        _afterConnextBridger(token, amount, slippage, fee);\\n    }\\n\\n    /**\\n     * @dev Before connext bridger hook\\n     */\\n    function _beforeConnextBridger(address token, uint256 amount, uint256 slippage, uint256 fee) internal virtual {\\n        _beforeBaseBridgeTask(token, amount, slippage, fee);\\n    }\\n\\n    /**\\n     * @dev After connext bridger hook\\n     */\\n    function _afterConnextBridger(address token, uint256 amount, uint256 slippage, uint256 fee) internal virtual {\\n        _afterBaseBridgeTask(token, amount, slippage, fee);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/HopBridger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-connectors/contracts/interfaces/bridge/IHopConnector.sol';\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\n\\nimport './BaseBridgeTask.sol';\\nimport '../interfaces/bridge/IHopBridger.sol';\\n\\n/**\\n * @title Hop bridger\\n * @dev Task that extends the base bridge task to use Hop\\n */\\ncontract HopBridger is IHopBridger, BaseBridgeTask {\\n    using FixedPoint for uint256;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('HOP_BRIDGER');\\n\\n    // Relayer address\\n    address public override relayer;\\n\\n    // Maximum deadline in seconds\\n    uint256 public override maxDeadline;\\n\\n    // List of Hop entrypoints per token\\n    mapping (address => address) public override tokenHopEntrypoint;\\n\\n    /**\\n     * @dev Token Hop entrypoint config. Only used in the initializer.\\n     */\\n    struct TokenHopEntrypoint {\\n        address token;\\n        address entrypoint;\\n    }\\n\\n    /**\\n     * @dev Hop bridge config. Only used in the initializer.\\n     */\\n    struct HopBridgeConfig {\\n        address relayer;\\n        uint256 maxDeadline;\\n        TokenHopEntrypoint[] tokenHopEntrypoints;\\n        BaseBridgeConfig baseBridgeConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the Hop bridger\\n     * @param config Hop bridge config\\n     */\\n    function initialize(HopBridgeConfig memory config) external virtual initializer {\\n        __HopBridger_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Hop bridger. It does call upper contracts initializers.\\n     * @param config Hop bridge config\\n     */\\n    function __HopBridger_init(HopBridgeConfig memory config) internal onlyInitializing {\\n        __BaseBridgeTask_init(config.baseBridgeConfig);\\n        __HopBridger_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Hop bridger. It does not call upper contracts initializers.\\n     * @param config Hop bridge config\\n     */\\n    function __HopBridger_init_unchained(HopBridgeConfig memory config) internal onlyInitializing {\\n        _setRelayer(config.relayer);\\n        _setMaxDeadline(config.maxDeadline);\\n\\n        for (uint256 i = 0; i < config.tokenHopEntrypoints.length; i++) {\\n            TokenHopEntrypoint memory customConfig = config.tokenHopEntrypoints[i];\\n            _setTokenHopEntrypoint(customConfig.token, customConfig.entrypoint);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the relayer, only used when bridging from L1 to L2\\n     * @param newRelayer New relayer address to be set\\n     */\\n    function setRelayer(address newRelayer) external override authP(authParams(newRelayer)) {\\n        _setRelayer(newRelayer);\\n    }\\n\\n    /**\\n     * @dev Sets the max deadline\\n     * @param newMaxDeadline New max deadline to be set\\n     */\\n    function setMaxDeadline(uint256 newMaxDeadline) external override authP(authParams(newMaxDeadline)) {\\n        _setMaxDeadline(newMaxDeadline);\\n    }\\n\\n    /**\\n     * @dev Sets an entrypoint for a tokens\\n     * @param token Token address to set a Hop entrypoint for\\n     * @param entrypoint Hop entrypoint address to be set for a token\\n     */\\n    function setTokenHopEntrypoint(address token, address entrypoint)\\n        external\\n        override\\n        authP(authParams(token, entrypoint))\\n    {\\n        _setTokenHopEntrypoint(token, entrypoint);\\n    }\\n\\n    /**\\n     * @dev Execute Hop bridger\\n     */\\n    function call(address token, uint256 amount, uint256 slippage, uint256 fee)\\n        external\\n        override\\n        authP(authParams(token, amount, slippage, fee))\\n    {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeHopBridger(token, amount, slippage, fee);\\n\\n        uint256 amountAfterFees = amount - fee;\\n        uint256 minAmountOut = amountAfterFees.mulUp(FixedPoint.ONE - slippage);\\n        bytes memory connectorData = abi.encodeWithSelector(\\n            IHopConnector.execute.selector,\\n            getDestinationChain(token),\\n            token,\\n            amount,\\n            minAmountOut,\\n            recipient,\\n            tokenHopEntrypoint[token],\\n            block.timestamp + maxDeadline,\\n            relayer,\\n            fee\\n        );\\n\\n        ISmartVault(smartVault).execute(connector, connectorData);\\n        _afterHopBridger(token, amount, slippage, fee);\\n    }\\n\\n    /**\\n     * @dev Before Hop bridger hook\\n     */\\n    function _beforeHopBridger(address token, uint256 amount, uint256 slippage, uint256 fee) internal virtual {\\n        _beforeBaseBridgeTask(token, amount, slippage, fee);\\n        if (tokenHopEntrypoint[token] == address(0)) revert TaskMissingHopEntrypoint();\\n    }\\n\\n    /**\\n     * @dev After Hop bridger hook\\n     */\\n    function _afterHopBridger(address token, uint256 amount, uint256 slippage, uint256 fee) internal virtual {\\n        _afterBaseBridgeTask(token, amount, slippage, fee);\\n    }\\n\\n    /**\\n     * @dev Sets the relayer address, only used when bridging from L1 to L2\\n     */\\n    function _setRelayer(address _relayer) internal {\\n        relayer = _relayer;\\n        emit RelayerSet(_relayer);\\n    }\\n\\n    /**\\n     * @dev Sets the max deadline\\n     */\\n    function _setMaxDeadline(uint256 _maxDeadline) internal {\\n        if (_maxDeadline == 0) revert TaskMaxDeadlineZero();\\n        maxDeadline = _maxDeadline;\\n        emit MaxDeadlineSet(_maxDeadline);\\n    }\\n\\n    /**\\n     * @dev Set a Hop entrypoint for a token\\n     * @param token Address of the token to set a Hop entrypoint for\\n     * @param entrypoint Hop entrypoint to be set\\n     */\\n    function _setTokenHopEntrypoint(address token, address entrypoint) internal {\\n        if (token == address(0)) revert TaskTokenZero();\\n        tokenHopEntrypoint[token] = entrypoint;\\n        emit TokenHopEntrypointSet(token, entrypoint);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bridge/WormholeBridger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-connectors/contracts/interfaces/bridge/IWormholeConnector.sol';\\n\\nimport './BaseBridgeTask.sol';\\nimport '../interfaces/bridge/IWormholeBridger.sol';\\n\\n/**\\n * @title Wormhole bridger\\n * @dev Task that extends the bridger task to use Wormhole\\n */\\ncontract WormholeBridger is IWormholeBridger, BaseBridgeTask {\\n    using FixedPoint for uint256;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('WORMHOLE_BRIDGER');\\n\\n    /**\\n     * @dev Wormhole bridge config. Only used in the initializer.\\n     */\\n    struct WormholeBridgeConfig {\\n        BaseBridgeConfig baseBridgeConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the Wormhole bridger\\n     * @param config Wormhole bridge config\\n     */\\n    function initialize(WormholeBridgeConfig memory config) external virtual initializer {\\n        __WormholeBridger_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Wormhole bridger. It does call upper contracts initializers.\\n     * @param config Wormhole bridge config\\n     */\\n    function __WormholeBridger_init(WormholeBridgeConfig memory config) internal onlyInitializing {\\n        __BaseBridgeTask_init(config.baseBridgeConfig);\\n        __WormholeBridger_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Wormhole bridger. It does not call upper contracts initializers.\\n     * @param config Wormhole bridge config\\n     */\\n    function __WormholeBridger_init_unchained(WormholeBridgeConfig memory config) internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Execute Wormhole bridger\\n     */\\n    function call(address token, uint256 amount, uint256 fee) external override authP(authParams(token, amount, fee)) {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeWormholeBridger(token, amount, fee);\\n\\n        uint256 minAmountOut = amount - fee;\\n        bytes memory connectorData = abi.encodeWithSelector(\\n            IWormholeConnector.execute.selector,\\n            getDestinationChain(token),\\n            token,\\n            amount,\\n            minAmountOut,\\n            recipient\\n        );\\n\\n        ISmartVault(smartVault).execute(connector, connectorData);\\n        _afterWormholeBridger(token, amount, fee);\\n    }\\n\\n    /**\\n     * @dev Before Wormhole bridger hook\\n     */\\n    function _beforeWormholeBridger(address token, uint256 amount, uint256 fee) internal virtual {\\n        // Wormhole does not support specifying slippage\\n        _beforeBaseBridgeTask(token, amount, 0, fee);\\n    }\\n\\n    /**\\n     * @dev After Wormhole bridger hook\\n     */\\n    function _afterWormholeBridger(address token, uint256 amount, uint256 fee) internal virtual {\\n        // Wormhole does not support specifying slippage\\n        _afterBaseBridgeTask(token, amount, 0, fee);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/base/IBaseTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '@mimic-fi/v3-authorizer/contracts/interfaces/IAuthorized.sol';\\n\\n/**\\n * @dev Base task interface\\n */\\ninterface IBaseTask is IAuthorized {\\n    // Execution type serves for relayers in order to distinguish how each task must be executed\\n    // solhint-disable-next-line func-name-mixedcase\\n    function EXECUTION_TYPE() external view returns (bytes32);\\n\\n    /**\\n     * @dev The balance connectors are the same\\n     */\\n    error TaskSameBalanceConnectors(bytes32 connectorId);\\n\\n    /**\\n     * @dev The smart vault's price oracle is not set\\n     */\\n    error TaskSmartVaultPriceOracleNotSet(address smartVault);\\n\\n    /**\\n     * @dev Emitted every time a task is executed\\n     */\\n    event Executed();\\n\\n    /**\\n     * @dev Emitted every time the balance connectors are set\\n     */\\n    event BalanceConnectorsSet(bytes32 indexed previous, bytes32 indexed next);\\n\\n    /**\\n     * @dev Tells the address of the Smart Vault tied to it, it cannot be changed\\n     */\\n    function smartVault() external view returns (address);\\n\\n    /**\\n     * @dev Tells the address from where the token amounts to execute this task are fetched.\\n     * This address must the the Smart Vault in case the previous balance connector is set.\\n     */\\n    function getTokensSource() external view returns (address);\\n\\n    /**\\n     * @dev Tells the amount a task should use for a token\\n     * @param token Address of the token being queried\\n     */\\n    function getTaskAmount(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the previous and next balance connectors id of the previous task in the workflow\\n     */\\n    function getBalanceConnectors() external view returns (bytes32 previous, bytes32 next);\\n\\n    /**\\n     * @dev Sets the balance connector IDs\\n     * @param previous Balance connector id of the previous task in the workflow\\n     * @param next Balance connector id of the next task in the workflow\\n     */\\n    function setBalanceConnectors(bytes32 previous, bytes32 next) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/base/IGasLimitedTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseTask.sol';\\n\\n/**\\n * @dev Gas limited task interface\\n */\\ninterface IGasLimitedTask is IBaseTask {\\n    /**\\n     * @dev The tx initial gas cache has not been initialized\\n     */\\n    error TaskGasNotInitialized();\\n\\n    /**\\n     * @dev The gas price used is greater than the limit\\n     */\\n    error TaskGasPriceLimitExceeded(uint256 gasPrice, uint256 gasPriceLimit);\\n\\n    /**\\n     * @dev The priority fee used is greater than the priority fee limit\\n     */\\n    error TaskPriorityFeeLimitExceeded(uint256 priorityFee, uint256 priorityFeeLimit);\\n\\n    /**\\n     * @dev The transaction cost is greater than the transaction cost limit\\n     */\\n    error TaskTxCostLimitExceeded(uint256 txCost, uint256 txCostLimit);\\n\\n    /**\\n     * @dev The transaction cost percentage is greater than the transaction cost limit percentage\\n     */\\n    error TaskTxCostLimitPctExceeded(uint256 txCostPct, uint256 txCostLimitPct);\\n\\n    /**\\n     * @dev The new transaction cost limit percentage is greater than one\\n     */\\n    error TaskTxCostLimitPctAboveOne();\\n\\n    /**\\n     * @dev Emitted every time the gas limits are set\\n     */\\n    event GasLimitsSet(uint256 gasPriceLimit, uint256 priorityFeeLimit, uint256 txCostLimit, uint256 txCostLimitPct);\\n\\n    /**\\n     * @dev Tells the gas limits config\\n     */\\n    function getGasLimits()\\n        external\\n        view\\n        returns (uint256 gasPriceLimit, uint256 priorityFeeLimit, uint256 txCostLimit, uint256 txCostLimitPct);\\n\\n    /**\\n     * @dev Sets the gas limits config\\n     * @param newGasPriceLimit New gas price limit to be set\\n     * @param newPriorityFeeLimit New priority fee limit to be set\\n     * @param newTxCostLimit New tx cost limit to be set\\n     * @param newTxCostLimitPct New tx cost percentage limit to be set\\n     */\\n    function setGasLimits(\\n        uint256 newGasPriceLimit,\\n        uint256 newPriorityFeeLimit,\\n        uint256 newTxCostLimit,\\n        uint256 newTxCostLimitPct\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/base/IPausableTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseTask.sol';\\n\\n/**\\n * @dev Pausable task interface\\n */\\ninterface IPausableTask is IBaseTask {\\n    /**\\n     * @dev The task is paused\\n     */\\n    error TaskPaused();\\n\\n    /**\\n     * @dev The task is unpaused\\n     */\\n    error TaskUnpaused();\\n\\n    /**\\n     * @dev Emitted every time a task is paused\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted every time a task is unpaused\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Tells the task is paused or not\\n     */\\n    function isPaused() external view returns (bool);\\n\\n    /**\\n     * @dev Pauses a task\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses a task\\n     */\\n    function unpause() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/base/ITimeLockedTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseTask.sol';\\n\\n/**\\n * @dev Time-locked task interface\\n */\\ninterface ITimeLockedTask is IBaseTask {\\n    /**\\n     * @dev The time lock frequency mode requested is invalid\\n     */\\n    error TaskInvalidFrequencyMode(uint8 mode);\\n\\n    /**\\n     * @dev The time lock frequency is not valid\\n     */\\n    error TaskInvalidFrequency(uint8 mode, uint256 frequency);\\n\\n    /**\\n     * @dev The time lock allowed date is not valid\\n     */\\n    error TaskInvalidAllowedDate(uint8 mode, uint256 date);\\n\\n    /**\\n     * @dev The time lock allowed window is not valid\\n     */\\n    error TaskInvalidAllowedWindow(uint8 mode, uint256 window);\\n\\n    /**\\n     * @dev The time lock is still active\\n     */\\n    error TaskTimeLockActive(uint256 currentTimestamp, uint256 expiration);\\n\\n    /**\\n     * @dev Emitted every time a new time lock is set\\n     */\\n    event TimeLockSet(uint8 mode, uint256 frequency, uint256 allowedAt, uint256 window);\\n\\n    /**\\n     * @dev Emitted every time a new expiration timestamp is set\\n     */\\n    event TimeLockAllowedAtSet(uint256 allowedAt);\\n\\n    /**\\n     * @dev Tells all the time-lock related information\\n     */\\n    function getTimeLock() external view returns (uint8 mode, uint256 frequency, uint256 allowedAt, uint256 window);\\n\\n    /**\\n     * @dev Sets the time-lock\\n     * @param mode Time lock mode\\n     * @param frequency Time lock frequency\\n     * @param allowedAt Future timestamp since when the task can be executed\\n     * @param window Period in seconds during when a time-locked task can be executed since the allowed timestamp\\n     */\\n    function setTimeLock(uint8 mode, uint256 frequency, uint256 allowedAt, uint256 window) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/base/ITokenIndexedTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseTask.sol';\\n\\n/**\\n * @dev Token indexed task interface\\n */\\ninterface ITokenIndexedTask is IBaseTask {\\n    /**\\n     * @dev Acceptance list types: either deny-list to express \\\"all except\\\" or allow-list to express \\\"only\\\"\\n     */\\n    enum TokensAcceptanceType {\\n        DenyList,\\n        AllowList\\n    }\\n\\n    /**\\n     * @dev The acceptance token is zero\\n     */\\n    error TaskAcceptanceTokenZero();\\n\\n    /**\\n     * @dev The tokens acceptance input length mismatch\\n     */\\n    error TaskAcceptanceInputLengthMismatch();\\n\\n    /**\\n     * @dev The token is not allowed\\n     */\\n    error TaskTokenNotAllowed(address token);\\n\\n    /**\\n     * @dev Emitted every time a tokens acceptance type is set\\n     */\\n    event TokensAcceptanceTypeSet(TokensAcceptanceType acceptanceType);\\n\\n    /**\\n     * @dev Emitted every time a token is added or removed from the acceptance list\\n     */\\n    event TokensAcceptanceListSet(address indexed token, bool added);\\n\\n    /**\\n     * @dev Tells the acceptance type of the config\\n     */\\n    function tokensAcceptanceType() external view returns (TokensAcceptanceType);\\n\\n    /**\\n     * @dev Tells whether a token is allowed or not\\n     * @param token Address of the token being queried\\n     */\\n    function isTokenAllowed(address token) external view returns (bool);\\n\\n    /**\\n     * @dev Sets the tokens acceptance type of the task\\n     * @param newTokensAcceptanceType New token acceptance type to be set\\n     */\\n    function setTokensAcceptanceType(TokensAcceptanceType newTokensAcceptanceType) external;\\n\\n    /**\\n     * @dev Updates the list of tokens of the tokens acceptance list\\n     * @param tokens List of tokens to be updated from the acceptance list\\n     * @param added Whether each of the given tokens should be added or removed from the list\\n     */\\n    function setTokensAcceptanceList(address[] memory tokens, bool[] memory added) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/base/ITokenThresholdTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General External License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General External License for more details.\\n\\n// You should have received a copy of the GNU General External License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseTask.sol';\\n\\n/**\\n * @dev Token threshold task interface\\n */\\ninterface ITokenThresholdTask is IBaseTask {\\n    /**\\n     * @dev The token threshold token is zero\\n     */\\n    error TaskThresholdTokenZero();\\n\\n    /**\\n     * @dev The token threshold to be set is invalid\\n     */\\n    error TaskInvalidThresholdInput(address token, uint256 min, uint256 max);\\n\\n    /**\\n     * @dev The token threshold has not been met\\n     */\\n    error TaskTokenThresholdNotMet(address token, uint256 amount, uint256 min, uint256 max);\\n\\n    /**\\n     * @dev Emitted every time a default threshold is set\\n     */\\n    event DefaultTokenThresholdSet(address token, uint256 min, uint256 max);\\n\\n    /**\\n     * @dev Emitted every time a token threshold is set\\n     */\\n    event CustomTokenThresholdSet(address indexed token, address thresholdToken, uint256 min, uint256 max);\\n\\n    /**\\n     * @dev Tells the default token threshold\\n     */\\n    function defaultTokenThreshold() external view returns (address thresholdToken, uint256 min, uint256 max);\\n\\n    /**\\n     * @dev Tells the custom threshold defined for a specific token\\n     * @param token Address of the token being queried\\n     */\\n    function customTokenThreshold(address token)\\n        external\\n        view\\n        returns (address thresholdToken, uint256 min, uint256 max);\\n\\n    /**\\n     * @dev Tells the threshold that should be used for a token\\n     * @param token Address of the token being queried\\n     */\\n    function getTokenThreshold(address token) external view returns (address thresholdToken, uint256 min, uint256 max);\\n\\n    /**\\n     * @dev Sets a new default threshold config\\n     * @param thresholdToken New threshold token to be set\\n     * @param min New threshold minimum to be set\\n     * @param max New threshold maximum to be set\\n     */\\n    function setDefaultTokenThreshold(address thresholdToken, uint256 min, uint256 max) external;\\n\\n    /**\\n     * @dev Sets a custom token threshold\\n     * @param token Address of the token to set a custom threshold\\n     * @param thresholdToken New custom threshold token to be set\\n     * @param min New custom threshold minimum to be set\\n     * @param max New custom threshold maximum to be set\\n     */\\n    function setCustomTokenThreshold(address token, address thresholdToken, uint256 min, uint256 max) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/base/IVolumeLimitedTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseTask.sol';\\n\\n/**\\n * @dev Volume limited task interface\\n */\\ninterface IVolumeLimitedTask is IBaseTask {\\n    /**\\n     * @dev The volume limit token is zero\\n     */\\n    error TaskVolumeLimitTokenZero();\\n\\n    /**\\n     * @dev The volume limit to be set is invalid\\n     */\\n    error TaskInvalidVolumeLimitInput(address token, uint256 amount, uint256 period);\\n\\n    /**\\n     * @dev The volume limit has been exceeded\\n     */\\n    error TaskVolumeLimitExceeded(address token, uint256 limit, uint256 volume);\\n\\n    /**\\n     * @dev Emitted every time a default volume limit is set\\n     */\\n    event DefaultVolumeLimitSet(address indexed limitToken, uint256 amount, uint256 period);\\n\\n    /**\\n     * @dev Emitted every time a custom volume limit is set\\n     */\\n    event CustomVolumeLimitSet(address indexed token, address indexed limitToken, uint256 amount, uint256 period);\\n\\n    /**\\n     * @dev Tells the default volume limit set\\n     */\\n    function defaultVolumeLimit()\\n        external\\n        view\\n        returns (address limitToken, uint256 amount, uint256 accrued, uint256 period, uint256 nextResetTime);\\n\\n    /**\\n     * @dev Tells the custom volume limit set for a specific token\\n     * @param token Address of the token being queried\\n     */\\n    function customVolumeLimit(address token)\\n        external\\n        view\\n        returns (address limitToken, uint256 amount, uint256 accrued, uint256 period, uint256 nextResetTime);\\n\\n    /**\\n     * @dev Tells the volume limit that should be used for a token\\n     * @param token Address of the token being queried\\n     */\\n    function getVolumeLimit(address token)\\n        external\\n        view\\n        returns (address limitToken, uint256 amount, uint256 accrued, uint256 period, uint256 nextResetTime);\\n\\n    /**\\n     * @dev Sets a the default volume limit config\\n     * @param limitToken Address of the token to measure the volume limit\\n     * @param limitAmount Amount of tokens to be applied for the volume limit\\n     * @param limitPeriod Frequency to Amount of tokens to be applied for the volume limit\\n     */\\n    function setDefaultVolumeLimit(address limitToken, uint256 limitAmount, uint256 limitPeriod) external;\\n\\n    /**\\n     * @dev Sets a custom volume limit\\n     * @param token Address of the token to set a custom volume limit for\\n     * @param limitToken Address of the token to measure the volume limit\\n     * @param limitAmount Amount of tokens to be applied for the volume limit\\n     * @param limitPeriod Frequency to Amount of tokens to be applied for the volume limit\\n     */\\n    function setCustomVolumeLimit(address token, address limitToken, uint256 limitAmount, uint256 limitPeriod) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/bridge/IAxelarBridger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseBridgeTask.sol';\\n\\n/**\\n * @dev Axelar bridger task interface\\n */\\ninterface IAxelarBridger is IBaseBridgeTask {\\n    /**\\n     * @dev Execute Axelar bridger task\\n     */\\n    function call(address token, uint256 amountIn) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/bridge/IBaseBridgeTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '../ITask.sol';\\n\\n/**\\n * @dev Base bridge task interface\\n */\\ninterface IBaseBridgeTask is ITask {\\n    /**\\n     * @dev The token is zero\\n     */\\n    error TaskTokenZero();\\n\\n    /**\\n     * @dev The amount is zero\\n     */\\n    error TaskAmountZero();\\n\\n    /**\\n     * @dev The recipient is zero\\n     */\\n    error TaskRecipientZero();\\n\\n    /**\\n     * @dev The connector is zero\\n     */\\n    error TaskConnectorZero();\\n\\n    /**\\n     * @dev The next balance connector is not zero\\n     */\\n    error TaskNextConnectorNotZero(bytes32 id);\\n\\n    /**\\n     * @dev The destination chain is not set\\n     */\\n    error TaskDestinationChainNotSet();\\n\\n    /**\\n     * @dev The destination chain id is the same as the current chain id\\n     */\\n    error TaskBridgeCurrentChainId(uint256 destinationChain);\\n\\n    /**\\n     * @dev The slippage to be set is greater than one\\n     */\\n    error TaskSlippageAboveOne();\\n\\n    /**\\n     * @dev The requested slippage is greater than the maximum slippage\\n     */\\n    error TaskSlippageAboveMax(uint256 slippage, uint256 maxSlippage);\\n\\n    /**\\n     * @dev The requested fee is greater than the maximum fee\\n     */\\n    error TaskFeeAboveMax(uint256 fee, uint256 maxFee);\\n\\n    /**\\n     * @dev The max fee token is zero but the max fee value is not zero\\n     */\\n    error TaskInvalidMaxFee();\\n\\n    /**\\n     * @dev Emitted every time the connector is set\\n     */\\n    event ConnectorSet(address indexed connector);\\n\\n    /**\\n     * @dev Emitted every time the recipient is set\\n     */\\n    event RecipientSet(address indexed recipient);\\n\\n    /**\\n     * @dev Emitted every time the default destination chain is set\\n     */\\n    event DefaultDestinationChainSet(uint256 indexed defaultDestinationChain);\\n\\n    /**\\n     * @dev Emitted every time the default max slippage is set\\n     */\\n    event DefaultMaxSlippageSet(uint256 maxSlippage);\\n\\n    /**\\n     * @dev Emitted every time the default max fee is set\\n     */\\n    event DefaultMaxFeeSet(address indexed maxFeeToken, uint256 amount);\\n\\n    /**\\n     * @dev Emitted every time a custom destination chain is set for a token\\n     */\\n    event CustomDestinationChainSet(address indexed token, uint256 indexed destinationChain);\\n\\n    /**\\n     * @dev Emitted every time a custom max slippage is set\\n     */\\n    event CustomMaxSlippageSet(address indexed token, uint256 maxSlippage);\\n\\n    /**\\n     * @dev Emitted every time a custom max fee is set\\n     */\\n    event CustomMaxFeeSet(address indexed token, address indexed maxFeeToken, uint256 amount);\\n\\n    /**\\n     * @dev Tells the connector tied to the task\\n     */\\n    function connector() external view returns (address);\\n\\n    /**\\n     * @dev Tells the address of the allowed recipient\\n     */\\n    function recipient() external view returns (address);\\n\\n    /**\\n     * @dev Tells the default destination chain\\n     */\\n    function defaultDestinationChain() external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the default max slippage\\n     */\\n    function defaultMaxSlippage() external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the default max fee\\n     */\\n    function defaultMaxFee() external view returns (address maxFeeToken, uint256 amount);\\n\\n    /**\\n     * @dev Tells the destination chain defined for a specific token\\n     * @param token Address of the token being queried\\n     */\\n    function customDestinationChain(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the max slippage defined for a specific token\\n     * @param token Address of the token being queried\\n     */\\n    function customMaxSlippage(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the max fee defined for a specific token\\n     * @param token Address of the token being queried\\n     */\\n    function customMaxFee(address token) external view returns (address maxFeeToken, uint256 amount);\\n\\n    /**\\n     * @dev Tells the destination chain that should be used for a token\\n     * @param token Address of the token to get the destination chain for\\n     */\\n    function getDestinationChain(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the max slippage that should be used for a token\\n     * @param token Address of the token to get the max slippage for\\n     */\\n    function getMaxSlippage(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the max fee that should be used for a token\\n     * @param token Address of the token to get the max fee for\\n     */\\n    function getMaxFee(address token) external view returns (address maxFeeToken, uint256 amount);\\n\\n    /**\\n     * @dev Sets a new connector\\n     * @param newConnector Address of the connector to be set\\n     */\\n    function setConnector(address newConnector) external;\\n\\n    /**\\n     * @dev Sets the recipient address\\n     * @param recipient Address of the new recipient to be set\\n     */\\n    function setRecipient(address recipient) external;\\n\\n    /**\\n     * @dev Sets the default destination chain\\n     * @param destinationChain Default destination chain to be set\\n     */\\n    function setDefaultDestinationChain(uint256 destinationChain) external;\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     * @param maxSlippage Default max slippage to be set\\n     */\\n    function setDefaultMaxSlippage(uint256 maxSlippage) external;\\n\\n    /**\\n     * @dev Sets the default max fee\\n     * @param maxFeeToken Default max fee token to be set\\n     * @param amount Default max fee amount to be set\\n     */\\n    function setDefaultMaxFee(address maxFeeToken, uint256 amount) external;\\n\\n    /**\\n     * @dev Sets a custom destination chain for a token\\n     * @param token Address of the token to set a custom destination chain for\\n     * @param destinationChain Destination chain to be set\\n     */\\n    function setCustomDestinationChain(address token, uint256 destinationChain) external;\\n\\n    /**\\n     * @dev Sets a custom max slippage\\n     * @param token Address of the token to set a custom max slippage for\\n     * @param maxSlippage Max slippage to be set\\n     */\\n    function setCustomMaxSlippage(address token, uint256 maxSlippage) external;\\n\\n    /**\\n     * @dev Sets a custom max fee\\n     * @param token Address of the token to set a custom max fee for\\n     * @param maxFeeToken Max fee token to be set for the given token\\n     * @param amount Max fee amount to be set for the given token\\n     */\\n    function setCustomMaxFee(address token, address maxFeeToken, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/bridge/IConnextBridger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseBridgeTask.sol';\\n\\n/**\\n * @dev Connext bridger task interface\\n */\\ninterface IConnextBridger is IBaseBridgeTask {\\n    /**\\n     * @dev Execute Connext bridger task\\n     */\\n    function call(address token, uint256 amountIn, uint256 slippage, uint256 relayerFee) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/bridge/IHopBridger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseBridgeTask.sol';\\n\\n/**\\n * @dev Hop bridger task interface\\n */\\ninterface IHopBridger is IBaseBridgeTask {\\n    /**\\n     * @dev The max deadline is zero\\n     */\\n    error TaskMaxDeadlineZero();\\n\\n    /**\\n     * @dev The Hop entrypoint is zero\\n     */\\n    error TaskMissingHopEntrypoint();\\n\\n    /**\\n     * @dev Emitted every time the relayer is set\\n     */\\n    event RelayerSet(address indexed relayer);\\n\\n    /**\\n     * @dev Emitted every time the max deadline is set\\n     */\\n    event MaxDeadlineSet(uint256 maxDeadline);\\n\\n    /**\\n     * @dev Emitted every time a Hop entrypoint is set for a token\\n     */\\n    event TokenHopEntrypointSet(address indexed token, address indexed entrypoint);\\n\\n    /**\\n     * @dev Tells the relayer address, only used when bridging from L1 to L2\\n     */\\n    function relayer() external view returns (address);\\n\\n    /**\\n     * @dev Tells the max deadline\\n     */\\n    function maxDeadline() external view returns (uint256);\\n\\n    /**\\n     * @dev Tells Hop entrypoint set for a token\\n     */\\n    function tokenHopEntrypoint(address token) external view returns (address entrypoint);\\n\\n    /**\\n     * @dev Sets the relayer, only used when bridging from L1 to L2\\n     * @param relayer New relayer address to be set\\n     */\\n    function setRelayer(address relayer) external;\\n\\n    /**\\n     * @dev Sets the max deadline\\n     * @param maxDeadline New max deadline to be set\\n     */\\n    function setMaxDeadline(uint256 maxDeadline) external;\\n\\n    /**\\n     * @dev Sets an entrypoint for a tokens\\n     * @param token Token address to set a Hop entrypoint for\\n     * @param entrypoint Hop entrypoint address to be set for a token\\n     */\\n    function setTokenHopEntrypoint(address token, address entrypoint) external;\\n\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(address token, uint256 amountIn, uint256 slippage, uint256 fee) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/bridge/IWormholeBridger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseBridgeTask.sol';\\n\\n/**\\n * @dev Wormhole bridger task interface\\n */\\ninterface IWormholeBridger is IBaseBridgeTask {\\n    /**\\n     * @dev Execute Wormhole bridger task\\n     */\\n    function call(address token, uint256 amountIn, uint256 fee) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './base/IBaseTask.sol';\\nimport './base/IGasLimitedTask.sol';\\nimport './base/ITimeLockedTask.sol';\\nimport './base/ITokenIndexedTask.sol';\\nimport './base/ITokenThresholdTask.sol';\\nimport './base/IVolumeLimitedTask.sol';\\n\\n// solhint-disable no-empty-blocks\\n\\n/**\\n * @dev Task interface\\n */\\ninterface ITask is\\n    IBaseTask,\\n    IGasLimitedTask,\\n    ITimeLockedTask,\\n    ITokenIndexedTask,\\n    ITokenThresholdTask,\\n    IVolumeLimitedTask\\n{\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidity/balancer/IBalancerBoostedPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport './IBalancerPool.sol';\\n\\ninterface IBalancerBoostedPool is IBalancerPool {\\n    function getRate() external view returns (uint256);\\n\\n    function getBptIndex() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidity/balancer/IBalancerBPTExiter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../ITask.sol';\\n\\n/**\\n * @dev BPT exiter task interface\\n */\\ninterface IBalancerBPTExiter is ITask {\\n    /**\\n     * @dev The token is zero\\n     */\\n    error TaskTokenZero();\\n\\n    /**\\n     * @dev The amount is zero\\n     */\\n    error TaskAmountZero();\\n\\n    /**\\n     * @dev The post balance is lower than the pre balance\\n     */\\n    error TaskPostBalanceUnexpected(uint256 postBalance, uint256 preBalance);\\n\\n    /**\\n     * @dev The amount out is lower than the minimum amount out\\n     */\\n    error TaskBadAmountOut(uint256 amountOut, uint256 minAmountOut);\\n\\n    /**\\n     * @dev Tells the address of the Balancer vault. It cannot be changed.\\n     */\\n    function balancerVault() external returns (address);\\n\\n    /**\\n     * @dev Execute Balancer BPT exiter\\n     */\\n    function call(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidity/balancer/IBalancerLinearPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport './IBalancerPool.sol';\\n\\ninterface IBalancerLinearPool is IBalancerPool {\\n    function getRate() external view returns (uint256);\\n\\n    function getMainToken() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidity/balancer/IBalancerPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IBalancerPool is IERC20 {\\n    function getPoolId() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidity/balancer/IBalancerVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IBalancerVault {\\n    function getPool(bytes32 poolId) external view returns (address, uint256);\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (IERC20[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\\n\\n    struct JoinPoolRequest {\\n        IERC20[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    function joinPool(bytes32 poolId, address sender, address recipient, JoinPoolRequest memory request)\\n        external\\n        payable;\\n\\n    struct ExitPoolRequest {\\n        IERC20[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    function exitPool(bytes32 poolId, address sender, address payable recipient, ExitPoolRequest memory request)\\n        external;\\n\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        address assetIn;\\n        address assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function swap(SingleSwap memory singleSwap, FundManagement memory funds, uint256 limit, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        address[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidity/convex/IBaseConvexTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../ITask.sol';\\n\\n/**\\n * @dev Base Convex task interface\\n */\\ninterface IBaseConvexTask is ITask {\\n    /**\\n     * @dev The token is zero\\n     */\\n    error TaskTokenZero();\\n\\n    /**\\n     * @dev The connector is zero\\n     */\\n    error TaskConnectorZero();\\n\\n    /**\\n     * @dev Emitted every time the connector is set\\n     */\\n    event ConnectorSet(address indexed connector);\\n\\n    /**\\n     * @dev Tells the connector tied to the task\\n     */\\n    function connector() external view returns (address);\\n\\n    /**\\n     * @dev Sets a new connector\\n     * @param newConnector Address of the connector to be set\\n     */\\n    function setConnector(address newConnector) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidity/convex/IConvexClaimer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseConvexTask.sol';\\n\\n/**\\n * @dev Convex claimer task interface\\n */\\ninterface IConvexClaimer is IBaseConvexTask {\\n    /**\\n     * @dev The amount is not zero\\n     */\\n    error TaskAmountNotZero();\\n\\n    /**\\n     * @dev The previous balance connector is not zero\\n     */\\n    error TaskPreviousConnectorNotZero(bytes32 id);\\n\\n    /**\\n     * @dev The length of the claim result mismatch\\n     */\\n    error TaskClaimResultLengthMismatch();\\n\\n    /**\\n     * @dev Executes the Convex claimer task\\n     */\\n    function call(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidity/convex/IConvexExiter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseConvexTask.sol';\\n\\n/**\\n * @dev Convex exiter task interface\\n */\\ninterface IConvexExiter is IBaseConvexTask {\\n    /**\\n     * @dev The amount is zero\\n     */\\n    error TaskAmountZero();\\n\\n    /**\\n     * @dev Executes the Convex exiter task\\n     */\\n    function call(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidity/convex/IConvexJoiner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseConvexTask.sol';\\n\\n/**\\n * @dev Convex joiner task interface\\n */\\ninterface IConvexJoiner is IBaseConvexTask {\\n    /**\\n     * @dev The amount is zero\\n     */\\n    error TaskAmountZero();\\n\\n    /**\\n     * @dev Executes the Convex joiner task\\n     */\\n    function call(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidity/curve/IBaseCurveTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../ITask.sol';\\n\\n/**\\n * @dev Base Curve task interface\\n */\\ninterface IBaseCurveTask is ITask {\\n    /**\\n     * @dev The token is zero\\n     */\\n    error TaskTokenZero();\\n\\n    /**\\n     * @dev The amount is zero\\n     */\\n    error TaskAmountZero();\\n\\n    /**\\n     * @dev The connector is zero\\n     */\\n    error TaskConnectorZero();\\n\\n    /**\\n     * @dev The token out is not set\\n     */\\n    error TaskTokenOutNotSet();\\n\\n    /**\\n     * @dev The slippage to be set is greater than one\\n     */\\n    error TaskSlippageAboveOne();\\n\\n    /**\\n     * @dev The requested slippage is greater than the maximum slippage\\n     */\\n    error TaskSlippageAboveMax(uint256 slippage, uint256 maxSlippage);\\n\\n    /**\\n     * @dev Emitted every time the connector is set\\n     */\\n    event ConnectorSet(address indexed connector);\\n\\n    /**\\n     * @dev Emitted every time the default token out is set\\n     */\\n    event DefaultTokenOutSet(address indexed tokenOut);\\n\\n    /**\\n     * @dev Emitted every time the default max slippage is set\\n     */\\n    event DefaultMaxSlippageSet(uint256 maxSlippage);\\n\\n    /**\\n     * @dev Emitted every time a custom token out is set\\n     */\\n    event CustomTokenOutSet(address indexed token, address tokenOut);\\n\\n    /**\\n     * @dev Emitted every time a custom max slippage is set\\n     */\\n    event CustomMaxSlippageSet(address indexed token, uint256 maxSlippage);\\n\\n    /**\\n     * @dev Tells the connector tied to the task\\n     */\\n    function connector() external view returns (address);\\n\\n    /**\\n     * @dev Tells the default token out\\n     */\\n    function defaultTokenOut() external view returns (address);\\n\\n    /**\\n     * @dev Tells the default token threshold\\n     */\\n    function defaultMaxSlippage() external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the token out defined for a specific token\\n     * @param token Address of the token being queried\\n     */\\n    function customTokenOut(address token) external view returns (address);\\n\\n    /**\\n     * @dev Tells the max slippage defined for a specific token\\n     * @param token Address of the token being queried\\n     */\\n    function customMaxSlippage(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the token out that should be used for a token\\n     */\\n    function getTokenOut(address token) external view returns (address);\\n\\n    /**\\n     * @dev Tells the max slippage that should be used for a token\\n     */\\n    function getMaxSlippage(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a new connector\\n     * @param newConnector Address of the connector to be set\\n     */\\n    function setConnector(address newConnector) external;\\n\\n    /**\\n     * @dev Sets the default token out\\n     * @param tokenOut Address of the default token out to be set\\n     */\\n    function setDefaultTokenOut(address tokenOut) external;\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     * @param maxSlippage Default max slippage to be set\\n     */\\n    function setDefaultMaxSlippage(uint256 maxSlippage) external;\\n\\n    /**\\n     * @dev Sets a custom token out\\n     * @param token Address of the token to set a custom token out for\\n     * @param tokenOut Address of the token out to be set\\n     */\\n    function setCustomTokenOut(address token, address tokenOut) external;\\n\\n    /**\\n     * @dev Sets a custom max slippage\\n     * @param token Address of the token to set a custom max slippage for\\n     * @param maxSlippage Max slippage to be set\\n     */\\n    function setCustomMaxSlippage(address token, uint256 maxSlippage) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidity/curve/ICurve2CrvExiter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseCurveTask.sol';\\n\\n/**\\n * @dev Curve 2CRV exiter task interface\\n */\\ninterface ICurve2CrvExiter is IBaseCurveTask {\\n    /**\\n     * @dev Executes the Curve 2CRV exiter task\\n     */\\n    function call(address token, uint256 amount, uint256 slippage) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidity/curve/ICurve2CrvJoiner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseCurveTask.sol';\\n\\n/**\\n * @dev Curve 2CRV joiner task interface\\n */\\ninterface ICurve2CrvJoiner is IBaseCurveTask {\\n    /**\\n     * @dev Executes the Curve 2CRV joiner task\\n     */\\n    function call(address token, uint256 amount, uint256 slippage) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/primitives/ICollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '../ITask.sol';\\n\\n/**\\n * @dev Collector task interface\\n */\\ninterface ICollector is ITask {\\n    /**\\n     * @dev The token is zero\\n     */\\n    error TaskTokenZero();\\n\\n    /**\\n     * @dev The amount is zero\\n     */\\n    error TaskAmountZero();\\n\\n    /**\\n     * @dev The tokens source is zero\\n     */\\n    error TaskTokensSourceZero();\\n\\n    /**\\n     * @dev The previous balance connector is not zero\\n     */\\n    error TaskPreviousConnectorNotZero(bytes32 id);\\n\\n    /**\\n     * @dev Emitted every time the tokens source is set\\n     */\\n    event TokensSourceSet(address indexed tokensSource);\\n\\n    /**\\n     * @dev Sets the tokens source address\\n     * @param tokensSource Address of the tokens source to be set\\n     */\\n    function setTokensSource(address tokensSource) external;\\n\\n    /**\\n     * @dev Executes the withdrawer task\\n     */\\n    function call(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/primitives/IUnwrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '../ITask.sol';\\n\\n/**\\n * @dev Unwrapper task interface\\n */\\ninterface IUnwrapper is ITask {\\n    /**\\n     * @dev The amount is zero\\n     */\\n    error TaskAmountZero();\\n\\n    /**\\n     * @dev The token is not the wrapped native token\\n     */\\n    error TaskTokenNotWrapped();\\n\\n    /**\\n     * @dev Executes the unwrapper task\\n     */\\n    function call(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/primitives/IWithdrawer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '../ITask.sol';\\n\\n/**\\n * @dev Withdrawer task interface\\n */\\ninterface IWithdrawer is ITask {\\n    /**\\n     * @dev The token is zero\\n     */\\n    error TaskTokenZero();\\n\\n    /**\\n     * @dev The amount is zero\\n     */\\n    error TaskAmountZero();\\n\\n    /**\\n     * @dev The recipient is zero\\n     */\\n    error TaskRecipientZero();\\n\\n    /**\\n     * @dev The recipient to be set is the smart vault\\n     */\\n    error TaskRecipientEqualsSmartVault(address recipient);\\n\\n    /**\\n     * @dev The next balance connector is not zero\\n     */\\n    error TaskNextConnectorNotZero(bytes32 id);\\n\\n    /**\\n     * @dev Emitted every time the recipient is set\\n     */\\n    event RecipientSet(address indexed recipient);\\n\\n    /**\\n     * @dev Tells the address of the allowed recipient\\n     */\\n    function recipient() external view returns (address);\\n\\n    /**\\n     * @dev Sets the recipient address\\n     * @param recipient Address of the new recipient to be set\\n     */\\n    function setRecipient(address recipient) external;\\n\\n    /**\\n     * @dev Executes the withdrawer task\\n     */\\n    function call(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/primitives/IWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '../ITask.sol';\\n\\n/**\\n * @dev Wrapper task interface\\n */\\ninterface IWrapper is ITask {\\n    /**\\n     * @dev The amount is zero\\n     */\\n    error TaskAmountZero();\\n\\n    /**\\n     * @dev The token is not the native token\\n     */\\n    error TaskTokenNotNative();\\n\\n    /**\\n     * @dev Executes the wrapper task\\n     */\\n    function call(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/relayer/IBaseRelayerFundTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '../ITask.sol';\\n\\n/**\\n * @dev Base relayer fund task interface\\n */\\ninterface IBaseRelayerFundTask is ITask {\\n    /**\\n     * @dev The relayer is zero\\n     */\\n    error TaskRelayerZero();\\n\\n    /**\\n     * @dev The task initializer is disabled\\n     */\\n    error TaskInitializerDisabled();\\n\\n    /**\\n     * @dev There is no threshold set for the given token\\n     */\\n    error TaskTokenThresholdNotSet(address token);\\n\\n    /**\\n     * @dev The deposited amount is above the minimum threshold\\n     */\\n    error TaskDepositAboveMinThreshold(uint256 balance, uint256 min);\\n\\n    /**\\n     * @dev The new amount to be deposited does not cover the used quota\\n     */\\n    error TaskDepositBelowUsedQuota(uint256 amount, uint256 quota);\\n\\n    /**\\n     * @dev The requested amount would result in a new balance below the minimum threshold\\n     */\\n    error TaskNewDepositBelowMinThreshold(uint256 balance, uint256 min);\\n\\n    /**\\n     * @dev The requested amount would result in a new balance above the maximum threshold\\n     */\\n    error TaskNewDepositAboveMaxThreshold(uint256 balance, uint256 max);\\n\\n    /**\\n     * @dev Emitted every time the relayer is set\\n     */\\n    event RelayerSet(address indexed relayer);\\n\\n    /**\\n     * @dev Tells the relayer\\n     */\\n    function relayer() external view returns (address);\\n\\n    /**\\n     * @dev Sets the relayer\\n     * @param newRelayer Address of the relayer to be set\\n     */\\n    function setRelayer(address newRelayer) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/relayer/IRelayerDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '../ITask.sol';\\n\\n/**\\n * @dev Relayer depositor task interface\\n */\\ninterface IRelayerDepositor is ITask {\\n    /**\\n     * @dev The amount is zero\\n     */\\n    error TaskAmountZero();\\n\\n    /**\\n     * @dev The relayer is zero\\n     */\\n    error TaskRelayerZero();\\n\\n    /**\\n     * @dev Emitted every time the relayer is set\\n     */\\n    event RelayerSet(address indexed relayer);\\n\\n    /**\\n     * @dev Tells the relayer\\n     */\\n    function relayer() external view returns (address);\\n\\n    /**\\n     * @dev Sets the relayer\\n     * @param newRelayer Address of the relayer to be set\\n     */\\n    function setRelayer(address newRelayer) external;\\n\\n    /**\\n     * @dev Executes the relayer depositor task\\n     */\\n    function call(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/swap/IBaseSwapTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport '../ITask.sol';\\n\\n/**\\n * @dev Base swap task interface\\n */\\ninterface IBaseSwapTask is ITask {\\n    /**\\n     * @dev The token is zero\\n     */\\n    error TaskTokenZero();\\n\\n    /**\\n     * @dev The amount is zero\\n     */\\n    error TaskAmountZero();\\n\\n    /**\\n     * @dev The connector is zero\\n     */\\n    error TaskConnectorZero();\\n\\n    /**\\n     * @dev The token out is not set\\n     */\\n    error TaskTokenOutNotSet();\\n\\n    /**\\n     * @dev The slippage to be set is greater than one\\n     */\\n    error TaskSlippageAboveOne();\\n\\n    /**\\n     * @dev The slippage is greater than the maximum slippage\\n     */\\n    error TaskSlippageAboveMax(uint256 slippage, uint256 maxSlippage);\\n\\n    /**\\n     * @dev Emitted every time the connector is set\\n     */\\n    event ConnectorSet(address indexed connector);\\n\\n    /**\\n     * @dev Emitted every time the default token out is set\\n     */\\n    event DefaultTokenOutSet(address indexed tokenOut);\\n\\n    /**\\n     * @dev Emitted every time the default max slippage is set\\n     */\\n    event DefaultMaxSlippageSet(uint256 maxSlippage);\\n\\n    /**\\n     * @dev Emitted every time a custom token out is set\\n     */\\n    event CustomTokenOutSet(address indexed token, address tokenOut);\\n\\n    /**\\n     * @dev Emitted every time a custom max slippage is set\\n     */\\n    event CustomMaxSlippageSet(address indexed token, uint256 maxSlippage);\\n\\n    /**\\n     * @dev Tells the connector tied to the task\\n     */\\n    function connector() external view returns (address);\\n\\n    /**\\n     * @dev Tells the default token out\\n     */\\n    function defaultTokenOut() external view returns (address);\\n\\n    /**\\n     * @dev Tells the default max slippage\\n     */\\n    function defaultMaxSlippage() external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the token out defined for a specific token\\n     * @param token Address of the token being queried\\n     */\\n    function customTokenOut(address token) external view returns (address);\\n\\n    /**\\n     * @dev Tells the max slippage defined for a specific token\\n     * @param token Address of the token being queried\\n     */\\n    function customMaxSlippage(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Tells the token out that should be used for a token\\n     */\\n    function getTokenOut(address token) external view returns (address);\\n\\n    /**\\n     * @dev Tells the max slippage that should be used for a token\\n     */\\n    function getMaxSlippage(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a new connector\\n     * @param newConnector Address of the connector to be set\\n     */\\n    function setConnector(address newConnector) external;\\n\\n    /**\\n     * @dev Sets the default token out\\n     * @param tokenOut Address of the default token out to be set\\n     */\\n    function setDefaultTokenOut(address tokenOut) external;\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     * @param maxSlippage Default max slippage to be set\\n     */\\n    function setDefaultMaxSlippage(uint256 maxSlippage) external;\\n\\n    /**\\n     * @dev Sets a custom token out\\n     * @param token Address of the token to set a custom token out for\\n     * @param tokenOut Address of the token out to be set\\n     */\\n    function setCustomTokenOut(address token, address tokenOut) external;\\n\\n    /**\\n     * @dev Sets a custom max slippage\\n     * @param token Address of the token to set a custom max slippage for\\n     * @param maxSlippage Max slippage to be set\\n     */\\n    function setCustomMaxSlippage(address token, uint256 maxSlippage) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/swap/IHopL2Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseSwapTask.sol';\\n\\n/**\\n * @dev L2 Hop swapper task interface\\n */\\ninterface IHopL2Swapper is IBaseSwapTask {\\n    /**\\n     * @dev The amm for the token is not set\\n     */\\n    error TaskMissingHopTokenAmm();\\n\\n    /**\\n     * @dev The hToken to be set is not the hToken of the Hop L2 amm to be used\\n     */\\n    error TaskHopTokenAmmMismatch(address hToken, address amm);\\n\\n    /**\\n     * @dev Emitted every time an AMM is set for a token\\n     */\\n    event TokenAmmSet(address indexed token, address amm);\\n\\n    /**\\n     * @dev Tells AMM set for a token\\n     */\\n    function tokenAmm(address token) external view returns (address);\\n\\n    /**\\n     * @dev Sets an AMM for a hToken\\n     * @param hToken Address of the hToken to be set\\n     * @param amm AMM address to be set for the hToken\\n     */\\n    function setTokenAmm(address hToken, address amm) external;\\n\\n    /**\\n     * @dev Executes the L2 hop swapper task\\n     */\\n    function call(address tokenIn, uint256 amountIn, uint256 slippage) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/swap/IOneInchV5Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseSwapTask.sol';\\n\\n/**\\n * @dev 1inch v5 swapper task interface\\n */\\ninterface IOneInchV5Swapper is IBaseSwapTask {\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(address tokenIn, uint256 amountIn, uint256 slippage, bytes memory data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/swap/IParaswapV5Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseSwapTask.sol';\\n\\n/**\\n * @dev Paraswap v5 swapper task interface\\n */\\ninterface IParaswapV5Swapper is IBaseSwapTask {\\n    /**\\n     * @dev The quote signer is zero\\n     */\\n    error TaskQuoteSignerZero();\\n\\n    /**\\n     * @dev The signer to be set is not the quote signer\\n     */\\n    error TaskInvalidQuoteSigner(address signer, address quoteSigner);\\n\\n    /**\\n     * @dev The deadline is in the past\\n     */\\n    error TaskQuoteSignerPastDeadline(uint256 deadline, uint256 currentTimestamp);\\n\\n    /**\\n     * @dev Emitted every time a quote signer is set\\n     */\\n    event QuoteSignerSet(address indexed quoteSigner);\\n\\n    /**\\n     * @dev Tells the address of the allowed quote signer\\n     */\\n    function quoteSigner() external view returns (address);\\n\\n    /**\\n     * @dev Sets the quote signer address. Sender must be authorized.\\n     * @param newQuoteSigner Address of the new quote signer to be set\\n     */\\n    function setQuoteSigner(address newQuoteSigner) external;\\n\\n    /**\\n     * @dev Executes Paraswap V5 swapper task\\n     */\\n    function call(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        uint256 expectedAmountOut,\\n        uint256 deadline,\\n        bytes memory data,\\n        bytes memory sig\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/swap/IUniswapV2Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseSwapTask.sol';\\n\\n/**\\n * @dev Uniswap v2 swapper task interface\\n */\\ninterface IUniswapV2Swapper is IBaseSwapTask {\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(address tokenIn, uint256 amountIn, uint256 slippage, address[] memory hopTokens) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/swap/IUniswapV3Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBaseSwapTask.sol';\\n\\n/**\\n * @dev Uniswap v3 swapper task interface\\n */\\ninterface IUniswapV3Swapper is IBaseSwapTask {\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 slippage,\\n        uint24 fee,\\n        address[] memory hopTokens,\\n        uint24[] memory hopFees\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/liquidity/balancer/BalancerBPTExiter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\nimport '../../Task.sol';\\nimport '../../interfaces/liquidity/balancer/IBalancerBPTExiter.sol';\\nimport '../../interfaces/liquidity/balancer/IBalancerLinearPool.sol';\\nimport '../../interfaces/liquidity/balancer/IBalancerBoostedPool.sol';\\nimport '../../interfaces/liquidity/balancer/IBalancerPool.sol';\\nimport '../../interfaces/liquidity/balancer/IBalancerVault.sol';\\n\\n// solhint-disable avoid-low-level-calls\\n\\n/**\\n * @title Balancer BPT exiter\\n * @dev Task that offers the components to exit Balancer pools\\n */\\ncontract BalancerBPTExiter is IBalancerBPTExiter, Task {\\n    // Private constant used to exit Balancer pools\\n    uint256 private constant EXACT_BPT_IN_FOR_TOKENS_OUT = 1;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('BPT_EXITER');\\n\\n    // Balancer vault reference. It cannot be changed.\\n    address public override balancerVault;\\n\\n    /**\\n     * @dev Balancer BPT exit config. Only used in the initializer.\\n     */\\n    struct BPTExitConfig {\\n        address balancerVault;\\n        TaskConfig taskConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes a Balancer BPT exiter\\n     * @param config Balancer BPT exit config\\n     */\\n    function initialize(BPTExitConfig memory config) external virtual initializer {\\n        __BalancerBPTExiter_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Balancer BPT exiter. It does call upper contracts initializers.\\n     * @param config Balancer BPT exit config\\n     */\\n    function __BalancerBPTExiter_init(BPTExitConfig memory config) internal onlyInitializing {\\n        __Task_init(config.taskConfig);\\n        __BalancerBPTExiter_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Balancer BPT exiter. It does not call upper contracts initializers.\\n     * @param config Balancer BPT exit config\\n     */\\n    function __BalancerBPTExiter_init_unchained(BPTExitConfig memory config) internal onlyInitializing {\\n        balancerVault = config.balancerVault;\\n    }\\n\\n    /**\\n     * @dev Execute Balancer BPT exiter\\n     * @param token Address of the Balancer pool token to exit\\n     * @param amount Amount of Balancer pool tokens to exit\\n     */\\n    function call(address token, uint256 amount) external override authP(authParams(token, amount)) {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeBalancerBPTExiter(token, amount);\\n\\n        (bytes memory data, IERC20[] memory tokensOut, uint256[] memory minAmountsOut) = _buildSwapCall(token, amount);\\n        uint256[] memory preBalances = _getBalances(tokensOut);\\n\\n        ISmartVault(smartVault).call(token, abi.encodeWithSelector(IERC20.approve.selector, balancerVault, amount), 0);\\n        ISmartVault(smartVault).call(balancerVault, data, 0);\\n\\n        uint256[] memory amountsOut = _getAmountsOut(tokensOut, preBalances, minAmountsOut);\\n        _afterBalancerBPTExiter(token, amount, tokensOut, amountsOut);\\n    }\\n\\n    /**\\n     * @dev Before Balancer BPT exiter hook\\n     */\\n    function _beforeBalancerBPTExiter(address token, uint256 amount) internal virtual {\\n        _beforeTask(token, amount);\\n        if (token == address(0)) revert TaskTokenZero();\\n        if (amount == 0) revert TaskAmountZero();\\n    }\\n\\n    /**\\n     * @dev After Balancer BPT exiter hook\\n     */\\n    function _afterBalancerBPTExiter(\\n        address tokenIn,\\n        uint256 amountIn,\\n        IERC20[] memory tokensOut,\\n        uint256[] memory amountsOut\\n    ) internal virtual {\\n        for (uint256 i = 0; i < tokensOut.length; i++) _increaseBalanceConnector(address(tokensOut[i]), amountsOut[i]);\\n        _afterTask(tokenIn, amountIn);\\n    }\\n\\n    /**\\n     * @dev Builds the corresponding data to swap a BPT into its underlying tokens\\n     * @param pool Address of the Balancer pool token to swap\\n     * @param amount Amount of Balancer pool tokens to swap\\n     */\\n    function _buildSwapCall(address pool, uint256 amount)\\n        private\\n        view\\n        returns (bytes memory data, IERC20[] memory tokensOut, uint256[] memory minAmountsOut)\\n    {\\n        try IBalancerLinearPool(pool).getMainToken() returns (address main) {\\n            return _buildLinearPoolSwap(pool, amount, main);\\n        } catch {\\n            try IBalancerBoostedPool(pool).getBptIndex() returns (uint256 bptIndex) {\\n                return _buildBoostedPoolSwap(pool, amount, bptIndex);\\n            } catch {\\n                return _buildNormalPoolExit(pool, amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Exit normal pools using an exact BPT for tokens out. Note that there is no need to compute\\n     * minimum amounts since this is considered a proportional exit.\\n     * @param pool Address of the Balancer pool token to exit\\n     * @param amount Amount of Balancer pool tokens to exit\\n     */\\n    function _buildNormalPoolExit(address pool, uint256 amount)\\n        private\\n        view\\n        returns (bytes memory data, IERC20[] memory tokens, uint256[] memory minAmountsOut)\\n    {\\n        // Fetch the list of tokens of the pool\\n        bytes32 poolId = IBalancerPool(pool).getPoolId();\\n        (tokens, , ) = IBalancerVault(balancerVault).getPoolTokens(poolId);\\n\\n        // Proportional exit\\n        minAmountsOut = new uint256[](tokens.length);\\n        IBalancerVault.ExitPoolRequest memory request = IBalancerVault.ExitPoolRequest({\\n            assets: tokens,\\n            minAmountsOut: minAmountsOut,\\n            userData: abi.encodePacked(EXACT_BPT_IN_FOR_TOKENS_OUT, amount),\\n            toInternalBalance: false\\n        });\\n\\n        data = abi.encodeWithSelector(\\n            IBalancerVault.exitPool.selector,\\n            poolId,\\n            address(smartVault),\\n            payable(address(smartVault)),\\n            request\\n        );\\n    }\\n\\n    /**\\n     * @dev Exit linear pools using a swap request in exchange for the main token of the pool. The min amount out is\\n     * computed based on the current rate of the linear pool.\\n     * @param pool Address of the Balancer pool token to swap\\n     * @param amount Amount of Balancer pool tokens to swap\\n     * @param main Address of the main token\\n     */\\n    function _buildLinearPoolSwap(address pool, uint256 amount, address main)\\n        private\\n        view\\n        returns (bytes memory data, IERC20[] memory tokensOut, uint256[] memory minAmountsOut)\\n    {\\n        // Compute minimum amount out in the main token\\n        uint256 rate = IBalancerLinearPool(pool).getRate();\\n        uint256 decimals = IERC20Metadata(main).decimals();\\n        uint256 minAmountOut = _getMinAmountOut(rate, decimals);\\n\\n        // Swap from linear to main token\\n        IBalancerVault.SingleSwap memory request = IBalancerVault.SingleSwap({\\n            poolId: IBalancerPool(pool).getPoolId(),\\n            kind: IBalancerVault.SwapKind.GIVEN_IN,\\n            assetIn: pool,\\n            assetOut: main,\\n            amount: amount,\\n            userData: new bytes(0)\\n        });\\n\\n        // Build fund management object: smart vault is the sender and recipient\\n        IBalancerVault.FundManagement memory funds = IBalancerVault.FundManagement({\\n            sender: address(smartVault),\\n            fromInternalBalance: false,\\n            recipient: payable(address(smartVault)),\\n            toInternalBalance: false\\n        });\\n\\n        data = abi.encodeWithSelector(IBalancerVault.swap.selector, request, funds, minAmountOut, block.timestamp);\\n        tokensOut = new IERC20[](1);\\n        tokensOut[0] = IERC20(main);\\n        minAmountsOut = new uint256[](1);\\n        minAmountsOut[0] = minAmountOut;\\n    }\\n\\n    /**\\n     * @dev Exit boosted pools using a swap request in exchange for the first underlying token of the pool. The min\\n     * amount out is computed based on the current rate of the boosted pool.\\n     * @param pool Address of the Balancer pool token to swap\\n     * @param amount Amount of Balancer pool tokens to swap\\n     * @param bptIndex Index of the BPT in the list of tokens tracked by the Balancer Vault\\n     */\\n    function _buildBoostedPoolSwap(address pool, uint256 amount, uint256 bptIndex)\\n        private\\n        view\\n        returns (bytes memory data, IERC20[] memory tokensOut, uint256[] memory minAmountsOut)\\n    {\\n        // Pick the first underlying token of the boosted pool\\n        bytes32 poolId = IBalancerPool(pool).getPoolId();\\n        (IERC20[] memory tokens, , ) = IBalancerVault(balancerVault).getPoolTokens(poolId);\\n        address underlying = address(bptIndex == 0 ? tokens[1] : tokens[0]);\\n\\n        // Compute minimum amount out in the underlying token\\n        uint256 rate = IBalancerBoostedPool(pool).getRate();\\n        uint256 decimals = IERC20Metadata(underlying).decimals();\\n        uint256 minAmountOut = _getMinAmountOut(rate, decimals);\\n\\n        // Swap from BPT to underlying token\\n        IBalancerVault.SingleSwap memory request = IBalancerVault.SingleSwap({\\n            poolId: IBalancerPool(pool).getPoolId(),\\n            kind: IBalancerVault.SwapKind.GIVEN_IN,\\n            assetIn: pool,\\n            assetOut: underlying,\\n            amount: amount,\\n            userData: new bytes(0)\\n        });\\n\\n        // Build fund management object: smart vault is the sender and recipient\\n        IBalancerVault.FundManagement memory funds = IBalancerVault.FundManagement({\\n            sender: address(smartVault),\\n            fromInternalBalance: false,\\n            recipient: payable(address(smartVault)),\\n            toInternalBalance: false\\n        });\\n\\n        data = abi.encodeWithSelector(IBalancerVault.swap.selector, request, funds, minAmountOut, block.timestamp);\\n        tokensOut = new IERC20[](1);\\n        tokensOut[0] = IERC20(underlying);\\n        minAmountsOut = new uint256[](1);\\n        minAmountsOut[0] = minAmountOut;\\n    }\\n\\n    /**\\n     * @dev Tells the min amount out of a swap based on the current rate and decimals of the token\\n     * @param rate Current rate of the pool\\n     * @param decimals Decimals of the token\\n     */\\n    function _getMinAmountOut(uint256 rate, uint256 decimals) private pure returns (uint256) {\\n        return decimals <= 18 ? (rate / (10**(18 - decimals))) : (rate * (10**(decimals - 18)));\\n    }\\n\\n    /**\\n     * @dev Tells the balances of a list of tokens\\n     */\\n    function _getBalances(IERC20[] memory tokens) private view returns (uint256[] memory balances) {\\n        balances = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) balances[i] = tokens[i].balanceOf(smartVault);\\n    }\\n\\n    /**\\n     * @dev Tells the amounts out of a list of tokens and previous balances, and checks that they are above the\\n     * minimum amounts out\\n     */\\n    function _getAmountsOut(IERC20[] memory tokens, uint256[] memory preBalances, uint256[] memory minAmountsOut)\\n        private\\n        view\\n        returns (uint256[] memory amountsOut)\\n    {\\n        amountsOut = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 preBalance = preBalances[i];\\n            uint256 postBalance = tokens[i].balanceOf(smartVault);\\n            if (postBalance < preBalance) revert TaskPostBalanceUnexpected(postBalance, preBalance);\\n            uint256 amountOut = postBalance - preBalance;\\n            if (amountOut < minAmountsOut[i]) revert TaskBadAmountOut(amountOut, minAmountsOut[i]);\\n            amountsOut[i] = amountOut;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidity/convex/BaseConvexTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '../../Task.sol';\\nimport '../../interfaces/liquidity/convex/IBaseConvexTask.sol';\\n\\n/**\\n * @title Base Convex task\\n * @dev Task that offers the basic components for more detailed Convex related tasks\\n */\\nabstract contract BaseConvexTask is IBaseConvexTask, Task {\\n    // Task connector address\\n    address public override connector;\\n\\n    /**\\n     * @dev Base Convex config. Only used in the initializer.\\n     */\\n    struct BaseConvexConfig {\\n        address connector;\\n        TaskConfig taskConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the base Convex task. It does call upper contracts initializers.\\n     * @param config Base Convex config\\n     */\\n    function __BaseConvexTask_init(BaseConvexConfig memory config) internal onlyInitializing {\\n        __Task_init(config.taskConfig);\\n        __BaseConvexTask_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the base Convex task. It does not call upper contracts initializers.\\n     * @param config Base Convex config\\n     */\\n    function __BaseConvexTask_init_unchained(BaseConvexConfig memory config) internal onlyInitializing {\\n        _setConnector(config.connector);\\n    }\\n\\n    /**\\n     * @dev Sets the task connector\\n     * @param newConnector Address of the new connector to be set\\n     */\\n    function setConnector(address newConnector) external override authP(authParams(newConnector)) {\\n        _setConnector(newConnector);\\n    }\\n\\n    /**\\n     * @dev Before base Convex task hook\\n     */\\n    function _beforeBaseConvexTask(address token, uint256 amount) internal virtual {\\n        _beforeTask(token, amount);\\n        if (token == address(0)) revert TaskTokenZero();\\n    }\\n\\n    /**\\n     * @dev After base Convex task hook\\n     */\\n    function _afterBaseConvexTask(address token, uint256 amount) internal virtual {\\n        _afterTask(token, amount);\\n    }\\n\\n    /**\\n     * @dev Sets the task connector\\n     * @param newConnector New connector to be set\\n     */\\n    function _setConnector(address newConnector) internal {\\n        if (newConnector == address(0)) revert TaskConnectorZero();\\n        connector = newConnector;\\n        emit ConnectorSet(newConnector);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidity/convex/ConvexClaimer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-connectors/contracts/interfaces/liquidity/convex/IConvexConnector.sol';\\n\\nimport './BaseConvexTask.sol';\\nimport '../../interfaces/liquidity/convex/IConvexClaimer.sol';\\n\\n/**\\n * @title Convex claimer\\n */\\ncontract ConvexClaimer is IConvexClaimer, BaseConvexTask {\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('CONVEX_CLAIMER');\\n\\n    /**\\n     * @dev Convex claim config. Only used in the initializer.\\n     */\\n    struct ConvexClaimConfig {\\n        BaseConvexConfig baseConvexConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes a Convex claimer\\n     * @param config Convex claim config\\n     */\\n    function initialize(ConvexClaimConfig memory config) external virtual initializer {\\n        __ConvexClaimer_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Convex claimer. It does call upper contracts initializers.\\n     * @param config Convex claim config\\n     */\\n    function __ConvexClaimer_init(ConvexClaimConfig memory config) internal onlyInitializing {\\n        __BaseConvexTask_init(config.baseConvexConfig);\\n        __ConvexClaimer_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Convex claimer. It does not call upper contracts initializers.\\n     * @param config Convex claim config\\n     */\\n    function __ConvexClaimer_init_unchained(ConvexClaimConfig memory config) internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Tells the address from where the token amounts to execute this task are fetched\\n     */\\n    function getTokensSource() external view virtual override(IBaseTask, BaseTask) returns (address) {\\n        return IConvexConnector(connector).booster();\\n    }\\n\\n    /**\\n     * @dev Tells the amount a task should use for a token, in this case always zero since it is not possible to\\n     * compute on-chain how many tokens are available to be claimed.\\n     */\\n    function getTaskAmount(address) public pure virtual override(IBaseTask, BaseTask) returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Execute Convex claimer\\n     * @param token Address of the Convex pool token to claim rewards for\\n     * @param amount Must be zero, it is not possible to claim a specific number of tokens\\n     */\\n    function call(address token, uint256 amount) external override authP(authParams(token, amount)) {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeConvexClaimer(token, amount);\\n        bytes memory connectorData = abi.encodeWithSelector(IConvexConnector.claim.selector, token);\\n        bytes memory result = ISmartVault(smartVault).execute(connector, connectorData);\\n        (address[] memory tokens, uint256[] memory amounts) = abi.decode(result, (address[], uint256[]));\\n        _afterConvexClaimer(token, amount, tokens, amounts);\\n    }\\n\\n    /**\\n     * @dev Before Convex claimer hook\\n     */\\n    function _beforeConvexClaimer(address token, uint256 amount) internal virtual {\\n        _beforeBaseConvexTask(token, amount);\\n        if (amount != 0) revert TaskAmountNotZero();\\n    }\\n\\n    /**\\n     * @dev After Convex claimer hook\\n     */\\n    function _afterConvexClaimer(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address[] memory tokensOut,\\n        uint256[] memory amountsOut\\n    ) internal virtual {\\n        if (tokensOut.length != amountsOut.length) revert TaskClaimResultLengthMismatch();\\n        for (uint256 i = 0; i < tokensOut.length; i++) _increaseBalanceConnector(tokensOut[i], amountsOut[i]);\\n        _afterBaseConvexTask(tokenIn, amountIn);\\n    }\\n\\n    /**\\n     * @dev Sets the balance connectors. Previous balance connector must be unset.\\n     * @param previous Balance connector id of the previous task in the workflow\\n     * @param next Balance connector id of the next task in the workflow\\n     */\\n    function _setBalanceConnectors(bytes32 previous, bytes32 next) internal virtual override {\\n        if (previous != bytes32(0)) revert TaskPreviousConnectorNotZero(previous);\\n        super._setBalanceConnectors(previous, next);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidity/convex/ConvexExiter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/utils/BytesHelpers.sol';\\nimport '@mimic-fi/v3-connectors/contracts/interfaces/liquidity/convex/IConvexConnector.sol';\\n\\nimport './BaseConvexTask.sol';\\nimport '../../interfaces/liquidity/convex/IConvexExiter.sol';\\n\\n/**\\n * @title Convex exiter\\n * @dev Task that extends the base Convex task to exit Convex pools\\n */\\ncontract ConvexExiter is IConvexExiter, BaseConvexTask {\\n    using BytesHelpers for bytes;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('CONVEX_EXITER');\\n\\n    /**\\n     * @dev Convex exit config. Only used in the initializer.\\n     */\\n    struct ConvexExitConfig {\\n        BaseConvexConfig baseConvexConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes a Convex exiter\\n     * @param config Convex exit config\\n     */\\n    function initialize(ConvexExitConfig memory config) external virtual initializer {\\n        __ConvexExiter_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Convex exiter. It does call upper contracts initializers.\\n     * @param config Convex exit config\\n     */\\n    function __ConvexExiter_init(ConvexExitConfig memory config) internal onlyInitializing {\\n        __BaseConvexTask_init(config.baseConvexConfig);\\n        __ConvexExiter_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Convex exiter. It does not call upper contracts initializers.\\n     * @param config Convex exit config\\n     */\\n    function __ConvexExiter_init_unchained(ConvexExitConfig memory config) internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Executes the Convex exiter task\\n     * @param token Address of the Convex pool token to be exited with\\n     * @param amount Amount of Convex pool tokens to be exited with\\n     */\\n    function call(address token, uint256 amount) external override authP(authParams(token, amount)) {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeConvexExiter(token, amount);\\n        bytes memory connectorData = abi.encodeWithSelector(IConvexConnector.exit.selector, token, amount);\\n        bytes memory result = ISmartVault(smartVault).execute(connector, connectorData);\\n        _afterConvexExiter(token, amount, IConvexConnector(connector).getCurvePool(token), result.toUint256());\\n    }\\n\\n    /**\\n     * @dev Before Convex exiter hook\\n     */\\n    function _beforeConvexExiter(address token, uint256 amount) internal virtual {\\n        _beforeBaseConvexTask(token, amount);\\n        if (amount == 0) revert TaskAmountZero();\\n    }\\n\\n    /**\\n     * @dev After Convex exiter hook\\n     */\\n    function _afterConvexExiter(address tokenIn, uint256 amountIn, address tokenOut, uint256 amountOut)\\n        internal\\n        virtual\\n    {\\n        _increaseBalanceConnector(tokenOut, amountOut);\\n        _afterBaseConvexTask(tokenIn, amountIn);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidity/convex/ConvexJoiner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/utils/BytesHelpers.sol';\\nimport '@mimic-fi/v3-connectors/contracts/interfaces/liquidity/convex/IConvexConnector.sol';\\n\\nimport './BaseConvexTask.sol';\\nimport '../../interfaces/liquidity/convex/IConvexJoiner.sol';\\n\\n/**\\n * @title Convex joiner\\n * @dev Task that extends the base Convex task to join Convex pools\\n */\\ncontract ConvexJoiner is IConvexJoiner, BaseConvexTask {\\n    using BytesHelpers for bytes;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('CONVEX_JOINER');\\n\\n    /**\\n     * @dev Convex join config. Only used in the initializer.\\n     */\\n    struct ConvexJoinConfig {\\n        BaseConvexConfig baseConvexConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes a Convex joiner\\n     * @param config Convex join config\\n     */\\n    function initialize(ConvexJoinConfig memory config) external virtual initializer {\\n        __ConvexJoiner_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Convex joiner. It does call upper contracts initializers.\\n     * @param config Convex join config\\n     */\\n    function __ConvexJoiner_init(ConvexJoinConfig memory config) internal onlyInitializing {\\n        __BaseConvexTask_init(config.baseConvexConfig);\\n        __ConvexJoiner_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Convex joiner. It does not call upper contracts initializers.\\n     * @param config Convex join config\\n     */\\n    function __ConvexJoiner_init_unchained(ConvexJoinConfig memory config) internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Executes the Convex joiner task\\n     * @param token Address of the Curve pool token to be joined with\\n     * @param amount Amount of Curve pool tokens to be joined with\\n     */\\n    function call(address token, uint256 amount) external override authP(authParams(token, amount)) {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeConvexJoiner(token, amount);\\n        bytes memory connectorData = abi.encodeWithSelector(IConvexConnector.join.selector, token, amount);\\n        bytes memory result = ISmartVault(smartVault).execute(connector, connectorData);\\n        _afterConvexJoiner(token, amount, IConvexConnector(connector).getCvxPool(token), result.toUint256());\\n    }\\n\\n    /**\\n     * @dev Before Convex joiner hook\\n     */\\n    function _beforeConvexJoiner(address token, uint256 amount) internal virtual {\\n        _beforeBaseConvexTask(token, amount);\\n        if (amount == 0) revert TaskAmountZero();\\n    }\\n\\n    /**\\n     * @dev After Convex joiner hook\\n     */\\n    function _afterConvexJoiner(address tokenIn, uint256 amountIn, address tokenOut, uint256 amountOut)\\n        internal\\n        virtual\\n    {\\n        _increaseBalanceConnector(tokenOut, amountOut);\\n        _afterBaseConvexTask(tokenIn, amountIn);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidity/curve/BaseCurveTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\n\\nimport '../../Task.sol';\\nimport '../../interfaces/liquidity/curve/IBaseCurveTask.sol';\\n\\n/**\\n * @title Base Curve task\\n * @dev Task that offers the basic components for more detailed Curve related tasks\\n */\\nabstract contract BaseCurveTask is IBaseCurveTask, Task {\\n    using FixedPoint for uint256;\\n\\n    // Task connector address\\n    address public override connector;\\n\\n    // Default token out\\n    address public override defaultTokenOut;\\n\\n    // Default maximum slippage in fixed point\\n    uint256 public override defaultMaxSlippage;\\n\\n    // Token out per token\\n    mapping (address => address) public override customTokenOut;\\n\\n    // Maximum slippage per token address\\n    mapping (address => uint256) public override customMaxSlippage;\\n\\n    /**\\n     * @dev Custom token out config. Only used in the initializer.\\n     */\\n    struct CustomTokenOut {\\n        address token;\\n        address tokenOut;\\n    }\\n\\n    /**\\n     * @dev Custom max slippage config. Only used in the initializer.\\n     */\\n    struct CustomMaxSlippage {\\n        address token;\\n        uint256 maxSlippage;\\n    }\\n\\n    /**\\n     * @dev Base Curve config. Only used in the initializer.\\n     */\\n    struct BaseCurveConfig {\\n        address connector;\\n        address tokenOut;\\n        uint256 maxSlippage;\\n        CustomTokenOut[] customTokensOut;\\n        CustomMaxSlippage[] customMaxSlippages;\\n        TaskConfig taskConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the base Curve task. It does call upper contracts initializers.\\n     * @param config Base Curve config\\n     */\\n    function __BaseCurveTask_init(BaseCurveConfig memory config) internal onlyInitializing {\\n        __Task_init(config.taskConfig);\\n        __BaseCurveTask_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the base Curve task. It does not call upper contracts initializers.\\n     * @param config Base Curve config\\n     */\\n    function __BaseCurveTask_init_unchained(BaseCurveConfig memory config) internal onlyInitializing {\\n        _setConnector(config.connector);\\n        _setDefaultTokenOut(config.tokenOut);\\n        _setDefaultMaxSlippage(config.maxSlippage);\\n        for (uint256 i = 0; i < config.customTokensOut.length; i++) {\\n            _setCustomTokenOut(config.customTokensOut[i].token, config.customTokensOut[i].tokenOut);\\n        }\\n        for (uint256 i = 0; i < config.customMaxSlippages.length; i++) {\\n            _setCustomMaxSlippage(config.customMaxSlippages[i].token, config.customMaxSlippages[i].maxSlippage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tells the token out that should be used for a token\\n     */\\n    function getTokenOut(address token) public view virtual override returns (address) {\\n        address tokenOut = customTokenOut[token];\\n        return tokenOut == address(0) ? defaultTokenOut : tokenOut;\\n    }\\n\\n    /**\\n     * @dev Tells the max slippage that should be used for a token\\n     */\\n    function getMaxSlippage(address token) public view virtual override returns (uint256) {\\n        uint256 maxSlippage = customMaxSlippage[token];\\n        return maxSlippage == 0 ? defaultMaxSlippage : maxSlippage;\\n    }\\n\\n    /**\\n     * @dev Sets the task connector\\n     * @param newConnector Address of the new connector to be set\\n     */\\n    function setConnector(address newConnector) external override authP(authParams(newConnector)) {\\n        _setConnector(newConnector);\\n    }\\n\\n    /**\\n     * @dev Sets the default token out\\n     * @param tokenOut Address of the default token out to be set\\n     */\\n    function setDefaultTokenOut(address tokenOut) external override authP(authParams(tokenOut)) {\\n        _setDefaultTokenOut(tokenOut);\\n    }\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     */\\n    function setDefaultMaxSlippage(uint256 maxSlippage) external override authP(authParams(maxSlippage)) {\\n        _setDefaultMaxSlippage(maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Sets a custom token out\\n     * @param token Address of the token to set a custom token out for\\n     * @param tokenOut Address of the token out to be set\\n     */\\n    function setCustomTokenOut(address token, address tokenOut) external override authP(authParams(token, tokenOut)) {\\n        _setCustomTokenOut(token, tokenOut);\\n    }\\n\\n    /**\\n     * @dev Sets a a custom max slippage\\n     * @param token Address of the token to set a max slippage for\\n     * @param maxSlippage Max slippage to be set for the given token\\n     */\\n    function setCustomMaxSlippage(address token, uint256 maxSlippage)\\n        external\\n        override\\n        authP(authParams(token, maxSlippage))\\n    {\\n        _setCustomMaxSlippage(token, maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Before base Curve task hook\\n     */\\n    function _beforeBaseCurveTask(address token, uint256 amount, uint256 slippage) internal virtual {\\n        _beforeTask(token, amount);\\n        if (token == address(0)) revert TaskTokenZero();\\n        if (amount == 0) revert TaskAmountZero();\\n        if (getTokenOut(token) == address(0)) revert TaskTokenOutNotSet();\\n\\n        uint256 maxSlippage = getMaxSlippage(token);\\n        if (slippage > maxSlippage) revert TaskSlippageAboveMax(slippage, maxSlippage);\\n    }\\n\\n    /**\\n     * @dev After base Curve task hook\\n     */\\n    function _afterBaseCurveTask(address tokenIn, uint256 amountIn, uint256, address tokenOut, uint256 amountOut)\\n        internal\\n        virtual\\n    {\\n        _increaseBalanceConnector(tokenOut, amountOut);\\n        _afterTask(tokenIn, amountIn);\\n    }\\n\\n    /**\\n     * @dev Sets the task connector\\n     * @param newConnector New connector to be set\\n     */\\n    function _setConnector(address newConnector) internal {\\n        if (newConnector == address(0)) revert TaskConnectorZero();\\n        connector = newConnector;\\n        emit ConnectorSet(newConnector);\\n    }\\n\\n    /**\\n     * @dev Sets the default token out\\n     * @param tokenOut Default token out to be set\\n     */\\n    function _setDefaultTokenOut(address tokenOut) internal {\\n        defaultTokenOut = tokenOut;\\n        emit DefaultTokenOutSet(tokenOut);\\n    }\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     * @param maxSlippage Default max slippage to be set\\n     */\\n    function _setDefaultMaxSlippage(uint256 maxSlippage) internal {\\n        if (maxSlippage > FixedPoint.ONE) revert TaskSlippageAboveOne();\\n        defaultMaxSlippage = maxSlippage;\\n        emit DefaultMaxSlippageSet(maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Sets a custom token out for a token\\n     * @param token Address of the token to set the custom token out for\\n     * @param tokenOut Address of the token out to be set\\n     */\\n    function _setCustomTokenOut(address token, address tokenOut) internal {\\n        if (token == address(0)) revert TaskTokenZero();\\n        customTokenOut[token] = tokenOut;\\n        emit CustomTokenOutSet(token, tokenOut);\\n    }\\n\\n    /**\\n     * @dev Sets a custom max slippage for a token\\n     * @param token Address of the token to set the custom max slippage for\\n     * @param maxSlippage Max slippage to be set\\n     */\\n    function _setCustomMaxSlippage(address token, uint256 maxSlippage) internal {\\n        if (token == address(0)) revert TaskTokenZero();\\n        if (maxSlippage > FixedPoint.ONE) revert TaskSlippageAboveOne();\\n        customMaxSlippage[token] = maxSlippage;\\n        emit CustomMaxSlippageSet(token, maxSlippage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidity/curve/Curve2CrvExiter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/utils/BytesHelpers.sol';\\nimport '@mimic-fi/v3-connectors/contracts/interfaces/liquidity/curve/ICurve2CrvConnector.sol';\\n\\nimport './BaseCurveTask.sol';\\nimport '../../interfaces/liquidity/curve/ICurve2CrvExiter.sol';\\n\\n/**\\n * @title Curve 2CRV exiter\\n * @dev Task that extends the base Curve task to exit 2CRV pools\\n */\\ncontract Curve2CrvExiter is ICurve2CrvExiter, BaseCurveTask {\\n    using BytesHelpers for bytes;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('CURVE_2CRV_EXITER');\\n\\n    /**\\n     * @dev Curve 2CRV exit config. Only used in the initializer.\\n     */\\n    struct Curve2CrvExitConfig {\\n        BaseCurveConfig baseCurveConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes a Curve 2CRV exiter\\n     * @param config Curve 2CRV exit config\\n     */\\n    function initialize(Curve2CrvExitConfig memory config) external virtual initializer {\\n        __Curve2CrvExiter_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Curve 2CRV exiter. It does call upper contracts initializers.\\n     * @param config Curve 2CRV exit config\\n     */\\n    function __Curve2CrvExiter_init(Curve2CrvExitConfig memory config) internal onlyInitializing {\\n        __BaseCurveTask_init(config.baseCurveConfig);\\n        __Curve2CrvExiter_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Curve 2CRV exiter. It does not call upper contracts initializers.\\n     * @param config Curve 2CRV exit config\\n     */\\n    function __Curve2CrvExiter_init_unchained(Curve2CrvExitConfig memory config) internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Execute Curve 2CRV exiter\\n     * @param token Address of the Curve pool token to exit\\n     * @param amount Amount of Curve pool tokens to exit\\n     */\\n    function call(address token, uint256 amount, uint256 slippage)\\n        external\\n        override\\n        authP(authParams(token, amount, slippage))\\n    {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeCurve2CrvExiter(token, amount, slippage);\\n\\n        address tokenOut = getTokenOut(token);\\n        bytes memory connectorData = abi.encodeWithSelector(\\n            ICurve2CrvConnector.exit.selector,\\n            token,\\n            amount,\\n            tokenOut,\\n            slippage\\n        );\\n\\n        bytes memory result = ISmartVault(smartVault).execute(connector, connectorData);\\n        _afterCurve2CrvExiter(token, amount, slippage, tokenOut, result.toUint256());\\n    }\\n\\n    /**\\n     * @dev Before Curve 2CRV exiter hook\\n     */\\n    function _beforeCurve2CrvExiter(address token, uint256 amount, uint256 slippage) internal virtual {\\n        _beforeBaseCurveTask(token, amount, slippage);\\n    }\\n\\n    /**\\n     * @dev After Curve 2CRV exiter hook\\n     */\\n    function _afterCurve2CrvExiter(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 slippage,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) internal virtual {\\n        _afterBaseCurveTask(tokenIn, amountIn, slippage, tokenOut, amountOut);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidity/curve/Curve2CrvJoiner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/utils/BytesHelpers.sol';\\nimport '@mimic-fi/v3-connectors/contracts/interfaces/liquidity/curve/ICurve2CrvConnector.sol';\\n\\nimport './BaseCurveTask.sol';\\nimport '../../interfaces/liquidity/curve/ICurve2CrvJoiner.sol';\\n\\n/**\\n * @title Curve 2CRV joiner\\n * @dev Task that extends the base Curve task to join 2CRV pools\\n */\\ncontract Curve2CrvJoiner is ICurve2CrvJoiner, BaseCurveTask {\\n    using BytesHelpers for bytes;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('CURVE_2CRV_JOINER');\\n\\n    /**\\n     * @dev Curve 2CRV join config. Only used in the initializer.\\n     */\\n    struct Curve2CrvJoinConfig {\\n        BaseCurveConfig baseCurveConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes a Curve 2CRV joiner\\n     * @param config Curve 2CRV join config\\n     */\\n    function initialize(Curve2CrvJoinConfig memory config) external virtual initializer {\\n        __Curve2CrvJoiner_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Curve 2CRV joiner. It does call upper contracts initializers.\\n     * @param config Curve 2CRV join config\\n     */\\n    function __Curve2CrvJoiner_init(Curve2CrvJoinConfig memory config) internal onlyInitializing {\\n        __BaseCurveTask_init(config.baseCurveConfig);\\n        __Curve2CrvJoiner_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Curve 2CRV joiner. It does not call upper contracts initializers.\\n     * @param config Curve 2CRV join config\\n     */\\n    function __Curve2CrvJoiner_init_unchained(Curve2CrvJoinConfig memory config) internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Execute Curve 2CRV joiner\\n     * @param token Address of the token to join the Curve pool with\\n     * @param amount Amount of tokens to join the Curve pool with\\n     */\\n    function call(address token, uint256 amount, uint256 slippage)\\n        external\\n        override\\n        authP(authParams(token, amount, slippage))\\n    {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeCurve2CrvJoiner(token, amount, slippage);\\n\\n        address tokenOut = getTokenOut(token);\\n        bytes memory connectorData = abi.encodeWithSelector(\\n            ICurve2CrvConnector.join.selector,\\n            tokenOut,\\n            token,\\n            amount,\\n            slippage\\n        );\\n\\n        bytes memory result = ISmartVault(smartVault).execute(connector, connectorData);\\n        _afterCurve2CrvJoiner(token, amount, slippage, tokenOut, result.toUint256());\\n    }\\n\\n    /**\\n     * @dev Before Curve 2CRV joiner hook\\n     */\\n    function _beforeCurve2CrvJoiner(address token, uint256 amount, uint256 slippage) internal virtual {\\n        _beforeBaseCurveTask(token, amount, slippage);\\n    }\\n\\n    /**\\n     * @dev After Curve 2CRV joiner hook\\n     */\\n    function _afterCurve2CrvJoiner(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 slippage,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) internal virtual {\\n        _afterBaseCurveTask(tokenIn, amountIn, slippage, tokenOut, amountOut);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/primitives/Collector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/utils/ERC20Helpers.sol';\\n\\nimport '../Task.sol';\\nimport '../interfaces/primitives/ICollector.sol';\\n\\n/**\\n * @title Collector\\n * @dev Task that offers a source address where funds can be pulled from\\n */\\ncontract Collector is ICollector, Task {\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('COLLECTOR');\\n\\n    // Address from where the tokens will be pulled\\n    address internal _tokensSource;\\n\\n    /**\\n     * @dev Collect config. Only used in the initializer.\\n     */\\n    struct CollectConfig {\\n        address tokensSource;\\n        TaskConfig taskConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the collector\\n     * @param config Collect config\\n     */\\n    function initialize(CollectConfig memory config) external virtual initializer {\\n        __Collector_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the collector. It does call upper contracts initializers.\\n     * @param config Collect config\\n     */\\n    function __Collector_init(CollectConfig memory config) internal onlyInitializing {\\n        __Task_init(config.taskConfig);\\n        __Collector_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the collector. It does not call upper contracts initializers.\\n     * @param config Collect config\\n     */\\n    function __Collector_init_unchained(CollectConfig memory config) internal onlyInitializing {\\n        _setTokensSource(config.tokensSource);\\n    }\\n\\n    /**\\n     * @dev Tells the address from where the token amounts to execute this task are fetched\\n     */\\n    function getTokensSource() public view virtual override(IBaseTask, BaseTask) returns (address) {\\n        return _tokensSource;\\n    }\\n\\n    /**\\n     * @dev Tells the balance of the depositor for a given token\\n     * @param token Address of the token being queried\\n     */\\n    function getTaskAmount(address token) public view virtual override(IBaseTask, BaseTask) returns (uint256) {\\n        return ERC20Helpers.balanceOf(token, getTokensSource());\\n    }\\n\\n    /**\\n     * @dev Sets the tokens source address. Sender must be authorized.\\n     * @param tokensSource Address of the tokens source to be set\\n     */\\n    function setTokensSource(address tokensSource) external override authP(authParams(tokensSource)) {\\n        _setTokensSource(tokensSource);\\n    }\\n\\n    /**\\n     * @dev Execute Collector\\n     */\\n    function call(address token, uint256 amount) external override authP(authParams(token, amount)) {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeCollector(token, amount);\\n        ISmartVault(smartVault).collect(token, _tokensSource, amount);\\n        _afterCollector(token, amount);\\n    }\\n\\n    /**\\n     * @dev Before collector hook\\n     */\\n    function _beforeCollector(address token, uint256 amount) internal virtual {\\n        _beforeTask(token, amount);\\n        if (token == address(0)) revert TaskTokenZero();\\n        if (amount == 0) revert TaskAmountZero();\\n    }\\n\\n    /**\\n     * @dev After collector hook\\n     */\\n    function _afterCollector(address token, uint256 amount) internal virtual {\\n        _increaseBalanceConnector(token, amount);\\n        _afterTask(token, amount);\\n    }\\n\\n    /**\\n     * @dev Sets the balance connectors. Previous balance connector must be unset.\\n     * @param previous Balance connector id of the previous task in the workflow\\n     * @param next Balance connector id of the next task in the workflow\\n     */\\n    function _setBalanceConnectors(bytes32 previous, bytes32 next) internal virtual override {\\n        if (previous != bytes32(0)) revert TaskPreviousConnectorNotZero(previous);\\n        super._setBalanceConnectors(previous, next);\\n    }\\n\\n    /**\\n     * @dev Sets the source address\\n     * @param tokensSource Address of the tokens source to be set\\n     */\\n    function _setTokensSource(address tokensSource) internal virtual {\\n        if (tokensSource == address(0)) revert TaskTokensSourceZero();\\n        _tokensSource = tokensSource;\\n        emit TokensSourceSet(tokensSource);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/primitives/Depositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/utils/ERC20Helpers.sol';\\nimport '@mimic-fi/v3-helpers/contracts/utils/Denominations.sol';\\n\\nimport './Collector.sol';\\nimport '../interfaces/primitives/ICollector.sol';\\n\\n/**\\n * @title Depositor\\n * @dev Task that extends the Collector task to be the source from where funds can be pulled\\n */\\ncontract Depositor is ICollector, Collector {\\n    /**\\n     * @dev The tokens source to be set is not the contract itself\\n     */\\n    error TaskDepositorBadTokensSource(address tokensSource);\\n\\n    /**\\n     * @dev It allows receiving native token transfers\\n     */\\n    receive() external payable {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Approves the requested amount of tokens to the smart vault in case it's not the native token\\n     */\\n    function _beforeCollector(address token, uint256 amount) internal virtual override {\\n        super._beforeCollector(token, amount);\\n        if (!Denominations.isNativeToken(token)) {\\n            ERC20Helpers.approve(token, smartVault, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the tokens source address\\n     * @param tokensSource Address of the tokens source to be set\\n     */\\n    function _setTokensSource(address tokensSource) internal override {\\n        if (tokensSource != address(this)) revert TaskDepositorBadTokensSource(tokensSource);\\n        super._setTokensSource(tokensSource);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/primitives/Unwrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '../Task.sol';\\nimport '../interfaces/primitives/IUnwrapper.sol';\\n\\n/**\\n * @title Unwrapper\\n * @dev Task that offers facilities to unwrap wrapped native tokens\\n */\\ncontract Unwrapper is IUnwrapper, Task {\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('UNWRAPPER');\\n\\n    /**\\n     * @dev Unwrap config. Only used in the initializer.\\n     * @param taskConfig Task config params\\n     */\\n    struct UnwrapConfig {\\n        TaskConfig taskConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the unwrapper\\n     * @param config Unwrap config\\n     */\\n    function initialize(UnwrapConfig memory config) external virtual initializer {\\n        __Unwrapper_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the unwrapper. It does call upper contracts initializers.\\n     * @param config Unwrap config\\n     */\\n    function __Unwrapper_init(UnwrapConfig memory config) internal onlyInitializing {\\n        __Task_init(config.taskConfig);\\n        __Unwrapper_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the unwrapper. It does not call upper contracts initializers.\\n     * @param config Unwrap config\\n     */\\n    function __Unwrapper_init_unchained(UnwrapConfig memory config) internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Execute Unwrapper\\n     */\\n    function call(address token, uint256 amount) external override authP(authParams(token, amount)) {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeUnwrapper(token, amount);\\n        ISmartVault(smartVault).unwrap(amount);\\n        _afterUnwrapper(token, amount);\\n    }\\n\\n    /**\\n     * @dev Before unwrapper hook\\n     */\\n    function _beforeUnwrapper(address token, uint256 amount) internal virtual {\\n        _beforeTask(token, amount);\\n        if (token != _wrappedNativeToken()) revert TaskTokenNotWrapped();\\n        if (amount == 0) revert TaskAmountZero();\\n    }\\n\\n    /**\\n     * @dev After unwrapper hook\\n     */\\n    function _afterUnwrapper(address token, uint256 amount) internal virtual {\\n        _increaseBalanceConnector(Denominations.NATIVE_TOKEN, amount);\\n        _afterTask(token, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/primitives/Withdrawer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '../Task.sol';\\nimport '../interfaces/primitives/IWithdrawer.sol';\\n\\n/**\\n * @title Withdrawer\\n * @dev Task that offers a recipient address where funds can be withdrawn\\n */\\ncontract Withdrawer is IWithdrawer, Task {\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('WITHDRAWER');\\n\\n    // Address where tokens will be transferred to\\n    address public override recipient;\\n\\n    /**\\n     * @dev Withdraw config. Only used in the initializer.\\n     */\\n    struct WithdrawConfig {\\n        address recipient;\\n        TaskConfig taskConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the withdrawer\\n     * @param config Withdraw config\\n     */\\n    function initialize(WithdrawConfig memory config) external virtual initializer {\\n        __Withdrawer_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the withdrawer. It does call upper contracts initializers.\\n     * @param config Withdraw config\\n     */\\n    function __Withdrawer_init(WithdrawConfig memory config) internal onlyInitializing {\\n        __Task_init(config.taskConfig);\\n        __Withdrawer_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the withdrawer. It does not call upper contracts initializers.\\n     * @param config Withdraw config\\n     */\\n    function __Withdrawer_init_unchained(WithdrawConfig memory config) internal onlyInitializing {\\n        _setRecipient(config.recipient);\\n    }\\n\\n    /**\\n     * @dev Sets the recipient address. Sender must be authorized.\\n     * @param newRecipient Address of the new recipient to be set\\n     */\\n    function setRecipient(address newRecipient) external override authP(authParams(newRecipient)) {\\n        _setRecipient(newRecipient);\\n    }\\n\\n    /**\\n     * @dev Executes the Withdrawer\\n     */\\n    function call(address token, uint256 amount) external override authP(authParams(token, amount)) {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeWithdrawer(token, amount);\\n        ISmartVault(smartVault).withdraw(token, recipient, amount);\\n        _afterWithdrawer(token, amount);\\n    }\\n\\n    /**\\n     * @dev Before withdrawer hook\\n     */\\n    function _beforeWithdrawer(address token, uint256 amount) internal virtual {\\n        _beforeTask(token, amount);\\n        if (token == address(0)) revert TaskTokenZero();\\n        if (amount == 0) revert TaskAmountZero();\\n    }\\n\\n    /**\\n     * @dev After withdrawer hook\\n     */\\n    function _afterWithdrawer(address token, uint256 amount) internal virtual {\\n        _afterTask(token, amount);\\n    }\\n\\n    /**\\n     * @dev Sets the recipient address\\n     * @param newRecipient Address of the new recipient to be set\\n     */\\n    function _setRecipient(address newRecipient) internal {\\n        if (newRecipient == address(0)) revert TaskRecipientZero();\\n        if (newRecipient == smartVault) revert TaskRecipientEqualsSmartVault(newRecipient);\\n        recipient = newRecipient;\\n        emit RecipientSet(newRecipient);\\n    }\\n\\n    /**\\n     * @dev Sets the balance connectors. Next balance connector must be unset.\\n     * @param previous Balance connector id of the previous task in the workflow\\n     * @param next Balance connector id of the next task in the workflow\\n     */\\n    function _setBalanceConnectors(bytes32 previous, bytes32 next) internal virtual override {\\n        if (next != bytes32(0)) revert TaskNextConnectorNotZero(next);\\n        super._setBalanceConnectors(previous, next);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/primitives/Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/utils/Denominations.sol';\\n\\nimport '../Task.sol';\\nimport '../interfaces/primitives/IWrapper.sol';\\n\\n/**\\n * @title Wrapper\\n * @dev Task that offers facilities to wrap native tokens\\n */\\ncontract Wrapper is IWrapper, Task {\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('WRAPPER');\\n\\n    /**\\n     * @dev Wrap config. Only used in the initializer.\\n     */\\n    struct WrapConfig {\\n        TaskConfig taskConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the wrapper\\n     * @param config Wrap config\\n     */\\n    function initialize(WrapConfig memory config) external virtual initializer {\\n        __Wrapper_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the wrapper. It does call upper contracts initializers.\\n     * @param config Wrap config\\n     */\\n    function __Wrapper_init(WrapConfig memory config) internal onlyInitializing {\\n        __Task_init(config.taskConfig);\\n        __Wrapper_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the wrapper. It does not call upper contracts initializers.\\n     * @param config Wrap config\\n     */\\n    function __Wrapper_init_unchained(WrapConfig memory config) internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Execute Wrapper\\n     */\\n    function call(address token, uint256 amount) external override authP(authParams(token, amount)) {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeWrapper(token, amount);\\n        ISmartVault(smartVault).wrap(amount);\\n        _afterWrapper(token, amount);\\n    }\\n\\n    /**\\n     * @dev Before wrapper hook\\n     */\\n    function _beforeWrapper(address token, uint256 amount) internal virtual {\\n        _beforeTask(token, amount);\\n        if (token != Denominations.NATIVE_TOKEN) revert TaskTokenNotNative();\\n        if (amount == 0) revert TaskAmountZero();\\n    }\\n\\n    /**\\n     * @dev After wrapper hook\\n     */\\n    function _afterWrapper(address token, uint256 amount) internal virtual {\\n        _increaseBalanceConnector(_wrappedNativeToken(), amount);\\n        _afterTask(token, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/BaseRelayerFundTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-relayer/contracts/interfaces/IRelayer.sol';\\n\\nimport '../Task.sol';\\nimport '../interfaces/relayer/IBaseRelayerFundTask.sol';\\n\\n/**\\n * @title Base relayer fund task\\n * @dev Task that offers the basic components for more detailed relayer fund tasks\\n */\\nabstract contract BaseRelayerFundTask is IBaseRelayerFundTask, Task {\\n    using FixedPoint for uint256;\\n\\n    // Reference to the contract to be funded\\n    address public override relayer;\\n\\n    /**\\n     * @dev Base relayer fund config. Only used in the initializer.\\n     */\\n    struct BaseRelayerFundConfig {\\n        address relayer;\\n        TaskConfig taskConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the base relayer fund task. It does call upper contracts initializers.\\n     * @param config Base relayer fund config\\n     */\\n    function __BaseRelayerFundTask_init(BaseRelayerFundConfig memory config) internal onlyInitializing {\\n        __Task_init(config.taskConfig);\\n        __BaseRelayerFundTask_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the base relayer fund task. It does not call upper contracts initializers.\\n     * @param config Base relayer fund config\\n     */\\n    function __BaseRelayerFundTask_init_unchained(BaseRelayerFundConfig memory config) internal onlyInitializing {\\n        _setRelayer(config.relayer);\\n    }\\n\\n    /**\\n     * @dev Tells the amount in `token` to be paid to the relayer\\n     * @param token Address of the token to be used to pay the relayer\\n     */\\n    function getTaskAmount(address token) public view virtual override(IBaseTask, BaseTask) returns (uint256) {\\n        Threshold memory threshold = _getTokenThreshold(token);\\n        if (threshold.token == address(0)) return 0;\\n\\n        uint256 depositedThresholdToken = _getDepositedInThresholdToken(threshold.token);\\n        if (depositedThresholdToken >= threshold.min) return 0;\\n\\n        uint256 usedQuotaThresholdToken = _getUsedQuotaInThresholdToken(threshold.token);\\n        uint256 diff = threshold.max - depositedThresholdToken + usedQuotaThresholdToken;\\n        return (token == threshold.token) ? diff : diff.mulUp(_getPrice(threshold.token, token));\\n    }\\n\\n    /**\\n     * @dev Sets the relayer\\n     * @param newRelayer Address of the relayer to be set\\n     */\\n    function setRelayer(address newRelayer) external override authP(authParams(newRelayer)) {\\n        _setRelayer(newRelayer);\\n    }\\n\\n    /**\\n     * @dev Before token threshold task hook\\n     */\\n    function _beforeTokenThresholdTask(address token, uint256 amount) internal virtual override {\\n        Threshold memory threshold = _getTokenThreshold(token);\\n        if (threshold.token == address(0)) revert TaskTokenThresholdNotSet(token);\\n\\n        uint256 amountInThresholdToken = amount.mulUp(_getPrice(token, threshold.token));\\n        uint256 depositedInThresholdToken = _getDepositedInThresholdToken(threshold.token);\\n        bool isCurrentBalanceAboveMin = depositedInThresholdToken >= threshold.min;\\n        if (isCurrentBalanceAboveMin) revert TaskDepositAboveMinThreshold(depositedInThresholdToken, threshold.min);\\n\\n        uint256 usedQuotaInThresholdToken = _getUsedQuotaInThresholdToken(threshold.token);\\n        bool coversUsedQuota = amountInThresholdToken > usedQuotaInThresholdToken;\\n        if (!coversUsedQuota) revert TaskDepositBelowUsedQuota(amountInThresholdToken, usedQuotaInThresholdToken);\\n\\n        uint256 balanceAfterDeposit = amountInThresholdToken + depositedInThresholdToken - usedQuotaInThresholdToken;\\n        bool isNewBalanceBelowMin = balanceAfterDeposit < threshold.min;\\n        if (isNewBalanceBelowMin) revert TaskNewDepositBelowMinThreshold(balanceAfterDeposit, threshold.min);\\n\\n        bool isNewBalanceAboveMax = balanceAfterDeposit > threshold.max;\\n        if (isNewBalanceAboveMax) revert TaskNewDepositAboveMaxThreshold(balanceAfterDeposit, threshold.max);\\n    }\\n\\n    /**\\n     * @dev Tells the deposited balance in the relayer expressed in another token\\n     */\\n    function _getDepositedInThresholdToken(address token) internal view returns (uint256) {\\n        // Relayer balance is expressed in ETH\\n        uint256 depositedNativeToken = IRelayer(relayer).getSmartVaultBalance(smartVault);\\n        return depositedNativeToken.mulUp(_getPrice(_wrappedNativeToken(), token));\\n    }\\n\\n    /**\\n     * @dev Tells the used quota in the relayer expressed in another token\\n     */\\n    function _getUsedQuotaInThresholdToken(address token) internal view returns (uint256) {\\n        // Relayer used quota is expressed in ETH\\n        uint256 usedQuotaNativeToken = IRelayer(relayer).getSmartVaultUsedQuota(smartVault);\\n        return usedQuotaNativeToken.mulUp(_getPrice(_wrappedNativeToken(), token));\\n    }\\n\\n    /**\\n     * @dev Sets the relayer\\n     * @param newRelayer Address of the relayer to be set\\n     */\\n    function _setRelayer(address newRelayer) internal {\\n        if (newRelayer == address(0)) revert TaskRelayerZero();\\n        relayer = newRelayer;\\n        emit RelayerSet(newRelayer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/CollectorRelayerFunder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '../primitives/Collector.sol';\\nimport './BaseRelayerFundTask.sol';\\n\\n/**\\n * @title Collector relayer funder\\n * @dev Task used to convert funds in order to pay relayers using an collector\\n */\\ncontract CollectorRelayerFunder is BaseRelayerFundTask, Collector {\\n    /**\\n     * @dev Disables the default collector initializer\\n     */\\n    function initialize(CollectConfig memory) external pure override {\\n        revert TaskInitializerDisabled();\\n    }\\n\\n    /**\\n     * @dev Initializes the collector relayer funder\\n     * @param config Collect config\\n     * @param relayer Relayer address\\n     */\\n    function initializeCollectorRelayerFunder(CollectConfig memory config, address relayer)\\n        external\\n        virtual\\n        initializer\\n    {\\n        __CollectorRelayerFunder_init(config, relayer);\\n    }\\n\\n    /**\\n     * @dev Initializes the collector relayer funder. It does call upper contracts initializers.\\n     * @param config Collect config\\n     * @param relayer Relayer address\\n     */\\n    function __CollectorRelayerFunder_init(CollectConfig memory config, address relayer) internal onlyInitializing {\\n        __Collector_init(config);\\n        __BaseRelayerFundTask_init_unchained(BaseRelayerFundConfig(relayer, config.taskConfig));\\n        __CollectorRelayerFunder_init_unchained(config, relayer);\\n    }\\n\\n    /**\\n     * @dev Initializes the collector relayer funder. It does not call upper contracts initializers.\\n     * @param config Collect config\\n     * @param relayer Relayer address\\n     */\\n    function __CollectorRelayerFunder_init_unchained(CollectConfig memory config, address relayer)\\n        internal\\n        onlyInitializing\\n    {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Tells the address from where the token amounts to execute this task are fetched\\n     */\\n    function getTokensSource() public view override(Collector, IBaseTask, BaseTask) returns (address) {\\n        return Collector.getTokensSource();\\n    }\\n\\n    /**\\n     * @dev Tells the `token` amount to be funded\\n     * @param token Address of the token to be used to fund the relayer\\n     */\\n    function getTaskAmount(address token) public view override(BaseRelayerFundTask, Collector) returns (uint256) {\\n        return BaseRelayerFundTask.getTaskAmount(token);\\n    }\\n\\n    /**\\n     * @dev Before token threshold task hook\\n     */\\n    function _beforeTokenThresholdTask(address token, uint256 amount)\\n        internal\\n        override(BaseRelayerFundTask, TokenThresholdTask)\\n    {\\n        BaseRelayerFundTask._beforeTokenThresholdTask(token, amount);\\n    }\\n\\n    /**\\n     * @dev Sets the balance connectors. Previous balance connector must be unset.\\n     * @param previous Balance connector id of the previous task in the workflow\\n     * @param next Balance connector id of the next task in the workflow\\n     */\\n    function _setBalanceConnectors(bytes32 previous, bytes32 next) internal override(Collector, BaseTask) {\\n        Collector._setBalanceConnectors(previous, next);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/OneInchV5RelayerFunder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport './BaseRelayerFundTask.sol';\\nimport '../swap/OneInchV5Swapper.sol';\\n\\n/**\\n * @title 1inch v5 relayer funder\\n * @dev Task used to convert funds in order to pay relayers using a 1inch v5 swapper\\n */\\ncontract OneInchV5RelayerFunder is BaseRelayerFundTask, OneInchV5Swapper {\\n    /**\\n     * @dev Disables the default 1inch v5 swapper initializer\\n     */\\n    function initialize(OneInchV5SwapConfig memory) external pure override {\\n        revert TaskInitializerDisabled();\\n    }\\n\\n    /**\\n     * @dev Initializes the 1inch v5 relayer funder\\n     * @param config 1inch v5 swap config\\n     * @param relayer Relayer address\\n     */\\n    function initializeOneInchV5RelayerFunder(OneInchV5SwapConfig memory config, address relayer)\\n        external\\n        virtual\\n        initializer\\n    {\\n        __OneInchV5RelayerFunder_init(config, relayer);\\n    }\\n\\n    /**\\n     * @dev Initializes the 1inch v5 relayer funder. It does call upper contracts initializers.\\n     * @param config 1inch v5 swap config\\n     * @param relayer Relayer address\\n     */\\n    function __OneInchV5RelayerFunder_init(OneInchV5SwapConfig memory config, address relayer)\\n        internal\\n        onlyInitializing\\n    {\\n        __OneInchV5Swapper_init(config);\\n        __BaseRelayerFundTask_init_unchained(BaseRelayerFundConfig(relayer, config.baseSwapConfig.taskConfig));\\n        __OneInchV5RelayerFunder_init_unchained(config, relayer);\\n    }\\n\\n    /**\\n     * @dev Initializes the 1inch v5 relayer funder. It does not call upper contracts initializers.\\n     * @param config Unwrap config\\n     * @param relayer Relayer address\\n     */\\n    function __OneInchV5RelayerFunder_init_unchained(OneInchV5SwapConfig memory config, address relayer)\\n        internal\\n        onlyInitializing\\n    {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Tells the amount in `token` to be funded\\n     * @param token Address of the token to be used for funding\\n     */\\n    function getTaskAmount(address token)\\n        public\\n        view\\n        override(BaseRelayerFundTask, IBaseTask, BaseTask)\\n        returns (uint256)\\n    {\\n        return BaseRelayerFundTask.getTaskAmount(token);\\n    }\\n\\n    /**\\n     * @dev Before token threshold task hook\\n     */\\n    function _beforeTokenThresholdTask(address token, uint256 amount)\\n        internal\\n        override(BaseRelayerFundTask, TokenThresholdTask)\\n    {\\n        BaseRelayerFundTask._beforeTokenThresholdTask(token, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/RelayerDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-relayer/contracts/interfaces/IRelayer.sol';\\n\\nimport '../Task.sol';\\nimport '../interfaces/relayer/IRelayerDepositor.sol';\\n\\n/**\\n * @title Relayer depositor\\n * @dev Task that offers facilities to deposit balance for Mimic relayers\\n */\\ncontract RelayerDepositor is IRelayerDepositor, Task {\\n    using FixedPoint for uint256;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('RELAYER_DEPOSITOR');\\n\\n    // Reference to the contract to be funded\\n    address public override relayer;\\n\\n    /**\\n     * @dev Initializes the relayer depositor\\n     * @param config Task config\\n     * @param _relayer Relayer address\\n     */\\n    function initialize(TaskConfig memory config, address _relayer) external virtual initializer {\\n        __RelayerDepositor_init(config, _relayer);\\n    }\\n\\n    /**\\n     * @dev Initializes the relayer depositor. It does call upper contracts initializers.\\n     * @param config Task config\\n     * @param _relayer Relayer address\\n     */\\n    function __RelayerDepositor_init(TaskConfig memory config, address _relayer) internal onlyInitializing {\\n        __Task_init(config);\\n        __RelayerDepositor_init_unchained(config, _relayer);\\n    }\\n\\n    /**\\n     * @dev Initializes the relayer depositor. It does not call upper contracts initializers.\\n     * @param _relayer Relayer address\\n     */\\n    function __RelayerDepositor_init_unchained(TaskConfig memory, address _relayer) internal onlyInitializing {\\n        _setRelayer(_relayer);\\n    }\\n\\n    /**\\n     * @dev Sets the relayer\\n     * @param newRelayer Address of the relayer to be set\\n     */\\n    function setRelayer(address newRelayer) external override authP(authParams(newRelayer)) {\\n        _setRelayer(newRelayer);\\n    }\\n\\n    /**\\n     * @dev Executes the relayer depositor task\\n     */\\n    function call(address token, uint256 amount) external override authP(authParams(token, amount)) {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforeRelayerDepositor(token, amount);\\n        bytes memory relayerData = abi.encodeWithSelector(IRelayer.deposit.selector, smartVault, amount);\\n        // solhint-disable-next-line avoid-low-level-calls\\n        ISmartVault(smartVault).call(relayer, relayerData, amount);\\n        _afterRelayerDepositor(token, amount);\\n    }\\n\\n    /**\\n     * @dev Before relayer depositor hook\\n     */\\n    function _beforeRelayerDepositor(address token, uint256 amount) internal virtual {\\n        _beforeTask(token, amount);\\n        if (amount == 0) revert TaskAmountZero();\\n    }\\n\\n    /**\\n     * @dev After relayer depositor hook\\n     */\\n    function _afterRelayerDepositor(address token, uint256 amount) internal virtual {\\n        _afterTask(token, amount);\\n    }\\n\\n    /**\\n     * @dev Sets the relayer\\n     * @param newRelayer Address of the relayer to be set\\n     */\\n    function _setRelayer(address newRelayer) internal {\\n        if (newRelayer == address(0)) revert TaskRelayerZero();\\n        relayer = newRelayer;\\n        emit RelayerSet(newRelayer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/relayer/UnwrapperRelayerFunder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport './BaseRelayerFundTask.sol';\\nimport '../primitives/Unwrapper.sol';\\n\\n/**\\n * @title Unwrapper relayer funder\\n * @dev Task used to convert funds in order to pay relayers using an unwrapper\\n */\\ncontract UnwrapperRelayerFunder is BaseRelayerFundTask, Unwrapper {\\n    /**\\n     * @dev Disables the default unwrapper initializer\\n     */\\n    function initialize(UnwrapConfig memory) external pure override {\\n        revert TaskInitializerDisabled();\\n    }\\n\\n    /**\\n     * @dev Initializes the unwrapper relayer funder\\n     * @param config Unwrap config\\n     * @param relayer Relayer address\\n     */\\n    function initializeUnwrapperRelayerFunder(UnwrapConfig memory config, address relayer)\\n        external\\n        virtual\\n        initializer\\n    {\\n        __UnwrapperRelayerFunder_init(config, relayer);\\n    }\\n\\n    /**\\n     * @dev Initializes the unwrapper relayer funder. It does call upper contracts initializers.\\n     * @param config Unwrap config\\n     * @param relayer Relayer address\\n     */\\n    function __UnwrapperRelayerFunder_init(UnwrapConfig memory config, address relayer) internal onlyInitializing {\\n        __Unwrapper_init(config);\\n        __BaseRelayerFundTask_init_unchained(BaseRelayerFundConfig(relayer, config.taskConfig));\\n        __UnwrapperRelayerFunder_init_unchained(config, relayer);\\n    }\\n\\n    /**\\n     * @dev Initializes the unwrapper relayer funder. It does not call upper contracts initializers.\\n     * @param config Unwrap config\\n     * @param relayer Relayer address\\n     */\\n    function __UnwrapperRelayerFunder_init_unchained(UnwrapConfig memory config, address relayer)\\n        internal\\n        onlyInitializing\\n    {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Tells the `token` amount to be funded\\n     * @param token Address of the token to be used to fund the relayer\\n     */\\n    function getTaskAmount(address token)\\n        public\\n        view\\n        override(BaseRelayerFundTask, IBaseTask, BaseTask)\\n        returns (uint256)\\n    {\\n        return BaseRelayerFundTask.getTaskAmount(token);\\n    }\\n\\n    /**\\n     * @dev Before token threshold task hook\\n     */\\n    function _beforeTokenThresholdTask(address token, uint256 amount)\\n        internal\\n        override(BaseRelayerFundTask, TokenThresholdTask)\\n    {\\n        BaseRelayerFundTask._beforeTokenThresholdTask(token, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/swap/BaseSwapTask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-helpers/contracts/utils/Denominations.sol';\\n\\nimport '../Task.sol';\\nimport '../interfaces/swap/IBaseSwapTask.sol';\\n\\n/**\\n * @title Base swap task\\n * @dev Task that offers the basic components for more detailed swap tasks\\n */\\nabstract contract BaseSwapTask is IBaseSwapTask, Task {\\n    using FixedPoint for uint256;\\n\\n    // Connector address\\n    address public override connector;\\n\\n    // Default token out\\n    address public override defaultTokenOut;\\n\\n    // Default maximum slippage in fixed point\\n    uint256 public override defaultMaxSlippage;\\n\\n    // Token out per token\\n    mapping (address => address) public override customTokenOut;\\n\\n    // Maximum slippage per token address\\n    mapping (address => uint256) public override customMaxSlippage;\\n\\n    /**\\n     * @dev Custom token out config. Only used in the initializer.\\n     */\\n    struct CustomTokenOut {\\n        address token;\\n        address tokenOut;\\n    }\\n\\n    /**\\n     * @dev Custom max slippage config. Only used in the initializer.\\n     */\\n    struct CustomMaxSlippage {\\n        address token;\\n        uint256 maxSlippage;\\n    }\\n\\n    /**\\n     * @dev Base swap config. Only used in the initializer.\\n     */\\n    struct BaseSwapConfig {\\n        address connector;\\n        address tokenOut;\\n        uint256 maxSlippage;\\n        CustomTokenOut[] customTokensOut;\\n        CustomMaxSlippage[] customMaxSlippages;\\n        TaskConfig taskConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the base swap task. It does call upper contracts initializers.\\n     * @param config Base swap config\\n     */\\n    function __BaseSwapTask_init(BaseSwapConfig memory config) internal onlyInitializing {\\n        __Task_init(config.taskConfig);\\n        __BaseSwapTask_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the base swap task. It does not call upper contracts initializers.\\n     * @param config Base swap config\\n     */\\n    function __BaseSwapTask_init_unchained(BaseSwapConfig memory config) internal onlyInitializing {\\n        _setConnector(config.connector);\\n        _setDefaultTokenOut(config.tokenOut);\\n        _setDefaultMaxSlippage(config.maxSlippage);\\n\\n        for (uint256 i = 0; i < config.customTokensOut.length; i++) {\\n            _setCustomTokenOut(config.customTokensOut[i].token, config.customTokensOut[i].tokenOut);\\n        }\\n\\n        for (uint256 i = 0; i < config.customMaxSlippages.length; i++) {\\n            _setCustomMaxSlippage(config.customMaxSlippages[i].token, config.customMaxSlippages[i].maxSlippage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tells the token out that should be used for a token\\n     */\\n    function getTokenOut(address token) public view virtual override returns (address) {\\n        address tokenOut = customTokenOut[token];\\n        return tokenOut == address(0) ? defaultTokenOut : tokenOut;\\n    }\\n\\n    /**\\n     * @dev Tells the max slippage that should be used for a token\\n     */\\n    function getMaxSlippage(address token) public view virtual override returns (uint256) {\\n        uint256 maxSlippage = customMaxSlippage[token];\\n        return maxSlippage == 0 ? defaultMaxSlippage : maxSlippage;\\n    }\\n\\n    /**\\n     * @dev Sets a new connector\\n     * @param newConnector Address of the connector to be set\\n     */\\n    function setConnector(address newConnector) external override authP(authParams(newConnector)) {\\n        _setConnector(newConnector);\\n    }\\n\\n    /**\\n     * @dev Sets the default token out\\n     * @param tokenOut Address of the default token out to be set\\n     */\\n    function setDefaultTokenOut(address tokenOut) external override authP(authParams(tokenOut)) {\\n        _setDefaultTokenOut(tokenOut);\\n    }\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     * @param maxSlippage Default max slippage to be set\\n     */\\n    function setDefaultMaxSlippage(uint256 maxSlippage) external override authP(authParams(maxSlippage)) {\\n        _setDefaultMaxSlippage(maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Sets a custom token out\\n     * @param token Address of the token to set a custom token out for\\n     * @param tokenOut Address of the token out to be set\\n     */\\n    function setCustomTokenOut(address token, address tokenOut) external override authP(authParams(token, tokenOut)) {\\n        _setCustomTokenOut(token, tokenOut);\\n    }\\n\\n    /**\\n     * @dev Sets a custom max slippage\\n     * @param token Address of the token to set a custom max slippage for\\n     * @param maxSlippage Max slippage to be set\\n     */\\n    function setCustomMaxSlippage(address token, uint256 maxSlippage)\\n        external\\n        override\\n        authP(authParams(token, maxSlippage))\\n    {\\n        _setCustomMaxSlippage(token, maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Before base swap task hook\\n     */\\n    function _beforeBaseSwapTask(address token, uint256 amount, uint256 slippage) internal virtual {\\n        _beforeTask(token, amount);\\n        if (token == address(0)) revert TaskTokenZero();\\n        if (amount == 0) revert TaskAmountZero();\\n        if (getTokenOut(token) == address(0)) revert TaskTokenOutNotSet();\\n\\n        uint256 maxSlippage = getMaxSlippage(token);\\n        if (slippage > maxSlippage) revert TaskSlippageAboveMax(slippage, maxSlippage);\\n    }\\n\\n    /**\\n     * @dev After base swap task hook\\n     */\\n    function _afterBaseSwapTask(address tokenIn, uint256 amountIn, uint256, address tokenOut, uint256 amountOut)\\n        internal\\n        virtual\\n    {\\n        _increaseBalanceConnector(tokenOut, amountOut);\\n        _afterTask(tokenIn, amountIn);\\n    }\\n\\n    /**\\n     * @dev Sets a new connector\\n     * @param newConnector Address of the connector to be set\\n     */\\n    function _setConnector(address newConnector) internal {\\n        if (newConnector == address(0)) revert TaskConnectorZero();\\n        connector = newConnector;\\n        emit ConnectorSet(newConnector);\\n    }\\n\\n    /**\\n     * @dev Sets the default token out\\n     * @param tokenOut Default token out to be set\\n     */\\n    function _setDefaultTokenOut(address tokenOut) internal {\\n        defaultTokenOut = tokenOut;\\n        emit DefaultTokenOutSet(tokenOut);\\n    }\\n\\n    /**\\n     * @dev Sets the default max slippage\\n     * @param maxSlippage Default max slippage to be set\\n     */\\n    function _setDefaultMaxSlippage(uint256 maxSlippage) internal {\\n        if (maxSlippage > FixedPoint.ONE) revert TaskSlippageAboveOne();\\n        defaultMaxSlippage = maxSlippage;\\n        emit DefaultMaxSlippageSet(maxSlippage);\\n    }\\n\\n    /**\\n     * @dev Sets a custom token out for a token\\n     * @param token Address of the token to set the custom token out for\\n     * @param tokenOut Address of the token out to be set\\n     */\\n    function _setCustomTokenOut(address token, address tokenOut) internal {\\n        if (token == address(0)) revert TaskTokenZero();\\n        customTokenOut[token] = tokenOut;\\n        emit CustomTokenOutSet(token, tokenOut);\\n    }\\n\\n    /**\\n     * @dev Sets a custom max slippage for a token\\n     * @param token Address of the token to set the custom max slippage for\\n     * @param maxSlippage Max slippage to be set\\n     */\\n    function _setCustomMaxSlippage(address token, uint256 maxSlippage) internal {\\n        if (token == address(0)) revert TaskTokenZero();\\n        if (maxSlippage > FixedPoint.ONE) revert TaskSlippageAboveOne();\\n        customMaxSlippage[token] = maxSlippage;\\n        emit CustomMaxSlippageSet(token, maxSlippage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/swap/HopL2Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/utils/BytesHelpers.sol';\\nimport '@mimic-fi/v3-connectors/contracts/swap/hop/IHopL2Amm.sol';\\nimport '@mimic-fi/v3-connectors/contracts/interfaces/swap/IHopSwapConnector.sol';\\n\\nimport './BaseSwapTask.sol';\\nimport '../interfaces/swap/IHopL2Swapper.sol';\\n\\n/**\\n * @title Hop L2 swapper\\n * @dev Task that extends the base swap task to use Hop\\n */\\ncontract HopL2Swapper is IHopL2Swapper, BaseSwapTask {\\n    using FixedPoint for uint256;\\n    using BytesHelpers for bytes;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('HOP_L2_SWAPPER');\\n\\n    // List of AMMs per token\\n    mapping (address => address) public override tokenAmm;\\n\\n    /**\\n     * @dev Token amm config. Only used in the initializer.\\n     */\\n    struct TokenAmm {\\n        address token;\\n        address amm;\\n    }\\n\\n    /**\\n     * @dev Hop L2 swap config. Only used in the initializer.\\n     */\\n    struct HopL2SwapConfig {\\n        TokenAmm[] tokenAmms;\\n        BaseSwapConfig baseSwapConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the Hop L2 swapper\\n     * @param config Hop L2 swap config\\n     */\\n    function initialize(HopL2SwapConfig memory config) external virtual initializer {\\n        __HopL2Swapper_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Hop L2 swapper. It does call upper contracts initializers.\\n     * @param config Hop L2 swap config\\n     */\\n    function __HopL2Swapper_init(HopL2SwapConfig memory config) internal onlyInitializing {\\n        __BaseSwapTask_init(config.baseSwapConfig);\\n        __HopL2Swapper_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Hop L2 swapper. It does not call upper contracts initializers.\\n     * @param config Hop L2 swap config\\n     */\\n    function __HopL2Swapper_init_unchained(HopL2SwapConfig memory config) internal onlyInitializing {\\n        for (uint256 i = 0; i < config.tokenAmms.length; i++) {\\n            _setTokenAmm(config.tokenAmms[i].token, config.tokenAmms[i].amm);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets an AMM for a hToken\\n     * @param hToken Address of the hToken to be set\\n     * @param amm AMM address to be set for the hToken\\n     */\\n    function setTokenAmm(address hToken, address amm) external authP(authParams(hToken, amm)) {\\n        _setTokenAmm(hToken, amm);\\n    }\\n\\n    /**\\n     * @dev Execution function\\n     */\\n    function call(address hToken, uint256 amount, uint256 slippage)\\n        external\\n        override\\n        authP(authParams(hToken, amount, slippage))\\n    {\\n        if (amount == 0) amount = getTaskAmount(hToken);\\n        _beforeHopL2Swapper(hToken, amount, slippage);\\n\\n        address tokenOut = getTokenOut(hToken);\\n        address dexAddress = IHopL2Amm(tokenAmm[hToken]).exchangeAddress();\\n        uint256 minAmountOut = amount.mulUp(FixedPoint.ONE - slippage);\\n        bytes memory connectorData = abi.encodeWithSelector(\\n            IHopSwapConnector.execute.selector,\\n            hToken,\\n            tokenOut,\\n            amount,\\n            minAmountOut,\\n            dexAddress\\n        );\\n\\n        bytes memory result = ISmartVault(smartVault).execute(connector, connectorData);\\n        _afterHopL2Swapper(hToken, amount, slippage, tokenOut, result.toUint256());\\n    }\\n\\n    /**\\n     * @dev Before Hop L2 swapper hook\\n     */\\n    function _beforeHopL2Swapper(address token, uint256 amount, uint256 slippage) internal virtual {\\n        _beforeBaseSwapTask(token, amount, slippage);\\n        if (tokenAmm[token] == address(0)) revert TaskMissingHopTokenAmm();\\n    }\\n\\n    /**\\n     * @dev After Hop L2 swapper hook\\n     */\\n    function _afterHopL2Swapper(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 slippage,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) internal virtual {\\n        _afterBaseSwapTask(tokenIn, amountIn, slippage, tokenOut, amountOut);\\n    }\\n\\n    /**\\n     * @dev Set an AMM for a Hop token\\n     * @param hToken Address of the hToken to set an AMM for\\n     * @param amm AMM to be set\\n     */\\n    function _setTokenAmm(address hToken, address amm) internal {\\n        if (hToken == address(0)) revert TaskTokenZero();\\n        if (amm != address(0) && hToken != IHopL2Amm(amm).hToken()) revert TaskHopTokenAmmMismatch(hToken, amm);\\n\\n        tokenAmm[hToken] = amm;\\n        emit TokenAmmSet(hToken, amm);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/swap/OneInchV5Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-helpers/contracts/utils/BytesHelpers.sol';\\nimport '@mimic-fi/v3-connectors/contracts/interfaces/swap/IOneInchV5Connector.sol';\\n\\nimport './BaseSwapTask.sol';\\nimport '../interfaces/swap/IOneInchV5Swapper.sol';\\n\\n/**\\n * @title 1inch v5 swapper\\n * @dev Task that extends the base swap task to use 1inch v5\\n */\\ncontract OneInchV5Swapper is IOneInchV5Swapper, BaseSwapTask {\\n    using FixedPoint for uint256;\\n    using BytesHelpers for bytes;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('1INCH_V5_SWAPPER');\\n\\n    /**\\n     * @dev 1inch v5 swap config. Only used in the initializer.\\n     */\\n    struct OneInchV5SwapConfig {\\n        BaseSwapConfig baseSwapConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the 1inch v5 swapper\\n     * @param config 1inch v5 swap config\\n     */\\n    function initialize(OneInchV5SwapConfig memory config) external virtual initializer {\\n        __OneInchV5Swapper_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the 1inch v5 swapper. It does call upper contracts initializers.\\n     * @param config 1inch v5 swap config\\n     */\\n    function __OneInchV5Swapper_init(OneInchV5SwapConfig memory config) internal onlyInitializing {\\n        __BaseSwapTask_init(config.baseSwapConfig);\\n        __OneInchV5Swapper_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the 1inch v5 swapper. It does not call upper contracts initializers.\\n     * @param config 1inch v5 swap config\\n     */\\n    function __OneInchV5Swapper_init_unchained(OneInchV5SwapConfig memory config) internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Executes the 1inch V5 swapper task\\n     */\\n    function call(address tokenIn, uint256 amountIn, uint256 slippage, bytes memory data)\\n        external\\n        override\\n        authP(authParams(tokenIn, amountIn, slippage))\\n    {\\n        if (amountIn == 0) amountIn = getTaskAmount(tokenIn);\\n        _beforeOneInchV5Swapper(tokenIn, amountIn, slippage);\\n\\n        address tokenOut = getTokenOut(tokenIn);\\n        uint256 price = _getPrice(tokenIn, tokenOut);\\n        uint256 minAmountOut = amountIn.mulUp(price).mulUp(FixedPoint.ONE - slippage);\\n        bytes memory connectorData = abi.encodeWithSelector(\\n            IOneInchV5Connector.execute.selector,\\n            tokenIn,\\n            tokenOut,\\n            amountIn,\\n            minAmountOut,\\n            data\\n        );\\n\\n        bytes memory result = ISmartVault(smartVault).execute(connector, connectorData);\\n        _afterOneInchV5Swapper(tokenIn, amountIn, slippage, tokenOut, result.toUint256());\\n    }\\n\\n    /**\\n     * @dev Before 1inch v5 swapper hook\\n     */\\n    function _beforeOneInchV5Swapper(address token, uint256 amount, uint256 slippage) internal virtual {\\n        _beforeBaseSwapTask(token, amount, slippage);\\n    }\\n\\n    /**\\n     * @dev After 1inch v5 swapper hook\\n     */\\n    function _afterOneInchV5Swapper(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 slippage,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) internal virtual {\\n        _afterBaseSwapTask(tokenIn, amountIn, slippage, tokenOut, amountOut);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/swap/ParaswapV5Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-helpers/contracts/utils/BytesHelpers.sol';\\nimport '@mimic-fi/v3-connectors/contracts/interfaces/swap/IParaswapV5Connector.sol';\\n\\nimport './BaseSwapTask.sol';\\nimport '../interfaces/swap/IParaswapV5Swapper.sol';\\n\\n/**\\n * @title Paraswap V5 swapper task\\n * @dev Task that extends the swapper task to use Paraswap v5\\n */\\ncontract ParaswapV5Swapper is IParaswapV5Swapper, BaseSwapTask {\\n    using FixedPoint for uint256;\\n    using BytesHelpers for bytes;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('PARASWAP_V5_SWAPPER');\\n\\n    // Address of the Paraswap quote signer\\n    address public override quoteSigner;\\n\\n    /**\\n     * @dev Paraswap v5 swap config. Only used in the initializer.\\n     */\\n    struct ParaswapV5SwapConfig {\\n        address quoteSigner;\\n        BaseSwapConfig baseSwapConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the Paraswap v5 swapper\\n     * @param config Paraswap v5 swap config\\n     */\\n    function initialize(ParaswapV5SwapConfig memory config) external virtual initializer {\\n        __ParaswapV5Swapper_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Paraswap v5 swapper. It does call upper contracts initializers.\\n     * @param config Paraswap v5 swap config\\n     */\\n    function __ParaswapV5Swapper_init(ParaswapV5SwapConfig memory config) internal onlyInitializing {\\n        __BaseSwapTask_init(config.baseSwapConfig);\\n        __ParaswapV5Swapper_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Paraswap v5 swapper. It does not call upper contracts initializers.\\n     * @param config Paraswap v5 swap config\\n     */\\n    function __ParaswapV5Swapper_init_unchained(ParaswapV5SwapConfig memory config) internal onlyInitializing {\\n        _setQuoteSigner(config.quoteSigner);\\n    }\\n\\n    /**\\n     * @dev Sets the quote signer address\\n     * @param newQuoteSigner Address of the new quote signer to be set\\n     */\\n    function setQuoteSigner(address newQuoteSigner) external override authP(authParams(newQuoteSigner)) {\\n        _setQuoteSigner(newQuoteSigner);\\n    }\\n\\n    /**\\n     * @dev Execute Paraswap v5 swapper task\\n     */\\n    function call(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        uint256 expectedAmountOut,\\n        uint256 deadline,\\n        bytes memory data,\\n        bytes memory sig\\n    ) external override authP(authParams(tokenIn, amountIn, minAmountOut, expectedAmountOut, deadline)) {\\n        if (amountIn == 0) amountIn = getTaskAmount(tokenIn);\\n        address tokenOut = getTokenOut(tokenIn);\\n        uint256 slippage = FixedPoint.ONE - minAmountOut.divUp(expectedAmountOut);\\n        _beforeParaswapV5Swapper(\\n            tokenIn,\\n            tokenOut,\\n            amountIn,\\n            slippage,\\n            minAmountOut,\\n            expectedAmountOut,\\n            deadline,\\n            data,\\n            sig\\n        );\\n\\n        bytes memory connectorData = abi.encodeWithSelector(\\n            IParaswapV5Connector.execute.selector,\\n            tokenIn,\\n            tokenOut,\\n            amountIn,\\n            minAmountOut,\\n            data\\n        );\\n\\n        bytes memory result = ISmartVault(smartVault).execute(connector, connectorData);\\n        _afterParaswapV5Swapper(tokenIn, amountIn, slippage, tokenOut, result.toUint256());\\n    }\\n\\n    /**\\n     * @dev Before Paraswap v5 swapper hook\\n     */\\n    function _beforeParaswapV5Swapper(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 slippage,\\n        uint256 minAmountOut,\\n        uint256 expectedAmountOut,\\n        uint256 deadline,\\n        bytes memory data,\\n        bytes memory sig\\n    ) internal virtual {\\n        _beforeBaseSwapTask(tokenIn, amountIn, slippage);\\n        bool isBuy = false;\\n        bytes32 message = keccak256(\\n            abi.encodePacked(tokenIn, tokenOut, isBuy, amountIn, minAmountOut, expectedAmountOut, deadline, data)\\n        );\\n        address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(message), sig);\\n        if (signer != quoteSigner) revert TaskInvalidQuoteSigner(signer, quoteSigner);\\n        if (block.timestamp > deadline) revert TaskQuoteSignerPastDeadline(deadline, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev After Paraswap v5 swapper hook\\n     */\\n    function _afterParaswapV5Swapper(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 slippage,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) internal virtual {\\n        _afterBaseSwapTask(tokenIn, amountIn, slippage, tokenOut, amountOut);\\n    }\\n\\n    /**\\n     * @dev Sets the quote signer address\\n     * @param newQuoteSigner Address of the new quote signer to be set\\n     */\\n    function _setQuoteSigner(address newQuoteSigner) internal {\\n        if (newQuoteSigner == address(0)) revert TaskQuoteSignerZero();\\n        quoteSigner = newQuoteSigner;\\n        emit QuoteSignerSet(newQuoteSigner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/swap/UniswapV2Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-helpers/contracts/utils/BytesHelpers.sol';\\nimport '@mimic-fi/v3-connectors/contracts/interfaces/swap/IUniswapV2Connector.sol';\\n\\nimport './BaseSwapTask.sol';\\nimport '../interfaces/swap/IUniswapV2Swapper.sol';\\n\\n/**\\n * @title Uniswap v2 swapper\\n * @dev Task that extends the base swap task to use Uniswap v2\\n */\\ncontract UniswapV2Swapper is IUniswapV2Swapper, BaseSwapTask {\\n    using FixedPoint for uint256;\\n    using BytesHelpers for bytes;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('UNISWAP_V2_SWAPPER');\\n\\n    /**\\n     * @dev Uniswap v2 swap config. Only used in the initializer.\\n     */\\n    struct UniswapV2SwapConfig {\\n        BaseSwapConfig baseSwapConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the Uniswap v2 swapper\\n     * @param config Uniswap v2 swap config\\n     */\\n    function initialize(UniswapV2SwapConfig memory config) external initializer {\\n        __UniswapV2Swapper_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Uniswap v2 swapper. It does call upper contracts.\\n     * @param config Uniswap v2 swap config\\n     */\\n    function __UniswapV2Swapper_init(UniswapV2SwapConfig memory config) internal onlyInitializing {\\n        __BaseSwapTask_init(config.baseSwapConfig);\\n        __UniswapV2Swapper_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Uniswap v2 swapper. It does not call upper contracts.\\n     * @param config Uniswap v2 swap config\\n     */\\n    function __UniswapV2Swapper_init_unchained(UniswapV2SwapConfig memory config) internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Executes the Uniswap v2 swapper task\\n     */\\n    function call(address tokenIn, uint256 amountIn, uint256 slippage, address[] memory hopTokens)\\n        external\\n        override\\n        authP(authParams(tokenIn, amountIn, slippage))\\n    {\\n        if (amountIn == 0) amountIn = getTaskAmount(tokenIn);\\n        _beforeUniswapV2Swapper(tokenIn, amountIn, slippage);\\n\\n        address tokenOut = getTokenOut(tokenIn);\\n        uint256 price = _getPrice(tokenIn, tokenOut);\\n        uint256 minAmountOut = amountIn.mulUp(price).mulUp(FixedPoint.ONE - slippage);\\n\\n        bytes memory connectorData = abi.encodeWithSelector(\\n            IUniswapV2Connector.execute.selector,\\n            tokenIn,\\n            tokenOut,\\n            amountIn,\\n            minAmountOut,\\n            hopTokens\\n        );\\n\\n        bytes memory result = ISmartVault(smartVault).execute(connector, connectorData);\\n        _afterUniswapV2Swapper(tokenIn, amountIn, slippage, tokenOut, result.toUint256());\\n    }\\n\\n    /**\\n     * @dev Before Uniswap v2 swapper hook\\n     */\\n    function _beforeUniswapV2Swapper(address token, uint256 amount, uint256 slippage) internal virtual {\\n        _beforeBaseSwapTask(token, amount, slippage);\\n    }\\n\\n    /**\\n     * @dev After Uniswap v2 swapper hook\\n     */\\n    function _afterUniswapV2Swapper(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 slippage,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) internal virtual {\\n        _afterBaseSwapTask(tokenIn, amountIn, slippage, tokenOut, amountOut);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/swap/UniswapV3Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/math/FixedPoint.sol';\\nimport '@mimic-fi/v3-helpers/contracts/utils/BytesHelpers.sol';\\nimport '@mimic-fi/v3-connectors/contracts/interfaces/swap/IUniswapV3Connector.sol';\\n\\nimport './BaseSwapTask.sol';\\nimport '../interfaces/swap/IUniswapV3Swapper.sol';\\n\\n/**\\n * @title Uniswap v3 swapper task\\n * @dev Task that extends the swapper task to use Uniswap v3\\n */\\ncontract UniswapV3Swapper is IUniswapV3Swapper, BaseSwapTask {\\n    using FixedPoint for uint256;\\n    using BytesHelpers for bytes;\\n\\n    // Execution type for relayers\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('UNISWAP_V3_SWAPPER');\\n\\n    /**\\n     * @dev Uniswap v3 swap config. Only used in the initializer.\\n     */\\n    struct UniswapV3SwapConfig {\\n        BaseSwapConfig baseSwapConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the Uniswap v3 swapper\\n     * @param config Uniswap v3 swap config\\n     */\\n    function initialize(UniswapV3SwapConfig memory config) external initializer {\\n        __UniswapV3Swapper_init(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Uniswap V3 swapper. It does call upper contracts.\\n     * @param config Uniswap v3 swap config\\n     */\\n    function __UniswapV3Swapper_init(UniswapV3SwapConfig memory config) internal onlyInitializing {\\n        __BaseSwapTask_init(config.baseSwapConfig);\\n        __UniswapV3Swapper_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the Uniswap V3 swapper. It does not call upper contracts.\\n     * @param config Uniswap v3 swap config\\n     */\\n    function __UniswapV3Swapper_init_unchained(UniswapV3SwapConfig memory config) internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Executes the Uniswap v3 swapper task\\n     */\\n    function call(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 slippage,\\n        uint24 fee,\\n        address[] memory hopTokens,\\n        uint24[] memory hopFees\\n    ) external override authP(authParams(tokenIn, amountIn, slippage, fee)) {\\n        if (amountIn == 0) amountIn = getTaskAmount(tokenIn);\\n        _beforeUniswapV3Swapper(tokenIn, amountIn, slippage);\\n\\n        address tokenOut = getTokenOut(tokenIn);\\n        uint256 price = _getPrice(tokenIn, tokenOut);\\n        uint256 minAmountOut = amountIn.mulUp(price).mulUp(FixedPoint.ONE - slippage);\\n\\n        bytes memory connectorData = abi.encodeWithSelector(\\n            IUniswapV3Connector.execute.selector,\\n            tokenIn,\\n            tokenOut,\\n            amountIn,\\n            minAmountOut,\\n            fee,\\n            hopTokens,\\n            hopFees\\n        );\\n\\n        bytes memory result = ISmartVault(smartVault).execute(connector, connectorData);\\n        _afterUniswapV3Swapper(tokenIn, amountIn, slippage, tokenOut, result.toUint256());\\n    }\\n\\n    /**\\n     * @dev Before Uniswap v3 swapper task\\n     */\\n    function _beforeUniswapV3Swapper(address token, uint256 amount, uint256 slippage) internal virtual {\\n        _beforeBaseSwapTask(token, amount, slippage);\\n    }\\n\\n    /**\\n     * @dev After Uniswap v3 swapper hook\\n     */\\n    function _afterUniswapV3Swapper(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 slippage,\\n        address tokenOut,\\n        uint256 amountOut\\n    ) internal virtual {\\n        _afterBaseSwapTask(tokenIn, amountIn, slippage, tokenOut, amountOut);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Task.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport './interfaces/ITask.sol';\\nimport './base/BaseTask.sol';\\nimport './base/PausableTask.sol';\\nimport './base/GasLimitedTask.sol';\\nimport './base/TimeLockedTask.sol';\\nimport './base/TokenIndexedTask.sol';\\nimport './base/TokenThresholdTask.sol';\\nimport './base/VolumeLimitedTask.sol';\\n\\n/**\\n * @title Task\\n * @dev Shared components across all tasks\\n */\\nabstract contract Task is\\n    ITask,\\n    BaseTask,\\n    PausableTask,\\n    GasLimitedTask,\\n    TimeLockedTask,\\n    TokenIndexedTask,\\n    TokenThresholdTask,\\n    VolumeLimitedTask\\n{\\n    /**\\n     * @dev Task config. Only used in the initializer.\\n     */\\n    struct TaskConfig {\\n        BaseConfig baseConfig;\\n        GasLimitConfig gasLimitConfig;\\n        TimeLockConfig timeLockConfig;\\n        TokenIndexConfig tokenIndexConfig;\\n        TokenThresholdConfig tokenThresholdConfig;\\n        VolumeLimitConfig volumeLimitConfig;\\n    }\\n\\n    /**\\n     * @dev Initializes the task. It does call upper contracts initializers.\\n     * @param config Task config\\n     */\\n    function __Task_init(TaskConfig memory config) internal onlyInitializing {\\n        __BaseTask_init(config.baseConfig);\\n        __PausableTask_init();\\n        __GasLimitedTask_init(config.gasLimitConfig);\\n        __TimeLockedTask_init(config.timeLockConfig);\\n        __TokenIndexedTask_init(config.tokenIndexConfig);\\n        __TokenThresholdTask_init(config.tokenThresholdConfig);\\n        __VolumeLimitedTask_init(config.volumeLimitConfig);\\n        __Task_init_unchained(config);\\n    }\\n\\n    /**\\n     * @dev Initializes the task. It does not call upper contracts initializers.\\n     * @param config Task config\\n     */\\n    function __Task_init_unchained(TaskConfig memory config) internal onlyInitializing {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Fetches a base/quote price\\n     */\\n    function _getPrice(address base, address quote)\\n        internal\\n        view\\n        override(BaseTask, GasLimitedTask, TokenThresholdTask, VolumeLimitedTask)\\n        returns (uint256)\\n    {\\n        return BaseTask._getPrice(base, quote);\\n    }\\n\\n    /**\\n     * @dev Before task hook\\n     */\\n    function _beforeTask(address token, uint256 amount) internal virtual {\\n        _beforeBaseTask(token, amount);\\n        _beforePausableTask(token, amount);\\n        _beforeGasLimitedTask(token, amount);\\n        _beforeTimeLockedTask(token, amount);\\n        _beforeTokenIndexedTask(token, amount);\\n        _beforeTokenThresholdTask(token, amount);\\n        _beforeVolumeLimitedTask(token, amount);\\n    }\\n\\n    /**\\n     * @dev After task hook\\n     */\\n    function _afterTask(address token, uint256 amount) internal virtual {\\n        _afterVolumeLimitedTask(token, amount);\\n        _afterTokenThresholdTask(token, amount);\\n        _afterTokenIndexedTask(token, amount);\\n        _afterTimeLockedTask(token, amount);\\n        _afterGasLimitedTask(token, amount);\\n        _afterPausableTask(token, amount);\\n        _afterBaseTask(token, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/base/BaseTaskMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../../base/BaseTask.sol';\\n\\ncontract BaseTaskMock is BaseTask {\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('BASE_TASK');\\n\\n    function initialize(BaseConfig memory config) external virtual initializer {\\n        __BaseTask_init(config);\\n    }\\n\\n    function call(address token, uint256 amount) external {\\n        _beforeBaseTask(token, amount);\\n        _afterBaseTask(token, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/base/GasLimitedTaskMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../../base/BaseTask.sol';\\nimport '../../base/GasLimitedTask.sol';\\n\\ncontract GasLimitedTaskMock is BaseTask, GasLimitedTask {\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('GAS_LIMITED_TASK');\\n\\n    struct GasLimitMockConfig {\\n        BaseConfig baseConfig;\\n        GasLimitConfig gasLimitConfig;\\n    }\\n\\n    function initialize(GasLimitMockConfig memory config) external virtual initializer {\\n        __BaseTask_init(config.baseConfig);\\n        __GasLimitedTask_init(config.gasLimitConfig);\\n    }\\n\\n    function call(address token, uint256 amount) external {\\n        _beforeGasLimitedTaskMock(token, amount);\\n        _afterGasLimitedTaskMock(token, amount);\\n    }\\n\\n    /**\\n     * @dev Fetches a base/quote price\\n     */\\n    function _getPrice(address base, address quote) internal view override(BaseTask, GasLimitedTask) returns (uint256) {\\n        return BaseTask._getPrice(base, quote);\\n    }\\n\\n    /**\\n     * @dev Before gas limited task mock hook\\n     */\\n    function _beforeGasLimitedTaskMock(address token, uint256 amount) internal virtual {\\n        _beforeBaseTask(token, amount);\\n        _beforeGasLimitedTask(token, amount);\\n    }\\n\\n    /**\\n     * @dev After gas limited task mock hook\\n     */\\n    function _afterGasLimitedTaskMock(address token, uint256 amount) internal virtual {\\n        _afterGasLimitedTask(token, amount);\\n        _afterBaseTask(token, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/base/PausableTaskMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../../base/BaseTask.sol';\\nimport '../../base/PausableTask.sol';\\n\\ncontract PausableTaskMock is BaseTask, PausableTask {\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('PAUSABLE_TASK');\\n\\n    struct PauseMockConfig {\\n        BaseConfig baseConfig;\\n    }\\n\\n    function initialize(PauseMockConfig memory config) external virtual initializer {\\n        __BaseTask_init(config.baseConfig);\\n        __PausableTask_init();\\n    }\\n\\n    function call(address token, uint256 amount) external {\\n        if (amount == 0) amount = getTaskAmount(token);\\n        _beforePausableTaskMock(token, amount);\\n        _afterPausableTaskMock(token, amount);\\n    }\\n\\n    /**\\n     * @dev Before pausable task mock hook\\n     */\\n    function _beforePausableTaskMock(address token, uint256 amount) internal virtual {\\n        _beforeBaseTask(token, amount);\\n        _beforePausableTask(token, amount);\\n    }\\n\\n    /**\\n     * @dev After pausable task mock hook\\n     */\\n    function _afterPausableTaskMock(address token, uint256 amount) internal virtual {\\n        _afterPausableTask(token, amount);\\n        _afterBaseTask(token, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/base/TimeLockedTaskMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../../base/BaseTask.sol';\\nimport '../../base/TimeLockedTask.sol';\\n\\ncontract TimeLockedTaskMock is BaseTask, TimeLockedTask {\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('TIME_LOCKED_TASK');\\n\\n    struct TimeLockMockConfig {\\n        BaseConfig baseConfig;\\n        TimeLockConfig timeLockConfig;\\n    }\\n\\n    function initialize(TimeLockMockConfig memory config) external virtual initializer {\\n        __BaseTask_init(config.baseConfig);\\n        __TimeLockedTask_init(config.timeLockConfig);\\n    }\\n\\n    function call() external {\\n        _beforeTimeLockedTaskMock();\\n        _afterTimeLockedTaskMock();\\n    }\\n\\n    /**\\n     * @dev Before time locked task mock hook\\n     */\\n    function _beforeTimeLockedTaskMock() internal virtual {\\n        _beforeBaseTask(address(0), 0);\\n        _beforeTimeLockedTask(address(0), 0);\\n    }\\n\\n    /**\\n     * @dev After time locked task mock hook\\n     */\\n    function _afterTimeLockedTaskMock() internal virtual {\\n        _afterTimeLockedTask(address(0), 0);\\n        _afterBaseTask(address(0), 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/base/TokenIndexedTaskMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../../base/BaseTask.sol';\\nimport '../../base/TokenIndexedTask.sol';\\n\\ncontract TokenIndexedTaskMock is BaseTask, TokenIndexedTask {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('TOKEN_INDEXED_TASK');\\n\\n    struct TokenIndexMockConfig {\\n        BaseConfig baseConfig;\\n        TokenIndexConfig tokenIndexConfig;\\n    }\\n\\n    function initialize(TokenIndexMockConfig memory config) external virtual initializer {\\n        __BaseTask_init(config.baseConfig);\\n        __TokenIndexedTask_init(config.tokenIndexConfig);\\n    }\\n\\n    function call(address token) external {\\n        _beforeTokenIndexedTaskMock(token);\\n        _afterTokenIndexedTaskMock(token);\\n    }\\n\\n    /**\\n     * @dev Before token indexed task mock hook\\n     */\\n    function _beforeTokenIndexedTaskMock(address token) internal virtual {\\n        _beforeBaseTask(token, 0);\\n        _beforeTokenIndexedTask(token, 0);\\n    }\\n\\n    /**\\n     * @dev After token indexed task mock hook\\n     */\\n    function _afterTokenIndexedTaskMock(address token) internal virtual {\\n        _afterTokenIndexedTask(token, 0);\\n        _afterBaseTask(token, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/base/TokenThresholdTaskMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../../base/BaseTask.sol';\\nimport '../../base/TokenThresholdTask.sol';\\n\\ncontract TokenThresholdTaskMock is BaseTask, TokenThresholdTask {\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('TOKEN_THRESHOLD_TASK');\\n\\n    struct TokenThresholdMockConfig {\\n        BaseConfig baseConfig;\\n        TokenThresholdConfig tokenThresholdConfig;\\n    }\\n\\n    function initialize(TokenThresholdMockConfig memory config) external virtual initializer {\\n        __BaseTask_init(config.baseConfig);\\n        __TokenThresholdTask_init(config.tokenThresholdConfig);\\n    }\\n\\n    function call(address token, uint256 amount) external {\\n        _beforeTokenThresholdTask(token, amount);\\n        _afterTokenThresholdTask(token, amount);\\n    }\\n\\n    /**\\n     * @dev Fetches a base/quote price\\n     */\\n    function _getPrice(address base, address quote)\\n        internal\\n        view\\n        override(BaseTask, TokenThresholdTask)\\n        returns (uint256)\\n    {\\n        return BaseTask._getPrice(base, quote);\\n    }\\n\\n    /**\\n     * @dev Before token threshold task mock hook\\n     */\\n    function _beforeTokenThresholdTaskMock(address token, uint256 amount) internal virtual {\\n        _beforeBaseTask(token, amount);\\n        _beforeTokenThresholdTask(token, amount);\\n    }\\n\\n    /**\\n     * @dev After token threshold task mock hook\\n     */\\n    function _afterTokenThresholdTaskMock(address token, uint256 amount) internal virtual {\\n        _afterTokenThresholdTask(token, amount);\\n        _afterBaseTask(token, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/base/VolumeLimitedTaskMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport '../../base/BaseTask.sol';\\nimport '../../base/VolumeLimitedTask.sol';\\n\\ncontract VolumeLimitedTaskMock is BaseTask, VolumeLimitedTask {\\n    bytes32 public constant override EXECUTION_TYPE = keccak256('VOLUME_LIMITED_TASK');\\n\\n    struct VolumeLimitMockConfig {\\n        BaseConfig baseConfig;\\n        VolumeLimitConfig volumeLimitConfig;\\n    }\\n\\n    function initialize(VolumeLimitMockConfig memory config) external virtual initializer {\\n        __BaseTask_init(config.baseConfig);\\n        __VolumeLimitedTask_init(config.volumeLimitConfig);\\n    }\\n\\n    function call(address token, uint256 amount) external {\\n        _beforeVolumeLimitedTaskMock(token, amount);\\n        _afterVolumeLimitedTaskMock(token, amount);\\n    }\\n\\n    /**\\n     * @dev Fetches a base/quote price\\n     */\\n    function _getPrice(address base, address quote)\\n        internal\\n        view\\n        override(BaseTask, VolumeLimitedTask)\\n        returns (uint256)\\n    {\\n        return BaseTask._getPrice(base, quote);\\n    }\\n\\n    /**\\n     * @dev Before volume limited task mock hook\\n     */\\n    function _beforeVolumeLimitedTaskMock(address token, uint256 amount) internal virtual {\\n        _beforeBaseTask(token, amount);\\n        _beforeVolumeLimitedTask(token, amount);\\n    }\\n\\n    /**\\n     * @dev After volume limited task mock hook\\n     */\\n    function _afterVolumeLimitedTaskMock(address token, uint256 amount) internal virtual {\\n        _afterVolumeLimitedTask(token, amount);\\n        _afterBaseTask(token, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/bridge/AxelarConnectorMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\ncontract AxelarConnectorMock {\\n    event LogExecute(uint256 chainId, address token, uint256 amount, address recipient);\\n\\n    function execute(uint256 chainId, address token, uint256 amount, address recipient) external {\\n        emit LogExecute(chainId, token, amount, recipient);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/bridge/ConnextConnectorMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\ncontract ConnextConnectorMock {\\n    event LogExecute(\\n        uint256 chainId,\\n        address token,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address recipient,\\n        uint256 relayerFee\\n    );\\n\\n    function execute(\\n        uint256 chainId,\\n        address token,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address recipient,\\n        uint256 relayerFee\\n    ) external {\\n        emit LogExecute(chainId, token, amount, minAmountOut, recipient, relayerFee);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/bridge/HopConnectorMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\ncontract HopConnectorMock {\\n    event LogExecute(\\n        uint256 chainId,\\n        address token,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address recipient,\\n        address bridge,\\n        uint256 deadline,\\n        address relayer,\\n        uint256 fee\\n    );\\n\\n    function execute(\\n        uint256 chainId,\\n        address token,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address recipient,\\n        address bridge,\\n        uint256 deadline,\\n        address relayer,\\n        uint256 fee\\n    ) external {\\n        emit LogExecute(chainId, token, amount, minAmountOut, recipient, bridge, deadline, relayer, fee);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/bridge/WormholeConnectorMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\ncontract WormholeConnectorMock {\\n    event LogExecute(uint256 chainId, address token, uint256 amount, uint256 minAmountOut, address recipient);\\n\\n    function execute(uint256 chainId, address token, uint256 amount, uint256 minAmountOut, address recipient) external {\\n        emit LogExecute(chainId, token, amount, minAmountOut, recipient);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/liquidity/ConvexConnectorMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\nimport '@mimic-fi/v3-helpers/contracts/mocks/TokenMock.sol';\\n\\ncontract ConvexConnectorMock {\\n    IERC20 public immutable rewardToken;\\n    uint256 public immutable rewardAmount;\\n\\n    constructor() {\\n        rewardAmount = 5e18;\\n        rewardToken = new TokenMock('Convex Claimer Reward', 18);\\n    }\\n\\n    mapping (address => address) public getCvxPool;\\n\\n    mapping (address => address) public getCurvePool;\\n\\n    event LogClaim(address cvxPool);\\n\\n    event LogJoin(address curvePool, uint256 amount);\\n\\n    event LogExit(address cvxPool, uint256 amount);\\n\\n    function setCvxPool(address curvePool, address cvxPool) external {\\n        getCvxPool[curvePool] = cvxPool;\\n    }\\n\\n    function setCurvePool(address cvxPool, address curvePool) external {\\n        getCurvePool[cvxPool] = curvePool;\\n    }\\n\\n    function claim(address cvxPool) external returns (address[] memory tokens, uint256[] memory amounts) {\\n        tokens = new address[](1);\\n        tokens[0] = address(rewardToken);\\n        amounts = new uint256[](1);\\n        amounts[0] = rewardAmount;\\n        emit LogClaim(cvxPool);\\n    }\\n\\n    function join(address curvePool, uint256 amount) external returns (uint256) {\\n        emit LogJoin(curvePool, amount);\\n        return amount;\\n    }\\n\\n    function exit(address cvxPool, uint256 amount) external returns (uint256) {\\n        emit LogExit(cvxPool, amount);\\n        return amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/liquidity/Curve2CrvConnectorMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\ncontract Curve2CrvConnectorMock {\\n    event LogJoin(address pool, address tokenIn, uint256 amountIn, uint256 slippage);\\n\\n    event LogExit(address pool, uint256 amountIn, address tokenOut, uint256 slippage);\\n\\n    function join(address pool, address tokenIn, uint256 amountIn, uint256 slippage) external returns (uint256) {\\n        emit LogJoin(pool, tokenIn, amountIn, slippage);\\n        return amountIn;\\n    }\\n\\n    function exit(address pool, uint256 amountIn, address tokenOut, uint256 slippage) external returns (uint256) {\\n        emit LogExit(pool, amountIn, tokenOut, slippage);\\n        return amountIn;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/mocks/HopL2AmmMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract HopL2AmmMock {\\n    address public immutable hToken;\\n    address public immutable l2CanonicalToken;\\n\\n    constructor(address _token, address _hToken) {\\n        l2CanonicalToken = _token;\\n        hToken = _hToken;\\n    }\\n\\n    function exchangeAddress() external view returns (address) {\\n        return address(this);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/mocks/RelayerMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract RelayerMock {\\n    event Deposited(address smartVault, uint256 amount);\\n\\n    mapping (address => uint256) public getSmartVaultBalance;\\n\\n    mapping (address => uint256) public getSmartVaultUsedQuota;\\n\\n    function deposit(address smartVault, uint256 amount) external payable {\\n        getSmartVaultBalance[smartVault] += amount;\\n        emit Deposited(smartVault, amount);\\n    }\\n\\n    function setSmartVaultUsedQuota(address smartVault, uint256 quota) external {\\n        getSmartVaultUsedQuota[smartVault] = quota;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/swap/HopSwapConnectorMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\ncontract HopSwapConnectorMock {\\n    event LogExecute(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut, address hopDexAddress);\\n\\n    function execute(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut, address hopDexAddress)\\n        external\\n        returns (uint256)\\n    {\\n        emit LogExecute(tokenIn, tokenOut, amountIn, minAmountOut, hopDexAddress);\\n        return minAmountOut;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/swap/OneInchV5ConnectorMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\ncontract OneInchV5ConnectorMock {\\n    event LogExecute(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut, bytes data);\\n\\n    function execute(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut, bytes memory data)\\n        external\\n        returns (uint256)\\n    {\\n        emit LogExecute(tokenIn, tokenOut, amountIn, minAmountOut, data);\\n        return minAmountOut;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/swap/ParaswapV5ConnectorMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\ncontract ParaswapV5ConnectorMock {\\n    event LogExecute(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut, bytes data);\\n\\n    function execute(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut, bytes memory data)\\n        external\\n        returns (uint256)\\n    {\\n        emit LogExecute(tokenIn, tokenOut, amountIn, minAmountOut, data);\\n        return minAmountOut;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/swap/UniswapV2ConnectorMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\ncontract UniswapV2ConnectorMock {\\n    event LogExecute(address tokenIn, address tokenOut, uint256 amountIn, uint256 minAmountOut, address[] hopTokens);\\n\\n    function execute(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address[] memory hopTokens\\n    ) external returns (uint256) {\\n        emit LogExecute(tokenIn, tokenOut, amountIn, minAmountOut, hopTokens);\\n        return minAmountOut;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/swap/UniswapV3ConnectorMock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\npragma solidity ^0.8.0;\\n\\ncontract UniswapV3ConnectorMock {\\n    event LogExecute(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        uint24 fee,\\n        address[] hopTokens,\\n        uint24[] hopFees\\n    );\\n\\n    function execute(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        uint24 fee,\\n        address[] memory hopTokens,\\n        uint24[] memory hopFees\\n    ) external returns (uint256) {\\n        emit LogExecute(tokenIn, tokenOut, amountIn, minAmountOut, fee, hopTokens, hopFees);\\n        return minAmountOut;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"what\",\"type\":\"bytes4\"},{\"internalType\":\"uint256[]\",\"name\":\"how\",\"type\":\"uint256[]\"}],\"name\":\"AuthSenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aInflated\",\"type\":\"uint256\"}],\"name\":\"FixedPointDivInternal\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"FixedPointMulOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FixedPointZeroDivision\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskAcceptanceInputLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskAcceptanceTokenZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskAmountZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"TaskBadAmountOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskGasNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"TaskGasPriceLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"TaskInvalidAllowedDate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"TaskInvalidAllowedWindow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"frequency\",\"type\":\"uint256\"}],\"name\":\"TaskInvalidFrequency\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"TaskInvalidFrequencyMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"TaskInvalidThresholdInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"TaskInvalidVolumeLimitInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preBalance\",\"type\":\"uint256\"}],\"name\":\"TaskPostBalanceUnexpected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priorityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priorityFeeLimit\",\"type\":\"uint256\"}],\"name\":\"TaskPriorityFeeLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"connectorId\",\"type\":\"bytes32\"}],\"name\":\"TaskSameBalanceConnectors\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartVault\",\"type\":\"address\"}],\"name\":\"TaskSmartVaultPriceOracleNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskThresholdTokenZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"TaskTimeLockActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TaskTokenNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"TaskTokenThresholdNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskTokenZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txCostLimit\",\"type\":\"uint256\"}],\"name\":\"TaskTxCostLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskTxCostLimitPctAboveOne\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txCostPct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txCostLimitPct\",\"type\":\"uint256\"}],\"name\":\"TaskTxCostLimitPctExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskUnpaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"TaskVolumeLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskVolumeLimitTokenZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previous\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"next\",\"type\":\"bytes32\"}],\"name\":\"BalanceConnectorsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thresholdToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"CustomTokenThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"CustomVolumeLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"DefaultTokenThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"DefaultVolumeLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPriceLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priorityFeeLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txCostLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txCostLimitPct\",\"type\":\"uint256\"}],\"name\":\"GasLimitsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowedAt\",\"type\":\"uint256\"}],\"name\":\"TimeLockAllowedAtSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frequency\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowedAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"TimeLockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"name\":\"TokensAcceptanceListSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ITokenIndexedTask.TokensAcceptanceType\",\"name\":\"acceptanceType\",\"type\":\"uint8\"}],\"name\":\"TokensAcceptanceTypeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXECUTION_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"call\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"customTokenThreshold\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"thresholdToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"customVolumeLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextResetTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultTokenThreshold\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"thresholdToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultVolumeLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextResetTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceConnectors\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"previous\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"next\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gasPriceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priorityFeeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txCostLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txCostLimitPct\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTaskAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeLock\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"frequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenThreshold\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"thresholdToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getVolumeLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextResetTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"balancerVault\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"smartVault\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"previousBalanceConnectorId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextBalanceConnectorId\",\"type\":\"bytes32\"}],\"internalType\":\"struct BaseTask.BaseConfig\",\"name\":\"baseConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"gasPriceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priorityFeeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txCostLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txCostLimitPct\",\"type\":\"uint256\"}],\"internalType\":\"struct GasLimitedTask.GasLimitConfig\",\"name\":\"gasLimitConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"frequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"internalType\":\"struct TimeLockedTask.TimeLockConfig\",\"name\":\"timeLockConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ITokenIndexedTask.TokensAcceptanceType\",\"name\":\"acceptanceType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"internalType\":\"struct TokenIndexedTask.TokenIndexConfig\",\"name\":\"tokenIndexConfig\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenThresholdTask.Threshold\",\"name\":\"defaultThreshold\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenThresholdTask.Threshold\",\"name\":\"threshold\",\"type\":\"tuple\"}],\"internalType\":\"struct TokenThresholdTask.CustomThresholdConfig[]\",\"name\":\"customThresholdConfigs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TokenThresholdTask.TokenThresholdConfig\",\"name\":\"tokenThresholdConfig\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"internalType\":\"struct VolumeLimitedTask.VolumeLimitParams\",\"name\":\"defaultVolumeLimit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"internalType\":\"struct VolumeLimitedTask.VolumeLimitParams\",\"name\":\"volumeLimit\",\"type\":\"tuple\"}],\"internalType\":\"struct VolumeLimitedTask.CustomVolumeLimitConfig[]\",\"name\":\"customVolumeLimitConfigs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct VolumeLimitedTask.VolumeLimitConfig\",\"name\":\"volumeLimitConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct Task.TaskConfig\",\"name\":\"taskConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct BalancerBPTExiter.BPTExitConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"previous\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"next\",\"type\":\"bytes32\"}],\"name\":\"setBalanceConnectors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"thresholdToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setCustomTokenThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitPeriod\",\"type\":\"uint256\"}],\"name\":\"setCustomVolumeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"thresholdToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setDefaultTokenThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitPeriod\",\"type\":\"uint256\"}],\"name\":\"setDefaultVolumeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGasPriceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPriorityFeeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTxCostLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTxCostLimitPct\",\"type\":\"uint256\"}],\"name\":\"setGasLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"frequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"setTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"added\",\"type\":\"bool[]\"}],\"name\":\"setTokensAcceptanceList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ITokenIndexedTask.TokensAcceptanceType\",\"name\":\"newTokensAcceptanceType\",\"type\":\"uint8\"}],\"name\":\"setTokensAcceptanceType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensAcceptanceType\",\"outputs\":[{\"internalType\":\"enum ITokenIndexedTask.TokensAcceptanceType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BalancerBPTExiter", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}