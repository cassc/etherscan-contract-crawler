{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/core/vaults/single-option-physical/SingleOptionPhysicalVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// external libraries\\nimport {TokenIdUtil} from \\\"pomace/libraries/TokenIdUtil.sol\\\";\\n\\n// abstracts\\nimport {PhysicalOptionsVault} from \\\"../mixins/options/PhysicalOptionsVault.sol\\\";\\nimport {SingleOptionPhysicalVaultStorage} from \\\"./SingleOptionPhysicalVaultStorage.sol\\\";\\n\\nimport {TokenType} from \\\"pomace/config/types.sol\\\";\\n\\nimport \\\"./errors.sol\\\";\\nimport \\\"../../../config/types.sol\\\";\\nimport {PLACEHOLDER_UINT} from \\\"../../../config/constants.sol\\\";\\n\\n/**\\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe the inheritance chain closely.\\n * Any changes/appends in storage variable needs to happen in VaultStorage.\\n * SingleProductVault should not inherit from any other contract aside from OptionVault, VaultStorage\\n */\\ncontract SingleOptionPhysicalVault is PhysicalOptionsVault, SingleOptionPhysicalVaultStorage {\\n    using TokenIdUtil for uint256;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////*/\\n    event GoldenTokenSet(uint256 goldenToken, uint256 newGoldenToken);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Constructor and initialization\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _registrar is the address of the registrar contract\\n     * @param _share is the erc1155 contract that issues shares\\n     * @param _marginEngine is the margin engine used for Grappa (options protocol)\\n     */\\n    constructor(address _registrar, address _share, address _marginEngine)\\n        PhysicalOptionsVault(_registrar, _share, _marginEngine)\\n    {}\\n\\n    /**\\n     * @notice Initializes the OptionsVault contract with storage variables.\\n     * @param _initParams is the struct with vault initialization parameters\\n     * @param _auction is the address that settles the option contract\\n     * @param _goldenToken is the token to reference for characteristics\\n     */\\n    function initialize(InitParams calldata _initParams, address _auction, uint256 _goldenToken, Collateral calldata _premium)\\n        external\\n        initializer\\n    {\\n        (, uint40 productId,,, uint64 exerciseWindow_) = _goldenToken.parseTokenId();\\n\\n        __PhysicalOptionsVault_init(_initParams, _auction, exerciseWindow_, _premium);\\n\\n        if (productId == 0) revert SOPV_BadProductId();\\n\\n        goldenToken = _goldenToken;\\n    }\\n\\n    function _setExerciseWindow(uint256 _exerciseWindow) internal virtual override {\\n        super._setExerciseWindow(_exerciseWindow);\\n\\n        uint256 _goldenToken = goldenToken;\\n\\n        // set the last 64 bits of tokenId which is the exercise window to the new value\\n        unchecked {\\n            goldenToken = ((goldenToken >> 64) << 64) + _exerciseWindow;\\n        }\\n\\n        emit GoldenTokenSet(_goldenToken, goldenToken);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Vault Operations\\n    //////////////////////////////////////////////////////////////*/\\n\\n    // Commenting out for space\\n    // function setGoldenToken(uint256 _goldenToken) external {\\n    //     _onlyOwner();\\n\\n    //     (, uint40 productId,,,) = _goldenToken.parseTokenId();\\n\\n    //     if (productId == 0) revert SOPV_BadProductId();\\n\\n    //     emit GoldenTokenSet(goldenToken, _goldenToken);\\n\\n    //     goldenToken = _goldenToken;\\n    // }\\n\\n    function verifyOptions(uint256[] calldata _options) external view override {\\n        uint256 currentRoundExpiry = expiry[vaultState.round];\\n\\n        // initRounds set value to 1, so 0 or 1 are seed values\\n        if (currentRoundExpiry <= PLACEHOLDER_UINT) revert SOPV_BadExpiry();\\n\\n        (TokenType tokenType, uint40 productId,,,) = goldenToken.parseTokenId();\\n\\n        for (uint256 i; i < _options.length;) {\\n            (TokenType tokenType_, uint40 productId_, uint64 expiry,, uint64 exerciseWindow_) =\\n                TokenIdUtil.parseTokenId(_options[i]);\\n\\n            if (tokenType_ != tokenType) revert SOPV_TokenTypeMismatch();\\n\\n            if (productId_ != productId) revert SOPV_ProductIdMismatch();\\n\\n            // expirations need to match\\n            if (currentRoundExpiry != expiry) revert SOPV_ExpiryMismatch();\\n\\n            if (exerciseWindow_ != exerciseWindow) revert SOPV_ExerciseWindowMismatch();\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-physical/src/libraries/TokenIdUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable max-line-length\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../config/enums.sol\\\";\\nimport \\\"../config/errors.sol\\\";\\n\\n/**\\n * Token ID =\\n *\\n *  * ------------------- | ------------------- | ---------------- | ---------------- | -------------------------- *\\n *  | tokenType (32 bits) | productId (32 bits) | expiry (64 bits) | strike (64 bits) | exerciseWindow (64 bits) |\\n *  * ------------------- | ------------------- | ---------------- | ---------------- | -------------------------- *\\n */\\n\\nlibrary TokenIdUtil {\\n    /**\\n     * @notice calculate ERC1155 token id for given option parameters. See table above for tokenId\\n     * @param tokenType TokenType enum\\n     * @param productId if of the product\\n     * @param expiry timestamp of option expiry\\n     * @param strike strike price of the long option, with 6 decimals\\n     * @param exerciseWindow time after expiry in which the option can be exercised\\n     * @return tokenId token id\\n     */\\n    function getTokenId(TokenType tokenType, uint32 productId, uint64 expiry, uint64 strike, uint64 exerciseWindow)\\n        internal\\n        pure\\n        returns (uint256 tokenId)\\n    {\\n        unchecked {\\n            tokenId = (uint256(tokenType) << 226) + (uint256(productId) << 192) + (uint256(expiry) << 128)\\n                + (uint256(strike) << 64) + uint256(exerciseWindow);\\n        }\\n    }\\n\\n    /**\\n     * @notice derive option, product, expiry and strike price from ERC1155 token id\\n     * @dev    See table above for tokenId composition\\n     * @param tokenId token id\\n     * @return tokenType TokenType enum\\n     * @return productId 32 bits product id\\n     * @return expiry timestamp of option expiry\\n     * @return strike strike price of the long option, with 6 decimals\\n     * @return exerciseWindow time after expiry in which the option can be exercised\\n     */\\n    function parseTokenId(uint256 tokenId)\\n        internal\\n        pure\\n        returns (TokenType tokenType, uint32 productId, uint64 expiry, uint64 strike, uint64 exerciseWindow)\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            tokenType := shr(226, tokenId)\\n            productId := shr(192, tokenId)\\n            expiry := shr(128, tokenId)\\n            strike := shr(64, tokenId)\\n            exerciseWindow := tokenId\\n        }\\n    }\\n\\n    /**\\n     * @notice parse collateral id from tokenId\\n     * @dev more efficient than parsing tokenId and than parse productId\\n     * @param tokenId token id\\n     * @return collateralId\\n     */\\n    function parseCollateralId(uint256 tokenId) internal pure returns (uint8 collateralId) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // collateralId is the last bits of productId\\n            collateralId := shr(192, tokenId)\\n        }\\n    }\\n\\n    /**\\n     * @notice parse engine id from tokenId\\n     * @dev more efficient than parsing tokenId and than parse productId\\n     * @param tokenId token id\\n     * @return engineId\\n     */\\n    function parseEngineId(uint256 tokenId) internal pure returns (uint8 engineId) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // collateralId is the last bits of productId\\n            engineId := shr(216, tokenId) // 192 to get product id, another 24 to get engineId\\n        }\\n    }\\n\\n    /**\\n     * @notice derive option type from ERC1155 token id\\n     * @param tokenId token id\\n     * @return tokenType TokenType enum\\n     */\\n    function parseTokenType(uint256 tokenId) internal pure returns (TokenType tokenType) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            tokenType := shr(232, tokenId)\\n        }\\n    }\\n\\n    /**\\n     * @notice derive if option is expired from ERC1155 token id\\n     * @param tokenId token id\\n     * @return expired bool\\n     */\\n    function isExpired(uint256 tokenId) internal view returns (bool expired) {\\n        uint64 expiry;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            expiry := shr(128, tokenId)\\n        }\\n\\n        expired = block.timestamp >= expiry;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/core/vaults/mixins/options/PhysicalOptionsVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {CashOptionsVault} from \\\"./CashOptionsVault.sol\\\";\\n\\n// interfaces\\nimport {IMarginEngine} from \\\"../../../../interfaces/IMarginEngine.sol\\\";\\nimport {IPhysicalReturnProcessor} from \\\"../../../../interfaces/IPhysicalReturnProcessor.sol\\\";\\n\\n// libraries\\nimport {StructureLib} from \\\"../../../../libraries/StructureLib.sol\\\";\\n\\nimport \\\"../../../../config/constants.sol\\\";\\nimport \\\"../../../../config/errors.sol\\\";\\nimport \\\"../../../../config/types.sol\\\";\\n\\nabstract contract PhysicalOptionsVault is CashOptionsVault {\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////*/\\n    event ExerciseWindowSet(uint256 exerciseWindow, uint256 newExerciseWindow);\\n\\n    event Exercised(address[] accounts, uint256[] shares);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Storage V1\\n    //////////////////////////////////////////////////////////////*/\\n    /// @notice Window to exercise long options\\n    uint256 public exerciseWindow;\\n\\n    /// @notice **Deprecated**\\n    address public _returnProcessor;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[23] private __gap;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Constructor and initialization\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _registrar is the address of the registrar contract\\n     * @param _share is the erc1155 contract that issues shares\\n     * @param _marginEngine is the margin engine used for physical options\\n     */\\n    constructor(address _registrar, address _share, address _marginEngine) CashOptionsVault(_registrar, _share, _marginEngine) {}\\n\\n    function __PhysicalOptionsVault_init(\\n        InitParams calldata _initParams,\\n        address _auction,\\n        uint256 _exerciseWindow,\\n        Collateral calldata _premium\\n    ) internal onlyInitializing {\\n        __OptionsVault_init(_initParams, _auction, _premium);\\n\\n        if (_exerciseWindow == 0) revert POV_BadExerciseWindow();\\n\\n        exerciseWindow = _exerciseWindow;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            External Functions\\n    //////////////////////////////////////////////////////////////*/\\n    function setExerciseWindow(uint256 _exerciseWindow) external {\\n        _setExerciseWindow(_exerciseWindow);\\n    }\\n\\n    function requestWithdrawFor(address _subAccount, uint256 _numShares) external virtual override nonReentrant {\\n        _onlyRegistrar();\\n\\n        if (expiry[vaultState.round] + exerciseWindow > block.timestamp) revert POV_OptionNotExpired();\\n\\n        (Position[] memory shorts,,) = marginEngine.marginAccounts(address(this));\\n\\n        if (_isExercised(shorts)) revert POV_CannotRequestWithdraw();\\n\\n        _requestWithdraw(_subAccount, _numShares);\\n    }\\n\\n    /**\\n     * @notice transfers asset from the margin account to depositors based on their shares and burns the shares\\n     * @dev called when vault gets put into the money\\n     *      only supports single asset structures\\n     *      assumes all depositors passed in have ownership in vault\\n     * @param _processor contract to perform airdrop\\n     * @param _accounts array of accounts to receive the exercised asset\\n     */\\n    function returnOnExercise(address _processor, address[] calldata _accounts, uint256[] calldata _shares) external virtual {\\n        // _onlyManager();\\n\\n        // marginEngine.setAccountAccess(_processor, type(uint256).max);\\n\\n        // IPhysicalReturnProcessor(_processor).returnOnExercise(_accounts, _shares);\\n\\n        // marginEngine.setAccountAccess(_processor, 0);\\n\\n        // emit Exercised(_accounts, _shares);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Internal function overrides\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Settles the existing option(s)\\n     */\\n    function _beforeCloseRound() internal virtual override {\\n        VaultState memory vState = vaultState;\\n\\n        if (vState.round == 1) return;\\n\\n        uint256 currentExpiry = expiry[vState.round];\\n\\n        if (currentExpiry > block.timestamp) {\\n            if (vState.totalPending == 0) revert OV_NoCollateralPending();\\n        } else {\\n            (Position[] memory shorts,, Balance[] memory collats) = marginEngine.marginAccounts(address(this));\\n\\n            if (collats.length == 0) revert OV_NoCollateral();\\n\\n            if (shorts.length > 0) {\\n                if (_isExercised(shorts)) revert POV_VaultExercised();\\n                else StructureLib.settleOptions(marginEngine, false);\\n            }\\n        }\\n    }\\n\\n    function _isExercised(Position[] memory _shorts) internal view returns (bool) {\\n        uint256 shortsLen = _shorts.length;\\n\\n        for (uint256 i; i < shortsLen;) {\\n            (,, uint80 totalPaid) = marginEngine.tokenTracker(_shorts[i].tokenId);\\n\\n            if (totalPaid > 0) return true;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function _setExerciseWindow(uint256 _exerciseWindow) internal virtual {\\n        _onlyOwner();\\n\\n        if (_exerciseWindow == 0 || _exerciseWindow > type(uint64).max) revert POV_BadExerciseWindow();\\n\\n        if (expiry[vaultState.round] + exerciseWindow > block.timestamp) revert POV_OptionNotExpired();\\n\\n        emit ExerciseWindowSet(exerciseWindow, _exerciseWindow);\\n\\n        exerciseWindow = _exerciseWindow;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/core/vaults/single-option-physical/SingleOptionPhysicalVaultStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nabstract contract SingleOptionPhysicalVaultStorageV1 {\\n    // Token details the vault is able to mint options against\\n    // Only uses TokenType and productId\\n    uint256 public goldenToken;\\n}\\n\\n// We are following Compound's method of upgrading new contract implementations\\n// When we need to add new storage variables, we create a new version of VaultStorage\\n// e.g. VaultStorage<versionNumber>, so finally it would look like\\n// contract VaultStorage is VaultStorageV1, VaultStorageV2\\nabstract contract SingleOptionPhysicalVaultStorage is SingleOptionPhysicalVaultStorageV1 {}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-physical/src/config/types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./enums.sol\\\";\\n\\n/**\\n * @dev struct representing the current balance for a given collateral\\n * @param collateralId pomace asset id\\n * @param amount amount the asset\\n */\\nstruct Balance {\\n    uint8 collateralId;\\n    uint80 amount;\\n}\\n\\n/**\\n * @dev struct containing assets detail for an product\\n * @param underlying    underlying address\\n * @param strike        strike address\\n * @param collateral    collateral address\\n * @param collateralDecimals collateral asset decimals\\n */\\nstruct ProductDetails {\\n    address engine;\\n    uint8 engineId;\\n    address underlying;\\n    uint8 underlyingId;\\n    uint8 underlyingDecimals;\\n    address strike;\\n    uint8 strikeId;\\n    uint8 strikeDecimals;\\n    address collateral;\\n    uint8 collateralId;\\n    uint8 collateralDecimals;\\n}\\n\\n// todo: update doc\\nstruct ActionArgs {\\n    ActionType action;\\n    bytes data;\\n}\\n\\nstruct BatchExecute {\\n    address subAccount;\\n    ActionArgs[] actions;\\n}\\n\\n/**\\n * @dev asset detail stored per asset id\\n * @param addr address of the asset\\n * @param decimals token decimals\\n */\\nstruct AssetDetail {\\n    address addr;\\n    uint8 decimals;\\n}\\n\"\r\n    },\r\n    \"src/core/vaults/single-option-physical/errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../config/errors.sol\\\";\\n\\n// Vault\\nerror SOPV_BadExpiry();\\nerror SOPV_ExpiryMismatch();\\nerror SOPV_ExerciseWindowMismatch();\\nerror SOPV_ProductIdMismatch();\\nerror SOPV_TokenTypeMismatch();\\nerror SOPV_MarginEngineMismatch();\\nerror SOPV_BadProductId();\\n\"\r\n    },\r\n    \"src/config/types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Initialization parameters for the vault.\\n * @param _owner is the owner of the vault with critical permissions\\n * @param _manager is the address that is responsible for advancing the vault\\n * @param _feeRecipient is the address to receive vault performance and management fees\\n * @param _oracle is used to calculate NAV\\n * @param _whitelist is used to check address access permissions\\n * @param _managementFee is the management fee pct.\\n * @param _performanceFee is the performance fee pct.\\n * @param _pauser is where withdrawn collateral exists waiting for client to withdraw\\n * @param _collateralRatios is the array of round starting balances to set the initial collateral ratios\\n * @param _collaterals is the assets used in the vault\\n * @param _roundConfig sets the duration and expiration of options\\n * @param _vaultParams set vaultParam struct\\n */\\nstruct InitParams {\\n    address _owner;\\n    address _manager;\\n    address _feeRecipient;\\n    address _oracle;\\n    address _whitelist;\\n    uint256 _managementFee;\\n    uint256 _performanceFee;\\n    address _pauser;\\n    uint256[] _collateralRatios;\\n    Collateral[] _collaterals;\\n    RoundConfig _roundConfig;\\n}\\n\\nstruct Collateral {\\n    // Grappa asset Id\\n    uint8 id;\\n    // ERC20 token address for the required collateral\\n    address addr;\\n    // the amount of decimals or token\\n    uint8 decimals;\\n}\\n\\nstruct VaultState {\\n    // 32 byte slot 1\\n    // Round represents the number of periods elapsed. There's a hard limit of 4,294,967,295 rounds\\n    uint32 round;\\n    // Amount that is currently locked for selling options\\n    uint96 lockedAmount;\\n    // Amount that was locked for selling options in the previous round\\n    // used for calculating performance fee deduction\\n    uint96 lastLockedAmount;\\n    // 32 byte slot 2\\n    // Stores the total tally of how much of `asset` there is\\n    // to be used to mint vault tokens\\n    uint96 totalPending;\\n    // store the number of shares queued for withdraw this round\\n    // zero'ed out at the start of each round, pauser withdraws all queued shares.\\n    uint128 queuedWithdrawShares;\\n}\\n\\nstruct DepositReceipt {\\n    // Round represents the number of periods elapsed. There's a hard limit of 4,294,967,295 rounds\\n    uint32 round;\\n    // Deposit amount, max 79,228,162,514 or 79 Billion ETH deposit\\n    uint96 amount;\\n    // Unredeemed shares balance\\n    uint128 unredeemedShares;\\n}\\n\\nstruct RoundConfig {\\n    // the duration of the option\\n    uint32 duration;\\n    // day of the week the option should expire. 0-8, 0 is sunday, 7 is sunday, 8 is wild\\n    uint8 dayOfWeek;\\n    // hour of the day the option should expire. 0 is midnight\\n    uint8 hourOfDay;\\n}\\n\\n// Used for fee calculations at the end of a round\\nstruct VaultDetails {\\n    // Collaterals of the vault\\n    Collateral[] collaterals;\\n    // Collateral balances at the start of the round\\n    uint256[] startingBalances;\\n    // current balances\\n    uint256[] currentBalances;\\n    // Total pending primary asset\\n    uint256 totalPending;\\n}\\n\\n// Used when rolling funds into a new round\\nstruct NAVDetails {\\n    // Collaterals of the vault\\n    Collateral[] collaterals;\\n    // Collateral balances at the start of the round\\n    uint256[] startingBalances;\\n    // Current collateral balances\\n    uint256[] currentBalances;\\n    // Used to calculate NAV\\n    address oracleAddr;\\n    // Expiry of the round\\n    uint256 expiry;\\n    // Pending deposits\\n    uint256 totalPending;\\n}\\n\\n/**\\n * @dev Position struct\\n * @param tokenId option token id\\n * @param amount number option tokens\\n */\\nstruct Position {\\n    uint256 tokenId;\\n    uint64 amount;\\n}\\n\\n/**\\n * @dev struct representing the current balance for a given collateral\\n * @param collateralId asset id\\n * @param amount amount the asset\\n */\\nstruct Balance {\\n    uint8 collateralId;\\n    uint80 amount;\\n}\\n\\n/**\\n * @dev ActionArgs and BatchExecute are a local definition of the structs defined in:\\n *       - https://github.com/grappafinance/core-cash/blob/master/src/config/types.sol\\n *       - https://github.com/grappafinance/core-physical/blob/master/src/config/types.sol\\n *     they are provided to avoid the need of having separate logic for interacting with the cash settled an\\n *     physically settled margin engines and consolidate them in a single interface\\n */\\n\\n/**\\n * @notice The action type for the execute function\\n * @dev    unitary representation of the ActionArgs struct from the core physical and cash engines\\n */\\nstruct ActionArgs {\\n    // action type represented as uint8 (see enum ActionType)\\n    uint8 action;\\n    // data payload for the action\\n    bytes data;\\n}\\n\\n/**\\n * @notice The batch action type for the execute function\\n * @dev    unitary representation of the BatchExecute struct from the core physical and cash engines\\n */\\nstruct BatchExecute {\\n    // address of the account to execute the batch\\n    address subAccount;\\n    // array of actions to execute\\n    ActionArgs[] actions;\\n}\\n\"\r\n    },\r\n    \"src/config/constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n///@dev unit scaled used to convert amounts.\\nuint256 constant UNIT = 10 ** 6;\\n\\n// Placeholder uint value to prevent cold writes\\nuint256 constant PLACEHOLDER_UINT = 1;\\n\\n// Fees are 18-decimal places. For example: 20 * 10**18 = 20%\\nuint256 constant PERCENT_MULTIPLIER = 10 ** 18;\\n\\nuint32 constant SECONDS_PER_DAY = 86400;\\nuint32 constant DAYS_PER_YEAR = 365;\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-physical/src/config/enums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum TokenType {\\n    PUT,\\n    CALL\\n}\\n\\n/**\\n * @dev common action types on margin engines\\n */\\nenum ActionType {\\n    AddCollateral,\\n    RemoveCollateral,\\n    MintShort,\\n    BurnShort,\\n    AddLong,\\n    RemoveLong,\\n    ExerciseToken,\\n    SettleAccount,\\n    // actions that influence more than one subAccounts:\\n    // These actions are defined in \\\"OptionTransferable\\\"\\n    MintShortIntoAccount, // increase short (debt) position in one subAccount, increase long token directly to another subAccount\\n    TransferCollateral, // transfer collateral directly to another subAccount\\n    TransferLong, // transfer long directly to another subAccount\\n    TransferShort // transfer short directly to another subAccount\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-physical/src/config/errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/* ------------------------ *\\n *      Shared Errors       *\\n * -----------------------  */\\n\\nerror NoAccess();\\n\\n/* ------------------------ *\\n *      Pomace Errors       *\\n * -----------------------  */\\n\\n/// @dev asset already registered\\nerror PM_AssetAlreadyRegistered();\\n\\n/// @dev margin engine already registered\\nerror PM_EngineAlreadyRegistered();\\n\\n/// @dev amounts length specified to batch settle doesn't match with tokenIds\\nerror PM_WrongArgumentLength();\\n\\n/// @dev cannot settle an unexpired option\\nerror PM_NotExpired();\\n\\n/// @dev settlement price is not finalized yet\\nerror PM_PriceNotFinalized();\\n\\n/// @dev cannot mint token after expiry\\nerror PM_InvalidExpiry();\\n\\n/// @dev cannot mint token with zero settlement window\\nerror PM_InvalidExerciseWindow();\\n\\n/// @dev cannot mint token with zero settlement window\\nerror PM_InvalidCollateral();\\n\\n/// @dev burn or mint can only be called by corresponding engine.\\nerror PM_Not_Authorized_Engine();\\n\\n/* ---------------------------- *\\n *   Common BaseEngine Errors   *\\n * ---------------------------  */\\n\\n/// @dev account is not healthy / account is underwater\\nerror BM_AccountUnderwater();\\n\\n/// @dev msg.sender is not authorized to ask margin account to pull token from {from} address\\nerror BM_InvalidFromAddress();\\n\"\r\n    },\r\n    \"src/core/vaults/mixins/options/CashOptionsVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {BaseVault} from \\\"../../BaseVault.sol\\\";\\n\\n// interfaces\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport {IOracle} from \\\"grappa/interfaces/IOracle.sol\\\";\\nimport {IAuctionVault} from \\\"../../../../interfaces/IAuctionVault.sol\\\";\\nimport {IPositionPauser} from \\\"../../../../interfaces/IPositionPauser.sol\\\";\\nimport {IMarginEngine} from \\\"../../../../interfaces/IMarginEngine.sol\\\";\\n\\n// libraries\\nimport {FeeLib} from \\\"../../../../libraries/FeeLib.sol\\\";\\nimport {StructureLib} from \\\"../../../../libraries/StructureLib.sol\\\";\\nimport {VaultLib} from \\\"../../../../libraries/VaultLib.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../../../../config/errors.sol\\\";\\nimport \\\"../../../../config/constants.sol\\\";\\nimport \\\"../../../../config/types.sol\\\";\\n\\nenum AddressType {\\n    Manager,\\n    FeeRecipient,\\n    Pauser,\\n    Whitelist,\\n    Auction\\n}\\n\\nabstract contract CashOptionsVault is BaseVault, IAuctionVault {\\n    using SafeERC20 for IERC20;\\n    /*///////////////////////////////////////////////////////////////\\n                        Constants and Immutables\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice marginAccount is the options protocol collateral pool\\n    IMarginEngine public immutable marginEngine;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Storage V1\\n    //////////////////////////////////////////////////////////////*/\\n    /// @notice the address of the auction settlement contract\\n    address public auction;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Storage V2\\n    //////////////////////////////////////////////////////////////*/\\n    /// @notice the address of the auction settlement contract\\n    Collateral public premium;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[23] private __gap;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////*/\\n    event AuctionSet(address auction, address newAuction);\\n\\n    event PremiumSet(uint8 id, address addr, uint8 decimals, uint8 newId, address newAddr, uint8 newDecimals);\\n\\n    event MarginAccountAccessSet(address auction, uint256 allowedExecutions);\\n\\n    event StagedAuction(uint256 indexed expiry, uint32 round);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Constructor and initialization\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _registrar is the address of the registrar contract\\n     * @param _share is the erc1155 contract that issues shares\\n     * @param _marginEngine is the margin engine used for cash options\\n     */\\n    constructor(address _registrar, address _share, address _marginEngine) BaseVault(_registrar, _share) {\\n        if (_marginEngine == address(0)) revert BadAddress();\\n\\n        marginEngine = IMarginEngine(_marginEngine);\\n    }\\n\\n    function __OptionsVault_init(InitParams calldata _initParams, address _auction, Collateral calldata _premium)\\n        internal\\n        onlyInitializing\\n    {\\n        __BaseVault_init(_initParams);\\n\\n        // verifies that initial collaterals are present\\n        StructureLib.verifyInitialCollaterals(_initParams._collaterals);\\n\\n        if (_auction == address(0)) revert BadAddress();\\n\\n        auction = _auction;\\n        premium = _premium;\\n\\n        marginEngine.setAccountAccess(_auction, type(uint256).max);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Setters\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Sets the auction allowable executions on the margin account\\n     * @param _allowedExecutions how many times the account is authorized to update vault account.\\n     *        set to max(uint256) to allow unlimited access\\n     */\\n    function setAuctionMarginAccountAccess(uint256 _allowedExecutions) external {\\n        // _onlyManager();\\n\\n        // emit MarginAccountAccessSet(auction, _allowedExecutions);\\n\\n        // marginEngine.setAccountAccess(auction, _allowedExecutions);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Vault Operations\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Sets the amount of collateral to use in the next auction\\n     * @dev performing asset requirements off-chain to save gas fees\\n     */\\n    function stageAuction() external {\\n        // _onlyManager();\\n\\n        // _setRoundExpiry();\\n    }\\n\\n    function setPremium(uint8 _id, address _addr, uint8 _decimals) external {\\n        // _onlyOwner();\\n\\n        // if (_id != 0 || _addr != address(0)) {\\n        //     if (_id == 0) revert OV_BadPremium();\\n        //     if (_addr == address(0)) revert OV_BadPremium();\\n        // }\\n\\n        // emit PremiumSet(premium.id, premium.addr, premium.decimals, _id, _addr, _decimals);\\n\\n        // premium = Collateral(_id, _addr, _decimals);\\n    }\\n\\n    function recoverToken(uint8 _collateralId, uint256 _amount, address _recipient) external {\\n        _onlyManager();\\n\\n        // if (_collateralId == collaterals[0].id) revert OV_BadCollateral();\\n\\n        Collateral[] memory collat = new Collateral[](1);\\n        collat[0] = Collateral(_collateralId, address(0), 0);\\n\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = _amount;\\n\\n        StructureLib.withdrawCollaterals(marginEngine, collat, amounts, _recipient);\\n\\n        uint256 balance = IERC20(collaterals[0].addr).balanceOf(address(this));\\n        IERC20(collaterals[0].addr).safeTransfer(_recipient, balance);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Internal Functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Sets addresses for different settings\\n     * @dev Address Types:\\n     *      0 - Manager\\n     *      1 - FeeRecipient\\n     *      2 - Pauser\\n     *      3 - Whitelist\\n     *      4 - Auction\\n     * @param _type of address\\n     * @param _address is the new address\\n     */\\n    // function _setAddress(uint256 _type, address _address) internal override {\\n    //     if (_type < 4) {\\n    //         super._setAddress(_type, _address);\\n    //     } else {\\n    //         AddressType addressType = AddressType(_type);\\n\\n    //         if (AddressType.Auction == addressType) {\\n    //             emit AddressSet(_type, auction, _address);\\n    //             auction = _address;\\n\\n    //             marginEngine.setAccountAccess(_address, type(uint256).max);\\n    //         } else {\\n    //             revert BadAddress();\\n    //         }\\n    //     }\\n    // }\\n\\n    /**\\n     * @notice Settles the existing option(s)\\n     */\\n    function _beforeCloseRound() internal virtual override {\\n        VaultState memory vState = vaultState;\\n\\n        if (vState.round == 1) return;\\n\\n        uint256 currentExpiry = expiry[vState.round];\\n\\n        if (currentExpiry > block.timestamp) {\\n            if (vState.totalPending == 0) revert OV_NoCollateralPending();\\n        } else {\\n            (Position[] memory shorts, Position[] memory longs, Balance[] memory collats) =\\n                marginEngine.marginAccounts(address(this));\\n\\n            if (collats.length == 0) revert OV_NoCollateral();\\n\\n            if (shorts.length == 0 && longs.length == 0) revert OV_RoundClosed();\\n\\n            StructureLib.settleOptions(marginEngine, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets next expiry\\n     */\\n    function _afterCloseRound() internal virtual override {\\n        _setRoundExpiry();\\n    }\\n\\n    /**\\n     * @notice Sets the next options expiry\\n     */\\n    function _setRoundExpiry() internal virtual {\\n        uint256 currentRound = vaultState.round;\\n\\n        if (currentRound == 1) revert OV_BadRound();\\n\\n        uint256 currentExpiry = expiry[currentRound];\\n        uint256 newExpiry = VaultLib.getNextExpiry(roundConfig);\\n\\n        if (PLACEHOLDER_UINT < currentExpiry && currentExpiry < newExpiry) {\\n            (Position[] memory shorts, Position[] memory longs,) = marginEngine.marginAccounts(address(this));\\n\\n            if (shorts.length > 0 || longs.length > 0) revert OV_ActiveRound();\\n        }\\n\\n        expiry[currentRound] = newExpiry;\\n\\n        emit StagedAuction(newExpiry, vaultState.round);\\n    }\\n\\n    function _processFees(uint256[] memory _balances, uint256 _currentRound)\\n        internal\\n        virtual\\n        override\\n        returns (uint256[] memory balances)\\n    {\\n        uint256[] memory totalFees;\\n\\n        VaultDetails memory vaultDetails =\\n            VaultDetails(collaterals, startingBalances[_currentRound], _balances, vaultState.totalPending);\\n\\n        (totalFees, balances) = FeeLib.processFees(vaultDetails, managementFee, performanceFee);\\n\\n        StructureLib.withdrawCollaterals(marginEngine, collaterals, totalFees, feeRecipient);\\n\\n        emit CollectedFees(totalFees, _currentRound, feeRecipient);\\n    }\\n\\n    function _rollInFunds(uint256[] memory _balances, uint256 _currentRound, uint256 _expiry) internal virtual override {\\n        super._rollInFunds(_balances, _currentRound, _expiry);\\n\\n        StructureLib.depositCollateral(marginEngine, collaterals);\\n    }\\n\\n    /**\\n     * @notice Gets net asset values\\n     * @dev Includes premium balance if premium is set\\n     * @param _balances current balances\\n     * @param _currentRound current round\\n     * @param _expiry round expiry\\n     */\\n    function _getNAVs(uint256[] memory _balances, uint256 _currentRound, uint256 _expiry)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (uint256 totalNAV, uint256 pendingNAV, uint256[] memory prices)\\n    {\\n        (totalNAV, pendingNAV, prices) = super._getNAVs(_balances, _currentRound, _expiry);\\n\\n        // premium not set, returning early\\n        if (premium.id == 0) return (totalNAV, pendingNAV, prices);\\n\\n        uint256 premiumBalance = IERC20(premium.addr).balanceOf(address(this));\\n\\n        (,, Balance[] memory marginCollaterals) = marginEngine.marginAccounts(address(this));\\n\\n        for (uint256 i; i < marginCollaterals.length;) {\\n            if (marginCollaterals[i].collateralId == premium.id) {\\n                premiumBalance += marginCollaterals[i].amount;\\n                break;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (premiumBalance == 0) return (totalNAV, pendingNAV, prices);\\n\\n        IOracle oracle_ = IOracle(oracle);\\n\\n        uint256 price;\\n        if (_expiry <= PLACEHOLDER_UINT) price = oracle_.getSpotPrice(premium.addr, collaterals[0].addr);\\n        else (price,) = oracle_.getPriceAtExpiry(premium.addr, collaterals[0].addr, _expiry);\\n\\n        totalNAV += premiumBalance * price / (10 ** premium.decimals);\\n    }\\n\\n    /**\\n     * @notice Completes withdraws from a past round\\n     * @dev transfers assets to pauser to exclude from vault balances\\n     */\\n    function _completeWithdraw() internal virtual override returns (uint256) {\\n        uint256 withdrawShares = uint256(vaultState.queuedWithdrawShares);\\n\\n        uint256[] memory withdrawAmounts = new uint256[](1);\\n\\n        if (withdrawShares > 0) {\\n            vaultState.queuedWithdrawShares = 0;\\n\\n            withdrawAmounts =\\n                StructureLib.withdrawWithShares(marginEngine, share.totalSupply(address(this)), withdrawShares, pauser);\\n\\n            // recording deposits with pauser for past round\\n            IPositionPauser(pauser).processVaultWithdraw(withdrawAmounts);\\n\\n            // burns shares that were transferred to vault during requestWithdraw\\n            share.burn(address(this), withdrawShares);\\n\\n            emit Withdrew(msg.sender, withdrawAmounts, withdrawShares);\\n        }\\n\\n        return withdrawAmounts[0];\\n    }\\n\\n    /**\\n     * @notice Queries total balance(s) of collateral\\n     * @dev used in _processFees, _rollInFunds and lockedAmount (in a rolling close)\\n     */\\n    function _getCurrentBalances() internal view virtual override returns (uint256[] memory balances) {\\n        (,, Balance[] memory marginCollaterals) = marginEngine.marginAccounts(address(this));\\n\\n        Collateral[] memory collats = collaterals;\\n\\n        balances = new uint256[](collats.length);\\n        uint256 i;\\n\\n        for (i; i < collats.length;) {\\n            balances[i] = IERC20(collats[i].addr).balanceOf(address(this));\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // ensuring that the balances are updated for the marginCollaterals in the correct position\\n        for (i = 0; i < marginCollaterals.length;) {\\n            (bool found, uint256 index) = VaultLib.indexOfId(collats, marginCollaterals[i].collateralId);\\n\\n            if (found) balances[index] += marginCollaterals[i].amount;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMarginEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {IGrappa} from \\\"grappa/interfaces/IGrappa.sol\\\";\\nimport {IPomace} from \\\"pomace/interfaces/IPomace.sol\\\";\\n\\nimport {BatchExecute, ActionArgs} from \\\"../config/types.sol\\\";\\n\\nimport \\\"../config/types.sol\\\";\\n\\n/**\\n * @notice Interface for the base margin engine contract\\n */\\ninterface IMarginEngine {\\n    function optionToken() external view returns (address);\\n\\n    function marginAccounts(address)\\n        external\\n        view\\n        returns (Position[] memory shorts, Position[] memory longs, Balance[] memory collaterals);\\n\\n    function previewMinCollateral(Position[] memory shorts, Position[] memory longs) external view returns (Balance[] memory);\\n\\n    function allowedExecutionLeft(uint160 mask, address account) external view returns (uint256);\\n\\n    function batchExecute(BatchExecute[] calldata batchActions) external;\\n\\n    function execute(address account, ActionArgs[] calldata actions) external;\\n\\n    function revokeSelfAccess(address granter) external;\\n\\n    function setAccountAccess(address account, uint256 allowedExecutions) external;\\n\\n    function grappa() external view returns (IGrappa grappa);\\n\\n    function pomace() external view returns (IPomace pomace);\\n\\n    function tokenTracker(uint256 tokenId) external view returns (uint64 issued, uint80 totalDebt, uint80 totalPaid);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IPhysicalReturnProcessor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/// @title Describes Option NFT\\ninterface IPhysicalReturnProcessor {\\n    function returnOnExercise(address[] calldata _depositors, uint256[] calldata _shares) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/StructureLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// external libraries\\nimport {ActionUtil} from \\\"../libraries/ActionUtil.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// interfaces\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport {IHashnoteVault} from \\\"../interfaces/IHashnoteVault.sol\\\";\\nimport {IMarginEngine} from \\\"../interfaces/IMarginEngine.sol\\\";\\n\\nimport \\\"../config/constants.sol\\\";\\nimport \\\"../config/errors.sol\\\";\\nimport \\\"../config/types.sol\\\";\\n\\nlibrary StructureLib {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev common action types on margin engines defined locally, original enums locations:\\n     *       - https://github.com/grappafinance/core-cash/blob/master/src/config/enums.sol\\n     *       - https://github.com/grappafinance/core-physical/blob/master/src/config/enums.sol\\n     *\\n     *      These constants are defined to add compatibility between ActionTypes of physical and cash settled margin engines\\n     *      uint8 values correspond to the order (and value) of the enum entries\\n     */\\n\\n    uint8 constant ACTION_COLLATERAL_ADD = 0;\\n    uint8 constant ACTION_COLLATERAL_REMOVE = 1;\\n    uint8 constant ACTION_SETTLE_PHYSICAL = 7;\\n    uint8 constant ACTION_SETTLE_CASH = 8;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////*/\\n    event WithdrewCollateral(uint256[] amounts, address indexed manager);\\n\\n    /**\\n     * @notice verifies that initial collaterals are present (non-zero)\\n     * @param collaterals is the array of collaterals passed from initParams in initializer\\n     */\\n    function verifyInitialCollaterals(Collateral[] calldata collaterals) external pure {\\n        unchecked {\\n            for (uint256 i; i < collaterals.length; ++i) {\\n                if (collaterals[i].id == 0) revert OV_BadCollateral();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Settles the vaults position(s) in margin account.\\n     * @param marginEngine is the address of the margin engine contract\\n     * @param isCashSettled is the flag that should be true if the options are cash settled\\n     */\\n    function settleOptions(IMarginEngine marginEngine, bool isCashSettled) external {\\n        ActionArgs[] memory actions = new ActionArgs[](1);\\n\\n        actions[0] = ActionArgs({action: isCashSettled ? ACTION_SETTLE_CASH : ACTION_SETTLE_PHYSICAL, data: \\\"\\\"});\\n\\n        marginEngine.execute(address(this), actions);\\n    }\\n\\n    /**\\n     * @notice Deposits collateral into the margin account.\\n     * @param marginEngine is the address of the margin engine contract\\n     */\\n    function depositCollateral(IMarginEngine marginEngine, Collateral[] calldata collaterals) external {\\n        ActionArgs[] memory actions;\\n\\n        // iterates over collateral balances and creates a withdraw action for each\\n        for (uint256 i; i < collaterals.length;) {\\n            IERC20 collateral = IERC20(collaterals[i].addr);\\n\\n            uint256 balance = collateral.balanceOf(address(this));\\n\\n            if (balance > 0) {\\n                collateral.safeApprove(address(marginEngine), balance);\\n\\n                actions = ActionUtil.append(\\n                    actions,\\n                    ActionArgs({\\n                        action: ACTION_COLLATERAL_ADD,\\n                        data: abi.encode(address(this), uint80(balance), collaterals[i].id)\\n                    })\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (actions.length > 0) marginEngine.execute(address(this), actions);\\n    }\\n\\n    /**\\n     * @notice Withdraws all vault collateral(s) from the margin account.\\n     * @param marginEngine is the interface to the the engine contract\\n     */\\n    function withdrawAllCollateral(IMarginEngine marginEngine) external {\\n        // gets the accounts collateral balances\\n        (,, Balance[] memory collaterals) = marginEngine.marginAccounts(address(this));\\n\\n        ActionArgs[] memory actions = new ActionArgs[](collaterals.length);\\n        uint256[] memory withdrawAmounts = new uint256[](collaterals.length);\\n\\n        // iterates over collateral balances and creates a withdraw action for each\\n        for (uint256 i; i < collaterals.length;) {\\n            actions[i] = ActionArgs({\\n                action: ACTION_COLLATERAL_REMOVE,\\n                data: abi.encode(uint80(collaterals[i].amount), address(this), collaterals[i].collateralId)\\n            });\\n\\n            withdrawAmounts[i] = collaterals[i].amount;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        marginEngine.execute(address(this), actions);\\n\\n        emit WithdrewCollateral(withdrawAmounts, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraws some of vault collateral(s) from margin account.\\n     * @param marginEngine is the interface to the margin engine contract\\n     */\\n    function withdrawCollaterals(\\n        IMarginEngine marginEngine,\\n        Collateral[] calldata collaterals,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external {\\n        ActionArgs[] memory actions;\\n\\n        // iterates over collateral balances and creates a withdraw action for each\\n        for (uint256 i; i < amounts.length;) {\\n            if (amounts[i] > 0) {\\n                actions = ActionUtil.append(\\n                    actions,\\n                    ActionArgs({\\n                        action: ACTION_COLLATERAL_REMOVE,\\n                        data: abi.encode(uint80(amounts[i]), recipient, collaterals[i].id)\\n                    })\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (actions.length > 0) marginEngine.execute(address(this), actions);\\n    }\\n\\n    /**\\n     * @notice Withdraws assets based on shares from margin account.\\n     * @dev used to send assets from the margin account to recipient at the end of each round\\n     * @param marginEngine is the interface to the margin engine contract\\n     * @param totalSupply is the total amount of outstanding shares\\n     * @param withdrawShares the number of shares being withdrawn\\n     * @param recipient is the destination address for the assets\\n     */\\n    function withdrawWithShares(IMarginEngine marginEngine, uint256 totalSupply, uint256 withdrawShares, address recipient)\\n        external\\n        returns (uint256[] memory amounts)\\n    {\\n        (,, Balance[] memory collaterals) = marginEngine.marginAccounts(address(this));\\n\\n        uint256 collateralLength = collaterals.length;\\n\\n        amounts = new uint256[](collateralLength);\\n        ActionArgs[] memory actions = new ActionArgs[](collateralLength);\\n\\n        for (uint256 i; i < collateralLength;) {\\n            amounts[i] = FixedPointMathLib.mulDivDown(collaterals[i].amount, withdrawShares, totalSupply);\\n\\n            unchecked {\\n                actions[i] = ActionArgs({\\n                    action: ACTION_COLLATERAL_REMOVE,\\n                    data: abi.encode(uint80(amounts[i]), recipient, collaterals[i].collateralId)\\n                });\\n                ++i;\\n            }\\n        }\\n\\n        marginEngine.execute(address(this), actions);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/config/errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// common\\nerror Unauthorized();\\nerror Overflow();\\nerror BadAddress();\\nerror NotImplemented();\\n\\n// BaseVault\\nerror BV_ActiveRound();\\nerror BV_BadCollateral();\\nerror BV_BadExpiry();\\nerror BV_BadLevRatio();\\nerror BV_ExpiryMismatch();\\nerror BV_MarginEngineMismatch();\\nerror BV_RoundClosed();\\nerror BV_BadFee();\\nerror BV_BadRoundConfig();\\nerror BV_BadPPS();\\nerror BV_BadSB();\\nerror BV_BadCP();\\nerror BV_BadRatios();\\n\\n// Registrar\\nerror REG_BadAmount();\\nerror REG_BadRound();\\nerror REG_BadNumShares();\\nerror REG_BadDepositAmount();\\nerror REG_ExceedsAvailable();\\n\\n// OptionsVault\\nerror OV_ActiveRound();\\nerror OV_BadRound();\\nerror OV_BadCollateral();\\nerror OV_BadPremium();\\nerror OV_RoundClosed();\\nerror OV_NoCollateral();\\nerror OV_OptionNotExpired();\\nerror OV_NoCollateralPending();\\n\\n// PhysicalOptionVault\\nerror POV_CannotRequestWithdraw();\\nerror POV_NotExercised();\\nerror POV_OptionNotExpired();\\nerror POV_VaultExercised();\\nerror POV_BadExerciseWindow();\\n\\n// Fee Utils\\nerror FL_NPSLow();\\n\\n// Vault Utils\\nerror VL_DifferentLengths();\\nerror VL_ExceedsSurplus();\\nerror VL_BadOwnerAddress();\\nerror VL_BadManagerAddress();\\nerror VL_BadFeeAddress();\\nerror VL_BadOracleAddress();\\nerror VL_BadPauserAddress();\\nerror VL_BadFee();\\nerror VL_BadCollateral();\\nerror VL_BadCollateralAddress();\\nerror VL_BadDuration();\\n\\n// StructureLib\\nerror SL_BadExpiryDate();\\n\\n// Vault Pauser\\nerror VP_VaultNotPermissioned();\\nerror VP_PositionPaused();\\nerror VP_Overflow();\\nerror VP_CustomerNotPermissioned();\\nerror VP_RoundOpen();\\n\\n// Vault Share\\nerror VS_SupplyExceeded();\\n\\n// Whitelist Manager\\nerror WL_BadRole();\\nerror WL_Paused();\\n\"\r\n    },\r\n    \"src/core/vaults/BaseVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {ERC1155TokenReceiver} from \\\"solmate/tokens/ERC1155.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\nimport {UUPSUpgradeable} from \\\"openzeppelin/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"openzeppelin-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"openzeppelin-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {VaultLib} from \\\"../../libraries/VaultLib.sol\\\";\\nimport {FeeLib} from \\\"../../libraries/FeeLib.sol\\\";\\n\\nimport {IHNT20} from \\\"../../interfaces/IHNT20.sol\\\";\\nimport {IPositionPauser} from \\\"../../interfaces/IPositionPauser.sol\\\";\\nimport {IVaultShare} from \\\"../../interfaces/IVaultShare.sol\\\";\\nimport {IWhitelistManager} from \\\"../../interfaces/IWhitelistManager.sol\\\";\\n\\nimport \\\"../../config/constants.sol\\\";\\nimport \\\"../../config/enums.sol\\\";\\nimport \\\"../../config/errors.sol\\\";\\nimport \\\"../../config/types.sol\\\";\\n\\ncontract BaseVault is ERC1155TokenReceiver, OwnableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {\\n    using SafeERC20 for IHNT20;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Non Upgradeable Storage\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev the contract responsible to client interactions\\n    address public immutable registrar;\\n\\n    // the erc1155 contract that issues vault shares\\n    IVaultShare public immutable share;\\n\\n    /// @notice **Deprecated**\\n    mapping(address => DepositReceipt) public _depositReceipts;\\n\\n    /// @notice On every round's close, the pricePerShare value of an hnVault token is stored\\n    /// This is used to determine the number of shares to be given to a user with\\n    /// their DepositReceipt.depositAmount\\n    mapping(uint256 => uint256) public pricePerShare;\\n\\n    /// @notice deposit asset amounts; round => collateralBalances[]\\n    /// @dev    used in determining deposit ratios and NAV calculations\\n    ///         should not be used as a reference to collateral used in the round\\n    ///         because it does not account for assets that were queued for withdrawal\\n    mapping(uint256 => uint256[]) public startingBalances;\\n\\n    /// @notice deposit asset prices; round => CollateralPrices[]\\n    mapping(uint256 => uint256[]) public collateralPrices;\\n\\n    /// @notice expiry of each round\\n    mapping(uint256 => uint256) public expiry;\\n\\n    /// @notice Assets deposited into vault\\n    //          collaterals[0] is the primary asset, other assets are relative to the primary\\n    Collateral[] public collaterals;\\n\\n    /// @notice Vault's round state\\n    VaultState public vaultState;\\n\\n    /// @notice Vault's round configuration\\n    RoundConfig public roundConfig;\\n\\n    // Oracle address to calculate Net Asset Value (for round share price)\\n    address public oracle;\\n\\n    /// @notice Vault Pauser Contract for the vault\\n    address public pauser;\\n\\n    /// @notice Whitelist contract, checks permissions and sanctions\\n    address public whitelist;\\n\\n    /// @notice Fee recipient for the management and performance fees\\n    address public feeRecipient;\\n\\n    /// @notice Role in charge of round operations\\n    address public manager;\\n\\n    /// @notice Management fee charged on entire AUM at closeRound.\\n    uint256 public managementFee;\\n\\n    /// @notice Performance fee charged on premiums earned in closeRound. Only charged when round takes a profit.\\n    uint256 public performanceFee;\\n\\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposited(address indexed account, uint256[] amounts, uint256 round);\\n\\n    event QuickWithdrew(address indexed account, uint256[] amounts, uint256 round);\\n\\n    event RequestedWithdraw(address indexed account, uint256 shares, uint256 round);\\n\\n    event Withdrew(address indexed account, uint256[] amounts, uint256 shares);\\n\\n    event Redeem(address indexed account, uint256 share, uint256 round);\\n\\n    event AddressSet(uint256 addressType, address origAddress, address newAddress);\\n\\n    event FeesSet(uint256 managementFee, uint256 newManagementFee, uint256 performanceFee, uint256 newPerformanceFee);\\n\\n    event RoundConfigSet(\\n        uint32 duration, uint8 dayOfWeek, uint8 hourOfDay, uint32 newDuration, uint8 newDayOfWeek, uint8 newHourOfDay\\n    );\\n\\n    event CollectedFees(uint256[] vaultFee, uint256 round, address indexed feeRecipient);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Constructor & Initializer\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     */\\n    constructor(address _registrar, address _share) {\\n        if (_registrar == address(0)) revert BadAddress();\\n        if (_share == address(0)) revert BadAddress();\\n\\n        registrar = _registrar;\\n        share = IVaultShare(_share);\\n    }\\n\\n    /**\\n     * @notice Initializes the Vault contract with storage variables.\\n     * @param _initParams is the struct with vault initialization parameters\\n     */\\n    function __BaseVault_init(InitParams calldata _initParams) internal onlyInitializing {\\n        if (_initParams._owner == address(0)) revert VL_BadOwnerAddress();\\n        if (_initParams._manager == address(0)) revert VL_BadManagerAddress();\\n        if (_initParams._feeRecipient == address(0)) revert VL_BadFeeAddress();\\n        if (_initParams._oracle == address(0)) revert VL_BadOracleAddress();\\n        if (_initParams._pauser == address(0)) revert VL_BadPauserAddress();\\n        if (_initParams._performanceFee > 100 * PERCENT_MULTIPLIER || _initParams._managementFee > 100 * PERCENT_MULTIPLIER) {\\n            revert VL_BadFee();\\n        }\\n        if (_initParams._collaterals.length == 0) revert VL_BadCollateral();\\n        if (\\n            _initParams._roundConfig.duration == 0 || _initParams._roundConfig.dayOfWeek > 8\\n                || _initParams._roundConfig.hourOfDay > 23\\n        ) revert VL_BadDuration();\\n\\n        _transferOwnership(_initParams._owner);\\n        __ReentrancyGuard_init_unchained();\\n\\n        manager = _initParams._manager;\\n        oracle = _initParams._oracle;\\n        whitelist = _initParams._whitelist;\\n        feeRecipient = _initParams._feeRecipient;\\n        performanceFee = _initParams._performanceFee;\\n        managementFee = _initParams._managementFee;\\n        pauser = _initParams._pauser;\\n        roundConfig = _initParams._roundConfig;\\n\\n        if (_initParams._collateralRatios.length > 0) {\\n            if (_initParams._collateralRatios.length != _initParams._collaterals.length) revert BV_BadRatios();\\n\\n            // set the initial ratios on the first round\\n            startingBalances[1] = _initParams._collateralRatios;\\n            // set init price per share and expiry to placeholder values (1)\\n            pricePerShare[1] = PLACEHOLDER_UINT;\\n            expiry[1] = PLACEHOLDER_UINT;\\n        }\\n\\n        for (uint256 i; i < _initParams._collaterals.length;) {\\n            if (_initParams._collaterals[i].addr == address(0)) revert VL_BadCollateralAddress();\\n\\n            collaterals.push(_initParams._collaterals[i]);\\n\\n            IHNT20(_initParams._collaterals[i].addr).approve(registrar, type(uint256).max);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        vaultState.round = 1;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Override Upgrade Permission\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Upgradable by the owner.\\n     *\\n     */\\n    function _authorizeUpgrade(address /*newImplementation*/ ) internal view override {\\n        _onlyOwner();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    State changing functions to override\\n    //////////////////////////////////////////////////////////////*/\\n    function _beforeCloseRound() internal virtual {}\\n    function _afterCloseRound() internal virtual {}\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Setters\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Sets addresses for different settings\\n     * @dev Address Types:\\n     *      0 - Manager\\n     *      1 - FeeRecipient\\n     *      2 - Pauser\\n     *      3 - Whitelist\\n     * @param _type of address\\n     * @param _address is the new address\\n     */\\n    function setAddresses(uint256 _type, address _address) external virtual {\\n        _onlyOwner();\\n\\n        if (_address == address(0)) revert BadAddress();\\n\\n        _setAddress(_type, _address);\\n    }\\n\\n    /**\\n     * @notice Sets fees for the vault\\n     * @param _managementFee is the management fee (18 decimals). ex: 2 * 10 ** 18 = 2%\\n     * @param _performanceFee is the performance fee (18 decimals). ex: 20 * 10 ** 18 = 20%\\n     */\\n    function setFees(uint256 _managementFee, uint256 _performanceFee) external {\\n        _onlyOwner();\\n\\n        if (_managementFee > 100 * PERCENT_MULTIPLIER) revert BV_BadFee();\\n        if (_performanceFee > 100 * PERCENT_MULTIPLIER) revert BV_BadFee();\\n\\n        emit FeesSet(managementFee, _managementFee, performanceFee, _performanceFee);\\n\\n        managementFee = _managementFee;\\n        performanceFee = _performanceFee;\\n    }\\n\\n    /**\\n     * @notice Sets new round Config\\n     * @dev this changes the expiry of options\\n     * @param _duration  the duration of the option\\n     * @param _dayOfWeek day of the week the option should expire. 0-8, 0 is sunday, 7 is sunday, 8 is wild\\n     * @param _hourOfDay hour of the day the option should expire. 0 is midnight\\n     */\\n    function setRoundConfig(uint32 _duration, uint8 _dayOfWeek, uint8 _hourOfDay) external {\\n        _onlyOwner();\\n\\n        if (_duration == 0 || _dayOfWeek > 8 || _hourOfDay > 23) revert BV_BadRoundConfig();\\n\\n        emit RoundConfigSet(roundConfig.duration, roundConfig.dayOfWeek, roundConfig.hourOfDay, _duration, _dayOfWeek, _hourOfDay);\\n\\n        roundConfig = RoundConfig(_duration, _dayOfWeek, _hourOfDay);\\n    }\\n\\n    /**\\n     * @notice Sets allowances for the registrar\\n     * @dev this is callable by owner,\\n     * @param _max is the max allowance\\n     */\\n    function setRegistrarAllowances(bool _max) external {\\n        _onlyOwner();\\n\\n        Collateral[] memory collat = collaterals;\\n\\n        for (uint256 i; i < collat.length;) {\\n            IHNT20(collat[i].addr).approve(registrar, _max ? type(uint256).max : 0);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        share.setApprovalForAll(registrar, _max);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Deposit & Withdraws\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Deposits the `asset` from address added to `_subAccount`'s deposit\\n     * @dev this function will only work for single asset collaterals\\n     * @param _amount is the amount of primary asset to deposit\\n     */\\n    function deposit(uint256 _amount) external {\\n        _onlyRegistrar();\\n\\n        vaultState.totalPending += _toUint96(_amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws the assets from the vault\\n     * @dev only pending funds can be withdrawn using this method\\n     * @param _amount is the pending amount of primary asset to be withdrawn\\n     */\\n    function quickWithdraw(uint256 _amount) external nonReentrant {\\n        _onlyRegistrar();\\n\\n        vaultState.totalPending -= _toUint96(_amount);\\n    }\\n\\n    /**\\n     * @notice requests a withdraw that can be processed once the round closes\\n     * @param _subAccount is the address of the sub account\\n     * @param _numShares is the number of shares to withdraw\\n     */\\n    function requestWithdrawFor(address _subAccount, uint256 _numShares) external virtual nonReentrant {\\n        _onlyRegistrar();\\n\\n        _requestWithdraw(_subAccount, _numShares);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Vault Operations\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Performs most administrative tasks associated with a round closing\\n     */\\n    function closeRound() external nonReentrant {\\n        _onlyManager();\\n\\n        _beforeCloseRound();\\n\\n        uint32 currentRound = vaultState.round;\\n        uint256 currentExpiry = expiry[currentRound];\\n        bool expirationExceeded = currentExpiry < block.timestamp;\\n        uint256[] memory balances = _getCurrentBalances();\\n\\n        // only take fees after expiration exceeded, returns balances san fees\\n        if (expirationExceeded && currentRound > 1) balances = _processFees(balances, currentRound);\\n\\n        // sets new pricePerShare, shares to mint, and asset prices for new funds being added\\n        _rollInFunds(balances, currentRound, currentExpiry);\\n\\n        uint32 nextRound = currentRound + 1;\\n\\n        // setting the balances at the start of the new round\\n        startingBalances[nextRound] = balances;\\n\\n        // including all pending deposits into vault\\n        vaultState.lastLockedAmount = vaultState.lockedAmount;\\n        vaultState.totalPending = 0;\\n        vaultState.round = nextRound;\\n\\n        uint256 lockedAmount = balances[0];\\n\\n        // only withdraw, otherwise\\n        if (expirationExceeded && currentRound > 1) lockedAmount -= _completeWithdraw();\\n\\n        vaultState.lockedAmount = _toUint96(lockedAmount);\\n\\n        _afterCloseRound();\\n    }\\n\\n    /**\\n     * @notice Helper function to save gas for writing values into storage maps.\\n     *         Writing 1's into maps makes subsequent writes warm, reducing the gas significantly.\\n     * @param _numRounds is the number of rounds to initialize in the maps\\n     * @param _startFromRound is the round number from which to start initializing the maps\\n     */\\n    function initRounds(uint256 _numRounds, uint32 _startFromRound) external {\\n        unchecked {\\n            uint256 i;\\n            uint256[] memory placeholderArray = new uint256[](collaterals.length);\\n\\n            for (i; i < collaterals.length; ++i) {\\n                placeholderArray[i] = PLACEHOLDER_UINT;\\n            }\\n\\n            for (i = 0; i < _numRounds; ++i) {\\n                uint256 index = _startFromRound;\\n\\n                index += i;\\n\\n                if (pricePerShare[index] > 0) revert BV_BadPPS();\\n                if (expiry[index] > 0) revert BV_BadExpiry();\\n                if (startingBalances[index].length > 0) revert BV_BadSB();\\n                if (collateralPrices[index].length > 0) revert BV_BadCP();\\n\\n                pricePerShare[index] = PLACEHOLDER_UINT;\\n                expiry[index] = PLACEHOLDER_UINT;\\n\\n                startingBalances[index] = placeholderArray;\\n                collateralPrices[index] = placeholderArray;\\n            }\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Getters\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getCollaterals() external view returns (Collateral[] memory) {\\n        return collaterals;\\n    }\\n\\n    function getStartingBalances(uint256 _round) external view returns (uint256[] memory) {\\n        return startingBalances[_round];\\n    }\\n\\n    function getCollateralPrices(uint256 _round) external view returns (uint256[] memory) {\\n        return collateralPrices[_round];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Internal Functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Sets addresses for different settings\\n     * @param _type of address:\\n     *              0 - Manager\\n     *              1 - FeeRecipient\\n     *              2 - Pauser\\n     *              3 - Whitelist\\n     * @param _address is the new address\\n     */\\n    function _setAddress(uint256 _type, address _address) internal virtual {\\n        AddressType addressType = AddressType(_type);\\n\\n        if (AddressType.Manager == addressType) {\\n            emit AddressSet(_type, manager, _address);\\n            manager = _address;\\n        } else if (AddressType.FeeRecipient == addressType) {\\n            emit AddressSet(_type, feeRecipient, _address);\\n            feeRecipient = _address;\\n        } else if (AddressType.Pauser == addressType) {\\n            emit AddressSet(_type, pauser, _address);\\n            pauser = _address;\\n        } else if (AddressType.Whitelist == addressType) {\\n            emit AddressSet(_type, whitelist, _address);\\n            whitelist = _address;\\n        }\\n    }\\n\\n    function _requestWithdraw(address _subAccount, uint256 _numShares) internal {\\n        vaultState.queuedWithdrawShares += _toUint128(_numShares);\\n\\n        // storing shares in pauser for future asset(s) withdraw\\n        IPositionPauser(pauser).pausePosition(_subAccount, _numShares);\\n    }\\n\\n    /**\\n     * @notice Process fees after expiry\\n     * @param _balances current balances\\n     * @param _currentRound current round\\n     */\\n    function _processFees(uint256[] memory _balances, uint256 _currentRound)\\n        internal\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        uint256[] memory totalFees;\\n\\n        VaultDetails memory vaultDetails =\\n            VaultDetails(collaterals, startingBalances[_currentRound], _balances, vaultState.totalPending);\\n\\n        (totalFees, balances) = FeeLib.processFees(vaultDetails, managementFee, performanceFee);\\n\\n        for (uint256 i; i < totalFees.length;) {\\n            if (totalFees[i] > 0) {\\n                IHNT20(collaterals[i].addr).safeTransfer(feeRecipient, totalFees[i]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit CollectedFees(totalFees, _currentRound, feeRecipient);\\n    }\\n\\n    /**\\n     * @notice Activates pending deposits\\n     * @dev calculates net asset values and mints new shares at new price per share\\n     * @param _balances current balances\\n     * @param _currentRound current round\\n     * @param _expiry round expiry\\n     */\\n    function _rollInFunds(uint256[] memory _balances, uint256 _currentRound, uint256 _expiry) internal virtual {\\n        (uint256 totalNAV, uint256 pendingNAV, uint256[] memory prices) = _getNAVs(_balances, _currentRound, _expiry);\\n\\n        uint256 pps = FeeLib.pricePerShare(share.totalSupply(address(this)), totalNAV, pendingNAV);\\n\\n        uint256 mintShares = FeeLib.navToShares(pendingNAV, pps);\\n\\n        // mints shares for all deposits, accounts can redeem at any time\\n        share.mint(address(this), mintShares);\\n\\n        // Finalize the pricePerShare at the end of the round\\n        pricePerShare[_currentRound] = pps;\\n\\n        // Prices at expiry, if before expiry then spot\\n        collateralPrices[_currentRound] = prices;\\n    }\\n\\n    /**\\n     * @notice Gets net asset values\\n     * @dev calculates net asset values based on collaterals\\n     * @param _balances current balances\\n     * @param _round the round\\n     * @param _expiry round expiry\\n     */\\n    function _getNAVs(uint256[] memory _balances, uint256 _round, uint256 _expiry)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 totalNAV, uint256 pendingNAV, uint256[] memory prices)\\n    {\\n        NAVDetails memory navDetails =\\n            NAVDetails(collaterals, startingBalances[_round], _balances, oracle, _expiry, vaultState.totalPending);\\n\\n        (totalNAV, pendingNAV, prices) = FeeLib.calculateNAVs(navDetails);\\n    }\\n\\n    /**\\n     * @notice Completes withdraws from a past round\\n     * @dev transfers assets to pauser to exclude from vault balances\\n     */\\n    function _completeWithdraw() internal virtual returns (uint256) {\\n        uint256 withdrawShares = uint256(vaultState.queuedWithdrawShares);\\n\\n        uint256[] memory withdrawAmounts = new uint256[](1);\\n\\n        if (withdrawShares != 0) {\\n            vaultState.queuedWithdrawShares = 0;\\n\\n            // total assets transferred to pauser\\n            withdrawAmounts = VaultLib.withdrawWithShares(collaterals, share.totalSupply(address(this)), withdrawShares, pauser);\\n            // recording deposits with pauser for past round\\n            IPositionPauser(pauser).processVaultWithdraw(withdrawAmounts);\\n\\n            // burns shares that were transferred to vault during requestWithdraw\\n            share.burn(address(this), withdrawShares);\\n\\n            emit Withdrew(msg.sender, withdrawAmounts, withdrawShares);\\n        }\\n\\n        return withdrawAmounts[0];\\n    }\\n\\n    /**\\n     * @notice Queries total balance(s) of collateral\\n     * @dev used in processFees\\n     */\\n    function _getCurrentBalances() internal view virtual returns (uint256[] memory balances) {\\n        Collateral[] memory collats = collaterals;\\n\\n        balances = new uint256[](collats.length);\\n\\n        for (uint256 i; i < collats.length;) {\\n            balances[i] = IHNT20(collats[i].addr).balanceOf(address(this));\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _onlyManager() internal view {\\n        if (msg.sender != manager) revert Unauthorized();\\n    }\\n\\n    function _onlyOwner() internal view {\\n        if (msg.sender != owner()) revert Unauthorized();\\n    }\\n\\n    function _onlyRegistrar() internal view {\\n        if (msg.sender != registrar) revert Unauthorized();\\n    }\\n\\n    function _hasAccess(address _subAccount) internal view {\\n        if (msg.sender != _subAccount && msg.sender != manager) revert Unauthorized();\\n    }\\n\\n    function _toUint96(uint256 _num) internal pure returns (uint96) {\\n        if (_num > type(uint96).max) revert Overflow();\\n        return uint96(_num);\\n    }\\n\\n    function _toUint128(uint256 _num) internal pure returns (uint128) {\\n        if (_num > type(uint128).max) revert Overflow();\\n        return uint128(_num);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-cash/src/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @notice  get spot price of _base, denominated in _quote.\\n     * @param _base base asset. for ETH/USD price, ETH is the base asset\\n     * @param _quote quote asset. for ETH/USD price, USD is the quote asset\\n     * @return price with 6 decimals\\n     */\\n    function getSpotPrice(address _base, address _quote) external view returns (uint256);\\n\\n    /**\\n     * @dev get expiry price of underlying, denominated in strike asset.\\n     * @param _base base asset. for ETH/USD price, ETH is the base asset\\n     * @param _quote quote asset. for ETH/USD price, USD is the quote asset\\n     * @param _expiry expiry timestamp\\n     *\\n     * @return price with 6 decimals\\n     */\\n    function getPriceAtExpiry(address _base, address _quote, uint256 _expiry)\\n        external\\n        view\\n        returns (uint256 price, bool isFinalized);\\n\\n    /**\\n     * @dev return the maximum dispute period for the oracle\\n     * @dev this will only be checked during oracle registration, as a soft constraint on integrating oracles.\\n     */\\n    function maxDisputePeriod() external view returns (uint256 disputePeriod);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAuctionVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IAuctionVault {\\n    /// @notice verifies the options are allowed to be minted\\n    /// @param _options to mint\\n    function verifyOptions(uint256[] calldata _options) external view;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IPositionPauser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IPositionPauser {\\n    /// @notice pause vault position of an account with max amount\\n    /// @param _account the address of user\\n    /// @param _amount amount of shares\\n    function pausePosition(address _account, uint256 _amount) external;\\n\\n    /// @notice processes all pending withdrawals\\n    /// @param _balances of assets transfered to pauser\\n    function processVaultWithdraw(uint256[] calldata _balances) external;\\n\\n    /// @notice user withdraws collateral\\n    /// @param _vault the address of vault\\n    /// @param _destination the address of the recipient\\n    function withdrawCollaterals(address _vault, address _destination) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/FeeLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// external libraries\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\n\\n// interfaces\\nimport {IOracle} from \\\"grappa/interfaces/IOracle.sol\\\";\\n\\nimport \\\"../config/constants.sol\\\";\\nimport \\\"../config/errors.sol\\\";\\nimport \\\"../config/types.sol\\\";\\n\\nlibrary FeeLib {\\n    using FixedPointMathLib for uint256;\\n\\n    /**\\n     * @notice Calculates the management and performance fee for the current round\\n     * @param vaultDetails VaultDetails struct\\n     * @param managementFee charged at each round\\n     * @param performanceFee charged if the vault performs\\n     * @return totalFees all fees taken in round\\n     * @return balances is the asset balances at the start of the next round\\n     */\\n    function processFees(VaultDetails calldata vaultDetails, uint256 managementFee, uint256 performanceFee)\\n        external\\n        pure\\n        returns (uint256[] memory totalFees, uint256[] memory balances)\\n    {\\n        uint256 collateralCount = vaultDetails.currentBalances.length;\\n\\n        totalFees = new uint256[](collateralCount);\\n        balances = new uint256[](collateralCount);\\n\\n        for (uint256 i; i < collateralCount;) {\\n            uint256 lockedBalanceSansPending;\\n            uint256 managementFeeInAsset;\\n            uint256 performanceFeeInAsset;\\n\\n            balances[i] = vaultDetails.currentBalances[i];\\n\\n            // primary asset amount used to calculating the amount of secondary assets deposited in the round\\n            uint256 pendingBalance =\\n                vaultDetails.startingBalances[i].mulDivDown(vaultDetails.totalPending, vaultDetails.startingBalances[0]);\\n\\n            // At round 1, currentBalance == totalPending so we do not take fee on the first round\\n            if (balances[i] > pendingBalance) {\\n                lockedBalanceSansPending = balances[i] - pendingBalance;\\n            }\\n\\n            managementFeeInAsset = lockedBalanceSansPending.mulDivDown(managementFee, 100 * PERCENT_MULTIPLIER);\\n\\n            // Performance fee charged ONLY if difference between starting balance(s) and ending\\n            // balance(s) (excluding pending depositing) is positive\\n            // If the balance is negative, the the round did not profit.\\n            if (lockedBalanceSansPending > vaultDetails.startingBalances[i]) {\\n                if (performanceFee > 0) {\\n                    uint256 performanceAmount = lockedBalanceSansPending - vaultDetails.startingBalances[i];\\n\\n                    performanceFeeInAsset = performanceAmount.mulDivDown(performanceFee, 100 * PERCENT_MULTIPLIER);\\n                }\\n            }\\n\\n            totalFees[i] = managementFeeInAsset + performanceFeeInAsset;\\n\\n            // deducting fees from current balances\\n            balances[i] -= totalFees[i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates Net Asset Value of the vault and pending deposits\\n     * @dev prices are based on expiry, if rolling close then spot is used\\n     * @param details NAVDetails struct\\n     * @return totalNav of all the assets\\n     * @return pendingNAV of just the pending assets\\n     * @return prices of the different assets\\n     */\\n    function calculateNAVs(NAVDetails calldata details)\\n        external\\n        view\\n        returns (uint256 totalNav, uint256 pendingNAV, uint256[] memory prices)\\n    {\\n        IOracle oracle = IOracle(details.oracleAddr);\\n\\n        uint256 collateralCount = details.collaterals.length;\\n\\n        prices = new uint256[](collateralCount);\\n\\n        // primary asset that all other assets will be quotes in\\n        address quote = details.collaterals[0].addr;\\n\\n        for (uint256 i; i < collateralCount;) {\\n            prices[i] = UNIT;\\n\\n            // if collateral is primary asset, leave price as 1 (scale 1e6)\\n            if (i > 0) prices[i] = _getPrice(oracle, details.collaterals[i].addr, quote, details.expiry);\\n\\n            // sum of all asset(s) value\\n            totalNav += details.currentBalances[i].mulDivDown(prices[i], 10 ** details.collaterals[i].decimals);\\n\\n            // calculated pending deposit based on the primary asset\\n            uint256 pendingBalance = details.totalPending.mulDivDown(details.startingBalances[i], details.startingBalances[0]);\\n\\n            // sum of pending assets value\\n            pendingNAV += pendingBalance.mulDivDown(prices[i], 10 ** details.collaterals[i].decimals);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice calculates relative Net Asset Value based on the primary asset and a rounds starting balance(s)\\n     * @dev used in pending deposits per account\\n     */\\n    function calculateRelativeNAV(\\n        Collateral[] memory collaterals,\\n        uint256[] memory startingBalances,\\n        uint256[] memory collateralPrices,\\n        uint256 primaryDeposited\\n    ) external pure returns (uint256 nav) {\\n        // primary asset amount used to calculating the amount of secondary assets deposited in the round\\n        uint256 primaryTotal = startingBalances[0];\\n\\n        for (uint256 i; i < collaterals.length;) {\\n            uint256 balance = startingBalances[i].mulDivDown(primaryDeposited, primaryTotal);\\n\\n            nav += balance.mulDivDown(collateralPrices[i], 10 ** collaterals[i].decimals);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function navToShares(uint256 nav, uint256 navPerShare) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        if (navPerShare <= PLACEHOLDER_UINT) revert FL_NPSLow();\\n\\n        return nav.mulDivDown(UNIT, navPerShare);\\n    }\\n\\n    function pricePerShare(uint256 totalSupply, uint256 totalNAV, uint256 pendingNAV) internal pure returns (uint256) {\\n        return totalSupply > 0 ? (totalNAV - pendingNAV).mulDivDown(UNIT, totalSupply) : UNIT;\\n    }\\n\\n    /**\\n     * @notice get spot price of base, denominated in quote.\\n     * @dev used in Net Asset Value calculations\\n     * @dev\\n     * @param oracle abstracted chainlink oracle\\n     * @param base base asset. for ETH/USD price, ETH is the base asset\\n     * @param quote quote asset. for ETH/USD price, USD is the quote asset\\n     * @param expiry price at a given timestamp\\n     * @return price with 6 decimals\\n     */\\n    function _getPrice(IOracle oracle, address base, address quote, uint256 expiry) internal view returns (uint256 price) {\\n        // if timestamp is the placeholder (1) or zero then get the spot\\n        if (expiry <= PLACEHOLDER_UINT) price = oracle.getSpotPrice(base, quote);\\n        else (price,) = oracle.getPriceAtExpiry(base, quote, expiry);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/VaultLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// external libraries\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// interfaces\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport {IWhitelistManager} from \\\"../interfaces/IWhitelistManager.sol\\\";\\n\\nimport \\\"../config/constants.sol\\\";\\nimport \\\"../config/types.sol\\\";\\nimport \\\"../config/errors.sol\\\";\\n\\nlibrary VaultLib {\\n    using FixedPointMathLib for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Rebalance assets\\n     * @dev will only allow surplus assets to be exchanged\\n     */\\n    function rebalance(address otc, uint256[] calldata amounts, Collateral[] calldata collaterals, address whitelist) external {\\n        if (collaterals.length != amounts.length) revert VL_DifferentLengths();\\n\\n        if (!IWhitelistManager(whitelist).isOTC(otc)) revert Unauthorized();\\n\\n        for (uint256 i; i < collaterals.length;) {\\n            if (amounts[i] != 0) {\\n                IERC20 asset = IERC20(collaterals[i].addr);\\n\\n                if (amounts[i] > asset.balanceOf(address(this))) revert VL_ExceedsSurplus();\\n\\n                asset.safeTransfer(otc, amounts[i]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Processes withdrawing assets based on shares\\n     * @dev used to send assets to the pauser at the end of each round\\n     */\\n    function withdrawWithShares(Collateral[] calldata collaterals, uint256 totalSupply, uint256 shares, address recipient)\\n        external\\n        returns (uint256[] memory amounts)\\n    {\\n        amounts = new uint256[](collaterals.length);\\n\\n        for (uint256 i; i < collaterals.length;) {\\n            uint256 balance = IERC20(collaterals[i].addr).balanceOf(address(this));\\n\\n            amounts[i] = balance.mulDivDown(shares, totalSupply);\\n\\n            if (amounts[i] != 0) {\\n                IERC20(collaterals[i].addr).safeTransfer(recipient, amounts[i]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the next option expiry from the given timestamp\\n     * @param roundConfig the configuration used to calculate the option expiry\\n     */\\n    function getNextExpiry(RoundConfig storage roundConfig) internal view returns (uint256 nextTime) {\\n        uint256 offset = block.timestamp + roundConfig.duration;\\n\\n        // The offset will always be greater than the options expiry,\\n        // so we subtract a week in order to get the day the option should expire,\\n        // or subtract a day to get the hour the option should start if the dayOfWeek is wild (8)\\n        if (roundConfig.dayOfWeek != 8) offset -= 1 weeks;\\n        else offset -= 1 days;\\n\\n        nextTime = _getNextDayTimeOfWeek(offset, roundConfig.dayOfWeek, roundConfig.hourOfDay);\\n\\n        //if timestamp is in the past relative to the offset,\\n        // it means we've tried to calculate an expiry of an option which has too short of length.\\n        // I.e trying to run a 1 day option on a Tuesday which should expire Friday\\n        if (nextTime < offset) revert SL_BadExpiryDate();\\n    }\\n\\n    /**\\n     * @notice Calculates the next day/hour of the week\\n     * @param timestamp is the expiry timestamp of the current option\\n     * @param dayOfWeek is the day of the week we're looking for (sun:0/7 - sat:6),\\n     *                  8 will be treated as disabled and the next available hourOfDay will be returned\\n     * @param hourOfDay is the next hour of the day we want to expire on (midnight:0)\\n     *\\n     * Examples when day = 5, hour = 8:\\n     * getNextDayTimeOfWeek(week 1 thursday) -> week 1 friday:0800\\n     * getNextDayTimeOfWeek(week 1 friday) -> week 2 friday:0800\\n     * getNextDayTimeOfWeek(week 1 saturday) -> week 2 friday:0800\\n     *\\n     * Examples when day = 7, hour = 8:\\n     * getNextDayTimeOfWeek(week 1 thursday) -> week 1 friday:0800\\n     * getNextDayTimeOfWeek(week 1 friday:0500) -> week 1 friday:0800\\n     * getNextDayTimeOfWeek(week 1 friday:0900) -> week 1 saturday:0800\\n     * getNextDayTimeOfWeek(week 1 saturday) -> week 1 sunday:0800\\n     */\\n    function _getNextDayTimeOfWeek(uint256 timestamp, uint256 dayOfWeek, uint256 hourOfDay)\\n        internal\\n        pure\\n        returns (uint256 nextStartTime)\\n    {\\n        // we want sunday to have a value of 7\\n        if (dayOfWeek == 0) dayOfWeek = 7;\\n\\n        // dayOfWeek = 0 (sunday) - 6 (saturday) calculated from epoch time\\n        uint256 timestampDayOfWeek = ((timestamp / 1 days) + 4) % 7;\\n        //Calculate the nextDayOfWeek by figuring out how much time is between now and then in seconds\\n        uint256 nextDayOfWeek =\\n            timestamp + ((7 + (dayOfWeek == 8 ? timestampDayOfWeek : dayOfWeek) - timestampDayOfWeek) % 7) * 1 days;\\n        //Calculate the nextStartTime by removing the seconds past midnight, then adding the amount seconds after midnight we wish to start\\n        nextStartTime = nextDayOfWeek - (nextDayOfWeek % 24 hours) + (hourOfDay * 1 hours);\\n\\n        // If the date has passed, we simply increment it by a week to get the next dayOfWeek, or by a day if we only want the next hourOfDay\\n        if (timestamp >= nextStartTime) {\\n            if (dayOfWeek == 8) nextStartTime += 1 days;\\n            else nextStartTime += 7 days;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return index of the first element in array x with value v\\n     * @return found set to true if found\\n     * @return i index in the array\\n     */\\n    function indexOfId(Collateral[] memory x, uint8 v) internal pure returns (bool, uint256) {\\n        for (uint256 i; i < x.length;) {\\n            if (x[i].id == v) {\\n                return (true, i);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return (false, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-cash/src/interfaces/IGrappa.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../config/types.sol\\\";\\n\\ninterface IGrappa {\\n    function getDetailFromProductId(uint40 _productId)\\n        external\\n        view\\n        returns (\\n            address oracle,\\n            address engine,\\n            address underlying,\\n            uint8 underlyingDecimals,\\n            address strike,\\n            uint8 strikeDecimals,\\n            address collateral,\\n            uint8 collateralDecimals\\n        );\\n\\n    function checkEngineAccess(uint256 _tokenId, address _engine) external view;\\n\\n    function checkEngineAccessAndTokenId(uint256 _tokenId, address _engine) external view;\\n\\n    function engineIds(address _engine) external view returns (uint8 id);\\n\\n    function assetIds(address _asset) external view returns (uint8 id);\\n\\n    function assets(uint8 _id) external view returns (address addr, uint8 decimals);\\n\\n    function engines(uint8 _id) external view returns (address engine);\\n\\n    function oracles(uint8 _id) external view returns (address oracle);\\n\\n    function getPayout(uint256 tokenId, uint64 amount)\\n        external\\n        view\\n        returns (address engine, address collateral, uint256 payout);\\n\\n    function getProductId(address oracle, address engine, address underlying, address strike, address collateral)\\n        external\\n        view\\n        returns (uint40 id);\\n\\n    function getTokenId(TokenType tokenType, uint40 productId, uint256 expiry, uint256 longStrike, uint256 shortStrike)\\n        external\\n        view\\n        returns (uint256 id);\\n\\n    /**\\n     * @notice burn option token and get out cash value at expiry\\n     * @param _account who to settle for\\n     * @param _tokenId  tokenId of option token to burn\\n     * @param _amount   amount to settle\\n     * @return payout amount paid out\\n     */\\n    function settleOption(address _account, uint256 _tokenId, uint256 _amount) external returns (uint256 payout);\\n\\n    /**\\n     * @notice burn array of option tokens and get out cash value at expiry\\n     * @param _account who to settle for\\n     * @param _tokenIds array of tokenIds to burn\\n     * @param _amounts   array of amounts to burn\\n     */\\n    function batchSettleOptions(address _account, uint256[] memory _tokenIds, uint256[] memory _amounts)\\n        external\\n        returns (Balance[] memory payouts);\\n\\n    function batchGetPayouts(uint256[] memory _tokenIds, uint256[] memory _amounts) external returns (Balance[] memory payouts);\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-physical/src/interfaces/IPomace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../config/types.sol\\\";\\nimport {IOracle} from \\\"./IOracle.sol\\\";\\n\\ninterface IPomace {\\n    function oracle() external view returns (IOracle oracle);\\n\\n    function checkEngineAccess(uint256 _tokenId, address _engine) external view;\\n\\n    function checkEngineAccessAndTokenId(uint256 _tokenId, address _engine) external view;\\n\\n    function engineIds(address _engine) external view returns (uint8 id);\\n\\n    function assetIds(address _asset) external view returns (uint8 id);\\n\\n    function assets(uint8 _id) external view returns (address addr, uint8 decimals);\\n\\n    function engines(uint8 _id) external view returns (address engine);\\n\\n    function isCollateralizable(uint8 _asset0, uint8 _asset1) external view returns (bool);\\n\\n    function isCollateralizable(address _asset0, address _asset1) external view returns (bool);\\n\\n    function getDebtAndPayout(uint256 tokenId, uint64 amount)\\n        external\\n        view\\n        returns (address engine, uint8 debtId, uint256 debt, uint8 payoutId, uint256 payout);\\n\\n    function batchGetDebtAndPayouts(uint256[] calldata tokenId, uint256[] calldata amount)\\n        external\\n        view\\n        returns (Balance[] memory debts, Balance[] memory payouts);\\n\\n    function getProductId(address engine, address underlying, address strike, address collateral)\\n        external\\n        view\\n        returns (uint32 id);\\n\\n    function getTokenId(TokenType tokenType, uint32 productId, uint256 expiry, uint256 strike, uint256 exerciseWindow)\\n        external\\n        view\\n        returns (uint256 id);\\n\\n    function getDetailFromProductId(uint32 _productId)\\n        external\\n        view\\n        returns (\\n            address engine,\\n            address underlying,\\n            uint8 underlyingDecimals,\\n            address strike,\\n            uint8 strikeDecimals,\\n            address collateral,\\n            uint8 collateralDecimals\\n        );\\n\\n    /**\\n     * @notice burn option token and get out cash value at expiry\\n     * @param _account who to settle for\\n     * @param _tokenId  tokenId of option token to burn\\n     * @param _amount   amount to settle\\n     * @return debt amount collected\\n     * @return payout amount paid out\\n     */\\n    function settleOption(address _account, uint256 _tokenId, uint256 _amount)\\n        external\\n        returns (Balance memory debt, Balance memory payout);\\n\\n    /**\\n     * @notice burn array of option tokens and get out cash value at expiry\\n     * @param _account who to settle for\\n     * @param _tokenIds array of tokenIds to burn\\n     * @param _amounts   array of amounts to burn\\n     */\\n    function batchSettleOptions(address _account, uint256[] memory _tokenIds, uint256[] memory _amounts) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/ActionUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../config/constants.sol\\\";\\nimport \\\"../config/enums.sol\\\";\\nimport \\\"../config/types.sol\\\";\\n\\n/**\\n * @title libraries to encode action arguments\\n */\\nlibrary ActionUtil {\\n    function concat(ActionArgs[] memory x, ActionArgs[] memory v) internal pure returns (ActionArgs[] memory y) {\\n        y = new ActionArgs[](x.length + v.length);\\n        uint256 z;\\n        uint256 i;\\n        for (i; i < x.length;) {\\n            y[z] = x[i];\\n            unchecked {\\n                ++z;\\n                ++i;\\n            }\\n        }\\n        for (i = 0; i < v.length;) {\\n            y[z] = v[i];\\n            unchecked {\\n                ++z;\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function append(ActionArgs[] memory x, ActionArgs memory v) internal pure returns (ActionArgs[] memory y) {\\n        y = new ActionArgs[](x.length + 1);\\n        uint256 i;\\n        for (i; i < x.length;) {\\n            y[i] = x[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        y[i] = v;\\n    }\\n\\n    function append(BatchExecute[] memory x, BatchExecute memory v) internal pure returns (BatchExecute[] memory y) {\\n        y = new BatchExecute[](x.length + 1);\\n        uint256 i;\\n        for (i; i < x.length;) {\\n            y[i] = x[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        y[i] = v;\\n    }\\n\\n    // add a function prefixed with test here so forge coverage will ignore this file\\n    function testChillOnHelper() public {}\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/FixedPointMathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IHashnoteVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {IMarginEngine} from \\\"./IMarginEngine.sol\\\";\\nimport {IVaultShare} from \\\"./IVaultShare.sol\\\";\\n\\nimport \\\"../config/types.sol\\\";\\n\\ninterface IHashnoteVault {\\n    function share() external view returns (IVaultShare);\\n\\n    function manager() external view returns (address);\\n\\n    function whitelist() external view returns (address);\\n\\n    function managementFee() external view returns (uint256);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function marginEngine() external view returns (IMarginEngine);\\n\\n    function vaultState() external view returns (VaultState memory);\\n\\n    function _depositReceipts(address subAccount) external view returns (DepositReceipt memory);\\n\\n    function deposit(uint256 amount) external;\\n\\n    function quickWithdraw(uint256 amount) external;\\n\\n    function requestWithdrawFor(address subAccount, uint256 numShares) external;\\n\\n    function collaterals(uint256 index) external view returns (Collateral memory);\\n\\n    function expiry(uint256 round) external view returns (uint256);\\n\\n    function pricePerShare(uint256 round) external view returns (uint256);\\n\\n    function getCollaterals() external view returns (Collateral[] memory);\\n\\n    function getStartingBalances(uint256 round) external view returns (uint256[] memory);\\n\\n    function getCollateralPrices(uint256 round) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ERC1155 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             METADATA LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC1155 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        balanceOf[from][id] -= amount;\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        require(ids.length == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        // Storing these outside the loop saves ~15 gas per iteration.\\n        uint256 id;\\n        uint256 amount;\\n\\n        for (uint256 i = 0; i < ids.length; ) {\\n            id = ids[i];\\n            amount = amounts[i];\\n\\n            balanceOf[from][id] -= amount;\\n            balanceOf[to][id] += amount;\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        require(owners.length == ids.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        // Unchecked because the only math done is incrementing\\n        // the array index counter which cannot possibly overflow.\\n        unchecked {\\n            for (uint256 i = 0; i < owners.length; ++i) {\\n                balances[i] = balanceOf[owners[i]][ids[i]];\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[to][ids[i]] += amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, address(0), ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchBurn(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[from][ids[i]] -= amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        balanceOf[from][id] -= amount;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IHNT20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IHNT20 is IERC20 {\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVaultShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155} from \\\"openzeppelin/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface IVaultShare is IERC1155 {\\n    /**\\n     * @dev mint option token to an address. Can only be called by corresponding vault\\n     * @param _recipient    where to mint token to\\n     * @param _amount       amount to mint\\n     *\\n     */\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    /**\\n     * @dev burn option token from an address. Can only be called by corresponding vault\\n     * @param _from         account to burn from\\n     * @param _amount       amount to burn\\n     *\\n     */\\n    function burn(address _from, uint256 _amount) external;\\n\\n    /**\\n     * @dev burn option token from addresses. Can only be called by corresponding vault\\n     * @param _from        accounts to burn from\\n     * @param _amounts      amounts to burn\\n     *\\n     */\\n    function batchBurn(address[] memory _from, uint256[] memory _amounts) external;\\n\\n    /**\\n     * @dev returns total supply of a vault\\n     * @param _vault      address of the vault\\n     *\\n     */\\n    function totalSupply(address _vault) external view returns (uint256 amount);\\n\\n    /**\\n     * @dev returns vault share balance for a given holder\\n     * @param _owner      address of token holder\\n     * @param _vault      address of the vault\\n     *\\n     */\\n    function getBalanceOf(address _owner, address _vault) external view returns (uint256 amount);\\n\\n    /**\\n     * @dev exposing transfer method to vault\\n     *\\n     */\\n    function transferVaultOnly(address _from, address _to, uint256 _amount, bytes calldata _data) external;\\n\\n    /**\\n     * @dev exposing transfer method to registrar\\n     *\\n     */\\n    function transferRegistrarOnly(address _from, address _to, address _vault, uint256 _amount, bytes calldata _data) external;\\n\\n    /**\\n     * @dev helper method to pass in vault address instead of tokenId\\n     *\\n     */\\n    function transferFromWithVault(address _from, address _to, address _vault, uint256 _amount, bytes calldata _data) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWhitelistManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface ISanctionsList {\\n    function isSanctioned(address _address) external view returns (bool);\\n}\\n\\ninterface IWhitelistManager {\\n    function isCustomer(address _address) external view returns (bool);\\n\\n    function isLP(address _address) external view returns (bool);\\n\\n    function isOTC(address _address) external view returns (bool);\\n\\n    function isVault(address _vault) external view returns (bool);\\n\\n    function engineAccess(address _address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/config/enums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nenum AddressType {\\n    Manager,\\n    FeeRecipient,\\n    Pauser,\\n    Whitelist\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-cash/src/config/types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./enums.sol\\\";\\n\\n/**\\n * @dev struct representing the current balance for a given collateral\\n * @param collateralId grappa asset id\\n * @param amount amount the asset\\n */\\nstruct Balance {\\n    uint8 collateralId;\\n    uint80 amount;\\n}\\n\\n/**\\n * @dev struct containing assets detail for an product\\n * @param underlying    underlying address\\n * @param strike        strike address\\n * @param collateral    collateral address\\n * @param collateralDecimals collateral asset decimals\\n */\\nstruct ProductDetails {\\n    address oracle;\\n    uint8 oracleId;\\n    address engine;\\n    uint8 engineId;\\n    address underlying;\\n    uint8 underlyingId;\\n    uint8 underlyingDecimals;\\n    address strike;\\n    uint8 strikeId;\\n    uint8 strikeDecimals;\\n    address collateral;\\n    uint8 collateralId;\\n    uint8 collateralDecimals;\\n}\\n\\n// todo: update doc\\nstruct ActionArgs {\\n    ActionType action;\\n    bytes data;\\n}\\n\\nstruct BatchExecute {\\n    address subAccount;\\n    ActionArgs[] actions;\\n}\\n\\n/**\\n * @dev asset detail stored per asset id\\n * @param addr address of the asset\\n * @param decimals token decimals\\n */\\nstruct AssetDetail {\\n    address addr;\\n    uint8 decimals;\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-physical/src/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @notice  get spot price of _base, denominated in _quote.\\n     * @param _base base asset. for ETH/USD price, ETH is the base asset\\n     * @param _quote quote asset. for ETH/USD price, USD is the quote asset\\n     * @return price with 6 decimals\\n     */\\n    function getSpotPrice(address _base, address _quote) external view returns (uint256);\\n\\n    /**\\n     * @dev get expiry price of underlying, denominated in strike asset.\\n     * @param _base base asset. for ETH/USD price, ETH is the base asset\\n     * @param _quote quote asset. for ETH/USD price, USD is the quote asset\\n     * @param _expiry expiry timestamp\\n     *\\n     * @return price with 6 decimals\\n     */\\n    function getPriceAtExpiry(address _base, address _quote, uint256 _expiry)\\n        external\\n        view\\n        returns (uint256 price, bool isFinalized);\\n\\n    /**\\n     * @dev return the maximum dispute period for the oracle\\n     * @dev this will only be checked during oracle registration, as a soft constraint on integrating oracles.\\n     */\\n    function maxDisputePeriod() external view returns (uint256 disputePeriod);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/cross-margin-engine/lib/core-cash/src/config/enums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum TokenType {\\n    PUT,\\n    PUT_SPREAD,\\n    CALL,\\n    CALL_SPREAD\\n}\\n\\n/**\\n * @dev common action types on margin engines\\n */\\nenum ActionType {\\n    AddCollateral,\\n    RemoveCollateral,\\n    MintShort,\\n    BurnShort,\\n    MergeOptionToken, // These actions are defined in \\\"DebitSpread\\\"\\n    SplitOptionToken, // These actions are defined in \\\"DebitSpread\\\"\\n    AddLong,\\n    RemoveLong,\\n    SettleAccount,\\n    // actions that influence more than one subAccounts:\\n    // These actions are defined in \\\"OptionTransferable\\\"\\n    MintShortIntoAccount, // increase short (debt) position in one subAccount, increase long token directly to another subAccount\\n    TransferCollateral, // transfer collateral directly to another subAccount\\n    TransferLong, // transfer long directly to another subAccount\\n    TransferShort // transfer short directly to another subAccount\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"array-lib/=lib/array-lib/src/\",\r\n      \"cm-cash-engine/=lib/cross-margin-engine/src/settled-cash/\",\r\n      \"cm-physical-engine/=lib/cross-margin-engine/src/settled-physical/\",\r\n      \"core-cash/=lib/cross-margin-engine/lib/core-cash/\",\r\n      \"core-physical/=lib/cross-margin-engine/lib/core-physical/\",\r\n      \"cross-margin-engine/=lib/cross-margin-engine/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"grappa-test/=lib/cross-margin-engine/lib/core-cash/test/\",\r\n      \"grappa/=lib/cross-margin-engine/lib/core-cash/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"pomace-test/=lib/cross-margin-engine/lib/core-physical/test/\",\r\n      \"pomace/=lib/cross-margin-engine/lib/core-physical/src/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"src/libraries/FeeLib.sol\": {\r\n        \"FeeLib\": \"0xff9681e29b585abb82d6db0d99c80ae3accbc67e\"\r\n      },\r\n      \"src/libraries/StructureLib.sol\": {\r\n        \"StructureLib\": \"0x65d3f8fa8e598c827a29173cb38d17e08fb7f3e2\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_share\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marginEngine\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BV_BadCP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BV_BadExpiry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BV_BadFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BV_BadPPS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BV_BadRatios\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BV_BadRoundConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BV_BadSB\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FL_NPSLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OV_ActiveRound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OV_BadRound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OV_NoCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OV_NoCollateralPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POV_BadExerciseWindow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POV_CannotRequestWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POV_OptionNotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"POV_VaultExercised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SL_BadExpiryDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SOPV_BadExpiry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SOPV_BadProductId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SOPV_ExerciseWindowMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SOPV_ExpiryMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SOPV_ProductIdMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SOPV_TokenTypeMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VL_BadCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VL_BadCollateralAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VL_BadDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VL_BadFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VL_BadFeeAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VL_BadManagerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VL_BadOracleAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VL_BadOwnerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VL_BadPauserAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addressType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"origAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auction\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAuction\",\"type\":\"address\"}],\"name\":\"AuctionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"vaultFee\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"CollectedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exerciseWindow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExerciseWindow\",\"type\":\"uint256\"}],\"name\":\"ExerciseWindowSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"Exercised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"FeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goldenToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGoldenToken\",\"type\":\"uint256\"}],\"name\":\"GoldenTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auction\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowedExecutions\",\"type\":\"uint256\"}],\"name\":\"MarginAccountAccessSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newDecimals\",\"type\":\"uint8\"}],\"name\":\"PremiumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"QuickWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"RequestedWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"dayOfWeek\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"hourOfDay\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newDuration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newDayOfWeek\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newHourOfDay\",\"type\":\"uint8\"}],\"name\":\"RoundConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"}],\"name\":\"StagedAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_depositReceipts\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"unredeemedShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_returnProcessor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collaterals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exerciseWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getCollateralPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollaterals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Collateral[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getStartingBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldenToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numRounds\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_startFromRound\",\"type\":\"uint32\"}],\"name\":\"initRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_collateralRatios\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Collateral[]\",\"name\":\"_collaterals\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"dayOfWeek\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hourOfDay\",\"type\":\"uint8\"}],\"internalType\":\"struct RoundConfig\",\"name\":\"_roundConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct InitParams\",\"name\":\"_initParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_auction\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_goldenToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Collateral\",\"name\":\"_premium\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginEngine\",\"outputs\":[{\"internalType\":\"contract IMarginEngine\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"quickWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_collateralId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numShares\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_processor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"}],\"name\":\"returnOnExercise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"dayOfWeek\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hourOfDay\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowedExecutions\",\"type\":\"uint256\"}],\"name\":\"setAuctionMarginAccountAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exerciseWindow\",\"type\":\"uint256\"}],\"name\":\"setExerciseWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"setPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_max\",\"type\":\"bool\"}],\"name\":\"setRegistrarAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_dayOfWeek\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_hourOfDay\",\"type\":\"uint8\"}],\"name\":\"setRoundConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"contract IVaultShare\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stageAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"startingBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultState\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"round\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"lockedAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"lastLockedAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"totalPending\",\"type\":\"uint96\"},{\"internalType\":\"uint128\",\"name\":\"queuedWithdrawShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_options\",\"type\":\"uint256[]\"}],\"name\":\"verifyOptions\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SingleOptionPhysicalVault", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000004f793a709ff868760cc9ba88a7b6dcbe0a4ee04000000000000000000000000081bdb07aaaa64df8440b608a8259d89e3dc56d6000000000000000000000000341c281d11677795f1192bf1f7438666909841c8", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}