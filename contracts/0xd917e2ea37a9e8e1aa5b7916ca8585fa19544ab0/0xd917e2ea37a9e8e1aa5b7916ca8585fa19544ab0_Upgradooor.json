{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@rmrk-team/evm-contracts/contracts/RMRK/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../library/RMRKErrors.sol\\\";\\n\\n/**\\n * @title Ownable\\n * @author RMRK team\\n * @notice A minimal ownable smart contractf or owner and contributors.\\n * @dev This smart contract is based on \\\"openzeppelin's access/Ownable.sol\\\".\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n    mapping(address => uint256) private _contributors;\\n\\n    /**\\n     * @notice Used to anounce the transfer of ownership.\\n     * @param previousOwner Address of the account that transferred their ownership role\\n     * @param newOwner Address of the account receiving the ownership role\\n     */\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @notice Event that signifies that an address was granted contributor role or that the permission has been\\n     *  revoked.\\n     * @dev This can only be triggered by a current owner, so there is no need to include that information in the event.\\n     * @param contributor Address of the account that had contributor role status updated\\n     * @param isContributor A boolean value signifying whether the role has been granted (`true`) or revoked (`false`)\\n     */\\n    event ContributorUpdate(address indexed contributor, bool isContributor);\\n\\n    /**\\n     * @dev Reverts if called by any account other than the owner or an approved contributor.\\n     */\\n    modifier onlyOwnerOrContributor() {\\n        _onlyOwnerOrContributor();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     * @return Address of the current owner\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. Functions using the `onlyOwner` modifier will be disabled.\\n     * @dev Can only be called by the current owner.\\n     * @dev Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is\\n     *  only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new owner.\\n     * @dev Can only be called by the current owner.\\n     * @param newOwner Address of the new owner's account\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) revert RMRKNewOwnerIsZeroAddress();\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new owner.\\n     * @dev Internal function without access restriction.\\n     * @dev Emits ***OwnershipTransferred*** event.\\n     * @param newOwner Address of the new owner's account\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @notice Adds or removes a contributor to the smart contract.\\n     * @dev Can only be called by the owner.\\n     * @dev Emits ***ContributorUpdate*** event.\\n     * @param contributor Address of the contributor's account\\n     * @param grantRole A boolean value signifying whether the contributor role is being granted (`true`) or revoked\\n     *  (`false`)\\n     */\\n    function manageContributor(\\n        address contributor,\\n        bool grantRole\\n    ) external onlyOwner {\\n        if (contributor == address(0)) revert RMRKNewContributorIsZeroAddress();\\n        grantRole\\n            ? _contributors[contributor] = 1\\n            : _contributors[contributor] = 0;\\n        emit ContributorUpdate(contributor, grantRole);\\n    }\\n\\n    /**\\n     * @notice Used to check if the address is one of the contributors.\\n     * @param contributor Address of the contributor whose status we are checking\\n     * @return Boolean value indicating whether the address is a contributor or not\\n     */\\n    function isContributor(address contributor) public view returns (bool) {\\n        return _contributors[contributor] == 1;\\n    }\\n\\n    /**\\n     * @notice Used to verify that the caller is either the owner or a contributor.\\n     * @dev If the caller is not the owner or a contributor, the execution will be reverted.\\n     */\\n    function _onlyOwnerOrContributor() private view {\\n        if (owner() != _msgSender() && !isContributor(_msgSender()))\\n            revert RMRKNotOwnerOrContributor();\\n    }\\n\\n    /**\\n     * @notice Used to verify that the caller is the owner.\\n     * @dev If the caller is not the owner, the execution will be reverted.\\n     */\\n    function _onlyOwner() private view {\\n        if (owner() != _msgSender()) revert RMRKNotOwner();\\n    }\\n}\\n\"\r\n    },\r\n    \"@rmrk-team/evm-contracts/contracts/RMRK/library/RMRKErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.21;\\n\\n/// @title RMRKErrors\\n/// @author RMRK team\\n/// @notice A collection of errors used in the RMRK suite\\n/// @dev Errors are kept in a centralised file in order to provide a central point of reference and to avoid error\\n///  naming collisions due to inheritance\\n\\n/// Attempting to grant the token to 0x0 address\\nerror ERC721AddressZeroIsNotaValidOwner();\\n/// Attempting to grant approval to the current owner of the token\\nerror ERC721ApprovalToCurrentOwner();\\n/// Attempting to grant approval when not being owner or approved for all should not be permitted\\nerror ERC721ApproveCallerIsNotOwnerNorApprovedForAll();\\n/// Attempting to get approvals for a token owned by 0x0 (considered non-existent)\\nerror ERC721ApprovedQueryForNonexistentToken();\\n/// Attempting to grant approval to self\\nerror ERC721ApproveToCaller();\\n/// Attempting to use an invalid token ID\\nerror ERC721InvalidTokenId();\\n/// Attempting to mint to 0x0 address\\nerror ERC721MintToTheZeroAddress();\\n/// Attempting to manage a token without being its owner or approved by the owner\\nerror ERC721NotApprovedOrOwner();\\n/// Attempting to mint an already minted token\\nerror ERC721TokenAlreadyMinted();\\n/// Attempting to transfer the token from an address that is not the owner\\nerror ERC721TransferFromIncorrectOwner();\\n/// Attempting to safe transfer to an address that is unable to receive the token\\nerror ERC721TransferToNonReceiverImplementer();\\n/// Attempting to transfer the token to a 0x0 address\\nerror ERC721TransferToTheZeroAddress();\\n/// Attempting to grant approval of assets to their current owner\\nerror RMRKApprovalForAssetsToCurrentOwner();\\n/// Attempting to grant approval of assets without being the caller or approved for all\\nerror RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll();\\n/// Attempting to incorrectly configue a Catalog item\\nerror RMRKBadConfig();\\n/// Attempting to set the priorities with an array of length that doesn't match the length of active assets array\\nerror RMRKBadPriorityListLength();\\n/// Attempting to add an asset entry with `Part`s, without setting the `Catalog` address\\nerror RMRKCatalogRequiredForParts();\\n/// Attempting to transfer a soulbound (non-transferrable) token\\nerror RMRKCannotTransferSoulbound();\\n/// Attempting to accept a child that has already been accepted\\nerror RMRKChildAlreadyExists();\\n/// Attempting to interact with a child, using index that is higher than the number of children\\nerror RMRKChildIndexOutOfRange();\\n/// Attempting to find the index of a child token on a parent which does not own it.\\nerror RMRKChildNotFoundInParent();\\n/// Attempting to pass collaborator address array and collaborator permission array of different lengths\\nerror RMRKCollaboratorArraysNotEqualLength();\\n/// Attempting to register a collection that is already registered\\nerror RMRKCollectionAlreadyRegistered();\\n/// Attempting to manage or interact with colleciton that is not registered\\nerror RMRKCollectionNotRegistered();\\n/// Attempting to equip a `Part` with a child not approved by the Catalog\\nerror RMRKEquippableEquipNotAllowedByCatalog();\\n/// Attempting to pass an epired ECDSA deadline\\nerror RMRKExpiredDeadline();\\n/// Attempting to use ID 0, which is not supported\\n/// @dev The ID 0 in RMRK suite is reserved for empty values. Guarding against its use ensures the expected operation\\nerror RMRKIdZeroForbidden();\\n/// Attempting to interact with an asset, using index greater than number of assets\\nerror RMRKIndexOutOfRange();\\n/// Attempting to reclaim a child that can't be reclaimed\\nerror RMRKInvalidChildReclaim();\\n/// Attempting to use and invalid ECDSA signature\\nerror RMRKInvalidSignature();\\n/// Attempting to interact with an end-user account when the contract account is expected\\nerror RMRKIsNotContract();\\n/// Attempting to interact with a contract that had its operation locked\\nerror RMRKLocked();\\n/// Attempting to add a pending child after the number of pending children has reached the limit (default limit is 128)\\nerror RMRKMaxPendingChildrenReached();\\n/// Attempting to add a pending asset after the number of pending assets has reached the limit (default limit is\\n///  128)\\nerror RMRKMaxPendingAssetsReached();\\n/// Attempting to burn a total number of recursive children higher than maximum set\\n/// @param childContract Address of the collection smart contract in which the maximum number of recursive burns was reached\\n/// @param childId ID of the child token at which the maximum number of recursive burns was reached\\nerror RMRKMaxRecursiveBurnsReached(address childContract, uint256 childId);\\n/// Attempting to mint a number of tokens that would cause the total supply to be greater than maximum supply\\nerror RMRKMintOverMax();\\n/// Attempting to mint a nested token to a smart contract that doesn't support nesting\\nerror RMRKMintToNonRMRKNestableImplementer();\\n/// Attempting to mint zero tokens\\nerror RMRKMintZero();\\n/// Attempting to pass complementary arrays of different lengths\\nerror RMRKMismachedArrayLength();\\n/// Attempting to transfer a child before it is unequipped\\nerror RMRKMustUnequipFirst();\\n/// Attempting to nest a child over the nestable limit (current limit is 100 levels of nesting)\\nerror RMRKNestableTooDeep();\\n/// Attempting to nest the token to own descendant, which would create a loop and leave the looped tokens in limbo\\nerror RMRKNestableTransferToDescendant();\\n/// Attempting to nest the token to a smart contract that doesn't support nesting\\nerror RMRKNestableTransferToNonRMRKNestableImplementer();\\n/// Attempting to nest the token into itself\\nerror RMRKNestableTransferToSelf();\\n/// Attempting to interact with an asset that can not be found\\nerror RMRKNoAssetMatchingId();\\n/// Attempting to manage an asset without owning it or having been granted permission by the owner to do so\\nerror RMRKNotApprovedForAssetsOrOwner();\\n/// Attempting to interact with a token without being its owner or having been granted permission by the\\n///  owner to do so\\n/// @dev When a token is nested, only the direct owner (NFT parent) can mange it. In that case, approved addresses are\\n///  not allowed to manage it, in order to ensure the expected behaviour\\nerror RMRKNotApprovedOrDirectOwner();\\n/// Attempting to manage a collection without being the collection's collaborator\\nerror RMRKNotCollectionCollaborator();\\n/// Attemting to manage a collection without being the collection's issuer\\nerror RMRKNotCollectionIssuer();\\n/// Attempting to manage a collection without being the collection's issuer or collaborator\\nerror RMRKNotCollectionIssuerOrCollaborator();\\n/// Attempting to compose an asset wihtout having an associated Catalog\\nerror RMRKNotComposableAsset();\\n/// Attempting to unequip an item that isn't equipped\\nerror RMRKNotEquipped();\\n/// Attempting to interact with a management function without being the smart contract's owner\\nerror RMRKNotOwner();\\n/// Attempting to interact with a function without being the owner or contributor of the collection\\nerror RMRKNotOwnerOrContributor();\\n/// Attempting to manage a collection without being the specific address\\nerror RMRKNotSpecificAddress();\\n/// Attempting to manage a token without being its owner\\nerror RMRKNotTokenOwner();\\n/// Attempting to transfer the ownership to the 0x0 address\\nerror RMRKNewOwnerIsZeroAddress();\\n/// Attempting to assign a 0x0 address as a contributor\\nerror RMRKNewContributorIsZeroAddress();\\n/// Attemtping to use `Ownable` interface without implementing it\\nerror RMRKOwnableNotImplemented();\\n/// Attempting an operation requiring the token being nested, while it is not\\nerror RMRKParentIsNotNFT();\\n/// Attempting to add a `Part` with an ID that is already used\\nerror RMRKPartAlreadyExists();\\n/// Attempting to use a `Part` that doesn't exist\\nerror RMRKPartDoesNotExist();\\n/// Attempting to use a `Part` that is `Fixed` when `Slot` kind of `Part` should be used\\nerror RMRKPartIsNotSlot();\\n/// Attempting to interact with a pending child using an index greater than the size of pending array\\nerror RMRKPendingChildIndexOutOfRange();\\n/// Attempting to add an asset using an ID that has already been used\\nerror RMRKAssetAlreadyExists();\\n/// Attempting to equip an item into a slot that already has an item equipped\\nerror RMRKSlotAlreadyUsed();\\n/// Attempting to equip an item into a `Slot` that the target asset does not implement\\nerror RMRKTargetAssetCannotReceiveSlot();\\n/// Attempting to equip a child into a `Slot` and parent that the child's collection doesn't support\\nerror RMRKTokenCannotBeEquippedWithAssetIntoSlot();\\n/// Attempting to compose a NFT of a token without active assets\\nerror RMRKTokenDoesNotHaveAsset();\\n/// Attempting to determine the asset with the top priority on a token without assets\\nerror RMRKTokenHasNoAssets();\\n/// Attempting to accept or transfer a child which does not match the one at the specified index\\nerror RMRKUnexpectedChildId();\\n/// Attempting to reject all pending assets but more assets than expected are pending\\nerror RMRKUnexpectedNumberOfAssets();\\n/// Attempting to reject all pending children but children assets than expected are pending\\nerror RMRKUnexpectedNumberOfChildren();\\n/// Attempting to accept or reject an asset which does not match the one at the specified index\\nerror RMRKUnexpectedAssetId();\\n/// Attempting an operation expecting a parent to the token which is not the actual one\\nerror RMRKUnexpectedParent();\\n/// Attempting not to pass an empty array of equippable addresses when adding or setting the equippable addresses\\nerror RMRKZeroLengthIdsPassed();\\n/// Attempting to set the royalties to a value higher than 100% (10000 in basis points)\\nerror RMRKRoyaltiesTooHigh();\\n/// Attempting to do a bulk operation on a token that is not owned by the caller\\nerror RMRKCanOnlyDoBulkOperationsOnOwnedTokens();\\n/// Attempting to do a bulk operation with multiple tokens at a time\\nerror RMRKCanOnlyDoBulkOperationsWithOneTokenAtATime();\\n/// Attempting to pay with native token with a value different than expected\\nerror RMRKWrongValueSent();\\n\"\r\n    },\r\n    \"contracts/interfaces/IRMRKRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.21;\\n\\ninterface IRMRKRegistry {\\n    enum LegoCombination {\\n        None,\\n        MultiAsset,\\n        Nestable,\\n        NestableMultiAsset,\\n        Equippable,\\n        ERC721,\\n        ERC1155,\\n        Custom\\n    }\\n\\n    enum MintingType {\\n        None,\\n        RMRKPreMint,\\n        RMRKLazyMintNativeToken,\\n        RMRKLazyMintERC20,\\n        Custom\\n    }\\n\\n    struct CollectionConfig {\\n        bool usesOwnable;\\n        bool usesAccessControl;\\n        bool usesRMRKContributor;\\n        bool usesRMRKMintingUtils;\\n        bool usesRMRKLockable;\\n        bool hasStandardAssetManagement; // has addAssetEntry, addEquippableAssetEntry, addAssetToToken, etc\\n        bool hasStandardMinting; // has mint(address to, uint256 numToMint)\\n        bool hasStandardNestMinting; // has nestMint(address to, uint256 numToMint, uint256 destinationId)\\n        bool autoAcceptsFirstAsset;\\n        uint8 customLegoCombination;\\n        uint8 customMintingType;\\n        bytes32 adminRole; // Only for AccessControl users\\n    }\\n\\n    struct Collection {\\n        address collection;\\n        address verificationSponsor;\\n        uint256 verificationFeeBalance;\\n        LegoCombination legoCombination;\\n        MintingType mintingType;\\n        bool isSoulbound;\\n        bool visible;\\n        bool verified;\\n        CollectionConfig config;\\n    }\\n\\n    event CollectionAdded(\\n        address deployer,\\n        string name,\\n        string symbol,\\n        uint256 maxSupply,\\n        string collectionMetadata,\\n        LegoCombination legoCombination,\\n        MintingType mintingType,\\n        bool isSoulbound,\\n        CollectionConfig config\\n    );\\n\\n    function addCollection(\\n        address collection,\\n        address deployer,\\n        uint256 maxSupply,\\n        LegoCombination legoCombination,\\n        MintingType mintingType,\\n        bool isSoulbound,\\n        CollectionConfig memory config,\\n        string memory collectionMetadata\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRMRKWrappedEquippable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache 2.0\\n\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title RMRK Wrapped Equippable Interface\\n * @notice This is the minimal interface that the Wrapper contract needs to be able to access on the Wrapped Collections.\\n */\\ninterface IRMRKWrappedEquippable {\\n    /**\\n     * @notice Sets the payment data for individual wrap payments.\\n     * @param paymentToken The address of the ERC20 token used for payment\\n     * @param individualWrappingPrice The price of wrapping an individual token\\n     * @param beneficiary The address of the beneficiary\\n     */\\n    function setPaymentData(\\n        address paymentToken,\\n        uint256 individualWrappingPrice,\\n        address beneficiary\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRMRKWrapRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache 2.0\\n\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title RMRK Wrap Registry\\n * @notice This contract keeps track of the mapping between original and wrapped collections.\\n */\\ninterface IRMRKWrapRegistry {\\n    /**\\n     * @notice Returns the address of the wrapped collection corresponding to an original collection.\\n     * @param originalCollection The address of the original collection\\n     * @return wrappedCollection The address of the wrapped collection\\n     */\\n    function getWrappedCollection(\\n        address originalCollection\\n    ) external view returns (address wrappedCollection);\\n\\n    /**\\n     * @notice Returns the address of the original collection corresponding to a wrapped collection.\\n     * @param wrappedCollection The address of the wrapped collection\\n     * @return originalCollection The address of the original collection\\n     */\\n    function getOriginalCollection(\\n        address wrappedCollection\\n    ) external view returns (address originalCollection);\\n\\n    /**\\n     * @notice Maps an original collection to a wrapped collection.\\n     * @param original The address of the original collection\\n     * @param wrapped The address of the wrapped collection\\n     */\\n    function setOriginalAndWrappedCollection(\\n        address original,\\n        address wrapped\\n    ) external;\\n\\n    /**\\n     * @notice Removes the mapping from original to wrapped collection. Removed collections can be retrieved through getPreviousWraps method.\\n     * @param original The address of the original collection\\n     */\\n    function removeWrappedCollection(address original) external;\\n\\n    /**\\n     * @notice Returns the list of previous wraps for a collection.\\n     * @param original The address of the original collection\\n     * @return previousWraps The list of previous wraps\\n     */\\n    function getPreviousWraps(\\n        address original\\n    ) external view returns (address[] memory previousWraps);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUpgradooorDeployer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache 2.0\\n\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title RMRK ERC721 Wrapper Deployer Interface\\n * @notice This is interface is for an intermediary contract whose only purpose is to deploy Wrapped Collections.\\n * @dev This contract does not have any validation, it is kept the minimal possible to avoid breaking the size limit.\\n */\\ninterface IUpgradooorDeployer {\\n    /**\\n     * @notice Deploys a new Wrapped Collection.\\n     * @dev The basis points (bPt) are integer representation of percentage up to the second decimal space. Meaning that\\n     *  1 bPt equals 0.01% and 500 bPt equal 5%.\\n     * @param originalCollection The address of the original collection\\n     * @param maxSupply The maximum supply of the wrapped collection\\n     * @param royaltiesRecipient The address of the royalties recipient\\n     * @param royaltyPercentageBps The royalty percentage in basis points\\n     * @param collectionMetadataURI The metadata URI of the wrapped collection\\n     * @return wrappedCollection The address of the newly deployed wrapped collection\\n     */\\n    function wrapCollection(\\n        address originalCollection,\\n        uint256 maxSupply,\\n        address royaltiesRecipient,\\n        uint256 royaltyPercentageBps,\\n        string memory collectionMetadataURI\\n    ) external returns (address wrappedCollection);\\n}\\n\"\r\n    },\r\n    \"contracts/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n// import \\\"./ContextUpgradeable.sol\\\";\\n\\nimport \\\"@rmrk-team/evm-contracts/contracts/RMRK/library/RMRKErrors.sol\\\";\\n\\n/**\\n * @title OwnableUpgradeable\\n * @author RMRK team\\n * @notice A minimal upgradeable ownable smart contractf or owner and contributors.\\n * @dev This smart contract is based on \\\"openzeppelin's access/Ownable.sol\\\".\\n */\\ncontract OwnableUpgradeable is ContextUpgradeable {\\n    address private _owner;\\n    mapping(address => uint256) private _contributors;\\n\\n    /**\\n     * @notice Used to anounce the transfer of ownership.\\n     * @param previousOwner Address of the account that transferred their ownership role\\n     * @param newOwner Address of the account receiving the ownership role\\n     */\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @notice Event that signifies that an address was granted contributor role or that the permission has been\\n     *  revoked.\\n     * @dev This can only be triggered by a current owner, so there is no need to include that information in the event.\\n     * @param contributor Address of the account that had contributor role status updated\\n     * @param isContributor A boolean value signifying whether the role has been granted (`true`) or revoked (`false`)\\n     */\\n    event ContributorUpdate(address indexed contributor, bool isContributor);\\n\\n    /**\\n     * @dev Reverts if called by any account other than the owner or an approved contributor.\\n     */\\n    modifier onlyOwnerOrContributor() {\\n        _onlyOwnerOrContributor();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting the deployer as the initial owner.\\n     */\\n    function __OwnableUpgradeable_init() internal onlyInitializing {\\n        __OwnableUpgradeable_init_unchained();\\n        __Context_init();\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting the deployer as the initial owner.\\n     */\\n    function __OwnableUpgradeable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     * @return Address of the current owner\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Leaves the contract without owner. Functions using the `onlyOwner` modifier will be disabled.\\n     * @dev Can only be called by the current owner.\\n     * @dev Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is\\n     *  only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new owner.\\n     * @dev Can only be called by the current owner.\\n     * @param newOwner Address of the new owner's account\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) revert RMRKNewOwnerIsZeroAddress();\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new owner.\\n     * @dev Internal function without access restriction.\\n     * @dev Emits ***OwnershipTransferred*** event.\\n     * @param newOwner Address of the new owner's account\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @notice Adds or removes a contributor to the smart contract.\\n     * @dev Can only be called by the owner.\\n     * @dev Emits ***ContributorUpdate*** event.\\n     * @param contributor Address of the contributor's account\\n     * @param grantRole A boolean value signifying whether the contributor role is being granted (`true`) or revoked\\n     *  (`false`)\\n     */\\n    function manageContributor(\\n        address contributor,\\n        bool grantRole\\n    ) external onlyOwner {\\n        if (contributor == address(0)) revert RMRKNewContributorIsZeroAddress();\\n        grantRole\\n            ? _contributors[contributor] = 1\\n            : _contributors[contributor] = 0;\\n        emit ContributorUpdate(contributor, grantRole);\\n    }\\n\\n    /**\\n     * @notice Used to check if the address is one of the contributors.\\n     * @param contributor Address of the contributor whose status we are checking\\n     * @return Boolean value indicating whether the address is a contributor or not\\n     */\\n    function isContributor(address contributor) public view returns (bool) {\\n        return _contributors[contributor] == 1;\\n    }\\n\\n    /**\\n     * @notice Used to verify that the caller is either the owner or a contributor.\\n     * @dev If the caller is not the owner or a contributor, the execution will be reverted.\\n     */\\n    function _onlyOwnerOrContributor() private view {\\n        if (owner() != _msgSender() && !isContributor(_msgSender()))\\n            revert RMRKNotOwnerOrContributor();\\n    }\\n\\n    /**\\n     * @notice Used to verify that the caller is the owner.\\n     * @dev If the caller is not the owner, the execution will be reverted.\\n     */\\n    function _onlyOwner() private view {\\n        if (owner() != _msgSender()) revert RMRKNotOwner();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Upgradooor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Apache 2.0\\n\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@rmrk-team/evm-contracts/contracts/RMRK/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IRMRKWrappedEquippable.sol\\\";\\nimport \\\"./interfaces/IUpgradooorDeployer.sol\\\";\\nimport \\\"./interfaces/IRMRKRegistry.sol\\\";\\nimport \\\"./interfaces/IRMRKWrapRegistry.sol\\\";\\nimport \\\"./OwnableUpgradeable.sol\\\";\\n\\nerror CollectionAlreadyWrapped();\\nerror CollectionIsNotWrapped();\\nerror NotEnoughAllowance();\\nerror OnlyCollectionOwnerCanWrapOrUnwrap();\\nerror InvalidPaymentToken();\\n\\n/**\\n * @title RMRK ERC721 Wrapper\\n * @notice This contract is used to wrap ERC721 collections.\\n * @dev Only the owner of the collection can wrap it.\\n */\\ncontract Upgradooor is OwnableUpgradeable, UUPSUpgradeable {\\n    /**\\n     * @notice Emitted when a collection is wrapped.\\n     * @param originalCollection The address of the original collection\\n     * @param wrappedCollection The address of the newly deployed wrapped collection\\n     * @param prepaidForTokens Whether the collection owner prepaid for individual token wraps\\n     */\\n    event WrappedCollection(\\n        address indexed originalCollection,\\n        address indexed wrappedCollection,\\n        bool prepaidForTokens\\n    );\\n    /**\\n     * @notice Emitted when a collection is unwrapped.\\n     * @param originalCollection The address of the original collection\\n     * @param wrappedCollection The address of the abandoned wrapped collection\\n     */\\n    event UnwrappedCollection(\\n        address indexed originalCollection,\\n        address indexed wrappedCollection\\n    );\\n\\n    event ValidPaymentTokenSet(\\n        address indexed paymentToken,\\n        bool indexed valid\\n    );\\n\\n    uint8 constant CUSTOM_MINTING_TYPE_FROM_WRAPPER = 2;\\n    IUpgradooorDeployer private _deployer;\\n    IRMRKWrapRegistry private _wrapRegistry;\\n    address private _beneficiary;\\n    address private _registry;\\n    uint256 private _prepayDiscountBPS;\\n    IRMRKRegistry.CollectionConfig private _defaultCollectionConfig;\\n    address[] private _validPaymentTokensList;\\n\\n    mapping(address paymentToken => bool valid) private _validPaymentTokens;\\n    mapping(address paymentToken => uint256 collectionWrappingPrice)\\n        private _collectionWrappingPrice;\\n    mapping(address paymentToken => uint256 individualWrappingPrice)\\n        private _individualWrappingPrice;\\n\\n    modifier onlyValidPaymentToken(address paymentToken) {\\n        _checkValidPaymentToken(paymentToken);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev The basis points (bPt) are integer representation of percentage up to the second decimal space. Meaning that\\n     *  1 bPt equals 0.01% and 500 bPt equal 5%.\\n     * @param prepayDiscountBPS The discount in basis points when prepaying for individual token wraps\\n     * @param beneficiary The address of the beneficiary\\n     * @param deployer The address of the deployer contract\\n     */\\n    function initialize(\\n        uint256 prepayDiscountBPS,\\n        address beneficiary,\\n        address deployer,\\n        address registry\\n    ) public initializer {\\n        __OwnableUpgradeable_init();\\n        _prepayDiscountBPS = prepayDiscountBPS;\\n        _beneficiary = beneficiary;\\n        _deployer = IUpgradooorDeployer(deployer);\\n        _registry = registry;\\n\\n        _defaultCollectionConfig = IRMRKRegistry.CollectionConfig(\\n            true,\\n            false,\\n            true,\\n            true,\\n            true,\\n            true,\\n            false,\\n            false,\\n            false,\\n            0,\\n            CUSTOM_MINTING_TYPE_FROM_WRAPPER,\\n            0x0\\n        );\\n    }\\n\\n    // -------------- GETTERS --------------\\n\\n    /**\\n     * @notice Returns the address of the ERC20 token used for payment.\\n     * @param paymentToken The address of the ERC20 token used for payment\\n     * @return erc20TokenAddress The address of the ERC20 token used for payment\\n     */\\n    function getIsValidPaymentToken(\\n        address paymentToken\\n    ) public view returns (bool) {\\n        return _validPaymentTokens[paymentToken];\\n    }\\n\\n    /**\\n     * @notice Returns the list of valid payment tokens.\\n     * @return validPaymentTokensList The list of valid payment tokens\\n     */\\n    function getAllValidPaymentTokens() public view returns (address[] memory) {\\n        return _validPaymentTokensList;\\n    }\\n\\n    /**\\n     * @notice Returns the price of wrapping a collection.\\n     * @param paymentToken The address of the ERC20 token used for payment\\n     * @return collectionWrappingPrice The price of wrapping a collection\\n     */\\n    function getCollectionWrappingPrice(\\n        address paymentToken\\n    ) public view onlyValidPaymentToken(paymentToken) returns (uint256) {\\n        return _collectionWrappingPrice[paymentToken];\\n    }\\n\\n    /**\\n     * @notice Returns the price of wrapping an individual token.\\n     * @param paymentToken The address of the ERC20 token used for payment\\n     * @return individualWrappingPrice The price of wrapping an individual token\\n     */\\n    function getIndividualWrappingPrice(\\n        address paymentToken\\n    ) public view onlyValidPaymentToken(paymentToken) returns (uint256) {\\n        return _individualWrappingPrice[paymentToken];\\n    }\\n\\n    /**\\n     * @notice Returns the discount in basis points when prepaying for individual token wraps.\\n     * @return prepayDiscountBPS The discount in basis points when prepaying for individual token wraps\\n     */\\n    function getPrepayDiscountBPS() public view returns (uint256) {\\n        return _prepayDiscountBPS;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the beneficiary.\\n     * @return beneficiary The address of the beneficiary\\n     */\\n    function getBeneficiary() public view returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the deployer contract.\\n     * @return deployer The address of the deployer contract\\n     */\\n    function getDeployer() public view returns (address) {\\n        return address(_deployer);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the registry contract.\\n     * @return registry The address of the registry contract\\n     */\\n    function getRegistry() public view returns (address) {\\n        return _registry;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the wrap registry contract.\\n     * @return Address of the wrap registry smart contract\\n     */\\n    function getWrapRegistry() public view returns (address) {\\n        return address(_wrapRegistry);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the wrapped collection corresponding to an original collection.\\n     * @param originalCollection The address of the original collection\\n     * @return wrappedCollection The address of the wrapped collection\\n     */\\n    function getWrappedCollection(\\n        address originalCollection\\n    ) public view returns (address wrappedCollection) {\\n        return _wrapRegistry.getWrappedCollection(originalCollection);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the original collection corresponding to a wrapped collection.\\n     * @param wrappedCollection The address of the wrapped collection\\n     * @return originalCollection The address of the original collection\\n     */\\n    function getOriginalCollection(\\n        address wrappedCollection\\n    ) public view returns (address originalCollection) {\\n        return _wrapRegistry.getOriginalCollection(wrappedCollection);\\n    }\\n\\n    // -------------- ADMIN SETTERS --------------\\n\\n    /**\\n     * @notice Sets whether a payment token is valid.\\n     * @param paymentToken The address of the ERC20 token used for payment\\n     * @param valid Whether the payment token is valid\\n     */\\n    function setValidPaymentToken(\\n        address paymentToken,\\n        bool valid\\n    ) public onlyOwnerOrContributor {\\n        if (_validPaymentTokens[paymentToken] == valid) return;\\n        if (_validPaymentTokens[paymentToken]) {\\n            // Removing\\n            for (uint256 i; i < _validPaymentTokensList.length; ) {\\n                if (_validPaymentTokensList[i] == paymentToken) {\\n                    _validPaymentTokensList[i] = _validPaymentTokensList[\\n                        _validPaymentTokensList.length - 1\\n                    ];\\n                    _validPaymentTokensList.pop();\\n                    break;\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } else {\\n            // Adding\\n            _validPaymentTokensList.push(paymentToken);\\n        }\\n        _validPaymentTokens[paymentToken] = valid;\\n        emit ValidPaymentTokenSet(paymentToken, valid);\\n    }\\n\\n    /**\\n     * @notice Sets the prices of wrapping a collection and individual tokens.\\n     * @param paymentToken The address of the ERC20 token used for payment\\n     * @param collectionWrappingPrice The price of wrapping a collection\\n     * @param individualWrappingPrice The price of wrapping an individual token\\n     */\\n    function setPricesForPaymentToken(\\n        address paymentToken,\\n        uint256 collectionWrappingPrice,\\n        uint256 individualWrappingPrice\\n    ) public onlyOwnerOrContributor {\\n        setValidPaymentToken(paymentToken, true);\\n        _collectionWrappingPrice[paymentToken] = collectionWrappingPrice;\\n        _individualWrappingPrice[paymentToken] = individualWrappingPrice;\\n    }\\n\\n    /**\\n     * @notice Sets the discount in basis points when prepaying for individual token wraps.\\n     * @param prepayDiscountBPS The discount in basis points when prepaying for individual token wraps\\n     */\\n    function setPrepayDiscountBPS(\\n        uint256 prepayDiscountBPS\\n    ) public onlyOwnerOrContributor {\\n        _prepayDiscountBPS = prepayDiscountBPS;\\n    }\\n\\n    /**\\n     * @notice Sets the address of the beneficiary.\\n     * @param beneficiary The address of the beneficiary\\n     */\\n    function setBeneficiary(address beneficiary) public onlyOwner {\\n        _beneficiary = beneficiary;\\n    }\\n\\n    /**\\n     * @notice Sets the address of the deployer contract.\\n     * @param deployer The address of the deployer contract\\n     */\\n    function setDeployer(address deployer) public onlyOwnerOrContributor {\\n        _deployer = IUpgradooorDeployer(deployer);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the registry contract.\\n     * @param registry The address of the registry contract\\n     */\\n    function setRegistry(address registry) public onlyOwnerOrContributor {\\n        _registry = registry;\\n    }\\n\\n    /**\\n     * @notice Sets the address of the wrap registry contract.\\n     * @param wrapRegistry The address of the wrap registry contract\\n     */\\n    function setWrapRegistry(\\n        address wrapRegistry\\n    ) public onlyOwnerOrContributor {\\n        _wrapRegistry = IRMRKWrapRegistry(wrapRegistry);\\n    }\\n\\n    // -------------- WRAPPING --------------\\n\\n    /**\\n     * @notice Wraps a collection.\\n     * @dev The basis points (bPt) are integer representation of percentage up to the second decimal space. Meaning that\\n     *  1 bPt equals 0.01% and 500 bPt equal 5%.\\n     * @param originalCollection The address of the original collection\\n     * @param maxSupply The maximum supply of the wrapped collection\\n     * @param royaltiesRecipient The address of the royalties recipient\\n     * @param royaltyPercentageBps The royalty percentage in basis points\\n     * @param collectionMetadataURI The metadata URI of the wrapped collection\\n     * @param paymentToken The address of the ERC20 token used for payment\\n     * @param individualPrice The price of wrapping an individual token\\n     * @param collectionOwner The address of the collection owner\\n     */\\n    function adminWrapCollection(\\n        address originalCollection,\\n        uint256 maxSupply,\\n        address royaltiesRecipient,\\n        uint256 royaltyPercentageBps,\\n        string memory collectionMetadataURI,\\n        address paymentToken,\\n        uint256 individualPrice,\\n        address collectionOwner\\n    ) external onlyOwner {\\n        _wrapCollection(\\n            originalCollection,\\n            maxSupply,\\n            royaltiesRecipient,\\n            royaltyPercentageBps,\\n            collectionMetadataURI,\\n            paymentToken,\\n            individualPrice,\\n            collectionOwner\\n        );\\n    }\\n\\n    /**\\n     * @notice Wraps a collection.\\n     * @dev The basis points (bPt) are integer representation of percentage up to the second decimal space. Meaning that\\n     *  1 bPt equals 0.01% and 500 bPt equal 5%.\\n     * @param originalCollection The address of the original collection\\n     * @param maxSupply The maximum supply of the wrapped collection\\n     * @param royaltiesRecipient The address of the royalties recipient\\n     * @param royaltyPercentageBps The royalty percentage in basis points\\n     * @param collectionMetadataURI The metadata URI of the wrapped collection\\n     * @param paymentToken The address of the ERC20 token used for payment\\n     * @param prePayTokenWraps Whether to prepay for individual token wraps\\n     */\\n    function wrapCollection(\\n        address originalCollection,\\n        uint256 maxSupply,\\n        address royaltiesRecipient,\\n        uint256 royaltyPercentageBps,\\n        string memory collectionMetadataURI,\\n        address paymentToken,\\n        bool prePayTokenWraps\\n    ) external {\\n        address collectionOwner = Ownable(originalCollection).owner();\\n        if (collectionOwner != _msgSender())\\n            revert OnlyCollectionOwnerCanWrapOrUnwrap();\\n\\n        uint256 individualPrice = _chargeAndGetIndividualPrice(\\n            paymentToken,\\n            maxSupply,\\n            prePayTokenWraps\\n        );\\n\\n        _wrapCollection(\\n            originalCollection,\\n            maxSupply,\\n            royaltiesRecipient,\\n            royaltyPercentageBps,\\n            collectionMetadataURI,\\n            paymentToken,\\n            individualPrice,\\n            collectionOwner\\n        );\\n    }\\n\\n    /**\\n     * @notice Wraps a collection.\\n     * @dev The basis points (bPt) are integer representation of percentage up to the second decimal space. Meaning that\\n     *  1 bPt equals 0.01% and 500 bPt equal 5%.\\n     * @param originalCollection The address of the original collection\\n     * @param maxSupply The maximum supply of the wrapped collection\\n     * @param royaltiesRecipient The address of the royalties recipient\\n     * @param royaltyPercentageBps The royalty percentage in basis points\\n     * @param collectionMetadataURI The metadata URI of the wrapped collection\\n     * @param paymentToken The address of the ERC20 token used for payment\\n     * @param individualPrice The price of wrapping an individual token\\n     * @param collectionOwner The address of the collection owner\\n     */\\n    function _wrapCollection(\\n        address originalCollection,\\n        uint256 maxSupply,\\n        address royaltiesRecipient,\\n        uint256 royaltyPercentageBps,\\n        string memory collectionMetadataURI,\\n        address paymentToken,\\n        uint256 individualPrice,\\n        address collectionOwner\\n    ) private onlyValidPaymentToken(paymentToken) {\\n        if (getWrappedCollection(originalCollection) != address(0))\\n            revert CollectionAlreadyWrapped();\\n\\n        address wrappedCollection = _deployer.wrapCollection(\\n            originalCollection,\\n            maxSupply,\\n            royaltiesRecipient,\\n            royaltyPercentageBps,\\n            collectionMetadataURI\\n        );\\n        IRMRKWrappedEquippable(wrappedCollection).setPaymentData(\\n            paymentToken,\\n            individualPrice,\\n            _beneficiary\\n        );\\n        IRMRKRegistry(_registry).addCollection(\\n            wrappedCollection,\\n            _msgSender(),\\n            maxSupply,\\n            IRMRKRegistry.LegoCombination.Equippable,\\n            IRMRKRegistry.MintingType.Custom,\\n            false,\\n            _defaultCollectionConfig,\\n            collectionMetadataURI\\n        );\\n        Ownable(wrappedCollection).transferOwnership(collectionOwner);\\n\\n        _wrapRegistry.setOriginalAndWrappedCollection(\\n            originalCollection,\\n            wrappedCollection\\n        );\\n\\n        emit WrappedCollection(\\n            originalCollection,\\n            wrappedCollection,\\n            individualPrice == 0\\n        );\\n    }\\n\\n    /**\\n     * @notice Unwraps a collection.\\n     * @param originalCollection The address of the original collection\\n     */\\n    function unwrapCollection(address originalCollection) external {\\n        address wrapped = getWrappedCollection(originalCollection);\\n        if (wrapped == address(0)) revert CollectionIsNotWrapped();\\n\\n        address collectionOwner = Ownable(originalCollection).owner();\\n        if (collectionOwner != _msgSender())\\n            revert OnlyCollectionOwnerCanWrapOrUnwrap();\\n\\n        _wrapRegistry.removeWrappedCollection(originalCollection);\\n\\n        emit UnwrappedCollection(originalCollection, wrapped);\\n    }\\n\\n    function registerWrappedCollection(\\n        address originalCollection,\\n        address wrappedCollection,\\n        uint256 maxSupply,\\n        string memory collectionMetadataURI,\\n        bool prepaidForTokens\\n    ) external onlyOwner {\\n        IRMRKRegistry(_registry).addCollection(\\n            wrappedCollection,\\n            _msgSender(),\\n            maxSupply,\\n            IRMRKRegistry.LegoCombination.Equippable,\\n            IRMRKRegistry.MintingType.Custom,\\n            false,\\n            _defaultCollectionConfig,\\n            collectionMetadataURI\\n        );\\n\\n        _wrapRegistry.setOriginalAndWrappedCollection(\\n            originalCollection,\\n            wrappedCollection\\n        );\\n\\n        emit WrappedCollection(\\n            originalCollection,\\n            wrappedCollection,\\n            prepaidForTokens\\n        );\\n    }\\n\\n    function _chargeAndGetIndividualPrice(\\n        address paymentToken,\\n        uint256 maxSupply,\\n        bool prePayTokenWraps\\n    ) private returns (uint256) {\\n        uint256 totalPrice = _collectionWrappingPrice[paymentToken];\\n        uint256 individualPrice = _individualWrappingPrice[paymentToken];\\n        if (prePayTokenWraps) {\\n            totalPrice +=\\n                (individualPrice * maxSupply * _prepayDiscountBPS) /\\n                10000;\\n            individualPrice = 0;\\n        }\\n        _chargeWrappingFee(paymentToken, _msgSender(), totalPrice);\\n        return individualPrice;\\n    }\\n\\n    /**\\n     * @notice Charges the wrapping fee and sends it to the beneficiary.\\n     * @param chargeTo The address to charge the fee to\\n     * @param value The amount to charge\\n     */\\n    function _chargeWrappingFee(\\n        address paymentToken,\\n        address chargeTo,\\n        uint256 value\\n    ) private {\\n        if (value == 0) return;\\n        if (IERC20(paymentToken).allowance(chargeTo, address(this)) < value)\\n            revert NotEnoughAllowance();\\n        IERC20(paymentToken).transferFrom(chargeTo, _beneficiary, value);\\n    }\\n\\n    function _checkValidPaymentToken(address paymentToken) private view {\\n        if (!_validPaymentTokens[paymentToken]) revert InvalidPaymentToken();\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"CollectionAlreadyWrapped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectionIsNotWrapped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPaymentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCollectionOwnerCanWrapOrUnwrap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNewContributorIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNotOwnerOrContributor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isContributor\",\"type\":\"bool\"}],\"name\":\"ContributorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalCollection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wrappedCollection\",\"type\":\"address\"}],\"name\":\"UnwrappedCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"ValidPaymentTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalCollection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wrappedCollection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"prepaidForTokens\",\"type\":\"bool\"}],\"name\":\"WrappedCollection\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPercentageBps\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"collectionMetadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"individualPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collectionOwner\",\"type\":\"address\"}],\"name\":\"adminWrapCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllValidPaymentTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"getCollectionWrappingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"getIndividualWrappingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"getIsValidPaymentToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrappedCollection\",\"type\":\"address\"}],\"name\":\"getOriginalCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"originalCollection\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrepayDiscountBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWrapRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalCollection\",\"type\":\"address\"}],\"name\":\"getWrappedCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wrappedCollection\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prepayDiscountBPS\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"isContributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"grantRole\",\"type\":\"bool\"}],\"name\":\"manageContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalCollection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappedCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"collectionMetadataURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"prepaidForTokens\",\"type\":\"bool\"}],\"name\":\"registerWrappedCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"setDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prepayDiscountBPS\",\"type\":\"uint256\"}],\"name\":\"setPrepayDiscountBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionWrappingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualWrappingPrice\",\"type\":\"uint256\"}],\"name\":\"setPricesForPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"setValidPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapRegistry\",\"type\":\"address\"}],\"name\":\"setWrapRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalCollection\",\"type\":\"address\"}],\"name\":\"unwrapCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalCollection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"royaltiesRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPercentageBps\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"collectionMetadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"prePayTokenWraps\",\"type\":\"bool\"}],\"name\":\"wrapCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Upgradooor", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}