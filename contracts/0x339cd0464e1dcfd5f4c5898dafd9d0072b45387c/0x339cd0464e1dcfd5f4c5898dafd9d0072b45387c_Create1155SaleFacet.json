{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/facets/Create1155SaleFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport { LibAppStorage, Modifiers, CustomErrors, Sale, Tier, Partner, PaymentTokenMaxSupply} from \\\"../libraries/LibAppStorage.sol\\\";\\nimport { LibCreateSale } from \\\"contracts/libraries/LibCreateSale.sol\\\";\\n\\n/** \\n* @title Create1155SaleFacet\\n* @author Robert Gordon Palmer\\n* @dev This contract is used to create sales for ERC1155 tokens.\\n*/\\ncontract Create1155SaleFacet is Modifiers, CustomErrors {\\n\\n    /** \\n    * @notice Creates a new sale for ERC1155 tokens.\\n    * @param collectionAddress The address of the collection.\\n    * @param tiersNumbers An array of tier numbers.\\n    * @param limitPerWalletPerTier An array of limits per wallet per tier.\\n    * @param starts An array of start times for each tier.\\n    * @param ends An array of end times for each tier.\\n    * @param merkleRoots An array of merkle roots for each tier.\\n    * @param isTierPublic An array of booleans indicating if each tier is public.\\n    * @param idsAvailable An array of arrays of available IDs for each tier.\\n    * @param paymentTokens An array of payment tokens.\\n    * @param paymentTokenMaxSupplies An array of max supplies for each payment token.\\n    */\\n    function create1155Sale(\\n        address collectionAddress,\\n        uint256[] memory tiersNumbers,\\n        uint256[] memory limitPerWalletPerTier,\\n        uint256[] memory starts,\\n        uint256[] memory ends,\\n        bytes32[] memory merkleRoots,\\n        bool[] memory isTierPublic,\\n        uint256[][] memory idsAvailable,\\n        address[] memory paymentTokens,\\n        uint256[] memory paymentTokenMaxSupplies\\n    ) public onlyAdminOrOwner(msg.sender){\\n        if(tiersNumbers.length != starts.length) revert ArrayLengthsDiffer();\\n        if(tiersNumbers.length != ends.length) revert ArrayLengthsDiffer();\\n        if(tiersNumbers.length != merkleRoots.length) revert ArrayLengthsDiffer();\\n        if(tiersNumbers.length != limitPerWalletPerTier.length) revert ArrayLengthsDiffer();\\n        if(tiersNumbers.length != isTierPublic.length) revert ArrayLengthsDiffer();\\n        if(tiersNumbers.length != idsAvailable.length) revert ArrayLengthsDiffer();\\n\\n        s.totalSales++;\\n        uint256 _saleId = s.totalSales;\\n        uint256 _length = tiersNumbers.length;\\n\\n        for (uint256 i = 0; i < _length; i++) {\\n            s.saleId[_saleId].tiers.push(Tier({\\n                tierNumber: tiersNumbers[i],\\n                start: starts[i],\\n                end: ends[i],\\n                merkleRoot: merkleRoots[i],\\n                limitPerWallet: limitPerWalletPerTier[i],\\n                availableIds: idsAvailable[i],\\n                isPublic: isTierPublic[i]\\n            }));\\n            s.saleId[_saleId].collectionERCType = 1155;\\n        }\\n        LibCreateSale._setPaymentTokensMaxSupplies(_saleId, paymentTokens, paymentTokenMaxSupplies);\\n        s.saleId[_saleId].collectionAddress = collectionAddress;\\n        s.collectionSaleId[collectionAddress] = _saleId;\\n    }\\n\\n\\n    /** \\n    * @notice Creates a new ERC1155 collection contract and new sale for ERC1155 tokens.\\n    * @param _baseURI The base URI for the collection.\\n    * @param _name The name of the collection.\\n    * @param _symbol The symbol of the collection.\\n    * @param tiersNumbers An array of tier numbers.\\n    * @param limitPerWalletPerTier An array of limits per wallet per tier.\\n    * @param starts An array of start times for each tier.\\n    * @param ends An array of end times for each tier.\\n    * @param merkleRoots An array of merkle roots for each tier.\\n    * @param isTierPublic An array of booleans indicating if each tier is public.\\n    * @param idsAvailable An array of arrays of available IDs for each tier.\\n    * @param collectionIds An array of tokenIds that will be included in the sale.\\n    * @param collectionIdsMaxSupplies An array of max supply values for the associated tokenIds.\\n    * @param paymentTokens An array of payment tokens.\\n    * @param paymentTokenMaxSupplies An array of max supplies for each payment token.\\n    */\\n    function createSaleAndCollection1155(\\n        string memory _baseURI,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] memory tiersNumbers,\\n        uint256[] memory limitPerWalletPerTier,\\n        uint256[] memory starts,\\n        uint256[] memory ends,\\n        bytes32[] memory merkleRoots,\\n        bool[] memory isTierPublic,\\n        uint256[][] memory idsAvailable,\\n        uint256[] memory collectionIds,\\n        uint256[] memory collectionIdsMaxSupplies,\\n        address[] memory paymentTokens,\\n        uint256[] memory paymentTokenMaxSupplies\\n    ) public onlyAdminOrOwner(msg.sender){\\n        if(tiersNumbers.length != starts.length) revert ArrayLengthsDiffer();\\n        if(tiersNumbers.length != ends.length) revert ArrayLengthsDiffer();\\n        if(tiersNumbers.length != merkleRoots.length) revert ArrayLengthsDiffer();\\n        if(tiersNumbers.length != limitPerWalletPerTier.length) revert ArrayLengthsDiffer();\\n        if(tiersNumbers.length != isTierPublic.length) revert ArrayLengthsDiffer();\\n        if(tiersNumbers.length != idsAvailable.length) revert ArrayLengthsDiffer();\\n\\n        s.totalSales++;\\n        uint256 _saleId = s.totalSales;\\n        uint256 _length = tiersNumbers.length;\\n\\n        for (uint256 i = 0; i < _length; i++) {\\n            s.saleId[_saleId].tiers.push(Tier({\\n                tierNumber: tiersNumbers[i],\\n                start: starts[i],\\n                end: ends[i],\\n                merkleRoot: merkleRoots[i],\\n                limitPerWallet: limitPerWalletPerTier[i],\\n                availableIds: idsAvailable[i],\\n                isPublic: isTierPublic[i]\\n            }));\\n            s.saleId[_saleId].collectionERCType = 1155;\\n        }\\n\\n        LibCreateSale._setPaymentTokensMaxSupplies(_saleId, paymentTokens, paymentTokenMaxSupplies);\\n\\n        address _collectionAddress = LibCreateSale._create1155Collection(\\n            _baseURI, \\n            _name, \\n            _symbol, \\n            collectionIds, \\n            collectionIdsMaxSupplies, \\n            msg.sender\\n        );\\n        s.saleId[_saleId].collectionAddress = _collectionAddress;\\n        s.collectionSaleId[_collectionAddress] = _saleId;\\n    }\\n\\n    /**\\n    * @notice Retrieves the token prices for a given sale and payment token.\\n    * @param _saleId The ID of the sale for which the token prices are retrieved.\\n    * @param _paymentToken The address of the payment token for which the prices are retrieved.\\n    */\\n    function getTokenPrices(\\n        uint256 _saleId, \\n        address _paymentToken\\n    ) public view returns(uint256[] memory, uint256[] memory){\\n        return LibCreateSale._getTokenPrices(_saleId, _paymentToken);\\n    }\\n\\n    /**\\n    * @notice Retireves the saleId associated with the given collection address.\\n    * @param _collectionAddress The address of the collection for which the saleId is retrieved.\\n    */\\n    function getCollectionSaleId(address _collectionAddress) public view returns (uint256 _saleId){\\n        return LibCreateSale._getSaleIdForCollection(_collectionAddress);\\n    }\\n\\n    /**\\n    * @notice Assigns the prices per tokenId for a given sale and payment tokens.\\n    * @param _saleId The ID of the sale for which the prices are assigned.\\n    * @param _paymentTokens An array of addresses representing the payment tokens for which the prices are assigned.\\n    * @param _prices A nested array of uint256 values representing the prices per tokenId for each payment token.\\n    */\\n    function assignPricePerTokenId(\\n        uint256 _saleId,\\n        address[] memory _paymentTokens,\\n        uint256[][] memory _prices\\n    ) public onlyAdminOrOwner(msg.sender){\\n        LibCreateSale._assignPricePerTokenId(_saleId, _paymentTokens, _prices);\\n    }\\n\\n    /**\\n    * @notice Retrieves the information of a specific sale.\\n    * @param _saleId The ID of the sale for which the information is retrieved.\\n    * @return A struct of type `Sale` containing the information of the specified sale.\\n    */\\n    function saleInfo(uint256 _saleId) external view returns (Sale memory){\\n        return LibCreateSale.getSaleInfo(_saleId);\\n    }\\n\\n    /**\\n    * @notice Retrieves the information of a specific sale along with the token prices and IDs for a given payment token.\\n    * @param _saleId The ID of the sale for which the information is retrieved.\\n    * @param _paymentToken The address of the payment token for which prices and IDs are retrieved.\\n    * @return _saleInfo A struct of type `Sale` containing the information of the specified sale.\\n    * @return _prices An array of uint256 values representing the token prices for the specified sale and payment token.\\n    * @return _ids An array of uint256 values representing the token IDs available for the specified sale and payment token.\\n    */\\n    function saleInfoAndPrices(\\n        uint256 _saleId, \\n        address _paymentToken\\n    ) external view returns (Sale memory _saleInfo, uint256[] memory _prices, uint256[] memory _ids){\\n        _saleInfo = LibCreateSale.getSaleInfo(_saleId);\\n        (_prices, _ids) = LibCreateSale._getTokenPrices(_saleId, _paymentToken);\\n\\n        return (_saleInfo, _prices, _ids);\\n    }\\n\\n    /**\\n    * @notice Retrieves the available token IDs for a specific sale and tier number.\\n    * @param _saleId The ID of the sale for which the available token IDs are retrieved.\\n    * @param _tierNumber The tier number for which the available token IDs are retrieved.\\n    * @return An array of uint256 values representing the available token IDs for the specified sale and tier number.\\n    */\\n    function availableIdsByTier(uint256 _saleId, uint256 _tierNumber) external view returns (uint256[] memory){\\n        return LibCreateSale.getAvailableIdsByTier(_saleId, _tierNumber);\\n    }\\n\\n    /**\\n    * @notice Retrieves the available token IDs for a specific sale.\\n    * @param _saleId The ID of the sale for which the available token IDs are retrieved.\\n    * @return An array of uint256 values representing the available token IDs for the specified sale.\\n    */\\n    function availableIdsBySale(uint256 _saleId) external view returns (uint256[] memory){\\n        return LibCreateSale.getAvailableIdsBySale(_saleId);\\n    }\\n\\n    /**\\n    * @notice Retrieves the information of a specific tier within a sale.\\n    * @param _saleId The ID of the sale for which the tier information is retrieved.\\n    * @param _tierNumber The tier number for which the information is retrieved.\\n    * @return A struct of type `Tier` containing the information of the specified tier within the sale.\\n    */\\n    function tierInfo(uint256 _saleId, uint256 _tierNumber) external view returns (Tier memory){\\n        return LibCreateSale.getTierInfo(_saleId, _tierNumber);\\n    }\\n\\n    /**\\n    * @notice Assigns partner addresses and their corresponding percentages to a specified sale.\\n    * @param _partnerAddresses An array of addresses representing the partner addresses to be assigned.\\n    * @param _partnerPercentages An array of uint256 values representing the corresponding percentage allocations for each partner.\\n    * @param _saleId The ID of the sale to which the partners are being assigned.\\n    */\\n    function assignPartners(\\n        address[] memory _partnerAddresses, \\n        uint256[] memory _partnerPercentages, \\n        uint256 _saleId\\n    ) external onlyAdminOrOwner(msg.sender) {\\n        if(_partnerAddresses.length != _partnerPercentages.length) revert ArrayLengthsDiffer();\\n        uint256 length = _partnerAddresses.length;\\n        LibCreateSale._assignPartner(_partnerAddresses, _partnerPercentages, _saleId);\\n    }\\n\\n    /**\\n    * @notice Removes all partner addresses and their corresponding percentages from a specified sale.\\n    * @param _saleId The ID of the sale from which partners are being removed.\\n    */\\n    function removePartners(uint256 _saleId) external onlyAdminOrOwner(msg.sender){\\n        LibCreateSale._removePartners(_saleId);\\n    }\\n\\n    /**\\n    * @notice Retrieves the partner addresses and their corresponding percentages for a specified sale.\\n    * @param _saleId The ID of the sale for which the partner information is retrieved.\\n    * @return An array of structs of type `Partner` containing the partner addresses and their corresponding percentages for the specified sale.\\n    */\\n    function getSalePartners(uint256 _saleId) external view onlyAdminOrOwner(msg.sender) returns(Partner[] memory) {\\n        return LibCreateSale._getSalePartners(_saleId);\\n    }\\n\\n    /**\\n    * @notice Retrieves the payment goal information for a specific sale and payment token.\\n    * @param _saleId The ID of the sale for which the payment goal information is retrieved.\\n    * @param _paymentTokenAddress The address of the payment token for which the information is retrieved.\\n    * @return A struct of type `PaymentTokenMaxSupply` containing the payment goal information for the specified sale and payment token.\\n    */\\n    function getPaymentGoalInfo(uint256 _saleId, address _paymentTokenAddress) external view returns(PaymentTokenMaxSupply memory){\\n        return LibCreateSale._getPaymentGoalInfo(_saleId, _paymentTokenAddress);\\n    }\\n\\n    /**\\n    * @notice Sets the limit per wallet for a specific tier within a sale.\\n    * @param _saleId The ID of the sale for which the tier limit per wallet is being set.\\n    * @param _tierNumber The tier number for which the limit per wallet is being set.\\n    * @param _updatedLimit The updated limit per wallet to be set for the specified tier.\\n    */\\n    function setTierLimitPerWallet(uint256 _saleId, uint256 _tierNumber, uint256 _updatedLimit) external onlyAdminOrOwner(msg.sender){\\n        LibCreateSale._setTierLimitPerWallet(_saleId, _tierNumber, _updatedLimit);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibAppStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\nimport { LibMeta } from \\\"contracts/libraries/LibMeta.sol\\\";\\n\\n/**\\n * @title Tier\\n * @dev This struct defines the data structure for a tier in a sale.\\n */\\nstruct Tier {\\n    uint256 tierNumber; // Tier number\\n    uint256 start; // Start timestamp of the tier\\n    uint256 end; // End timestamp of the tier\\n    bytes32 merkleRoot; // Merkle root for the tier\\n    uint256 limitPerWallet; // Limit the wallet can purcahse for the tier\\n    uint256[] availableIds; // Array of available IDs for the tier\\n    bool isPublic; // Flag indicating if the tier is public\\n}\\n\\n/**\\n * @title Partner\\n * @dev This struct defines the data structure for a partner.\\n */\\nstruct Partner {\\n    address partnerAddress; // The partners address; Funds will be sent to this address.\\n    uint256 sharePercentage;// The partners share of each sale; Paid each time a user mints.\\n}\\n\\n/**\\n * @title Sale\\n * @dev This struct defines the data structure for a sale.\\n */\\nstruct Sale {\\n    Tier[] tiers; // Array of tiers in the sale\\n    PaymentTokenMaxSupply[] paymentTokensMaxSupplies; // Array of payment tokens and their maximum accepted supplies\\n    address collectionAddress; // Address of the collection\\n    uint256 collectionERCType; // ERC type of the collection\\n    Partner[] partners; // Partners for the sale\\n}\\n\\n/**\\n * @title PaymentTokenMaxSupply\\n * @dev This struct defines the data structure for a payment token and its maximum supply.\\n */\\nstruct PaymentTokenMaxSupply {\\n    address paymentToken;// Address of the payment token\\n    uint256 maxAcceptedAmount;// Maximum accepted amount for the payment token\\n    uint256 totalSpent;// Total spent amount for the payment token\\n}\\n\\n/**\\n * @title AppStorage\\n * @dev This struct defines the data structure for storing the state of the application.\\n * @dev Always add new members needed to the end of this struct when upgrading or adding a facet.\\n */\\nstruct AppStorage {\\n\\n    bool initialized; // Flag indicating if the contract has been initialized\\n\\n    address owner; // Address of the contract owner\\n    address multisig; // Address of the multisig wallet\\n    address treasuryWallet; // Address of the treasury wallet\\n\\n    bool paused; // Flag indicating if the contract is paused\\n\\n    // SaleID => Sale struct containing all Tier strcut info\\n    mapping(uint256 => Sale) saleId;\\n\\n    // Mapping of address to admin status\\n    mapping(address => bool) isAdmin;\\n\\n    uint256[] emptyArr; // Empty array - used for assigning `availableIds` to a 721 tier\\n\\n    uint256 totalSales; // Total number of sales\\n\\n    // User Address => saleId => total minted amount\\n    mapping(address => mapping(uint256 => uint256)) userMintedAmount;\\n\\n    // Payment token address => SaleId => price\\n    mapping(address => mapping(uint256 => uint256)) acceptedTokenPrice;\\n\\n    mapping(uint256 saleId => mapping(address paymentToken => mapping(uint256 tokenId => uint256 price))) tokenIdPrice;\\n\\n    // Mapping of address to collection sale ID\\n    mapping(address => uint256) collectionSaleId;\\n\\n    // The address for Warm wallet delegation contract\\n    address warmWalletContractAddress;\\n\\n    address permit2ContractAddress;\\n}\\n\\nlibrary LibAppStorage {\\n\\n  function diamondStorage() \\n    internal \\n    pure \\n    returns (AppStorage storage ds) \\n  {    \\n    assembly {\\n      ds.slot := 0\\n    }\\n  }\\n}\\n\\n/**\\n * @title Modifiers\\n * @dev This contract contains modifiers used in the facets.\\n */\\ncontract Modifiers {\\n    AppStorage internal s;\\n\\n    /**\\n     * @dev Modifier to restrict access to only the admin or owner.\\n     * @param _address The address to check.\\n     * Requirements:\\n     * - The caller must be an admin or owner.\\n     */\\n    modifier onlyAdminOrOwner(address _address) {\\n        //AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(\\n            s.isAdmin[_address] || _address == s.owner,\\n            \\\"This address is not allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict access to only the multisig wallet.\\n     * @param _address The address to check.\\n     * Requirements:\\n     * - The caller must be the multisig wallet.\\n     */\\n    modifier onlyMultiSig(address _address) {\\n        //AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(_address == s.multisig, \\\"Not Multisig wallet\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict access when the contract is not paused.\\n     * Requirements:\\n     * - The contract must not be paused.\\n     */\\n    modifier onlyUnpaused() {\\n        //AppStorage storage s = LibAppStorage.diamondStorage();\\n        require(!s.paused, \\\"Sale Stopped Currently\\\");\\n        _;\\n    }\\n}\\n\\ncontract CustomErrors {\\n    error TotalSupplyGreaterThanMaxSupply();\\n    error TierNumberIncorrect();\\n    error ArrayLengthsDiffer();\\n    error TierLengthTooShort();\\n    error ClaimPeriodTooShort();\\n    error PartnerAlreadyExists();\\n    error PartnerNotFound();\\n    error InvalidPartnerWallet();\\n    error InvalidPartnerSharePct();\\n    error PartnerActive();\\n    error PartnerDeactivated();\\n    error InvalidProof();\\n    error TierPeriodHasntStarted();\\n    error TierPeriodHasEnded();\\n    error CurrentlyNotClaimPeriod();\\n    error MintLimitReached();\\n    error MaxSupplyReached();\\n    error AlreadyInitialized();\\n    error MsgSenderIsNotOwner();\\n    error IncorrectAddress();\\n    error BaseURINotSet();\\n    error TokenNotAcceptedAsPayment();\\n    error InsufficientBalance();\\n    error TokenIsSoulbound();\\n    error NoConfirmedIds();\\n    error ERCTypeIncorrect();\\n    error IncorrectHotWallet();\\n    error WarmLinkExpired();\\n    error DesiredIdNotAllowed();\\n    error PriceCannotBeZero();\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibCreateSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport { \\n    LibAppStorage, \\n    AppStorage, \\n    CustomErrors, \\n    Sale, \\n    Tier, \\n    PaymentTokenMaxSupply,\\n    Partner\\n} from \\\"../libraries/LibAppStorage.sol\\\";\\nimport { Launchpad721 } from \\\"contracts/Launchpad721.sol\\\";\\nimport { Launchpad1155 } from \\\"contracts/Launchpad1155.sol\\\";\\n\\n/**\\n@title LibCreateSale\\n@author Robert Gordon Palmer\\n@dev Library for creating and managing sales. \\n*/ \\nlibrary LibCreateSale {\\n\\n    /**\\n    * @dev Retrieves the sale information for a given sale ID.\\n    * @param _saleId The ID of the sale.\\n    * @return sale_ The Sale struct containing the sale information.\\n    */\\n    function getSaleInfo(uint256 _saleId) internal view returns (Sale memory sale_) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        sale_ = s.saleId[_saleId];\\n    }\\n\\n    /**\\n    * @dev Retrieves the sale ID associated with a collection address.\\n    * @param _collectionAddress The address of the collection.\\n    * @return _saleId The ID of the sale associated with the collection.\\n    */\\n    function _getSaleIdForCollection(address _collectionAddress) internal view returns (uint256 _saleId){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        _saleId = s.collectionSaleId[_collectionAddress];\\n    }\\n\\n    /**\\n    * @dev Sets the maximum accepted amounts for payment tokens in a sale.\\n    * @param _saleId The ID of the sale.\\n    * @param _paymentTokens The array of payment token addresses.\\n    * @param _maxAcceptedAmounts The array of maximum accepted amounts for each payment token.\\n    */\\n    function _setPaymentTokensMaxSupplies(\\n        uint256 _saleId,\\n        address[] memory _paymentTokens, \\n        uint256[] memory _maxAcceptedAmounts\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        if(_paymentTokens.length != _maxAcceptedAmounts.length) revert CustomErrors.ArrayLengthsDiffer();\\n\\n        uint256 _length = _paymentTokens.length;\\n\\n        for(uint256 i = 0; i < _length; i++){\\n            s.saleId[_saleId].paymentTokensMaxSupplies.push(PaymentTokenMaxSupply({\\n                paymentToken: _paymentTokens[i],\\n                maxAcceptedAmount: _maxAcceptedAmounts[i],\\n                totalSpent: 0\\n            }));\\n        }\\n    }\\n\\n    /**\\n    * @dev Retrieves the prices for tokens in a sale for a specific payment token.\\n    * @param _saleId The ID of the sale.\\n    * @param _paymentToken The address of the payment token.\\n    * @return prices The array of token prices.\\n    * @return availableIds The array of available token IDs.\\n    */\\n    function _getTokenPrices(\\n        uint256 _saleId, \\n        address _paymentToken\\n    ) internal view returns(uint256[] memory, uint256[] memory){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        uint256[] memory _ids = getAvailableIdsBySale(_saleId);\\n        uint256 length = _ids.length;\\n        uint256[] memory prices = new uint256[](length);\\n\\n        for(uint256 i = 0; i < length; i++){\\n            prices[i] = s.tokenIdPrice[_saleId][_paymentToken][_ids[i]];\\n        }\\n\\n        return (prices, getAvailableIdsBySale(_saleId));\\n    }\\n\\n    function _get721Prices(\\n        uint256 _saleId,\\n        address _paymentToken\\n    ) internal view returns(uint256[] memory){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        uint256[] memory price = new uint256[](1);\\n        price[0] = s.acceptedTokenPrice[_paymentToken][_saleId];\\n\\n        return price;\\n    }\\n\\n    /**\\n    * @dev Retrieves the tier information for a given sale ID and tier number.\\n    * @param _saleId The ID of the sale.\\n    * @param _tierNumber The number of the tier.\\n    * @return tier_ The Tier struct containing the tier information.\\n    */\\n    function getTierInfo(uint256 _saleId, uint256 _tierNumber) internal view returns (Tier memory){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        return s.saleId[_saleId].tiers[_tierNumber - 1];\\n    }\\n\\n    function getAvailableIdsByTier(uint256 _saleId, uint256 _tierNumber) internal view returns (uint256[] memory){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        if(s.saleId[_saleId].collectionERCType == 721) revert CustomErrors.ERCTypeIncorrect();\\n\\n        // This is _tierNumber - 1 because when pushing the Tier struct, tier 1 goes into slot 0\\n        return s.saleId[_saleId].tiers[_tierNumber - 1].availableIds;\\n    }\\n\\n    /**\\n    * @dev Retrieves the total number of elements (token IDs) in a sale.\\n    * @param _saleId The ID of the sale.\\n    * @return totalElements The total number of elements in the sale.\\n    */\\n    function getTotalElements(uint256 _saleId) internal view returns (uint256 totalElements){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        uint256 _length = s.saleId[_saleId].tiers.length;\\n        for(uint256 i = 0; i < _length; i++){\\n            totalElements += s.saleId[_saleId].tiers[i].availableIds.length;\\n        }\\n\\n        return totalElements;\\n    }\\n\\n    /**\\n     * @dev Removes duplicate elements from an array.\\n     * @param array The array to remove duplicates from.\\n     * @return resultArray The array with duplicate elements removed.\\n     */\\n    function _removeDuplicates(uint[] memory array) internal pure returns (uint[] memory) {\\n        uint[] memory uniqueArray = new uint[](array.length);\\n        uint uniqueCount = 0;\\n\\n        for (uint i = 0; i < array.length; i++) {\\n            bool isDuplicate = false;\\n            for (uint j = 0; j < uniqueCount; j++) {\\n                if (array[i] == uniqueArray[j]) {\\n                    isDuplicate = true;\\n                    break;\\n                }\\n            }\\n            if (!isDuplicate) {\\n                uniqueArray[uniqueCount] = array[i];\\n                uniqueCount++;\\n            }\\n        }\\n\\n        uint[] memory resultArray = new uint[](uniqueCount);\\n        for (uint i = 0; i < uniqueCount; i++) {\\n            resultArray[i] = uniqueArray[i];\\n        }\\n\\n        return resultArray;\\n    }\\n\\n    /**\\n     * @dev Retrieves the available token IDs for a given sale ID.\\n     * @param _saleId The ID of the sale.\\n     * @return _ids The array of available token IDs.\\n     */\\n    function getAvailableIdsBySale(uint256 _saleId) internal view returns (uint256[] memory _ids){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        if(s.saleId[_saleId].collectionERCType == 721) revert CustomErrors.ERCTypeIncorrect();\\n\\n        uint256 _length = s.saleId[_saleId].tiers.length;\\n        uint256 totalElements = getTotalElements(_saleId);\\n\\n        _ids = new uint256[](totalElements);\\n        uint256 index = 0;\\n        for(uint256 i = 0; i < _length; i++){\\n            for(uint256 j = 0; j < s.saleId[_saleId].tiers[i].availableIds.length; j++){\\n                if(_ids[index] != s.saleId[_saleId].tiers[i].availableIds[j]){\\n                    _ids[index] = s.saleId[_saleId].tiers[i].availableIds[j];\\n                }\\n                index += 1;\\n            }\\n        }\\n        _ids = _removeDuplicates(_ids);\\n        return _ids;\\n    }\\n\\n    /**\\n     * @dev Assigns the price per token ID for a given sale ID and payment tokens.\\n     * @param _saleId The ID of the sale.\\n     * @param _paymentTokens The array of payment token addresses.\\n     * @param _prices The array of arrays of prices per token ID.\\n     */\\n    function _assignPricePerTokenId(\\n        uint256 _saleId,\\n        address[] memory _paymentTokens,\\n        uint256[][] memory _prices\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        uint256[] memory _ids = getAvailableIdsBySale(_saleId);\\n\\n        \\n        if(_prices.length != _paymentTokens.length) revert CustomErrors.ArrayLengthsDiffer();\\n\\n        uint256 _iLength = _paymentTokens.length;\\n        uint256 _jLength = _ids.length;\\n\\n        for(uint256 i = 0; i < _iLength; i++){\\n            if(_prices[i].length != _ids.length) revert CustomErrors.ArrayLengthsDiffer();\\n            for(uint256 j = 0; j < _jLength; j++){\\n                if(_prices[i][j] == 0) revert CustomErrors.PriceCannotBeZero();\\n                s.tokenIdPrice[_saleId][_paymentTokens[i]][_ids[j]] = _prices[i][j];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Assigns the price per token for a given sale ID and payment tokens (721).\\n     * @param _saleId The ID of the sale.\\n     * @param _paymentTokens The array of payment token addresses.\\n     * @param _prices The array of prices per token ID.\\n     */\\n    function _assignPricePerToken721(\\n        uint256 _saleId,\\n        address[] memory _paymentTokens,\\n        uint256[] memory _prices\\n    ) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        if(_prices.length != _paymentTokens.length) revert CustomErrors.ArrayLengthsDiffer();\\n\\n        uint256 _length = _prices.length;\\n        for(uint256 i = 0; i < _length; i++){\\n            if(_prices[i] == 0) revert CustomErrors.PriceCannotBeZero();\\n            s.acceptedTokenPrice[_paymentTokens[i]][_saleId] = _prices[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates a new ERC1155 collection.\\n     * @param _baseURI The base URI for the collection.\\n     * @param _name The name of the collection.\\n     * @param _symbol The symbol of the collection.\\n     * @param _tokenIds The array of token IDs.\\n     * @param _maxSupplys The array of maximum supplies for each token ID.\\n     * @param _owner The address of the owner.\\n     * @return The address of the newly created collection.\\n     */\\n    function _create1155Collection(\\n        string memory _baseURI,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _maxSupplys,\\n        address _owner\\n    ) internal returns (address) {\\n        Launchpad1155 collection = new Launchpad1155();\\n        collection._erc1155Initializer(_baseURI, _name, _symbol);\\n        collection.setTokenIdMaxSupply(_tokenIds, _maxSupplys);\\n        collection.transferOwnership(_owner);\\n        return address(collection);\\n    }\\n\\n    /**\\n     * @dev Creates a new ERC721 collection.\\n     * @param _baseURI The base URI for the collection.\\n     * @param _name The name of the collection.\\n     * @param _symbol The symbol of the collection.\\n     * @param _maxSupply The maximum supply for the collection.\\n     * @param _owner The address of the owner.\\n     * @return The address of the newly created collection.\\n     */\\n    function _create721Collection(\\n        string memory _baseURI,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _maxSupply,\\n        address _owner\\n    ) internal returns (address) {\\n        Launchpad721 collection = new Launchpad721();\\n        collection._erc721Initializer(_baseURI, _name, _symbol, _maxSupply);\\n        collection.transferOwnership(_owner);\\n        return address(collection);\\n    }\\n\\n    /**\\n    * @notice Internal function to assign partners for a specific sale.\\n    * @param _partnerAddresses An array of partner addresses.\\n    * @param _partnerPercentages An array of partner share percentages.\\n    * @param _saleId The ID of the sale.\\n    */\\n    function _assignPartner(\\n        address[] memory _partnerAddresses, \\n        uint256[] memory _partnerPercentages, \\n        uint256 _saleId\\n    ) internal {\\n        if(_partnerAddresses.length != _partnerPercentages.length) revert CustomErrors.ArrayLengthsDiffer();\\n\\n        uint256 length = _partnerAddresses.length;\\n\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        for(uint256 i = 0; i < length; i++){\\n            s.saleId[_saleId].partners.push(Partner({\\n                partnerAddress: _partnerAddresses[i],\\n                sharePercentage: _partnerPercentages[i]\\n            }));\\n        }\\n    }\\n\\n    /**\\n    * @notice Internal function to remove partners from a specific sale.\\n    * @param _saleId The ID of the sale.\\n    */\\n    function _removePartners(uint256 _saleId) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        uint256 length = s.saleId[_saleId].partners.length;\\n\\n        for (uint256 i = 0; i < length; i++){\\n            delete s.saleId[_saleId].partners[i];\\n        }\\n    }\\n\\n    /**\\n    * @notice Internal function to retrieve the partners associated with a specific sale.\\n    * @param _saleId The ID of the sale.\\n    * @return An array of Partner structures representing the partners associated with the sale.\\n    */\\n    function _getSalePartners(uint256 _saleId) internal view returns(Partner[] memory) {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n        return s.saleId[_saleId].partners;\\n    }\\n\\n    /**\\n    * @notice Internal function to retrieve the payment goal information for a specific payment token in a sale.\\n    * @param _saleId The ID of the sale.\\n    * @param _paymentTokenAddress The address of the payment token.\\n    * @return A PaymentTokenMaxSupply structure representing the payment goal information for the specified payment token.\\n    */\\n    function _getPaymentGoalInfo(uint256 _saleId, address _paymentTokenAddress) internal view returns(PaymentTokenMaxSupply memory){\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        uint256 _paymentTokenIndex;\\n\\n        for(uint256 i = 0; i < s.saleId[_saleId].paymentTokensMaxSupplies.length; i++){\\n            if(s.saleId[_saleId].paymentTokensMaxSupplies[i].paymentToken == _paymentTokenAddress){\\n                _paymentTokenIndex = i;\\n                break;\\n            }\\n        }\\n\\n        return s.saleId[_saleId].paymentTokensMaxSupplies[_paymentTokenIndex];\\n    }\\n\\n    /**\\n    * @notice Internal function to set the limit per wallet for a specific tier in a sale.\\n    * @param _saleId The ID of the sale.\\n    * @param _tierNumber The tier number.\\n    * @param _updatedLimit The updated limit per wallet.\\n    */\\n    function _setTierLimitPerWallet(uint256 _saleId, uint256 _tierNumber, uint256 _updatedLimit) internal {\\n        AppStorage storage s = LibAppStorage.diamondStorage();\\n\\n        s.saleId[_saleId].tiers[_tierNumber - 1].limitPerWallet = _updatedLimit;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibMeta.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nlibrary LibMeta {\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(bytes(\\\"EIP712Domain(string name,string version,uint256 salt,address verifyingContract)\\\"));\\n\\n    function domainSeparator(string memory name, string memory version) internal view returns (bytes32 domainSeparator_) {\\n        domainSeparator_ = keccak256(\\n            abi.encode(EIP712_DOMAIN_TYPEHASH, keccak256(bytes(name)), keccak256(bytes(version)), getChainID(), address(this))\\n        );\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function msgSender() internal view returns (address sender_) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender_ := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n            }\\n        } else {\\n            sender_ = msg.sender;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/Launchpad721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {ForjCustomErrors} from \\\"contracts/ForjCustomErrors.sol\\\";\\n\\n/**\\n * @title Launchpad721\\n * @author Robert Gordon Palmer\\n * @dev A contract for managing an ERC721 token collection for a launchpad.\\n */\\ncontract Launchpad721 is ERC721, Ownable, ForjCustomErrors{\\n\\n    using Strings for uint256;\\n\\n    bool public erc721Initialized;\\n    uint256 public totalSupply;\\n    uint256 public totalMinted;\\n    string public baseURI;\\n    string public _name;\\n    string public _symbol;\\n\\n    string public provenanceHash;\\n    string public HIDDEN_URI; \\n    bool public revealed;\\n\\n    mapping(address => bool) public isAdmin;\\n\\n    /**\\n     * @dev Modifier to allow only the admin or the owner to perform certain actions.\\n     * @param _address The address to check.\\n     */\\n    modifier onlyAdminOrOwner(address _address) {\\n        require(\\n            isAdmin[_address] || _address == owner(),\\n            \\\"This address is not allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() ERC721(\\\"\\\", \\\"\\\") Ownable(msg.sender){}\\n\\n    /**\\n     * @dev Initialize the ERC721 contract.\\n     * @param _hiddenURI The base URI for token metadata.\\n     * @param _name_ The name of the token.\\n     * @param _symbol_ The symbol of the token.\\n     * @param _totalSupply The total supply of tokens.\\n     */\\n    function _erc721Initializer(\\n        string memory _hiddenURI,\\n        string memory _name_,\\n        string memory _symbol_,\\n        uint256 _totalSupply\\n    ) public onlyAdminOrOwner(msg.sender) {\\n        if(erc721Initialized) revert AlreadyInitialized();\\n        if(_totalSupply == 0) revert SupplyCannotBeZero();\\n\\n        HIDDEN_URI = _hiddenURI;\\n        _name = _name_;\\n        _symbol = _symbol_;\\n        totalSupply = _totalSupply;\\n\\n        erc721Initialized = true;\\n    }\\n\\n    /**\\n     * @dev Set the admin status of an address.\\n     * @param _admin The address to set as admin.\\n     * @param _isAdmin The admin status to set.\\n     */\\n    function setAdmin(address _admin, bool _isAdmin) public onlyAdminOrOwner(msg.sender) {\\n        isAdmin[_admin] = _isAdmin;\\n    }\\n\\n    /**\\n     * @dev Mint a new token.\\n     * @param to The address to mint the token for.\\n     */\\n    function mint(address to) public onlyAdminOrOwner(msg.sender){\\n        if(totalMinted + 1 > totalSupply) revert MaxSupplyReached();\\n        totalMinted += 1;\\n        _safeMint(to, totalMinted);\\n    }\\n\\n    /**\\n     * @dev Set the base URI for token metadata.\\n     * @param _baseURI The new base URI.\\n     */\\n    function setBaseURI(string memory _baseURI) public onlyAdminOrOwner(msg.sender) {\\n        baseURI = _baseURI;\\n    }\\n\\n    /**\\n     * @dev Get the token URI for a given token ID.\\n     * @param tokenId The ID of the token.\\n     * @return The token URI.\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        if(revealed) {\\n            return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n        } else {\\n            return HIDDEN_URI;\\n        }\\n    }\\n\\n    /**\\n     * @dev Commit the provenance hash.\\n     * @param _provanceHash The provenance hash to commit.\\n     */\\n    function commit(string memory _provanceHash) external onlyAdminOrOwner(msg.sender) {\\n        if(revealed) revert AlreadyRevealed();\\n        provenanceHash = _provanceHash;\\n    }\\n\\n    /**\\n     * @dev Reveal the collection by setting the base URI.\\n     * @param _newBaseURI The new base URI to reveal the collection.\\n     */\\n    function reveal(string memory _newBaseURI)\\n        external\\n        onlyAdminOrOwner(msg.sender)\\n    {\\n        if(revealed) revert AlreadyRevealed();\\n        baseURI = _newBaseURI;\\n        revealed = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Launchpad1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {ERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {ForjCustomErrors} from \\\"contracts/ForjCustomErrors.sol\\\";\\n\\n/**\\n * @title Launchpad1155\\n * @author Robert Gordon Palmer\\n * @dev A contract that implements ERC1155 token functionality with additional features for a launchpad.\\n */\\ncontract Launchpad1155 is ERC1155, Ownable, ForjCustomErrors {\\n\\n    using Strings for uint256;\\n\\n    string public name;\\n    string public symbol;\\n    string public baseURI;\\n    bool public erc1155Initialized;\\n\\n    event TokenBurnBatch(uint256[] indexed _tokenIds, uint256[] indexed _amounts, address indexed _user);\\n    event TokenBurn(uint256 indexed _tokenId, uint256 indexed _amount, address indexed _user);\\n    event BatchMint(address indexed user, uint256[] indexed _ids, uint256[] indexed _amounts);\\n\\n    mapping(uint256 => Supply) public supplyPerId;\\n    mapping(address => bool) public isAdmin;\\n\\n    /**\\n     * @dev Modifier to restrict access to only administrators or the contract owner.\\n     * @param _address The address to check.\\n     */\\n    modifier onlyAdminOrOwner(address _address) {\\n        require(\\n            isAdmin[_address] || _address == owner(),\\n            \\\"This address is not allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    struct Supply {\\n        uint256 max;\\n        uint256 total;\\n    }\\n\\n    constructor() ERC1155(\\\"\\\") Ownable(msg.sender){}\\n\\n    /**\\n     * @dev Initializes the ERC1155 contract with the specified base URI, name, and symbol.\\n     * @param _baseURI The base URI for token metadata.\\n     * @param _name The name of the token.\\n     * @param _symbol The symbol of the token.\\n     */\\n    function _erc1155Initializer(\\n        string memory _baseURI,\\n        string memory _name,\\n        string memory _symbol\\n    ) public onlyAdminOrOwner(msg.sender) {\\n        if(erc1155Initialized) revert AlreadyInitialized();\\n\\n        baseURI = _baseURI;\\n        name = _name;\\n        symbol = _symbol;\\n\\n        erc1155Initialized = true;\\n    }\\n\\n    /**\\n     * @dev Sets the administrator status for the specified address.\\n     * @param _admin The address to set as an administrator.\\n     * @param _isAdmin The administrator status to set.\\n     */\\n    function setAdmin(address _admin, bool _isAdmin) public onlyAdminOrOwner(msg.sender) {\\n        isAdmin[_admin] = _isAdmin;\\n    }\\n\\n    /**\\n     * @dev Retrieves the maximum and total supply for the specified token ID.\\n     * @param _id The ID of the token.\\n     * @return The maximum supply and the total supply.\\n     */\\n    function getSupplyPerId(uint256 _id) public view returns(uint256, uint256){\\n        return (supplyPerId[_id].max, supplyPerId[_id].total);\\n    }\\n\\n    /**\\n     * @dev Sets the name of the token.\\n     * @param _name The new name of the token.\\n     */\\n    function setName(string memory _name) public onlyAdminOrOwner(msg.sender){\\n        name = _name;\\n    }\\n\\n    /**\\n     * @dev Sets the symbol of the token.\\n     * @param _symbol The new symbol of the token.\\n     */\\n    function setSymbol(string memory _symbol) public onlyAdminOrOwner(msg.sender){\\n        symbol = _symbol;\\n    }\\n\\n    /**\\n     * @dev Sets the maximum supply for multiple token IDs.\\n     * @param _tokenIds The IDs of the tokens.\\n     * @param _maxSupplys The maximum supplies for the tokens.\\n     */\\n    function setTokenIdMaxSupply(\\n        uint256[] calldata _tokenIds, \\n        uint256[] calldata _maxSupplys\\n    ) public onlyAdminOrOwner(msg.sender) {\\n\\n        if(_tokenIds.length != _maxSupplys.length) revert ArrayLengthsDiffer();\\n\\n        uint256 length = _tokenIds.length;\\n\\n        for(uint256 i = 0; i < length; i++){\\n            if (supplyPerId[_tokenIds[i]].total > _maxSupplys[i]) revert TotalSupplyGreaterThanMaxSupply();\\n            supplyPerId[_tokenIds[i]].max = _maxSupplys[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the base URI for token URIs\\n     * @param _baseURI The base URI to set\\n     */\\n    function setBaseURI(string memory _baseURI) public onlyAdminOrOwner(msg.sender) {\\n        baseURI = _baseURI;\\n    }\\n\\n    /**\\n     * @dev Burns a batch of tokens\\n     * @param from The address from which tokens are burned\\n     * @param ids The array of token IDs to burn\\n     * @param amounts The array of token amounts to burn\\n     */\\n    function burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) public {\\n        if(from != msg.sender) revert MsgSenderIsNotOwner();\\n\\n        _burnBatch(from, ids, amounts);\\n\\n        emit TokenBurnBatch(ids, amounts, from);\\n    }\\n\\n    /**\\n     * @dev Burns a single token\\n     * @param from The address from which the token is burned\\n     * @param id The ID of the token to burn\\n     * @param amount The amount of the token to burn\\n     */\\n    function burn(address from, uint256 id, uint256 amount) public {\\n        if(from != msg.sender) revert MsgSenderIsNotOwner();\\n\\n        _burn(from, id, amount);\\n\\n        emit TokenBurn(id, amount, from);\\n    }\\n\\n    /**\\n     * @dev Mints a batch of tokens\\n     * @param to The address to which tokens are minted\\n     * @param ids The array of token IDs to mint\\n     * @param amounts The array of token amounts to mint\\n     * @param data Additional data to pass to the receiving contract\\n     */\\n    function batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external onlyAdminOrOwner(msg.sender) {\\n\\n        if(ids.length != amounts.length) revert ArrayLengthsDiffer();\\n\\n        uint256 length = ids.length;\\n        \\n        for(uint256 i; i < length; i++){\\n            if(\\n                supplyPerId[ids[i]].total + amounts[i] > supplyPerId[ids[i]].max\\n            ) revert TotalSupplyGreaterThanMaxSupply();\\n            supplyPerId[ids[i]].total += amounts[i];\\n        }\\n        super._mintBatch(to, ids, amounts, data);\\n\\n        emit BatchMint(to, ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Mints a single token\\n     * @param to The address to which the token is minted\\n     * @param id The ID of the token to mint\\n     * @param amount The amount of the token to mint\\n     * @param data Additional data to pass to the receiving contract\\n     */\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external onlyAdminOrOwner(msg.sender) {\\n        if(supplyPerId[id].total + amount > supplyPerId[id].max) revert TotalSupplyGreaterThanMaxSupply();\\n        supplyPerId[id].total += amount;\\n        super._mint(to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev Sets the approval status for an operator\\n     * @param operator The address of the operator\\n     * @param approved The approval status to set\\n     */\\n    function setApprovalForAll(\\n        address operator, \\n        bool approved\\n    ) public override virtual {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    /**\\n     * @dev Safely transfers a batch of tokens from one address to another\\n     * @param from The address from which tokens are transferred\\n     * @param to The address to which tokens are transferred\\n     * @param tokenIds The array of token IDs to transfer\\n     * @param amounts The array of token amounts to transfer\\n     * @param data Additional data to pass to the receiving contract\\n     */\\n    function safeBatchTransferFrom(\\n        address from, \\n        address to, \\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public override virtual {\\n        super.safeBatchTransferFrom(from, to, tokenIds, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers a single token fromaddress from, \\n     * @param to The address to which the token is transferred\\n     * @param tokenId The ID of the token to transfer\\n     * @param amount The amount of the token to transfer\\n     * @param data Additional data to pass to the receiving contract\\n     */\\n    function safeTransferFrom(\\n        address from, \\n        address to, \\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes memory data\\n    ) public override virtual {\\n        super.safeTransferFrom(from, to, tokenId, amount, data);\\n    }\\n\\n    /**\\n     * @dev Retrieves the URI for a given token ID\\n     * @param tokenId The ID of the token\\n     * @return The URI string for the token ID\\n     */\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        return string(abi.encodePacked(baseURI, tokenId.toString()));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ForjCustomErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ncontract ForjCustomErrors {\\n    error TotalSupplyGreaterThanMaxSupply();\\n    error TierNumberIncorrect();\\n    error ArrayLengthsDiffer();\\n    error TierLengthTooShort();\\n    error ClaimPeriodTooShort();\\n    error PartnerAlreadyExists();\\n    error PartnerNotFound();\\n    error InvalidPartnerWallet();\\n    error InvalidPartnerSharePct();\\n    error PartnerActive();\\n    error PartnerDeactivated();\\n    error InvalidProof();\\n    error TierPeriodHasntStarted();\\n    error TierPeriodHasEnded();\\n    error CurrentlyNotClaimPeriod();\\n    error MintLimitReached();\\n    error MaxSupplyReached();\\n    error AlreadyInitialized();\\n    error MsgSenderIsNotOwner();\\n    error IncorrectAddress();\\n    error BaseURINotSet();\\n    error TokenNotAcceptedAsPayment();\\n    error InsufficientBalance();\\n    error TokenIsSoulbound();\\n    error NoConfirmedIds();\\n    error AlreadyRevealed();\\n    error SupplyCannotBeZero();\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"./IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = _balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    _balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Arrays.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthsDiffer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseURINotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimPeriodTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurrentlyNotClaimPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DesiredIdNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERCTypeIncorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectHotWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPartnerSharePct\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPartnerWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MsgSenderIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoConfirmedIds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PartnerActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PartnerAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PartnerDeactivated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PartnerNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TierLengthTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TierNumberIncorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TierPeriodHasEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TierPeriodHasntStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIsSoulbound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotAcceptedAsPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSupplyGreaterThanMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WarmLinkExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_partnerAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_partnerPercentages\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"assignPartners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_paymentTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_prices\",\"type\":\"uint256[][]\"}],\"name\":\"assignPricePerTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"availableIdsBySale\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierNumber\",\"type\":\"uint256\"}],\"name\":\"availableIdsByTier\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tiersNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"limitPerWalletPerTier\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"starts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ends\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"isTierPublic\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"idsAvailable\",\"type\":\"uint256[][]\"},{\"internalType\":\"address[]\",\"name\":\"paymentTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paymentTokenMaxSupplies\",\"type\":\"uint256[]\"}],\"name\":\"create1155Sale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"tiersNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"limitPerWalletPerTier\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"starts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ends\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"isTierPublic\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"idsAvailable\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"collectionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collectionIdsMaxSupplies\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"paymentTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"paymentTokenMaxSupplies\",\"type\":\"uint256[]\"}],\"name\":\"createSaleAndCollection1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collectionAddress\",\"type\":\"address\"}],\"name\":\"getCollectionSaleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentTokenAddress\",\"type\":\"address\"}],\"name\":\"getPaymentGoalInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAcceptedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"internalType\":\"struct PaymentTokenMaxSupply\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"getSalePartners\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"partnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharePercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct Partner[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"getTokenPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"removePartners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"saleInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tierNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"limitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"availableIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"internalType\":\"struct Tier[]\",\"name\":\"tiers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAcceptedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"internalType\":\"struct PaymentTokenMaxSupply[]\",\"name\":\"paymentTokensMaxSupplies\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionERCType\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"partnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharePercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct Partner[]\",\"name\":\"partners\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Sale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"saleInfoAndPrices\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tierNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"limitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"availableIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"internalType\":\"struct Tier[]\",\"name\":\"tiers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAcceptedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"}],\"internalType\":\"struct PaymentTokenMaxSupply[]\",\"name\":\"paymentTokensMaxSupplies\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectionERCType\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"partnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharePercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct Partner[]\",\"name\":\"partners\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Sale\",\"name\":\"_saleInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_updatedLimit\",\"type\":\"uint256\"}],\"name\":\"setTierLimitPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tierNumber\",\"type\":\"uint256\"}],\"name\":\"tierInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tierNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"limitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"availableIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"internalType\":\"struct Tier\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Create1155SaleFacet", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}