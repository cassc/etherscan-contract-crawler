{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"cse\": true,\r\n        \"deduplicate\": true,\r\n        \"inliner\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": true,\r\n        \"peephole\": true,\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"optimizerSteps\": \"u\",\r\n          \"stackAllocation\": true\r\n        }\r\n      },\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport { DCSProduct, DCSVault } from \\\"./cega-strategies/dcs/DCSStructs.sol\\\";\\nimport { IOracleEntry } from \\\"./oracle-entry/interfaces/IOracleEntry.sol\\\";\\n\\nuint32 constant DCS_STRATEGY_ID = 1;\\n\\nstruct DepositQueue {\\n    uint128 queuedDepositsTotalAmount;\\n    uint128 processedIndex;\\n    mapping(address => uint128) amounts;\\n    address[] depositors;\\n}\\n\\nstruct Withdrawer {\\n    address account;\\n    uint32 nextProductId;\\n}\\n\\nstruct ProductMetadata {\\n    string name;\\n    string tradeWinnerNftImage;\\n}\\n\\nstruct WithdrawalQueue {\\n    uint128 queuedWithdrawalSharesAmount;\\n    uint128 processedIndex;\\n    mapping(address => mapping(uint32 => uint256)) amounts;\\n    Withdrawer[] withdrawers;\\n    mapping(address => bool) withdrawingWithProxy;\\n}\\n\\nstruct CegaGlobalStorage {\\n    // Global information\\n    uint32 strategyIdCounter;\\n    uint32 productIdCounter;\\n    uint32[] strategyIds;\\n    mapping(uint32 => uint32) strategyOfProduct;\\n    mapping(uint32 => ProductMetadata) productMetadata;\\n    mapping(address => Vault) vaults;\\n    // DCS information\\n    mapping(uint32 => DCSProduct) dcsProducts;\\n    mapping(uint32 => DepositQueue) dcsDepositQueues;\\n    mapping(address => DCSVault) dcsVaults;\\n    mapping(address => WithdrawalQueue) dcsWithdrawalQueues;\\n    // vaultAddress => (timestamp => price)\\n    mapping(address => mapping(uint40 => uint128)) oraclePriceOverride;\\n}\\n\\nstruct Vault {\\n    uint128 totalAssets;\\n    uint64 auctionWinnerTokenId;\\n    uint16 yieldFeeBps;\\n    uint16 managementFeeBps;\\n    uint32 productId;\\n    address auctionWinner;\\n    uint40 tradeStartDate;\\n    VaultStatus vaultStatus;\\n    IOracleEntry.DataSource dataSource;\\n    bool isInDispute;\\n}\\n\\nenum VaultStatus {\\n    DepositsClosed,\\n    DepositsOpen,\\n    NotTraded,\\n    Traded,\\n    TradeExpired,\\n    FeesCollected,\\n    WithdrawalQueueProcessed,\\n    Zombie\\n}\\n\\nstruct MMNFTMetadata {\\n    address vaultAddress;\\n    uint40 tradeStartDate;\\n    uint40 tradeEndDate;\\n    uint16 aprBps;\\n    uint128 notional;\\n    uint128 initialSpotPrice;\\n    uint128 strikePrice;\\n}\\n\"\r\n    },\r\n    \"contracts/cega-strategies/dcs/DCSStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nenum DCSOptionType {\\n    BuyLow,\\n    SellHigh\\n}\\n\\nenum SettlementStatus {\\n    NotAuctioned,\\n    Auctioned,\\n    InitialPremiumPaid,\\n    AwaitingSettlement,\\n    Settled,\\n    Defaulted\\n}\\n\\nstruct DCSProductCreationParams {\\n    uint128 maxUnderlyingAmountLimit;\\n    uint128 minDepositAmount;\\n    uint128 minWithdrawalAmount;\\n    address quoteAssetAddress;\\n    address baseAssetAddress;\\n    DCSOptionType dcsOptionType;\\n    uint8 daysToStartLateFees;\\n    uint8 daysToStartAuctionDefault;\\n    uint8 daysToStartSettlementDefault;\\n    uint16 lateFeeBps;\\n    uint16 strikeBarrierBps;\\n    uint40 tenorInSeconds;\\n    uint8 disputePeriodInHours;\\n    string name;\\n    string tradeWinnerNftImage;\\n}\\n\\nstruct DCSProduct {\\n    uint128 maxUnderlyingAmountLimit;\\n    uint128 minDepositAmount;\\n    uint128 minWithdrawalAmount;\\n    uint128 sumVaultUnderlyingAmounts; //revisit later\\n    address quoteAssetAddress; // should be immutable\\n    uint40 tenorInSeconds;\\n    uint16 lateFeeBps;\\n    uint8 daysToStartLateFees;\\n    address baseAssetAddress; // should be immutable\\n    uint16 strikeBarrierBps;\\n    uint8 daysToStartAuctionDefault;\\n    uint8 daysToStartSettlementDefault;\\n    uint8 disputePeriodInHours;\\n    DCSOptionType dcsOptionType;\\n    bool isDepositQueueOpen;\\n    address[] vaults;\\n}\\n\\nstruct DCSVault {\\n    uint128 initialSpotPrice;\\n    uint128 strikePrice;\\n    uint128 totalYield;\\n    uint16 aprBps;\\n    SettlementStatus settlementStatus;\\n    bool isPayoffInDepositAsset;\\n}\\n\"\r\n    },\r\n    \"contracts/cega-strategies/dcs/interfaces/IDCSBulkActionsEntry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport { Withdrawer, VaultStatus } from \\\"../../../Structs.sol\\\";\\nimport {\\n    DCSProductCreationParams,\\n    DCSProduct,\\n    SettlementStatus\\n} from \\\"../DCSStructs.sol\\\";\\nimport {\\n    IOracleEntry\\n} from \\\"../../../oracle-entry/interfaces/IOracleEntry.sol\\\";\\n\\ninterface IDCSBulkActionsEntry {\\n    // FUNCTIONS\\n\\n    function dcsBulkStartTrades(\\n        address[] calldata vaultAddresses\\n    ) external payable;\\n\\n    function dcsBulkOpenVaultDeposits(\\n        address[] calldata vaultAddresses\\n    ) external;\\n\\n    function dcsBulkProcessDepositQueues(\\n        address[] calldata vaultAddresses,\\n        uint256 maxProcessCount\\n    ) external;\\n\\n    function dcsBulkProcessWithdrawalQueues(\\n        address[] calldata vaultAddresses,\\n        uint256 maxProcessCount\\n    ) external;\\n\\n    function dcsBulkRolloverVaults(address[] calldata vaultAddresses) external;\\n\\n    function dcsBulkCheckTradesExpiry(\\n        address[] calldata vaultAddresses\\n    ) external;\\n\\n    function dcsBulkCheckAuctionDefault(\\n        address[] calldata vaultAddresses\\n    ) external;\\n\\n    function dcsBulkCheckSettlementDefault(\\n        address[] calldata vaultAddresses\\n    ) external;\\n\\n    function dcsBulkSettleVaults(\\n        address[] calldata vaultAddresses\\n    ) external payable;\\n\\n    function dcsBulkCollectFees(address[] calldata vaultAddresses) external;\\n}\\n\"\r\n    },\r\n    \"contracts/cega-strategies/dcs/interfaces/IDCSConfigurationEntry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\ninterface IDCSConfigurationEntry {\\n    // FUNCTIONS\\n\\n    function dcsSetLateFeeBps(uint16 lateFeeBps, uint32 productId) external;\\n\\n    function dcsSetMinDepositAmount(\\n        uint128 minDepositAmount,\\n        uint32 productId\\n    ) external;\\n\\n    function dcsSetMinWithdrawalAmount(\\n        uint128 minWithdrawalAmount,\\n        uint32 productId\\n    ) external;\\n\\n    function dcsSetIsDepositQueueOpen(\\n        bool isDepositQueueOpen,\\n        uint32 productId\\n    ) external;\\n\\n    function dcsSetDaysToStartLateFees(\\n        uint32 productId,\\n        uint8 daysToStartLateFees\\n    ) external;\\n\\n    function dcsSetDaysToStartAuctionDefault(\\n        uint32 productId,\\n        uint8 daysToStartAuctionDefault\\n    ) external;\\n\\n    function dcsSetDaysToStartSettlementDefault(\\n        uint32 productId,\\n        uint8 daysToStartSettlementDefault\\n    ) external;\\n\\n    function dcsSetMaxUnderlyingAmount(\\n        uint128 maxUnderlyingAmountLimit,\\n        uint32 productId\\n    ) external;\\n\\n    function dcsSetManagementFee(address vaultAddress, uint16 value) external;\\n\\n    function dcsSetYieldFee(address vaultAddress, uint16 value) external;\\n\\n    function dcsSetDisputePeriodInHours(\\n        uint32 productId,\\n        uint8 disputePeriodInHours\\n    ) external;\\n\\n    function setProductName(uint32 productId, string memory name) external;\\n\\n    function setTradeWinnerNftImage(\\n        uint32 productId,\\n        string memory imageUrl\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/cega-strategies/dcs/interfaces/IDCSEntry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport { VaultStatus } from \\\"../../../Structs.sol\\\";\\nimport { SettlementStatus } from \\\"../DCSStructs.sol\\\";\\nimport { IDCSProductEntry } from \\\"./IDCSProductEntry.sol\\\";\\nimport { IDCSVaultEntry } from \\\"./IDCSVaultEntry.sol\\\";\\nimport { IDCSConfigurationEntry } from \\\"./IDCSConfigurationEntry.sol\\\";\\nimport { IDCSBulkActionsEntry } from \\\"./IDCSBulkActionsEntry.sol\\\";\\nimport {\\n    IProductViewEntry\\n} from \\\"../../../common/interfaces/IProductViewEntry.sol\\\";\\nimport {\\n    IVaultViewEntry\\n} from \\\"../../../common/interfaces/IVaultViewEntry.sol\\\";\\n\\ninterface IDCSEntry is\\n    IDCSProductEntry,\\n    IDCSVaultEntry,\\n    IDCSConfigurationEntry,\\n    IDCSBulkActionsEntry,\\n    IProductViewEntry,\\n    IVaultViewEntry\\n{\\n    // EVENTS\\n\\n    event DCSProductCreated(uint32 indexed productId);\\n\\n    event DepositQueued(\\n        uint32 indexed productId,\\n        address sender,\\n        address receiver,\\n        uint128 amount\\n    );\\n\\n    event DepositProcessed(\\n        address indexed vaultAddress,\\n        address receiver,\\n        uint128 amount\\n    );\\n\\n    event WithdrawalQueued(\\n        address indexed vaultAddress,\\n        uint256 sharesAmount,\\n        address owner,\\n        uint32 nextProductId,\\n        bool withProxy\\n    );\\n\\n    event WithdrawalProcessed(\\n        address indexed vaultAddress,\\n        uint256 sharesAmount,\\n        address owner,\\n        uint32 nextProductId\\n    );\\n\\n    event VaultStatusUpdated(\\n        address indexed vaultAddress,\\n        VaultStatus vaultStatus\\n    );\\n\\n    event DCSSettlementStatusUpdated(\\n        address indexed vaultAddress,\\n        SettlementStatus settlementStatus\\n    );\\n\\n    event DCSVaultFeesCollected(\\n        address indexed vaultAddress,\\n        uint128 totalFees,\\n        uint128 managementFee,\\n        uint128 yieldFee\\n    );\\n\\n    event VaultCreated(\\n        uint32 indexed productId,\\n        address indexed vaultAddress,\\n        string _tokenSymbol,\\n        string _tokenName\\n    );\\n\\n    event DCSAuctionEnded(\\n        address indexed vaultAddress,\\n        address indexed auctionWinner,\\n        uint40 tradeStartDate,\\n        uint16 aprBps,\\n        uint128 initialSpotPrice,\\n        uint128 strikePrice\\n    );\\n\\n    event DCSTradeStarted(\\n        address indexed vaultAddress,\\n        address auctionWinner,\\n        uint128 notionalAmount,\\n        uint128 yieldAmount\\n    );\\n\\n    event DCSVaultSettled(\\n        address indexed vaultAddress,\\n        address settler,\\n        uint128 depositedAmount,\\n        uint128 withdrawnAmount\\n    );\\n\\n    event DCSVaultRolledOver(address indexed vaultAddress);\\n\\n    event DCSIsPayoffInDepositAssetUpdated(\\n        address indexed vaultAddress,\\n        bool isPayoffInDepositAsset\\n    );\\n\\n    event DCSLateFeeBpsUpdated(uint32 indexed productId, uint16 lateFeeBps);\\n\\n    event DCSMinDepositAmountUpdated(\\n        uint32 indexed productId,\\n        uint128 minDepositAmount\\n    );\\n\\n    event DCSMinWithdrawalAmountUpdated(\\n        uint32 indexed productId,\\n        uint128 minWithdrawalAmount\\n    );\\n\\n    event DCSIsDepositQueueOpenUpdated(\\n        uint32 indexed productId,\\n        bool isDepositQueueOpen\\n    );\\n\\n    event DCSMaxUnderlyingAmountLimitUpdated(\\n        uint32 indexed productId,\\n        uint128 maxUnderlyingAmountLimit\\n    );\\n\\n    event DCSManagementFeeUpdated(address indexed vaultAddress, uint16 value);\\n\\n    event DCSYieldFeeUpdated(address indexed vaultAddress, uint16 value);\\n\\n    event DCSDisputeSubmitted(address indexed vaultAddress);\\n\\n    event DCSDisputeProcessed(\\n        address indexed vaultAddress,\\n        bool isDisputeAccepted,\\n        uint40 timestamp,\\n        uint128 newPrice\\n    );\\n\\n    event DCSDisputePeriodInHoursUpdated(\\n        uint32 indexed productId,\\n        uint8 disputePeriodInHours\\n    );\\n\\n    event DCSDaysToStartLateFeesUpdated(\\n        uint32 indexed productId,\\n        uint8 daysToStartLateFees\\n    );\\n\\n    event DCSDaysToStartAuctionDefaultUpdated(\\n        uint32 indexed productId,\\n        uint8 daysToStartAuctionDefault\\n    );\\n\\n    event DCSDaysToStartSettlementDefaultUpdated(\\n        uint32 indexed productId,\\n        uint8 daysToStartSettlementDefault\\n    );\\n\\n    event ProductNameUpdated(uint32 indexed productId, string name);\\n\\n    event TradeWinnerNftImageUpdated(uint32 indexed productId, string imageUrl);\\n}\\n\"\r\n    },\r\n    \"contracts/cega-strategies/dcs/interfaces/IDCSProductEntry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport { Withdrawer, VaultStatus } from \\\"../../../Structs.sol\\\";\\nimport {\\n    DCSProductCreationParams,\\n    DCSProduct,\\n    SettlementStatus\\n} from \\\"../DCSStructs.sol\\\";\\nimport {\\n    IOracleEntry\\n} from \\\"../../../oracle-entry/interfaces/IOracleEntry.sol\\\";\\n\\ninterface IDCSProductEntry {\\n    // FUNCTIONS\\n\\n    function dcsGetProduct(\\n        uint32 productId\\n    ) external view returns (DCSProduct memory);\\n\\n    function dcsGetProductDepositAsset(\\n        uint32 productId\\n    ) external view returns (address);\\n\\n    function dcsGetDepositQueue(\\n        uint32 productId\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory depositors,\\n            uint128[] memory amounts,\\n            uint128 totalAmount\\n        );\\n\\n    function dcsGetWithdrawalQueue(\\n        address vaultAddress\\n    )\\n        external\\n        view\\n        returns (\\n            Withdrawer[] memory withdrawers,\\n            uint256[] memory amounts,\\n            bool[] memory withProxy,\\n            uint256 totalAmount\\n        );\\n\\n    function dcsIsWithdrawalPossible(\\n        address vaultAddress\\n    ) external view returns (bool);\\n\\n    function dcsCalculateVaultFinalPayoff(\\n        address vaultAddress\\n    ) external view returns (uint128);\\n\\n    function dcsCreateProduct(\\n        DCSProductCreationParams calldata creationParams\\n    ) external returns (uint32);\\n\\n    function dcsAddToDepositQueue(\\n        uint32 productId,\\n        uint128 amount,\\n        address receiver\\n    ) external payable;\\n\\n    function dcsProcessDepositQueue(\\n        address vault,\\n        uint256 maxProcessCount\\n    ) external;\\n\\n    function dcsAddToWithdrawalQueue(\\n        address vault,\\n        uint128 sharesAmount,\\n        uint32 nextProductId\\n    ) external;\\n\\n    function dcsAddToWithdrawalQueueWithProxy(\\n        address vaultAddress,\\n        uint128 sharesAmount\\n    ) external;\\n\\n    function dcsProcessWithdrawalQueue(\\n        address vault,\\n        uint256 maxProcessCount\\n    ) external;\\n\\n    function dcsCheckTradeExpiry(address vaultAddress) external;\\n\\n    function dcsCheckSettlementDefault(address vaultAddress) external;\\n\\n    function dcsCollectVaultFees(address vaultAddress) external;\\n\\n    function dcsSubmitDispute(address vaultAddress) external;\\n\\n    function dcsProcessTradeDispute(\\n        address vaultAddress,\\n        uint128 newPrice\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/cega-strategies/dcs/interfaces/IDCSVaultEntry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport { VaultStatus, Vault } from \\\"../../../Structs.sol\\\";\\nimport { SettlementStatus, DCSVault } from \\\"../DCSStructs.sol\\\";\\nimport {\\n    IOracleEntry\\n} from \\\"../../../oracle-entry/interfaces/IOracleEntry.sol\\\";\\n\\ninterface IDCSVaultEntry {\\n    // FUNCTIONS\\n\\n    function dcsGetVault(\\n        address vaultAddress\\n    ) external view returns (DCSVault memory);\\n\\n    function dcsCalculateLateFee(\\n        address vaultAddress\\n    ) external view returns (uint128);\\n\\n    function dcsGetCouponPayment(\\n        address vaultAddress\\n    ) external view returns (uint128);\\n\\n    function dcsGetVaultSettlementAsset(\\n        address vaultAddress\\n    ) external view returns (address);\\n\\n    function openVaultDeposits(address vaultAddress) external;\\n\\n    function setVaultStatus(\\n        address vaultAddress,\\n        VaultStatus _vaultStatus\\n    ) external;\\n\\n    function dcsCreateVault(\\n        uint32 productId,\\n        string memory _tokenName,\\n        string memory _tokenSymbol\\n    ) external returns (address vaultAddress);\\n\\n    function dcsEndAuction(\\n        address vaultAddress,\\n        address _auctionWinner,\\n        uint40 _tradeStartDate,\\n        uint16 _aprBps,\\n        IOracleEntry.DataSource dataSource\\n    ) external;\\n\\n    function dcsStartTrade(address vaultAddress) external payable;\\n\\n    function dcsSettleVault(address vaultAddress) external payable;\\n\\n    function dcsRolloverVault(address vaultAddress) external;\\n\\n    function dcsSetSettlementStatus(\\n        address vaultAddress,\\n        SettlementStatus _settlementStatus\\n    ) external;\\n\\n    function dcsSetIsPayoffInDepositAsset(\\n        address vaultAddress,\\n        bool newState\\n    ) external;\\n\\n    function dcsCheckAuctionDefault(address vaultAddress) external;\\n\\n    function overrideOraclePrice(\\n        address vaultAddress,\\n        uint40 timestamp,\\n        uint128 newPrice\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/IProductViewEntry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\nimport { ProductMetadata } from \\\"../../Structs.sol\\\";\\n\\npragma solidity ^0.8.17;\\n\\ninterface IProductViewEntry {\\n    function getStrategyOfProduct(\\n        uint32 productId\\n    ) external view returns (uint32);\\n\\n    function getLatestProductId() external view returns (uint32);\\n\\n    function getProductMetadata(\\n        uint32 productId\\n    ) external view returns (ProductMetadata memory);\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/IVaultViewEntry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport { Vault } from \\\"../../Structs.sol\\\";\\n\\ninterface IVaultViewEntry {\\n    function getOraclePriceOverride(\\n        address vaultAddress,\\n        uint40 timestamp\\n    ) external view returns (uint128);\\n\\n    function getVault(\\n        address vaultAddress\\n    ) external view returns (Vault memory);\\n\\n    function getVaultProductId(address vault) external view returns (uint32);\\n\\n    function getIsDefaulted(address vaultAddress) external view returns (bool);\\n\\n    function getDaysLate(address vaultAddress) external view returns (uint256);\\n\\n    function totalAssets(address vaultAddress) external view returns (uint256);\\n\\n    function convertToAssets(\\n        address vaultAddress,\\n        uint256 shares\\n    ) external view returns (uint128);\\n\\n    function convertToShares(\\n        address vaultAddress,\\n        uint128 assets\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/oracle-entry/interfaces/IOracleEntry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\ninterface IOracleEntry {\\n    enum DataSource {\\n        None,\\n        Pyth\\n    }\\n\\n    event DataSourceAdapterSet(DataSource dataSource, address adapter);\\n\\n    /// @notice Gets `asset` price at `timestamp` in terms of USD using `dataSource`\\n    function getSinglePrice(\\n        address asset,\\n        uint40 timestamp,\\n        DataSource dataSource\\n    ) external view returns (uint128);\\n\\n    /// @notice Gets `baseAsset` price at `timestamp` in terms of `quoteAsset` using `dataSource`\\n    function getPrice(\\n        address baseAsset,\\n        address quoteAsset,\\n        uint40 timestamp,\\n        DataSource dataSource\\n    ) external view returns (uint128);\\n\\n    /// @notice Sets data source adapter\\n    function setDataSourceAdapter(\\n        DataSource dataSource,\\n        address adapter\\n    ) external;\\n\\n    function getTargetDecimals() external pure returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/proxies/StETHWrappingProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { IDCSEntry } from \\\"../cega-strategies/dcs/interfaces/IDCSEntry.sol\\\";\\nimport { IWrappingProxy } from \\\"./interfaces/IWrappingProxy.sol\\\";\\nimport { IWstETH } from \\\"./interfaces/IWstETH.sol\\\";\\n\\ncontract StETHWrappingProxy is IWrappingProxy {\\n    using SafeCast for uint256;\\n\\n    IDCSEntry public immutable cegaEntry;\\n\\n    IERC20 public immutable stETH;\\n\\n    IWstETH public immutable wstETH;\\n\\n    constructor(IDCSEntry _cegaEntry, IERC20 _stETH, IWstETH _wstETH) {\\n        cegaEntry = _cegaEntry;\\n        stETH = _stETH;\\n        wstETH = _wstETH;\\n\\n        // stETH and wstETH support infinite approval, so it's enough to approve once\\n        _stETH.approve(address(_wstETH), type(uint256).max);\\n        _wstETH.approve(address(_cegaEntry), type(uint256).max);\\n    }\\n\\n    function unwrapAndTransfer(address receiver, uint256 amount) external {\\n        uint256 stETHAmount = wstETH.unwrap(amount);\\n        stETH.transfer(receiver, stETHAmount);\\n    }\\n\\n    function wrapAndAddToDCSDepositQueue(\\n        uint32 productId,\\n        uint128 amount,\\n        address receiver\\n    ) external {\\n        stETH.transferFrom(msg.sender, address(this), amount);\\n        uint128 wstETHAmount = wstETH.wrap(amount).toUint128();\\n        cegaEntry.dcsAddToDepositQueue(productId, wstETHAmount, receiver);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/proxies/interfaces/IWrappingProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\ninterface IWrappingProxy {\\n    function unwrapAndTransfer(address receiver, uint256 amount) external;\\n\\n    function wrapAndAddToDCSDepositQueue(\\n        uint32 productId,\\n        uint128 amount,\\n        address receiver\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/proxies/interfaces/IWstETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWstETH is IERC20 {\\n    function wrap(uint256 _stETHAmount) external returns (uint256);\\n\\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IDCSEntry\",\"name\":\"_cegaEntry\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stETH\",\"type\":\"address\"},{\"internalType\":\"contract IWstETH\",\"name\":\"_wstETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"cegaEntry\",\"outputs\":[{\"internalType\":\"contract IDCSEntry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unwrapAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"productId\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"wrapAndAddToDCSDepositQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wstETH\",\"outputs\":[{\"internalType\":\"contract IWstETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StETHWrappingProxy", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a67d5eb2d6684d3e899575aaaa5ab31b79890c2000000000000000000000000ae7ab96520de3a18e5e111b5eaab095312d7fe840000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0", "EVMVersion": "london", "Library": "", "LicenseType": "BSL 1.1", "Proxy": "0", "Implementation": "", "SwarmSource": ""}