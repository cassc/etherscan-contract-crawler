{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-08-24\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations for int256 with overflow safety checks.\r\n */\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMathUint\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMathUint {\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    require(b >= 0);\r\n    return b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/*\r\n\r\n0xFc505f1879aFcefd8Dec87440a0259d2F6d0A5DE\r\n714000000000 = 0.000000714 * 86400 * 7 = 0.4318272 ETH\r\n*/\r\n\r\n\r\n\r\n\r\n\r\ncontract LPStakingV1 is Ownable, ReentrancyGuard {\r\n\r\n\r\n    struct StakingDetails {\r\n        uint256 amount;\r\n        uint256 deposit_time;\r\n        uint256 unlock_time;\r\n        uint256 last_claim_time;\r\n        bool participant;\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address public LP_token_address;\r\n    IERC20 public LP_token;\r\n\r\n    uint256 public locking_period;\r\n\r\n    bool public claim_enabled = false;\r\n    bool public lock_enabled = true;\r\n    bool public stake_lockdown = true;\r\n\r\n \r\n\r\n    uint256 public total_lp_tokens;\r\n    uint256 public depositors;\r\n    uint256 public eth_per_block;\r\n    uint check_threshold = 500;\r\n\r\n    bool public emergencyMeasures = false;\r\n\r\n    uint256 minThreshold = 1000000000000000000;\r\n\r\n    event RewardsAdded(uint256 deposit_amount, uint256 time);\r\n    event RunningLowOnRewards(uint256 left_remaining, uint256 time);\r\n    event Claimed(address account, uint256 amount_due, uint256 time);\r\n    event LargeDeposit(address account, uint256 amount, uint256 time);\r\n\r\n    mapping(address => StakingDetails) public stake_details;\r\n    mapping(address => bool) public BadActor;\r\n\r\n    constructor(address _pair, uint256 block_reward) {\r\n        LP_token = IERC20(_pair);\r\n        LP_token_address = _pair;\r\n\r\n        eth_per_block = block_reward;\r\n        locking_period = 7 days;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function returnLPbalance() public view returns (uint256) {\r\n        return LP_token.balanceOf(address(this));\r\n    }\r\n\r\n    function returnETHbalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function fetchEthPerBlock() internal view returns (uint256) {\r\n        return eth_per_block;\r\n    }\r\n\r\n    function UpdateAllSettings(\r\n        bool claim_state,\r\n        bool lock_state,\r\n        bool stake_lock_state\r\n    ) public onlyOwner {\r\n        enable_claim(claim_state);\r\n        toggle_lock(lock_state);\r\n        toggle_stake_lock(stake_lock_state);\r\n    }\r\n\r\n    function init() public onlyOwner {\r\n        enable_claim(true);\r\n        toggle_lock(true);\r\n        toggle_stake_lock(false);\r\n    }\r\n\r\n    function emergencymeasuresstate(bool state) public onlyOwner {\r\n        emergencyMeasures = state;\r\n    }\r\n\r\n    function DepositRewards() public payable onlyOwner {\r\n        emit RewardsAdded(msg.value, block.timestamp);\r\n    }\r\n\r\n    function enable_claim(bool state) public onlyOwner {\r\n        claim_enabled = state;\r\n    }\r\n\r\n    function declare_bad_actor(address account, bool state) public onlyOwner {\r\n        BadActor[account] = state;\r\n    }\r\n\r\n    function changeEthPerBock(uint256 newvalue) public onlyOwner {\r\n        eth_per_block = newvalue;\r\n    }\r\n\r\n    function changeLockingPeriod(uint256 newtime) public onlyOwner {\r\n        require(newtime <= 60 days, \"Can't set lock longer then 2 months\");\r\n        locking_period = newtime;\r\n    }\r\n\r\n    // if there is a deposit lock for 2 weeks\r\n    function toggle_lock(bool state) public onlyOwner {\r\n        lock_enabled = state;\r\n    }\r\n\r\n    // deposits on/off\r\n    function toggle_stake_lock(bool state) public onlyOwner {\r\n        stake_lockdown = state;\r\n    }\r\n\r\n    function change_threshold(uint amount) public onlyOwner {\r\n        check_threshold = amount;\r\n    }\r\n\r\n    // have to approve the vault on the pair contract first\r\n    function Deposit_LP(uint256 amount) public nonReentrant {\r\n        require(stake_lockdown == false, \" cannot stake at this time \");\r\n        require(!BadActor[msg.sender]);\r\n        require(amount > 0);\r\n        amount = amount * 10**18;\r\n        if(amount > check_threshold){\r\n            emit LargeDeposit(msg.sender, amount, block.timestamp);\r\n        }\r\n        if (stake_details[msg.sender].participant == true) {\r\n            if(claim_enabled){\r\n            internalClaim(msg.sender); }\r\n            stake_details[msg.sender].amount += amount;\r\n            LP_token.transferFrom(msg.sender, address(this), amount);\r\n            total_lp_tokens += amount;\r\n        } else {\r\n            bool success = LP_token.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                amount\r\n            );\r\n            require(success);\r\n            depositors += 1;\r\n\r\n            stake_details[msg.sender].amount += amount;\r\n\r\n            stake_details[msg.sender].participant = true;\r\n\r\n            stake_details[msg.sender].deposit_time = block.timestamp;\r\n\r\n            stake_details[msg.sender].last_claim_time = block.timestamp;\r\n\r\n            stake_details[msg.sender].unlock_time =\r\n                block.timestamp +\r\n                locking_period;\r\n\r\n            total_lp_tokens += amount;\r\n        }\r\n    }\r\n\r\n    function WithdrawLP() public nonReentrant {\r\n        require(stake_details[msg.sender].participant == true);\r\n        require(!BadActor[msg.sender]);\r\n        if (lock_enabled) {\r\n            require(\r\n                stake_details[msg.sender].deposit_time + locking_period <=\r\n                    block.timestamp,\r\n                \"your still locked wait until block.timestamp is later then your lock period\"\r\n            );\r\n        }\r\n\r\n        if (stake_details[msg.sender].last_claim_time < block.timestamp) {\r\n            if(claim_enabled){\r\n            internalClaim(msg.sender);\r\n            }\r\n        }\r\n\r\n        stake_details[msg.sender].participant = false;\r\n        depositors -= 1;\r\n        bool success = LP_token.transfer(\r\n            msg.sender,\r\n            stake_details[msg.sender].amount\r\n        );\r\n        require(success);\r\n        total_lp_tokens -= stake_details[msg.sender].amount;\r\n        stake_details[msg.sender].amount = 0;\r\n        \r\n    }\r\n\r\n    function EmergencyUnstake() public nonReentrant {\r\n        require(emergencyMeasures == true, \"can only use in emergency state\");\r\n        require(stake_details[msg.sender].participant == true);\r\n        require(!BadActor[msg.sender]);\r\n        if (lock_enabled) {\r\n            require(\r\n                stake_details[msg.sender].deposit_time + locking_period <=\r\n                    block.timestamp,\r\n                \"your still locked wait until block.timestamp is later then your lock period\"\r\n            );\r\n        }\r\n        stake_details[msg.sender].participant = false;\r\n        depositors -= 1;\r\n        bool success = LP_token.transfer(\r\n            msg.sender,\r\n            stake_details[msg.sender].amount\r\n        );\r\n        require(success);\r\n        total_lp_tokens -= stake_details[msg.sender].amount;\r\n        stake_details[msg.sender].amount = 0;\r\n    }\r\n\r\n    function internalClaim(address account) private {\r\n        require(claim_enabled, \" claim has not been enabled yet \");\r\n        require(\r\n            stake_details[account].participant == true,\r\n            \" not recognized as acive staker\"\r\n        );\r\n        require(\r\n            block.timestamp > stake_details[account].last_claim_time,\r\n            \"you can only claim once per block\"\r\n        );\r\n\r\n        stake_details[account].last_claim_time = block.timestamp;\r\n\r\n        uint256 amount_due = getPendingReturns(account);\r\n\r\n        if (amount_due == 0) {\r\n            return;\r\n        }\r\n\r\n        (bool success, ) = payable(account).call{value: amount_due}(\"\");\r\n        require(success);\r\n\r\n        emit Claimed(account, amount_due, block.timestamp);\r\n\r\n        if (address(this).balance <= minThreshold) {\r\n            emit RunningLowOnRewards(address(this).balance, block.timestamp);\r\n        }\r\n    }\r\n\r\n    function Claim() public nonReentrant {\r\n        require(!BadActor[msg.sender]);\r\n        require(claim_enabled, \" claim has not been enabled yet \");\r\n        require(\r\n            stake_details[msg.sender].participant == true,\r\n            \" not recognized as active staker\"\r\n        );\r\n        require(\r\n            block.timestamp > stake_details[msg.sender].last_claim_time,\r\n            \"you can only claim once per block\"\r\n        );\r\n        require(\r\n            block.timestamp <= stake_details[msg.sender].deposit_time + locking_period,\r\n            \"you must re-lock your LP for another lock duration before claiming again Withraw will auto claim rewards\"\r\n        );\r\n\r\n        uint256 amount_due = getPendingReturns(msg.sender);\r\n\r\n        stake_details[msg.sender].last_claim_time = block.timestamp;\r\n\r\n        if (amount_due == 0) {\r\n            return;\r\n        }\r\n\r\n        (bool success, ) = payable(msg.sender).call{value: amount_due}(\"\");\r\n        require(success);\r\n\r\n        emit Claimed(msg.sender, amount_due, block.timestamp);\r\n\r\n        if (address(this).balance <= minThreshold) {\r\n            emit RunningLowOnRewards(address(this).balance, block.timestamp);\r\n        }\r\n    }\r\n\r\n    function Compound() public nonReentrant {\r\n        require(!BadActor[msg.sender]);\r\n        require(\r\n            stake_lockdown == false,\r\n            \"stake lockdown active, please remove your tokens, or wait for activation\"\r\n        );\r\n        require(\r\n            stake_details[msg.sender].participant == true,\r\n            \" not recognized as acive staker\"\r\n        );\r\n        if (lock_enabled) {\r\n            require(\r\n                stake_details[msg.sender].deposit_time + locking_period <=\r\n                    block.timestamp,\r\n                \"your still locked - wait for lock duration to time out \"\r\n            );\r\n        }\r\n\r\n        if (stake_details[msg.sender].last_claim_time < block.timestamp) {\r\n            internalClaim(msg.sender);\r\n        }\r\n\r\n        stake_details[msg.sender].deposit_time = block.timestamp;\r\n\r\n        stake_details[msg.sender].last_claim_time = block.timestamp;\r\n        stake_details[msg.sender].unlock_time =\r\n            block.timestamp +\r\n            locking_period;\r\n    }\r\n\r\n    function getTimeInPool(address account) public view returns(uint256){\r\n        return stake_details[account].deposit_time - block.timestamp;\r\n    }\r\n\r\n\r\n    function getTimeleftTillUnlock(address account) public view returns(uint256){\r\n        return stake_details[account].deposit_time + locking_period - block.timestamp;\r\n    }\r\n\r\n    function getPendingReturns(address account) public view returns (uint256) {\r\n        uint256 reward_blocks = block.timestamp -\r\n            stake_details[account].last_claim_time;\r\n        uint256 reward_rate = fetchEthPerBlock();\r\n        uint256 amount_due = ((reward_rate * users_pool_percentage(account)) /\r\n            10000) * reward_blocks;\r\n        return amount_due;\r\n    }\r\n\r\n    function users_pool_percentage(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 userStake = stake_details[account].amount;\r\n        uint256 totalSupply = LP_token.balanceOf(address(this));\r\n\r\n        if (totalSupply == 0) {\r\n            return 0; // Avoid division by zero\r\n        }\r\n\r\n        uint256 percentage = (userStake * 10000) / totalSupply;\r\n\r\n        return percentage;\r\n    }\r\n\r\n    function rescueETH20Tokens(address tokenAddress) external onlyOwner {\r\n        IERC20(tokenAddress).transfer(\r\n            owner(),\r\n            IERC20(tokenAddress).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n\r\n    function forceSend() external onlyOwner {\r\n        uint256 ETHbalance = address(this).balance;\r\n        (bool success, ) = payable(owner()).call{value: ETHbalance}(\"\");\r\n        require(success);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"block_reward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_due\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LargeDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"left_remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RunningLowOnRewards\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"BadActor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DepositRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit_LP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EmergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claim_state\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"lock_state\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stake_lock_state\",\"type\":\"bool\"}],\"name\":\"UpdateAllSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newvalue\",\"type\":\"uint256\"}],\"name\":\"changeEthPerBock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newtime\",\"type\":\"uint256\"}],\"name\":\"changeLockingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"change_threshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim_enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"declare_bad_actor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyMeasures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"emergencymeasuresstate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"enable_claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth_per_block\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPendingReturns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTimeInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTimeleftTillUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock_enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locking_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"rescueETH20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnETHbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnLPbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stake_details\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlock_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_claim_time\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"participant\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake_lockdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"toggle_lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"toggle_stake_lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_lp_tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"users_pool_percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LPStakingV1", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001018b4db87981d540f9f31128ff1b80ba2c07c86000000000000000000000000000000000000000000000000000000a63db76400", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://248982b23499042fd46a85fdaab72c5dc9425c0416135e0313e99e5e5c714240"}