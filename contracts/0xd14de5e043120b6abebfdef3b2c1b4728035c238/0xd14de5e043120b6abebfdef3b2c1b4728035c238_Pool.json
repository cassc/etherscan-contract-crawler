{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./storage/PoolStorage.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"./utils/Pauseable.sol\\\";\\n\\nerror SyntheticDoesNotExist();\\nerror SenderIsNotDebtToken();\\nerror SenderIsNotDepositToken();\\nerror UserReachedMaxTokens();\\nerror PoolRegistryIsNull();\\nerror DebtTokenAlreadyExists();\\nerror DepositTokenAlreadyExists();\\nerror AmountIsZero();\\nerror CanNotLiquidateOwnPosition();\\nerror PositionIsHealthy();\\nerror AmountGreaterThanMaxLiquidable();\\nerror RemainingDebtIsLowerThanTheFloor();\\nerror AmountIsTooHigh();\\nerror DebtTokenDoesNotExist();\\nerror DepositTokenDoesNotExist();\\nerror SwapFeatureIsInactive();\\nerror AmountInIsInvalid();\\nerror AddressIsNull();\\nerror SyntheticIsNull();\\nerror SyntheticIsInUse();\\nerror UnderlyingAssetInUse();\\nerror ReachedMaxDepositTokens();\\nerror RewardDistributorAlreadyExists();\\nerror RewardDistributorDoesNotExist();\\nerror TotalSupplyIsNotZero();\\nerror NewValueIsSameAsCurrent();\\nerror MaxLiquidableTooHigh();\\n\\n/**\\n * @title Pool contract\\n */\\ncontract Pool is ReentrancyGuard, Pauseable, PoolStorageV4 {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ISyntheticToken;\\n    using WadRayMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using MappedEnumerableSet for MappedEnumerableSet.AddressSet;\\n\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    /**\\n     * @notice Maximum tokens per pool a user may have\\n     */\\n    uint256 public constant MAX_TOKENS_PER_USER = 30;\\n\\n    /// @notice Emitted when flag for pause bridge transfer is toggled\\n    event BridgingIsActiveUpdated(bool newIsActive);\\n\\n    /// @notice Emitted when protocol liquidation fee is updated\\n    event DebtFloorUpdated(uint256 oldDebtFloorInUsd, uint256 newDebtFloorInUsd);\\n\\n    /// @notice Emitted when debt token is enabled\\n    event DebtTokenAdded(IDebtToken indexed debtToken);\\n\\n    /// @notice Emitted when debt token is disabled\\n    event DebtTokenRemoved(IDebtToken indexed debtToken);\\n\\n    /// @notice Emitted when deposit token is enabled\\n    event DepositTokenAdded(address indexed depositToken);\\n\\n    /// @notice Emitted when deposit token is disabled\\n    event DepositTokenRemoved(IDepositToken indexed depositToken);\\n\\n    /// @notice Emitted when fee provider contract is updated\\n    event FeeProviderUpdated(IFeeProvider indexed oldFeeProvider, IFeeProvider indexed newFeeProvider);\\n\\n    /// @notice Emitted when maxLiquidable (liquidation cap) is updated\\n    event MaxLiquidableUpdated(uint256 oldMaxLiquidable, uint256 newMaxLiquidable);\\n\\n    /// @notice Emitted when a position is liquidated\\n    event PositionLiquidated(\\n        address indexed liquidator,\\n        address indexed account,\\n        ISyntheticToken indexed syntheticToken,\\n        uint256 amountRepaid,\\n        uint256 depositSeized,\\n        uint256 fee\\n    );\\n\\n    /// @notice Emitted when rewards distributor contract is added\\n    event RewardsDistributorAdded(IRewardsDistributor indexed _distributor);\\n\\n    /// @notice Emitted when rewards distributor contract is removed\\n    event RewardsDistributorRemoved(IRewardsDistributor _distributor);\\n\\n    /// @notice Emitted when SmartFarmingManager contract is updated\\n    event SmartFarmingManagerUpdated(\\n        ISmartFarmingManager oldSmartFarmingManager,\\n        ISmartFarmingManager newSmartFarmingManager\\n    );\\n\\n    /// @notice Emitted when the swap active flag is updated\\n    event SwapActiveUpdated(bool newActive);\\n\\n    /// @notice Emitted when synthetic token is swapped\\n    event SyntheticTokenSwapped(\\n        address indexed account,\\n        ISyntheticToken indexed syntheticTokenIn,\\n        ISyntheticToken indexed syntheticTokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 fee\\n    );\\n\\n    /// @notice Emitted when treasury contract is updated\\n    event TreasuryUpdated(ITreasury indexed oldTreasury, ITreasury indexed newTreasury);\\n\\n    /**\\n     * @dev Throws if token addition will reach the `account_`'s max\\n     */\\n    modifier onlyIfAdditionWillNotReachMaxTokens(address account_) {\\n        if (debtTokensOfAccount.length(account_) + depositTokensOfAccount.length(account_) >= MAX_TOKENS_PER_USER) {\\n            revert UserReachedMaxTokens();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if deposit token doesn't exist\\n     */\\n    modifier onlyIfDepositTokenExists(IDepositToken depositToken_) {\\n        if (!doesDepositTokenExist(depositToken_)) revert DepositTokenDoesNotExist();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if synthetic token doesn't exist\\n     */\\n    modifier onlyIfSyntheticTokenExists(ISyntheticToken syntheticToken_) {\\n        if (!doesSyntheticTokenExist(syntheticToken_)) revert SyntheticDoesNotExist();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't a debt token\\n     */\\n    modifier onlyIfMsgSenderIsDebtToken() {\\n        if (!doesDebtTokenExist(IDebtToken(msg.sender))) revert SenderIsNotDebtToken();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't a deposit token\\n     */\\n    modifier onlyIfMsgSenderIsDepositToken() {\\n        if (!doesDepositTokenExist(IDepositToken(msg.sender))) revert SenderIsNotDepositToken();\\n        _;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(IPoolRegistry poolRegistry_) public initializer {\\n        if (address(poolRegistry_) == address(0)) revert PoolRegistryIsNull();\\n        __ReentrancyGuard_init();\\n        __Pauseable_init();\\n\\n        poolRegistry = poolRegistry_;\\n        isSwapActive = true;\\n        maxLiquidable = 0.5e18; // 50%\\n    }\\n\\n    /**\\n     * @notice Add a debt token to the per-account list\\n     * @dev This function is called from `DebtToken` when user's balance changes from `0`\\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\\n     * @param account_ The account address\\n     */\\n    function addToDebtTokensOfAccount(\\n        address account_\\n    ) external onlyIfMsgSenderIsDebtToken onlyIfAdditionWillNotReachMaxTokens(account_) {\\n        if (!debtTokensOfAccount.add(account_, msg.sender)) revert DebtTokenAlreadyExists();\\n    }\\n\\n    /**\\n     * @notice Add a deposit token to the per-account list\\n     * @dev This function is called from `DepositToken` when user's balance changes from `0`\\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\\n     * @param account_ The account address\\n     */\\n    function addToDepositTokensOfAccount(\\n        address account_\\n    ) external onlyIfMsgSenderIsDepositToken onlyIfAdditionWillNotReachMaxTokens(account_) {\\n        if (!depositTokensOfAccount.add(account_, msg.sender)) revert DepositTokenAlreadyExists();\\n    }\\n\\n    /**\\n     * @notice Get account's debt by querying latest prices from oracles\\n     * @param account_ The account to check\\n     * @return _debtInUsd The debt value in USD\\n     */\\n    function debtOf(address account_) public view override returns (uint256 _debtInUsd) {\\n        IMasterOracle _masterOracle = masterOracle();\\n        uint256 _length = debtTokensOfAccount.length(account_);\\n        for (uint256 i; i < _length; ++i) {\\n            IDebtToken _debtToken = IDebtToken(debtTokensOfAccount.at(account_, i));\\n            _debtInUsd += _masterOracle.quoteTokenToUsd(\\n                address(_debtToken.syntheticToken()),\\n                _debtToken.balanceOf(account_)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns whether the debt position from an account is healthy\\n     * @param account_ The account to check\\n     * @return _isHealthy Whether the account's position is healthy\\n     * @return _depositInUsd The total collateral deposited in USD\\n     * @return _debtInUsd The total debt in USD\\n     * @return _issuableLimitInUsd The max amount of debt (is USD) that can be created (considering collateral factors)\\n     * @return _issuableInUsd The amount of debt (is USD) that is free (i.e. can be used to issue synthetic tokens)\\n     */\\n    function debtPositionOf(\\n        address account_\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        )\\n    {\\n        _debtInUsd = debtOf(account_);\\n        (_depositInUsd, _issuableLimitInUsd) = depositOf(account_);\\n        _isHealthy = _debtInUsd <= _issuableLimitInUsd;\\n        _issuableInUsd = _debtInUsd < _issuableLimitInUsd ? _issuableLimitInUsd - _debtInUsd : 0;\\n    }\\n\\n    /**\\n     * @notice Get account's total collateral deposited by querying latest prices from oracles\\n     * @param account_ The account to check\\n     * @return _depositInUsd The total deposit value in USD among all collaterals\\n     * @return _issuableLimitInUsd The max value in USD that can be used to issue synthetic tokens\\n     */\\n    function depositOf(\\n        address account_\\n    ) public view override returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd) {\\n        IMasterOracle _masterOracle = masterOracle();\\n        uint256 _length = depositTokensOfAccount.length(account_);\\n        for (uint256 i; i < _length; ++i) {\\n            IDepositToken _depositToken = IDepositToken(depositTokensOfAccount.at(account_, i));\\n            uint256 _amountInUsd = _masterOracle.quoteTokenToUsd(\\n                address(_depositToken.underlying()),\\n                _depositToken.balanceOf(account_)\\n            );\\n            _depositInUsd += _amountInUsd;\\n            _issuableLimitInUsd += _amountInUsd.wadMul(_depositToken.collateralFactor());\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc Pauseable\\n     */\\n    function everythingStopped() public view override(IPauseable, Pauseable) returns (bool) {\\n        return super.everythingStopped() || poolRegistry.everythingStopped();\\n    }\\n\\n    /**\\n     * @notice Returns fee collector address\\n     */\\n    function feeCollector() external view override returns (address) {\\n        return poolRegistry.feeCollector();\\n    }\\n\\n    /**\\n     * @notice Get all debt tokens\\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees.\\n     */\\n    function getDebtTokens() external view override returns (address[] memory) {\\n        return debtTokens.values();\\n    }\\n\\n    /**\\n     * @notice Get all debt tokens\\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees.\\n     */\\n    function getDebtTokensOfAccount(address account_) external view override returns (address[] memory) {\\n        return debtTokensOfAccount.values(account_);\\n    }\\n\\n    /**\\n     * @notice Get all deposit tokens\\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees.\\n     */\\n    function getDepositTokens() external view override returns (address[] memory) {\\n        return depositTokens.values();\\n    }\\n\\n    /**\\n     * @notice Get deposit tokens of an account\\n     * @dev WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees.\\n     */\\n    function getDepositTokensOfAccount(address account_) external view override returns (address[] memory) {\\n        return depositTokensOfAccount.values(account_);\\n    }\\n\\n    /**\\n     * @notice Get all rewards distributors\\n     */\\n    function getRewardsDistributors() external view override returns (address[] memory) {\\n        return rewardsDistributors.values();\\n    }\\n\\n    /**\\n     * @notice Check if token is part of the debt offerings\\n     * @param debtToken_ Asset to check\\n     * @return true if exist\\n     */\\n    function doesDebtTokenExist(IDebtToken debtToken_) public view override returns (bool) {\\n        return debtTokens.contains(address(debtToken_));\\n    }\\n\\n    /**\\n     * @notice Check if collateral is supported\\n     * @param depositToken_ Asset to check\\n     * @return true if exist\\n     */\\n    function doesDepositTokenExist(IDepositToken depositToken_) public view override returns (bool) {\\n        return depositTokens.contains(address(depositToken_));\\n    }\\n\\n    /**\\n     * @notice Check if token is part of the synthetic offerings\\n     * @param syntheticToken_ Asset to check\\n     * @return true if exist\\n     */\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) public view override returns (bool) {\\n        return address(debtTokenOf[syntheticToken_]) != address(0);\\n    }\\n\\n    /**\\n     * @notice Quote synth  `_amountToRepay` in order to seize `totalToSeized_`\\n     * @param syntheticToken_ Synth for repayment\\n     * @param totalToSeize_ Collateral total amount to size\\n     * @param depositToken_ Collateral's deposit token\\n     * @return _amountToRepay Synth amount to burn\\n     * @return _toLiquidator Seized amount to the liquidator\\n     * @return _fee The fee amount to collect\\n     */\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeize_,\\n        IDepositToken depositToken_\\n    ) public view override returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee) {\\n        (uint128 _liquidatorIncentive, uint128 _protocolFee) = feeProvider.liquidationFees();\\n        uint256 _totalFees = _protocolFee + _liquidatorIncentive;\\n        uint256 _repayAmountInCollateral = totalToSeize_;\\n\\n        if (_totalFees > 0) {\\n            _repayAmountInCollateral = _repayAmountInCollateral.wadDiv(1e18 + _totalFees);\\n        }\\n\\n        _amountToRepay = masterOracle().quote(\\n            address(depositToken_.underlying()),\\n            address(syntheticToken_),\\n            _repayAmountInCollateral\\n        );\\n\\n        if (_protocolFee > 0) {\\n            _fee = _repayAmountInCollateral.wadMul(_protocolFee);\\n        }\\n\\n        if (_liquidatorIncentive > 0) {\\n            _toLiquidator = _repayAmountInCollateral.wadMul(1e18 + _liquidatorIncentive);\\n        }\\n    }\\n\\n    /**\\n     * @notice Quote max allowed synth to repay\\n     * @dev I.e. Considers the min amount between collateral's balance and `maxLiquidable` param\\n     * @param syntheticToken_ Synth for repayment\\n     * @param account_ The account to liquidate\\n     * @param depositToken_ Collateral's deposit token\\n     * @return _maxAmountToRepay Synth amount to burn\\n     */\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view override returns (uint256 _maxAmountToRepay) {\\n        (bool _isHealthy, , , , ) = debtPositionOf(account_);\\n        if (_isHealthy) {\\n            return 0;\\n        }\\n\\n        (uint256 _amountToRepay, , ) = quoteLiquidateIn(\\n            syntheticToken_,\\n            depositToken_.balanceOf(account_),\\n            depositToken_\\n        );\\n\\n        _maxAmountToRepay = debtTokenOf[syntheticToken_].balanceOf(account_).wadMul(maxLiquidable);\\n\\n        if (_amountToRepay < _maxAmountToRepay) {\\n            _maxAmountToRepay = _amountToRepay;\\n        }\\n    }\\n\\n    /**\\n     * @notice Quote collateral  `totalToSeized_` by repaying `amountToRepay_`\\n     * @param syntheticToken_ Synth for repayment\\n     * @param amountToRepay_ Synth amount to burn\\n     * @param depositToken_ Collateral's deposit token\\n     * @return _totalToSeize Collateral total amount to size\\n     * @return _toLiquidator Seized amount to the liquidator\\n     * @return _fee The fee amount to collect\\n     */\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) public view override returns (uint256 _totalToSeize, uint256 _toLiquidator, uint256 _fee) {\\n        _toLiquidator = masterOracle().quote(\\n            address(syntheticToken_),\\n            address(depositToken_.underlying()),\\n            amountToRepay_\\n        );\\n\\n        (uint128 _liquidatorIncentive, uint128 _protocolFee) = feeProvider.liquidationFees();\\n\\n        if (_protocolFee > 0) {\\n            _fee = _toLiquidator.wadMul(_protocolFee);\\n        }\\n        if (_liquidatorIncentive > 0) {\\n            _toLiquidator += _toLiquidator.wadMul(_liquidatorIncentive);\\n        }\\n\\n        _totalToSeize = _fee + _toLiquidator;\\n    }\\n\\n    /**\\n     * @notice Quote `_amountIn` to get `amountOut_`\\n     * @param syntheticTokenIn_ Synth in\\n     * @param syntheticTokenOut_ Synth out\\n     * @param amountOut_ Amount out\\n     * @return _amountIn Amount in\\n     * @return _fee Fee to charge in `syntheticTokenOut_`\\n     */\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view override returns (uint256 _amountIn, uint256 _fee) {\\n        uint256 _swapFee = feeProvider.swapFeeFor(msg.sender);\\n        if (_swapFee > 0) {\\n            amountOut_ = amountOut_.wadDiv(1e18 - _swapFee);\\n            _fee = amountOut_.wadMul(_swapFee);\\n        }\\n\\n        _amountIn = poolRegistry.masterOracle().quote(\\n            address(syntheticTokenOut_),\\n            address(syntheticTokenIn_),\\n            amountOut_\\n        );\\n    }\\n\\n    /**\\n     * @notice Quote `amountOut_` get from `amountIn_`\\n     * @param syntheticTokenIn_ Synth in\\n     * @param syntheticTokenOut_ Synth out\\n     * @param amountIn_ Amount in\\n     * @return _amountOut Amount out\\n     * @return _fee Fee to charge in `syntheticTokenOut_`\\n     */\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) public view override returns (uint256 _amountOut, uint256 _fee) {\\n        _amountOut = poolRegistry.masterOracle().quote(\\n            address(syntheticTokenIn_),\\n            address(syntheticTokenOut_),\\n            amountIn_\\n        );\\n\\n        uint256 _swapFee = feeProvider.swapFeeFor(msg.sender);\\n        if (_swapFee > 0) {\\n            _fee = _amountOut.wadMul(_swapFee);\\n            _amountOut -= _fee;\\n        }\\n    }\\n\\n    /**\\n     * @notice Burn synthetic token, unlock deposit token and send liquidator incentive\\n     * @param syntheticToken_ The msAsset to use for repayment\\n     * @param account_ The account with an unhealthy position\\n     * @param amountToRepay_ The amount to repay in synthetic token\\n     * @param depositToken_ The collateral to seize from\\n     * @return _totalSeized Total deposit amount seized from the liquidated account\\n     * @return _toLiquidator Share of `_totalSeized` sent to the liquidator\\n     * @return _fee Share of `_totalSeized` collected as fee\\n     */\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    )\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfSyntheticTokenExists(syntheticToken_)\\n        onlyIfDepositTokenExists(depositToken_)\\n        returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee)\\n    {\\n        if (amountToRepay_ == 0) revert AmountIsZero();\\n        if (msg.sender == account_) revert CanNotLiquidateOwnPosition();\\n\\n        IDebtToken _debtToken = debtTokenOf[syntheticToken_];\\n        _debtToken.accrueInterest();\\n\\n        (bool _isHealthy, , , , ) = debtPositionOf(account_);\\n\\n        if (_isHealthy) {\\n            revert PositionIsHealthy();\\n        }\\n\\n        uint256 _debtTokenBalance = _debtToken.balanceOf(account_);\\n\\n        if (amountToRepay_.wadDiv(_debtTokenBalance) > maxLiquidable) {\\n            revert AmountGreaterThanMaxLiquidable();\\n        }\\n\\n        IMasterOracle _masterOracle = masterOracle();\\n\\n        if (debtFloorInUsd > 0) {\\n            uint256 _newDebtInUsd = _masterOracle.quoteTokenToUsd(\\n                address(syntheticToken_),\\n                _debtTokenBalance - amountToRepay_\\n            );\\n            if (_newDebtInUsd > 0 && _newDebtInUsd < debtFloorInUsd) {\\n                revert RemainingDebtIsLowerThanTheFloor();\\n            }\\n        }\\n\\n        (_totalSeized, _toLiquidator, _fee) = quoteLiquidateOut(syntheticToken_, amountToRepay_, depositToken_);\\n\\n        if (_totalSeized > depositToken_.balanceOf(account_)) {\\n            revert AmountIsTooHigh();\\n        }\\n\\n        syntheticToken_.burn(msg.sender, amountToRepay_);\\n        _debtToken.burn(account_, amountToRepay_);\\n        depositToken_.seize(account_, msg.sender, _toLiquidator);\\n\\n        if (_fee > 0) {\\n            depositToken_.seize(account_, poolRegistry.feeCollector(), _fee);\\n        }\\n\\n        emit PositionLiquidated(msg.sender, account_, syntheticToken_, amountToRepay_, _totalSeized, _fee);\\n    }\\n\\n    /**\\n     * @notice Get MasterOracle contract\\n     */\\n    function masterOracle() public view override returns (IMasterOracle) {\\n        return poolRegistry.masterOracle();\\n    }\\n\\n    /**\\n     * @inheritdoc Pauseable\\n     */\\n    function paused() public view override(IPauseable, Pauseable) returns (bool) {\\n        return super.paused() || poolRegistry.paused();\\n    }\\n\\n    /**\\n     * @notice Remove a debt token from the per-account list\\n     * @dev This function is called from `DebtToken` when user's balance changes to `0`\\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\\n     * @param account_ The account address\\n     */\\n    function removeFromDebtTokensOfAccount(address account_) external onlyIfMsgSenderIsDebtToken {\\n        if (!debtTokensOfAccount.remove(account_, msg.sender)) revert DebtTokenDoesNotExist();\\n    }\\n\\n    /**\\n     * @notice Remove a deposit token from the per-account list\\n     * @dev This function is called from `DepositToken` when user's balance changes to `0`\\n     * @dev The caller should ensure to not pass `address(0)` as `_account`\\n     * @param account_ The account address\\n     */\\n    function removeFromDepositTokensOfAccount(address account_) external onlyIfMsgSenderIsDepositToken {\\n        if (!depositTokensOfAccount.remove(account_, msg.sender)) revert DepositTokenDoesNotExist();\\n    }\\n\\n    /**\\n     * @notice Swap synthetic tokens\\n     * @param syntheticTokenIn_ Synthetic token to sell\\n     * @param syntheticTokenOut_ Synthetic token to buy\\n     * @param amountIn_ Amount to swap\\n     */\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    )\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfSyntheticTokenExists(syntheticTokenIn_)\\n        onlyIfSyntheticTokenExists(syntheticTokenOut_)\\n        returns (uint256 _amountOut, uint256 _fee)\\n    {\\n        if (!isSwapActive) revert SwapFeatureIsInactive();\\n        if (amountIn_ == 0 || amountIn_ > syntheticTokenIn_.balanceOf(msg.sender)) revert AmountInIsInvalid();\\n\\n        syntheticTokenIn_.burn(msg.sender, amountIn_);\\n\\n        (_amountOut, _fee) = quoteSwapOut(syntheticTokenIn_, syntheticTokenOut_, amountIn_);\\n\\n        if (_fee > 0) {\\n            syntheticTokenOut_.mint(poolRegistry.feeCollector(), _fee);\\n        }\\n\\n        syntheticTokenOut_.mint(msg.sender, _amountOut);\\n\\n        emit SyntheticTokenSwapped(msg.sender, syntheticTokenIn_, syntheticTokenOut_, amountIn_, _amountOut, _fee);\\n    }\\n\\n    /**\\n     * @notice Add debt token to offerings\\n     * @dev Must keep `debtTokenOf` mapping updated\\n     */\\n    function addDebtToken(IDebtToken debtToken_) external onlyGovernor {\\n        if (address(debtToken_) == address(0)) revert AddressIsNull();\\n        ISyntheticToken _syntheticToken = debtToken_.syntheticToken();\\n        if (address(_syntheticToken) == address(0)) revert SyntheticIsNull();\\n        if (address(debtTokenOf[_syntheticToken]) != address(0)) revert SyntheticIsInUse();\\n\\n        if (!debtTokens.add(address(debtToken_))) revert DebtTokenAlreadyExists();\\n\\n        debtTokenOf[_syntheticToken] = debtToken_;\\n\\n        emit DebtTokenAdded(debtToken_);\\n    }\\n\\n    /**\\n     * @notice Add deposit token (i.e. collateral) to Synth\\n     */\\n    function addDepositToken(address depositToken_) external onlyGovernor {\\n        if (depositToken_ == address(0)) revert AddressIsNull();\\n        IERC20 _underlying = IDepositToken(depositToken_).underlying();\\n        if (address(depositTokenOf[_underlying]) != address(0)) revert UnderlyingAssetInUse();\\n        // Note: Fee collector collects deposit tokens as fee\\n        if (depositTokens.length() >= MAX_TOKENS_PER_USER) revert ReachedMaxDepositTokens();\\n\\n        if (!depositTokens.add(depositToken_)) revert DepositTokenAlreadyExists();\\n\\n        depositTokenOf[_underlying] = IDepositToken(depositToken_);\\n\\n        emit DepositTokenAdded(depositToken_);\\n    }\\n\\n    /**\\n     * @notice Add a RewardsDistributor contract\\n     */\\n    function addRewardsDistributor(IRewardsDistributor distributor_) external onlyGovernor {\\n        if (address(distributor_) == address(0)) revert AddressIsNull();\\n        if (!rewardsDistributors.add(address(distributor_))) revert RewardDistributorAlreadyExists();\\n        emit RewardsDistributorAdded(distributor_);\\n    }\\n\\n    /**\\n     * @notice Remove debt token from offerings\\n     * @dev Must keep `debtTokenOf` mapping updated\\n     */\\n    function removeDebtToken(IDebtToken debtToken_) external onlyGovernor {\\n        if (debtToken_.totalSupply() > 0) revert TotalSupplyIsNotZero();\\n        if (!debtTokens.remove(address(debtToken_))) revert DebtTokenDoesNotExist();\\n\\n        delete debtTokenOf[debtToken_.syntheticToken()];\\n\\n        emit DebtTokenRemoved(debtToken_);\\n    }\\n\\n    /**\\n     * @notice Remove deposit token (i.e. collateral) from Synth\\n     */\\n    function removeDepositToken(IDepositToken depositToken_) external onlyGovernor {\\n        if (depositToken_.totalSupply() > 0) revert TotalSupplyIsNotZero();\\n\\n        if (!depositTokens.remove(address(depositToken_))) revert DepositTokenDoesNotExist();\\n        delete depositTokenOf[depositToken_.underlying()];\\n\\n        emit DepositTokenRemoved(depositToken_);\\n    }\\n\\n    /**\\n     * @notice Remove a RewardsDistributor contract\\n     */\\n    function removeRewardsDistributor(IRewardsDistributor distributor_) external onlyGovernor {\\n        if (address(distributor_) == address(0)) revert AddressIsNull();\\n        if (!rewardsDistributors.remove(address(distributor_))) revert RewardDistributorDoesNotExist();\\n\\n        emit RewardsDistributorRemoved(distributor_);\\n    }\\n\\n    /**\\n     * @notice Turn swap on/off\\n     */\\n    function toggleIsSwapActive() external onlyGovernor {\\n        bool _newIsSwapActive = !isSwapActive;\\n        emit SwapActiveUpdated(_newIsSwapActive);\\n        isSwapActive = _newIsSwapActive;\\n    }\\n\\n    /**\\n     * @notice Update debt floor\\n     */\\n    function updateDebtFloor(uint256 newDebtFloorInUsd_) external onlyGovernor {\\n        uint256 _currentDebtFloorInUsd = debtFloorInUsd;\\n        if (newDebtFloorInUsd_ == _currentDebtFloorInUsd) revert NewValueIsSameAsCurrent();\\n        emit DebtFloorUpdated(_currentDebtFloorInUsd, newDebtFloorInUsd_);\\n        debtFloorInUsd = newDebtFloorInUsd_;\\n    }\\n\\n    /**\\n     * @notice Update maxLiquidable (liquidation cap)\\n     */\\n    function updateMaxLiquidable(uint256 newMaxLiquidable_) external onlyGovernor {\\n        if (newMaxLiquidable_ > 1e18) revert MaxLiquidableTooHigh();\\n        uint256 _currentMaxLiquidable = maxLiquidable;\\n        if (newMaxLiquidable_ == _currentMaxLiquidable) revert NewValueIsSameAsCurrent();\\n        emit MaxLiquidableUpdated(_currentMaxLiquidable, newMaxLiquidable_);\\n        maxLiquidable = newMaxLiquidable_;\\n    }\\n\\n    /**\\n     * @notice Update treasury contract - will migrate funds to the new contract\\n     */\\n    function updateTreasury(ITreasury newTreasury_) external onlyGovernor {\\n        if (address(newTreasury_) == address(0)) revert AddressIsNull();\\n        ITreasury _currentTreasury = treasury;\\n        if (newTreasury_ == _currentTreasury) revert NewValueIsSameAsCurrent();\\n\\n        if (address(_currentTreasury) != address(0)) {\\n            _currentTreasury.migrateTo(address(newTreasury_));\\n        }\\n\\n        emit TreasuryUpdated(_currentTreasury, newTreasury_);\\n        treasury = newTreasury_;\\n    }\\n\\n    /**\\n     * @notice Update FeeProvider contract\\n     */\\n    function updateFeeProvider(IFeeProvider feeProvider_) external onlyGovernor {\\n        if (address(feeProvider_) == address(0)) revert AddressIsNull();\\n        IFeeProvider _current = feeProvider;\\n        if (feeProvider_ == _current) revert NewValueIsSameAsCurrent();\\n        emit FeeProviderUpdated(_current, feeProvider_);\\n        feeProvider = feeProvider_;\\n    }\\n\\n    /**\\n     * @notice Update SmartFarmingManager contract\\n     */\\n    function updateSmartFarmingManager(ISmartFarmingManager newSmartFarmingManager_) external onlyGovernor {\\n        if (address(newSmartFarmingManager_) == address(0)) revert AddressIsNull();\\n        ISmartFarmingManager _current = smartFarmingManager;\\n        if (newSmartFarmingManager_ == _current) revert NewValueIsSameAsCurrent();\\n\\n        emit SmartFarmingManagerUpdated(_current, newSmartFarmingManager_);\\n        smartFarmingManager = newSmartFarmingManager_;\\n    }\\n\\n    /**\\n     * @notice Pause/Unpause bridge transfers\\n     */\\n    function toggleBridgingIsActive() external onlyGovernor {\\n        bool _newIsBridgingActive = !isBridgingActive;\\n        emit BridgingIsActiveUpdated(_newIsBridgingActive);\\n        isBridgingActive = _newIsBridgingActive;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../utils/TokenHolder.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\n\\nerror SenderIsNotGovernor();\\nerror ProposedGovernorIsNull();\\nerror SenderIsNotTheProposedGovernor();\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, TokenHolder, Initializable {\\n    /**\\n     * @notice The governor\\n     * @dev By default the contract deployer is the initial governor\\n     */\\n    address public governor;\\n\\n    /**\\n     * @notice The proposed governor\\n     * @dev It will be empty (address(0)) if there isn't a proposed governor\\n     */\\n    address public proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    constructor() {\\n        governor = msg.sender;\\n        emit UpdatedGovernor(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Governable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal onlyInitializing {\\n        governor = msg.sender;\\n        emit UpdatedGovernor(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        if (governor != msg.sender) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    /// @inheritdoc TokenHolder\\n    // solhint-disable-next-line no-empty-blocks\\n    function _requireCanSweep() internal view override onlyGovernor {}\\n\\n    /**\\n     * @notice Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * @dev Can only be called by the current owner.\\n     * @param proposedGovernor_ The new proposed governor\\n     */\\n    function transferGovernorship(address proposedGovernor_) external onlyGovernor {\\n        if (proposedGovernor_ == address(0)) revert ProposedGovernorIsNull();\\n        proposedGovernor = proposedGovernor_;\\n    }\\n\\n    /**\\n     * @notice Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        address _proposedGovernor = proposedGovernor;\\n        if (msg.sender != _proposedGovernor) revert SenderIsNotTheProposedGovernor();\\n        emit UpdatedGovernor(governor, _proposedGovernor);\\n        governor = _proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/IOFTCoreUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../../../../openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCoreUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../IOFTCoreUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the composable OFT core standard\\n */\\ninterface IComposableOFTCoreUpgradeable is IOFTCoreUpgradeable {\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function retryOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n\\n    event CallOFTReceivedFailure(\\n        uint16 indexed _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _from,\\n        address indexed _to,\\n        uint _amount,\\n        bytes _payload,\\n        bytes _reason\\n    );\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event RetryOFTReceivedSuccess(bytes32 _messageHash);\\n\\n    event NonContractAddress(address _address);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverUpgradeable {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/stargate-protocol/interfaces/IStargateComposer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStargateRouter.sol\\\";\\n\\ninterface IStargateComposer {\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        IStargateRouter.lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function factory() external view returns (address);\\n\\n    function stargateBridge() external view returns (address);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        IStargateRouter.lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function peers(uint16 _chainId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/stargate-protocol/interfaces/IStargateRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function clearCachedSwap(uint16 _srcChainId, bytes calldata _srcAddress, uint256 _nonce) external;\\n\\n    function factory() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function cachedSwapLookup(\\n        uint16 _chainId_,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (address token, uint256 amountLD, address to, bytes memory payload);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICrossChainDispatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateRouter.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateComposer.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface ICrossChainDispatcher is IStargateReceiver, IOFTReceiverUpgradeable {\\n    function crossChainDispatcherOf(uint16 chainId_) external view returns (address);\\n\\n    function triggerFlashRepaySwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function triggerLeverageSwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function isBridgingActive() external view returns (bool);\\n\\n    function flashRepayCallbackTxGasLimit() external view returns (uint64);\\n\\n    function flashRepaySwapTxGasLimit() external view returns (uint64);\\n\\n    function leverageCallbackTxGasLimit() external view returns (uint64);\\n\\n    function leverageSwapTxGasLimit() external view returns (uint64);\\n\\n    function lzBaseGasLimit() external view returns (uint256);\\n\\n    function stargateComposer() external view returns (IStargateComposer);\\n\\n    function stargateSlippage() external view returns (uint256);\\n\\n    function stargatePoolIdOf(address token_) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address to_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDepositToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralFactor() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function flashWithdraw(address account_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited, uint256 _fee);\\n\\n    function quoteDepositIn(uint256 amountToDeposit_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteDepositOut(uint256 amount_) external view returns (uint256 _amountToDeposit, uint256 _fee);\\n\\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteWithdrawOut(uint256 amount_) external view returns (uint256 _amountToWithdraw, uint256 _fee);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateCollateralFactor(uint128 newCollateralFactor_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function withdrawFrom(address from_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice FeeProvider interface\\n */\\ninterface IFeeProvider {\\n    struct LiquidationFees {\\n        uint128 liquidatorIncentive;\\n        uint128 protocolFee;\\n    }\\n\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFeeFor(address account_) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IManageable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPauseable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IFeeProvider.sol\\\";\\nimport \\\"./ISmartFarmingManager.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"../interfaces/IFeeProvider.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function feeProvider() external view returns (IFeeProvider);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function doesDebtTokenExist(IDebtToken debtToken_) external view returns (bool);\\n\\n    function doesDepositTokenExist(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (address[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(\\n        address account_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeized_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _maxAmountToRepay);\\n\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view returns (uint256 _amountIn, uint256 _fee);\\n\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _fee);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _fee);\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function isSwapActive() external view returns (bool);\\n\\n    function smartFarmingManager() external view returns (ISmartFarmingManager);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"./IQuoter.sol\\\";\\nimport \\\"./ICrossChainDispatcher.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function feeCollector() external view returns (address);\\n\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n\\n    function swapper() external view returns (ISwapper);\\n\\n    function quoter() external view returns (IQuoter);\\n\\n    function crossChainDispatcher() external view returns (ICrossChainDispatcher);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool _exists);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProxyOFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\\\";\\n\\ninterface IProxyOFT is IComposableOFTCoreUpgradeable {\\n    function getProxyOFTOf(uint16 chainId_) external view returns (address _proxyOFT);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IQuoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface IQuoter {\\n    function quoteCrossChainFlashRepayNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteCrossChainLeverageNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteLeverageCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function quoteFlashRepayCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function getFlashRepaySwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n\\n    function getLeverageSwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external;\\n\\n    function claimable(address account_) external view returns (uint256 _claimable);\\n\\n    function claimable(address account_, IERC20 token_) external view returns (uint256 _claimable);\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external;\\n\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external;\\n\\n    function tokens(uint256) external view returns (IERC20);\\n\\n    function tokenStates(IERC20) external view returns (uint224 index, uint32 timestamp);\\n\\n    function accountIndexOf(IERC20, address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISmartFarmingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IManageable.sol\\\";\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\n/**\\n * @notice SmartFarmingManager interface\\n */\\ninterface ISmartFarmingManager {\\n    function flashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        uint256 repayAmountMin_\\n    ) external returns (uint256 _withdrawn, uint256 _repaid);\\n\\n    function crossChainFlashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        IERC20 bridgeToken_,\\n        uint256 bridgeTokenAmountMin_,\\n        uint256 swapAmountOutMin_,\\n        uint256 repayAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 swapAmountOutMin_,\\n        uint256 depositAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverageCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _deposited);\\n\\n    function crossChainFlashRepayCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _repaid);\\n\\n    function leverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 depositAmountMin_\\n    ) external returns (uint256 _deposited, uint256 _issued);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISyntheticToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/IProxyOFT.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateProxyOFT(IProxyOFT newProxyOFT_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function proxyOFT() external view returns (IProxyOFT);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IMasterOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/ISwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/MappedEnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @dev EnumerableSet fork to support `address => address[]` mapping\\n * @dev Forked from OZ 4.3.2\\n */\\nlibrary MappedEnumerableSet {\\n    struct Set {\\n        // Storage of set values\\n        address[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(address => uint256) _indexes;\\n    }\\n\\n    struct AddressSet {\\n        mapping(address => Set) _ofAddress;\\n    }\\n\\n    function _add(AddressSet storage set, address _key, address value) private returns (bool) {\\n        if (!_contains(set, _key, value)) {\\n            set._ofAddress[_key]._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._ofAddress[_key]._indexes[value] = set._ofAddress[_key]._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(AddressSet storage set, address _key, address value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._ofAddress[_key]._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._ofAddress[_key]._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                address lastvalue = set._ofAddress[_key]._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._ofAddress[_key]._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._ofAddress[_key]._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._ofAddress[_key]._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._ofAddress[_key]._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _contains(AddressSet storage set, address _key, address value) private view returns (bool) {\\n        return set._ofAddress[_key]._indexes[value] != 0;\\n    }\\n\\n    function _length(AddressSet storage set, address _key) private view returns (uint256) {\\n        return set._ofAddress[_key]._values.length;\\n    }\\n\\n    function _at(AddressSet storage set, address _key, uint256 index) private view returns (address) {\\n        return set._ofAddress[_key]._values[index];\\n    }\\n\\n    function _values(AddressSet storage set, address _key) private view returns (address[] memory) {\\n        return set._ofAddress[_key]._values;\\n    }\\n\\n    function add(AddressSet storage set, address key, address value) internal returns (bool) {\\n        return _add(set, key, value);\\n    }\\n\\n    function remove(AddressSet storage set, address key, address value) internal returns (bool) {\\n        return _remove(set, key, value);\\n    }\\n\\n    function contains(AddressSet storage set, address key, address value) internal view returns (bool) {\\n        return _contains(set, key, value);\\n    }\\n\\n    function length(AddressSet storage set, address key) internal view returns (uint256) {\\n        return _length(set, key);\\n    }\\n\\n    function at(AddressSet storage set, address key, uint256 index) internal view returns (address) {\\n        return _at(set, key, index);\\n    }\\n\\n    function values(AddressSet storage set, address key) internal view returns (address[] memory) {\\n        address[] memory store = _values(set, key);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storage/PoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../lib/MappedEnumerableSet.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/ISmartFarmingManager.sol\\\";\\n\\n// solhint-disable var-name-mixedcase, max-states-count\\nabstract contract PoolStorageV1 is IPool {\\n    /**\\n     * @notice The debt floor (in USD) for each synthetic token\\n     * This parameters is used to keep incentive for liquidators (i.e. cover gas and provide enough profit)\\n     */\\n    uint256 public override debtFloorInUsd;\\n\\n    uint256 private depositFee__DEPRECATED;\\n\\n    uint256 private issueFee__DEPRECATED;\\n\\n    uint256 private withdrawFee__DEPRECATED;\\n\\n    uint256 private repayFee__DEPRECATED;\\n\\n    uint256 private swapFee__DEPRECATED;\\n\\n    uint256 private liquidationFees__DEPRECATED;\\n\\n    /**\\n     * @notice The max percent of the debt allowed to liquidate\\n     * @dev Use 18 decimals (e.g. 1e16 = 1%)\\n     */\\n    uint256 public override maxLiquidable;\\n\\n    /**\\n     * @notice PoolRegistry\\n     */\\n    IPoolRegistry public override poolRegistry;\\n\\n    /**\\n     * @notice Swap feature on/off flag\\n     */\\n    bool public override isSwapActive;\\n\\n    /**\\n     * @notice Treasury contract\\n     */\\n    ITreasury public override treasury;\\n\\n    /**\\n     * @notice Represents collateral's deposits\\n     */\\n    EnumerableSet.AddressSet internal depositTokens;\\n\\n    /**\\n     * @notice Get the deposit token's address from given underlying asset\\n     */\\n    mapping(IERC20 => IDepositToken) public override depositTokenOf;\\n\\n    /**\\n     * @notice Available debt tokens\\n     */\\n    EnumerableSet.AddressSet internal debtTokens;\\n\\n    /**\\n     * @notice Per-account deposit tokens (i.e. tokens that user has balance > 0)\\n     */\\n    MappedEnumerableSet.AddressSet internal depositTokensOfAccount;\\n\\n    /**\\n     * @notice Per-account debt tokens (i.e. tokens that user has balance > 0)\\n     */\\n    MappedEnumerableSet.AddressSet internal debtTokensOfAccount;\\n\\n    /**\\n     * @notice RewardsDistributor contracts\\n     */\\n    IRewardsDistributor[] internal rewardsDistributors__DEPRECATED;\\n\\n    /**\\n     * @notice Get the debt token's address from given synthetic asset\\n     */\\n    mapping(ISyntheticToken => IDebtToken) public override debtTokenOf;\\n}\\n\\nabstract contract PoolStorageV2 is PoolStorageV1 {\\n    ISwapper private swapper__DEPRECATED;\\n\\n    /**\\n     * @notice FeeProvider contract\\n     */\\n    IFeeProvider public override feeProvider;\\n\\n    /**\\n     * @notice RewardsDistributor contracts\\n     */\\n    EnumerableSet.AddressSet internal rewardsDistributors;\\n}\\n\\nabstract contract PoolStorageV3 is PoolStorageV2 {\\n    /**\\n     * @notice SmartFarmingManager contract\\n     */\\n    ISmartFarmingManager public smartFarmingManager;\\n}\\n\\nabstract contract PoolStorageV4 is PoolStorageV3 {\\n    /**\\n     * @notice Flag that pause/unpause pool's cross-chain activities\\n     */\\n    bool public isBridgingActive;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Pauseable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IPauseable.sol\\\";\\nimport \\\"../access/Governable.sol\\\";\\n\\nerror IsPaused();\\nerror IsShutdown();\\nerror IsNotPaused();\\nerror IsNotShutdown();\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n */\\nabstract contract Pauseable is IPauseable, Governable {\\n    /// @notice Emitted when contract is turned on\\n    event Open(address indexed caller);\\n\\n    /// @notice Emitted when contract is paused\\n    event Paused(address indexed caller);\\n\\n    /// @notice Emitted when contract is shuted down\\n    event Shutdown(address indexed caller);\\n\\n    /// @notice Emitted when contract is unpaused\\n    event Unpaused(address indexed caller);\\n\\n    bool private _paused;\\n    bool private _everythingStopped;\\n\\n    /**\\n     * @dev Throws if contract is paused\\n     */\\n    modifier whenNotPaused() {\\n        if (paused()) revert IsPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is shutdown\\n     */\\n    modifier whenNotShutdown() {\\n        if (everythingStopped()) revert IsShutdown();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is not paused\\n     */\\n    modifier whenPaused() {\\n        if (!paused()) revert IsNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is not shutdown\\n     */\\n    modifier whenShutdown() {\\n        if (!everythingStopped()) revert IsNotShutdown();\\n        _;\\n    }\\n\\n    /**\\n     * @dev If inheriting child is using proxy then child contract can use\\n     * __Pauseable_init() function to initialization this contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Pauseable_init() internal onlyInitializing {\\n        __Governable_init();\\n    }\\n\\n    /**\\n     * @notice Return `true` if contract is shutdown\\n     */\\n    function everythingStopped() public view virtual returns (bool) {\\n        return _everythingStopped;\\n    }\\n\\n    /**\\n     * @notice Return `true` if contract is paused\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Open contract operations, if contract is in shutdown state\\n     */\\n    function open() external virtual whenShutdown onlyGovernor {\\n        _everythingStopped = false;\\n        emit Open(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Suspend deposit feature, if contract is not paused.\\n     */\\n    function pause() external virtual whenNotPaused onlyGovernor {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Suspend all features (issue, repay, deposit, withdraw, liquidate and swap), if not already shutdown.\\n     */\\n    function shutdown() external virtual whenNotShutdown onlyGovernor {\\n        _everythingStopped = true;\\n        _paused = true;\\n        emit Shutdown(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Unpause contract operations, allow only if contract is paused and not shutdown.\\n     */\\n    function unpause() external virtual whenPaused whenNotShutdown onlyGovernor {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/TokenHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nerror FallbackIsNotAllowed();\\nerror ReceiveIsNotAllowed();\\n\\n/**\\n * @title Utils contract that handles tokens sent to it\\n */\\nabstract contract TokenHolder {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Revert fallback calls\\n     */\\n    fallback() external payable {\\n        revert FallbackIsNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Revert when receiving by default\\n     */\\n    receive() external payable virtual {\\n        revert ReceiveIsNotAllowed();\\n    }\\n\\n    /**\\n     * @notice ERC20 recovery in case of stuck tokens due direct transfers to the contract address.\\n     * @param token_ The token to transfer\\n     * @param to_ The recipient of the transfer\\n     * @param amount_ The amount to send\\n     */\\n    function sweep(IERC20 token_, address to_, uint256 amount_) external {\\n        _requireCanSweep();\\n\\n        if (address(token_) == address(0)) {\\n            Address.sendValue(payable(to_), amount_);\\n        } else {\\n            token_.safeTransfer(to_, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function that reverts if the caller isn't allowed to sweep tokens\\n     * @dev Usually requires the owner or governor as the caller\\n     */\\n    function _requireCanSweep() internal view virtual;\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountGreaterThanMaxLiquidable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountInIsInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIsTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotLiquidateOwnPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtTokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtTokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositTokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositTokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsNotShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxLiquidableTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewValueIsSameAsCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolRegistryIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PositionIsHealthy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedGovernorIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReachedMaxDepositTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReceiveIsNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemainingDebtIsLowerThanTheFloor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardDistributorDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotDebtToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotDepositToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotTheProposedGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeatureIsInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticIsInUse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSupplyIsNotZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnderlyingAssetInUse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserReachedMaxTokens\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newIsActive\",\"type\":\"bool\"}],\"name\":\"BridgingIsActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDebtFloorInUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtFloorInUsd\",\"type\":\"uint256\"}],\"name\":\"DebtFloorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken\",\"type\":\"address\"}],\"name\":\"DebtTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken\",\"type\":\"address\"}],\"name\":\"DebtTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"}],\"name\":\"DepositTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken\",\"type\":\"address\"}],\"name\":\"DepositTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IFeeProvider\",\"name\":\"oldFeeProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IFeeProvider\",\"name\":\"newFeeProvider\",\"type\":\"address\"}],\"name\":\"FeeProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxLiquidable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxLiquidable\",\"type\":\"uint256\"}],\"name\":\"MaxLiquidableUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositSeized\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRewardsDistributor\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"RewardsDistributorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IRewardsDistributor\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"RewardsDistributorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISmartFarmingManager\",\"name\":\"oldSmartFarmingManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ISmartFarmingManager\",\"name\":\"newSmartFarmingManager\",\"type\":\"address\"}],\"name\":\"SmartFarmingManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newActive\",\"type\":\"bool\"}],\"name\":\"SwapActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SyntheticTokenSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITreasury\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ITreasury\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_PER_USER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken_\",\"type\":\"address\"}],\"name\":\"addDebtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"addDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardsDistributor\",\"name\":\"distributor_\",\"type\":\"address\"}],\"name\":\"addRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"addToDebtTokensOfAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"addToDepositTokensOfAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtFloorInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"debtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"debtPositionOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isHealthy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_depositInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_issuableLimitInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_issuableInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtTokenOf\",\"outputs\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"depositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositInUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_issuableLimitInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositTokenOf\",\"outputs\":[{\"internalType\":\"contract IDepositToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken_\",\"type\":\"address\"}],\"name\":\"doesDebtTokenExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"doesDepositTokenExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"}],\"name\":\"doesSyntheticTokenExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everythingStopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeProvider\",\"outputs\":[{\"internalType\":\"contract IFeeProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"getDebtTokensOfAccount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"getDepositTokensOfAccount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsDistributors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"poolRegistry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBridgingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRepay_\",\"type\":\"uint256\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSeized\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toLiquidator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterOracle\",\"outputs\":[{\"internalType\":\"contract IMasterOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalToSeize_\",\"type\":\"uint256\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"quoteLiquidateIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toLiquidator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"quoteLiquidateMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmountToRepay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRepay_\",\"type\":\"uint256\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"quoteLiquidateOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalToSeize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toLiquidator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenIn_\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"name\":\"quoteSwapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenIn_\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"quoteSwapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken_\",\"type\":\"address\"}],\"name\":\"removeDebtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"}],\"name\":\"removeDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"removeFromDebtTokensOfAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"removeFromDepositTokensOfAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardsDistributor\",\"name\":\"distributor_\",\"type\":\"address\"}],\"name\":\"removeRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartFarmingManager\",\"outputs\":[{\"internalType\":\"contract ISmartFarmingManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenIn_\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticTokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBridgingIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsSwapActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposedGovernor_\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDebtFloorInUsd_\",\"type\":\"uint256\"}],\"name\":\"updateDebtFloor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeeProvider\",\"name\":\"feeProvider_\",\"type\":\"address\"}],\"name\":\"updateFeeProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxLiquidable_\",\"type\":\"uint256\"}],\"name\":\"updateMaxLiquidable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISmartFarmingManager\",\"name\":\"newSmartFarmingManager_\",\"type\":\"address\"}],\"name\":\"updateSmartFarmingManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"newTreasury_\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Pool", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}