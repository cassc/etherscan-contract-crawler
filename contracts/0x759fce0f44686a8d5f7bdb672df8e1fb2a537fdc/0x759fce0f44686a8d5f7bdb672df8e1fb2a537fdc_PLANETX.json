{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        \r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _tokengeneration(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: transfer to the zero address\");\r\n        _totalSupply = amount;\r\n        _balances[account] = amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\ncontract PLANETX is ERC20, Ownable {\r\n    using Address for address payable;\r\n    IRouter private router;\r\n    address private pair;\r\n    bool private _inSwap = false;\r\n    bool private LpProvider = false;\r\n    bool public tradingEnabled = false;\r\n    uint256 private ThresholdTokens = 2e10 * 10**18;\r\n    uint256 public maxWalletLimit = 3e10 * 10**18;\r\n    uint256 private TxlimitFree = 1e12 * 10**18;\r\n    uint256 private kill_block;\r\n    uint256 private deadline = 3;\r\n    uint256 private Earlytaxes = 99;\r\n\r\n    address public marketingWallet = 0x3221CDD8fc8caEad762D91Decfb3537CA093E3A6;\r\n\taddress private ops;\r\n    address public constant DeadAddy = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    struct Taxes {\r\n        uint256 marketing;\r\n        uint256 liquidity;\r\n    }\r\n\r\n    Taxes private buytaxes = Taxes(1, 0);\r\n    Taxes private sellTaxes = Taxes(1, 0);\r\n    uint256 public TotalBuyFee = buytaxes.marketing + buytaxes.liquidity;\r\n    uint256 public TotalSellFee = sellTaxes.marketing + sellTaxes.liquidity;\r\n    mapping(address => bool) public exemptFee;\r\n    mapping(address => bool) private isearlybuyer;\r\n    modifier lockTheSwap() {\r\n        if (!_inSwap) {\r\n            _inSwap = true;\r\n            _;\r\n            _inSwap = false;\r\n        }\r\n    }\r\n    constructor(address _adr) ERC20(\"Planet X\", \"PLANETX\") {\r\n        _tokengeneration(msg.sender, 1_000_000_000_010 * 10**decimals());\r\n        if (block.chainid == 56){\r\n     router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);  // PCS BSC Mainnet Router\r\n     }\r\n      else if(block.chainid == 1){\r\n          router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // Uniswap ETH Mainnet Router\r\n      }\r\n      else if(block.chainid == 42161){\r\n           router = IRouter(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506);  // Sushi Arbitrum Mainnet Router\r\n      }\r\n      else if (block.chainid == 97){\r\n     router = IRouter(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); // PCS BSC Testnet Router\r\n     }\r\n      else  if (block.chainid == 8453){\r\n     router = IRouter(0xfCD3842f85ed87ba2889b4D35893403796e67FF1); // BaseChian LeetSwap Router\r\n     }\r\n    else {\r\n         revert(\"Wrong Chain Id\");\r\n        }\r\n        ops = _adr;\r\n        address _pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n        require(_pair != address(0), \"Generated Pair Address cannot be zero\");\r\n        router = router;\r\n        pair = _pair;\r\n        exemptFee[address(this)] = true;\r\n        exemptFee[msg.sender] = true;\r\n        exemptFee[marketingWallet] = true;\r\n        exemptFee[ops] = true;\r\n        exemptFee[DeadAddy] = true;\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!isearlybuyer[sender] && !isearlybuyer[recipient],\"You can't transfer tokens\");\r\n        if (!exemptFee[sender] && !exemptFee[recipient]) {require(tradingEnabled, \"Trading not enabled\");}\r\n        if (sender == pair && !exemptFee[recipient]) {require(balanceOf(recipient) + amount <= maxWalletLimit,\r\n                \"You are exceeding maxWalletLimit\"\r\n            );\r\n        }\r\n        if (sender != pair && !exemptFee[recipient] && !exemptFee[sender]) {\r\n           \r\n            if (recipient != pair) {\r\n                require(balanceOf(recipient) + amount <= maxWalletLimit,\r\n                    \"You are exceeding maxWalletLimit\"\r\n                );\r\n            }\r\n        }\r\n       \r\n        uint256 swapfee;\r\n        uint256 fee;\r\n        Taxes memory currentTaxes;\r\n        bool useEarlyFee = !exemptFee[sender] &&\r\n            !exemptFee[recipient] &&\r\n            block.number < kill_block + deadline;\r\n        if (exemptFee[sender] || exemptFee[recipient])\r\n            fee = 0;\r\n\r\n        else if (recipient == pair && !useEarlyFee) { \r\n            swapfee = sellTaxes.liquidity + sellTaxes.marketing;\r\n            currentTaxes = sellTaxes;\r\n        } else if (sender == pair && recipient != address(router) && !useEarlyFee) { \r\n            swapfee = buytaxes.liquidity + buytaxes.marketing;\r\n            currentTaxes = buytaxes;\r\n        } else if (useEarlyFee) {\r\n            swapfee = Earlytaxes;\r\n        }\r\n        fee = (amount * swapfee) / 100;\r\n       \r\n       if(sender != pair && recipient != pair) { \r\n          fee = 0;\r\n       }\r\n        if (LpProvider && sender != pair) Liquify(swapfee, currentTaxes);\r\n\r\n        super._transfer(sender, recipient, amount - fee);\r\n        if (fee > 0) {\r\n    \r\n            if (swapfee > 0) {\r\n                uint256 feeAmount = (amount * swapfee) / 100;\r\n                super._transfer(sender, address(this), feeAmount);\r\n            }\r\n\r\n        }\r\n    }\r\n    function Liquify(uint256 swapfee, Taxes memory swapTaxes) private lockTheSwap {\r\n        if(swapfee == 0){\r\n            return;\r\n        }\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance >= ThresholdTokens) {\r\n            if (ThresholdTokens > 1) {\r\n                contractBalance = ThresholdTokens;\r\n            }\r\n            uint256 denominator = swapfee * 2;\r\n            uint256 Liquiditytokens = (contractBalance * swapTaxes.liquidity) / denominator;\r\n            uint256 AmountToSwap = contractBalance - Liquiditytokens;\r\n            uint256 initialBalance = address(this).balance;\r\n            swapTokensForETH(AmountToSwap);\r\n            uint256 deltaBalance = address(this).balance - initialBalance;\r\n            uint256 unitBalance = deltaBalance / (denominator - swapTaxes.liquidity);\r\n            uint256 LiquidityEth = unitBalance * swapTaxes.liquidity;\r\n            if (LiquidityEth  > 0) {\r\n                addLiquidity(Liquiditytokens, LiquidityEth);\r\n            }\r\n            uint256 marketingAmt = unitBalance * 2 * swapTaxes.marketing;\r\n            if (marketingAmt > 0) {\r\n                payable(marketingWallet).sendValue(marketingAmt);\r\n            }\r\n        }\r\n    }\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        require(tokenAmount > 0, \"Amount should be greater than zero\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{ value: ethAmount }(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            DeadAddy,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function updateLiquidityProvide(bool _state) external onlyOwner {LpProvider = _state;}\r\n    function updateThreshold(uint256 _liquidityThreshold) external onlyOwner { ThresholdTokens = _liquidityThreshold * 10**decimals();}\r\n    function SetBuyTaxes( uint256 _marketing, uint256 _liquidity) external onlyOwner { buytaxes = Taxes(_marketing, _liquidity); }\r\n    function SetSellTaxes( uint256 _marketing, uint256 _liquidity) external onlyOwner { sellTaxes = Taxes(_marketing, _liquidity); }\r\n    function setIsEarlyBuyer(address account, bool state) external onlyOwner { isearlybuyer[account] = state; }\r\n    function removeTxLimit() external onlyOwner{ maxWalletLimit = TxlimitFree;}\r\n    function setMaxTxLimit(uint256 maxWallet)external onlyOwner{require(maxWallet >= 1e9,\"revert: invalid maxWallet\");maxWalletLimit = maxWallet * 10**decimals();}\r\n    function go_live() external onlyOwner{require(!tradingEnabled,\"Cannot re-enable trading\");\r\n    tradingEnabled = true; \r\n    LpProvider = true;\r\n    kill_block = block.number;\r\n    }\r\n    function setMultiEarlyBuyer(address[] memory accounts, bool state) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            isearlybuyer[accounts[i]] = state;\r\n        }\r\n    }\r\n    function setMarketingWallet(address _newWallet) external onlyOwner {\r\n        require(_newWallet != address(0),\"Fee Address cannot be zero address\");\r\n        require(_newWallet != address(this),\"Fee Addy cannot be CA\");\r\n        marketingWallet = _newWallet;\r\n        exemptFee[_newWallet] = true;\r\n    }\r\n    function addExemptFee(address _address) external onlyOwner {\r\n        require(_address != address(0), \"Address cannot be the zero address\");\r\n        exemptFee[_address] = true;\r\n    }\r\n     function removeExemptFee(address _address) external onlyOwner {\r\n        require(_address != address(0), \"Address cannot be the zero address\");\r\n        exemptFee[_address] = false;\r\n    }\r\n    function ClearETHBalance() external {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        require(contractETHBalance > 0, \"Amount should be greater than zero\");\r\n        require(contractETHBalance <= address(this).balance, \"Insufficient Amount\");\r\n        payable(owner()).sendValue(contractETHBalance);\r\n    }\r\n    function ClearERC20Tokens(address _tokenAddy, uint256 _amount) external onlyOwner {\r\n        require(_tokenAddy != address(this), \"Owner can't claim contract's balance of its own tokens\");\r\n        require(_amount > 0, \"Amount should be greater than zero\");\r\n        require(_amount <= IERC20(_tokenAddy).balanceOf(address(this)), \"Insufficient Amount\");\r\n        IERC20(_tokenAddy).transfer(owner(), _amount);\r\n    }\r\n\r\n    // fallbacks\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClearERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClearETHBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DeadAddy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"SetBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"SetSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"go_live\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setIsEarlyBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMultiEarlyBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"updateLiquidityProvide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityThreshold\",\"type\":\"uint256\"}],\"name\":\"updateThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PLANETX", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ec3ffcc9facba4b2e794f5ddb7b1d008e3b5f08e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a9111c1e546831d7e9718748a0ed2f076f3b9e052d6738aeed16f4b92b3c7e95"}