{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-08-02\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721{\r\n    function balanceOf(address owner) external view returns (uint256 balance);    \r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external  view  returns (uint256);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\ncontract GameStaking{\r\n    address SanshiNFT = 0x6976Af8b25C97A090769Fa97ca9359c891353f61;\r\n    address owner;\r\n    bool public unstake_enable = true;\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(uint256 => uint256)) public _tokensOfOwners; // address of Owner => (number in stacking => NFT ids)\r\n\r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function tokensOfOwner_NFT(address _owner, uint256 _start, uint256 _end) external view returns(uint256[] memory) {\r\n        uint256[] memory tokensId = new uint256[](_end - _start);\r\n        for(uint i = _start; i < _end; i++){\r\n            tokensId[i] = IERC721(SanshiNFT).tokenOfOwnerByIndex(_owner, i);\r\n        }\r\n        return tokensId;\r\n    }\r\n\r\n    function depositNft(uint256[] memory tokenIds) public {\r\n        address Staker = msg.sender;\r\n        require(IERC721(SanshiNFT).isApprovedForAll(Staker, address(this)), \": Game token consumption not allowed\");\r\n        for(uint i = 0; i < tokenIds.length; i++){\r\n            IERC721(SanshiNFT).transferFrom(Staker, address(this), tokenIds[i]); //transfer the token with the specified id to the balance of the staking contract\r\n            _balances[Staker]++; //increase staker balance\r\n            uint256 Staker_balance = _balances[Staker];            \r\n            _tokensOfOwners[Staker][Staker_balance] = tokenIds[i]; // We remember the token id on the stack in order           \r\n        }\r\n    }\r\n\r\n    function unstakeNft(uint256 _count) public {\r\n        address Staker = msg.sender;\r\n        require(_balances[Staker] > 0, \": No tokens in staking\");\r\n        require(unstake_enable == true, \": Unstaking not enable\");\r\n        for(uint i = 0; i < _count; i++){           \r\n            uint256 Staker_balance = _balances[Staker];\r\n            uint256 tokenId = _tokensOfOwners[Staker][Staker_balance];\r\n            IERC721(SanshiNFT).transferFrom(address(this), Staker, tokenId); //transfer the token \r\n            _balances[Staker]--; //decrease staker balance\r\n        }\r\n    }\r\n\r\n    function set_SanshiNFT(address _SanshiNFT) external onlyOwner {\r\n        SanshiNFT = _SanshiNFT;\r\n    }\r\n\r\n    function flip_unstake_enable() external onlyOwner {\r\n        unstake_enable = !unstake_enable;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokensOfOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"depositNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flip_unstake_enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SanshiNFT\",\"type\":\"address\"}],\"name\":\"set_SanshiNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwner_NFT\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"unstakeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake_enable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GameStaking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cda88f3a953e7c8215c73ef5f18270c7beb6e68e939bc56cdd6b040cd4569956"}