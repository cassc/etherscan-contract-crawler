{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/SmartFarmingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./dependencies/openzeppelin/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/external/IStargateComposerWithRetry.sol\\\";\\nimport \\\"./access/Manageable.sol\\\";\\nimport \\\"./storage/SmartFarmingManagerStorage.sol\\\";\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"./lib/CrossChainLib.sol\\\";\\n\\nerror SyntheticDoesNotExist();\\nerror PoolIsNull();\\nerror FlashRepaySlippageTooHigh();\\nerror LeverageTooLow();\\nerror LeverageTooHigh();\\nerror LeverageSlippageTooHigh();\\nerror PositionIsNotHealthy();\\nerror AmountIsZero();\\nerror AmountIsTooHigh();\\nerror DepositTokenDoesNotExist();\\nerror AddressIsNull();\\nerror NewValueIsSameAsCurrent();\\nerror CrossChainRequestInvalidKey();\\nerror SenderIsNotCrossChainDispatcher();\\nerror CrossChainRequestCompletedAlready();\\nerror TokenInIsNull();\\nerror BridgeTokenIsNull();\\nerror CrossChainFlashRepayInactive();\\n\\n// Note: The `IPoolRegistry` wasn't updated to avoid changing interface\\n// Refs: https://github.com/autonomoussoftware/metronome-synth/issues/877\\ninterface IPoolRegistryV3 is IPoolRegistry {\\n    function isCrossChainFlashRepayActive() external view returns (bool);\\n}\\n\\n/**\\n * @title SmartFarmingManager contract\\n */\\ncontract SmartFarmingManager is ReentrancyGuard, Manageable, SmartFarmingManagerStorageV1 {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for ISyntheticToken;\\n    using WadRayMath for uint256;\\n\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    /// @notice Emitted when a cross-chain leverage request is finalized\\n    event CrossChainLeverageFinished(uint256 indexed id);\\n\\n    /// @notice Emitted when a cross-chain leverage request is created\\n    event CrossChainLeverageStarted(uint256 indexed id);\\n\\n    /// @notice Emitted when a cross-chain flash repay request is finalized\\n    event CrossChainFlashRepayFinished(uint256 indexed id);\\n\\n    /// @notice Emitted when a cross-chain flash repay request is created\\n    event CrossChainFlashRepayStarted(uint256 indexed id);\\n\\n    /// @notice Emitted when debt is flash repaid\\n    event FlashRepaid(\\n        ISyntheticToken indexed syntheticToken,\\n        IDepositToken indexed depositToken,\\n        uint256 withdrawn,\\n        uint256 repaid\\n    );\\n\\n    /// @notice Emitted when deposit is leveraged\\n    event Leveraged(\\n        IERC20 indexed tokenIn,\\n        IDepositToken indexed depositToken,\\n        ISyntheticToken indexed syntheticToken,\\n        uint256 leverage,\\n        uint256 amountIn,\\n        uint256 issued,\\n        uint256 deposited\\n    );\\n\\n    /**\\n     * @dev Throws if sender isn't a valid ProxyOFT contract\\n     */\\n    modifier onlyIfCrossChainDispatcher() {\\n        if (msg.sender != address(crossChainDispatcher())) revert SenderIsNotCrossChainDispatcher();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if deposit token doesn't exist\\n     */\\n    modifier onlyIfDepositTokenExists(IDepositToken depositToken_) {\\n        if (!pool.doesDepositTokenExist(depositToken_)) revert DepositTokenDoesNotExist();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if synthetic token doesn't exist\\n     */\\n    modifier onlyIfSyntheticTokenExists(ISyntheticToken syntheticToken_) {\\n        if (!pool.doesSyntheticTokenExist(syntheticToken_)) revert SyntheticDoesNotExist();\\n        _;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(IPool pool_) public initializer {\\n        if (address(pool_) == address(0)) revert PoolIsNull();\\n        __ReentrancyGuard_init();\\n        __Manageable_init(pool_);\\n    }\\n\\n    /**\\n     * @notice Get the Cross-chain dispatcher contract\\n     */\\n    function crossChainDispatcher() public view returns (ICrossChainDispatcher _crossChainDispatcher) {\\n        return pool.poolRegistry().crossChainDispatcher();\\n    }\\n\\n    /***\\n     * @notice Cross-chain flash debt repayment\\n     * @dev Not calling `whenNotShutdown` here because nested function already does it\\n     * @param syntheticToken_ The debt token to repay\\n     * @param depositToken_ The collateral to withdraw\\n     * @param withdrawAmount_ The amount to withdraw\\n     * @param bridgeToken_ The asset that will be bridged out and used to swap for msAsset\\n     * @param bridgeTokenAmountMin_ The minimum amount out when converting collateral for bridgeToken if they aren't the same (slippage check)\\n     * @param swapAmountOutMin_ The minimum amount out from the bridgeToken->msAsset swap (slippage check)\\n     * @param repayAmountMin_ The minimum amount to repay (slippage check)\\n     * @param lzArgs_ The LayerZero params (See: `Quoter.getFlashRepaySwapAndCallbackLzArgs()`)\\n     */\\n    function crossChainFlashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        IERC20 bridgeToken_,\\n        uint256 bridgeTokenAmountMin_,\\n        uint256 swapAmountOutMin_,\\n        uint256 repayAmountMin_,\\n        bytes calldata lzArgs_\\n    )\\n        external\\n        payable\\n        override\\n        nonReentrant\\n        onlyIfDepositTokenExists(depositToken_)\\n        onlyIfSyntheticTokenExists(syntheticToken_)\\n    {\\n        if (withdrawAmount_ == 0) revert AmountIsZero();\\n        if (!IPoolRegistryV3(address(pool.poolRegistry())).isCrossChainFlashRepayActive())\\n            revert CrossChainFlashRepayInactive();\\n\\n        ICrossChainDispatcher _crossChainDispatcher;\\n        {\\n            IDebtToken _debtToken = pool.debtTokenOf(syntheticToken_);\\n            _debtToken.accrueInterest();\\n            if (repayAmountMin_ > _debtToken.balanceOf(msg.sender)) revert AmountIsTooHigh();\\n\\n            _crossChainDispatcher = crossChainDispatcher();\\n        }\\n\\n        uint256 _amountIn;\\n        {\\n            // 1. withdraw collateral\\n            // Note: No need to check healthy because this function ensures withdrawing only from unlocked balance\\n            (_amountIn, ) = depositToken_.withdrawFrom(msg.sender, withdrawAmount_);\\n\\n            // 2. swap collateral for bridge token\\n            _amountIn = _swap({\\n                swapper_: swapper(),\\n                tokenIn_: _collateralOf(depositToken_),\\n                tokenOut_: bridgeToken_,\\n                amountIn_: _amountIn,\\n                amountOutMin_: bridgeTokenAmountMin_,\\n                to_: address(_crossChainDispatcher)\\n            });\\n        }\\n\\n        // 3. store request and trigger swap\\n        _triggerFlashRepaySwap({\\n            crossChainDispatcher_: _crossChainDispatcher,\\n            swapTokenIn_: bridgeToken_,\\n            swapTokenOut_: syntheticToken_,\\n            swapAmountIn_: _amountIn,\\n            swapAmountOutMin_: swapAmountOutMin_,\\n            repayAmountMin_: repayAmountMin_,\\n            lzArgs_: lzArgs_\\n        });\\n    }\\n\\n    /**\\n     * @dev Stores flash repay cross-chain request and triggers swap on the destination chain\\n     */\\n    function _triggerFlashRepaySwap(\\n        ICrossChainDispatcher crossChainDispatcher_,\\n        IERC20 swapTokenIn_,\\n        ISyntheticToken swapTokenOut_,\\n        uint256 swapAmountIn_,\\n        uint256 swapAmountOutMin_,\\n        uint256 repayAmountMin_,\\n        bytes calldata lzArgs_\\n    ) private {\\n        uint256 _id = _nextCrossChainRequestId();\\n\\n        (uint16 _dstChainId, , ) = CrossChainLib.decodeLzArgs(lzArgs_);\\n\\n        crossChainFlashRepays[_id] = CrossChainFlashRepay({\\n            dstChainId: _dstChainId,\\n            syntheticToken: swapTokenOut_,\\n            repayAmountMin: repayAmountMin_,\\n            account: msg.sender,\\n            finished: false\\n        });\\n\\n        crossChainDispatcher_.triggerFlashRepaySwap{value: msg.value}({\\n            id_: _id,\\n            account_: payable(msg.sender),\\n            tokenIn_: address(swapTokenIn_),\\n            tokenOut_: address(swapTokenOut_),\\n            amountIn_: swapAmountIn_,\\n            amountOutMin_: swapAmountOutMin_,\\n            lzArgs_: lzArgs_\\n        });\\n\\n        emit CrossChainFlashRepayStarted(_id);\\n    }\\n\\n    /**\\n     * @notice Finalize cross-chain flash debt repayment process\\n     * @dev Receives msAsset from L1 and use it to repay\\n     * @param id_ The id of the request\\n     * @param swapAmountOut_ The msAsset amount received from L1 swap\\n     * @return _repaid The debt amount repaid\\n     */\\n    function crossChainFlashRepayCallback(\\n        uint256 id_,\\n        uint256 swapAmountOut_\\n    ) external override whenNotShutdown nonReentrant onlyIfCrossChainDispatcher returns (uint256 _repaid) {\\n        CrossChainFlashRepay memory _request = crossChainFlashRepays[id_];\\n\\n        if (_request.account == address(0)) revert CrossChainRequestInvalidKey();\\n        if (_request.finished) revert CrossChainRequestCompletedAlready();\\n\\n        // 1. update state\\n        crossChainFlashRepays[id_].finished = true;\\n\\n        // 2. transfer synthetic token\\n        swapAmountOut_ = _safeTransferFrom(_request.syntheticToken, msg.sender, swapAmountOut_);\\n\\n        // 3. repay debt\\n        IDebtToken _debtToken = pool.debtTokenOf(_request.syntheticToken);\\n        (uint256 _maxRepayAmount, ) = _debtToken.quoteRepayIn(_debtToken.balanceOf(_request.account));\\n        uint256 _repayAmount = Math.min(swapAmountOut_, _maxRepayAmount);\\n        (_repaid, ) = _debtToken.repay(_request.account, _repayAmount);\\n        if (_repaid < _request.repayAmountMin) revert FlashRepaySlippageTooHigh();\\n\\n        // 4. refund synthetic token in excess\\n        if (swapAmountOut_ > _repayAmount) {\\n            _request.syntheticToken.safeTransfer(_request.account, swapAmountOut_ - _repayAmount);\\n        }\\n\\n        emit CrossChainFlashRepayFinished(id_);\\n    }\\n\\n    /**\\n     * @dev Keep this function to avoid changing interface\\n     * Refs: https://github.com/autonomoussoftware/metronome-synth/issues/877\\n     */\\n    function crossChainLeverage(\\n        IERC20,\\n        IDepositToken,\\n        ISyntheticToken,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external payable override {\\n        revert(\\\"deprecated\\\");\\n    }\\n\\n    /***\\n     * @notice Cross-chain Leverage\\n     * @dev Not calling `whenNotShutdown` here because nested function already does it\\n     * @param tokenIn_ The token to transfer\\n     * @param syntheticToken_ The msAsset to mint\\n     * @param bridgeToken_ The asset that will be used to swap from msAsset and bridged back\\n     * @param depositToken_ The collateral to deposit\\n     * @param amountIn_ The amount to deposit\\n     * @param leverage_ The leverage X param (e.g. 1.5e18 for 1.5X)\\n     * @param swapAmountOutMin_ The minimum amount out from msAsset->bridgeToken swap (slippage check)\\n     * @param depositAmountMin_ The minimum final amount to deposit (slippage check)\\n     * @param lzArgs_ The LayerZero params (See: `Quoter.getLeverageSwapAndCallbackLzArgs()`)\\n     */\\n    function crossChainLeverage(\\n        IERC20 tokenIn_,\\n        ISyntheticToken syntheticToken_,\\n        IERC20 bridgeToken_,\\n        IDepositToken depositToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 swapAmountOutMin_,\\n        uint256 depositAmountMin_,\\n        bytes calldata lzArgs_\\n    )\\n        external\\n        payable\\n        // Note: Not adding this function to the `ISmartFarmingInterface` to avoid changing interface\\n        // Refs: https://github.com/autonomoussoftware/metronome-synth/issues/877\\n        // override\\n        nonReentrant\\n        onlyIfDepositTokenExists(depositToken_)\\n        onlyIfSyntheticTokenExists(syntheticToken_)\\n    {\\n        IERC20 _tokenIn = tokenIn_; // stack too deep\\n\\n        if (amountIn_ == 0) revert AmountIsZero();\\n        if (leverage_ <= 1e18) revert LeverageTooLow();\\n        if (leverage_ > uint256(1e18).wadDiv(1e18 - depositToken_.collateralFactor())) revert LeverageTooHigh();\\n        if (address(_tokenIn) == address(0)) revert TokenInIsNull();\\n        if (address(bridgeToken_) == address(0)) revert BridgeTokenIsNull();\\n\\n        uint256 _debtAmount;\\n        uint256 _issued;\\n        {\\n            // 1. transfer tokenIn\\n            amountIn_ = _safeTransferFrom(_tokenIn, msg.sender, amountIn_);\\n\\n            // 2. mint synth\\n            _debtAmount = _calculateLeverageDebtAmount(_tokenIn, syntheticToken_, amountIn_, leverage_);\\n            (_issued, ) = pool.debtTokenOf(syntheticToken_).flashIssue(address(crossChainDispatcher()), _debtAmount);\\n        }\\n\\n        bytes memory _swapArgs = abi.encode(syntheticToken_, bridgeToken_, _issued, swapAmountOutMin_); // stack too deep\\n        IDepositToken _depositToken = depositToken_; // stack too deep\\n\\n        // 3. store request and trigger swap\\n        _triggerCrossChainLeverageSwap({\\n            tokenIn_: _tokenIn,\\n            amountIn_: amountIn_,\\n            debtAmount_: _debtAmount,\\n            swapArgs_: _swapArgs,\\n            depositToken_: _depositToken,\\n            depositAmountMin_: depositAmountMin_,\\n            lzArgs_: lzArgs_\\n        });\\n    }\\n\\n    /**\\n     * @dev Stores leverage cross-chain request and triggers swap on the destination chain\\n     */\\n    function _triggerCrossChainLeverageSwap(\\n        IERC20 tokenIn_,\\n        uint256 amountIn_,\\n        uint256 debtAmount_,\\n        bytes memory swapArgs_,\\n        IDepositToken depositToken_,\\n        uint256 depositAmountMin_,\\n        bytes calldata lzArgs_\\n    ) private {\\n        uint256 _id = _nextCrossChainRequestId();\\n\\n        (ISyntheticToken _swapTokenIn, IERC20 _swapTokenOut, uint256 _swapAmountIn, uint256 _swapAmountOutMin) = abi\\n            .decode(swapArgs_, (ISyntheticToken, IERC20, uint256, uint256));\\n\\n        {\\n            (uint16 _dstChainId, , ) = CrossChainLib.decodeLzArgs(lzArgs_);\\n\\n            crossChainLeverages[_id] = CrossChainLeverage({\\n                dstChainId: _dstChainId,\\n                tokenIn: tokenIn_,\\n                syntheticToken: _swapTokenIn,\\n                bridgeToken: _swapTokenOut,\\n                depositToken: depositToken_,\\n                amountIn: amountIn_,\\n                debtAmount: debtAmount_,\\n                depositAmountMin: depositAmountMin_,\\n                account: msg.sender,\\n                finished: false\\n            });\\n        }\\n\\n        crossChainDispatcher().triggerLeverageSwap{value: msg.value}({\\n            id_: _id,\\n            account_: payable(msg.sender),\\n            tokenIn_: address(_swapTokenIn),\\n            tokenOut_: address(_swapTokenOut),\\n            amountIn_: _swapAmountIn,\\n            amountOutMin: _swapAmountOutMin,\\n            lzArgs_: lzArgs_\\n        });\\n\\n        emit CrossChainLeverageStarted(_id);\\n    }\\n\\n    /**\\n     * @notice Finalize cross-chain leverage process\\n     * @dev Receives bridged token (aka naked token) use it to deposit\\n     * @param id_ The id of the request\\n     * @param swapAmountOut_ The amount received from swap\\n     * @return _deposited The amount deposited\\n     */\\n    function crossChainLeverageCallback(\\n        uint256 id_,\\n        uint256 swapAmountOut_\\n    ) external override whenNotShutdown nonReentrant onlyIfCrossChainDispatcher returns (uint256 _deposited) {\\n        CrossChainLeverage memory _request = crossChainLeverages[id_];\\n\\n        if (_request.account == address(0)) revert CrossChainRequestInvalidKey();\\n        if (_request.finished) revert CrossChainRequestCompletedAlready();\\n        IERC20 _collateral = _collateralOf(_request.depositToken);\\n\\n        // 1. update state\\n        crossChainLeverages[id_].finished = true;\\n\\n        // 2. transfer swap's tokenOut (aka bridged token)\\n        swapAmountOut_ = _safeTransferFrom(_request.bridgeToken, msg.sender, swapAmountOut_);\\n\\n        // 3. swap received tokens for collateral if needed\\n        // Note: The internal `_swap()` doesn't swap if `tokenIn` and `tokenOut` are the same\\n        uint256 _depositAmount;\\n        if (_request.tokenIn == _request.bridgeToken) {\\n            _depositAmount = _swap(swapper(), _request.tokenIn, _collateral, _request.amountIn + swapAmountOut_, 0);\\n        } else {\\n            _depositAmount = _swap(swapper(), _request.tokenIn, _collateral, _request.amountIn, 0);\\n            _depositAmount += _swap(swapper(), _request.bridgeToken, _collateral, swapAmountOut_, 0);\\n        }\\n\\n        if (_depositAmount < _request.depositAmountMin) revert LeverageSlippageTooHigh();\\n\\n        // 4. deposit collateral\\n        _collateral.safeApprove(address(_request.depositToken), 0);\\n        _collateral.safeApprove(address(_request.depositToken), _depositAmount);\\n        (_deposited, ) = _request.depositToken.deposit(_depositAmount, _request.account);\\n\\n        // 5. mint debt\\n        IPool _pool = pool;\\n        _pool.debtTokenOf(_request.syntheticToken).mint(_request.account, _request.debtAmount);\\n\\n        // 6. check the health of the outcome position\\n        (bool _isHealthy, , , , ) = _pool.debtPositionOf(_request.account);\\n        if (!_isHealthy) revert PositionIsNotHealthy();\\n\\n        emit CrossChainLeverageFinished(id_);\\n    }\\n\\n    /**\\n     * @notice Flash debt repayment\\n     * @param syntheticToken_ The debt token to repay\\n     * @param depositToken_ The collateral to withdraw\\n     * @param withdrawAmount_ The amount to withdraw\\n     * @param repayAmountMin_ The minimum amount to repay (slippage check)\\n     */\\n    function flashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        uint256 repayAmountMin_\\n    )\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfDepositTokenExists(depositToken_)\\n        onlyIfSyntheticTokenExists(syntheticToken_)\\n        returns (uint256 _withdrawn, uint256 _repaid)\\n    {\\n        if (withdrawAmount_ == 0) revert AmountIsZero();\\n        if (withdrawAmount_ > depositToken_.balanceOf(msg.sender)) revert AmountIsTooHigh();\\n        IPool _pool = pool;\\n        IDebtToken _debtToken = _pool.debtTokenOf(syntheticToken_);\\n        if (repayAmountMin_ > _debtToken.balanceOf(msg.sender)) revert AmountIsTooHigh();\\n\\n        // 1. withdraw collateral\\n        (_withdrawn, ) = depositToken_.flashWithdraw(msg.sender, withdrawAmount_);\\n\\n        // 2. swap it for synth\\n        uint256 _amountToRepay = _swap(swapper(), _collateralOf(depositToken_), syntheticToken_, _withdrawn, 0);\\n\\n        // 3. repay debt\\n        (_repaid, ) = _debtToken.repay(msg.sender, _amountToRepay);\\n        if (_repaid < repayAmountMin_) revert FlashRepaySlippageTooHigh();\\n\\n        // 4. check the health of the outcome position\\n        (bool _isHealthy, , , , ) = _pool.debtPositionOf(msg.sender);\\n        if (!_isHealthy) revert PositionIsNotHealthy();\\n\\n        emit FlashRepaid(syntheticToken_, depositToken_, _withdrawn, _repaid);\\n    }\\n\\n    /**\\n     * @notice Leverage yield position\\n     * @param tokenIn_ The token to transfer\\n     * @param depositToken_ The collateral to deposit\\n     * @param syntheticToken_ The msAsset to mint\\n     * @param amountIn_ The amount to deposit\\n     * @param leverage_ The leverage X param (e.g. 1.5e18 for 1.5X)\\n     * @param depositAmountMin_ The min final deposit amount (slippage)\\n     */\\n    function leverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 depositAmountMin_\\n    )\\n        external\\n        override\\n        whenNotShutdown\\n        nonReentrant\\n        onlyIfDepositTokenExists(depositToken_)\\n        onlyIfSyntheticTokenExists(syntheticToken_)\\n        returns (uint256 _deposited, uint256 _issued)\\n    {\\n        if (amountIn_ == 0) revert AmountIsZero();\\n        if (leverage_ <= 1e18) revert LeverageTooLow();\\n        if (leverage_ > uint256(1e18).wadDiv(1e18 - depositToken_.collateralFactor())) revert LeverageTooHigh();\\n\\n        ISwapper _swapper = swapper();\\n\\n        // 1. transfer collateral\\n        IERC20 _collateral = _collateralOf(depositToken_);\\n        if (address(tokenIn_) == address(0)) tokenIn_ = _collateral;\\n        amountIn_ = _safeTransferFrom(tokenIn_, msg.sender, amountIn_);\\n        if (tokenIn_ != _collateral) {\\n            // Note: `amountOutMin_` is `0` because slippage will be checked later on\\n            amountIn_ = _swap(_swapper, tokenIn_, _collateral, amountIn_, 0);\\n        }\\n\\n        {\\n            // 2. mint synth + debt\\n            uint256 _debtAmount = _calculateLeverageDebtAmount(_collateral, syntheticToken_, amountIn_, leverage_);\\n            IDebtToken _debtToken = pool.debtTokenOf(syntheticToken_);\\n            (_issued, ) = _debtToken.flashIssue(address(this), _debtAmount);\\n            _debtToken.mint(msg.sender, _debtAmount);\\n        }\\n\\n        // 3. swap synth for collateral\\n        uint256 _depositAmount = amountIn_ + _swap(_swapper, syntheticToken_, _collateral, _issued, 0);\\n        if (_depositAmount < depositAmountMin_) revert LeverageSlippageTooHigh();\\n\\n        // 4. deposit collateral\\n        _collateral.safeApprove(address(depositToken_), 0);\\n        _collateral.safeApprove(address(depositToken_), _depositAmount);\\n        (_deposited, ) = depositToken_.deposit(_depositAmount, msg.sender);\\n\\n        // 5. check the health of the outcome position\\n        (bool _isHealthy, , , , ) = pool.debtPositionOf(msg.sender);\\n        if (!_isHealthy) revert PositionIsNotHealthy();\\n\\n        emit Leveraged(tokenIn_, depositToken_, syntheticToken_, leverage_, amountIn_, _issued, _deposited);\\n    }\\n\\n    /**\\n     * @notice Retry cross-chain flash repay callback\\n     * @dev This function is used to recover from callback failures due to slippage\\n     * @param srcChainId_ The source chain of failed tx\\n     * @param srcAddress_ The source path of failed tx\\n     * @param nonce_ The nonce of failed tx\\n     * @param amount_ The amount of failed tx\\n     * @param payload_ The payload of failed tx\\n     * @param newRepayAmountMin_ If repayment failed due to slippage, caller may send lower newRepayAmountMin_\\n     */\\n    function retryCrossChainFlashRepayCallback(\\n        uint16 srcChainId_,\\n        bytes calldata srcAddress_,\\n        uint64 nonce_,\\n        uint256 amount_,\\n        bytes calldata payload_,\\n        uint256 newRepayAmountMin_\\n    ) external {\\n        (, , uint256 _requestId) = CrossChainLib.decodeFlashRepayCallbackPayload(payload_);\\n\\n        CrossChainFlashRepay memory _request = crossChainFlashRepays[_requestId];\\n\\n        if (_request.account == address(0)) revert CrossChainRequestInvalidKey();\\n        if (_request.finished) revert CrossChainRequestCompletedAlready();\\n\\n        // Note: Only user can change slippage param\\n        if (msg.sender == _request.account) {\\n            crossChainFlashRepays[_requestId].repayAmountMin = newRepayAmountMin_;\\n        }\\n\\n        ICrossChainDispatcher _crossChainDispatcher = crossChainDispatcher();\\n        bytes memory _from = abi.encodePacked(_crossChainDispatcher.crossChainDispatcherOf(srcChainId_));\\n\\n        _request.syntheticToken.proxyOFT().retryOFTReceived({\\n            _srcChainId: srcChainId_,\\n            _srcAddress: srcAddress_,\\n            _nonce: nonce_,\\n            _from: _from,\\n            _to: address(_crossChainDispatcher),\\n            _amount: amount_,\\n            _payload: payload_\\n        });\\n    }\\n\\n    /**\\n     * @notice Retry cross-chain leverage callback\\n     * @dev This function is used to recover from callback failures due to slippage\\n     * @param srcChainId_ The source chain of failed tx\\n     * @param srcAddress_ The source path of failed tx\\n     * @param nonce_ The nonce of failed tx\\n     * @param token_ The token of failed tx\\n     * @param amount_ The amountIn of failed tx\\n     * @param payload_ The payload of failed tx\\n     * @param newDepositAmountMin_ If deposit failed due to slippage, caller may send lower newDepositAmountMin_\\n     */\\n    function retryCrossChainLeverageCallback(\\n        uint16 srcChainId_,\\n        bytes calldata srcAddress_,\\n        uint64 nonce_,\\n        address token_,\\n        uint256 amount_,\\n        bytes calldata payload_,\\n        uint256 newDepositAmountMin_\\n    ) external {\\n        (, uint256 _requestId) = CrossChainLib.decodeLeverageCallbackPayload(payload_);\\n\\n        CrossChainLeverage memory _request = crossChainLeverages[_requestId];\\n\\n        if (_request.account == address(0)) revert CrossChainRequestInvalidKey();\\n        if (_request.finished) revert CrossChainRequestCompletedAlready();\\n\\n        // Note: Only user can change slippage param\\n        if (msg.sender == _request.account) {\\n            crossChainLeverages[_requestId].depositAmountMin = newDepositAmountMin_;\\n        }\\n\\n        ICrossChainDispatcher _crossChainDispatcher = crossChainDispatcher();\\n\\n        address _from = _crossChainDispatcher.crossChainDispatcherOf(srcChainId_);\\n        bytes memory _sgReceiveCallData = abi.encodeWithSelector(\\n            IStargateReceiver.sgReceive.selector,\\n            srcChainId_,\\n            abi.encodePacked(_from),\\n            nonce_,\\n            token_,\\n            amount_,\\n            payload_\\n        );\\n\\n        IStargateComposerWithRetry(address(_crossChainDispatcher.stargateComposer())).clearCachedSwap(\\n            srcChainId_,\\n            srcAddress_,\\n            nonce_,\\n            address(_crossChainDispatcher),\\n            _sgReceiveCallData\\n        );\\n    }\\n\\n    /**\\n     * @notice Get the swapper contract\\n     */\\n    function swapper() public view returns (ISwapper _swapper) {\\n        return pool.poolRegistry().swapper();\\n    }\\n\\n    /**\\n     * @notice Calculate debt to issue for a leverage operation\\n     * @param collateral_ The collateral to deposit\\n     * @param syntheticToken_ The msAsset to mint\\n     * @param amountIn_ The amount to deposit\\n     * @param leverage_ The leverage X param (e.g. 1.5e18 for 1.5X)\\n     * @return _debtAmount The debt issue\\n     */\\n    function _calculateLeverageDebtAmount(\\n        IERC20 collateral_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_\\n    ) private view returns (uint256 _debtAmount) {\\n        return\\n            pool.masterOracle().quote(\\n                address(collateral_),\\n                address(syntheticToken_),\\n                (leverage_ - 1e18).wadMul(amountIn_)\\n            );\\n    }\\n\\n    /**\\n     * @dev `collateral` is a better name than `underlying`\\n     * See more: https://github.com/autonomoussoftware/metronome-synth/issues/905\\n     */\\n    function _collateralOf(IDepositToken depositToken_) private view returns (IERC20) {\\n        return depositToken_.underlying();\\n    }\\n\\n    /**\\n     * @dev Generates cross-chain request id by hashing `chainId`+`requestId` in order to avoid\\n     * having same id across supported chains\\n     * Note: The cross-chain code mostly uses LZ chain ids but in this case, we're using native id.\\n     */\\n    function _nextCrossChainRequestId() private returns (uint256 _id) {\\n        return uint256(keccak256(abi.encode(block.chainid, ++crossChainRequestsLength)));\\n    }\\n\\n    /**\\n     * @notice Transfer token and check actual amount transferred\\n     * @param token_ The token to transfer\\n     * @param from_ The account to get tokens from\\n     * @param amount_ The amount to transfer\\n     * @return _transferred The actual transferred amount\\n     */\\n    function _safeTransferFrom(IERC20 token_, address from_, uint256 amount_) private returns (uint256 _transferred) {\\n        uint256 _before = token_.balanceOf(address(this));\\n        token_.safeTransferFrom(from_, address(this), amount_);\\n        return token_.balanceOf(address(this)) - _before;\\n    }\\n\\n    /**\\n     * @notice Swap assets using Swapper contract\\n     * @dev Use `address(this)` as amount out receiver\\n     * @param swapper_ The Swapper contract\\n     * @param tokenIn_ The token to swap from\\n     * @param tokenOut_ The token to swap to\\n     * @param amountIn_ The amount in\\n     * @param amountOutMin_ The minimum amount out (slippage check)\\n     * @return _amountOut The actual amount out\\n     */\\n    function _swap(\\n        ISwapper swapper_,\\n        IERC20 tokenIn_,\\n        IERC20 tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_\\n    ) private returns (uint256 _amountOut) {\\n        return _swap(swapper_, tokenIn_, tokenOut_, amountIn_, amountOutMin_, address(this));\\n    }\\n\\n    /**\\n     * @notice Swap assets using Swapper contract\\n     * @param swapper_ The Swapper contract\\n     * @param tokenIn_ The token to swap from\\n     * @param tokenOut_ The token to swap to\\n     * @param amountIn_ The amount in\\n     * @param amountOutMin_ The minimum amount out (slippage check)\\n     * @param to_ The amount out receiver\\n     * @return _amountOut The actual amount out\\n     */\\n    function _swap(\\n        ISwapper swapper_,\\n        IERC20 tokenIn_,\\n        IERC20 tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address to_\\n    ) private returns (uint256 _amountOut) {\\n        if (tokenIn_ != tokenOut_) {\\n            tokenIn_.safeApprove(address(swapper_), 0);\\n            tokenIn_.safeApprove(address(swapper_), amountIn_);\\n            uint256 _tokenOutBefore = tokenOut_.balanceOf(to_);\\n            swapper_.swapExactInput(address(tokenIn_), address(tokenOut_), amountIn_, amountOutMin_, to_);\\n            return tokenOut_.balanceOf(to_) - _tokenOutBefore;\\n        } else if (to_ != address(this)) {\\n            tokenIn_.safeTransfer(to_, amountIn_);\\n        }\\n        return amountIn_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/Manageable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\nimport \\\"../interfaces/IManageable.sol\\\";\\n\\nerror SenderIsNotPool();\\nerror SenderIsNotGovernor();\\nerror IsPaused();\\nerror IsShutdown();\\nerror PoolAddressIsNull();\\n\\n/**\\n * @title Reusable contract that handles accesses\\n */\\nabstract contract Manageable is IManageable, Initializable {\\n    /**\\n     * @notice Pool contract\\n     */\\n    IPool public pool;\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't the pool\\n     */\\n    modifier onlyPool() {\\n        if (msg.sender != address(pool)) revert SenderIsNotPool();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if `msg.sender` isn't the governor\\n     */\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor()) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is paused\\n     */\\n    modifier whenNotPaused() {\\n        if (pool.paused()) revert IsPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if contract is shutdown\\n     */\\n    modifier whenNotShutdown() {\\n        if (pool.everythingStopped()) revert IsShutdown();\\n        _;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Manageable_init(IPool pool_) internal onlyInitializing {\\n        if (address(pool_) == address(0)) revert PoolAddressIsNull();\\n        pool = pool_;\\n    }\\n\\n    /**\\n     * @notice Get the governor\\n     * @return _governor The governor\\n     */\\n    function governor() public view returns (address _governor) {\\n        _governor = IGovernable(address(pool)).governor();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/IOFTCoreUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../../../../openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCoreUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../IOFTCoreUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the composable OFT core standard\\n */\\ninterface IComposableOFTCoreUpgradeable is IOFTCoreUpgradeable {\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function retryOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n\\n    event CallOFTReceivedFailure(\\n        uint16 indexed _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _from,\\n        address indexed _to,\\n        uint _amount,\\n        bytes _payload,\\n        bytes _reason\\n    );\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event RetryOFTReceivedSuccess(bytes32 _messageHash);\\n\\n    event NonContractAddress(address _address);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverUpgradeable {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/stargate-protocol/interfaces/IStargateComposer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStargateRouter.sol\\\";\\n\\ninterface IStargateComposer {\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        IStargateRouter.lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function factory() external view returns (address);\\n\\n    function stargateBridge() external view returns (address);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        IStargateRouter.lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function peers(uint16 _chainId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/stargate-protocol/interfaces/IStargateRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function clearCachedSwap(uint16 _srcChainId, bytes calldata _srcAddress, uint256 _nonce) external;\\n\\n    function factory() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function cachedSwapLookup(\\n        uint16 _chainId_,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (address token, uint256 amountLD, address to, bytes memory payload);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICrossChainDispatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateRouter.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateComposer.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface ICrossChainDispatcher is IStargateReceiver, IOFTReceiverUpgradeable {\\n    function crossChainDispatcherOf(uint16 chainId_) external view returns (address);\\n\\n    function triggerFlashRepaySwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function triggerLeverageSwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function isBridgingActive() external view returns (bool);\\n\\n    function flashRepayCallbackTxGasLimit() external view returns (uint64);\\n\\n    function flashRepaySwapTxGasLimit() external view returns (uint64);\\n\\n    function leverageCallbackTxGasLimit() external view returns (uint64);\\n\\n    function leverageSwapTxGasLimit() external view returns (uint64);\\n\\n    function lzBaseGasLimit() external view returns (uint256);\\n\\n    function stargateComposer() external view returns (IStargateComposer);\\n\\n    function stargateSlippage() external view returns (uint256);\\n\\n    function stargatePoolIdOf(address token_) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address to_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDepositToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralFactor() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function flashWithdraw(address account_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited, uint256 _fee);\\n\\n    function quoteDepositIn(uint256 amountToDeposit_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteDepositOut(uint256 amount_) external view returns (uint256 _amountToDeposit, uint256 _fee);\\n\\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteWithdrawOut(uint256 amount_) external view returns (uint256 _amountToWithdraw, uint256 _fee);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateCollateralFactor(uint128 newCollateralFactor_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function withdrawFrom(address from_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice FeeProvider interface\\n */\\ninterface IFeeProvider {\\n    struct LiquidationFees {\\n        uint128 liquidatorIncentive;\\n        uint128 protocolFee;\\n    }\\n\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFeeFor(address account_) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IManageable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPauseable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IFeeProvider.sol\\\";\\nimport \\\"./ISmartFarmingManager.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"../interfaces/IFeeProvider.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function feeProvider() external view returns (IFeeProvider);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function doesDebtTokenExist(IDebtToken debtToken_) external view returns (bool);\\n\\n    function doesDepositTokenExist(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (address[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(\\n        address account_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeized_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _maxAmountToRepay);\\n\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view returns (uint256 _amountIn, uint256 _fee);\\n\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _fee);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _fee);\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function isSwapActive() external view returns (bool);\\n\\n    function smartFarmingManager() external view returns (ISmartFarmingManager);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"./IQuoter.sol\\\";\\nimport \\\"./ICrossChainDispatcher.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function feeCollector() external view returns (address);\\n\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n\\n    function swapper() external view returns (ISwapper);\\n\\n    function quoter() external view returns (IQuoter);\\n\\n    function crossChainDispatcher() external view returns (ICrossChainDispatcher);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool _exists);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProxyOFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\\\";\\n\\ninterface IProxyOFT is IComposableOFTCoreUpgradeable {\\n    function getProxyOFTOf(uint16 chainId_) external view returns (address _proxyOFT);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IQuoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface IQuoter {\\n    function quoteCrossChainFlashRepayNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteCrossChainLeverageNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteLeverageCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function quoteFlashRepayCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function getFlashRepaySwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n\\n    function getLeverageSwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external;\\n\\n    function claimable(address account_) external view returns (uint256 _claimable);\\n\\n    function claimable(address account_, IERC20 token_) external view returns (uint256 _claimable);\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external;\\n\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external;\\n\\n    function tokens(uint256) external view returns (IERC20);\\n\\n    function tokenStates(IERC20) external view returns (uint224 index, uint32 timestamp);\\n\\n    function accountIndexOf(IERC20, address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISmartFarmingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IManageable.sol\\\";\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\n/**\\n * @notice SmartFarmingManager interface\\n */\\ninterface ISmartFarmingManager {\\n    function flashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        uint256 repayAmountMin_\\n    ) external returns (uint256 _withdrawn, uint256 _repaid);\\n\\n    function crossChainFlashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        IERC20 bridgeToken_,\\n        uint256 bridgeTokenAmountMin_,\\n        uint256 swapAmountOutMin_,\\n        uint256 repayAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 swapAmountOutMin_,\\n        uint256 depositAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverageCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _deposited);\\n\\n    function crossChainFlashRepayCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _repaid);\\n\\n    function leverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 depositAmountMin_\\n    ) external returns (uint256 _deposited, uint256 _issued);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISyntheticToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/IProxyOFT.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateProxyOFT(IProxyOFT newProxyOFT_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function proxyOFT() external view returns (IProxyOFT);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IMasterOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IStargateComposerWithRetry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/stargate-protocol/interfaces/IStargateComposer.sol\\\";\\n\\n// Note: Extending interface instead of adding those function to avoid triggering upgrade for other contracts\\n// We may move functions to `IStargateComposer` on the next major upgrade\\n// Refs: https://github.com/autonomoussoftware/metronome-synth/issues/877\\ninterface IStargateComposerWithRetry is IStargateComposer {\\n    function payloadHashes(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    function clearCachedSwap(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        address _receiver,\\n        bytes calldata _sgReceiveCallData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/ISwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/CrossChainLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary CrossChainLib {\\n    /**\\n     * @notice Supported cross-chain operations\\n     */\\n    uint8 public constant LEVERAGE = 1;\\n    uint8 public constant FLASH_REPAY = 2;\\n\\n    function getOperationType(bytes memory payload_) internal pure returns (uint8 _op) {\\n        (_op, ) = abi.decode(payload_, (uint8, bytes));\\n    }\\n\\n    function encodeLeverageCallbackPayload(\\n        address srcSmartFarmingManager_,\\n        uint256 requestId_\\n    ) internal pure returns (bytes memory _payload) {\\n        return abi.encode(LEVERAGE, abi.encode(srcSmartFarmingManager_, requestId_));\\n    }\\n\\n    function decodeLeverageCallbackPayload(\\n        bytes memory payload_\\n    ) internal pure returns (address _srcSmartFarmingManager, uint256 _requestId) {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, uint256));\\n    }\\n\\n    function encodeFlashRepayCallbackPayload(\\n        address srcProxyOFT_,\\n        address srcSmartFarmingManager_,\\n        uint256 requestId_\\n    ) internal pure returns (bytes memory _payload) {\\n        return abi.encode(FLASH_REPAY, abi.encode(srcProxyOFT_, srcSmartFarmingManager_, requestId_));\\n    }\\n\\n    function decodeFlashRepayCallbackPayload(\\n        bytes memory payload_\\n    ) internal pure returns (address srcProxyOFT_, address _srcSmartFarmingManager, uint256 _requestId) {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, address, uint256));\\n    }\\n\\n    function encodeFlashRepaySwapPayload(\\n        address srcSmartFarmingManager_,\\n        address dstProxyOFT_,\\n        uint256 requestId_,\\n        address account_,\\n        uint256 amountOutMin_\\n    ) internal pure returns (bytes memory _payload) {\\n        return\\n            abi.encode(\\n                FLASH_REPAY,\\n                abi.encode(srcSmartFarmingManager_, dstProxyOFT_, requestId_, account_, amountOutMin_)\\n            );\\n    }\\n\\n    function decodeFlashRepaySwapPayload(\\n        bytes memory payload_\\n    )\\n        internal\\n        pure\\n        returns (\\n            address srcSmartFarmingManager_,\\n            address dstProxyOFT_,\\n            uint256 requestId_,\\n            address account_,\\n            uint256 amountOutMin_\\n        )\\n    {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, address, uint256, address, uint256));\\n    }\\n\\n    function encodeLeverageSwapPayload(\\n        address srcSmartFarmingManager_,\\n        address dstProxyOFT_,\\n        uint256 requestId_,\\n        uint256 sgPoolId_,\\n        address account_,\\n        uint256 amountOutMin_\\n    ) internal pure returns (bytes memory _payload) {\\n        return\\n            abi.encode(\\n                LEVERAGE,\\n                abi.encode(srcSmartFarmingManager_, dstProxyOFT_, requestId_, sgPoolId_, account_, amountOutMin_)\\n            );\\n    }\\n\\n    function decodeLeverageSwapPayload(\\n        bytes memory payload_\\n    )\\n        internal\\n        pure\\n        returns (\\n            address srcSmartFarmingManager_,\\n            address dstProxyOFT_,\\n            uint256 requestId_,\\n            uint256 sgPoolId_,\\n            address account_,\\n            uint256 amountOutMin_\\n        )\\n    {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, address, uint256, uint256, address, uint256));\\n    }\\n\\n    function encodeLzArgs(\\n        uint16 dstChainId_,\\n        uint256 callbackNativeFee_,\\n        uint64 swapTxGasLimit_\\n    ) internal pure returns (bytes memory _lzArgs) {\\n        return abi.encode(dstChainId_, callbackNativeFee_, swapTxGasLimit_);\\n    }\\n\\n    function decodeLzArgs(\\n        bytes memory lzArgs_\\n    ) internal pure returns (uint16 dstChainId_, uint256 callbackNativeFee_, uint64 swapTxGasLimit_) {\\n        return abi.decode(lzArgs_, (uint16, uint256, uint64));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @title Math library\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n * @dev Based on https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n */\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return (a * b + HALF_WAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * WAD + b / 2) / b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storage/SmartFarmingManagerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/ISmartFarmingManager.sol\\\";\\n\\n// solhint-disable var-name-mixedcase, max-states-count\\nabstract contract SmartFarmingManagerStorageV1 is ISmartFarmingManager {\\n    /**\\n     * @notice Cross-chain Leverage request data\\n     */\\n    struct CrossChainLeverage {\\n        uint16 dstChainId;\\n        IERC20 bridgeToken;\\n        IDepositToken depositToken;\\n        ISyntheticToken syntheticToken;\\n        uint256 amountIn;\\n        uint256 debtAmount;\\n        uint256 depositAmountMin;\\n        address account;\\n        bool finished;\\n        IERC20 tokenIn;\\n    }\\n\\n    /**\\n     * @notice Cross-chain Flash repay request data\\n     */\\n    struct CrossChainFlashRepay {\\n        uint16 dstChainId;\\n        ISyntheticToken syntheticToken;\\n        uint256 repayAmountMin;\\n        address account;\\n        bool finished;\\n    }\\n\\n    /**\\n     * @notice Cross-chain requests counter\\n     */\\n    uint256 public crossChainRequestsLength;\\n\\n    /**\\n     * @notice Cross-chain leverage requests\\n     */\\n    mapping(uint256 => CrossChainLeverage) public crossChainLeverages;\\n\\n    /**\\n     * @notice Cross-chain flash repay requests\\n     */\\n    mapping(uint256 => CrossChainFlashRepay) public crossChainFlashRepays;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountIsTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeTokenIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CrossChainFlashRepayInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CrossChainRequestCompletedAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CrossChainRequestInvalidKey\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositTokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FlashRepaySlippageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeverageSlippageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeverageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeverageTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PositionIsNotHealthy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotCrossChainDispatcher\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SyntheticDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenInIsNull\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CrossChainFlashRepayFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CrossChainFlashRepayStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CrossChainLeverageFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CrossChainLeverageStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaid\",\"type\":\"uint256\"}],\"name\":\"FlashRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"}],\"name\":\"Leveraged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossChainDispatcher\",\"outputs\":[{\"internalType\":\"contract ICrossChainDispatcher\",\"name\":\"_crossChainDispatcher\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount_\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"bridgeToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgeTokenAmountMin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmountOutMin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmountMin_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"lzArgs_\",\"type\":\"bytes\"}],\"name\":\"crossChainFlashRepay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmountOut_\",\"type\":\"uint256\"}],\"name\":\"crossChainFlashRepayCallback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_repaid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crossChainFlashRepays\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"bridgeToken_\",\"type\":\"address\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmountOutMin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountMin_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"lzArgs_\",\"type\":\"bytes\"}],\"name\":\"crossChainLeverage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"crossChainLeverage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmountOut_\",\"type\":\"uint256\"}],\"name\":\"crossChainLeverageCallback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposited\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crossChainLeverages\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"contract IERC20\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossChainRequestsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmountMin_\",\"type\":\"uint256\"}],\"name\":\"flashRepay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_repaid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"contract IDepositToken\",\"name\":\"depositToken_\",\"type\":\"address\"},{\"internalType\":\"contract ISyntheticToken\",\"name\":\"syntheticToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountMin_\",\"type\":\"uint256\"}],\"name\":\"leverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_issued\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce_\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"newRepayAmountMin_\",\"type\":\"uint256\"}],\"name\":\"retryCrossChainFlashRepayCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce_\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"newDepositAmountMin_\",\"type\":\"uint256\"}],\"name\":\"retryCrossChainLeverageCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"contract ISwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SmartFarmingManager", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}