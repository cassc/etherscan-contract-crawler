{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"solidity/contracts/governance/GovernorCharlie.sol\": {\r\n      \"content\": \"// solhint-disable max-states-count\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IAMPH} from '@interfaces/governance/IAMPH.sol';\\nimport {IGovernorCharlie} from '@interfaces/governance/IGovernorCharlie.sol';\\n\\nimport {Receipt, ProposalState, Proposal} from '@contracts/utils/GovernanceStructs.sol';\\n\\ncontract GovernorCharlie is IGovernorCharlie {\\n  /// @notice The name of this contract\\n  string public constant NAME = 'Amphora Protocol Governor';\\n\\n  /// @notice The maximum number of actions that can be included in a proposal\\n  uint256 public constant PROPOSAL_MAX_OPERATIONS = 10;\\n\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\\n\\n  /// @notice The EIP-712 typehash for the ballot struct used by the contract\\n  bytes32 public constant BALLOT_TYPEHASH = keccak256('Ballot(uint256 proposalId,uint8 support)');\\n\\n  /// @notice The time for a proposal to be executed after passing\\n  uint256 public constant GRACE_PERIOD = 14 days;\\n\\n  /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\n  uint256 public quorumVotes;\\n\\n  /// @notice The number of votes in support of a proposal required in order for an emergency quorum to be reached and for a vote to succeed\\n  uint256 public emergencyQuorumVotes;\\n\\n  /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\\n  uint256 public votingDelay;\\n\\n  /// @notice The duration of voting on a proposal, in blocks\\n  uint256 public votingPeriod;\\n\\n  /// @notice The number of votes required in order for a voter to become a proposer\\n  uint256 public proposalThreshold;\\n\\n  /// @notice Initial proposal id set at become\\n  uint256 public initialProposalId;\\n\\n  /// @notice The total number of proposals\\n  uint256 public proposalCount;\\n\\n  /// @notice The address of the Amphora Protocol governance token\\n  IAMPH public amph;\\n\\n  /// @notice The official record of all proposals ever proposed\\n  mapping(uint256 => Proposal) public proposals;\\n\\n  /// @notice The latest proposal for each proposer\\n  mapping(address => uint256) public latestProposalIds;\\n\\n  /// @notice The mapping that saves queued transactions\\n  mapping(bytes32 => bool) public queuedTransactions;\\n\\n  /// @notice The proposal holding period\\n  uint256 public proposalTimelockDelay;\\n\\n  /// @notice Stores the expiration of account whitelist status as a timestamp\\n  mapping(address => uint256) public whitelistAccountExpirations;\\n\\n  /// @notice Address which manages whitelisted proposals and whitelist accounts\\n  address public whitelistGuardian;\\n\\n  /// @notice The duration of the voting on a emergency proposal, in blocks\\n  uint256 public emergencyVotingPeriod;\\n\\n  /// @notice The emergency proposal holding period\\n  uint256 public emergencyTimelockDelay;\\n\\n  /// @notice all receipts for proposal\\n  mapping(uint256 => mapping(address => Receipt)) public proposalReceipts;\\n\\n  /// @notice The number of votes to reject an optimistic proposal\\n  uint256 public optimisticQuorumVotes;\\n\\n  /// @notice The delay period before voting begins\\n  uint256 public optimisticVotingDelay;\\n\\n  /// @notice The maximum number of seconds an address can be whitelisted for\\n  uint256 public maxWhitelistPeriod;\\n\\n  constructor(address _amph) {\\n    amph = IAMPH(_amph);\\n    votingPeriod = 1 days;\\n    votingDelay = 4 hours;\\n    proposalTimelockDelay = 2 days;\\n    proposalThreshold = 1_000_000 ether;\\n    quorumVotes = 2_000_000 ether;\\n\\n    emergencyQuorumVotes = 400_000_000 ether;\\n    emergencyVotingPeriod = 6 hours;\\n    emergencyTimelockDelay = 1 days;\\n\\n    optimisticQuorumVotes = 2_000_000 ether;\\n    optimisticVotingDelay = 7 hours;\\n    maxWhitelistPeriod = 365 days;\\n\\n    proposalCount = 0;\\n  }\\n\\n  /// @notice any function with this modifier can only be called by governance\\n  modifier onlyGov() {\\n    if (msg.sender != address(this)) revert GovernorCharlie_NotGovernorCharlie();\\n    _;\\n  }\\n\\n  // @notice Function used to propose a new proposal. Sender must have delegates above the proposal threshold\\n  // @param _targets Target addresses for proposal calls\\n  // @param _values Eth values for proposal calls\\n  // @param _signatures Function signatures for proposal calls\\n  // @param _calldatas Calldatas for proposal calls\\n  // @param _description String description of the proposal\\n  // @return _proposalId Proposal id of new proposal\\n  function propose(\\n    address[] memory _targets,\\n    uint256[] memory _values,\\n    string[] memory _signatures,\\n    bytes[] memory _calldatas,\\n    string memory _description\\n  ) public override returns (uint256 _proposalId) {\\n    _proposalId = _propose(_targets, _values, _signatures, _calldatas, _description, false);\\n  }\\n\\n  // @notice Function used to propose a new emergency proposal. Sender must have delegates above the proposal threshold\\n  // @param _targets Target addresses for proposal calls\\n  // @param _values Eth values for proposal calls\\n  // @param _signatures Function signatures for proposal calls\\n  // @param _calldatas Calldatas for proposal calls\\n  // @param _description String description of the proposal\\n  // @return _proposalId Proposal id of new proposal\\n  function proposeEmergency(\\n    address[] memory _targets,\\n    uint256[] memory _values,\\n    string[] memory _signatures,\\n    bytes[] memory _calldatas,\\n    string memory _description\\n  ) public override returns (uint256 _proposalId) {\\n    _proposalId = _propose(_targets, _values, _signatures, _calldatas, _description, true);\\n  }\\n\\n  // @notice Function used to propose a new proposal. Sender must have delegates above the proposal threshold\\n  // @param _targets Target addresses for proposal calls\\n  // @param _values Eth values for proposal calls\\n  // @param _signatures Function signatures for proposal calls\\n  // @param _calldatas Calldatas for proposal calls\\n  // @param _description String description of the proposal\\n  // @param _emergency Bool to determine if proposal an emergency proposal\\n  // @return _proposalId Proposal id of new proposal\\n  function _propose(\\n    address[] memory _targets,\\n    uint256[] memory _values,\\n    string[] memory _signatures,\\n    bytes[] memory _calldatas,\\n    string memory _description,\\n    bool _emergency\\n  ) internal returns (uint256 _proposalId) {\\n    // Reject proposals before initiating as Governor\\n    if (quorumVotes == 0) revert GovernorCharlie_NotActive();\\n    // Allow addresses above proposal threshold and whitelisted addresses to propose\\n    if (amph.getPriorVotes(msg.sender, (block.number - 1)) < proposalThreshold && !isWhitelisted(msg.sender)) {\\n      revert GovernorCharlie_VotesBelowThreshold();\\n    }\\n    if (\\n      _targets.length != _values.length || _targets.length != _signatures.length || _targets.length != _calldatas.length\\n    ) revert GovernorCharlie_ArityMismatch();\\n    if (_targets.length == 0) revert GovernorCharlie_NoActions();\\n    if (_targets.length > PROPOSAL_MAX_OPERATIONS) revert GovernorCharlie_TooManyActions();\\n\\n    uint256 _latestProposalId = latestProposalIds[msg.sender];\\n    if (_latestProposalId != 0) {\\n      ProposalState _proposersLatestProposalState = state(_latestProposalId);\\n      if (_proposersLatestProposalState == ProposalState.Active) revert GovernorCharlie_MultipleActiveProposals();\\n      if (_proposersLatestProposalState == ProposalState.Pending) revert GovernorCharlie_MultiplePendingProposals();\\n    }\\n\\n    proposalCount++;\\n    Proposal memory _newProposal = Proposal({\\n      id: proposalCount,\\n      proposer: msg.sender,\\n      eta: 0,\\n      targets: _targets,\\n      values: _values,\\n      signatures: _signatures,\\n      calldatas: _calldatas,\\n      startBlock: block.number + votingDelay,\\n      endBlock: block.number + votingDelay + votingPeriod,\\n      forVotes: 0,\\n      againstVotes: 0,\\n      abstainVotes: 0,\\n      canceled: false,\\n      executed: false,\\n      emergency: _emergency,\\n      quorumVotes: quorumVotes,\\n      delay: proposalTimelockDelay\\n    });\\n\\n    //whitelist can't make emergency\\n    if (_emergency && !isWhitelisted(msg.sender)) {\\n      _newProposal.startBlock = block.number;\\n      _newProposal.endBlock = block.number + emergencyVotingPeriod;\\n      _newProposal.quorumVotes = emergencyQuorumVotes;\\n      _newProposal.delay = emergencyTimelockDelay;\\n    }\\n\\n    //whitelist can only make optimistic proposals\\n    if (isWhitelisted(msg.sender)) {\\n      _newProposal.quorumVotes = optimisticQuorumVotes;\\n      _newProposal.startBlock = block.number + optimisticVotingDelay;\\n      _newProposal.endBlock = block.number + optimisticVotingDelay + votingPeriod;\\n    }\\n\\n    proposals[_newProposal.id] = _newProposal;\\n    latestProposalIds[_newProposal.proposer] = _newProposal.id;\\n\\n    emit ProposalCreatedIndexed(\\n      _newProposal.id,\\n      msg.sender,\\n      _targets,\\n      _values,\\n      _signatures,\\n      _calldatas,\\n      _newProposal.startBlock,\\n      _newProposal.endBlock,\\n      _description\\n    );\\n\\n    emit ProposalCreated(\\n      _newProposal.id,\\n      msg.sender,\\n      _targets,\\n      _values,\\n      _signatures,\\n      _calldatas,\\n      _newProposal.startBlock,\\n      _newProposal.endBlock,\\n      _description\\n    );\\n    _proposalId = _newProposal.id;\\n  }\\n\\n  // @notice Queues a proposal of state succeeded\\n  // @param _proposalId The id of the proposal to queue\\n  function queue(uint256 _proposalId) external override {\\n    if (state(_proposalId) != ProposalState.Succeeded) revert GovernorCharlie_ProposalNotSucceeded();\\n    Proposal storage _proposal = proposals[_proposalId];\\n    uint256 _eta = block.timestamp + _proposal.delay;\\n    for (uint256 _i = 0; _i < _proposal.targets.length; _i++) {\\n      if (\\n        queuedTransactions[keccak256(\\n          abi.encode(\\n            _proposal.targets[_i], _proposal.values[_i], _proposal.signatures[_i], _proposal.calldatas[_i], _eta\\n          )\\n        )]\\n      ) revert GovernorCharlie_ProposalAlreadyQueued();\\n      _queueTransaction(\\n        _proposal.targets[_i],\\n        _proposal.values[_i],\\n        _proposal.signatures[_i],\\n        _proposal.calldatas[_i],\\n        _eta,\\n        _proposal.delay\\n      );\\n    }\\n    _proposal.eta = _eta;\\n    emit ProposalQueuedIndexed(_proposalId, _eta);\\n    emit ProposalQueued(_proposalId, _eta);\\n  }\\n\\n  /// @notice Queues a transaction\\n  /// @param _target Target address for transaction\\n  /// @param _value Eth value for transaction\\n  /// @param _signature Function signature for transaction\\n  /// @param _data Calldata for transaction\\n  /// @param _eta Timestamp for transaction\\n  /// @param _delay Delay for transaction\\n  /// @return _txHash Transaction hash\\n  function _queueTransaction(\\n    address _target,\\n    uint256 _value,\\n    string memory _signature,\\n    bytes memory _data,\\n    uint256 _eta,\\n    uint256 _delay\\n  ) internal returns (bytes32 _txHash) {\\n    if (_eta < (_getBlockTimestamp() + _delay)) revert GovernorCharlie_DelayNotReached();\\n\\n    _txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));\\n    queuedTransactions[_txHash] = true;\\n\\n    emit QueueTransaction(_txHash, _target, _value, _signature, _data, _eta);\\n  }\\n\\n  // @notice Executes a queued proposal if eta has passed\\n  // @param _proposalId The id of the proposal to execute\\n  function execute(uint256 _proposalId) external payable override {\\n    if (state(_proposalId) != ProposalState.Queued) revert GovernorCharlie_ProposalNotQueued();\\n    Proposal storage _proposal = proposals[_proposalId];\\n    _proposal.executed = true;\\n    for (uint256 _i = 0; _i < _proposal.targets.length; _i++) {\\n      this.executeTransaction{value: _proposal.values[_i]}(\\n        _proposal.targets[_i], _proposal.values[_i], _proposal.signatures[_i], _proposal.calldatas[_i], _proposal.eta\\n      );\\n    }\\n    emit ProposalExecutedIndexed(_proposalId);\\n    emit ProposalExecuted(_proposalId);\\n  }\\n\\n  /// @notice Executes a transaction\\n  /// @param _target Target address for transaction\\n  /// @param _value Eth value for transaction\\n  /// @param _signature Function signature for transaction\\n  /// @param _data Calldata for transaction\\n  /// @param _eta Timestamp for transaction\\n  function executeTransaction(\\n    address _target,\\n    uint256 _value,\\n    string memory _signature,\\n    bytes memory _data,\\n    uint256 _eta\\n  ) external payable override {\\n    if (msg.sender != address(this)) revert GovernorCharlie_NotGovernorCharlie();\\n\\n    bytes32 _txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));\\n    if (!queuedTransactions[_txHash]) revert GovernorCharlie_ProposalNotQueued();\\n    if (_getBlockTimestamp() < _eta) revert GovernorCharlie_TimelockNotReached();\\n    if (_getBlockTimestamp() > _eta + GRACE_PERIOD) revert GovernorCharlie_TransactionStale();\\n\\n    queuedTransactions[_txHash] = false;\\n\\n    bytes memory _callData;\\n\\n    if (bytes(_signature).length == 0) _callData = _data;\\n    else _callData = abi.encodePacked(bytes4(keccak256(bytes(_signature))), _data);\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool _success, /*bytes memory returnData*/ ) = _target.call{value: _value}(_callData);\\n    if (!_success) revert GovernorCharlie_TransactionReverted();\\n\\n    emit ExecuteTransaction(_txHash, _target, _value, _signature, _data, _eta);\\n  }\\n\\n  // @notice Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold\\n  // @notice whitelistGuardian can cancel proposals from whitelisted addresses\\n  // @param _proposalId The id of the proposal to cancel\\n  function cancel(uint256 _proposalId) external override {\\n    if (state(_proposalId) == ProposalState.Executed) revert GovernorCharlie_ProposalAlreadyExecuted();\\n\\n    Proposal storage _proposal = proposals[_proposalId];\\n\\n    // Proposer can cancel\\n    if (msg.sender != _proposal.proposer) {\\n      // Whitelisted proposers can't be canceled for falling below proposal threshold\\n      if (isWhitelisted(_proposal.proposer)) {\\n        if (\\n          (amph.getPriorVotes(_proposal.proposer, (block.number - 1)) >= proposalThreshold)\\n            || msg.sender != whitelistGuardian\\n        ) revert GovernorCharlie_WhitelistedProposer();\\n      } else {\\n        if ((amph.getPriorVotes(_proposal.proposer, (block.number - 1)) >= proposalThreshold)) {\\n          revert GovernorCharlie_ProposalAboveThreshold();\\n        }\\n      }\\n    }\\n\\n    _proposal.canceled = true;\\n    for (uint256 _i = 0; _i < _proposal.targets.length; _i++) {\\n      _cancelTransaction(\\n        _proposal.targets[_i], _proposal.values[_i], _proposal.signatures[_i], _proposal.calldatas[_i], _proposal.eta\\n      );\\n    }\\n\\n    emit ProposalCanceledIndexed(_proposalId);\\n    emit ProposalCanceled(_proposalId);\\n  }\\n\\n  /// @notice Cancels a transaction\\n  /// @param _target Target address for transaction\\n  /// @param _value Eth value for transaction\\n  /// @param _signature Function signature for transaction\\n  /// @param _data Calldata for transaction\\n  /// @param _eta Timestamp for transaction\\n  function _cancelTransaction(\\n    address _target,\\n    uint256 _value,\\n    string memory _signature,\\n    bytes memory _data,\\n    uint256 _eta\\n  ) internal {\\n    bytes32 _txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));\\n    queuedTransactions[_txHash] = false;\\n\\n    emit CancelTransaction(_txHash, _target, _value, _signature, _data, _eta);\\n  }\\n\\n  // @notice Gets actions of a proposal\\n  // @param _proposalId The id of the proposal\\n  // @return _targets The proposal targets\\n  // @return _values The proposal values\\n  // @return _signatures The proposal signatures\\n  // @return _calldatas The proposal calldata\\n  function getActions(uint256 _proposalId)\\n    external\\n    view\\n    override\\n    returns (\\n      address[] memory _targets,\\n      uint256[] memory _values,\\n      string[] memory _signatures,\\n      bytes[] memory _calldatas\\n    )\\n  {\\n    Proposal storage _proposal = proposals[_proposalId];\\n    return (_proposal.targets, _proposal.values, _proposal.signatures, _proposal.calldatas);\\n  }\\n\\n  // @notice Returns the proposal\\n  // @param _proposalId The id of proposal\\n  // @return _proposal The proposal\\n  function getProposal(uint256 _proposalId) external view returns (Proposal memory _proposal) {\\n    _proposal = proposals[_proposalId];\\n  }\\n\\n  // @notice Gets the receipt for a voter on a given proposal\\n  // @param _proposalId The id of proposal\\n  // @param _voter The address of the voter\\n  // @return _votingReceipt The voting receipt\\n  function getReceipt(\\n    uint256 _proposalId,\\n    address _voter\\n  ) external view override returns (Receipt memory _votingReceipt) {\\n    _votingReceipt = proposalReceipts[_proposalId][_voter];\\n  }\\n\\n  // @notice Gets the state of a proposal\\n  // @param _proposalId The id of the proposal\\n  // @return _state Proposal state\\n  // solhint-disable-next-line code-complexity\\n  function state(uint256 _proposalId) public view override returns (ProposalState _state) {\\n    if (proposalCount < _proposalId || _proposalId <= initialProposalId) revert GovernorCharlie_InvalidProposalId();\\n    Proposal storage _proposal = proposals[_proposalId];\\n    bool _whitelisted = isWhitelisted(_proposal.proposer);\\n    if (_proposal.canceled) return ProposalState.Canceled;\\n    else if (block.number <= _proposal.startBlock) return ProposalState.Pending;\\n    else if (block.number <= _proposal.endBlock) return ProposalState.Active;\\n    else if (\\n      (_whitelisted && _proposal.againstVotes > _proposal.quorumVotes)\\n        || (!_whitelisted && _proposal.forVotes <= _proposal.againstVotes)\\n        || (!_whitelisted && _proposal.forVotes < _proposal.quorumVotes)\\n    ) return ProposalState.Defeated;\\n    else if (_proposal.eta == 0) return ProposalState.Succeeded;\\n    else if (_proposal.executed) return ProposalState.Executed;\\n    else if (block.timestamp >= (_proposal.eta + GRACE_PERIOD)) return ProposalState.Expired;\\n    _state = ProposalState.Queued;\\n  }\\n\\n  // @notice Cast a vote for a proposal\\n  // @param _proposalId The id of the proposal to vote on\\n  // @param _support The support value for the vote. 0=against, 1=for, 2=abstain\\n  function castVote(uint256 _proposalId, uint8 _support) external override {\\n    uint96 _numberOfVotes = _castVoteInternal(msg.sender, _proposalId, _support);\\n    emit VoteCastIndexed(msg.sender, _proposalId, _support, _numberOfVotes, '');\\n    emit VoteCast(msg.sender, _proposalId, _support, _numberOfVotes, '');\\n  }\\n\\n  // @notice Cast a vote for a proposal with a reason\\n  // @param _proposalId The id of the proposal to vote on\\n  // @param _support The support value for the vote. 0=against, 1=for, 2=abstain\\n  // @param _reason The reason given for the vote by the voter\\n  function castVoteWithReason(uint256 _proposalId, uint8 _support, string calldata _reason) external override {\\n    uint96 _numberOfVotes = _castVoteInternal(msg.sender, _proposalId, _support);\\n    emit VoteCastIndexed(msg.sender, _proposalId, _support, _numberOfVotes, _reason);\\n    emit VoteCast(msg.sender, _proposalId, _support, _numberOfVotes, _reason);\\n  }\\n\\n  // @notice Cast a vote for a proposal by signature\\n  // @dev External override function that accepts EIP-712 signatures for voting on proposals.\\n  function castVoteBySig(uint256 _proposalId, uint8 _support, uint8 _v, bytes32 _r, bytes32 _s) external override {\\n    bytes32 _domainSeparator =\\n      keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(NAME)), _getChainIdInternal(), address(this)));\\n    bytes32 _structHash = keccak256(abi.encode(BALLOT_TYPEHASH, _proposalId, _support));\\n\\n    bytes32 _digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', _domainSeparator, _structHash));\\n\\n    if (uint256(_s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      revert GovernorCharlie_InvalidSignature();\\n    }\\n    address _signatory = ecrecover(_digest, _v, _r, _s);\\n    if (_signatory == address(0)) revert GovernorCharlie_InvalidSignature();\\n    uint96 _numberOfVotes = _castVoteInternal(_signatory, _proposalId, _support);\\n    emit VoteCastIndexed(_signatory, _proposalId, _support, _numberOfVotes, '');\\n    emit VoteCast(_signatory, _proposalId, _support, _numberOfVotes, '');\\n  }\\n\\n  // @notice Internal function that caries out voting logic\\n  // @param _voter The voter that is casting their vote\\n  // @param _proposalId The id of the proposal to vote on\\n  // @param _support The support value for the vote. 0=against, 1=for, 2=abstain\\n  // @return _numberOfVotes The number of votes cast\\n  function _castVoteInternal(\\n    address _voter,\\n    uint256 _proposalId,\\n    uint8 _support\\n  ) internal returns (uint96 _numberOfVotes) {\\n    if (state(_proposalId) != ProposalState.Active) revert GovernorCharlie_VotingClosed();\\n    if (_support > 2) revert GovernorCharlie_InvalidVoteType();\\n    Proposal storage _proposal = proposals[_proposalId];\\n    Receipt storage _receipt = proposalReceipts[_proposalId][_voter];\\n    if (_receipt.hasVoted) revert GovernorCharlie_AlreadyVoted();\\n    uint96 _votes = amph.getPriorVotes(_voter, _proposal.startBlock);\\n\\n    if (_support == 0) _proposal.againstVotes = _proposal.againstVotes + _votes;\\n    else if (_support == 1) _proposal.forVotes = _proposal.forVotes + _votes;\\n    else if (_support == 2) _proposal.abstainVotes = _proposal.abstainVotes + _votes;\\n\\n    _receipt.hasVoted = true;\\n    _receipt.support = _support;\\n    _receipt.votes = _votes;\\n\\n    _numberOfVotes = _votes;\\n  }\\n\\n  // @notice View function which returns if an account is whitelisted\\n  // @param _account Account to check white list status of\\n  // @return _isWhitelisted If the account is whitelisted\\n  function isWhitelisted(address _account) public view override returns (bool _isWhitelisted) {\\n    return (whitelistAccountExpirations[_account] > block.timestamp);\\n  }\\n\\n  // @notice Governance function for setting the governance token\\n  // @param  _token The new token address\\n  function setNewToken(address _token) external onlyGov {\\n    address _oldAmph = address(amph);\\n    amph = IAMPH(_token);\\n\\n    emit NewTokenSet(_oldAmph, _token);\\n  }\\n\\n  // @notice Governance function for setting the max whitelist period\\n  // @param  _second How many seconds to whitelist for\\n  function setMaxWhitelistPeriod(uint256 _second) external onlyGov {\\n    uint256 _oldSeconds = maxWhitelistPeriod;\\n    maxWhitelistPeriod = _second;\\n\\n    emit MaxWhitelistPeriodSet(_oldSeconds, _second);\\n  }\\n\\n  // @notice Used to update the timelock period\\n  // @param _proposalTimelockDelay The proposal holding period\\n  function setDelay(uint256 _proposalTimelockDelay) public override onlyGov {\\n    uint256 _oldTimelockDelay = proposalTimelockDelay;\\n    proposalTimelockDelay = _proposalTimelockDelay;\\n\\n    emit NewDelay(_oldTimelockDelay, proposalTimelockDelay);\\n  }\\n\\n  // @notice Used to update the emergency timelock period\\n  // @param _emergencyTimelockDelay The proposal holding period\\n  function setEmergencyDelay(uint256 _emergencyTimelockDelay) public override onlyGov {\\n    uint256 _oldEmergencyTimelockDelay = emergencyTimelockDelay;\\n    emergencyTimelockDelay = _emergencyTimelockDelay;\\n\\n    emit NewEmergencyDelay(_oldEmergencyTimelockDelay, emergencyTimelockDelay);\\n  }\\n\\n  // @notice Governance function for setting the voting delay\\n  // @param _newVotingDelay The new voting delay, in blocks\\n  function setVotingDelay(uint256 _newVotingDelay) external override onlyGov {\\n    uint256 _oldVotingDelay = votingDelay;\\n    votingDelay = _newVotingDelay;\\n\\n    emit VotingDelaySet(_oldVotingDelay, votingDelay);\\n  }\\n\\n  // @notice Governance function for setting the voting period\\n  // @param _newVotingPeriod The new voting period, in blocks\\n  function setVotingPeriod(uint256 _newVotingPeriod) external override onlyGov {\\n    uint256 _oldVotingPeriod = votingPeriod;\\n    votingPeriod = _newVotingPeriod;\\n\\n    emit VotingPeriodSet(_oldVotingPeriod, votingPeriod);\\n  }\\n\\n  // @notice Governance function for setting the emergency voting period\\n  // @param _newEmergencyVotingPeriod The new voting period, in blocks\\n  function setEmergencyVotingPeriod(uint256 _newEmergencyVotingPeriod) external override onlyGov {\\n    uint256 _oldEmergencyVotingPeriod = emergencyVotingPeriod;\\n    emergencyVotingPeriod = _newEmergencyVotingPeriod;\\n\\n    emit EmergencyVotingPeriodSet(_oldEmergencyVotingPeriod, emergencyVotingPeriod);\\n  }\\n\\n  // @notice Governance function for setting the proposal threshold\\n  // @param _newProposalThreshold The new proposal threshold\\n  function setProposalThreshold(uint256 _newProposalThreshold) external override onlyGov {\\n    uint256 _oldProposalThreshold = proposalThreshold;\\n    proposalThreshold = _newProposalThreshold;\\n\\n    emit ProposalThresholdSet(_oldProposalThreshold, proposalThreshold);\\n  }\\n\\n  // @notice Governance function for setting the quorum\\n  // @param _newQuorumVotes The new proposal quorum\\n  function setQuorumVotes(uint256 _newQuorumVotes) external override onlyGov {\\n    uint256 _oldQuorumVotes = quorumVotes;\\n    quorumVotes = _newQuorumVotes;\\n\\n    emit NewQuorum(_oldQuorumVotes, quorumVotes);\\n  }\\n\\n  // @notice Governance function for setting the emergency quorum\\n  // @param _newEmergencyQuorumVotes The new proposal quorum\\n  function setEmergencyQuorumVotes(uint256 _newEmergencyQuorumVotes) external override onlyGov {\\n    uint256 _oldEmergencyQuorumVotes = emergencyQuorumVotes;\\n    emergencyQuorumVotes = _newEmergencyQuorumVotes;\\n\\n    emit NewEmergencyQuorum(_oldEmergencyQuorumVotes, emergencyQuorumVotes);\\n  }\\n\\n  // @notice Governance function for setting the whitelist expiration as a timestamp\\n  // for an account. Whitelist status allows accounts to propose without meeting threshold\\n  // @param _account Account address to set whitelist expiration for\\n  // @param _expiration Expiration for account whitelist status as timestamp (if now < expiration, whitelisted)\\n  function setWhitelistAccountExpiration(address _account, uint256 _expiration) external override onlyGov {\\n    if (_expiration >= (maxWhitelistPeriod + block.timestamp)) revert GovernorCharlie_ExpirationExceedsMax();\\n    whitelistAccountExpirations[_account] = _expiration;\\n\\n    emit WhitelistAccountExpirationSet(_account, _expiration);\\n  }\\n\\n  // @notice Governance function for setting the whitelistGuardian. WhitelistGuardian can cancel proposals from whitelisted addresses\\n  // @param _account Account to set whitelistGuardian to (0x0 to remove whitelistGuardian)\\n  function setWhitelistGuardian(address _account) external override onlyGov {\\n    address _oldGuardian = whitelistGuardian;\\n    whitelistGuardian = _account;\\n\\n    emit WhitelistGuardianSet(_oldGuardian, whitelistGuardian);\\n  }\\n\\n  // @notice Governance function for setting the optimistic voting delay\\n  // @param _newOptimisticVotingDelay The new optimistic voting delay, in blocks\\n  function setOptimisticDelay(uint256 _newOptimisticVotingDelay) external override onlyGov {\\n    uint256 _oldOptimisticVotingDelay = optimisticVotingDelay;\\n    optimisticVotingDelay = _newOptimisticVotingDelay;\\n\\n    emit OptimisticVotingDelaySet(_oldOptimisticVotingDelay, optimisticVotingDelay);\\n  }\\n\\n  // @notice Governance function for setting the optimistic quorum\\n  // @param _newOptimisticQuorumVotes The new optimistic quorum votes, in blocks\\n  function setOptimisticQuorumVotes(uint256 _newOptimisticQuorumVotes) external override onlyGov {\\n    uint256 _oldOptimisticQuorumVotes = optimisticQuorumVotes;\\n    optimisticQuorumVotes = _newOptimisticQuorumVotes;\\n\\n    emit OptimisticQuorumVotesSet(_oldOptimisticQuorumVotes, optimisticQuorumVotes);\\n  }\\n\\n  /// @notice Returns the timelock address\\n  /// @param _timelock The timelock address\\n  function timelock() external view override returns (address _timelock) {\\n    _timelock = address(this);\\n  }\\n\\n  /// @notice Returns the proposal time lock delay\\n  /// @return _delay The proposal time lock delay\\n  function delay() external view override returns (uint256 _delay) {\\n    _delay = proposalTimelockDelay;\\n  }\\n\\n  /// @notice Returns the chaid id of the blockchain\\n  /// @return _chainId The chain id\\n  function _getChainIdInternal() internal view returns (uint256 _chainId) {\\n    _chainId = block.chainid;\\n  }\\n\\n  /// @notice Returns the block timestamp\\n  /// @return _timestamp The block timestamp\\n  function _getBlockTimestamp() internal view returns (uint256 _timestamp) {\\n    // solium-disable-next-line security/no-block-members\\n    _timestamp = block.timestamp;\\n  }\\n}\\n\"\r\n    },\r\n    \"solidity/interfaces/governance/IAMPH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAMPH {\\n  /// @notice Returns the prior votes from an account\\n  /// @param _account address of the account\\n  /// @param _blockNumber block number to get the votes from\\n  /// @return _votes amount of votes\\n  function getPriorVotes(address _account, uint256 _blockNumber) external view returns (uint96 _votes);\\n\\n  /// @notice Mint a specified amount of tokens to a specified address\\n  function mint(address _dst, uint256 _rawAmount) external;\\n}\\n\"\r\n    },\r\n    \"solidity/interfaces/governance/IGovernorCharlie.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IGovernorCharlieEvents} from '@interfaces/governance/IGovernorCharlieEvents.sol';\\nimport {IAMPH} from '@interfaces/governance/IAMPH.sol';\\n\\nimport {Receipt, ProposalState, Proposal} from '@contracts/utils/GovernanceStructs.sol';\\n\\ninterface IGovernorCharlie is IGovernorCharlieEvents {\\n  /*///////////////////////////////////////////////////////////////\\n                              ERRORS\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Thrown when called by non governor\\n  error GovernorCharlie_NotGovernorCharlie();\\n\\n  /// @notice Thrown when charlie is not active\\n  error GovernorCharlie_NotActive();\\n\\n  /// @notice Thrown when votes are below the threshold\\n  error GovernorCharlie_VotesBelowThreshold();\\n\\n  /// @notice Thrown when actions where not provided\\n  error GovernorCharlie_NoActions();\\n\\n  /// @notice Thrown when too many actions\\n  error GovernorCharlie_TooManyActions();\\n\\n  /// @notice Thrown when trying to create more than one active proposal per proposal\\n  error GovernorCharlie_MultipleActiveProposals();\\n\\n  /// @notice Thrown when there is more than one pending proposal per proposer\\n  error GovernorCharlie_MultiplePendingProposals();\\n\\n  /// @notice Thrown when there is information arity mismatch\\n  error GovernorCharlie_ArityMismatch();\\n\\n  /// @notice Thrown when trying to queue a proposal that is not in the Succeeded state\\n  error GovernorCharlie_ProposalNotSucceeded();\\n\\n  /// @notice Thrown when trying to queue an already queued proposal\\n  error GovernorCharlie_ProposalAlreadyQueued();\\n\\n  /// @notice Thrown when delay has not been reached yet\\n  error GovernorCharlie_DelayNotReached();\\n\\n  /// @notice Thrown when trying to execute a proposal that was not queued\\n  error GovernorCharlie_ProposalNotQueued();\\n\\n  /// @notice Thrown when trying to execute a proposal that hasn't reached its timelock\\n  error GovernorCharlie_TimelockNotReached();\\n\\n  /// @notice Thrown when trying to execute a transaction that is stale\\n  error GovernorCharlie_TransactionStale();\\n\\n  /// @notice Thrown when transaction execution reverted\\n  error GovernorCharlie_TransactionReverted();\\n\\n  /// @notice Thrown when trying to cancel a proposal that was already execute\\n  error GovernorCharlie_ProposalAlreadyExecuted();\\n\\n  /// @notice Thrown when trying to cancel a whitelisted proposer's proposal\\n  error GovernorCharlie_WhitelistedProposer();\\n\\n  /// @notice Thrown when proposal is above threshold\\n  error GovernorCharlie_ProposalAboveThreshold();\\n\\n  /// @notice Thrown when received an invalid proposal id\\n  error GovernorCharlie_InvalidProposalId();\\n\\n  /// @notice Thrown when trying to cast a vote with an invalid signature\\n  error GovernorCharlie_InvalidSignature();\\n\\n  /// @notice Thrown when voting is closed\\n  error GovernorCharlie_VotingClosed();\\n\\n  /// @notice Thrown when invalid vote type\\n  error GovernorCharlie_InvalidVoteType();\\n\\n  /// @notice Thrown when voter already voted\\n  error GovernorCharlie_AlreadyVoted();\\n\\n  /// @notice Thrown when expiration exceeds max\\n  error GovernorCharlie_ExpirationExceedsMax();\\n\\n  /*///////////////////////////////////////////////////////////////\\n                            VARIABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\n  function quorumVotes() external view returns (uint256 _quorumVotes);\\n\\n  /// @notice The number of votes in support of a proposal required in order for an emergency quorum to be reached and for a vote to succeed\\n  function emergencyQuorumVotes() external view returns (uint256 _emergencyQuorumVotes);\\n\\n  /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\\n  function votingDelay() external view returns (uint256 _votingDelay);\\n\\n  /// @notice The duration of voting on a proposal, in blocks\\n  function votingPeriod() external view returns (uint256 _votingPeriod);\\n\\n  /// @notice The number of votes required in order for a voter to become a proposer\\n  function proposalThreshold() external view returns (uint256 _proposalThreshold);\\n\\n  /// @notice Initial proposal id set at become\\n  function initialProposalId() external view returns (uint256 _initialProposalId);\\n\\n  /// @notice The total number of proposals\\n  function proposalCount() external view returns (uint256 _proposalCount);\\n\\n  /// @notice The address of the Amphora Protocol governance token\\n  function amph() external view returns (IAMPH _amph);\\n\\n  /// @notice The latest proposal for each proposer\\n  function latestProposalIds(address _proposer) external returns (uint256 _proposerId);\\n\\n  /// @notice The mapping that saves queued transactions\\n  function queuedTransactions(bytes32 _transaction) external returns (bool _isQueued);\\n\\n  /// @notice The proposal holding period\\n  function proposalTimelockDelay() external view returns (uint256 _proposalTimelockDelay);\\n\\n  /// @notice Stores the expiration of account whitelist status as a timestamp\\n  function whitelistAccountExpirations(address _account) external returns (uint256 _expiration);\\n\\n  /// @notice Address which manages whitelisted proposals and whitelist accounts\\n  function whitelistGuardian() external view returns (address _guardian);\\n\\n  /// @notice The duration of the voting on a emergency proposal, in blocks\\n  function emergencyVotingPeriod() external view returns (uint256 _emergencyVotingPeriod);\\n\\n  /// @notice The emergency proposal holding period\\n  function emergencyTimelockDelay() external view returns (uint256 _emergencyTimelockDelay);\\n\\n  /// @notice The number of votes to reject an optimistic proposal\\n  function optimisticQuorumVotes() external view returns (uint256 _optimisticQuorumVotes);\\n\\n  function optimisticVotingDelay() external view returns (uint256 _optimisticVotingDelay);\\n\\n  /// @notice The delay period before voting begins\\n  function maxWhitelistPeriod() external view returns (uint256 _maxWhitelistPeriod);\\n\\n  /// @notice Returns the timelock address\\n  /// @param _timelock The timelock address\\n  function timelock() external view returns (address _timelock);\\n\\n  /// @notice Returns the proposal time lock delay\\n  /// @return _delay The proposal time lock delay\\n  function delay() external view returns (uint256 _delay);\\n\\n  /*///////////////////////////////////////////////////////////////\\n                              LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n  // @notice Function used to propose a new proposal. Sender must have delegates above the proposal threshold\\n  // @param _targets Target addresses for proposal calls\\n  // @param _values Eth values for proposal calls\\n  // @param _signatures Function signatures for proposal calls\\n  // @param _calldatas Calldatas for proposal calls\\n  // @param _description String description of the proposal\\n  // @return _proposalId Proposal id of new proposal\\n  function propose(\\n    address[] memory _targets,\\n    uint256[] memory _values,\\n    string[] memory _signatures,\\n    bytes[] memory _calldatas,\\n    string memory _description\\n  ) external returns (uint256 _proposalId);\\n\\n  // @notice Function used to propose a new emergency proposal. Sender must have delegates above the proposal threshold\\n  // @param _targets Target addresses for proposal calls\\n  // @param _values Eth values for proposal calls\\n  // @param _signatures Function signatures for proposal calls\\n  // @param _calldatas Calldatas for proposal calls\\n  // @param _description String description of the proposal\\n  // @return _proposalId Proposal id of new proposal\\n  function proposeEmergency(\\n    address[] memory _targets,\\n    uint256[] memory _values,\\n    string[] memory _signatures,\\n    bytes[] memory _calldatas,\\n    string memory _description\\n  ) external returns (uint256 _proposalId);\\n\\n  // @notice Queues a proposal of state succeeded\\n  // @param _proposalId The id of the proposal to queue\\n  function queue(uint256 _proposalId) external;\\n\\n  // @notice Executes a queued proposal if eta has passed\\n  // @param _proposalId The id of the proposal to execute\\n  function execute(uint256 _proposalId) external payable;\\n\\n  /// @notice Executes a transaction\\n  /// @param _target Target address for transaction\\n  /// @param _value Eth value for transaction\\n  /// @param _signature Function signature for transaction\\n  /// @param _data Calldata for transaction\\n  /// @param _eta Timestamp for transaction\\n  function executeTransaction(\\n    address _target,\\n    uint256 _value,\\n    string memory _signature,\\n    bytes memory _data,\\n    uint256 _eta\\n  ) external payable;\\n\\n  // @notice Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold\\n  // @notice whitelistGuardian can cancel proposals from whitelisted addresses\\n  // @param _proposalId The id of the proposal to cancel\\n  function cancel(uint256 _proposalId) external;\\n\\n  // @notice Gets actions of a proposal\\n  // @param _proposalId The id of the proposal\\n  // @return _targets The proposal targets\\n  // @return _values The proposal values\\n  // @return _signatures The proposal signatures\\n  // @return _calldatas The proposal calldata\\n  function getActions(uint256 _proposalId)\\n    external\\n    view\\n    returns (\\n      address[] memory _targets,\\n      uint256[] memory _values,\\n      string[] memory _signatures,\\n      bytes[] memory _calldatas\\n    );\\n\\n  // @notice Returns the proposal\\n  // @param _proposalId The id of proposal\\n  // @return _proposal The proposal\\n  function getProposal(uint256 _proposalId) external view returns (Proposal memory _proposal);\\n\\n  // @notice Gets the receipt for a voter on a given proposal\\n  // @param _proposalId The id of proposal\\n  // @param _voter The address of the voter\\n  // @return _receipt The voting receipt\\n  function getReceipt(uint256 _proposalId, address _voter) external view returns (Receipt memory _receipt);\\n\\n  // @notice Gets the state of a proposal\\n  // @param _proposalId The id of the proposal\\n  // @return _proposalState Proposal state\\n  function state(uint256 _proposalId) external view returns (ProposalState _proposalState);\\n\\n  // @notice Cast a vote for a proposal\\n  // @param _proposalId The id of the proposal to vote on\\n  // @param _support The support value for the vote. 0=against, 1=for, 2=abstain\\n  function castVote(uint256 _proposalId, uint8 _support) external;\\n\\n  // @notice Cast a vote for a proposal with a reason\\n  // @param _proposalId The id of the proposal to vote on\\n  // @param _support The support value for the vote. 0=against, 1=for, 2=abstain\\n  // @param _reason The reason given for the vote by the voter\\n  function castVoteWithReason(uint256 _proposalId, uint8 _support, string calldata _reason) external;\\n\\n  // @notice Cast a vote for a proposal by signature\\n  // @dev External override function that accepts EIP-712 signatures for voting on proposals.\\n  function castVoteBySig(uint256 _proposalId, uint8 _support, uint8 _v, bytes32 _r, bytes32 _s) external;\\n\\n  // @notice View function which returns if an account is whitelisted\\n  // @param _account Account to check white list status of\\n  // @return _isWhitelisted If the account is whitelisted\\n  function isWhitelisted(address _account) external view returns (bool _isWhitelisted);\\n\\n  // @notice Used to update the timelock period\\n  // @param _proposalTimelockDelay The proposal holding period\\n  function setDelay(uint256 _proposalTimelockDelay) external;\\n\\n  // @notice Used to update the emergency timelock period\\n  // @param _emergencyTimelockDelay The proposal holding period\\n  function setEmergencyDelay(uint256 _emergencyTimelockDelay) external;\\n\\n  // @notice Governance function for setting the voting delay\\n  // @param _newVotingDelay The new voting delay, in blocks\\n  function setVotingDelay(uint256 _newVotingDelay) external;\\n\\n  // @notice Governance function for setting the voting period\\n  // @param _newVotingPeriod The new voting period, in blocks\\n  function setVotingPeriod(uint256 _newVotingPeriod) external;\\n\\n  // @notice Governance function for setting the emergency voting period\\n  // @param _newEmergencyVotingPeriod The new voting period, in blocks\\n  function setEmergencyVotingPeriod(uint256 _newEmergencyVotingPeriod) external;\\n\\n  // @notice Governance function for setting the proposal threshold\\n  // @param _newProposalThreshold The new proposal threshold\\n  function setProposalThreshold(uint256 _newProposalThreshold) external;\\n\\n  // @notice Governance function for setting the quorum\\n  // @param _newQuorumVotes The new proposal quorum\\n  function setQuorumVotes(uint256 _newQuorumVotes) external;\\n\\n  // @notice Governance function for setting the emergency quorum\\n  // @param _newEmergencyQuorumVotes The new proposal quorum\\n  function setEmergencyQuorumVotes(uint256 _newEmergencyQuorumVotes) external;\\n\\n  // @notice Governance function for setting the whitelist expiration as a timestamp\\n  // for an account. Whitelist status allows accounts to propose without meeting threshold\\n  // @param _account Account address to set whitelist expiration for\\n  // @param _expiration Expiration for account whitelist status as timestamp (if now < expiration, whitelisted)\\n  function setWhitelistAccountExpiration(address _account, uint256 _expiration) external;\\n\\n  // @notice Governance function for setting the whitelistGuardian. WhitelistGuardian can cancel proposals from whitelisted addresses\\n  // @param _account Account to set whitelistGuardian to (0x0 to remove whitelistGuardian)\\n  function setWhitelistGuardian(address _account) external;\\n\\n  // @notice Governance function for setting the optimistic voting delay\\n  // @param _newOptimisticVotingDelay The new optimistic voting delay, in blocks\\n  function setOptimisticDelay(uint256 _newOptimisticVotingDelay) external;\\n\\n  // @notice Governance function for setting the optimistic quorum\\n  // @param _newOptimisticQuorumVotes The new optimistic quorum votes, in blocks\\n  function setOptimisticQuorumVotes(uint256 _newOptimisticQuorumVotes) external;\\n}\\n\"\r\n    },\r\n    \"solidity/contracts/utils/GovernanceStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct Proposal {\\n  /// @notice Unique id for looking up a proposal\\n  uint256 id;\\n  /// @notice Creator of the proposal\\n  address proposer;\\n  /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\\n  uint256 eta;\\n  /// @notice the ordered list of target addresses for calls to be made\\n  address[] targets;\\n  /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n  uint256[] values;\\n  /// @notice The ordered list of function signatures to be called\\n  string[] signatures;\\n  /// @notice The ordered list of calldata to be passed to each call\\n  bytes[] calldatas;\\n  /// @notice The block at which voting begins: holders must delegate their votes prior to this block\\n  uint256 startBlock;\\n  /// @notice The block at which voting ends: votes must be cast prior to this block\\n  uint256 endBlock;\\n  /// @notice Current number of votes in favor of this proposal\\n  uint256 forVotes;\\n  /// @notice Current number of votes in opposition to this proposal\\n  uint256 againstVotes;\\n  /// @notice Current number of votes for abstaining for this proposal\\n  uint256 abstainVotes;\\n  /// @notice Flag marking whether the proposal has been canceled\\n  bool canceled;\\n  /// @notice Flag marking whether the proposal has been executed\\n  bool executed;\\n  /// @notice Whether the proposal is an emergency proposal\\n  bool emergency;\\n  /// @notice quorum votes requires\\n  uint256 quorumVotes;\\n  /// @notice time delay\\n  uint256 delay;\\n}\\n\\n/// @notice Ballot receipt record for a voter\\nstruct Receipt {\\n  /// @notice Whether or not a vote has been cast\\n  bool hasVoted;\\n  /// @notice Whether or not the voter supports the proposal or abstains\\n  uint8 support;\\n  /// @notice The number of votes the voter had, which were cast\\n  uint96 votes;\\n}\\n\\n/// @notice Possible states that a proposal may be in\\nenum ProposalState {\\n  Pending,\\n  Active,\\n  Canceled,\\n  Defeated,\\n  Succeeded,\\n  Queued,\\n  Expired,\\n  Executed\\n}\\n\"\r\n    },\r\n    \"solidity/interfaces/governance/IGovernorCharlieEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IGovernorCharlieEvents {\\n  /*///////////////////////////////////////////////////////////////\\n                              EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /// @notice An event emitted when a new proposal is created\\n  event ProposalCreatedIndexed(\\n    uint256 indexed _id,\\n    address indexed _proposer,\\n    address[] _targets,\\n    uint256[] _values,\\n    string[] _signatures,\\n    bytes[] _calldatas,\\n    uint256 indexed _startBlock,\\n    uint256 _endBlock,\\n    string _description\\n  );\\n\\n  /// @notice An event emitted when a vote has been cast on a proposal\\n  /// @param _voter The address which casted a vote\\n  /// @param _proposalId The proposal id which was voted on\\n  /// @param _support Support value for the vote. 0=against, 1=for, 2=abstain\\n  /// @param _votes Number of votes which were cast by the voter\\n  /// @param _reason The reason given for the vote by the voter\\n  event VoteCastIndexed(\\n    address indexed _voter, uint256 indexed _proposalId, uint8 _support, uint256 _votes, string _reason\\n  );\\n\\n  /// @notice An event emitted when a proposal has been canceled\\n  event ProposalCanceledIndexed(uint256 indexed _id);\\n\\n  /// @notice An event emitted when a proposal has been queued in the Timelock\\n  event ProposalQueuedIndexed(uint256 indexed _id, uint256 _eta);\\n\\n  /// @notice An event emitted when a proposal has been executed in the Timelock\\n  event ProposalExecutedIndexed(uint256 indexed _id);\\n\\n  /// @notice An event emitted when the voting delay is set\\n  event VotingDelaySet(uint256 _oldVotingDelay, uint256 _newVotingDelay);\\n\\n  /// @notice An event emitted when the voting period is set\\n  event VotingPeriodSet(uint256 _oldVotingPeriod, uint256 _newVotingPeriod);\\n\\n  /// @notice An event emitted when the emergency voting period is set\\n  event EmergencyVotingPeriodSet(uint256 _oldEmergencyVotingPeriod, uint256 _emergencyVotingPeriod);\\n\\n  /// @notice Emitted when proposal threshold is set\\n  event ProposalThresholdSet(uint256 _oldProposalThreshold, uint256 _newProposalThreshold);\\n\\n  /// @notice Emitted when whitelist account expiration is set\\n  event WhitelistAccountExpirationSet(address _account, uint256 _expiration);\\n\\n  /// @notice Emitted when the whitelistGuardian is set\\n  event WhitelistGuardianSet(address _oldGuardian, address _newGuardian);\\n\\n  /// @notice Emitted when the a new delay is set\\n  event NewDelay(uint256 _oldTimelockDelay, uint256 _proposalTimelockDelay);\\n\\n  /// @notice Emitted when the a new emergency delay is set\\n  event NewEmergencyDelay(uint256 _oldEmergencyTimelockDelay, uint256 _emergencyTimelockDelay);\\n\\n  /// @notice Emitted when the quorum is updated\\n  event NewQuorum(uint256 _oldQuorumVotes, uint256 _quorumVotes);\\n\\n  /// @notice Emitted when the emergency quorum is updated\\n  event NewEmergencyQuorum(uint256 _oldEmergencyQuorumVotes, uint256 _emergencyQuorumVotes);\\n\\n  /// @notice An event emitted when the optimistic voting delay is set\\n  event OptimisticVotingDelaySet(uint256 _oldOptimisticVotingDelay, uint256 _optimisticVotingDelay);\\n\\n  /// @notice Emitted when the optimistic quorum is updated\\n  event OptimisticQuorumVotesSet(uint256 _oldOptimisticQuorumVotes, uint256 _optimisticQuorumVotes);\\n\\n  /// @notice Emitted when a transaction is canceled\\n  event CancelTransaction(\\n    bytes32 indexed _txHash, address indexed _target, uint256 _value, string _signature, bytes _data, uint256 _eta\\n  );\\n\\n  /// @notice Emitted when a transaction is executed\\n  event ExecuteTransaction(\\n    bytes32 indexed _txHash, address indexed _target, uint256 _value, string _signature, bytes _data, uint256 _eta\\n  );\\n\\n  /// @notice Emitted when a transaction is queued\\n  event QueueTransaction(\\n    bytes32 indexed _txHash, address indexed _target, uint256 _value, string _signature, bytes _data, uint256 _eta\\n  );\\n\\n  /// @notice Emitted when a new governance token is set\\n  event NewTokenSet(address _oldToken, address _newToken);\\n\\n  /// @notice Emitted when a max whitelist period is set\\n  event MaxWhitelistPeriodSet(uint256 _oldMaxWhitelistPeriod, uint256 _newMaxWhitelistPeriod);\\n\\n  /*///////////////////////////////////////////////////////////////\\n                              TALLY EVENTS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  // This events are needed so that tally can index the votes and actions\\n  event ProposalCreated(\\n    uint256 _id,\\n    address _proposer,\\n    address[] _targets,\\n    uint256[] _values,\\n    string[] _signatures,\\n    bytes[] _calldatas,\\n    uint256 _startBlock,\\n    uint256 _endBlock,\\n    string _description\\n  );\\n\\n  event VoteCast(address indexed _voter, uint256 _proposalId, uint8 _support, uint256 _votes, string _reason);\\n  event ProposalCanceled(uint256 _id);\\n  event ProposalQueued(uint256 _id, uint256 _eta);\\n  event ProposalExecuted(uint256 _id);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=node_modules/ds-test/src/\",\r\n      \"forge-std/=node_modules/forge-std/src/\",\r\n      \"isolmate/=node_modules/@defi-wonderland/isolmate/src/\",\r\n      \"uni-v2-core/=node_modules/@uniswap/v2-core/contracts/\",\r\n      \"uni-v2-periphery/=node_modules/@uniswap/v2-periphery/contracts/\",\r\n      \"uni-v3-core/=node_modules/@uniswap/v3-core/contracts/\",\r\n      \"uni-v3-periphery/=node_modules/@uniswap/v3-periphery/contracts/\",\r\n      \"solidity-utils/=node_modules/@defi-wonderland/solidity-utils/solidity/\",\r\n      \"solady/=node_modules/solady/src/\",\r\n      \"@chainlink/=node_modules/@chainlink/contracts/src/v0.8/\",\r\n      \"@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\r\n      \"@uniswap/v2-core/=node_modules/@uniswap/v2-core/\",\r\n      \"@uniswap/v2-periphery/=node_modules/@uniswap/v2-periphery/\",\r\n      \"@uniswap/v3-core/=node_modules/@uniswap/v3-core/\",\r\n      \"@uniswap/v3-periphery/=node_modules/@uniswap/v3-periphery/\",\r\n      \"@contracts/=solidity/contracts/\",\r\n      \"@interfaces/=solidity/interfaces/\",\r\n      \"@test/=solidity/test/\",\r\n      \"@scripts/=solidity/scripts/\",\r\n      \"@defi-wonderland/=node_modules/@defi-wonderland/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"base64-sol/=node_modules/base64-sol/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_amph\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GovernorCharlie_AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_ArityMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_DelayNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_ExpirationExceedsMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_InvalidProposalId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_InvalidVoteType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_MultipleActiveProposals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_MultiplePendingProposals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_NoActions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_NotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_NotGovernorCharlie\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_ProposalAboveThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_ProposalAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_ProposalAlreadyQueued\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_ProposalNotQueued\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_ProposalNotSucceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_TimelockNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_TooManyActions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_TransactionReverted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_TransactionStale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_VotesBelowThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_VotingClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GovernorCharlie_WhitelistedProposer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eta\",\"type\":\"uint256\"}],\"name\":\"CancelTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldEmergencyVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_emergencyVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"EmergencyVotingPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eta\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMaxWhitelistPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMaxWhitelistPeriod\",\"type\":\"uint256\"}],\"name\":\"MaxWhitelistPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldTimelockDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_proposalTimelockDelay\",\"type\":\"uint256\"}],\"name\":\"NewDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldEmergencyTimelockDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_emergencyTimelockDelay\",\"type\":\"uint256\"}],\"name\":\"NewEmergencyDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldEmergencyQuorumVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_emergencyQuorumVotes\",\"type\":\"uint256\"}],\"name\":\"NewEmergencyQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldQuorumVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quorumVotes\",\"type\":\"uint256\"}],\"name\":\"NewQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"NewTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldOptimisticQuorumVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_optimisticQuorumVotes\",\"type\":\"uint256\"}],\"name\":\"OptimisticQuorumVotesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldOptimisticVotingDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_optimisticVotingDelay\",\"type\":\"uint256\"}],\"name\":\"OptimisticVotingDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceledIndexed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"ProposalCreatedIndexed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecutedIndexed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueuedIndexed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldProposalThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"ProposalThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eta\",\"type\":\"uint256\"}],\"name\":\"QueueTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"VoteCastIndexed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldVotingDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"VotingDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"WhitelistAccountExpirationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newGuardian\",\"type\":\"address\"}],\"name\":\"WhitelistGuardianSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSAL_MAX_OPERATIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amph\",\"outputs\":[{\"internalType\":\"contract IAMPH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_support\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_support\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"castVoteWithReason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyQuorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyTimelockDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyVotingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_eta\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"emergency\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"quorumVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"internalType\":\"struct Proposal\",\"name\":\"_proposal\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct Receipt\",\"name\":\"_votingReceipt\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWhitelistPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticQuorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticVotingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposalReceipts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalTimelockDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"emergency\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"quorumVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"proposeEmergency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queuedTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalTimelockDelay\",\"type\":\"uint256\"}],\"name\":\"setDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_emergencyTimelockDelay\",\"type\":\"uint256\"}],\"name\":\"setEmergencyDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEmergencyQuorumVotes\",\"type\":\"uint256\"}],\"name\":\"setEmergencyQuorumVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEmergencyVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"setEmergencyVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_second\",\"type\":\"uint256\"}],\"name\":\"setMaxWhitelistPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setNewToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newOptimisticVotingDelay\",\"type\":\"uint256\"}],\"name\":\"setOptimisticDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newOptimisticQuorumVotes\",\"type\":\"uint256\"}],\"name\":\"setOptimisticQuorumVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"setProposalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newQuorumVotes\",\"type\":\"uint256\"}],\"name\":\"setQuorumVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"setVotingDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"setVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"setWhitelistAccountExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setWhitelistGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum ProposalState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistAccountExpirations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GovernorCharlie", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000943c5f4f54509d1e78b1fcd93b92c43ce83d3141", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}