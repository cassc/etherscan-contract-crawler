{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IYecheAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.11;  \\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for Auction Houses\\n */\\ninterface IYecheAuctionHouseV2 {\\n    struct Auction {\\n        // ID for the ERC721 token\\n        uint256 tokenId;\\n        // Address for the ERC721 contract\\n        address tokenContract;\\n        // Whether or not the auction contract owner has approved the auction to start\\n        bool approved;\\n        // The current highest bid amount\\n        uint256 amount;\\n        // The length of time to run the auction for, after the first bid was made\\n        uint256 duration;\\n        // The start time of the auction, set on creation\\n        uint256 startTime;\\n        // The minimum price of the first bid\\n        uint256 reservePrice;\\n        // The address that should receive the funds once the NFT is sold.\\n        address tokenOwner;\\n        // The address of the current highest bid\\n        address payable bidder;\\n        // The split address for this NFT.\\n        address payable splitAddress;\\n        // The address of the ERC-20 currency to run the auction with.\\n        // If set to 0x0, the auction will be run in ETH\\n        address auctionCurrency;\\n    }\\n\\n    struct Bid {\\n        address payable bidder;\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    event AuctionCreated(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        uint256 duration,\\n        uint256 reservePrice,\\n        address tokenOwner,\\n        address splitAddress,\\n        address auctionCurrency\\n    );\\n\\n    event AuctionApprovalUpdated(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        bool approved\\n    );\\n\\n    event AuctionReservePriceUpdated(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        uint256 reservePrice\\n    );\\n\\n    event AuctionBid(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        address sender,\\n        uint256 value,\\n        bool firstBid,\\n        bool extended\\n    );\\n\\n    event AuctionDurationExtended(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        uint256 duration\\n    );\\n\\n    event AuctionEnded(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        address tokenOwner,\\n        address splitAddress,\\n        address winner,\\n        uint256 amount,\\n        address auctionCurrency\\n    );\\n\\n    event AuctionCanceled(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        address tokenOwner\\n    );\\n\\n    function createAuction(\\n        uint256 tokenId,\\n        address tokenContract,\\n        uint256 duration,\\n        uint256 reservePrice,\\n        address payable splitAddress,\\n        address auctionCurrency\\n    ) external returns (uint256);\\n\\n    function getCurAuctionId() external view returns (uint256);\\n\\n    function getAuctionId(address tokenContract, uint256 tokenId) external view returns (uint256);\\n\\n    function getBidHistory(uint256 auctionId) external view returns (Bid[] memory);\\n\\n    function getActiveAuctionIds() external view returns (uint256[] memory);\\n\\n    function getUserBid(address user, uint256 minAuctionId, uint256 maxAuctionId) external view returns (bool);\\n\\n    function setAuctionApproval(uint256 auctionId, bool approved) external;\\n\\n    function setAuctionReservePrice(uint256 auctionId, uint256 reservePrice) external;\\n\\n    function createBid(uint256 auctionId, uint256 amount) external payable;\\n\\n    function endAuction(uint256 auctionId) external;\\n\\n    function areThereExpiredAuctions() external view returns (bool);\\n\\n    function getTimeRemaining(uint256 auctionId) external view returns (uint256);\\n\\n    function endExpiredAuctions() external;\\n\\n    function cancelAuction(uint256 auctionId) external;\\n}\"\r\n    },\r\n    \"contracts/YecheAuctionResolver.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.11;  \\n\\nimport { IYecheAuctionHouseV2 } from \\\"./IYecheAuction.sol\\\";\\n\\ncontract YecheAuctionResolver {\\n    IYecheAuctionHouseV2 public immutable auctionHouse;\\n\\n    constructor(IYecheAuctionHouseV2 _auctionHouse) {\\n        auctionHouse = _auctionHouse;\\n    }\\n\\n    function checker()\\n        external\\n        view\\n        returns (bool canExec, bytes memory execPayload)\\n    {\\n        canExec = auctionHouse.areThereExpiredAuctions();\\n\\n        execPayload = abi.encodeCall(IYecheAuctionHouseV2.endExpiredAuctions, ());\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IYecheAuctionHouseV2\",\"name\":\"_auctionHouse\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"auctionHouse\",\"outputs\":[{\"internalType\":\"contract IYecheAuctionHouseV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "YecheAuctionResolver", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000ddd9abec523a05adc1e1b7a97f5015ece0fb492a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}