{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/adapters/Optimism/ICrossDomainMessenger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ICrossDomainMessenger {\\n    function sendMessage(address _target, bytes calldata _message, uint32 _minGasLimit) external payable;\\n\\n    function xDomainMessageSender() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/adapters/Optimism/L1CrossDomainMessengerHeaderReporter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { ICrossDomainMessenger } from \\\"./ICrossDomainMessenger.sol\\\";\\nimport { IHeaderStorage } from \\\"../../interfaces/IHeaderStorage.sol\\\";\\n\\ncontract L1CrossDomainMessengerHeaderReporter {\\n    // The first 1.92 million gas on L2 is free. See here:\\n    // https://community.optimism.io/docs/developers/bridge/messaging/#for-l1-%E2%87%92-l2-transactions\\n    uint32 internal constant GAS_LIMIT = 1_920_000;\\n\\n    ICrossDomainMessenger public immutable l1CrossDomainMessenger;\\n    IHeaderStorage public immutable headerStorage;\\n\\n    event HeaderReported(address indexed emitter, uint256 indexed blockNumber, bytes32 indexed blockHeader);\\n\\n    constructor(ICrossDomainMessenger l1CrossDomainMessenger_, IHeaderStorage headerStorage_) {\\n        l1CrossDomainMessenger = l1CrossDomainMessenger_;\\n        headerStorage = headerStorage_;\\n    }\\n\\n    /// @dev Reports the given block headers to the oracleAdapter via the L1CrossDomainMessenger.\\n    /// @param blockNumbers Uint256 array of block number to pass over the L1CrossDomainMessenger.\\n    /// @param adapter address of L2CrossDomainMessengerAdapter on the destination chain.\\n    function reportHeaders(uint256[] memory blockNumbers, address adapter) external payable {\\n        bytes32[] memory blockHeaders = headerStorage.storeBlockHeaders(blockNumbers);\\n        bytes memory message = abi.encodeWithSignature(\\\"storeHashes(uint256[],bytes32[])\\\", blockNumbers, blockHeaders);\\n        l1CrossDomainMessenger.sendMessage(adapter, message, GAS_LIMIT);\\n        for (uint256 i = 0; i < blockNumbers.length; i++) {\\n            emit HeaderReported(address(this), blockNumbers[i], blockHeaders[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHeaderStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.17;\\n\\ninterface IHeaderStorage {\\n    event HeaderStored(uint256 indexed blockNumber, bytes32 indexed blockHeader);\\n\\n    error HeaderOutOfRange(address emitter, uint256 blockNumber);\\n\\n    function storeBlockHeader(uint256 blockNumber) external returns (bytes32 blockHeader);\\n\\n    function storeBlockHeaders(uint256[] memory blockNumbers) external returns (bytes32[] memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ICrossDomainMessenger\",\"name\":\"l1CrossDomainMessenger_\",\"type\":\"address\"},{\"internalType\":\"contract IHeaderStorage\",\"name\":\"headerStorage_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"emitter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"blockHeader\",\"type\":\"bytes32\"}],\"name\":\"HeaderReported\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"headerStorage\",\"outputs\":[{\"internalType\":\"contract IHeaderStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1CrossDomainMessenger\",\"outputs\":[{\"internalType\":\"contract ICrossDomainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"blockNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"reportHeaders\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "L1CrossDomainMessengerHeaderReporter", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "00000000000000000000000025ace71c97b33cc4729cf772ae268934f7ab5fa100000000000000000000000022f1fc71a505c0b2bf4d5075801cc5e0ec84b09e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}