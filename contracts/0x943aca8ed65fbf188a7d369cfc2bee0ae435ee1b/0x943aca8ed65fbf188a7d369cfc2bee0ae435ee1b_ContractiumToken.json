{"SourceCode": "pragma solidity ^0.4.21;\r\n\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  \r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n   \r\n   \r\n   \r\n    return a / b;\r\n  }\r\n\r\n  \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  \r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  \r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  \r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  \r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  \r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  \r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  \r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  \r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  \r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  \r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  \r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  \r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n   \r\n   \r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n\r\ncontract TokenOffering is StandardToken, Ownable, BurnableToken {\r\n  \r\n    bool public offeringEnabled;\r\n\r\n   \r\n    uint256 public currentTotalTokenOffering;\r\n\r\n   \r\n    uint256 public currentTokenOfferingRaised;\r\n\r\n   \r\n    uint256 public bonusRateOneEth;\r\n\r\n   \r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n\r\n    bool public isBurnInClose = false;\r\n\r\n    bool public isOfferingStarted = false;\r\n\r\n    event OfferingOpens(uint256 startTime, uint256 endTime, uint256 totalTokenOffering, uint256 bonusRateOneEth);\r\n    event OfferingCloses(uint256 endTime, uint256 tokenOfferingRaised);\r\n\r\n    \r\n    function setBonusRate(uint256 _bonusRateOneEth) public onlyOwner {\r\n        bonusRateOneEth = _bonusRateOneEth;\r\n    }\r\n\r\n    \r\n   \r\n   \r\n   \r\n   \r\n\r\n    \r\n    function preValidatePurchase(uint256 _amount) internal {\r\n        require(_amount > 0);\r\n        require(isOfferingStarted);\r\n        require(offeringEnabled);\r\n        require(currentTokenOfferingRaised.add(_amount) <= currentTotalTokenOffering);\r\n        require(block.timestamp >= startTime && block.timestamp <= endTime);\r\n    }\r\n    \r\n    \r\n    function stopOffering() public onlyOwner {\r\n        offeringEnabled = false;\r\n    }\r\n    \r\n    \r\n    function resumeOffering() public onlyOwner {\r\n        offeringEnabled = true;\r\n    }\r\n\r\n    \r\n    function startOffering(\r\n        uint256 _tokenOffering, \r\n        uint256 _bonusRateOneEth, \r\n        uint256 _startTime, \r\n        uint256 _endTime,\r\n        bool _isBurnInClose\r\n    ) public onlyOwner returns (bool) {\r\n        require(_tokenOffering <= balances[owner]);\r\n        require(_startTime <= _endTime);\r\n        require(_startTime >= block.timestamp);\r\n\r\n       \r\n        require(!isOfferingStarted);\r\n\r\n        isOfferingStarted = true;\r\n\r\n       \r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n\r\n       \r\n        isBurnInClose = _isBurnInClose;\r\n\r\n       \r\n        currentTokenOfferingRaised = 0;\r\n        currentTotalTokenOffering = _tokenOffering;\r\n        offeringEnabled = true;\r\n        setBonusRate(_bonusRateOneEth);\r\n\r\n        emit OfferingOpens(startTime, endTime, currentTotalTokenOffering, bonusRateOneEth);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function updateStartTime(uint256 _startTime) public onlyOwner {\r\n        require(isOfferingStarted);\r\n        require(_startTime <= endTime);\r\n        require(_startTime >= block.timestamp);\r\n        startTime = _startTime;\r\n    }\r\n\r\n    \r\n    function updateEndTime(uint256 _endTime) public onlyOwner {\r\n        require(isOfferingStarted);\r\n        require(_endTime >= startTime);\r\n        endTime = _endTime;\r\n    }\r\n\r\n    \r\n    function updateBurnableStatus(bool _isBurnInClose) public onlyOwner {\r\n        require(isOfferingStarted);\r\n        isBurnInClose = _isBurnInClose;\r\n    }\r\n\r\n    \r\n    function endOffering() public onlyOwner {\r\n        if (isBurnInClose) {\r\n            burnRemainTokenOffering();\r\n        }\r\n        emit OfferingCloses(endTime, currentTokenOfferingRaised);\r\n        resetOfferingStatus();\r\n    }\r\n\r\n    \r\n    function burnRemainTokenOffering() internal {\r\n        if (currentTokenOfferingRaised < currentTotalTokenOffering) {\r\n            uint256 remainTokenOffering = currentTotalTokenOffering.sub(currentTokenOfferingRaised);\r\n            _burn(owner, remainTokenOffering);\r\n        }\r\n    }\r\n\r\n    \r\n    function resetOfferingStatus() internal {\r\n        isOfferingStarted = false;        \r\n        startTime = 0;\r\n        endTime = 0;\r\n        currentTotalTokenOffering = 0;\r\n        currentTokenOfferingRaised = 0;\r\n        bonusRateOneEth = 0;\r\n        offeringEnabled = false;\r\n        isBurnInClose = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract WithdrawTrack is StandardToken, Ownable {\r\n\r\n\tstruct TrackInfo {\r\n\t\taddress to;\r\n\t\tuint256 amountToken;\r\n\t\tstring withdrawId;\r\n\t}\r\n\r\n\tmapping(string => TrackInfo) withdrawTracks;\r\n\r\n\tfunction withdrawToken(address _to, uint256 _amountToken, string _withdrawId) public onlyOwner returns (bool) {\r\n\t\tbool result = transfer(_to, _amountToken);\r\n\t\tif (result) {\r\n\t\t\twithdrawTracks[_withdrawId] = TrackInfo(_to, _amountToken, _withdrawId);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction withdrawTrackOf(string _withdrawId) public view returns (address to, uint256 amountToken) {\r\n\t\tTrackInfo track = withdrawTracks[_withdrawId];\r\n\t\treturn (track.to, track.amountToken);\r\n\t}\r\n\r\n}\r\n\r\n\r\ncontract ContractSpendToken is StandardToken, Ownable {\r\n  mapping (address => address) private contractToReceiver;\r\n\r\n  function addContract(address _contractAdd, address _to) external onlyOwner returns (bool) {\r\n    require(_contractAdd != address(0x0));\r\n    require(_to != address(0x0));\r\n\r\n    contractToReceiver[_contractAdd] = _to;\r\n    return true;\r\n  }\r\n\r\n  function removeContract(address _contractAdd) external onlyOwner returns (bool) {\r\n    contractToReceiver[_contractAdd] = address(0x0);\r\n    return true;\r\n  }\r\n\r\n  function contractSpend(address _from, uint256 _value) public returns (bool) {\r\n    address _to = contractToReceiver[msg.sender];\r\n    require(_to != address(0x0));\r\n    require(_value <= balances[_from]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function getContractReceiver(address _contractAdd) public view onlyOwner returns (address) {\r\n    return contractToReceiver[_contractAdd];\r\n  }\r\n}\r\n\r\ncontract ContractiumToken is TokenOffering, WithdrawTrack, ContractSpendToken {\r\n\r\n    string public constant name = \"Contractium\";\r\n    string public constant symbol = \"CTU\";\r\n    uint8 public constant decimals = 18;\r\n  \r\n    uint256 public constant INITIAL_SUPPLY = 3000000000 * (10 ** uint256(decimals));\r\n  \r\n    uint256 public unitsOneEthCanBuy = 15000;\r\n\r\n   \r\n    uint256 internal totalWeiRaised;\r\n\r\n    event BuyToken(address from, uint256 weiAmount, uint256 tokenAmount);\r\n\r\n    function ContractiumToken() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        \r\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n    function() public payable {\r\n\r\n        require(msg.sender != owner);\r\n\r\n       \r\n        uint256 amount = msg.value.mul(unitsOneEthCanBuy);\r\n\r\n       \r\n        uint256 amountBonus = msg.value.mul(bonusRateOneEth);\r\n        \r\n       \r\n        amount = amount.add(amountBonus);\r\n\r\n       \r\n        preValidatePurchase(amount);\r\n        require(balances[owner] >= amount);\r\n        \r\n        totalWeiRaised = totalWeiRaised.add(msg.value);\r\n    \r\n       \r\n        currentTokenOfferingRaised = currentTokenOfferingRaised.add(amount); \r\n        \r\n        balances[owner] = balances[owner].sub(amount);\r\n        balances[msg.sender] = balances[msg.sender].add(amount);\r\n\r\n        emit Transfer(owner, msg.sender, amount);\r\n        emit BuyToken(msg.sender, msg.value, amount);\r\n       \r\n        owner.transfer(msg.value);  \r\n                              \r\n    }\r\n\r\n    function batchTransfer(address[] _receivers, uint256[] _amounts) public returns(bool) {\r\n        uint256 cnt = _receivers.length;\r\n        require(cnt > 0 && cnt <= 20);\r\n        require(cnt == _amounts.length);\r\n\r\n        cnt = (uint8)(cnt);\r\n\r\n        uint256 totalAmount = 0;\r\n        for (uint8 i = 0; i < cnt; i++) {\r\n            totalAmount = totalAmount.add(_amounts[i]);\r\n        }\r\n\r\n        require(totalAmount <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(totalAmount);\r\n        for (i = 0; i < cnt; i++) {\r\n            balances[_receivers[i]] = balances[_receivers[i]].add(_amounts[i]);            \r\n            emit Transfer(msg.sender, _receivers[i], _amounts[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"updateStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBurnInClose\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountToken\",\"type\":\"uint256\"},{\"name\":\"_withdrawId\",\"type\":\"string\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"contractSpend\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenOffering\",\"type\":\"uint256\"},{\"name\":\"_bonusRateOneEth\",\"type\":\"uint256\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_isBurnInClose\",\"type\":\"bool\"}],\"name\":\"startOffering\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusRateOneEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTotalTokenOffering\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitsOneEthCanBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"updateEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeOffering\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contractAdd\",\"type\":\"address\"}],\"name\":\"getContractReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receivers\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endOffering\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOfferingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offeringEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenOfferingRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAdd\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"addContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAdd\",\"type\":\"address\"}],\"name\":\"removeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopOffering\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonusRateOneEth\",\"type\":\"uint256\"}],\"name\":\"setBonusRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isBurnInClose\",\"type\":\"bool\"}],\"name\":\"updateBurnableStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_withdrawId\",\"type\":\"string\"}],\"name\":\"withdrawTrackOf\",\"outputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amountToken\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalTokenOffering\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusRateOneEth\",\"type\":\"uint256\"}],\"name\":\"OfferingOpens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenOfferingRaised\",\"type\":\"uint256\"}],\"name\":\"OfferingCloses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "ContractiumToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://74dc6e83473ee26996fdb0d3b89fee83be62b8765ba760ffdd24256d3d01d204"}