{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/InterestRateBallotV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./VotingEscrowCheckpoint.sol\\\";\\nimport \\\"../utils/CoreUtility.sol\\\";\\nimport \\\"../utils/SafeDecimalMath.sol\\\";\\n\\nimport \\\"../interfaces/IBallot.sol\\\";\\nimport \\\"../interfaces/IFundV4.sol\\\";\\nimport \\\"../interfaces/ITwapOracleV2.sol\\\";\\nimport \\\"../interfaces/IVotingEscrow.sol\\\";\\n\\ncontract InterestRateBallotV3 is IBallot, CoreUtility, VotingEscrowCheckpoint {\\n    using SafeMath for uint256;\\n    using SafeDecimalMath for uint256;\\n\\n    event Voted(\\n        address indexed account,\\n        uint256 oldAmount,\\n        uint256 oldUnlockTime,\\n        uint256 oldWeight,\\n        uint256 amount,\\n        uint256 indexed unlockTime,\\n        uint256 indexed weight\\n    );\\n\\n    IVotingEscrow public immutable votingEscrow;\\n\\n    mapping(address => Voter) public voters;\\n\\n    // unlockTime => amount that will be unlocked at unlockTime\\n    mapping(uint256 => uint256) public scheduledUnlock;\\n    mapping(uint256 => uint256) public veSupplyPerWeek;\\n    uint256 public totalLocked;\\n    uint256 public nextWeekSupply;\\n\\n    mapping(uint256 => uint256) public weightedScheduledUnlock;\\n    mapping(uint256 => uint256) public weightedVeSupplyPerWeek;\\n    uint256 public weightedTotalLocked;\\n    uint256 public weightedNextWeekSupply;\\n\\n    uint256 public checkpointWeek;\\n\\n    constructor(address votingEscrow_)\\n        public\\n        VotingEscrowCheckpoint(IVotingEscrow(votingEscrow_).maxTime())\\n    {\\n        votingEscrow = IVotingEscrow(votingEscrow_);\\n        checkpointWeek = _endOfWeek(block.timestamp) - 1 weeks;\\n    }\\n\\n    function getReceipt(address account) external view returns (Voter memory) {\\n        return voters[account];\\n    }\\n\\n    function totalSupplyAtWeek(uint256 week) external view returns (uint256) {\\n        return _totalSupplyAtWeek(week);\\n    }\\n\\n    function weightedTotalSupplyAtWeek(uint256 week) external view returns (uint256) {\\n        return _weightedTotalSupplyAtWeek(week);\\n    }\\n\\n    function averageAtWeek(uint256 week) external view returns (uint256) {\\n        return _averageAtWeek(week);\\n    }\\n\\n    /// @notice Return a fund's relative income since the last settlement. Note that denominators\\n    ///         of the returned ratios are the latest value instead of that at the last settlement.\\n    ///         If the amount of underlying token increases from 100 to 110 and assume that there's\\n    ///         no creation/redemption or underlying price change, return value `incomeOverQ` will\\n    ///         be 1/11 rather than 1/10.\\n    /// @param fund Address of the fund\\n    /// @param day End timestamp of a trading day\\n    /// @return incomeOverQ The ratio of income to the fund's total value\\n    /// @return incomeOverB The ratio of income to equivalent BISHOP total value if all QUEEN are split\\n    function getFundRelativeIncome(address fund, uint256 day)\\n        public\\n        view\\n        returns (uint256 incomeOverQ, uint256 incomeOverB)\\n    {\\n        (bool success, bytes memory encodedDay) =\\n            address(fund).staticcall(\\n                abi.encodeWithSelector(IFundV4.getRelativeIncome.selector, day)\\n            );\\n        if (!success || encodedDay.length != 0x40) {\\n            return (0, 0);\\n        } else {\\n            return abi.decode(encodedDay, (uint256, uint256));\\n        }\\n    }\\n\\n    /// @notice Return the fraction of annualized relative income of the calling fund that should\\n    ///         be added to BISHOP NAV. Zero is returned when this function is not called by\\n    ///         an `IFundV3` contract or the fund is just rebalanced in the same block.\\n    function count(uint256 timestamp) external view override returns (uint256) {\\n        (, uint256 incomeOverB) = getFundRelativeIncome(msg.sender, timestamp);\\n        if (incomeOverB == 0) {\\n            return 0;\\n        } else {\\n            return\\n                incomeOverB.multiplyDecimal(_averageAtWeek(_endOfWeek(timestamp) - 1 weeks) * 365);\\n        }\\n    }\\n\\n    function cast(uint256 weight) external {\\n        require(weight <= 1e18, \\\"Invalid weight\\\");\\n\\n        IVotingEscrow.LockedBalance memory lockedBalance =\\n            votingEscrow.getLockedBalance(msg.sender);\\n        Voter memory voter = voters[msg.sender];\\n        require(\\n            lockedBalance.amount > 0 && lockedBalance.unlockTime > block.timestamp,\\n            \\\"No veCHESS\\\"\\n        );\\n\\n        _checkpointAndUpdateLock(\\n            voter.amount,\\n            voter.unlockTime,\\n            voter.weight,\\n            lockedBalance.amount,\\n            lockedBalance.unlockTime,\\n            weight\\n        );\\n\\n        emit Voted(\\n            msg.sender,\\n            voter.amount,\\n            voter.unlockTime,\\n            voter.weight,\\n            lockedBalance.amount,\\n            lockedBalance.unlockTime,\\n            weight\\n        );\\n\\n        // update voter amount per account\\n        voters[msg.sender] = Voter({\\n            amount: lockedBalance.amount,\\n            unlockTime: lockedBalance.unlockTime,\\n            weight: weight\\n        });\\n    }\\n\\n    function syncWithVotingEscrow(address account) external override {\\n        Voter memory voter = voters[account];\\n        if (voter.amount == 0) {\\n            return; // The account did not voted before\\n        }\\n\\n        IVotingEscrow.LockedBalance memory lockedBalance = votingEscrow.getLockedBalance(account);\\n        if (lockedBalance.unlockTime <= block.timestamp) {\\n            return;\\n        }\\n\\n        _checkpointAndUpdateLock(\\n            voter.amount,\\n            voter.unlockTime,\\n            voter.weight,\\n            lockedBalance.amount,\\n            lockedBalance.unlockTime,\\n            voter.weight\\n        );\\n\\n        emit Voted(\\n            account,\\n            voter.amount,\\n            voter.unlockTime,\\n            voter.weight,\\n            lockedBalance.amount,\\n            lockedBalance.unlockTime,\\n            voter.weight\\n        );\\n\\n        // update voter amount per account\\n        voters[account].amount = lockedBalance.amount;\\n        voters[account].unlockTime = lockedBalance.unlockTime;\\n    }\\n\\n    function _totalSupplyAtWeek(uint256 week) private view returns (uint256) {\\n        return\\n            week <= checkpointWeek\\n                ? veSupplyPerWeek[week]\\n                : _veTotalSupplyAtWeek(\\n                    week,\\n                    scheduledUnlock,\\n                    checkpointWeek,\\n                    nextWeekSupply,\\n                    totalLocked\\n                );\\n    }\\n\\n    function _weightedTotalSupplyAtWeek(uint256 week) private view returns (uint256) {\\n        return\\n            week <= checkpointWeek\\n                ? weightedVeSupplyPerWeek[week]\\n                : _veTotalSupplyAtWeek(\\n                    week,\\n                    weightedScheduledUnlock,\\n                    checkpointWeek,\\n                    weightedNextWeekSupply,\\n                    weightedTotalLocked\\n                );\\n    }\\n\\n    function _averageAtWeek(uint256 week) private view returns (uint256) {\\n        uint256 total = _totalSupplyAtWeek(week);\\n        if (total == 0) {\\n            return 0.5e18;\\n        }\\n        return _weightedTotalSupplyAtWeek(week) / total;\\n    }\\n\\n    function _checkpointAndUpdateLock(\\n        uint256 oldAmount,\\n        uint256 oldUnlockTime,\\n        uint256 oldWeight,\\n        uint256 newAmount,\\n        uint256 newUnlockTime,\\n        uint256 newWeight\\n    ) private {\\n        uint256 oldCheckpointWeek = checkpointWeek;\\n        (, uint256 newNextWeekSupply, uint256 newTotalLocked) =\\n            _veCheckpoint(\\n                scheduledUnlock,\\n                oldCheckpointWeek,\\n                nextWeekSupply,\\n                totalLocked,\\n                veSupplyPerWeek\\n            );\\n        (nextWeekSupply, totalLocked) = _veUpdateLock(\\n            newNextWeekSupply,\\n            newTotalLocked,\\n            oldAmount,\\n            oldUnlockTime,\\n            newAmount,\\n            newUnlockTime,\\n            scheduledUnlock\\n        );\\n        uint256 newWeightedNextWeekSupply;\\n        uint256 newWeightedTotalLocked;\\n        (checkpointWeek, newWeightedNextWeekSupply, newWeightedTotalLocked) = _veCheckpoint(\\n            weightedScheduledUnlock,\\n            oldCheckpointWeek,\\n            weightedNextWeekSupply,\\n            weightedTotalLocked,\\n            weightedVeSupplyPerWeek\\n        );\\n        (weightedNextWeekSupply, weightedTotalLocked) = _veUpdateLock(\\n            newWeightedNextWeekSupply,\\n            newWeightedTotalLocked,\\n            oldAmount * oldWeight,\\n            oldUnlockTime,\\n            newAmount * newWeight,\\n            newUnlockTime,\\n            weightedScheduledUnlock\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/VotingEscrowCheckpoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../utils/CoreUtility.sol\\\";\\n\\n/// @dev This abstract contract incrementally calculates the total amount of veCHESS in each week.\\n///      A derived contract should maintain the following state variables:\\n///\\n///      * `mapping(uint256 => uint256) scheduledUnlock`, amount of CHESS that will be\\n///        unlocked in each week in the future.\\n///      * `mapping(uint256 => uint256) veSupplyPerWeek`, total veCHESS in each week in the past.\\n///      * `uint256 checkpointWeek`, start timestamp of the week when the checkpoint was updated\\n///         the last time.\\n///      * `uint256 nextWeekSupply`, total veCHESS at the end of the last checkpoint's week.\\n///      * `uint256 totalLocked`, amount of CHESS locked now.\\nabstract contract VotingEscrowCheckpoint is CoreUtility {\\n    using SafeMath for uint256;\\n\\n    uint256 internal immutable _maxTime;\\n\\n    constructor(uint256 maxTime_) internal {\\n        _maxTime = maxTime_;\\n    }\\n\\n    /// @dev Update checkpoint to the given week and record weekly supply in the past.\\n    ///      This function should be called before any update to `scheduledUnlock`.\\n    ///      It writes new values to the `veSupplyPerWeek` mapping. Caller is responsible for\\n    ///      setting `checkpointWeek`, `nextWeekSupply` and `totalLocked` to the return values.\\n    /// @param scheduledUnlock amount of CHESS that will be unlocked in each week\\n    /// @param checkpointWeek the old checkpoint timestamp\\n    /// @param nextWeekSupply total veCHESS at the end of the last checkpoint's week\\n    /// @param totalLocked amount of CHESS locked in the last checkpoint\\n    /// @param veSupplyPerWeek total veCHESS in each week, written by this function\\n    /// @return newCheckpointWeek the new checkpoint timestamp\\n    /// @return newNextWeekSupply total veCHESS at the end of this trading week\\n    /// @return newTotalLocked amount of CHESS locked now\\n    function _veCheckpoint(\\n        mapping(uint256 => uint256) storage scheduledUnlock,\\n        uint256 checkpointWeek,\\n        uint256 nextWeekSupply,\\n        uint256 totalLocked,\\n        mapping(uint256 => uint256) storage veSupplyPerWeek\\n    )\\n        internal\\n        returns (\\n            uint256 newCheckpointWeek,\\n            uint256 newNextWeekSupply,\\n            uint256 newTotalLocked\\n        )\\n    {\\n        uint256 nextWeek = _endOfWeek(block.timestamp);\\n        for (uint256 w = checkpointWeek + 1 weeks; w < nextWeek; w += 1 weeks) {\\n            veSupplyPerWeek[w] = nextWeekSupply;\\n            // Remove CHESS unlocked at the beginning of the next week from total locked amount.\\n            totalLocked = totalLocked.sub(scheduledUnlock[w]);\\n            // Calculate supply at the end of the next week.\\n            nextWeekSupply = nextWeekSupply.sub(totalLocked.mul(1 weeks) / _maxTime);\\n        }\\n        newCheckpointWeek = nextWeek - 1 weeks;\\n        newNextWeekSupply = nextWeekSupply;\\n        newTotalLocked = totalLocked;\\n    }\\n\\n    /// @dev Update `scheduledUnlock` and the checkpoint according to the change of a user's locked CHESS.\\n    ///      This function should be called after the checkpoint is updated by `veCheckpoint()`.\\n    ///      It updates the `scheduledUnlock` mapping. Caller is responsible for setting\\n    ///      `nextWeekSupply` and `totalLocked` to the return values.\\n    /// @param nextWeekSupply total veCHESS at the end of this trading week before this change\\n    /// @param totalLocked amount of CHESS locked before this change\\n    /// @param oldAmount old amount of locked CHESS\\n    /// @param oldUnlockTime old unlock timestamp\\n    /// @param newAmount new amount of locked CHESS\\n    /// @param newUnlockTime new unlock timestamp\\n    /// @param scheduledUnlock amount of CHESS that will be unlocked in each week, updated by this function\\n    /// @return newNextWeekSupply total veCHESS at at the end of this trading week after this change\\n    /// @return newTotalLocked amount of CHESS locked after this change\\n    function _veUpdateLock(\\n        uint256 nextWeekSupply,\\n        uint256 totalLocked,\\n        uint256 oldAmount,\\n        uint256 oldUnlockTime,\\n        uint256 newAmount,\\n        uint256 newUnlockTime,\\n        mapping(uint256 => uint256) storage scheduledUnlock\\n    ) internal returns (uint256 newNextWeekSupply, uint256 newTotalLocked) {\\n        uint256 nextWeek = _endOfWeek(block.timestamp);\\n        newTotalLocked = totalLocked;\\n        newNextWeekSupply = nextWeekSupply;\\n        // Remove the old schedule if there is one\\n        if (oldAmount > 0 && oldUnlockTime >= nextWeek) {\\n            newTotalLocked = newTotalLocked.sub(oldAmount);\\n            newNextWeekSupply = newNextWeekSupply.sub(\\n                oldAmount.mul(oldUnlockTime - nextWeek) / _maxTime\\n            );\\n        }\\n        newTotalLocked = newTotalLocked.add(newAmount);\\n        // Round up on division when added to the total supply, so that the total supply is never\\n        // smaller than the sum of all accounts' veCHESS balance.\\n        newNextWeekSupply = newNextWeekSupply.add(\\n            newAmount.mul(newUnlockTime - nextWeek).add(_maxTime - 1) / _maxTime\\n        );\\n\\n        if (oldUnlockTime == newUnlockTime) {\\n            scheduledUnlock[oldUnlockTime] = scheduledUnlock[oldUnlockTime].sub(oldAmount).add(\\n                newAmount\\n            );\\n        } else {\\n            if (oldUnlockTime >= nextWeek) {\\n                scheduledUnlock[oldUnlockTime] = scheduledUnlock[oldUnlockTime].sub(oldAmount);\\n            }\\n            scheduledUnlock[newUnlockTime] = scheduledUnlock[newUnlockTime].add(newAmount);\\n        }\\n    }\\n\\n    /// @dev Calculate the current total veCHESS amount from the last checkpoint.\\n    /// @param scheduledUnlock amount of CHESS that will be unlocked in each week\\n    /// @param checkpointWeek the last checkpoint timestamp\\n    /// @param nextWeekSupply total veCHESS at the end of the last checkpoint's week\\n    /// @param totalLocked amount of CHESS locked in the last checkpoint\\n    /// @return Current total veCHESS amount\\n    function _veTotalSupply(\\n        mapping(uint256 => uint256) storage scheduledUnlock,\\n        uint256 checkpointWeek,\\n        uint256 nextWeekSupply,\\n        uint256 totalLocked\\n    ) internal view returns (uint256) {\\n        uint256 nextWeek = _endOfWeek(block.timestamp);\\n        uint256 thisWeek = nextWeek - 1 weeks;\\n        if (checkpointWeek + 1 weeks < nextWeek) {\\n            for (uint256 w = checkpointWeek + 1 weeks; w < thisWeek; w += 1 weeks) {\\n                // Remove CHESS unlocked at the beginning of the next week from total locked amount.\\n                totalLocked = totalLocked.sub(scheduledUnlock[w]);\\n                // Calculate supply at the end of the next week.\\n                nextWeekSupply = nextWeekSupply.sub(totalLocked.mul(1 weeks) / _maxTime);\\n            }\\n            totalLocked = totalLocked.sub(scheduledUnlock[thisWeek]);\\n            return nextWeekSupply.sub(totalLocked.mul(block.timestamp - thisWeek) / _maxTime);\\n        } else {\\n            return nextWeekSupply.add(totalLocked.mul(nextWeek - block.timestamp) / _maxTime);\\n        }\\n    }\\n\\n    /// @dev Calculate the total veCHESS amount at a given trading week boundary. The given week\\n    ///      start timestamp must be later than the last checkpoint. For older weeks,\\n    ///      derived contract should read from the `veSupplyPerWeek` mapping instead.\\n    /// @param week Start timestamp of a trading week, must be greater than `checkpointWeek`\\n    /// @param scheduledUnlock amount of CHESS that will be unlocked in each week\\n    /// @param checkpointWeek the last checkpoint timestamp\\n    /// @param nextWeekSupply total veCHESS at the end of the last checkpoint's week\\n    /// @param totalLocked amount of CHESS locked in the last checkpoint\\n    /// @return Total veCHESS amount at `week`\\n    function _veTotalSupplyAtWeek(\\n        uint256 week,\\n        mapping(uint256 => uint256) storage scheduledUnlock,\\n        uint256 checkpointWeek,\\n        uint256 nextWeekSupply,\\n        uint256 totalLocked\\n    ) internal view returns (uint256) {\\n        if (checkpointWeek + 1 weeks < week) {\\n            for (uint256 w = checkpointWeek + 1 weeks; w < week; w += 1 weeks) {\\n                // Remove CHESS unlocked at the beginning of the next week from total locked amount.\\n                totalLocked = totalLocked.sub(scheduledUnlock[w]);\\n                // Calculate supply at the end of the next week.\\n                nextWeekSupply = nextWeekSupply.sub(totalLocked.mul(1 weeks) / _maxTime);\\n            }\\n        }\\n        return nextWeekSupply;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/CoreUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nabstract contract CoreUtility {\\n    using SafeMath for uint256;\\n\\n    /// @dev UTC time of a day when the fund settles.\\n    uint256 internal constant SETTLEMENT_TIME = 14 hours;\\n\\n    /// @dev Return end timestamp of the trading week containing a given timestamp.\\n    ///\\n    ///      A trading week starts at UTC time `SETTLEMENT_TIME` on a Thursday (inclusive)\\n    ///      and ends at the same time of the next Thursday (exclusive).\\n    /// @param timestamp The given timestamp\\n    /// @return End timestamp of the trading week.\\n    function _endOfWeek(uint256 timestamp) internal pure returns (uint256) {\\n        return ((timestamp.add(1 weeks) - SETTLEMENT_TIME) / 1 weeks) * 1 weeks + SETTLEMENT_TIME;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeDecimalMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n// Copyright (c) 2019 Synthetix\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint256;\\n\\n    /* Number of decimal places in the representations. */\\n    uint256 private constant decimals = 18;\\n    uint256 private constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint256 private constant UNIT = 10**uint256(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint256 private constant PRECISE_UNIT = 10**uint256(highPrecisionDecimals);\\n    uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR =\\n        10**uint256(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y).div(UNIT);\\n    }\\n\\n    function multiplyDecimalPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    function divideDecimalPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(PRECISE_UNIT).div(y);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint256 i) internal pure returns (uint256) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint256 i) internal pure returns (uint256) {\\n        uint256 quotientTimesTen = i.mul(10).div(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen = quotientTimesTen.add(10);\\n        }\\n\\n        return quotientTimesTen.div(10);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, and the max value of\\n     * uint256 on overflow.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        return c / a != b ? type(uint256).max : c;\\n    }\\n\\n    function saturatingMultiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return saturatingMul(x, y).div(UNIT);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBallot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\ninterface IBallot {\\n    struct Voter {\\n        uint256 amount;\\n        uint256 unlockTime;\\n        uint256 weight;\\n    }\\n\\n    function count(uint256 timestamp) external view returns (uint256);\\n\\n    function syncWithVotingEscrow(address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFundV4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"./IFundV3.sol\\\";\\n\\ninterface IFundV4 is IFundV3 {\\n    function getRelativeIncome(uint256 day)\\n        external\\n        view\\n        returns (uint256 incomeOverQ, uint256 incomeOverB);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITwapOracleV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"./ITwapOracle.sol\\\";\\n\\ninterface ITwapOracleV2 is ITwapOracle {\\n    function getLatest() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAddressWhitelist {\\n    function check(address account) external view returns (bool);\\n}\\n\\ninterface IVotingEscrowCallback {\\n    function syncWithVotingEscrow(address account) external;\\n}\\n\\ninterface IVotingEscrow {\\n    struct LockedBalance {\\n        uint256 amount;\\n        uint256 unlockTime;\\n    }\\n\\n    function token() external view returns (address);\\n\\n    function maxTime() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOfAtTimestamp(address account, uint256 timestamp)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTimestampDropBelow(address account, uint256 threshold)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedBalance(address account) external view returns (LockedBalance memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFundV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITwapOracleV2.sol\\\";\\n\\ninterface IFundV3 {\\n    /// @notice A linear transformation matrix that represents a rebalance.\\n    ///\\n    ///         ```\\n    ///             [        1        0        0 ]\\n    ///         R = [ ratioB2Q  ratioBR        0 ]\\n    ///             [ ratioR2Q        0  ratioBR ]\\n    ///         ```\\n    ///\\n    ///         Amounts of the three tranches `q`, `b` and `r` can be rebalanced by multiplying the matrix:\\n    ///\\n    ///         ```\\n    ///         [ q', b', r' ] = [ q, b, r ] * R\\n    ///         ```\\n    struct Rebalance {\\n        uint256 ratioB2Q;\\n        uint256 ratioR2Q;\\n        uint256 ratioBR;\\n        uint256 timestamp;\\n    }\\n\\n    function tokenUnderlying() external view returns (address);\\n\\n    function tokenQ() external view returns (address);\\n\\n    function tokenB() external view returns (address);\\n\\n    function tokenR() external view returns (address);\\n\\n    function tokenShare(uint256 tranche) external view returns (address);\\n\\n    function primaryMarket() external view returns (address);\\n\\n    function primaryMarketUpdateProposal() external view returns (address, uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function strategyUpdateProposal() external view returns (address, uint256);\\n\\n    function underlyingDecimalMultiplier() external view returns (uint256);\\n\\n    function twapOracle() external view returns (ITwapOracleV2);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function endOfDay(uint256 timestamp) external pure returns (uint256);\\n\\n    function trancheTotalSupply(uint256 tranche) external view returns (uint256);\\n\\n    function trancheBalanceOf(uint256 tranche, address account) external view returns (uint256);\\n\\n    function trancheAllBalanceOf(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function trancheBalanceVersion(address account) external view returns (uint256);\\n\\n    function trancheAllowance(\\n        uint256 tranche,\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function trancheAllowanceVersion(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function trancheTransfer(\\n        uint256 tranche,\\n        address recipient,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function trancheTransferFrom(\\n        uint256 tranche,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function trancheApprove(\\n        uint256 tranche,\\n        address spender,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function getRebalanceSize() external view returns (uint256);\\n\\n    function getRebalance(uint256 index) external view returns (Rebalance memory);\\n\\n    function getRebalanceTimestamp(uint256 index) external view returns (uint256);\\n\\n    function currentDay() external view returns (uint256);\\n\\n    function splitRatio() external view returns (uint256);\\n\\n    function historicalSplitRatio(uint256 version) external view returns (uint256);\\n\\n    function fundActivityStartTime() external view returns (uint256);\\n\\n    function isFundActive(uint256 timestamp) external view returns (bool);\\n\\n    function getEquivalentTotalB() external view returns (uint256);\\n\\n    function getEquivalentTotalQ() external view returns (uint256);\\n\\n    function historicalEquivalentTotalB(uint256 timestamp) external view returns (uint256);\\n\\n    function historicalNavs(uint256 timestamp) external view returns (uint256 navB, uint256 navR);\\n\\n    function extrapolateNav(uint256 price)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function doRebalance(\\n        uint256 amountQ,\\n        uint256 amountB,\\n        uint256 amountR,\\n        uint256 index\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newAmountQ,\\n            uint256 newAmountB,\\n            uint256 newAmountR\\n        );\\n\\n    function batchRebalance(\\n        uint256 amountQ,\\n        uint256 amountB,\\n        uint256 amountR,\\n        uint256 fromIndex,\\n        uint256 toIndex\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newAmountQ,\\n            uint256 newAmountB,\\n            uint256 newAmountR\\n        );\\n\\n    function refreshBalance(address account, uint256 targetVersion) external;\\n\\n    function refreshAllowance(\\n        address owner,\\n        address spender,\\n        uint256 targetVersion\\n    ) external;\\n\\n    function shareTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    function shareTransferFrom(\\n        address spender,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (uint256 newAllowance);\\n\\n    function shareIncreaseAllowance(\\n        address sender,\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (uint256 newAllowance);\\n\\n    function shareDecreaseAllowance(\\n        address sender,\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (uint256 newAllowance);\\n\\n    function shareApprove(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    function historicalUnderlying(uint256 timestamp) external view returns (uint256);\\n\\n    function getTotalUnderlying() external view returns (uint256);\\n\\n    function getStrategyUnderlying() external view returns (uint256);\\n\\n    function getTotalDebt() external view returns (uint256);\\n\\n    event RebalanceTriggered(\\n        uint256 indexed index,\\n        uint256 indexed day,\\n        uint256 navSum,\\n        uint256 navB,\\n        uint256 navROrZero,\\n        uint256 ratioB2Q,\\n        uint256 ratioR2Q,\\n        uint256 ratioBR\\n    );\\n    event Settled(uint256 indexed day, uint256 navB, uint256 navR, uint256 interestRate);\\n    event InterestRateUpdated(uint256 baseInterestRate, uint256 floatingInterestRate);\\n    event BalancesRebalanced(\\n        address indexed account,\\n        uint256 version,\\n        uint256 balanceQ,\\n        uint256 balanceB,\\n        uint256 balanceR\\n    );\\n    event AllowancesRebalanced(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 version,\\n        uint256 allowanceQ,\\n        uint256 allowanceB,\\n        uint256 allowanceR\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITwapOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\ninterface ITwapOracle {\\n    enum UpdateType {PRIMARY, SECONDARY, OWNER, CHAINLINK, UNISWAP_V2}\\n\\n    function getTwap(uint256 timestamp) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"votingEscrow_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldUnlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"}],\"name\":\"averageAtWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getFundRelativeIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"incomeOverQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incomeOverB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"internalType\":\"struct IBallot.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextWeekSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scheduledUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"syncWithVotingEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAtWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"veSupplyPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedNextWeekSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weightedScheduledUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedTotalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"}],\"name\":\"weightedTotalSupplyAtWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weightedVeSupplyPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InterestRateBallotV3", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003fadadf8f443a6dc1e091f14ddf8d5046b6cf95e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}