{"SourceCode": "/** \r\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  .***   XXXXXXXXXXXXXXXXXX\r\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  ,*********  XXXXXXXXXXXXXXXX\r\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXX  ***************  XXXXXXXXXXXXX\r\n * XXXXXXXXXXXXXXXXXXXXXXXXX  .*******************  XXXXXXXXXXX\r\n * XXXXXXXXXXXXXXXXXXXXXXX  ***********    **********  XXXXXXXX\r\n * XXXXXXXXXXXXXXXXXXXX   ***********       ***********  XXXXXX\r\n * XXXXXXXXXXXXXXXXXX  ***********         ***************  XXX\r\n * XXXXXXXXXXXXXXXX  ***********           ****    ********* XX\r\n * XXXXXXXXXXXXXXXX *********      ***    ***      *********  X\r\n * XXXXXXXXXXXXXXXX  **********  *****          *********** XXX\r\n * XXXXXXXXXXXX   /////.*************         ***********  XXXX\r\n * XXXXXXXXX  /////////...***********      ************  XXXXXX\r\n * XXXXXXX/ ///////////..... /////////   ///////////   XXXXXXXX\r\n * XXXXXX  /    //////.........///////////////////   XXXXXXXXXX\r\n * XXXXXXXXXX .///////...........//////////////   XXXXXXXXXXXXX\r\n * XXXXXXXXX .///////.....//..////  /////////  XXXXXXXXXXXXXXXX\r\n * XXXXXXX# /////////////////////  XXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\n * XXXXX   ////////////////////   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\n * XX   ////////////// //////   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\n * XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX \r\n */\r\ninterface IEternalWait {\r\n\tfunction _dateTimeContract() external pure returns (address);\r\n\tfunction _defaultOwner() external pure returns (address);\r\n\tfunction _getFinalized(uint256 niftyType) external pure returns (bool);\r\n\tfunction _id() external pure returns (uint256);\r\n    function _mintCount(uint256 niftyType) external view returns (uint256);\r\n    function _typeCount() external view returns (uint256);\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function creator() external pure returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n    function symbol() external view returns (string memory);\r\n    function tokenIPFSHash(uint256 tokenId) external view returns (string memory);\r\n    function tokenName(uint256 tokenId) external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ninterface IDateTime {\r\n    function getHour(uint timestamp) external view returns (uint8);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ninterface INiftyRegistry {\r\n   function isValidNiftySender(address sending_key) external view returns (bool);\r\n}\r\n\r\ncontract EternalWaitWrapper {\r\n\r\n\tIEternalWait _eternalWait;\r\n\r\n\taddress internal _eternalWaitContract;\r\n\r\n    mapping (uint256 => address) internal _owners;\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n\tconstructor() {\r\n        _eternalWaitContract = 0x1d57A4C1D91F617E42D1B103895a673A60631abF;\r\n        _eternalWait = IEternalWait(_eternalWaitContract);      \r\n    }\r\n\r\n    function _dateTimeContract() public view returns (address) {\r\n    \treturn _eternalWait._dateTimeContract();\r\n    }\r\n\r\n    function _defaultOwner() public view returns (address) {\r\n    \treturn _eternalWait._defaultOwner();\r\n    }\r\n\r\n    function _getFinalized(uint256 niftyType) public view returns (bool) {\r\n    \treturn _eternalWait._getFinalized(niftyType);\r\n    }\r\n\r\n    function _id() public view returns (uint256) {\r\n    \treturn _eternalWait._id();\r\n    }\r\n\r\n    function _mintCount(uint256 niftyType) public view returns (uint256) {\r\n    \treturn _eternalWait._mintCount(niftyType);\r\n    }\r\n\r\n    function _typeCount() public view returns (uint256) {\r\n    \treturn _eternalWait._typeCount();\r\n    }\r\n\r\n    function balanceOf(address owner) public view virtual returns (uint256) {\r\n    \treturn _eternalWait.balanceOf(owner);\r\n    }\r\n\r\n    function creator() public view virtual returns (string memory) {\r\n    \treturn _eternalWait.creator();\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\r\n    \trequire(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n    \treturn _eternalWait.name();\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\r\n    \treturn _eternalWait.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n    \treturn _eternalWait.symbol();\r\n    }\r\n\r\n    function tokenIPFSHash(uint256 tokenId) external view returns (string memory) {\r\n    \tuint8 hour = IDateTime(_dateTimeContract()).getHour(block.timestamp);\r\n    \tif(hour == 5){ // State 02\r\n    \t\treturn \"QmRoeT1xbRhJjVCpFDC3mmHaA8eCEXNaGn1oBAwEyT7e3q\";\r\n    \t}\r\n    \treturn _eternalWait.tokenIPFSHash(tokenId);\r\n    }\r\n\r\n    function tokenName(uint256 tokenId) external view returns (string memory) {\r\n    \treturn _eternalWait.tokenName(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\r\n    \treturn _eternalWait.tokenURI(tokenId);\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function burn(uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        // Clear approvals\r\n        approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        \r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        // Clear approvals from the previous owner\r\n        approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        // Clear approvals from the previous owner\r\n        approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {\r\n        if (isContract(to)) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    modifier onlyValidSender() {\r\n        address registry = 0x6e53130dDfF21E3BC963Ee902005223b9A202106;\r\n        require(INiftyRegistry(registry).isValidNiftySender(msg.sender), \"NiftyEntity: Invalid msg.sender\");\r\n        _;\r\n    }\r\n\r\n    function mintNifty(uint256 tokenId) public {  \r\n        require(!_exists(tokenId), \"EternalWaitWrapper: tokenId already minted\");\r\n\r\n        address holder = _eternalWait.ownerOf(tokenId);\r\n        address sender = _msgSender();\r\n        \r\n        if(sender == holder){\r\n            _mint(sender, address(this), tokenId);\r\n        }\r\n    }\r\n\r\n    function _mint(address sender, address caller, uint256 tokenId) internal {\r\n        bool permitted = _eternalWait.isApprovedForAll(sender, caller);\r\n        require(permitted, \"EternalWaitWrapper: set approval on EternalWait\");\r\n\r\n        address burner = 0x000000000000000000000000000000000000dEaD;\r\n        _eternalWait.transferFrom(sender, burner, tokenId);\r\n            \r\n        _owners[tokenId] = sender;\r\n        _balances[sender] += 1;\r\n        emit Transfer(address(0), sender, tokenId);\r\n    }\r\n\r\n    function mintNifty() public onlyValidSender {\r\n        address omnibus = 0xE052113bd7D7700d623414a0a4585BCaE754E9d5;\r\n\r\n        for(uint tokenId = 100010001; tokenId <= 100010080; tokenId++) {\r\n\r\n            address holder = _eternalWait.ownerOf(tokenId);\r\n\r\n            if(holder == omnibus){\r\n                _mint(msg.sender, address(this), tokenId);\r\n            }\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_dateTimeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_defaultOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"}],\"name\":\"_getFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"niftyType\",\"type\":\"uint256\"}],\"name\":\"_mintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_typeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintNifty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintNifty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIPFSHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EternalWaitWrapper", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "1500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://35344acae1d8b585f99ba9433c69f619ef7c491b789cece528b969d65971ca63"}