{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/release/extensions/external-position-manager/external-positions/aave-v3-debt/AaveV3DebtPositionParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport {ERC20} from \\\"openzeppelin-solc-0.8/token/ERC20/ERC20.sol\\\";\\nimport {IAaveAToken} from \\\"../../../../../external-interfaces/IAaveAToken.sol\\\";\\nimport {AddOnlyAddressListOwnerConsumerMixin} from\\n    \\\"../../../../../persistent/address-list-registry/address-list-owners/utils/0.8.19/AddOnlyAddressListOwnerConsumerMixin.sol\\\";\\nimport {IExternalPositionParser} from \\\"../IExternalPositionParser.sol\\\";\\nimport {AaveV3DebtPositionDataDecoder} from \\\"./AaveV3DebtPositionDataDecoder.sol\\\";\\nimport {IAaveV3DebtPosition} from \\\"./IAaveV3DebtPosition.sol\\\";\\n\\npragma solidity 0.8.19;\\n\\n/// @title AaveV3DebtPositionParser\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Parser for Aave Debt Positions\\ncontract AaveV3DebtPositionParser is\\n    IExternalPositionParser,\\n    AaveV3DebtPositionDataDecoder,\\n    AddOnlyAddressListOwnerConsumerMixin\\n{\\n    constructor(address _addressListRegistry, uint256 _aTokenListId)\\n        AddOnlyAddressListOwnerConsumerMixin(_addressListRegistry, _aTokenListId)\\n    {}\\n\\n    /// @notice Parses the assets to send and receive for the callOnExternalPosition\\n    /// @param _externalPosition The _externalPosition to be called\\n    /// @param _actionId The _actionId for the callOnExternalPosition\\n    /// @param _encodedActionArgs The encoded parameters for the callOnExternalPosition\\n    /// @return assetsToTransfer_ The assets to be transferred from the Vault\\n    /// @return amountsToTransfer_ The amounts to be transferred from the Vault\\n    /// @return assetsToReceive_ The assets to be received at the Vault\\n    function parseAssetsForAction(address _externalPosition, uint256 _actionId, bytes memory _encodedActionArgs)\\n        external\\n        override\\n        returns (\\n            address[] memory assetsToTransfer_,\\n            uint256[] memory amountsToTransfer_,\\n            address[] memory assetsToReceive_\\n        )\\n    {\\n        if (_actionId == uint256(IAaveV3DebtPosition.Actions.AddCollateral)) {\\n            bool fromUnderlying;\\n            (assetsToTransfer_, amountsToTransfer_, fromUnderlying) =\\n                __decodeAddCollateralActionArgs(_encodedActionArgs);\\n\\n            for (uint256 i; i < assetsToTransfer_.length; i++) {\\n                // initialiy the assetsToTransfer_ are the aTokens\\n                __validateAndAddListItemIfUnregistered(assetsToTransfer_[i]);\\n\\n                if (fromUnderlying) {\\n                    assetsToTransfer_[i] = IAaveAToken(assetsToTransfer_[i]).UNDERLYING_ASSET_ADDRESS();\\n                }\\n            }\\n        } else if (_actionId == uint256(IAaveV3DebtPosition.Actions.Borrow)) {\\n            // No need to validate tokens, as `borrow()` call to Aave will fail for invalid tokens,\\n            // and even if Aave logic changes to fail silently, the worst case would be that\\n            // this function is used to indirectly add and track a misc asset\\n            (assetsToReceive_,) = __decodeBorrowActionArgs(_encodedActionArgs);\\n        } else if (_actionId == uint256(IAaveV3DebtPosition.Actions.RemoveCollateral)) {\\n            bool toUnderlying;\\n            // Lib validates that each is a valid collateral asset\\n            (assetsToReceive_,, toUnderlying) = __decodeRemoveCollateralActionArgs(_encodedActionArgs);\\n\\n            if (toUnderlying) {\\n                for (uint256 i; i < assetsToReceive_.length; i++) {\\n                    assetsToReceive_[i] = IAaveAToken(assetsToReceive_[i]).UNDERLYING_ASSET_ADDRESS();\\n                }\\n            }\\n        } else if (_actionId == uint256(IAaveV3DebtPosition.Actions.RepayBorrow)) {\\n            // Lib validates that each is a valid borrowed asset\\n            (assetsToTransfer_, amountsToTransfer_) = __decodeRepayBorrowActionArgs(_encodedActionArgs);\\n\\n            for (uint256 i; i < assetsToTransfer_.length; i++) {\\n                if (amountsToTransfer_[i] == type(uint256).max) {\\n                    // Transfers the full repay amount to the external position,\\n                    // which will still call `repay()` on the lending pool with max uint.\\n                    // This is fine, because `repay()` only uses up to the full repay amount.\\n                    address debtToken =\\n                        IAaveV3DebtPosition(_externalPosition).getDebtTokenForBorrowedAsset(assetsToTransfer_[i]);\\n                    amountsToTransfer_[i] = ERC20(debtToken).balanceOf(_externalPosition);\\n                }\\n            }\\n        }\\n\\n        // No validations or transferred assets passed for Actions.SetEMode, and Actions.SetUseReserveAsCollateral\\n        return (assetsToTransfer_, amountsToTransfer_, assetsToReceive_);\\n    }\\n\\n    /// @notice Parse and validate input arguments to be used when initializing a newly-deployed ExternalPositionProxy\\n    /// @dev Empty for this external position type\\n    function parseInitArgs(address, bytes memory) external override returns (bytes memory) {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IAaveAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IAaveAToken interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Common Aave aToken interface for V2 and V3\\ninterface IAaveAToken {\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address underlying_);\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/address-list-registry/address-list-owners/utils/0.8.19/AddOnlyAddressListOwnerConsumerMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../../IAddressListRegistry.sol\\\";\\nimport \\\"../IAddOnlyAddressListOwner.sol\\\";\\n\\n/// @title AddOnlyAddressListOwnerConsumerMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with a contract that inherits `AddOnlyAddressListOwnerBase`\\nabstract contract AddOnlyAddressListOwnerConsumerMixin {\\n    IAddressListRegistry internal immutable ADDRESS_LIST_REGISTRY_CONTRACT;\\n    uint256 internal immutable LIST_ID;\\n    IAddOnlyAddressListOwner internal immutable LIST_OWNER_CONTRACT;\\n\\n    constructor(address _addressListRegistry, uint256 _listId) {\\n        ADDRESS_LIST_REGISTRY_CONTRACT = IAddressListRegistry(_addressListRegistry);\\n        LIST_ID = _listId;\\n\\n        address listOwner = IAddressListRegistry(_addressListRegistry).getListOwner(_listId);\\n        LIST_OWNER_CONTRACT = IAddOnlyAddressListOwner(listOwner);\\n    }\\n\\n    /// @dev Helper to lookup an item's existence and then attempt to add it.\\n    /// AddOnlyAddressListOwnerBase.addValidatedItemsToList() performs validation on the item\\n    /// via the __validateItems() implementation of its inheriting contract.\\n    function __validateAndAddListItemIfUnregistered(address _item) internal {\\n        if (!ADDRESS_LIST_REGISTRY_CONTRACT.isInList(LIST_ID, _item)) {\\n            address[] memory items = new address[](1);\\n            items[0] = _item;\\n\\n            LIST_OWNER_CONTRACT.addValidatedItemsToList(items);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/external-position-manager/external-positions/IExternalPositionParser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IExternalPositionParser Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all external position parsers\\ninterface IExternalPositionParser {\\n    function parseAssetsForAction(address _externalPosition, uint256 _actionId, bytes memory _encodedActionArgs)\\n        external\\n        returns (\\n            address[] memory assetsToTransfer_,\\n            uint256[] memory amountsToTransfer_,\\n            address[] memory assetsToReceive_\\n        );\\n\\n    function parseInitArgs(address _vaultProxy, bytes memory _initializationData)\\n        external\\n        returns (bytes memory initArgs_);\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/external-position-manager/external-positions/aave-v3-debt/AaveV3DebtPositionDataDecoder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.8.19;\\n\\n/// @title AaveV3DebtPositionDataDecoder Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Abstract contract containing data decodings for AaveV3DebtPosition payloads\\nabstract contract AaveV3DebtPositionDataDecoder {\\n    /// @dev Helper to decode args used during the AddCollateral action\\n    function __decodeAddCollateralActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (address[] memory aTokens_, uint256[] memory amounts_, bool fromUnderlying_)\\n    {\\n        return abi.decode(_actionArgs, (address[], uint256[], bool));\\n    }\\n\\n    /// @dev Helper to decode args used during the Borrow action\\n    function __decodeBorrowActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (address[] memory underlyings_, uint256[] memory amounts_)\\n    {\\n        return abi.decode(_actionArgs, (address[], uint256[]));\\n    }\\n\\n    /// @dev Helper to decode args used during the RemoveCollateral action\\n    function __decodeRemoveCollateralActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (address[] memory aTokens_, uint256[] memory amounts_, bool toUnderlying_)\\n    {\\n        return abi.decode(_actionArgs, (address[], uint256[], bool));\\n    }\\n\\n    /// @dev Helper to decode args used during the RepayBorrow action\\n    function __decodeRepayBorrowActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (address[] memory underlyings_, uint256[] memory amounts_)\\n    {\\n        return abi.decode(_actionArgs, (address[], uint256[]));\\n    }\\n\\n    /// @dev Helper to decode args used during the SetEMode action\\n    function __decodeSetEModeActionArgs(bytes memory _actionArgs) internal pure returns (uint8 categoryId_) {\\n        return abi.decode(_actionArgs, (uint8));\\n    }\\n\\n    /// @dev Helper to decode args used during the SetUseReserveAsCollateral action\\n    function __decodeSetUseReserveAsCollateralActionArgs(bytes memory _actionArgs)\\n        internal\\n        pure\\n        returns (address underlying_, bool useAsCollateral_)\\n    {\\n        return abi.decode(_actionArgs, (address, bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/extensions/external-position-manager/external-positions/aave-v3-debt/IAaveV3DebtPosition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\nimport {IExternalPosition} from \\\"../../../../../persistent/external-positions/IExternalPosition.sol\\\";\\n\\npragma solidity 0.8.19;\\n\\n/// @title IAaveDebtPosition Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IAaveV3DebtPosition is IExternalPosition {\\n    enum Actions {\\n        AddCollateral,\\n        RemoveCollateral,\\n        Borrow,\\n        RepayBorrow,\\n        SetEMode,\\n        SetUseReserveAsCollateral\\n    }\\n\\n    function getDebtTokenForBorrowedAsset(address) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/address-list-registry/IAddressListRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IAddressListRegistry Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IAddressListRegistry {\\n    enum UpdateType {\\n        None,\\n        AddOnly,\\n        RemoveOnly,\\n        AddAndRemove\\n    }\\n\\n    /////////////////////\\n    // LIST MANAGEMENT //\\n    /////////////////////\\n\\n    function addToList(uint256 _id, address[] calldata _items) external;\\n\\n    function attestLists(uint256[] calldata _ids, string[] calldata _descriptions) external;\\n\\n    function createList(address _owner, UpdateType _updateType, address[] calldata _initialItems)\\n        external\\n        returns (uint256 id_);\\n\\n    function removeFromList(uint256 _id, address[] calldata _items) external;\\n\\n    function setListOwner(uint256 _id, address _nextOwner) external;\\n\\n    function setListUpdateType(uint256 _id, UpdateType _nextUpdateType) external;\\n\\n    /////////////////\\n    // LIST SEARCH //\\n    /////////////////\\n\\n    function areAllInAllLists(uint256[] memory _ids, address[] memory _items)\\n        external\\n        view\\n        returns (bool areAllInAllLists_);\\n\\n    function areAllInList(uint256 _id, address[] memory _items) external view returns (bool areAllInList_);\\n\\n    function areAllInSomeOfLists(uint256[] memory _ids, address[] memory _items)\\n        external\\n        view\\n        returns (bool areAllInSomeOfLists_);\\n\\n    function areAllNotInAnyOfLists(uint256[] memory _ids, address[] memory _items)\\n        external\\n        view\\n        returns (bool areAllNotInAnyOfLists_);\\n\\n    function areAllNotInList(uint256 _id, address[] memory _items) external view returns (bool areAllNotInList_);\\n\\n    function isInAllLists(uint256[] memory _ids, address _item) external view returns (bool isInAllLists_);\\n\\n    function isInList(uint256 _id, address _item) external view returns (bool isInList_);\\n\\n    function isInSomeOfLists(uint256[] memory _ids, address _item) external view returns (bool isInSomeOfLists_);\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    function getListCount() external view returns (uint256 count_);\\n\\n    function getListOwner(uint256 _id) external view returns (address owner_);\\n\\n    function getListUpdateType(uint256 _id) external view returns (UpdateType updateType_);\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/address-list-registry/address-list-owners/utils/IAddOnlyAddressListOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IAddOnlyAddressListOwner Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IAddOnlyAddressListOwner {\\n    function addValidatedItemsToList(address[] calldata _items) external;\\n}\\n\"\r\n    },\r\n    \"contracts/persistent/external-positions/IExternalPosition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IExternalPosition Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IExternalPosition {\\n    function getDebtAssets() external returns (address[] memory, uint256[] memory);\\n\\n    function getManagedAssets() external returns (address[] memory, uint256[] memory);\\n\\n    function init(bytes memory) external;\\n\\n    function receiveCallFromVault(bytes memory) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-solc-0.6/contracts/\",\r\n      \"@uniswap/v3-core/=lib/uniswap-v3-core/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-solc-0.6/=lib/openzeppelin-solc-0.6/contracts/\",\r\n      \"openzeppelin-solc-0.7/=lib/openzeppelin-solc-0.7/contracts/\",\r\n      \"openzeppelin-solc-0.8/=lib/openzeppelin-solc-0.8/contracts/\",\r\n      \"uniswap-v3-core/=lib/uniswap-v3-core/\",\r\n      \"uniswap-v3-core-0.8/=lib/uniswap-v3-core-0.8/\",\r\n      \"uniswap-v3-periphery/=lib/uniswap-v3-periphery/contracts/\",\r\n      \"uniswap-v3-periphery-0.8/=lib/uniswap-v3-periphery-0.8/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressListRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aTokenListId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_externalPosition\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_encodedActionArgs\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForAction\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"assetsToTransfer_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"assetsToReceive_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"parseInitArgs\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AaveV3DebtPositionParser", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004eb4c7babfb5d54ab4857265b482fb6512d22dff00000000000000000000000000000000000000000000000000000000000001cf", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}