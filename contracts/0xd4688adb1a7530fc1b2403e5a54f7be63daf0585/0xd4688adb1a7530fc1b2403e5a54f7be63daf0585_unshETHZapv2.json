{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/communal/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.11 <0.9.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"lib/communal/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"lib/communal/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"lib/communal/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor () internal {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"lib/communal/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"lib/communal/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"lib/communal/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value:value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"src/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.5;\\r\\n\\r\\n\\r\\n/// @title Router token swapping functionality\\r\\n/// @notice Functions for swapping tokens via Uniswap V3\\r\\ninterface ISwapRouter {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\r\\n}\"\r\n    },\r\n    \"src/unshETHZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"communal/ReentrancyGuard.sol\\\";\\r\\nimport \\\"communal/SafeERC20.sol\\\";\\r\\nimport \\\"local/interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"communal/TransferHelper.sol\\\";\\r\\n//import \\\"forge-std/console.sol\\\";\\r\\n\\r\\n\\r\\ninterface ILSDVaultV2 {\\r\\n    function deposit(address lsd, uint256 amount) external;\\r\\n    function swapperAddress() external returns(address);\\r\\n    function darknetAddress() external returns(address);\\r\\n    function balanceInUnderlying() external view returns(uint256);\\r\\n    function lsdConfigs(address lsd) external view returns(uint256 targetWeightBps, uint256 weightCapBps, uint256 absoluteCapEth);\\r\\n}\\r\\n\\r\\ninterface IDarknet {\\r\\n    function checkPrice(address lsd) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IunshETH {\\r\\n    function timelock_address() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IVdAmm {\\r\\n    function getDepositFee(uint256 lsdAmountIn, address lsd) external returns(uint256, uint256);\\r\\n}\\r\\n\\r\\ninterface FRXETH {\\r\\n    function submitAndDeposit(address recipient) payable external;\\r\\n}\\r\\n\\r\\ninterface SFRXETH {\\r\\n    function deposit(uint256 assets, address receiver) external;\\r\\n}\\r\\n\\r\\ninterface RETH {\\r\\n    function swapTo(uint256 _uniswapPortion, uint256 _balancerPortion, uint256 _minTokensOut, uint256 _idealTokensOut) payable external;\\r\\n}\\r\\n\\r\\ninterface IANKRDeposits {\\r\\n    function stakeAndClaimAethC() payable external;\\r\\n}\\r\\n\\r\\ninterface ISWETH {\\r\\n    function deposit() payable external;\\r\\n}\\r\\n\\r\\ninterface IRocketDepositPool {\\r\\n    function deposit() external payable;\\r\\n    function getMaximumDepositAmount() external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IRocketSettings {\\r\\n    function getDepositEnabled() external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IWETH is IERC20{\\r\\n    function deposit() payable external;\\r\\n    function withdraw(uint wad) external;\\r\\n}\\r\\n\\r\\ninterface IWStETH is IERC20{\\r\\n    function wrap(uint256 _stETHAmount) external;\\r\\n}\\r\\n\\r\\ninterface IStaderDeposit { \\r\\n    function deposit(address receiver) external payable; \\r\\n}\\r\\n\\r\\ncontract unshETHZapv2 is ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n    uint256 public constant MAX_PATH_ID = 11;\\r\\n\\r\\n    address public constant wstETHAddress = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\r\\n    address public constant frxETHMinterAddress = 0xbAFA44EFE7901E04E39Dad13167D089C559c1138;\\r\\n    address public constant frxETHAddress = 0x5E8422345238F34275888049021821E8E08CAa1f;\\r\\n    address public constant sfrxETHAddress = 0xac3E018457B222d93114458476f3E3416Abbe38F;\\r\\n    address public constant rETHAddress = 0xae78736Cd615f374D3085123A210448E74Fc6393;\\r\\n    address public constant cbETHAddress = 0xBe9895146f7AF43049ca1c1AE358B0541Ea49704;\\r\\n    address public constant usdtAddress = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\r\\n    address public constant wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n    address public constant stEthAddress = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\r\\n\\r\\n    address public constant ankrETHAddress = 0xE95A203B1a91a908F9B9CE46459d101078c2c3cb;\\r\\n    address public constant ankrDepositsAddress = 0x84db6eE82b7Cf3b47E8F19270abdE5718B936670;\\r\\n    address public constant swETHAddress = 0xf951E335afb289353dc249e82926178EaC7DEd78;\\r\\n\\r\\n    address public constant rocketDepositPoolAddress = 0xDD3f50F8A6CafbE9b31a427582963f465E745AF8;\\r\\n\\r\\n    address public constant staderDepositAddress = 0xcf5EA1b38380f6aF39068375516Daf40Ed70D299;\\r\\n    address public constant ethxAddress = 0xA35b1B31Ce002FBF2058D22F30f95D405200A15b;\\r\\n    address public immutable lsdVaultAddressV2; // 0x00..;\\r\\n    address public immutable unshETHAddressV2; //0x00...;\\r\\n\\r\\n    ISwapRouter public uniswapRouterV3 = ISwapRouter(address(0xE592427A0AEce92De3Edee1F18E0157C05861564));\\r\\n    uint24 public constant POOLFEE = 500; // pool fee to use uniswapv3. for now its set to 0.05% as default\\r\\n\\r\\n    address public vdAmmAddress;\\r\\n    address public darknetAddress;\\r\\n\\r\\n    mapping (uint256 => address) public swapPathIdToAddress;\\r\\n    mapping (uint256 => address) public mintPathIdToAddress;\\r\\n    mapping (address => uint256) public lsdToMintPathId;\\r\\n\\r\\n    event DepositLsd(address indexed sender, address lsdAddress, uint256 depositAmount, uint256 depositFee, uint256 protocolFee, uint256 unshETHMinted);\\r\\n    event DepositEth(address indexed sender, uint256 ethAmount, uint256 pathId);\\r\\n\\r\\n    /*\\r\\n    ============================================================================\\r\\n    Constructor\\r\\n    ============================================================================\\r\\n    */\\r\\n    constructor(address _unshETHAddressV2) {\\r\\n\\r\\n        unshETHAddressV2 = _unshETHAddressV2;\\r\\n\\r\\n        lsdVaultAddressV2 = IunshETH(unshETHAddressV2).timelock_address();\\r\\n        vdAmmAddress = ILSDVaultV2(lsdVaultAddressV2).swapperAddress();\\r\\n        darknetAddress = ILSDVaultV2(lsdVaultAddressV2).darknetAddress();\\r\\n\\r\\n        //give infinite approval for the lsd vault to spend the wstETH, sfrxETH, rETH, and cbETH\\r\\n        TransferHelper.safeApprove(wstETHAddress, lsdVaultAddressV2, type(uint256).max);\\r\\n        TransferHelper.safeApprove(sfrxETHAddress, lsdVaultAddressV2, type(uint256).max);\\r\\n        TransferHelper.safeApprove(rETHAddress, lsdVaultAddressV2, type(uint256).max);\\r\\n        TransferHelper.safeApprove(cbETHAddress, lsdVaultAddressV2, type(uint256).max);\\r\\n        TransferHelper.safeApprove(wethAddress, lsdVaultAddressV2, type(uint256).max);\\r\\n\\r\\n        //give infinite approval for the lsd vault to spend the ankrETH and swETH\\r\\n        TransferHelper.safeApprove(ankrETHAddress, lsdVaultAddressV2, type(uint256).max);\\r\\n        TransferHelper.safeApprove(swETHAddress, lsdVaultAddressV2, type(uint256).max);\\r\\n        TransferHelper.safeApprove(ethxAddress, lsdVaultAddressV2, type(uint256).max);\\r\\n\\r\\n        //approve weth and uniswap to facilitate swapping into lsds\\r\\n        TransferHelper.safeApprove(wethAddress, address(uniswapRouterV3), type(uint256).max);\\r\\n\\r\\n        //approvals to facilitate wrapping of frxETH and stETH\\r\\n        TransferHelper.safeApprove(frxETHAddress, sfrxETHAddress, type(uint256).max);\\r\\n        TransferHelper.safeApprove(wstETHAddress, stEthAddress, type(uint256).max);\\r\\n\\r\\n        //set up swap path ids\\r\\n\\r\\n        lsdToMintPathId[wstETHAddress] = 0; // mint wstETH\\r\\n        lsdToMintPathId[sfrxETHAddress] = 1; // mint sfrxETH\\r\\n        swapPathIdToAddress[2] = cbETHAddress; // 2 -> swap for cbETH\\r\\n        swapPathIdToAddress[3] = rETHAddress; // 3 -> swap for rETH\\r\\n        swapPathIdToAddress[4] = wstETHAddress;  // 4 -> swap for wstETH\\r\\n        swapPathIdToAddress[5] = frxETHAddress; // 5 -> swap for frxETH (sfrxETH not liquid)\\r\\n        lsdToMintPathId[rETHAddress] = 6; // swap for cbETH\\r\\n        lsdToMintPathId[wethAddress] = 7; // swap for rETH\\r\\n        lsdToMintPathId[ankrETHAddress] = 8; // swap for rETH\\r\\n        lsdToMintPathId[swETHAddress] = 9; // swap for swETH\\r\\n        swapPathIdToAddress[10] = swETHAddress; // 10 -> swap for swETH.. //no swap path for ankrETH as limited liquidity on uniswap\\r\\n        lsdToMintPathId[ethxAddress] = 11; // swap for ETHx\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ============================================================================\\r\\n    ETH -> LSD deposit functions\\r\\n    ============================================================================\\r\\n    */\\r\\n\\r\\n    function _mint_sfrxETH(uint256 ethAmount) internal {\\r\\n        // Mint sfrxETH\\r\\n        FRXETH(frxETHMinterAddress).submitAndDeposit{value:ethAmount}(address(this));\\r\\n        // Get balance of sfrxETH minted\\r\\n        uint256 sfrxETHBalance = IERC20(sfrxETHAddress).balanceOf(address(this));\\r\\n        // Check to see that the balance minted is greater than 0\\r\\n        require(sfrxETHBalance > 0, 'sfrxETH minting failed');\\r\\n        // Call LSDVault to mint unshETH\\r\\n        _deposit_lsd(sfrxETHAddress, sfrxETHBalance);\\r\\n    }\\r\\n\\r\\n    function _mint_wstETH(uint256 ethAmount) internal {\\r\\n        // Mint wstETH\\r\\n        (bool success, )= address(wstETHAddress).call{value:ethAmount}(\\\"\\\");\\r\\n        // Check the success of the wstETH mint\\r\\n        require(success, \\\"wstETH minting failed\\\");\\r\\n        // Get balance of wstETH minted\\r\\n        uint256 wstETHBalance = IERC20(wstETHAddress).balanceOf(address(this));\\r\\n        // Call LSDVault to mint unshETH\\r\\n        _deposit_lsd(wstETHAddress, wstETHBalance);\\r\\n    }\\r\\n\\r\\n    function _mint_rETH(uint256 ethAmount) internal {\\r\\n        //Check if deposits are open, then if yes (and under weight cap)  mint\\r\\n        require(rocketPoolDepositEnabled(ethAmount), \\\"rETH deposits are disabled\\\");\\r\\n        IRocketDepositPool(rocketDepositPoolAddress).deposit{value: ethAmount}();\\r\\n        // Get the balance of rETH minted\\r\\n        uint256 rETHBalance = IERC20(rETHAddress).balanceOf(address(this));\\r\\n        // Call LSDVault to mint unshETH\\r\\n        _deposit_lsd(rETHAddress, rETHBalance);\\r\\n    }\\r\\n\\r\\n    function rocketPoolDepositEnabled(uint256 ethAmount) public view returns (bool) {\\r\\n        return IRocketDepositPool(rocketDepositPoolAddress).getMaximumDepositAmount() > ethAmount;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _mint_wETH(uint256 ethAmount) internal {\\r\\n        IWETH(wethAddress).deposit{value: ethAmount}();\\r\\n        _deposit_lsd(wethAddress, ethAmount);\\r\\n    }\\r\\n\\r\\n    function _mint_ankrETH(uint256 ethAmount) internal {\\r\\n        // Mint ankrETH\\r\\n        IANKRDeposits(ankrDepositsAddress).stakeAndClaimAethC{value:ethAmount}();\\r\\n        // Get balance of ankrETH minted\\r\\n        uint256 ankrETHBalance = IERC20(ankrETHAddress).balanceOf(address(this));\\r\\n        // Call LSDVault to mint unshETH\\r\\n        _deposit_lsd(ankrETHAddress, ankrETHBalance);\\r\\n    }\\r\\n\\r\\n    function _mint_swETH(uint256 ethAmount) internal {\\r\\n        // Mint swETH\\r\\n        ISWETH(swETHAddress).deposit{value:ethAmount}();\\r\\n        // Get balance of swETH minted\\r\\n        uint256 swETHBalance = IERC20(swETHAddress).balanceOf(address(this));\\r\\n        // Call LSDVault to mint unshETH\\r\\n        _deposit_lsd(swETHAddress, swETHBalance);\\r\\n    }\\r\\n  \\r\\n    function _mint_ETHx(uint256 ethAmount) internal { \\r\\n        // mint ETHx \\r\\n        IStaderDeposit(staderDepositAddress).deposit{value:ethAmount}(address(this));\\r\\n        // get the balance of ETHx \\r\\n        uint256 ethxBalance = IERC20(ethxAddress).balanceOf(address(this));\\r\\n        // call LSDVault to mint unshETH \\r\\n        _deposit_lsd(ethxAddress, ethxBalance); \\r\\n    }\\r\\n \\r\\n    function deposit_stEth(uint256 stETHAmount) external nonReentrant {\\r\\n        // Deposit stETH into wstETH\\r\\n        IWStETH(wstETHAddress).wrap(stETHAmount);\\r\\n        // Get the wrapped balance\\r\\n        uint256 wstETHAmount = IERC20(wstETHAddress).balanceOf(address(this));\\r\\n        // Deposit into lsd vault\\r\\n        _deposit_lsd(wstETHAddress, wstETHAmount);\\r\\n    }\\r\\n\\r\\n    function _deposit_frxEth(uint256 frxETHAmount) internal {\\r\\n        // Deposit frxETH into sfrxETH\\r\\n        SFRXETH(sfrxETHAddress).deposit(frxETHAmount, address(this));\\r\\n        // Get the wrapped balance\\r\\n        uint256 sfrxETHAmount = IERC20(sfrxETHAddress).balanceOf(address(this));\\r\\n        // Deposit into lsd vault\\r\\n        _deposit_lsd(sfrxETHAddress, sfrxETHAmount);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ============================================================================\\r\\n    Direct LSD deposit functions\\r\\n    ============================================================================\\r\\n    */\\r\\n\\r\\n    function deposit_lsd(address lsdAddress, uint256 amount) external  {\\r\\n        // Assume user has approved token\\r\\n        TransferHelper.safeTransferFrom(lsdAddress, msg.sender, address(this), amount);\\r\\n        _deposit_lsd(lsdAddress, amount);\\r\\n    }\\r\\n\\r\\n    function _deposit_lsd(address lsdAddress, uint256 amount) internal {\\r\\n\\r\\n        uint256 depositFee;\\r\\n        uint256 protocolFee;\\r\\n        if(vdAmmAddress != address(0)) {\\r\\n            (depositFee, protocolFee) = IVdAmm(vdAmmAddress).getDepositFee(amount, lsdAddress);\\r\\n        }\\r\\n\\r\\n        uint256 amountToMint = amount - depositFee;\\r\\n        uint256 unshETHFee = depositFee - protocolFee;\\r\\n\\r\\n        if(protocolFee > 0) {\\r\\n            // Transfer protocol fee to vdAmmAddress\\r\\n            TransferHelper.safeTransfer(lsdAddress, vdAmmAddress, protocolFee);\\r\\n        }\\r\\n\\r\\n        if(depositFee > 0) {\\r\\n            // Transfer unshETH fee to lsdVault\\r\\n            TransferHelper.safeTransfer(lsdAddress, lsdVaultAddressV2, unshETHFee);\\r\\n        }\\r\\n\\r\\n        // Call LSDVault to mint unshETH\\r\\n        ILSDVaultV2(lsdVaultAddressV2).deposit(lsdAddress, amountToMint);\\r\\n        // Send unshETH to the msg.sender\\r\\n        uint256 unshETHMinted = IERC20(unshETHAddressV2).balanceOf(address(this));\\r\\n        TransferHelper.safeTransfer(unshETHAddressV2, msg.sender, unshETHMinted);\\r\\n\\r\\n        emit DepositLsd(msg.sender, lsdAddress, amountToMint, depositFee, protocolFee, unshETHMinted);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ============================================================================\\r\\n    Mint with ETH - primary zap function\\r\\n    ============================================================================\\r\\n    */\\r\\n\\r\\n    function optimal_mint_pathId(uint256 ethAmountIn) public view returns(uint256 pathId) {\\r\\n\\r\\n        //Hardcoded list to make things simple, excludes cbETH\\r\\n        uint lsdsLength;\\r\\n\\r\\n        address[7] memory lsds = [sfrxETHAddress, rETHAddress, wstETHAddress, wethAddress, ankrETHAddress, swETHAddress, ethxAddress];\\r\\n\\r\\n        address lsdToMint; // default condition\\r\\n        uint256 pctDistance = 0;\\r\\n        uint256 ethBalanceInLsdVault = ILSDVaultV2(lsdVaultAddressV2).balanceInUnderlying();\\r\\n\\r\\n        for(uint256 i=0; i<lsds.length; i++) {\\r\\n            address lsd = lsds[i];\\r\\n\\r\\n            if(lsd == rETHAddress && !rocketPoolDepositEnabled(ethAmountIn)) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 darknetRate = IDarknet(darknetAddress).checkPrice(lsd);\\r\\n\\r\\n            (uint256 targetWeightBps, uint256 weightCapBps, ) = ILSDVaultV2(lsdVaultAddressV2).lsdConfigs(lsd);\\r\\n            uint256 targetAmountEth = ethBalanceInLsdVault * targetWeightBps / 10000;\\r\\n            uint256 weightCapEth = ethBalanceInLsdVault * weightCapBps / 10000;\\r\\n\\r\\n            uint256 lsdBalanceInEthTerms = IERC20(lsd).balanceOf(lsdVaultAddressV2) * darknetRate / 1e18;\\r\\n\\r\\n            //If deposit would cause exceeding the cap, skip\\r\\n            if(lsdBalanceInEthTerms + ethAmountIn > weightCapEth) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            //If balance is above the target already, skip\\r\\n            if(lsdBalanceInEthTerms > targetAmountEth) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 distanceToTarget = targetAmountEth - lsdBalanceInEthTerms;\\r\\n            uint256 newPctDistance = distanceToTarget * 1e18 / targetAmountEth;\\r\\n\\r\\n            //Evaluate the optimal mint lsd based on the greatest pct diff to target\\r\\n            //Not fully correct as it will fail on large deposits in small lsds, but close enough\\r\\n            if(newPctDistance > pctDistance) {\\r\\n                pctDistance = newPctDistance;\\r\\n                lsdToMint = lsd;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(lsdToMint != address(0), \\\"No LSD to mint\\\");\\r\\n        return lsdToMintPathId[lsdToMint];\\r\\n    }\\r\\n\\r\\n    function mint_unsheth_with_eth_optimalmint() external payable nonReentrant returns(uint256){\\r\\n        uint256 pathId = optimal_mint_pathId(msg.value);\\r\\n        _ETH_to_unsheth_mintPaths(msg.value, pathId);\\r\\n        return pathId;\\r\\n    }\\r\\n\\r\\n    function mint_unsheth_with_eth(uint256 amountOutMin, uint256 pathId) external payable nonReentrant {\\r\\n        // Validate the path\\r\\n        require(pathId <= MAX_PATH_ID, \\\"Invalid path\\\");\\r\\n\\r\\n        if(mintPathIdToAddress[pathId] != address(0)) {\\r\\n            _ETH_to_unsheth_mintPaths(msg.value, pathId);\\r\\n        } else {\\r\\n            IWETH(wethAddress).deposit{value: msg.value}();\\r\\n            uint256 wethAmount = IERC20(wethAddress).balanceOf(address(this));\\r\\n            _weth_to_unsheth_swapPaths(wethAmount, amountOutMin, pathId);\\r\\n        }\\r\\n        emit DepositEth(msg.sender, msg.value, pathId);\\r\\n    }\\r\\n\\r\\n    function _ETH_to_unsheth_mintPaths(uint256 ethAmount, uint256 pathId) internal {\\r\\n        if(pathId == 0) {\\r\\n            _mint_wstETH(ethAmount);\\r\\n        } else if(pathId == 1) {\\r\\n            _mint_sfrxETH(ethAmount);\\r\\n        } else if(pathId == 6) {\\r\\n            _mint_rETH(ethAmount);\\r\\n        } else if(pathId == 7) {\\r\\n            _mint_wETH(ethAmount);\\r\\n        } else if (pathId == 8) {\\r\\n            _mint_ankrETH(ethAmount);\\r\\n        } else if (pathId == 9) {\\r\\n            _mint_swETH(ethAmount);\\r\\n        } else if (pathId == 11) { \\r\\n            _mint_ETHx(ethAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _weth_to_unsheth_swapPaths(uint256 wethAmount, uint256 amountOutMin, uint256 pathId) internal {\\r\\n        require(swapPathIdToAddress[pathId] != address(0), \\\"swap path not supported\\\");\\r\\n        require(amountOutMin > 0, \\\"amountOutMin must be greater than 0\\\");\\r\\n        if (pathId == 5) {\\r\\n            //swap weth to frxETH (sfrxETH not liquid)\\r\\n            uint256 frxEthAmountOut = _swap_weth_lsd(wethAmount, amountOutMin, frxETHAddress);\\r\\n            //mint unshETH with frxETH->sfrxETH\\r\\n            _deposit_frxEth(frxEthAmountOut);\\r\\n        } else {\\r\\n            address lsdAddress = swapPathIdToAddress[pathId];\\r\\n            //swap weth to lsd\\r\\n            uint256 lsdAmountOut = _swap_weth_lsd(wethAmount, amountOutMin, lsdAddress);\\r\\n            //mint unshETH with lsd\\r\\n            _deposit_lsd(lsdAddress, lsdAmountOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _swap_weth_lsd(uint256 _wethAmount, uint256 _amountOutMin, address _lsdAddress) internal returns(uint256) {\\r\\n\\r\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\r\\n        tokenIn: wethAddress,\\r\\n        tokenOut: _lsdAddress,\\r\\n        fee: POOLFEE,\\r\\n        recipient: address(this),\\r\\n        deadline: block.timestamp + 3600,\\r\\n        amountIn: _wethAmount,\\r\\n        amountOutMinimum: _amountOutMin,\\r\\n        sqrtPriceLimitX96: 0\\r\\n        });\\r\\n\\r\\n        uint256 lsdAmountOut = uniswapRouterV3.exactInputSingle(params);\\r\\n        return(lsdAmountOut);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ============================================================================\\r\\n    Other functions\\r\\n    ============================================================================\\r\\n    */\\r\\n    function updateVdAmmAddress() external {\\r\\n        vdAmmAddress = ILSDVaultV2(lsdVaultAddressV2).swapperAddress();\\r\\n    }\\r\\n\\r\\n    function updateDarknetAddress() external {\\r\\n        darknetAddress = ILSDVaultV2(lsdVaultAddressV2).darknetAddress();\\r\\n    }\\r\\n\\r\\n    function _min(uint256 _a, uint256 _b) private pure returns (uint256) {\\r\\n        if (_a < _b) {\\r\\n            return _a;\\r\\n        } else {\\r\\n            return _b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //Allow receiving eth to the contract\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@ethereum-waffle/=node_modules/@ethereum-waffle/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@pancakeswap/=node_modules/@pancakeswap/\",\r\n      \"@prb/math/=lib/prb-math/src/\",\r\n      \"@prb/test/=lib/prb-test/src/\",\r\n      \"@uniswap/=node_modules/@uniswap/\",\r\n      \"Common/=lib/Common/\",\r\n      \"ERC20/=lib/ERC20/\",\r\n      \"Governance/=lib/Governance/\",\r\n      \"Math/=lib/Math/\",\r\n      \"Staking/=lib/Staking/\",\r\n      \"Utils/=lib/Utils/\",\r\n      \"base64-sol/=node_modules/base64-sol/\",\r\n      \"communal/=lib/communal/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"layerzerolabs/=lib/solidity-examples/\",\r\n      \"local/=src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin/\",\r\n      \"prb-math/=lib/prb-math/src/\",\r\n      \"prb-test/=lib/prb-math/lib/prb-test/src/\",\r\n      \"solidity-examples/=lib/solidity-examples/contracts/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"src/=lib/prb-math/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unshETHAddressV2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pathId\",\"type\":\"uint256\"}],\"name\":\"DepositEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lsdAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unshETHMinted\",\"type\":\"uint256\"}],\"name\":\"DepositLsd\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PATH_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOLFEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ankrDepositsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ankrETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cbETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"darknetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lsdAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit_lsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stETHAmount\",\"type\":\"uint256\"}],\"name\":\"deposit_stEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frxETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frxETHMinterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lsdToMintPathId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lsdVaultAddressV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintPathIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pathId\",\"type\":\"uint256\"}],\"name\":\"mint_unsheth_with_eth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint_unsheth_with_eth_optimalmint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmountIn\",\"type\":\"uint256\"}],\"name\":\"optimal_mint_pathId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pathId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rocketDepositPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"rocketPoolDepositEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sfrxETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stEthAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staderDepositAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapPathIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV3\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unshETHAddressV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDarknetAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateVdAmmAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vdAmmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wstETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "unshETHZapv2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "0000000000000000000000000ae38f7e10a43b5b2fb064b42a2f4514cba909ef", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}