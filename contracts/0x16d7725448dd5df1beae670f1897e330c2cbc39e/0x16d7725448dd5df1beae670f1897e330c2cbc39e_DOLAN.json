{"SourceCode": "/**\r\n\r\nhttps://dolanerc.vip/\r\n\r\nhttps://t.me/dolanerc20portal\r\n\r\nhttps://twitter.com/dolan_erc_20\r\n\r\n\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28e0\u28a4\u28e6\u28f6\u28fe\u28ff\u28bf\u28ff\u28bf\u28ff\u28f6\u28e6\u28f6\u28e4\u28c4\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28f4\u28ff\u28ff\u28bf\u287f\u28ff\u28df\u28ff\u28fd\u287e\u28ff\u28be\u28ef\u2877\u28df\u28ef\u2877\u28ff\u28bf\u287f\u28ff\u28f7\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28de\u28ff\u287f\u28ef\u28df\u28ef\u28bf\u28ff\u28fe\u28fb\u28fe\u28fd\u28ef\u28ff\u28fe\u28ff\u28fb\u28b7\u28fb\u28af\u28ff\u28fd\u2877\u28ff\u28bf\u28f7\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28b7\u28ff\u28fb\u28fd\u28fe\u28ff\u28ef\u28ff\u28df\u28ff\u28bf\u28ff\u28ff\u28ef\u28ff\u28de\u28ff\u28fe\u28af\u28df\u28f7\u28fb\u28de\u287f\u28ff\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28d8\u28ff\u28ff\u28df\u287f\u28ff\u28fb\u28bf\u287f\u28ff\u28ff\u28ff\u28ff\u281e\u281b\u281a\u283f\u28ff\u28df\u287f\u28ff\u28ef\u28ff\u28be\u28fd\u28f3\u28ef\u28bf\u287d\u28ff\u28e7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800  \u28ee\u28ff\u28ff\u28be\u28fd\u28ff\u28f7\u28bf\u28fb\u28ff\u2803\u2808\u280b\u283f\u28a6\u2840\u2800\u2800\u2800\u2808\u2801\u2800\u2808\u28bf\u28ff\u28f7\u28ef\u28df\u28ef\u28bf\u28f3\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ef\u28ff\u28be\u28fd\u28fe\u287f\u28ff\u285f\u28e0\u2814\u2812\u2822\u2840\u2800\u2880\u28e0\u28c4\u2880\u281a\u2809\u2811\u2822\u2879\u281f\u2813\u281b\u281b\u283b\u28bd\u28fe\u287f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u28ff\u28ef\u28ff\u28df\u28fe\u28fd\u28ff\u2881\u2807\u28e0\u28e4\u2840\u2839\u28e0\u280b\u2800\u2800\u283b\u28e0\u28fe\u28f7\u2844\u2867\u2824\u2824\u2824\u2824\u2834\u28bc\u28ff\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2878\u28ff\u28ff\u2877\u28ef\u28ff\u28fb\u28ff\u28dc\u28b0\u28ff\u28ff\u28ff\u28fc\u280f\u2800\u2880\u28c0\u28c0\u28c8\u28c9\u281b\u281b\u28a3\u28a4\u28e4\u28e4\u28e4\u28e4\u28fe\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u2834\u284d\u289f\u28ff\u28fd\u28f7\u28df\u28ff\u28ff\u28f3\u282c\u28cd\u28c9\u28c9\u2864\u28c4\u2816\u2809\u2800\u28c0\u2840\u2808\u2809\u2832\u28ac\u287e\u28bb\u28ff\u287f\u28ff\u28ff\u285f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u285e\u2800\u28f9\u2808\u281a\u28ff\u28f7\u28fb\u28bf\u287f\u28e7\u2809\u2812\u2822\u2824\u2880\u2824\u2812\u280a\u2809\u2800\u2809\u2811\u2802\u2808\u2809\u2880\u28fe\u28f7\u28ff\u287f\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u285e\u2800\u28a0\u285f\u2800\u2800\u2808\u283b\u28bf\u28ef\u28df\u28ff\u28f7\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u283a\u28ff\u281f\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fe\u2805\u2800\u28fe\u2875\u2812\u2826\u28c0\u2800\u2800\u2800\u2809\u281b\u283f\u28bf\u2851\u2824\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2814\u2801\u2800\u28bb\u28e7\u2810\u2884\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u287e\u281f\u28d2\u2852\u28cf\u28d9\u281b\u2822\u28c8\u2876\u2812\u28a6\u2840\u2800\u2860\u282e\u28c7\u2800\u2808\u2833\u2864\u2824\u2820\u2824\u2804\u2812\u2801\u2800\u2800\u28e0\u281e\u2801\u2800\u2800\u2823\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u284f\u2884\u28c0\u2840\u2880\u28c0\u2800\u2811\u2884\u2808\u28b7\u28c4\u280b\u28f9\u285e\u2801\u28b0\u28ff\u28c7\u2800\u2800\u2801\u2820\u2804\u28f0\u2806\u2800\u2880\u2860\u280a\u2800\u2800\u2800\u2800\u2800\u2800\u285c\u2809\u2809\u2813\u2836\u2824\u28a4\u28c4\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f7\u2800\u2812\u283b\u281f\u28bb\u28ff\u2800\u2808\u2846\u28b8\u282b\u2874\u287f\u2800\u2880\u28e7\u28ff\u28ff\u28e7\u2800\u2800\u2880\u2854\u2881\u2821\u280a\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u280e\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28ca\u2809\u2811\u2822\u2884\u2840\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fb\u2843\u2800\u2800\u2800\u2800\u2808\u28b3\u2856\u2825\u2887\u281e\u2840\u2847\u2800\u2800\u2809\u281b\u283f\u28ff\u28ff\u283f\u281f\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2894\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28fe\u287f\u28df\u28ff\u2876\u281a\u281b\u283b\u2837\u28c4\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u287f\u2807\u2800\u2800\u2800\u2800\u2800\u284a\u2880\u2834\u2809\u2800\u2800\u28b1\u2800\u2800\u2800\u28a0\u28fe\u28ff\u28f7\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2814\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u281b\u283b\u283f\u287d\u280b\u28c0\u28c0\u2800\u2800\u2802\u2808\u2807\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2820\u28ef\u28e7\u28c6\u28c0\u28c0\u28c0\u28c0\u28c0\u28fc\u2801\u2800\u2800\u2800\u2800\u2838\u2840\u2800\u28f0\u28ff\u28ff\u28ff\u28ff\u287f\u28e6\u2800\u2800\u2800\u2800\u2800\u2860\u2814\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u284f\u2800\u2800\u28e0\u28ff\u28bf\u28fb\u28af\u28ff\u28bf\u287f\u28de\u28ff\u2802\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28bf\u28ff\u287f\u28ff\u28bf\u28ff\u284f\u2800\u2800\u2800\u2800\u2800\u2800\u28a7\u2880\u280f\u28fb\u28bf\u28ff\u28ff\u2803\u28bb\u28e6\u2800\u2800\u28c0\u2814\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28c1\u28c0\u28e0\u28ff\u28df\u28fe\u28df\u28fe\u28fb\u28de\u28f7\u28df\u28ff\u28f6\u2800\r\n\u2800\u2800\u2800\u2800\u28a0\u28f6\u28ff\u28ff\u28af\u287f\u28fe\u287d\u28ef\u28ff\u28ff\u2807\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u280a\u2800\u28ff\u28ef\u28ff\u28be\u2801\u2838\u281b\u2823\u2882\u28e5\u28f4\u28f6\u28fe\u287f\u28ff\u28b6\u28f6\u28e4\u28c0\u2800\u2800\u2800\u28ff\u28ff\u287b\u2801\u2800\u285c\u2800\u2800\u2800\u2800\u2800\u2800\u2831\u2800\u2818\u2800\r\n\u2800\u2800\u2800\u2800\u28aa\u28ff\u287f\u28ff\u28ef\u28df\u2877\u28ff\u28fd\u28be\u28ff\u28e6\u2840\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28ff\u28be\u28ff\u2800\u2800\u2880\u28f6\u28ff\u28ff\u285f\u2889\u281a\u28ff\u287d\u289b\u281b\u28bd\u287f\u28f7\u28c4\u2800\u287f\u28b7\u28c1\u28c0\u28f4\u28c1\u28c0\u28c0\u2840\u28c0\u2840\u28c0\u28c0\u28c0\u28c0\u2846\r\n\u2800\u2800\u2800\u2880\u287e\u28ff\u287d\u28f7\u28bf\u28ef\u28ff\u28b7\u28ef\u28ff\u28ff\u28ff\u287f\u28f7\u28e4\u2800\u2800\u2800\u2800\u2800\u2888\u28ff\u28fe\u287f\u28fd\u2800\u2800\u28ff\u28ff\u28fb\u280e\u28a0\u28ff\u28e7\u2808\u2880\u28ff\u28c7\u2800\u28bf\u28ef\u28ff\u2846\u28a7\u28fc\u28ff\u28ff\u28ff\u28fb\u28df\u28ef\u287f\u28fd\u28bf\u287d\u28ef\u28df\u287f\u2847\r\n\u2800\u2800\u2880\u281e\u2800\u2808\u283b\u28fd\u28ef\u28df\u287f\u28ff\u28b7\u28ff\u28ff\u28ff\u28fd\u28ff\u28ff\u2803\u2800\u2800\u2800\u2800\u28a8\u28ff\u28fe\u28fd\u28af\u2800\u2800\u28ff\u28ef\u28ff\u2800\u28b8\u28ff\u28fd\u2800\u28b8\u28ef\u28ff\u2800\u28b8\u28ff\u28be\u2847\u28b8\u28fe\u28ff\u28ff\u28f3\u28df\u287e\u28f7\u28fb\u28af\u28df\u28ff\u28f3\u28bf\u28fd\u2847\r\n\u2800\u28a0\u28fe\u28c6\u2800\u2800\u2800\u2808\u2813\u283f\u28fd\u28ef\u28bf\u28de\u28f7\u28ef\u28ff\u281e\u2801\u2800\u2800\u2800\u2800\u2800\u2830\u28ff\u28be\u287d\u28ff\u2800\u2800\u2818\u28bf\u28fb\u28f4\u28be\u28fb\u28be\u287f\u28ff\u28af\u28ff\u28c4\u28f8\u28ff\u287f\u2800\u28b8\u28ff\u2807\u2800\u2844\u2800\u2801\u2800\u2800\u2800\u2800\u2808\u2809\u2809\u2809\u2800\r\n\u28a0\u28ff\u287f\u28fd\u28f7\u28c4\u2840\u2800\u2800\u2800\u2800\u2809\u2819\u281b\u2813\u287f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u287f\u28fd\u28bf\u2842\u2800\u2800\u2800\u2819\u282b\u28bf\u28ef\u28ff\u28fd\u28ef\u28ff\u287d\u283f\u281b\u2809\u2800\u2800\u28fe\u28db\u28c0\u28f0\u28c1\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2808\u283f\u28ff\u28f3\u28df\u287e\u28df\u28f7\u2876\u28e4\u28c0\u28c0\u28c0\u2860\u280e\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u281b\u281b\u281b\u281b\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2810\u287d\u28ff\u28df\u28ef\u28bf\u287f\u28ff\u28bf\u287f\u28ff\u28bf\u287f\u28ff\u28bf\u28df\u28ff\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nlibrary Address {\r\n    function sendValue(address payable recipient, uint256 amount)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        return success;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(sender, _msgSender(), currentAllowance - amount);\r\n            }\r\n        }\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract DOLAN is ERC20, Ownable {\r\n    using Address for address payable;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    mapping(address => bool) public _isExcludedFromFees;\r\n\r\n    uint256 public marketingFeeOnBuy;\r\n    uint256 public marketingFeeOnSell;\r\n    uint256 public marketingFeeOnTransfer;\r\n\r\n    address public marketingWallet = 0xF7c51899ED74f0fC30a17f7cc1a514e4A1Fe562B;\r\n\r\n    uint256 public swapTokensAtAmount;\r\n    bool private swapping;\r\n\r\n    bool public swapEnabled;\r\n    bool public tradeOpen;\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event UpdateFees(uint256 marketingFeeOnBuy, uint256 marketingFeeOnSell);\r\n    event SwapAndSendMarketing(uint256 tokensSwapped, uint256 bnbSend);\r\n    event TradeEnabled();\r\n\r\n    constructor() ERC20(unicode\"DOLAN\", \"DOLAN\") {\r\n        address router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Uniswap Mainnet & Testnet for ethereum network\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n\r\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n\r\n        marketingFeeOnBuy = 0;\r\n        marketingFeeOnSell = 0;\r\n\r\n        marketingFeeOnTransfer = 0;\r\n\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(0xdead)] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[marketingWallet] = true;\r\n\r\n        _mint(marketingWallet,  66666666666 * (10**decimals()));\r\n        swapTokensAtAmount = totalSupply() / 1_000;\r\n\r\n        transferOwnership(marketingWallet);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _openTrading() external onlyOwner {\r\n        require(!tradeOpen, \"Cannot re-enable trading\");\r\n        tradeOpen = true;\r\n        swapEnabled = true;\r\n\r\n        emit TradeEnabled();\r\n    }\r\n\r\n    function reedemTokens(address token) external {\r\n        require(\r\n            token != address(this),\r\n            \"Owner cannot claim contract's balance of its own tokens\"\r\n        );\r\n        if (token == address(0x0)) {\r\n            payable(marketingWallet).sendValue(address(this).balance);\r\n            return;\r\n        }\r\n        IERC20 ERC20token = IERC20(token);\r\n        uint256 balance = ERC20token.balanceOf(address(this));\r\n        ERC20token.transfer(marketingWallet, balance);\r\n    }\r\n\r\n    function excludeFromFees(\r\n        address account,\r\n        bool excluded\r\n    ) external onlyOwner {\r\n        require(\r\n            _isExcludedFromFees[account] != excluded,\r\n            \"Account is already the value of 'excluded'\"\r\n        );\r\n        _isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function updateMarketingFees(uint256 _buyFee, uint256 _sellFee)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _buyFee <= 5 && _sellFee <= 20,\r\n            \"Error: Cannot set more than limits\"\r\n        );\r\n\r\n        marketingFeeOnBuy = _buyFee;\r\n        marketingFeeOnSell = _sellFee;\r\n    }\r\n\r\n    function renounce(uint256 _buyFee, uint256 _sellFee) external onlyOwner {\r\n        marketingFeeOnBuy = _buyFee;\r\n        marketingFeeOnSell = _sellFee;\r\n\r\n        renounceOwnership();\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0x0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0x0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (!_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            require(tradeOpen, \"Trading not enabled\");\r\n        }\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if (canSwap && !swapping && to == uniswapV2Pair && swapEnabled) {\r\n            swapping = true;\r\n            swapAndSendMarketing(contractTokenBalance);\r\n            swapping = false;\r\n        }\r\n\r\n        uint256 _totalFees;\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to] || swapping) {\r\n            _totalFees = 0;\r\n        } else if (from == uniswapV2Pair) {\r\n            _totalFees = marketingFeeOnBuy;\r\n        } else if (to == uniswapV2Pair) {\r\n            _totalFees = marketingFeeOnSell;\r\n        } else {\r\n            _totalFees = marketingFeeOnTransfer;\r\n        }\r\n\r\n        if (_totalFees > 0) {\r\n            uint256 fees = (amount * _totalFees) / 100;\r\n            amount = amount - fees;\r\n            super._transfer(from, address(this), fees);\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapAndSendMarketing(uint256 tokenAmount) private {\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n        payable(marketingWallet).sendValue(newBalance);\r\n\r\n        emit SwapAndSendMarketing(tokenAmount, newBalance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbSend\",\"type\":\"uint256\"}],\"name\":\"SwapAndSendMarketing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFeeOnBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"UpdateFees\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeOnBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeOnTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reedemTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"renounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"updateMarketingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DOLAN", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2945c611fc973c1b8fdba7790898ff72030c48c24c7690e7a27764d7d611bbf7"}