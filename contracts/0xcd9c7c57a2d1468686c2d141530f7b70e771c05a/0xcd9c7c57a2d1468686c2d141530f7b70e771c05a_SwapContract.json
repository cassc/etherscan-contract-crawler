{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// 84 71 32 64 84 104 101 71 104 111 115 116 68 101 118 \r\n// ASCII\r\n\r\npragma solidity ^0.8.0;\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract SwapContract is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public tokenOutput;\r\n\r\n    struct TokenInputInfo {\r\n        address addr;\r\n        uint256 rateInput;\r\n        uint256 rateOutput;\r\n    }\r\n    mapping (uint256 => TokenInputInfo) public tokenInput;\r\n\r\n    uint256 SEED_CLIFF = 30 days;\r\n    uint256 SEED_RELEASE_EACH_MONTH = 833; // 8.33%\r\n    struct VipVesting {\r\n        uint256 totalBalance;\r\n        uint256 totalClaimed;\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 claimedCheckPoint;\r\n\r\n        // To calculate Reward\r\n        uint256 rewardTokenDebt;\r\n        uint256 rewardEthDebt;\r\n    }\r\n    mapping (address => VipVesting) public vestingList;\r\n    mapping (address => bool) public isBlacklistWallet;\r\n\r\n    uint256 public totalTokenForSwapping;\r\n    uint256 public totalTokenForSeed;\r\n    uint256 public totalTokenForPublic;\r\n\r\n    uint256 public soldAmountSeed        = 0;\r\n    uint256 public soldAmountPublic      = 0;\r\n    uint256 public soldTotal             = 0;\r\n\r\n    uint256 public TYPE_SEED = 1;\r\n    uint256 public TYPE_PUBLIC = 2;\r\n\r\n    uint256 public MONTH = 30 days;\r\n\r\n    bool public swapEnabled;\r\n\r\n    constructor() {}    \r\n    \r\n    function startSwap(address outputToken) public onlyOwner{\r\n        require(swapEnabled == false, \"Swap already started\");\r\n        tokenOutput = IERC20(outputToken);\r\n        swapEnabled = true;\r\n    }\r\n\r\n    function stopSwap() public onlyOwner {\r\n        swapEnabled = false;\r\n    }\r\n\r\n    function addInputTokenForSwap(uint256 _id, address _inputToken, uint256 _inputRate, uint256 _outputRate)public onlyOwner{\r\n        require(_id < 3);\r\n        tokenInput[_id].addr = _inputToken;\r\n        tokenInput[_id].rateInput = _inputRate;\r\n        tokenInput[_id].rateOutput = _outputRate;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function setBlacklistWallet(address account, bool blacklisted) external onlyOwner {\r\n        isBlacklistWallet[account] = blacklisted;\r\n    }\r\n\r\n    function addOutputTokenForSwap(uint256 amount) public{    \r\n        tokenOutput.transferFrom(msg.sender, address(this), amount);\r\n        totalTokenForSwapping = totalTokenForSwapping.add(amount);\r\n    }\r\n\r\n    function ownerWithdrawToken(address tokenAddress, uint256 amount) public onlyOwner{    \r\n        if(tokenAddress == address(tokenOutput)){\r\n            require(amount < totalTokenForSwapping.sub(soldTotal), \"You're trying withdraw an amount that exceed availabe balance\");\r\n            totalTokenForSwapping = totalTokenForSwapping.sub(amount);\r\n        }\r\n        IERC20(tokenAddress).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function getClaimableInVesting(address account) public view returns (uint256){\r\n        VipVesting memory vestPlan = vestingList[account];\r\n\r\n        //Already withdraw all\r\n        if(vestPlan.totalClaimed >= vestPlan.totalBalance){\r\n            return 0;\r\n        }\r\n\r\n        //No infor\r\n        if(vestPlan.start == 0 || vestPlan.end == 0 || vestPlan.totalBalance == 0){\r\n            return 0;\r\n        }\r\n        \r\n        uint256 currentTime = block.timestamp;\r\n        if(currentTime >= vestPlan.end){\r\n            return vestPlan.totalBalance.sub(vestPlan.totalClaimed);\r\n        }else if(currentTime < vestPlan.start + SEED_CLIFF){\r\n            return 0;\r\n        }else {\r\n            uint256 currentCheckPoint = 1 + (currentTime - vestPlan.start - SEED_CLIFF) / MONTH;\r\n            if(currentCheckPoint > vestPlan.claimedCheckPoint){\r\n                uint256 claimable =  ((currentCheckPoint - vestPlan.claimedCheckPoint) * SEED_RELEASE_EACH_MONTH * vestPlan.totalBalance) / 10000;\r\n                return claimable;\r\n            }else\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    function balanceRemainingInVesting(address account) public view returns(uint256){\r\n        VipVesting memory vestPlan = vestingList[account];\r\n        return vestPlan.totalBalance -  vestPlan.totalClaimed;\r\n    }\r\n\r\n    function withDrawFromVesting() public {\r\n        VipVesting storage vestPlan = vestingList[msg.sender];\r\n\r\n        uint256 claimableAmount = getClaimableInVesting(msg.sender);\r\n        require(claimableAmount > 0, \"There isn't token in vesting that's claimable at the moment\");\r\n\r\n        uint256 currentTime = block.timestamp;\r\n        if(currentTime > vestPlan.end){\r\n            currentTime = vestPlan.end;\r\n        }\r\n        \r\n        vestPlan.claimedCheckPoint = 1 + (currentTime - vestPlan.start - SEED_CLIFF) / MONTH;\r\n        vestPlan.totalClaimed = vestPlan.totalClaimed.add(claimableAmount);\r\n\r\n        tokenOutput.transfer(msg.sender, claimableAmount);\r\n    }\r\n\r\n    function deposite(uint256 inputTokenId, uint256 inputAmount, uint256 buyType) public payable {\r\n        require(inputTokenId < 3, \"Invalid input token ID\");\r\n        require(isBlacklistWallet[msg.sender] == false, \"You're in blacklist\");\r\n        require(swapEnabled, \"Swap is not available\");\r\n\r\n        IERC20 inputToken = IERC20(tokenInput[inputTokenId].addr);\r\n\r\n        uint256 numOutputToken = inputAmount.mul(tokenInput[inputTokenId].rateOutput).mul(10**tokenOutput.decimals()).div(tokenInput[inputTokenId].rateInput);\r\n        if(buyType == TYPE_SEED)\r\n            numOutputToken = numOutputToken.mul(3);\r\n     \r\n        require(numOutputToken < totalTokenForSwapping.sub(soldTotal), \"Exceed avaialble token\");\r\n\r\n        inputToken.transferFrom(msg.sender, address(this), inputAmount.mul(10**inputToken.decimals()));\r\n        soldTotal = soldTotal.add(numOutputToken);\r\n        addingVestToken(msg.sender, numOutputToken, buyType);\r\n    }\r\n\r\n    function addingVestToken(address account, uint256 amount, uint256 vType) private {\r\n        if(vType == TYPE_SEED){\r\n            VipVesting storage vestPlan = vestingList[account];\r\n            soldAmountSeed = soldAmountSeed.add(amount);\r\n            vestPlan.totalBalance = vestPlan.totalBalance.add(amount);\r\n            vestPlan.start = vestPlan.start == 0 ? block.timestamp : vestPlan.start;\r\n            vestPlan.end = vestPlan.end == 0 ? block.timestamp + SEED_CLIFF + (10000 / SEED_RELEASE_EACH_MONTH) * MONTH : vestPlan.end;\r\n        }else{\r\n            soldAmountPublic = soldAmountPublic.add(amount);\r\n            tokenOutput.transfer(account, amount);\r\n            return;\r\n        }\r\n    }\r\n\r\n    /*REWARD FOR VESTING*/\r\n    address public rewardToken;\r\n    uint256 public amountTokenForReward;\r\n    uint256 public amountEthForReward;\r\n\r\n    uint256 public totalRewardEthDistributed;\r\n    uint256 public totalRewardTokenDistributed;\r\n\r\n    uint256 public rewardTokenPerSecond;\r\n    uint256 public rewardEthPerSecond;\r\n\r\n    // Accrued token per share\r\n    uint256 public accTokenPerShare;    \r\n    // Accrued EHT per share\r\n    uint256 public accEthPerShare;\r\n    // The block number of the last pool update\r\n    uint256 public lastRewardTime;\r\n    // The precision factor\r\n    uint256 public PRECISION_FACTOR = 10**12;\r\n\r\n    bool public enableRewardSystem;\r\n\r\n    function startRewardSystem(address _rewardToken) public onlyOwner{\r\n        enableRewardSystem = true;\r\n        rewardToken = _rewardToken;\r\n        rewardTokenPerSecond = 0.05 ether;   // 0.65 token/block\r\n        rewardEthPerSecond = 0.000004 ether; // 10 eth/month\r\n        \r\n        lastRewardTime = block.timestamp;\r\n    }\r\n\r\n    function setNewRewardToken(address _rewardToken)public onlyOwner{\r\n        rewardToken = _rewardToken;\r\n    }\r\n\r\n    function setRewardTokenPerSecond(uint256 _rewardTokenPerSecond) public onlyOwner{\r\n        rewardTokenPerSecond = _rewardTokenPerSecond;\r\n    }\r\n\r\n    function setRewardEthPerSecond(uint256 _rewardEthPerSecond) public onlyOwner{\r\n        rewardEthPerSecond = _rewardEthPerSecond;\r\n    }\r\n\r\n    function addTokenForReward(uint256 amount) public {\r\n        IERC20(rewardToken).transferFrom(msg.sender, address(this), amount);\r\n        amountTokenForReward = amountTokenForReward.add(amount);\r\n    }\r\n\r\n    function addEthForReward() payable public {\r\n        amountEthForReward = amountEthForReward.add(msg.value);\r\n    }\r\n\r\n     \r\n    /*\r\n     * Harvest reward\r\n     */\r\n    function harvest() public {\r\n        _updatePool();\r\n        VipVesting storage user = vestingList[msg.sender];\r\n\r\n        if (user.totalBalance > 0) {\r\n            uint256 pendingToken = user.totalBalance.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardTokenDebt);\r\n            uint256 pendingEth = user.totalBalance.mul(accEthPerShare).div(PRECISION_FACTOR).sub(user.rewardEthDebt);\r\n            if (pendingToken > 0) {\r\n                IERC20(rewardToken).transfer( address(msg.sender), pendingToken);\r\n            }\r\n            if (pendingEth > 0) {\r\n                payable(msg.sender).transfer(pendingEth);\r\n            }\r\n        }\r\n        user.rewardTokenDebt = user.totalBalance.mul(accTokenPerShare).div(PRECISION_FACTOR);\r\n        user.rewardEthDebt = user.totalBalance.mul(accEthPerShare).div(PRECISION_FACTOR);\r\n    }\r\n\r\n    /*\r\n     * @notice View function to see pending reward on frontend.\r\n     * @param _user: user address\r\n     * @return Pending reward for a given user\r\n     */\r\n    function pendingReward(address _user) external view returns (uint256, uint256) {\r\n        VipVesting storage user = vestingList[_user];\r\n        uint256 pendingToken;\r\n        uint256 pendingEth;\r\n        \r\n        if(enableRewardSystem ==  false){\r\n            return (0, 0);\r\n        }\r\n\r\n        if (block.timestamp > lastRewardTime && soldAmountSeed != 0) {\r\n            uint256 multiplier = _getMultiplier(lastRewardTime, block.timestamp);\r\n\r\n            uint256 tokenReward = multiplier.mul(rewardTokenPerSecond);\r\n            if(tokenReward > amountTokenForReward){\r\n                tokenReward = amountTokenForReward;\r\n            }\r\n            uint256 adjustedTokenPerShare = accTokenPerShare.add(tokenReward.mul(PRECISION_FACTOR).div(soldAmountSeed));\r\n\r\n            uint256 ethReward = multiplier.mul(rewardEthPerSecond);\r\n            if(ethReward > amountEthForReward){\r\n                ethReward = amountEthForReward;\r\n            }\r\n            uint256 adjustedEthPerShare = accEthPerShare.add(ethReward.mul(PRECISION_FACTOR).div(soldAmountSeed));\r\n\r\n            pendingToken =  user.totalBalance.mul(adjustedTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardTokenDebt);\r\n            pendingEth =  user.totalBalance.mul(adjustedEthPerShare).div(PRECISION_FACTOR).sub(user.rewardEthDebt);\r\n        } else {\r\n            pendingToken = user.totalBalance.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardTokenDebt);\r\n            pendingEth = user.totalBalance.mul(accEthPerShare).div(PRECISION_FACTOR).sub(user.rewardEthDebt);\r\n        }\r\n\r\n        return (pendingToken, pendingEth);\r\n    }\r\n\r\n\r\n    /*\r\n     * @notice Update reward variables of the given pool to be up-to-date.\r\n     */\r\n    function _updatePool() internal {\r\n        if (block.timestamp <= lastRewardTime) {\r\n            return;\r\n        }\r\n\r\n        if (enableRewardSystem == false || soldAmountSeed == 0) {\r\n            lastRewardTime = block.timestamp;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = _getMultiplier(lastRewardTime, block.timestamp);\r\n\r\n        uint256 tokenReward = multiplier.mul(rewardTokenPerSecond);\r\n        if(tokenReward > amountTokenForReward){\r\n            tokenReward = amountTokenForReward;\r\n        }\r\n        accTokenPerShare = accTokenPerShare.add(tokenReward.mul(PRECISION_FACTOR).div(soldAmountSeed));\r\n        amountTokenForReward = amountTokenForReward.sub(tokenReward);\r\n        totalRewardTokenDistributed = totalRewardTokenDistributed.add(tokenReward);\r\n\r\n\r\n        uint256 ethReward = multiplier.mul(rewardEthPerSecond);\r\n        if(ethReward > amountEthForReward){\r\n            ethReward = amountEthForReward;\r\n        }\r\n        accEthPerShare = accEthPerShare.add(ethReward.mul(PRECISION_FACTOR).div(soldAmountSeed));\r\n        amountEthForReward = amountEthForReward.sub(ethReward);\r\n        totalRewardEthDistributed = totalRewardEthDistributed.add(ethReward);\r\n\r\n        lastRewardTime = block.timestamp;\r\n    }\r\n\r\n    /*\r\n     * @notice Return reward multiplier over the given _from to _to block.\r\n     * @param _from: block to start\r\n     * @param _to: block to finish\r\n     */\r\n    function _getMultiplier(uint256 _from, uint256 _to) internal pure returns (uint256) {\r\n            return _to.sub(_from);\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPE_PUBLIC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TYPE_SEED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accEthPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addEthForReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outputRate\",\"type\":\"uint256\"}],\"name\":\"addInputTokenForSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addOutputTokenForSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addTokenForReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountEthForReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTokenForReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceRemainingInVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyType\",\"type\":\"uint256\"}],\"name\":\"deposite\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRewardSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getClaimableInVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklistWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardEthPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"setBlacklistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setNewRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardEthPerSecond\",\"type\":\"uint256\"}],\"name\":\"setRewardEthPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardTokenPerSecond\",\"type\":\"uint256\"}],\"name\":\"setRewardTokenPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldAmountPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldAmountSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"startRewardSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"}],\"name\":\"startSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInput\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rateInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOutput\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardEthDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardTokenDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenForPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenForSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenForSwapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedCheckPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEthDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawFromVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SwapContract", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b9dd06ec83914d645c45940c7d6bcedb1a0b56f6dc9d5550575820be507577c3"}