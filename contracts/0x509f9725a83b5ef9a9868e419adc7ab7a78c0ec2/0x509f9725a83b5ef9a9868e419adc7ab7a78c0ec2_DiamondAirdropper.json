{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/sellers/DiamondAirdropper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2021 the ethier authors (github.com/divergencetech/ethier)\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {AccessControlled} from \\\"proof/sellers/presets/CallbackerWithAccessControl.sol\\\";\\nimport {DiamondExhibition} from \\\"../exhibition/DiamondExhibition.sol\\\";\\nimport {DiamondExhibitionSeller} from \\\"./DiamondExhibitionSeller.sol\\\";\\n\\n/**\\n * @notice Aidropper to transfer Diamond Exhibition tokens according to the Day One pass raffle.\\n */\\ncontract DiamondAirdropper is DiamondExhibitionSeller, AccessControlled {\\n    /**\\n     * @notice Thrown if the number of tokens sold before the purchase is not as expected.\\n     */\\n    error InvalidNumSoldBefore(uint64 actual, uint64 expected);\\n\\n    /**\\n     * @notice Thrown if the number of tokens sold after the purchase is not as expected.\\n     */\\n    error InvalidNumSoldAfter(uint64 actual, uint64 expected);\\n\\n    /**\\n     * @notice Tracks the number of tokens sold (i.e. airdropped).\\n     */\\n    uint64 public numSold;\\n\\n    constructor(address admin, address steerer, DiamondExhibition exhibition)\\n        DiamondExhibitionSeller(exhibition)\\n        AccessControlled(admin, steerer)\\n    {}\\n\\n    /**\\n     * @notice Encodes a free-of-charge purchase.\\n     * @param to The address to receive the purchased items.\\n     * @param num The number of items to purchase.\\n     */\\n    struct Receiver {\\n        address to;\\n        uint8[] projectIds;\\n    }\\n\\n    /**\\n     * @notice Purchases numbers of tokens for given addresses free of charge.\\n     */\\n    function _purchase(Receiver[] calldata receivers) internal {\\n        uint64 numSold_;\\n        for (uint256 idx = 0; idx < receivers.length; ++idx) {\\n            _purchase(receivers[idx].to, receivers[idx].projectIds);\\n            numSold_ += uint64(receivers[idx].projectIds.length);\\n        }\\n        numSold += numSold_;\\n    }\\n\\n    /**\\n     * @notice Purchases numbers of tokens for given addresses free of charge.\\n     * @param receivers The addresses to receive the airdropped items.\\n     * @param expectedNumSoldBefore The expected number of tokens sold before the purchase.\\n     * @param expectedNumSoldAfter The expected number of tokens sold after the purchase.\\n     * @dev The expected numbers before and after are intended to guarantee transaction ordering.\\n     */\\n    function purchase(Receiver[] calldata receivers, uint64 expectedNumSoldBefore, uint64 expectedNumSoldAfter)\\n        external\\n        onlyRole(DEFAULT_STEERING_ROLE)\\n    {\\n        if (expectedNumSoldBefore != numSold) {\\n            revert InvalidNumSoldBefore(numSold, expectedNumSoldBefore);\\n        }\\n\\n        _purchase(receivers);\\n\\n        if (expectedNumSoldAfter != numSold) {\\n            revert InvalidNumSoldAfter(numSold, expectedNumSoldAfter);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/proof/proof-seller/contracts/sellers/src/presets/CallbackerWithAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2023 PROOF Holdings Inc\\npragma solidity ^0.8.16;\\n\\nimport {AccessControlEnumerable} from \\\"ethier/utils/AccessControlEnumerable.sol\\\";\\nimport {ISellable, SellableCallbacker} from \\\"../base/SellableCallbacker.sol\\\";\\n\\n/**\\n * @notice Base contract for seller presets that call back to a sellable contract.\\n */\\ncontract AccessControlled is AccessControlEnumerable {\\n    constructor(address admin, address steerer) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(DEFAULT_STEERING_ROLE, steerer);\\n    }\\n}\\n\\n/**\\n * @notice Base contract for seller presets that call back to a sellable contract.\\n */\\ncontract CallbackerWithAccessControl is SellableCallbacker, AccessControlled {\\n    constructor(address admin, address steerer, ISellable sellable_)\\n        SellableCallbacker(sellable_)\\n        AccessControlled(admin, steerer)\\n    {}\\n}\\n\"\r\n    },\r\n    \"src/exhibition/DiamondExhibition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2023 PROOF Holdings Inc\\npragma solidity ^0.8.15;\\n\\nimport {Strings} from \\\"openzeppelin-contracts/utils/Strings.sol\\\";\\nimport {GenArt721CoreV3_Engine_Flex_PROOF} from \\\"artblocks-contracts/GenArt721CoreV3_Engine_Flex_PROOF.sol\\\";\\n\\nimport {ERC721A, ERC721ACommon, BaseTokenURI, ERC721ACommonBaseTokenURI} from \\\"ethier/erc721/BaseTokenURI.sol\\\";\\nimport {OperatorFilterOS} from \\\"ethier/erc721/OperatorFilterOS.sol\\\";\\n\\nimport {artblocksTokenID} from \\\"proof/artblocks/TokenIDMapping.sol\\\";\\nimport {IGenArt721CoreContractV3_Mintable} from \\\"proof/artblocks/IGenArt721CoreContractV3_Mintable.sol\\\";\\nimport {SellableERC721ACommon} from \\\"proof/sellers/sellable/SellableERC721ACommon.sol\\\";\\n\\nimport {ProjectsConfig} from \\\"./ProjectsConfig.sol\\\";\\nimport {TokenInfoManager} from \\\"./TokenInfoManager.sol\\\";\\n\\n/**\\n * @notice Library for encoding and decoding purchase data for the Diamond Exhibition sellers.\\n */\\nlibrary DiamondExhibitionLib {\\n    function encodePurchaseData(uint8[] memory projectIds) internal pure returns (bytes memory) {\\n        return abi.encode(projectIds);\\n    }\\n\\n    function dencodePurchaseData(bytes memory data) internal pure returns (uint8[] memory) {\\n        return abi.decode(data, (uint8[]));\\n    }\\n}\\n\\n/**\\n * @notice Diamond Exhibition\\n * @author David Huber (@cxkoda)\\n * @custom:reviewer Arran Schlosberg (@divergencearran)\\n */\\ncontract DiamondExhibition is\\n    ERC721ACommonBaseTokenURI,\\n    OperatorFilterOS,\\n    SellableERC721ACommon,\\n    ProjectsConfig,\\n    TokenInfoManager\\n{\\n    // =================================================================================================================\\n    //                          Errors\\n    // =================================================================================================================\\n\\n    /**\\n     * @notice Thrown if the number of requested purchases exceeds the number of remaining tokens.\\n     */\\n    error ExceedingMaxTotalSupply(uint256 num, uint256 numLeft);\\n\\n    /**\\n     * @notice Thrown if a user attempts to purchase tokens from an exhausted project.\\n     */\\n    error ProjectExhausted(uint8 projectId);\\n\\n    /**\\n     * @notice Thrown if a user attempts to purchase tokens from an invalid project.\\n     */\\n    error InvalidProject(uint8 projectId);\\n\\n    // =================================================================================================================\\n    //                          Constants\\n    // =================================================================================================================\\n\\n    /**\\n     * @notice The ArtBlocks engine flex contract.\\n     */\\n    GenArt721CoreV3_Engine_Flex_PROOF public immutable flex;\\n\\n    /**\\n     * @notice The ArtBlocks engine flex contract or a minter multiplexer.\\n     */\\n    IGenArt721CoreContractV3_Mintable public immutable flexMintGateway;\\n\\n    /**\\n     * @notice The maximum total number of tokens that can be minted.\\n     * @dev This is intentionally not a compile-time constant for the sake of testing.\\n     */\\n    uint256 public immutable maxTotalSupply;\\n\\n    // =========================================================================\\n    //                          Storage\\n    // =================================================================================================================\\n\\n    /**\\n     * @notice The number of tokens minted per project.\\n     */\\n    uint16[NUM_PROJECTS] internal _numPurchasedPerProject;\\n\\n    // =================================================================================================================\\n    //                          Storage\\n    // =================================================================================================================\\n\\n    struct ConstructorParams {\\n        address admin;\\n        address steerer;\\n        address payable secondaryReceiver;\\n        GenArt721CoreV3_Engine_Flex_PROOF flex;\\n        IGenArt721CoreContractV3_Mintable flexMintGateway;\\n    }\\n\\n    constructor(ConstructorParams memory params)\\n        ERC721ACommon(params.admin, params.steerer, \\\"Diamond Exhibition\\\", \\\"DIAMOND\\\", params.secondaryReceiver, 500)\\n        BaseTokenURI(\\\"https://metadata.proof.xyz/diamond-exhibition/\\\")\\n    {\\n        uint256 total;\\n        uint256[NUM_PROJECTS] memory maxNumPerProject_ = _maxNumPerProject();\\n        for (uint256 i = 0; i < NUM_PROJECTS; i++) {\\n            total += maxNumPerProject_[i];\\n        }\\n        maxTotalSupply = total;\\n\\n        flex = params.flex;\\n        flexMintGateway = params.flexMintGateway;\\n    }\\n\\n    // =================================================================================================================\\n    //                          Selling\\n    // =================================================================================================================\\n\\n    /**\\n     * @notice Assigns a project to a token.\\n     * @dev Mints from the associated ArtBlocks project if the project is a longform project.\\n     */\\n    function _assignProject(uint256 tokenId, uint8 projectId, uint256[NUM_PROJECTS] memory maxNumPerProject_)\\n        internal\\n    {\\n        if (projectId >= NUM_PROJECTS) {\\n            revert InvalidProject(projectId);\\n        }\\n\\n        uint16 numPurchased = _numPurchasedPerProject[projectId];\\n        if (numPurchased >= maxNumPerProject_[projectId]) {\\n            revert ProjectExhausted(projectId);\\n        }\\n        _numPurchasedPerProject[projectId] = numPurchased + 1;\\n\\n        if (_isLongformProject(projectId)) {\\n            flexMintGateway.mint_Ecf(address(this), _artblocksProjectId(projectId), address(this));\\n        }\\n        _setTokenInfo(tokenId, projectId, numPurchased /* edition */ );\\n    }\\n\\n    /**\\n     * @inheritdoc SellableERC721ACommon\\n     */\\n    function _handleSale(address to, uint64 num, bytes calldata data) internal virtual override {\\n        if (num + _totalMinted() > maxTotalSupply) {\\n            revert ExceedingMaxTotalSupply(num, maxTotalSupply - _totalMinted());\\n        }\\n\\n        uint8[] memory projectIds = DiamondExhibitionLib.dencodePurchaseData(data);\\n        assert(projectIds.length == num);\\n\\n        uint256 tokenId = _nextTokenId();\\n        uint256[NUM_PROJECTS] memory maxNumPerProject_ = _maxNumPerProject();\\n        for (uint256 i = 0; i < num; ++i) {\\n            _assignProject(tokenId++, projectIds[i], maxNumPerProject_);\\n        }\\n\\n        SellableERC721ACommon._handleSale(to, num, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721A\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        TokenInfo memory info = _tokenInfo(tokenId);\\n\\n        if (projectType(info.projectId) == ProjectType.Curated) {\\n            return string.concat(_baseURI(), Strings.toString(tokenId));\\n        }\\n\\n        return flex.tokenURI(artblocksTokenID(_artblocksProjectId(info.projectId), info.edition));\\n    }\\n\\n    /**\\n     * @notice Returns all tokenIds for a given project.\\n     * @dev Intended for front-end consumption and not optimised for gas.\\n     */\\n    function tokenIdsByProjectId(uint8 projectId) external view returns (uint256[] memory) {\\n        uint256[] memory tokenIds = new uint256[](_numPurchasedPerProject[projectId]);\\n\\n        uint256 cursor;\\n        uint256 supply = totalSupply();\\n        for (uint256 tokenId = 0; tokenId < supply; ++tokenId) {\\n            if (_tokenInfo(tokenId).projectId == projectId) {\\n                tokenIds[cursor++] = tokenId;\\n            }\\n        }\\n\\n        return tokenIds;\\n    }\\n\\n    /**\\n     * @notice Returns the number of tokens purchased for each project.\\n     * @dev Intended for front-end consumption and not optimised for gas.\\n     */\\n    function numPurchasedPerProject() external view returns (uint16[NUM_PROJECTS] memory) {\\n        return _numPurchasedPerProject;\\n    }\\n\\n    // =================================================================================================================\\n    //                          Inheritance resolution\\n    // =================================================================================================================\\n\\n    /**\\n     * @notice Helper function that returns true if the token belongs to a longform project.\\n     */\\n    function _isLongformToken(uint256 tokenId) internal view virtual returns (bool) {\\n        return _isLongformProject(_tokenInfo(tokenId).projectId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721ACommon, ERC721ACommonBaseTokenURI, SellableERC721ACommon)\\n        returns (bool)\\n    {\\n        return ERC721ACommonBaseTokenURI.supportsInterface(interfaceId);\\n    }\\n\\n    function _baseURI() internal view virtual override(ERC721A, ERC721ACommonBaseTokenURI) returns (string memory) {\\n        return ERC721ACommonBaseTokenURI._baseURI();\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual override(ERC721A, OperatorFilterOS) {\\n        ERC721A.setApprovalForAll(operator, approved);\\n    }\\n\\n    function approve(address operator, uint256 tokenId) public payable virtual override(ERC721A, OperatorFilterOS) {\\n        if (_isLongformToken(tokenId)) {\\n            ERC721A.approve(operator, tokenId);\\n        } else {\\n            OperatorFilterOS.approve(operator, tokenId);\\n        }\\n    }\\n\\n    function transferFrom(address from, address to, uint256 tokenId)\\n        public\\n        payable\\n        virtual\\n        override(ERC721A, OperatorFilterOS)\\n    {\\n        if (_isLongformToken(tokenId)) {\\n            ERC721A.transferFrom(from, to, tokenId);\\n        } else {\\n            OperatorFilterOS.transferFrom(from, to, tokenId);\\n        }\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId)\\n        public\\n        payable\\n        virtual\\n        override(ERC721A, OperatorFilterOS)\\n    {\\n        if (_isLongformToken(tokenId)) {\\n            ERC721A.safeTransferFrom(from, to, tokenId);\\n        } else {\\n            OperatorFilterOS.safeTransferFrom(from, to, tokenId);\\n        }\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\\n        public\\n        payable\\n        virtual\\n        override(ERC721A, OperatorFilterOS)\\n    {\\n        if (_isLongformToken(tokenId)) {\\n            ERC721A.safeTransferFrom(from, to, tokenId, data);\\n        } else {\\n            OperatorFilterOS.safeTransferFrom(from, to, tokenId, data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/sellers/DiamondExhibitionSeller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2021 the ethier authors (github.com/divergencetech/ethier)\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {SellableCallbacker} from \\\"proof/sellers/base/SellableCallbacker.sol\\\";\\nimport {Seller} from \\\"proof/sellers/base/Seller.sol\\\";\\n\\nimport {DiamondExhibitionLib, DiamondExhibition} from \\\"../exhibition/DiamondExhibition.sol\\\";\\n\\n/**\\n * @notice Seller module to purchase Diamond Exhibition tokens.\\n */\\nabstract contract DiamondExhibitionSeller is Seller, SellableCallbacker {\\n    constructor(DiamondExhibition exhibition) SellableCallbacker(exhibition) {}\\n\\n    /**\\n     * @notice Convenience function for inheriting sellers. Purchases tokens of given project IDs free-of-charge.\\n     */\\n    function _purchase(address to, uint8[] memory projectIds) internal {\\n        _purchase(\\n            to, uint64(projectIds.length), /* total cost */ 0, DiamondExhibitionLib.encodePurchaseData(projectIds)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ethier_0-55-0/contracts/utils/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2023 the ethier authors (github.com/divergencetech/ethier)\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {AccessControlEnumerable as ACE} from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\n\\ncontract AccessControlEnumerable is ACE {\\n    /// @notice The default role intended to perform access-restricted actions.\\n    /// @dev We are using this instead of DEFAULT_ADMIN_ROLE because the latter\\n    /// is intended to grant/revoke roles and will be secured differently.\\n    bytes32 public constant DEFAULT_STEERING_ROLE =\\n        keccak256(\\\"DEFAULT_STEERING_ROLE\\\");\\n\\n    /// @dev Overrides supportsInterface so that inheriting contracts can\\n    /// reference this contract instead of OZ's version for further overrides.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ACE)\\n        returns (bool)\\n    {\\n        return ACE.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/proof/proof-seller/contracts/sellers/src/base/SellableCallbacker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2023 PROOF Holdings Inc\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ISellable} from \\\"../interfaces/ISellable.sol\\\";\\nimport {PurchaseExecuter} from \\\"../interfaces/PurchaseExecuter.sol\\\";\\n\\n/**\\n * @notice Executes a purchase by calling the purchase interface of a `ISellable`  contract.\\n */\\nabstract contract SellableCallbacker is PurchaseExecuter {\\n    /**\\n     * @notice Emitted when the callback to the `ISellable` contract fails.\\n     */\\n    error CallbackFailed(bytes reason);\\n\\n    /**\\n     * @notice The `ISellable` contract that will be called to execute the purchase.\\n     */\\n    ISellable public immutable sellable;\\n\\n    constructor(ISellable sellable_) {\\n        sellable = ISellable(sellable_);\\n    }\\n\\n    /**\\n     * @notice Executes a purchase by calling the sale interface of a `ISellable` contract.\\n     */\\n    function _executePurchase(address to, uint64 num, uint256 cost, bytes memory data) internal virtual override {\\n        try sellable.handleSale{value: cost}(to, num, data) {}\\n        catch (bytes memory reason) {\\n            // TODO(dave): the reason is empty if the above call runs OutOfFund. Explore ways to bubble this up more cleanly.\\n            revert CallbackFailed(reason);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/artblocks-contracts_fa1dc466/contracts/GenArt721CoreV3_Engine_Flex_PROOF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity 0.8.17;\\n\\n// Created By: Art Blocks Inc.\\n\\nimport \\\"./interfaces/0.8.x/IRandomizerV2.sol\\\";\\nimport \\\"./interfaces/0.8.x/IAdminACLV0.sol\\\";\\nimport \\\"./interfaces/0.8.x/IEngineRegistryV0.sol\\\";\\nimport \\\"./interfaces/0.8.x/IGenArt721CoreContractV3_Engine_Flex.sol\\\";\\nimport \\\"./interfaces/0.8.x/IDependencyRegistryCompatibleV0.sol\\\";\\nimport \\\"./interfaces/0.8.x/IManifold.sol\\\";\\n\\nimport \\\"@openzeppelin-4.7/contracts/access/Ownable.sol\\\";\\nimport \\\"./libs/0.8.x/ERC721_PackedHashSeed.sol\\\";\\nimport \\\"./libs/0.8.x/BytecodeStorage.sol\\\";\\nimport \\\"./libs/0.8.x/Bytes32Strings.sol\\\";\\n\\n/**\\n * @title Art Blocks Engine Flex ERC-721 core contract, V3.\\n * @author Art Blocks Inc.\\n * @notice Privileged Roles and Ownership:\\n * This contract is designed to be managed, with progressively limited powers\\n * as a project progresses from active to locked.\\n * Privileged roles and abilities are controlled by the admin ACL contract and\\n * artists. Both of these roles hold extensive power and can arbitrarily\\n * control and modify portions of projects, dependent upon project state. After\\n * a project is locked, important project metadata fields are locked including\\n * the project name, artist name, and script and display details. Edition size\\n * can never be increased.\\n * Care must be taken to ensure that the admin ACL contract and artist\\n * addresses are secure behind a multi-sig or other access control mechanism.\\n * ----------------------------------------------------------------------------\\n * The following functions are restricted to the Admin ACL contract:\\n * - updateArtblocksDependencyRegistryAddress\\n * - updateProviderSalesAddresses\\n * - updateProviderPrimarySalesPercentages (up to 100%)\\n * - updateProviderSecondarySalesBPS (up to 100%)\\n * - updateMinterContract\\n * - updateRandomizerAddress\\n * - toggleProjectIsActive\\n * - addProject\\n * - forbidNewProjects (forever forbidding new projects)\\n * - updateDefaultBaseURI (used to initialize new project base URIs)\\n * - updateIPFSGateway\\n * - updateArweaveGateway\\n * ----------------------------------------------------------------------------\\n * The following functions are restricted to either the the Artist address or\\n * the Admin ACL contract, only when the project is not locked:\\n * - updateProjectName\\n * - updateProjectArtistName\\n * - updateProjectLicense\\n * - Change project script via addProjectScript, updateProjectScript,\\n *   and removeProjectLastScript\\n * - updateProjectScriptType\\n * - updateProjectAspectRatio\\n * ----------------------------------------------------------------------------\\n * The following functions are restricted to only the Artist or Admin ACL\\n * contract of a valid project ID:\\n * - proposeArtistPaymentAddressesAndSplits (Note that this has to be accepted\\n *   by adminAcceptArtistAddressesAndSplits to take effect, which is restricted\\n *   to the Admin ACL contract, or the artist if the core contract owner has\\n *   renounced ownership. Also note that a proposal will be automatically\\n *   accepted if the artist only proposes changed payee percentages without\\n *   modifying any payee addresses, or is only removing payee addresses, or\\n *   if the global config `autoApproveArtistSplitProposals` is set to `true`.)\\n * - toggleProjectIsPaused (note the artist can still mint while paused)\\n * - updateProjectSecondaryMarketRoyaltyPercentage (up to\\n *   ARTIST_MAX_SECONDARY_ROYALTY_PERCENTAGE percent)\\n * - updateProjectWebsite\\n * - updateProjectMaxInvocations (to a number greater than or equal to the\\n *   current number of invocations, and less than current project maximum\\n *   invocations)\\n * - updateProjectBaseURI (controlling the base URI for tokens in the project)\\n * ----------------------------------------------------------------------------\\n * The following function is restricted to either the Admin ACL contract, or\\n * the Artist address if the core contract owner has renounced ownership:\\n * - adminAcceptArtistAddressesAndSplits\\n * - updateProjectArtistAddress (owner ultimately controlling the project and\\n *   its and-on revenue, unless owner has renounced ownership)\\n * ----------------------------------------------------------------------------\\n * The following function is restricted to the artist when a project is\\n * unlocked, and only callable by Admin ACL contract when a project is locked:\\n * - updateProjectDescription\\n * ----------------------------------------------------------------------------\\n * The following functions for managing external asset dependencies are restricted\\n * to projects with external asset dependencies that are unlocked:\\n * - lockProjectExternalAssetDependencies\\n * - updateProjectExternalAssetDependency\\n * - removeProjectExternalAssetDependency\\n * - addProjectExternalAssetDependency\\n * ----------------------------------------------------------------------------\\n * The following function is restricted to owner calling directly:\\n * - transferOwnership\\n * - renounceOwnership\\n * ----------------------------------------------------------------------------\\n * The following configuration variables are set at time of contract deployment,\\n * and not modifiable thereafter (immutable after the point of deployment):\\n * - (bool) autoApproveArtistSplitProposals\\n * ----------------------------------------------------------------------------\\n * Additional admin and artist privileged roles may be described on minters,\\n * registries, and other contracts that may interact with this core contract.\\n */\\ncontract GenArt721CoreV3_Engine_Flex_PROOF is\\n    ERC721_PackedHashSeed,\\n    Ownable,\\n    IDependencyRegistryCompatibleV0,\\n    IManifold,\\n    IGenArt721CoreContractV3_Engine_Flex\\n{\\n    using BytecodeStorage for string;\\n    using BytecodeStorage for address;\\n    using Bytes32Strings for bytes32;\\n\\n    uint256 constant ONE_HUNDRED = 100;\\n    uint256 constant ONE_MILLION = 1_000_000;\\n    uint24 constant ONE_MILLION_UINT24 = 1_000_000;\\n    uint256 constant FOUR_WEEKS_IN_SECONDS = 2_419_200;\\n    uint8 constant AT_CHARACTER_CODE = uint8(bytes1(\\\"@\\\")); // 0x40\\n\\n    // numeric constants\\n    uint256 constant MAX_PROVIDER_SECONDARY_SALES_BPS = 10000; // 10_000 BPS = 100%\\n    uint256 constant ARTIST_MAX_SECONDARY_ROYALTY_PERCENTAGE = 95; // 95%\\n\\n    // This contract emits generic events that contain fields that indicate\\n    // which parameter has been updated. This is sufficient for application\\n    // state management, while also simplifying the contract and indexing code.\\n    // This was done as an alternative to having custom events that emit what\\n    // field-values have changed for each event, given that changed values can\\n    // be introspected by indexers due to the design of this smart contract\\n    // exposing these state changes via publicly viewable fields.\\n    //\\n    // The following fields are used to indicate which contract-level parameter\\n    // has been updated in the `PlatformUpdated` event:\\n    bytes32 constant FIELD_NEXT_PROJECT_ID = \\\"nextProjectId\\\";\\n    bytes32 constant FIELD_NEW_PROJECTS_FORBIDDEN = \\\"newProjectsForbidden\\\";\\n    bytes32 constant FIELD_DEFAULT_BASE_URI = \\\"defaultBaseURI\\\";\\n    bytes32 constant FIELD_RANDOMIZER_ADDRESS = \\\"randomizerAddress\\\";\\n    bytes32 constant FIELD_ARTBLOCKS_DEPENDENCY_REGISTRY_ADDRESS =\\n        \\\"dependencyRegistryAddress\\\";\\n    bytes32 constant FIELD_PROVIDER_SALES_ADDRESSES = \\\"providerSalesAddresses\\\";\\n    bytes32 constant FIELD_PROVIDER_PRIMARY_SALES_PERCENTAGES =\\n        \\\"providerPrimaryPercentages\\\";\\n    bytes32 constant FIELD_PROVIDER_SECONDARY_SALES_BPS =\\n        \\\"providerSecondaryBPS\\\";\\n    // The following fields are used to indicate which project-level parameter\\n    // has been updated in the `ProjectUpdated` event:\\n    bytes32 constant FIELD_PROJECT_COMPLETED = \\\"completed\\\";\\n    bytes32 constant FIELD_PROJECT_ACTIVE = \\\"active\\\";\\n    bytes32 constant FIELD_PROJECT_ARTIST_ADDRESS = \\\"artistAddress\\\";\\n    bytes32 constant FIELD_PROJECT_PAUSED = \\\"paused\\\";\\n    bytes32 constant FIELD_PROJECT_CREATED = \\\"created\\\";\\n    bytes32 constant FIELD_PROJECT_NAME = \\\"name\\\";\\n    bytes32 constant FIELD_PROJECT_ARTIST_NAME = \\\"artistName\\\";\\n    bytes32 constant FIELD_PROJECT_SECONDARY_MARKET_ROYALTY_PERCENTAGE =\\n        \\\"royaltyPercentage\\\";\\n    bytes32 constant FIELD_PROJECT_DESCRIPTION = \\\"description\\\";\\n    bytes32 constant FIELD_PROJECT_WEBSITE = \\\"website\\\";\\n    bytes32 constant FIELD_PROJECT_LICENSE = \\\"license\\\";\\n    bytes32 constant FIELD_PROJECT_MAX_INVOCATIONS = \\\"maxInvocations\\\";\\n    bytes32 constant FIELD_PROJECT_SCRIPT = \\\"script\\\";\\n    bytes32 constant FIELD_PROJECT_SCRIPT_TYPE = \\\"scriptType\\\";\\n    bytes32 constant FIELD_PROJECT_ASPECT_RATIO = \\\"aspectRatio\\\";\\n    bytes32 constant FIELD_PROJECT_BASE_URI = \\\"baseURI\\\";\\n\\n    /// Dependency registry managed by Art Blocks\\n    address public artblocksDependencyRegistryAddress;\\n\\n    /// current randomizer contract\\n    IRandomizerV2 public randomizerContract;\\n\\n    /// append-only array of all randomizer contract addresses ever used by\\n    /// this contract\\n    address[] private _historicalRandomizerAddresses;\\n\\n    /// admin ACL contract\\n    IAdminACLV0 public adminACLContract;\\n\\n    struct Project {\\n        uint24 invocations;\\n        uint24 maxInvocations;\\n        uint24 scriptCount;\\n        // max uint64 ~= 1.8e19 sec ~= 570 billion years\\n        uint64 completedTimestamp;\\n        bool active;\\n        bool paused;\\n        string name;\\n        string artist;\\n        string description;\\n        string website;\\n        string license;\\n        string projectBaseURI;\\n        bytes32 scriptTypeAndVersion;\\n        string aspectRatio;\\n        // mapping from script index to address storing script in bytecode\\n        mapping(uint256 => address) scriptBytecodeAddresses;\\n        bool externalAssetDependenciesLocked;\\n        uint24 externalAssetDependencyCount;\\n        mapping(uint256 => ExternalAssetDependency) externalAssetDependencies;\\n    }\\n\\n    mapping(uint256 => Project) projects;\\n\\n    string public preferredIPFSGateway;\\n    string public preferredArweaveGateway;\\n\\n    /// packed struct containing project financial information\\n    struct ProjectFinance {\\n        address payable additionalPayeePrimarySales;\\n        // packed uint: max of 95, max uint8 = 255\\n        uint8 secondaryMarketRoyaltyPercentage;\\n        address payable additionalPayeeSecondarySales;\\n        // packed uint: max of 100, max uint8 = 255\\n        uint8 additionalPayeeSecondarySalesPercentage;\\n        address payable artistAddress;\\n        // packed uint: max of 100, max uint8 = 255\\n        uint8 additionalPayeePrimarySalesPercentage;\\n    }\\n    // Project financials mapping\\n\\n    mapping(uint256 => ProjectFinance) projectIdToFinancials;\\n\\n    /// hash of artist's proposed payment updates to be approved by admin\\n    mapping(uint256 => bytes32) public proposedArtistAddressesAndSplitsHash;\\n\\n    /// The render provider payment address for all primary sales revenues\\n    /// (packed)\\n    address payable public renderProviderPrimarySalesAddress;\\n    /// Percentage of primary sales revenue allocated to the render provider\\n    /// (packed)\\n    // packed uint: max of 100, max uint8 = 255\\n    uint8 private _renderProviderPrimarySalesPercentage = 10;\\n    /// The platform provider payment address for all primary sales revenues\\n    /// (packed)\\n    address payable public platformProviderPrimarySalesAddress;\\n    /// Percentage of primary sales revenue allocated to the platform provider\\n    /// (packed)\\n    // packed uint: max of 100, max uint8 = 255\\n    uint8 private _platformProviderPrimarySalesPercentage = 10;\\n\\n    /// The render provider payment address for all secondary sales royalty\\n    /// revenues\\n    address payable public renderProviderSecondarySalesAddress;\\n    /// Basis Points of secondary sales royalties allocated to the\\n    /// render provider\\n    uint256 public renderProviderSecondarySalesBPS = 250;\\n    /// The platform provider payment address for all secondary sales royalty\\n    /// revenues\\n    address payable public platformProviderSecondarySalesAddress;\\n    /// Basis Points of secondary sales royalties allocated to the\\n    /// platform provider\\n    uint256 public platformProviderSecondarySalesBPS = 250;\\n\\n    /// single minter allowed for this core contract\\n    address public minterContract;\\n\\n    /// starting (initial) project ID on this contract\\n    uint256 public immutable startingProjectId;\\n\\n    /// next project ID to be created\\n    uint248 private _nextProjectId;\\n\\n    /// bool indicating if adding new projects is forbidden;\\n    /// default behavior is to allow new projects\\n    bool public newProjectsForbidden;\\n\\n    /// configuration variable (determined at time of deployment)\\n    /// that determines whether or not admin approval^ should be required\\n    /// to accept artist address change proposals, or if these proposals\\n    /// should always auto-approve, as determined by the business process\\n    /// requirements of the Engine partner using this contract.\\n    ///\\n    /// ^does not apply in the case where contract-ownership itself is revoked\\n    bool public immutable autoApproveArtistSplitProposals;\\n\\n    /// version & type of this core contract\\n    bytes32 constant CORE_VERSION = \\\"v3.1.2\\\";\\n\\n    function coreVersion() external pure returns (string memory) {\\n        return CORE_VERSION.toString();\\n    }\\n\\n    bytes32 constant CORE_TYPE = \\\"GenArt721CoreV3_Engine_Flex\\\";\\n\\n    function coreType() external pure returns (string memory) {\\n        return CORE_TYPE.toString();\\n    }\\n\\n    /// default base URI to initialize all new project projectBaseURI values to\\n    string public defaultBaseURI;\\n\\n    function _onlyUnlockedProjectExternalAssetDependencies(\\n        uint256 _projectId\\n    ) internal view {\\n        require(\\n            !projects[_projectId].externalAssetDependenciesLocked,\\n            \\\"External dependencies locked\\\"\\n        );\\n    }\\n\\n    function _onlyNonZeroAddress(address _address) internal pure {\\n        require(_address != address(0), \\\"Must input non-zero address\\\");\\n    }\\n\\n    function _onlyNonEmptyString(string memory _string) internal pure {\\n        require(bytes(_string).length != 0, \\\"Must input non-empty string\\\");\\n    }\\n\\n    function _onlyValidTokenId(uint256 _tokenId) internal view {\\n        require(_exists(_tokenId), \\\"Token ID does not exist\\\");\\n    }\\n\\n    function _onlyValidProjectId(uint256 _projectId) internal view {\\n        require(\\n            (_projectId >= startingProjectId) && (_projectId < _nextProjectId),\\n            \\\"Project ID does not exist\\\"\\n        );\\n    }\\n\\n    function _onlyUnlocked(uint256 _projectId) internal view {\\n        // Note: calling `_projectUnlocked` enforces that the `_projectId`\\n        //       passed in is valid.`\\n        require(_projectUnlocked(_projectId), \\\"Only if unlocked\\\");\\n    }\\n\\n    function _onlyAdminACL(bytes4 _selector) internal {\\n        require(\\n            adminACLAllowed(msg.sender, address(this), _selector),\\n            \\\"Only Admin ACL allowed\\\"\\n        );\\n    }\\n\\n    function _onlyArtistOrAdminACL(\\n        uint256 _projectId,\\n        bytes4 _selector\\n    ) internal {\\n        require(\\n            msg.sender == projectIdToFinancials[_projectId].artistAddress ||\\n                adminACLAllowed(msg.sender, address(this), _selector),\\n            \\\"Only artist or Admin ACL allowed\\\"\\n        );\\n    }\\n\\n    /**\\n     * This modifier allows the artist of a project to call a function if the\\n     * owner of the contract has renounced ownership. This is to allow the\\n     * contract to continue to function if the owner decides to renounce\\n     * ownership.\\n     */\\n    function _onlyAdminACLOrRenouncedArtist(\\n        uint256 _projectId,\\n        bytes4 _selector\\n    ) internal {\\n        require(\\n            adminACLAllowed(msg.sender, address(this), _selector) ||\\n                (owner() == address(0) &&\\n                    msg.sender ==\\n                    projectIdToFinancials[_projectId].artistAddress),\\n            \\\"Only Admin ACL allowed, or artist if owner has renounced\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Initializes contract.\\n     * @param _tokenName Name of token.\\n     * @param _tokenSymbol Token symbol.\\n     * @param _randomizerContract Randomizer contract.\\n     * @param _adminACLContract Address of admin access control contract, to be\\n     * set as contract owner.\\n     * @param _startingProjectId The initial next project ID.\\n     * @param _autoApproveArtistSplitProposals Whether or not to always\\n     * auto-approve proposed artist split updates.\\n     * @dev _startingProjectId should be set to a value much, much less than\\n     * max(uint248), but an explicit input type of `uint248` is used as it is\\n     * safer to cast up to `uint256` than it is to cast down for the purposes\\n     * of setting `_nextProjectId`.\\n     */\\n    constructor(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        address _renderProviderAddress,\\n        address _platformProviderAddress,\\n        address _randomizerContract,\\n        address _adminACLContract,\\n        uint248 _startingProjectId,\\n        bool _autoApproveArtistSplitProposals,\\n        address _engineRegistryContract\\n    ) ERC721_PackedHashSeed(_tokenName, _tokenSymbol) {\\n        _onlyNonZeroAddress(_renderProviderAddress);\\n        _onlyNonZeroAddress(_platformProviderAddress);\\n        _onlyNonZeroAddress(_randomizerContract);\\n        _onlyNonZeroAddress(_adminACLContract);\\n        // setup immutable `autoApproveArtistSplitProposals` config\\n        autoApproveArtistSplitProposals = _autoApproveArtistSplitProposals;\\n        // record contracts starting project ID\\n        // casting-up is safe\\n        startingProjectId = uint256(_startingProjectId);\\n        _updateProviderSalesAddresses(\\n            _renderProviderAddress,\\n            _renderProviderAddress,\\n            _platformProviderAddress,\\n            _platformProviderAddress\\n        );\\n        _updateRandomizerAddress(_randomizerContract);\\n        // set AdminACL management contract as owner\\n        _transferOwnership(_adminACLContract);\\n        // initialize default base URI\\n        _updateDefaultBaseURI(\\n            string.concat(\\n                \\\"https://token.artblocks.io/\\\",\\n                toHexString(address(this)),\\n                \\\"/\\\"\\n            )\\n        );\\n        // initialize next project ID\\n        _nextProjectId = _startingProjectId;\\n        emit PlatformUpdated(FIELD_NEXT_PROJECT_ID);\\n        // register contract as an Engine contract\\n        IEngineRegistryV0(_engineRegistryContract).registerContract(\\n            address(this),\\n            CORE_VERSION,\\n            CORE_TYPE\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates preferredIPFSGateway to `_gateway`.\\n     */\\n    function updateIPFSGateway(string calldata _gateway) public {\\n        _onlyAdminACL(this.updateIPFSGateway.selector);\\n        preferredIPFSGateway = _gateway;\\n        emit GatewayUpdated(ExternalAssetDependencyType.IPFS, _gateway);\\n    }\\n\\n    /**\\n     * @notice Updates preferredArweaveGateway to `_gateway`.\\n     */\\n    function updateArweaveGateway(string calldata _gateway) public {\\n        _onlyAdminACL(this.updateArweaveGateway.selector);\\n        preferredArweaveGateway = _gateway;\\n        emit GatewayUpdated(ExternalAssetDependencyType.ARWEAVE, _gateway);\\n    }\\n\\n    /**\\n     * @notice Locks external asset dependencies for project `_projectId`.\\n     */\\n    function lockProjectExternalAssetDependencies(uint256 _projectId) external {\\n        _onlyUnlockedProjectExternalAssetDependencies(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.lockProjectExternalAssetDependencies.selector\\n        );\\n        projects[_projectId].externalAssetDependenciesLocked = true;\\n        emit ProjectExternalAssetDependenciesLocked(_projectId);\\n    }\\n\\n    /**\\n     * @notice Updates external asset dependency for project `_projectId`.\\n     * @param _projectId Project to be updated.\\n     * @param _index Asset index.\\n     * @param _cidOrData Asset cid (Content identifier) or data string to be translated into bytecode.\\n     * @param _dependencyType Asset dependency type.\\n     *  0 - IPFS\\n     *  1 - ARWEAVE\\n     *  2 - ONCHAIN\\n     */\\n    function updateProjectExternalAssetDependency(\\n        uint256 _projectId,\\n        uint256 _index,\\n        string memory _cidOrData,\\n        ExternalAssetDependencyType _dependencyType\\n    ) external {\\n        _onlyUnlockedProjectExternalAssetDependencies(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.updateProjectExternalAssetDependency.selector\\n        );\\n        uint24 assetCount = projects[_projectId].externalAssetDependencyCount;\\n        require(_index < assetCount, \\\"Asset index out of range\\\");\\n        ExternalAssetDependency storage _oldDependency = projects[_projectId]\\n            .externalAssetDependencies[_index];\\n        ExternalAssetDependencyType _oldDependencyType = _oldDependency\\n            .dependencyType;\\n        projects[_projectId]\\n            .externalAssetDependencies[_index]\\n            .dependencyType = _dependencyType;\\n        // if the incoming dependency type is onchain, we need to write the data to bytecode\\n        if (_dependencyType == ExternalAssetDependencyType.ONCHAIN) {\\n            if (_oldDependencyType != ExternalAssetDependencyType.ONCHAIN) {\\n                // we only need to set the cid to an empty string if we are replacing an offchain asset\\n                // an onchain asset will already have an empty cid\\n                projects[_projectId].externalAssetDependencies[_index].cid = \\\"\\\";\\n            }\\n\\n            projects[_projectId]\\n                .externalAssetDependencies[_index]\\n                .bytecodeAddress = _cidOrData.writeToBytecode();\\n            // we don't want to emit data, so we emit the cid as an empty string\\n            _cidOrData = \\\"\\\";\\n        } else {\\n            projects[_projectId]\\n                .externalAssetDependencies[_index]\\n                .cid = _cidOrData;\\n        }\\n        emit ExternalAssetDependencyUpdated(\\n            _projectId,\\n            _index,\\n            _cidOrData,\\n            _dependencyType,\\n            assetCount\\n        );\\n    }\\n\\n    /**\\n     * @notice Removes external asset dependency for project `_projectId` at index `_index`.\\n     * Removal is done by swapping the element to be removed with the last element in the array, then deleting this last element.\\n     * Assets with indices higher than `_index` can have their indices adjusted as a result of this operation.\\n     * @param _projectId Project to be updated.\\n     * @param _index Asset index\\n     */\\n    function removeProjectExternalAssetDependency(\\n        uint256 _projectId,\\n        uint256 _index\\n    ) external {\\n        _onlyUnlockedProjectExternalAssetDependencies(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.removeProjectExternalAssetDependency.selector\\n        );\\n        uint24 assetCount = projects[_projectId].externalAssetDependencyCount;\\n        require(_index < assetCount, \\\"Asset index out of range\\\");\\n\\n        uint24 lastElementIndex = assetCount - 1;\\n\\n        // copy last element to index of element to be removed\\n        projects[_projectId].externalAssetDependencies[_index] = projects[\\n            _projectId\\n        ].externalAssetDependencies[lastElementIndex];\\n\\n        delete projects[_projectId].externalAssetDependencies[lastElementIndex];\\n\\n        projects[_projectId].externalAssetDependencyCount = lastElementIndex;\\n\\n        emit ExternalAssetDependencyRemoved(_projectId, _index);\\n    }\\n\\n    /**\\n     * @notice Adds external asset dependency for project `_projectId`.\\n     * @param _projectId Project to be updated.\\n     * @param _cidOrData Asset cid (Content identifier) or data string to be translated into bytecode.\\n     * @param _dependencyType Asset dependency type.\\n     *  0 - IPFS\\n     *  1 - ARWEAVE\\n     *  2 - ONCHAIN\\n     */\\n    function addProjectExternalAssetDependency(\\n        uint256 _projectId,\\n        string memory _cidOrData,\\n        ExternalAssetDependencyType _dependencyType\\n    ) external {\\n        _onlyUnlockedProjectExternalAssetDependencies(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.addProjectExternalAssetDependency.selector\\n        );\\n        uint24 assetCount = projects[_projectId].externalAssetDependencyCount;\\n        address _bytecodeAddress = address(0);\\n        // if the incoming dependency type is onchain, we need to write the data to bytecode\\n        if (_dependencyType == ExternalAssetDependencyType.ONCHAIN) {\\n            _bytecodeAddress = _cidOrData.writeToBytecode();\\n            // we don't want to emit data, so we emit the cid as an empty string\\n            _cidOrData = \\\"\\\";\\n        }\\n        ExternalAssetDependency memory asset = ExternalAssetDependency({\\n            cid: _cidOrData,\\n            dependencyType: _dependencyType,\\n            bytecodeAddress: _bytecodeAddress\\n        });\\n        projects[_projectId].externalAssetDependencies[assetCount] = asset;\\n        projects[_projectId].externalAssetDependencyCount = assetCount + 1;\\n\\n        emit ExternalAssetDependencyUpdated(\\n            _projectId,\\n            assetCount,\\n            _cidOrData,\\n            _dependencyType,\\n            assetCount + 1\\n        );\\n    }\\n\\n    /**\\n     * @notice Mints a token from project `_projectId` and sets the\\n     * token's owner to `_to`. Hash may or may not be assigned to the token\\n     * during the mint transaction, depending on the randomizer contract.\\n     * @param _to Address to be the minted token's owner.\\n     * @param _projectId Project ID to mint a token on.\\n     * @param _by Purchaser of minted token.\\n     * @return _tokenId The ID of the minted token.\\n     * @dev sender must be the allowed minterContract\\n     * @dev name of function is optimized for gas usage\\n     */\\n    function mint_Ecf(\\n        address _to,\\n        uint256 _projectId,\\n        address _by\\n    ) external returns (uint256 _tokenId) {\\n        // CHECKS\\n        require(msg.sender == minterContract, \\\"Must mint from minter contract\\\");\\n        Project storage project = projects[_projectId];\\n        // load invocations into memory\\n        uint24 invocationsBefore = project.invocations;\\n        uint24 invocationsAfter;\\n        unchecked {\\n            // invocationsBefore guaranteed <= maxInvocations <= 1_000_000,\\n            // 1_000_000 << max uint24, so no possible overflow\\n            invocationsAfter = invocationsBefore + 1;\\n        }\\n        uint24 maxInvocations = project.maxInvocations;\\n\\n        require(\\n            invocationsBefore < maxInvocations,\\n            \\\"Must not exceed max invocations\\\"\\n        );\\n        require(\\n            project.active ||\\n                _by == projectIdToFinancials[_projectId].artistAddress,\\n            \\\"Project must exist and be active\\\"\\n        );\\n        require(\\n            !project.paused ||\\n                _by == projectIdToFinancials[_projectId].artistAddress,\\n            \\\"Purchases are paused.\\\"\\n        );\\n\\n        // EFFECTS\\n        // increment project's invocations\\n        project.invocations = invocationsAfter;\\n        uint256 thisTokenId;\\n        unchecked {\\n            // invocationsBefore is uint24 << max uint256. In production use,\\n            // _projectId * ONE_MILLION must be << max uint256, otherwise\\n            // tokenIdToProjectId function become invalid.\\n            // Therefore, no risk of overflow\\n            thisTokenId = (_projectId * ONE_MILLION) + invocationsBefore;\\n        }\\n\\n        // mark project as completed if hit max invocations\\n        if (invocationsAfter == maxInvocations) {\\n            _completeProject(_projectId);\\n        }\\n\\n        // INTERACTIONS\\n        _mint(_to, thisTokenId);\\n\\n        // token hash is updated by the randomizer contract on V3\\n        randomizerContract.assignTokenHash(thisTokenId);\\n\\n        // Do not need to also log `projectId` in event, as the `projectId` for\\n        // a given token can be derived from the `tokenId` with:\\n        //   projectId = tokenId / 1_000_000\\n        emit Mint(_to, thisTokenId);\\n\\n        return thisTokenId;\\n    }\\n\\n    /**\\n     * @notice Sets the hash seed for a given token ID `_tokenId`.\\n     * May only be called by the current randomizer contract.\\n     * May only be called for tokens that have not already been assigned a\\n     * non-zero hash.\\n     * @param _tokenId Token ID to set the hash for.\\n     * @param _hashSeed Hash seed to set for the token ID. Only last 12 bytes\\n     * will be used.\\n     * @dev gas-optimized function name because called during mint sequence\\n     * @dev if a separate event is required when the token hash is set, e.g.\\n     * for indexing purposes, it must be emitted by the randomizer. This is to\\n     * minimize gas when minting.\\n     */\\n    function setTokenHash_8PT(uint256 _tokenId, bytes32 _hashSeed) external {\\n        _onlyValidTokenId(_tokenId);\\n\\n        OwnerAndHashSeed storage ownerAndHashSeed = _ownersAndHashSeeds[\\n            _tokenId\\n        ];\\n        require(\\n            msg.sender == address(randomizerContract),\\n            \\\"Only randomizer may set\\\"\\n        );\\n        require(\\n            ownerAndHashSeed.hashSeed == bytes12(0),\\n            \\\"Token hash already set\\\"\\n        );\\n        require(_hashSeed != bytes12(0), \\\"No zero hash seed\\\");\\n        ownerAndHashSeed.hashSeed = bytes12(_hashSeed);\\n    }\\n\\n    /**\\n     * @notice Allows owner (AdminACL) to revoke ownership of the contract.\\n     * Note that the contract is intended to continue to function after the\\n     * owner renounces ownership, but no new projects will be able to be added.\\n     * Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the\\n     * owner/AdminACL contract. The same is true for any dependent contracts\\n     * that also integrate with the owner/AdminACL contract (e.g. potentially\\n     * minter suite contracts, registry contracts, etc.).\\n     * After renouncing ownership, artists will be in control of updates to\\n     * their payment addresses and splits (see modifier\\n     * onlyAdminACLOrRenouncedArtist`).\\n     * While there is no currently intended reason to call this method based on\\n     * typical Engine partner business practices, this method exists to allow\\n     * artists to continue to maintain the limited set of contract\\n     * functionality that exists post-project-lock in an environment in which\\n     * there is no longer an admin maintaining this smart contract.\\n     * @dev This function is intended to be called directly by the AdminACL,\\n     * not by an address allowed by the AdminACL contract.\\n     */\\n    function renounceOwnership() public override onlyOwner {\\n        // broadcast that new projects are no longer allowed (if not already)\\n        _forbidNewProjects();\\n        // renounce ownership viw Ownable\\n        Ownable.renounceOwnership();\\n    }\\n\\n    /**\\n     * @notice Updates reference to Art Blocks Dependency Registry contract.\\n     * @param _artblocksDependencyRegistryAddress Address of new Dependency\\n     * Registry.\\n     */\\n    function updateArtblocksDependencyRegistryAddress(\\n        address _artblocksDependencyRegistryAddress\\n    ) external {\\n        _onlyAdminACL(this.updateArtblocksDependencyRegistryAddress.selector);\\n        _onlyNonZeroAddress(_artblocksDependencyRegistryAddress);\\n        artblocksDependencyRegistryAddress = _artblocksDependencyRegistryAddress;\\n        emit PlatformUpdated(FIELD_ARTBLOCKS_DEPENDENCY_REGISTRY_ADDRESS);\\n    }\\n\\n    /**\\n     * @notice Updates sales addresses for the platform and render providers to\\n     * the input parameters.\\n     * @param _renderProviderPrimarySalesAddress Address of new primary sales\\n     * payment address.\\n     * @param _renderProviderSecondarySalesAddress Address of new secondary sales\\n     * payment address.\\n     * @param _platformProviderPrimarySalesAddress Address of new primary sales\\n     * payment address.\\n     * @param _platformProviderSecondarySalesAddress Address of new secondary sales\\n     * payment address.\\n     */\\n    function updateProviderSalesAddresses(\\n        address payable _renderProviderPrimarySalesAddress,\\n        address payable _renderProviderSecondarySalesAddress,\\n        address payable _platformProviderPrimarySalesAddress,\\n        address payable _platformProviderSecondarySalesAddress\\n    ) external {\\n        _onlyAdminACL(this.updateProviderSalesAddresses.selector);\\n        _onlyNonZeroAddress(_renderProviderPrimarySalesAddress);\\n        _onlyNonZeroAddress(_renderProviderSecondarySalesAddress);\\n        _onlyNonZeroAddress(_platformProviderPrimarySalesAddress);\\n        _onlyNonZeroAddress(_platformProviderSecondarySalesAddress);\\n        _updateProviderSalesAddresses(\\n            _renderProviderPrimarySalesAddress,\\n            _renderProviderSecondarySalesAddress,\\n            _platformProviderPrimarySalesAddress,\\n            _platformProviderSecondarySalesAddress\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates the render and platform provider primary sales revenue percentage to\\n     * the provided inputs.\\n     * @param renderProviderPrimarySalesPercentage_ New primary sales revenue % for the render provider\\n     * @param platformProviderPrimarySalesPercentage_ New primary sales revenue % for the platform provider\\n     * percentage.\\n     */\\n    function updateProviderPrimarySalesPercentages(\\n        uint256 renderProviderPrimarySalesPercentage_,\\n        uint256 platformProviderPrimarySalesPercentage_\\n    ) external {\\n        _onlyAdminACL(this.updateProviderPrimarySalesPercentages.selector);\\n\\n        // Validate that the sum of the proposed %s, does not exceed 100%.\\n        require(\\n            (renderProviderPrimarySalesPercentage_ +\\n                platformProviderPrimarySalesPercentage_) <= ONE_HUNDRED,\\n            \\\"Max sum of ONE_HUNDRED %\\\"\\n        );\\n        // Casting to `uint8` here is safe due check above, which does not allow\\n        // overflow as of solidity version ^0.8.0.\\n        _renderProviderPrimarySalesPercentage = uint8(\\n            renderProviderPrimarySalesPercentage_\\n        );\\n        _platformProviderPrimarySalesPercentage = uint8(\\n            platformProviderPrimarySalesPercentage_\\n        );\\n        emit PlatformUpdated(FIELD_PROVIDER_PRIMARY_SALES_PERCENTAGES);\\n    }\\n\\n    /**\\n     * @notice Updates render and platform provider secondary sales royalty Basis Points to\\n     * the provided inputs.\\n     * @param _renderProviderSecondarySalesBPS New secondary sales royalty Basis\\n     * points.\\n     * @param _platformProviderSecondarySalesBPS New secondary sales royalty Basis\\n     * points.\\n     * @dev Due to secondary royalties being ultimately enforced via social\\n     * consensus, no hard upper limit is imposed on the BPS value, other than\\n     * <= 100% royalty, which would not make mathematical sense. Realistically,\\n     * changing this value is expected to either never occur, or be a rare\\n     * occurrence.\\n     */\\n    function updateProviderSecondarySalesBPS(\\n        uint256 _renderProviderSecondarySalesBPS,\\n        uint256 _platformProviderSecondarySalesBPS\\n    ) external {\\n        _onlyAdminACL(this.updateProviderSecondarySalesBPS.selector);\\n        // Validate that the sum of the proposed provider BPS, does not exceed 10_000 BPS.\\n        require(\\n            (_renderProviderSecondarySalesBPS +\\n                _platformProviderSecondarySalesBPS) <=\\n                MAX_PROVIDER_SECONDARY_SALES_BPS,\\n            \\\"Over max sum of BPS\\\"\\n        );\\n        renderProviderSecondarySalesBPS = _renderProviderSecondarySalesBPS;\\n        platformProviderSecondarySalesBPS = _platformProviderSecondarySalesBPS;\\n        emit PlatformUpdated(FIELD_PROVIDER_SECONDARY_SALES_BPS);\\n    }\\n\\n    /**\\n     * @notice Updates minter to `_address`.\\n     * @param _address Address of new minter.\\n     */\\n    function updateMinterContract(address _address) external {\\n        _onlyAdminACL(this.updateMinterContract.selector);\\n        _onlyNonZeroAddress(_address);\\n        minterContract = _address;\\n        emit MinterUpdated(_address);\\n    }\\n\\n    /**\\n     * @notice Updates randomizer to `_randomizerAddress`.\\n     * @param _randomizerAddress Address of new randomizer.\\n     */\\n    function updateRandomizerAddress(address _randomizerAddress) external {\\n        _onlyAdminACL(this.updateRandomizerAddress.selector);\\n        _onlyNonZeroAddress(_randomizerAddress);\\n        _updateRandomizerAddress(_randomizerAddress);\\n    }\\n\\n    /**\\n     * @notice Toggles project `_projectId` as active/inactive.\\n     * @param _projectId Project ID to be toggled.\\n     */\\n    function toggleProjectIsActive(uint256 _projectId) external {\\n        _onlyAdminACL(this.toggleProjectIsActive.selector);\\n        _onlyValidProjectId(_projectId);\\n        projects[_projectId].active = !projects[_projectId].active;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_ACTIVE);\\n    }\\n\\n    /**\\n     * @notice Artist proposes updated set of artist address, additional payee\\n     * addresses, and percentage splits for project `_projectId`. Addresses and\\n     * percentages do not have to all be changed, but they must all be defined\\n     * as a complete set.\\n     * Note that if the artist is only proposing a change to the payee percentage\\n     * splits, without modifying the payee addresses, the proposal will be\\n     * automatically approved and the new splits will become active immediately.\\n     * Automatic approval will also be granted if the artist is only removing\\n     * additional payee addresses, without adding any new ones.\\n     * Also note that if `autoApproveArtistSplitProposals` is true, proposals\\n     * will always be auto-approved, regardless of what is being changed.\\n     * Also note that if the artist is proposing sending funds to the zero\\n     * address, this function will revert and the proposal will not be created.\\n     * @param _projectId Project ID.\\n     * @param _artistAddress Artist address that controls the project, and may\\n     * receive payments.\\n     * @param _additionalPayeePrimarySales Address that may receive a\\n     * percentage split of the artist's primary sales revenue.\\n     * @param _additionalPayeePrimarySalesPercentage Percent of artist's\\n     * portion of primary sale revenue that will be split to address\\n     * `_additionalPayeePrimarySales`.\\n     * @param _additionalPayeeSecondarySales Address that may receive a percentage\\n     * split of the secondary sales royalties.\\n     * @param _additionalPayeeSecondarySalesPercentage Percent of artist's portion\\n     * of secondary sale royalties that will be split to address\\n     * `_additionalPayeeSecondarySales`.\\n     * @dev `_artistAddress` must be a valid address (non-zero-address), but it\\n     * is intentionally allowable for `_additionalPayee{Primary,Secondaary}Sales`\\n     * and their associated percentages to be zero'd out by the controlling artist.\\n     */\\n    function proposeArtistPaymentAddressesAndSplits(\\n        uint256 _projectId,\\n        address payable _artistAddress,\\n        address payable _additionalPayeePrimarySales,\\n        uint256 _additionalPayeePrimarySalesPercentage,\\n        address payable _additionalPayeeSecondarySales,\\n        uint256 _additionalPayeeSecondarySalesPercentage\\n    ) external {\\n        _onlyValidProjectId(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.proposeArtistPaymentAddressesAndSplits.selector\\n        );\\n        _onlyNonZeroAddress(_artistAddress);\\n        ProjectFinance storage projectFinance = projectIdToFinancials[\\n            _projectId\\n        ];\\n        // checks\\n        require(\\n            _additionalPayeePrimarySalesPercentage <= ONE_HUNDRED &&\\n                _additionalPayeeSecondarySalesPercentage <= ONE_HUNDRED,\\n            \\\"Max of 100%\\\"\\n        );\\n        require(\\n            _additionalPayeePrimarySalesPercentage == 0 ||\\n                _additionalPayeePrimarySales != address(0),\\n            \\\"Primary payee is zero address\\\"\\n        );\\n        require(\\n            _additionalPayeeSecondarySalesPercentage == 0 ||\\n                _additionalPayeeSecondarySales != address(0),\\n            \\\"Secondary payee is zero address\\\"\\n        );\\n        // effects\\n        // emit event for off-chain indexing\\n        // note: always emit a proposal event, even in the pathway of\\n        // automatic approval, to simplify indexing expectations\\n        emit ProposedArtistAddressesAndSplits(\\n            _projectId,\\n            _artistAddress,\\n            _additionalPayeePrimarySales,\\n            _additionalPayeePrimarySalesPercentage,\\n            _additionalPayeeSecondarySales,\\n            _additionalPayeeSecondarySalesPercentage\\n        );\\n        // automatically accept if no proposed addresses modifications, or if\\n        // the proposal only removes payee addresses, or if contract is set to\\n        // always auto-approve.\\n        // store proposal hash on-chain, only if not automatic accept\\n        bool automaticAccept = autoApproveArtistSplitProposals;\\n        if (!automaticAccept) {\\n            // block scope to avoid stack too deep error\\n            bool artistUnchanged = _artistAddress ==\\n                projectFinance.artistAddress;\\n            bool additionalPrimaryUnchangedOrRemoved = (_additionalPayeePrimarySales ==\\n                    projectFinance.additionalPayeePrimarySales) ||\\n                    (_additionalPayeePrimarySales == address(0));\\n            bool additionalSecondaryUnchangedOrRemoved = (_additionalPayeeSecondarySales ==\\n                    projectFinance.additionalPayeeSecondarySales) ||\\n                    (_additionalPayeeSecondarySales == address(0));\\n            automaticAccept =\\n                artistUnchanged &&\\n                additionalPrimaryUnchangedOrRemoved &&\\n                additionalSecondaryUnchangedOrRemoved;\\n        }\\n        if (automaticAccept) {\\n            // clear any previously proposed values\\n            proposedArtistAddressesAndSplitsHash[_projectId] = bytes32(0);\\n            // update storage\\n            // artist address can change during automatic accept if\\n            // autoApproveArtistSplitProposals is true\\n            projectFinance.artistAddress = _artistAddress;\\n            projectFinance\\n                .additionalPayeePrimarySales = _additionalPayeePrimarySales;\\n            // safe to cast as uint8 as max is 100%, max uint8 is 255\\n            projectFinance.additionalPayeePrimarySalesPercentage = uint8(\\n                _additionalPayeePrimarySalesPercentage\\n            );\\n            projectFinance\\n                .additionalPayeeSecondarySales = _additionalPayeeSecondarySales;\\n            // safe to cast as uint8 as max is 100%, max uint8 is 255\\n            projectFinance.additionalPayeeSecondarySalesPercentage = uint8(\\n                _additionalPayeeSecondarySalesPercentage\\n            );\\n            // emit event for off-chain indexing\\n            emit AcceptedArtistAddressesAndSplits(_projectId);\\n        } else {\\n            proposedArtistAddressesAndSplitsHash[_projectId] = keccak256(\\n                abi.encode(\\n                    _artistAddress,\\n                    _additionalPayeePrimarySales,\\n                    _additionalPayeePrimarySalesPercentage,\\n                    _additionalPayeeSecondarySales,\\n                    _additionalPayeeSecondarySalesPercentage\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin accepts a proposed set of updated artist address,\\n     * additional payee addresses, and percentage splits for project\\n     * `_projectId`. Addresses and percentages do not have to all be changed,\\n     * but they must all be defined as a complete set.\\n     * @param _projectId Project ID.\\n     * @param _artistAddress Artist address that controls the project, and may\\n     * receive payments.\\n     * @param _additionalPayeePrimarySales Address that may receive a\\n     * percentage split of the artist's primary sales revenue.\\n     * @param _additionalPayeePrimarySalesPercentage Percent of artist's\\n     * portion of primary sale revenue that will be split to address\\n     * `_additionalPayeePrimarySales`.\\n     * @param _additionalPayeeSecondarySales Address that may receive a percentage\\n     * split of the secondary sales royalties.\\n     * @param _additionalPayeeSecondarySalesPercentage Percent of artist's portion\\n     * of secondary sale royalties that will be split to address\\n     * `_additionalPayeeSecondarySales`.\\n     * @dev this must be called by the Admin ACL contract, and must only accept\\n     * the most recent proposed values for a given project (validated on-chain\\n     * by comparing the hash of the proposed and accepted values).\\n     * @dev `_artistAddress` must be a valid address (non-zero-address), but it\\n     * is intentionally allowable for `_additionalPayee{Primary,Secondaary}Sales`\\n     * and their associated percentages to be zero'd out by the controlling artist.\\n     */\\n    function adminAcceptArtistAddressesAndSplits(\\n        uint256 _projectId,\\n        address payable _artistAddress,\\n        address payable _additionalPayeePrimarySales,\\n        uint256 _additionalPayeePrimarySalesPercentage,\\n        address payable _additionalPayeeSecondarySales,\\n        uint256 _additionalPayeeSecondarySalesPercentage\\n    ) external {\\n        _onlyValidProjectId(_projectId);\\n        _onlyAdminACLOrRenouncedArtist(\\n            _projectId,\\n            this.adminAcceptArtistAddressesAndSplits.selector\\n        );\\n        _onlyNonZeroAddress(_artistAddress);\\n        // checks\\n        require(\\n            proposedArtistAddressesAndSplitsHash[_projectId] ==\\n                keccak256(\\n                    abi.encode(\\n                        _artistAddress,\\n                        _additionalPayeePrimarySales,\\n                        _additionalPayeePrimarySalesPercentage,\\n                        _additionalPayeeSecondarySales,\\n                        _additionalPayeeSecondarySalesPercentage\\n                    )\\n                ),\\n            \\\"Must match artist proposal\\\"\\n        );\\n        // effects\\n        ProjectFinance storage projectFinance = projectIdToFinancials[\\n            _projectId\\n        ];\\n        projectFinance.artistAddress = _artistAddress;\\n        projectFinance\\n            .additionalPayeePrimarySales = _additionalPayeePrimarySales;\\n        projectFinance.additionalPayeePrimarySalesPercentage = uint8(\\n            _additionalPayeePrimarySalesPercentage\\n        );\\n        projectFinance\\n            .additionalPayeeSecondarySales = _additionalPayeeSecondarySales;\\n        projectFinance.additionalPayeeSecondarySalesPercentage = uint8(\\n            _additionalPayeeSecondarySalesPercentage\\n        );\\n        // clear proposed values\\n        proposedArtistAddressesAndSplitsHash[_projectId] = bytes32(0);\\n        // emit event for off-chain indexing\\n        emit AcceptedArtistAddressesAndSplits(_projectId);\\n    }\\n\\n    /**\\n     * @notice Updates artist of project `_projectId` to `_artistAddress`.\\n     * This is to only be used in the event that the artist address is\\n     * compromised or sanctioned.\\n     * @param _projectId Project ID.\\n     * @param _artistAddress New artist address.\\n     */\\n    function updateProjectArtistAddress(\\n        uint256 _projectId,\\n        address payable _artistAddress\\n    ) external {\\n        _onlyValidProjectId(_projectId);\\n        _onlyAdminACLOrRenouncedArtist(\\n            _projectId,\\n            this.updateProjectArtistAddress.selector\\n        );\\n        _onlyNonZeroAddress(_artistAddress);\\n        projectIdToFinancials[_projectId].artistAddress = _artistAddress;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_ARTIST_ADDRESS);\\n    }\\n\\n    /**\\n     * @notice Toggles paused state of project `_projectId`.\\n     * @param _projectId Project ID to be toggled.\\n     */\\n    function toggleProjectIsPaused(uint256 _projectId) external {\\n        _onlyValidProjectId(_projectId);\\n        _onlyArtistOrAdminACL(_projectId, this.toggleProjectIsPaused.selector);\\n        projects[_projectId].paused = !projects[_projectId].paused;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_PAUSED);\\n    }\\n\\n    /**\\n     * @notice Adds new project `_projectName` by `_artistAddress`.\\n     * @param _projectName Project name.\\n     * @param _artistAddress Artist's address.\\n     * @dev token price now stored on minter\\n     */\\n    function addProject(\\n        string memory _projectName,\\n        address payable _artistAddress\\n    ) external {\\n        _onlyAdminACL(this.addProject.selector);\\n        _onlyNonEmptyString(_projectName);\\n        _onlyNonZeroAddress(_artistAddress);\\n        require(!newProjectsForbidden, \\\"New projects forbidden\\\");\\n        uint256 projectId = _nextProjectId;\\n        projectIdToFinancials[projectId].artistAddress = _artistAddress;\\n        projects[projectId].name = _projectName;\\n        projects[projectId].paused = true;\\n        projects[projectId].maxInvocations = ONE_MILLION_UINT24;\\n        projects[projectId].projectBaseURI = defaultBaseURI;\\n\\n        _nextProjectId = uint248(projectId) + 1;\\n        emit ProjectUpdated(projectId, FIELD_PROJECT_CREATED);\\n    }\\n\\n    /**\\n     * @notice Forever forbids new projects from being added to this contract.\\n     */\\n    function forbidNewProjects() external {\\n        _onlyAdminACL(this.forbidNewProjects.selector);\\n        require(!newProjectsForbidden, \\\"Already forbidden\\\");\\n        _forbidNewProjects();\\n    }\\n\\n    /**\\n     * @notice Updates name of project `_projectId` to be `_projectName`.\\n     * @param _projectId Project ID.\\n     * @param _projectName New project name.\\n     */\\n    function updateProjectName(\\n        uint256 _projectId,\\n        string memory _projectName\\n    ) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(_projectId, this.updateProjectName.selector);\\n        _onlyNonEmptyString(_projectName);\\n        projects[_projectId].name = _projectName;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_NAME);\\n    }\\n\\n    /**\\n     * @notice Updates artist name for project `_projectId` to be\\n     * `_projectArtistName`.\\n     * @param _projectId Project ID.\\n     * @param _projectArtistName New artist name.\\n     */\\n    function updateProjectArtistName(\\n        uint256 _projectId,\\n        string memory _projectArtistName\\n    ) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.updateProjectArtistName.selector\\n        );\\n        _onlyNonEmptyString(_projectArtistName);\\n        projects[_projectId].artist = _projectArtistName;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_ARTIST_NAME);\\n    }\\n\\n    /**\\n     * @notice Updates artist secondary market royalties for project\\n     * `_projectId` to be `_secondMarketRoyalty` percent.\\n     * This DOES NOT include the secondary market royalty percentages collected\\n     * by the issuing platform; it is only the total percentage of royalties\\n     * that will be split to artist and additionalSecondaryPayee.\\n     * @param _projectId Project ID.\\n     * @param _secondMarketRoyalty Percent of secondary sales revenue that will\\n     * be split to artist and additionalSecondaryPayee. This must be less than\\n     * or equal to ARTIST_MAX_SECONDARY_ROYALTY_PERCENTAGE percent.\\n     */\\n    function updateProjectSecondaryMarketRoyaltyPercentage(\\n        uint256 _projectId,\\n        uint256 _secondMarketRoyalty\\n    ) external {\\n        _onlyValidProjectId(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.updateProjectSecondaryMarketRoyaltyPercentage.selector\\n        );\\n        require(\\n            _secondMarketRoyalty <= ARTIST_MAX_SECONDARY_ROYALTY_PERCENTAGE,\\n            \\\"Over max percent\\\"\\n        );\\n        projectIdToFinancials[_projectId]\\n            .secondaryMarketRoyaltyPercentage = uint8(_secondMarketRoyalty);\\n        emit ProjectUpdated(\\n            _projectId,\\n            FIELD_PROJECT_SECONDARY_MARKET_ROYALTY_PERCENTAGE\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates description of project `_projectId`.\\n     * Only artist may call when unlocked, only admin may call when locked.\\n     * @param _projectId Project ID.\\n     * @param _projectDescription New project description.\\n     */\\n    function updateProjectDescription(\\n        uint256 _projectId,\\n        string memory _projectDescription\\n    ) external {\\n        // checks\\n        require(\\n            _projectUnlocked(_projectId)\\n                ? msg.sender == projectIdToFinancials[_projectId].artistAddress\\n                : adminACLAllowed(\\n                    msg.sender,\\n                    address(this),\\n                    this.updateProjectDescription.selector\\n                ),\\n            \\\"Only artist when unlocked, owner when locked\\\"\\n        );\\n        // effects\\n        projects[_projectId].description = _projectDescription;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_DESCRIPTION);\\n    }\\n\\n    /**\\n     * @notice Updates website of project `_projectId` to be `_projectWebsite`.\\n     * @param _projectId Project ID.\\n     * @param _projectWebsite New project website.\\n     * @dev It is intentionally allowed for this to be set to the empty string.\\n     */\\n    function updateProjectWebsite(\\n        uint256 _projectId,\\n        string memory _projectWebsite\\n    ) external {\\n        _onlyValidProjectId(_projectId);\\n        _onlyArtistOrAdminACL(_projectId, this.updateProjectWebsite.selector);\\n        projects[_projectId].website = _projectWebsite;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_WEBSITE);\\n    }\\n\\n    /**\\n     * @notice Updates license for project `_projectId`.\\n     * @param _projectId Project ID.\\n     * @param _projectLicense New project license.\\n     */\\n    function updateProjectLicense(\\n        uint256 _projectId,\\n        string memory _projectLicense\\n    ) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(_projectId, this.updateProjectLicense.selector);\\n        _onlyNonEmptyString(_projectLicense);\\n        projects[_projectId].license = _projectLicense;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_LICENSE);\\n    }\\n\\n    /**\\n     * @notice Updates maximum invocations for project `_projectId` to\\n     * `_maxInvocations`. Maximum invocations may only be decreased by the\\n     * artist, and must be greater than or equal to current invocations.\\n     * New projects are created with maximum invocations of 1 million by\\n     * default.\\n     * @param _projectId Project ID.\\n     * @param _maxInvocations New maximum invocations.\\n     */\\n    function updateProjectMaxInvocations(\\n        uint256 _projectId,\\n        uint24 _maxInvocations\\n    ) external {\\n        _onlyValidProjectId(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.updateProjectMaxInvocations.selector\\n        );\\n        // CHECKS\\n        Project storage project = projects[_projectId];\\n        uint256 _invocations = project.invocations;\\n        require(\\n            (_maxInvocations < project.maxInvocations),\\n            \\\"Only maxInvocations decrease\\\"\\n        );\\n        require(_maxInvocations >= _invocations, \\\"Only gte invocations\\\");\\n        // EFFECTS\\n        project.maxInvocations = _maxInvocations;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_MAX_INVOCATIONS);\\n\\n        // register completed timestamp if action completed the project\\n        if (_maxInvocations == _invocations) {\\n            _completeProject(_projectId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a script to project `_projectId`.\\n     * @param _projectId Project to be updated.\\n     * @param _script Script to be added. Required to be a non-empty string,\\n     * but no further validation is performed.\\n     */\\n    function addProjectScript(\\n        uint256 _projectId,\\n        string memory _script\\n    ) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(_projectId, this.addProjectScript.selector);\\n        _onlyNonEmptyString(_script);\\n        Project storage project = projects[_projectId];\\n        // store script in contract bytecode\\n        project.scriptBytecodeAddresses[project.scriptCount] = _script\\n            .writeToBytecode();\\n        project.scriptCount = project.scriptCount + 1;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_SCRIPT);\\n    }\\n\\n    /**\\n     * @notice Updates script for project `_projectId` at script ID `_scriptId`.\\n     * @param _projectId Project to be updated.\\n     * @param _scriptId Script ID to be updated.\\n     * @param _script The updated script value. Required to be a non-empty\\n     *                string, but no further validation is performed.\\n     */\\n    function updateProjectScript(\\n        uint256 _projectId,\\n        uint256 _scriptId,\\n        string memory _script\\n    ) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(_projectId, this.updateProjectScript.selector);\\n        _onlyNonEmptyString(_script);\\n        Project storage project = projects[_projectId];\\n        require(_scriptId < project.scriptCount, \\\"scriptId out of range\\\");\\n\\n        // store script in contract bytecode, replacing reference address from\\n        // the contract that no longer exists with the newly created one\\n        project.scriptBytecodeAddresses[_scriptId] = _script.writeToBytecode();\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_SCRIPT);\\n    }\\n\\n    /**\\n     * @notice Removes last script from project `_projectId`.\\n     * @param _projectId Project to be updated.\\n     */\\n    function removeProjectLastScript(uint256 _projectId) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.removeProjectLastScript.selector\\n        );\\n        Project storage project = projects[_projectId];\\n        require(project.scriptCount > 0, \\\"No scripts to remove\\\");\\n\\n        // delete reference to contract address that no longer exists\\n        delete project.scriptBytecodeAddresses[project.scriptCount - 1];\\n        unchecked {\\n            project.scriptCount = project.scriptCount - 1;\\n        }\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_SCRIPT);\\n    }\\n\\n    /**\\n     * @notice Updates script type for project `_projectId`.\\n     * @param _projectId Project to be updated.\\n     * @param _scriptTypeAndVersion Script type and version e.g. \\\"p5js@1.0.0\\\",\\n     * as bytes32 encoded string.\\n     */\\n    function updateProjectScriptType(\\n        uint256 _projectId,\\n        bytes32 _scriptTypeAndVersion\\n    ) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.updateProjectScriptType.selector\\n        );\\n        Project storage project = projects[_projectId];\\n        // require exactly one @ symbol in _scriptTypeAndVersion\\n        require(\\n            _scriptTypeAndVersion.containsExactCharacterQty(\\n                AT_CHARACTER_CODE,\\n                uint8(1)\\n            ),\\n            \\\"must contain exactly one @\\\"\\n        );\\n        project.scriptTypeAndVersion = _scriptTypeAndVersion;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_SCRIPT_TYPE);\\n    }\\n\\n    /**\\n     * @notice Updates project's aspect ratio.\\n     * @param _projectId Project to be updated.\\n     * @param _aspectRatio Aspect ratio to be set. Intended to be string in the\\n     * format of a decimal, e.g. \\\"1\\\" for square, \\\"1.77777778\\\" for 16:9, etc.,\\n     * allowing for a maximum of 10 digits and one (optional) decimal separator.\\n     */\\n    function updateProjectAspectRatio(\\n        uint256 _projectId,\\n        string memory _aspectRatio\\n    ) external {\\n        _onlyUnlocked(_projectId);\\n        _onlyArtistOrAdminACL(\\n            _projectId,\\n            this.updateProjectAspectRatio.selector\\n        );\\n        _onlyNonEmptyString(_aspectRatio);\\n        // Perform more detailed input validation for aspect ratio.\\n        bytes memory aspectRatioBytes = bytes(_aspectRatio);\\n        uint256 bytesLength = aspectRatioBytes.length;\\n        require(bytesLength <= 11, \\\"Aspect ratio format too long\\\");\\n        bool hasSeenDecimalSeparator = false;\\n        bool hasSeenNumber = false;\\n        for (uint256 i; i < bytesLength; i++) {\\n            bytes1 character = aspectRatioBytes[i];\\n            // Allow as many #s as desired.\\n            if (character >= 0x30 && character <= 0x39) {\\n                // 9-0\\n                // We need to ensure there is at least 1 `9-0` occurrence.\\n                hasSeenNumber = true;\\n                continue;\\n            }\\n            if (character == 0x2E) {\\n                // .\\n                // Allow no more than 1 `.` occurrence.\\n                if (!hasSeenDecimalSeparator) {\\n                    hasSeenDecimalSeparator = true;\\n                    continue;\\n                }\\n            }\\n            revert(\\\"Improperly formatted aspect ratio\\\");\\n        }\\n        require(hasSeenNumber, \\\"Aspect ratio has no numbers\\\");\\n\\n        projects[_projectId].aspectRatio = _aspectRatio;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_ASPECT_RATIO);\\n    }\\n\\n    /**\\n     * @notice Updates base URI for project `_projectId` to `_newBaseURI`.\\n     * This is the controlling base URI for all tokens in the project. The\\n     * contract-level defaultBaseURI is only used when initializing new\\n     * projects.\\n     * @param _projectId Project to be updated.\\n     * @param _newBaseURI New base URI.\\n     */\\n    function updateProjectBaseURI(\\n        uint256 _projectId,\\n        string memory _newBaseURI\\n    ) external {\\n        _onlyValidProjectId(_projectId);\\n        _onlyArtistOrAdminACL(_projectId, this.updateProjectBaseURI.selector);\\n        _onlyNonEmptyString(_newBaseURI);\\n        projects[_projectId].projectBaseURI = _newBaseURI;\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_BASE_URI);\\n    }\\n\\n    /**\\n     * @notice Updates default base URI to `_defaultBaseURI`. The\\n     * contract-level defaultBaseURI is only used when initializing new\\n     * projects. Token URIs are determined by their project's `projectBaseURI`.\\n     * @param _defaultBaseURI New default base URI.\\n     */\\n    function updateDefaultBaseURI(string memory _defaultBaseURI) external {\\n        _onlyAdminACL(this.updateDefaultBaseURI.selector);\\n        _onlyNonEmptyString(_defaultBaseURI);\\n        _updateDefaultBaseURI(_defaultBaseURI);\\n    }\\n\\n    /**\\n     * @notice Next project ID to be created on this contract.\\n     * @return uint256 Next project ID.\\n     */\\n    function nextProjectId() external view returns (uint256) {\\n        return _nextProjectId;\\n    }\\n\\n    /**\\n     * @notice Returns token hash for token ID `_tokenId`. Returns null if hash\\n     * has not been set.\\n     * @param _tokenId Token ID to be queried.\\n     * @return bytes32 Token hash.\\n     * @dev token hash is the keccak256 hash of the stored hash seed\\n     */\\n    function tokenIdToHash(uint256 _tokenId) external view returns (bytes32) {\\n        bytes12 _hashSeed = _ownersAndHashSeeds[_tokenId].hashSeed;\\n        if (_hashSeed == 0) {\\n            return 0;\\n        }\\n        return keccak256(abi.encode(_hashSeed));\\n    }\\n\\n    /**\\n     * @notice Returns token hash **seed** for token ID `_tokenId`. Returns\\n     * null if hash seed has not been set. The hash seed id the bytes12 value\\n     * which is hashed to produce the token hash.\\n     * @param _tokenId Token ID to be queried.\\n     * @return bytes12 Token hash seed.\\n     * @dev token hash seed is keccak256 hashed to give the token hash\\n     */\\n    function tokenIdToHashSeed(\\n        uint256 _tokenId\\n    ) external view returns (bytes12) {\\n        return _ownersAndHashSeeds[_tokenId].hashSeed;\\n    }\\n\\n    /**\\n     * @notice View function returning the render provider portion of\\n     * primary sales, in percent.\\n     * @return uint256 The render provider portion of primary sales,\\n     * in percent.\\n     */\\n    function renderProviderPrimarySalesPercentage()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _renderProviderPrimarySalesPercentage;\\n    }\\n\\n    /**\\n     * @notice View function returning the platform provider portion of\\n     * primary sales, in percent.\\n     * @return uint256 The platform provider portion of primary sales,\\n     * in percent.\\n     */\\n    function platformProviderPrimarySalesPercentage()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _platformProviderPrimarySalesPercentage;\\n    }\\n\\n    /**\\n     * @notice View function returning Artist's address for project\\n     * `_projectId`.\\n     * @param _projectId Project ID to be queried.\\n     * @return address Artist's address.\\n     */\\n    function projectIdToArtistAddress(\\n        uint256 _projectId\\n    ) external view returns (address payable) {\\n        return projectIdToFinancials[_projectId].artistAddress;\\n    }\\n\\n    /**\\n     * @notice View function returning Artist's secondary market royalty\\n     * percentage for project `_projectId`.\\n     * This does not include render/platform providers portions of secondary\\n     * market royalties.\\n     * @param _projectId Project ID to be queried.\\n     * @return uint256 Artist's secondary market royalty percentage.\\n     */\\n    function projectIdToSecondaryMarketRoyaltyPercentage(\\n        uint256 _projectId\\n    ) external view returns (uint256) {\\n        return\\n            projectIdToFinancials[_projectId].secondaryMarketRoyaltyPercentage;\\n    }\\n\\n    /**\\n     * @notice View function returning Artist's additional payee address for\\n     * primary sales, for project `_projectId`.\\n     * @param _projectId Project ID to be queried.\\n     * @return address Artist's additional payee address for primary sales.\\n     */\\n    function projectIdToAdditionalPayeePrimarySales(\\n        uint256 _projectId\\n    ) external view returns (address payable) {\\n        return projectIdToFinancials[_projectId].additionalPayeePrimarySales;\\n    }\\n\\n    /**\\n     * @notice View function returning Artist's additional payee primary sales\\n     * percentage, for project `_projectId`.\\n     * @param _projectId Project ID to be queried.\\n     * @return uint256 Artist's additional payee primary sales percentage.\\n     */\\n    function projectIdToAdditionalPayeePrimarySalesPercentage(\\n        uint256 _projectId\\n    ) external view returns (uint256) {\\n        return\\n            projectIdToFinancials[_projectId]\\n                .additionalPayeePrimarySalesPercentage;\\n    }\\n\\n    /**\\n     * @notice View function returning Artist's additional payee address for\\n     * secondary sales, for project `_projectId`.\\n     * @param _projectId Project ID to be queried.\\n     * @return address payable Artist's additional payee address for secondary\\n     * sales.\\n     */\\n    function projectIdToAdditionalPayeeSecondarySales(\\n        uint256 _projectId\\n    ) external view returns (address payable) {\\n        return projectIdToFinancials[_projectId].additionalPayeeSecondarySales;\\n    }\\n\\n    /**\\n     * @notice View function returning Artist's additional payee secondary\\n     * sales percentage, for project `_projectId`.\\n     * @param _projectId Project ID to be queried.\\n     * @return uint256 Artist's additional payee secondary sales percentage.\\n     */\\n    function projectIdToAdditionalPayeeSecondarySalesPercentage(\\n        uint256 _projectId\\n    ) external view returns (uint256) {\\n        return\\n            projectIdToFinancials[_projectId]\\n                .additionalPayeeSecondarySalesPercentage;\\n    }\\n\\n    /**\\n     * @notice Returns project details for project `_projectId`.\\n     * @param _projectId Project to be queried.\\n     * @return projectName Name of project\\n     * @return artist Artist of project\\n     * @return description Project description\\n     * @return website Project website\\n     * @return license Project license\\n     * @dev this function was named projectDetails prior to V3 core contract.\\n     */\\n    function projectDetails(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory projectName,\\n            string memory artist,\\n            string memory description,\\n            string memory website,\\n            string memory license\\n        )\\n    {\\n        Project storage project = projects[_projectId];\\n        projectName = project.name;\\n        artist = project.artist;\\n        description = project.description;\\n        website = project.website;\\n        license = project.license;\\n    }\\n\\n    /**\\n     * @notice Returns project state data for project `_projectId`.\\n     * @param _projectId Project to be queried\\n     * @return invocations Current number of invocations\\n     * @return maxInvocations Maximum allowed invocations\\n     * @return active Boolean representing if project is currently active\\n     * @return paused Boolean representing if project is paused\\n     * @return completedTimestamp zero if project not complete, otherwise\\n     * timestamp of project completion.\\n     * @return locked Boolean representing if project is locked\\n     * @dev price and currency info are located on minter contracts\\n     */\\n    function projectStateData(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 invocations,\\n            uint256 maxInvocations,\\n            bool active,\\n            bool paused,\\n            uint256 completedTimestamp,\\n            bool locked\\n        )\\n    {\\n        Project storage project = projects[_projectId];\\n        invocations = project.invocations;\\n        maxInvocations = project.maxInvocations;\\n        active = project.active;\\n        paused = project.paused;\\n        completedTimestamp = project.completedTimestamp;\\n        locked = !_projectUnlocked(_projectId);\\n    }\\n\\n    /**\\n     * @notice Returns artist payment information for project `_projectId`.\\n     * @param _projectId Project to be queried\\n     * @return artistAddress Project Artist's address\\n     * @return additionalPayeePrimarySales Additional payee address for primary\\n     * sales\\n     * @return additionalPayeePrimarySalesPercentage Percentage of artist revenue\\n     * to be sent to the additional payee address for primary sales\\n     * @return additionalPayeeSecondarySales Additional payee address for secondary\\n     * sales royalties\\n     * @return additionalPayeeSecondarySalesPercentage Percentage of artist revenue\\n     * to be sent to the additional payee address for secondary sales royalties\\n     * @return secondaryMarketRoyaltyPercentage Royalty percentage to be sent to\\n     * combination of artist and additional payee. This does not include the\\n     * platform's percentage of secondary sales royalties, which is defined as\\n     * the sum of `renderProviderSecondarySalesBPS`\\n     * and `platformProviderSecondarySalesBPS`.\\n     */\\n    function projectArtistPaymentInfo(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        returns (\\n            address artistAddress,\\n            address additionalPayeePrimarySales,\\n            uint256 additionalPayeePrimarySalesPercentage,\\n            address additionalPayeeSecondarySales,\\n            uint256 additionalPayeeSecondarySalesPercentage,\\n            uint256 secondaryMarketRoyaltyPercentage\\n        )\\n    {\\n        ProjectFinance storage projectFinance = projectIdToFinancials[\\n            _projectId\\n        ];\\n        artistAddress = projectFinance.artistAddress;\\n        additionalPayeePrimarySales = projectFinance\\n            .additionalPayeePrimarySales;\\n        additionalPayeePrimarySalesPercentage = projectFinance\\n            .additionalPayeePrimarySalesPercentage;\\n        additionalPayeeSecondarySales = projectFinance\\n            .additionalPayeeSecondarySales;\\n        additionalPayeeSecondarySalesPercentage = projectFinance\\n            .additionalPayeeSecondarySalesPercentage;\\n        secondaryMarketRoyaltyPercentage = projectFinance\\n            .secondaryMarketRoyaltyPercentage;\\n    }\\n\\n    /**\\n     * @notice Returns script information for project `_projectId`.\\n     * @param _projectId Project to be queried.\\n     * @return scriptTypeAndVersion Project's script type and version\\n     * (e.g. \\\"p5js(atSymbol)1.0.0\\\")\\n     * @return aspectRatio Aspect ratio of project (e.g. \\\"1\\\" for square,\\n     * \\\"1.77777778\\\" for 16:9, etc.)\\n     * @return scriptCount Count of scripts for project\\n     */\\n    function projectScriptDetails(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        override(IGenArt721CoreContractV3_Base, IDependencyRegistryCompatibleV0)\\n        returns (\\n            string memory scriptTypeAndVersion,\\n            string memory aspectRatio,\\n            uint256 scriptCount\\n        )\\n    {\\n        Project storage project = projects[_projectId];\\n        scriptTypeAndVersion = project.scriptTypeAndVersion.toString();\\n        aspectRatio = project.aspectRatio;\\n        scriptCount = project.scriptCount;\\n    }\\n\\n    /**\\n     * @notice Returns address with bytecode containing project script for\\n     * project `_projectId` at script index `_index`.\\n     */\\n    function projectScriptBytecodeAddressByIndex(\\n        uint256 _projectId,\\n        uint256 _index\\n    ) external view returns (address) {\\n        return projects[_projectId].scriptBytecodeAddresses[_index];\\n    }\\n\\n    /**\\n     * @notice Returns script for project `_projectId` at script index `_index`.\\n     * @param _projectId Project to be queried.\\n     * @param _index Index of script to be queried.\\n     */\\n    function projectScriptByIndex(\\n        uint256 _projectId,\\n        uint256 _index\\n    ) external view returns (string memory) {\\n        Project storage project = projects[_projectId];\\n        // If trying to access an out-of-index script, return the empty string.\\n        if (_index >= project.scriptCount) {\\n            return \\\"\\\";\\n        }\\n        return project.scriptBytecodeAddresses[_index].readFromBytecode();\\n    }\\n\\n    /**\\n     * @notice Returns base URI for project `_projectId`.\\n     * @param _projectId Project to be queried.\\n     * @return projectBaseURI Base URI for project\\n     */\\n    function projectURIInfo(\\n        uint256 _projectId\\n    ) external view returns (string memory projectBaseURI) {\\n        projectBaseURI = projects[_projectId].projectBaseURI;\\n    }\\n\\n    /**\\n     * @notice Backwards-compatible (pre-V3) function returning if `_minter` is\\n     * minterContract.\\n     * @param _minter Address to be queried.\\n     * @return bool Boolean representing if `_minter` is minterContract.\\n     */\\n    function isMintWhitelisted(address _minter) external view returns (bool) {\\n        return (minterContract == _minter);\\n    }\\n\\n    /**\\n     * @notice Gets qty of randomizers in history of all randomizers used by\\n     * this core contract. If a randomizer is switched away from then back to,\\n     * it will show up in the history twice.\\n     * @return randomizerHistoryCount Count of randomizers in history\\n     */\\n    function numHistoricalRandomizers() external view returns (uint256) {\\n        return _historicalRandomizerAddresses.length;\\n    }\\n\\n    /**\\n     * @notice Gets address of randomizer at index `_index` in history of all\\n     * randomizers used by this core contract. Index is zero-based.\\n     * @param _index Historical index of randomizer to be queried.\\n     * @return randomizerAddress Address of randomizer at index `_index`.\\n     * @dev If a randomizer is switched away from and then switched back to, it\\n     * will show up in the history twice.\\n     */\\n    function getHistoricalRandomizerAt(\\n        uint256 _index\\n    ) external view returns (address) {\\n        require(\\n            _index < _historicalRandomizerAddresses.length,\\n            \\\"Index out of bounds\\\"\\n        );\\n        return _historicalRandomizerAddresses[_index];\\n    }\\n\\n    /**\\n     * @notice Gets royalty Basis Points (BPS) for token ID `_tokenId`.\\n     * This conforms to the IManifold interface designated in the Royalty\\n     * Registry's RoyaltyEngineV1.sol contract.\\n     * ref: https://github.com/manifoldxyz/royalty-registry-solidity\\n     * @param _tokenId Token ID to be queried.\\n     * @return recipients Array of royalty payment recipients\\n     * @return bps Array of Basis Points (BPS) allocated to each recipient,\\n     * aligned by index.\\n     * @dev reverts if invalid _tokenId\\n     * @dev only returns recipients that have a non-zero BPS allocation\\n     */\\n    function getRoyalties(\\n        uint256 _tokenId\\n    )\\n        external\\n        view\\n        returns (address payable[] memory recipients, uint256[] memory bps)\\n    {\\n        _onlyValidTokenId(_tokenId);\\n        // initialize arrays with maximum potential length\\n        recipients = new address payable[](4);\\n        bps = new uint256[](4);\\n\\n        uint256 projectId = tokenIdToProjectId(_tokenId);\\n        ProjectFinance storage projectFinance = projectIdToFinancials[\\n            projectId\\n        ];\\n        // load values into memory\\n        uint256 royaltyPercentageForArtistAndAdditional = projectFinance\\n            .secondaryMarketRoyaltyPercentage;\\n        uint256 additionalPayeePercentage = projectFinance\\n            .additionalPayeeSecondarySalesPercentage;\\n        // calculate BPS = percentage * 100\\n        uint256 artistBPS = (ONE_HUNDRED - additionalPayeePercentage) *\\n            royaltyPercentageForArtistAndAdditional;\\n\\n        uint256 additionalBPS = additionalPayeePercentage *\\n            royaltyPercentageForArtistAndAdditional;\\n        uint256 renderProviderBPS = renderProviderSecondarySalesBPS;\\n        uint256 platformProviderBPS = platformProviderSecondarySalesBPS;\\n        // populate arrays\\n        uint256 payeeCount;\\n        if (artistBPS > 0) {\\n            recipients[payeeCount] = projectFinance.artistAddress;\\n            bps[payeeCount++] = artistBPS;\\n        }\\n        if (additionalBPS > 0) {\\n            recipients[payeeCount] = projectFinance\\n                .additionalPayeeSecondarySales;\\n            bps[payeeCount++] = additionalBPS;\\n        }\\n        if (renderProviderBPS > 0) {\\n            recipients[payeeCount] = renderProviderSecondarySalesAddress;\\n            bps[payeeCount++] = renderProviderBPS;\\n        }\\n        if (platformProviderBPS > 0) {\\n            recipients[payeeCount] = platformProviderSecondarySalesAddress;\\n            bps[payeeCount++] = platformProviderBPS;\\n        }\\n        // trim arrays if necessary\\n        if (4 > payeeCount) {\\n            assembly {\\n                let decrease := sub(4, payeeCount)\\n                mstore(recipients, sub(mload(recipients), decrease))\\n                mstore(bps, sub(mload(bps), decrease))\\n            }\\n        }\\n        return (recipients, bps);\\n    }\\n\\n    /**\\n     * @notice View function that returns appropriate revenue splits between\\n     * different render provider, platform provider, Artist, and Artist's\\n     * additional primary sales payee given a sale price of `_price` on\\n     * project `_projectId`.\\n     * This always returns four revenue amounts and four addresses, but if a\\n     * revenue is zero for either Artist or additional payee, the corresponding\\n     * address returned will also be null (for gas optimization).\\n     * Does not account for refund if user overpays for a token (minter should\\n     * handle a refund of the difference, if appropriate).\\n     * Some minters may have alternative methods of splitting payments, in\\n     * which case they should implement their own payment splitting logic.\\n     * @param _projectId Project ID to be queried.\\n     * @param _price Sale price of token.\\n     * @return renderProviderRevenue_ amount of revenue to be sent to the\\n     * render provider\\n     * @return renderProviderAddress_ address to send render provider revenue to\\n     * @return platformProviderRevenue_ amount of revenue to be sent to the\\n     * platform provider\\n     * @return platformProviderAddress_ address to send platform provider revenue to\\n     * @return artistRevenue_ amount of revenue to be sent to Artist\\n     * @return artistAddress_ address to send Artist revenue to. Will be null\\n     * if no revenue is due to artist (gas optimization).\\n     * @return additionalPayeePrimaryRevenue_ amount of revenue to be sent to\\n     * additional payee for primary sales\\n     * @return additionalPayeePrimaryAddress_ address to send Artist's\\n     * additional payee for primary sales revenue to. Will be null if no\\n     * revenue is due to additional payee for primary sales (gas optimization).\\n     * @dev this always returns four addresses and four revenues, but if the\\n     * revenue is zero, the corresponding address will be address(0). It is up\\n     * to the contract performing the revenue split to handle this\\n     * appropriately.\\n     */\\n    function getPrimaryRevenueSplits(\\n        uint256 _projectId,\\n        uint256 _price\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 renderProviderRevenue_,\\n            address payable renderProviderAddress_,\\n            uint256 platformProviderRevenue_,\\n            address payable platformProviderAddress_,\\n            uint256 artistRevenue_,\\n            address payable artistAddress_,\\n            uint256 additionalPayeePrimaryRevenue_,\\n            address payable additionalPayeePrimaryAddress_\\n        )\\n    {\\n        ProjectFinance storage projectFinance = projectIdToFinancials[\\n            _projectId\\n        ];\\n        // calculate revenues \u2013 this is a three-way split between the\\n        // render provider, the platform provider, and the artist, and\\n        // is safe to perform this given that in the case of loss of\\n        // precision Solidity will round down.\\n        uint256 projectFunds = _price;\\n        renderProviderRevenue_ =\\n            (_price * uint256(_renderProviderPrimarySalesPercentage)) /\\n            ONE_HUNDRED;\\n        // renderProviderRevenue_ percentage is always <=100, so guaranteed to never underflow\\n        projectFunds -= renderProviderRevenue_;\\n        platformProviderRevenue_ =\\n            (_price * uint256(_platformProviderPrimarySalesPercentage)) /\\n            ONE_HUNDRED;\\n        // platformProviderRevenue_ percentage is always <=100, so guaranteed to never underflow\\n        projectFunds -= platformProviderRevenue_;\\n        additionalPayeePrimaryRevenue_ =\\n            (projectFunds *\\n                projectFinance.additionalPayeePrimarySalesPercentage) /\\n            ONE_HUNDRED;\\n        // projectIdToAdditionalPayeePrimarySalesPercentage is always\\n        // <=100, so guaranteed to never underflow\\n        artistRevenue_ = projectFunds - additionalPayeePrimaryRevenue_;\\n        // set addresses from storage\\n        renderProviderAddress_ = renderProviderPrimarySalesAddress;\\n        platformProviderAddress_ = platformProviderPrimarySalesAddress;\\n        if (artistRevenue_ > 0) {\\n            artistAddress_ = projectFinance.artistAddress;\\n        }\\n        if (additionalPayeePrimaryRevenue_ > 0) {\\n            additionalPayeePrimaryAddress_ = projectFinance\\n                .additionalPayeePrimarySales;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns external asset dependency for project `_projectId` at index `_index`.\\n     * If the dependencyType is ONCHAIN, the `data` field will contain the extrated bytecode data and `cid`\\n     * will be an empty string. Conversly, for any other dependencyType, the `data` field will be an empty string\\n     * and the `bytecodeAddress` will point to the zero address.\\n     */\\n    function projectExternalAssetDependencyByIndex(\\n        uint256 _projectId,\\n        uint256 _index\\n    ) external view returns (ExternalAssetDependencyWithData memory) {\\n        ExternalAssetDependency storage _dependency = projects[_projectId]\\n            .externalAssetDependencies[_index];\\n        address _bytecodeAddress = _dependency.bytecodeAddress;\\n\\n        return\\n            ExternalAssetDependencyWithData({\\n                dependencyType: _dependency.dependencyType,\\n                cid: _dependency.cid,\\n                bytecodeAddress: _bytecodeAddress,\\n                data: (_dependency.dependencyType ==\\n                    ExternalAssetDependencyType.ONCHAIN)\\n                    ? _bytecodeAddress.readFromBytecode()\\n                    : \\\"\\\"\\n            });\\n    }\\n\\n    /**\\n     * @notice Returns external asset dependency count for project `_projectId` at index `_index`.\\n     */\\n    function projectExternalAssetDependencyCount(\\n        uint256 _projectId\\n    ) external view returns (uint256) {\\n        return uint256(projects[_projectId].externalAssetDependencyCount);\\n    }\\n\\n    /**\\n     * @notice Backwards-compatible (pre-V3) getter returning contract admin\\n     * @return address Address of contract admin (same as owner)\\n     */\\n    function admin() external view returns (address) {\\n        return owner();\\n    }\\n\\n    /**\\n     * @notice Gets the project ID for a given `_tokenId`.\\n     * @param _tokenId Token ID to be queried.\\n     * @return _projectId Project ID for given `_tokenId`.\\n     */\\n    function tokenIdToProjectId(\\n        uint256 _tokenId\\n    ) public pure returns (uint256 _projectId) {\\n        return _tokenId / ONE_MILLION;\\n    }\\n\\n    /**\\n     * @notice Convenience function that returns whether `_sender` is allowed\\n     * to call function with selector `_selector` on contract `_contract`, as\\n     * determined by this contract's current Admin ACL contract. Expected use\\n     * cases include minter contracts checking if caller is allowed to call\\n     * admin-gated functions on minter contracts.\\n     * @param _sender Address of the sender calling function with selector\\n     * `_selector` on contract `_contract`.\\n     * @param _contract Address of the contract being called by `_sender`.\\n     * @param _selector Function selector of the function being called by\\n     * `_sender`.\\n     * @return bool Whether `_sender` is allowed to call function with selector\\n     * `_selector` on contract `_contract`.\\n     * @dev assumes the Admin ACL contract is the owner of this contract, which\\n     * is expected to always be true.\\n     * @dev adminACLContract is expected to either be null address (if owner\\n     * has renounced ownership), or conform to IAdminACLV0 interface. Check for\\n     * null address first to avoid revert when admin has renounced ownership.\\n     */\\n    function adminACLAllowed(\\n        address _sender,\\n        address _contract,\\n        bytes4 _selector\\n    ) public returns (bool) {\\n        return\\n            owner() != address(0) &&\\n            adminACLContract.allowed(_sender, _contract, _selector);\\n    }\\n\\n    /**\\n     * @notice Returns contract owner. Set to deployer's address by default on\\n     * contract deployment.\\n     * @return address Address of contract owner.\\n     * @dev ref: https://docs.openzeppelin.com/contracts/4.x/api/access#Ownable\\n     * @dev owner role was called `admin` prior to V3 core contract\\n     */\\n    function owner()\\n        public\\n        view\\n        override(Ownable, IGenArt721CoreContractV3_Base)\\n        returns (address)\\n    {\\n        return Ownable.owner();\\n    }\\n\\n    /**\\n     * @notice Gets token URI for token ID `_tokenId`.\\n     * @param _tokenId Token ID to be queried.\\n     * @return string URI of token ID `_tokenId`.\\n     * @dev token URIs are the concatenation of the project base URI and the\\n     * token ID.\\n     */\\n    function tokenURI(\\n        uint256 _tokenId\\n    ) public view override returns (string memory) {\\n        _onlyValidTokenId(_tokenId);\\n        string memory _projectBaseURI = projects[tokenIdToProjectId(_tokenId)]\\n            .projectBaseURI;\\n        return string.concat(_projectBaseURI, toString(_tokenId));\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IManifold).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Forbids new projects from being created\\n     * @dev only performs operation and emits event if contract is not already\\n     * forbidding new projects.\\n     */\\n    function _forbidNewProjects() internal {\\n        if (!newProjectsForbidden) {\\n            newProjectsForbidden = true;\\n            emit PlatformUpdated(FIELD_NEW_PROJECTS_FORBIDDEN);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @param newOwner New owner.\\n     * @dev owner role was called `admin` prior to V3 core contract.\\n     * @dev Overrides and wraps OpenZeppelin's _transferOwnership function to\\n     * also update adminACLContract for improved introspection.\\n     */\\n    function _transferOwnership(address newOwner) internal override {\\n        Ownable._transferOwnership(newOwner);\\n        adminACLContract = IAdminACLV0(newOwner);\\n    }\\n\\n    /**\\n     * @notice Updates sales addresses for the platform and render providers to\\n     * the input parameters.\\n     * @param _renderProviderPrimarySalesAddress Address of new primary sales\\n     * payment address.\\n     * @param _renderProviderSecondarySalesAddress Address of new secondary sales\\n     * payment address.\\n     * @param _platformProviderPrimarySalesAddress Address of new primary sales\\n     * payment address.\\n     * @param _platformProviderSecondarySalesAddress Address of new secondary sales\\n     * payment address.\\n     * @dev Note that this method does not check that the input address is\\n     * not `address(0)`, as it is expected that callers of this method should\\n     * perform input validation where applicable.\\n     */\\n    function _updateProviderSalesAddresses(\\n        address _renderProviderPrimarySalesAddress,\\n        address _renderProviderSecondarySalesAddress,\\n        address _platformProviderPrimarySalesAddress,\\n        address _platformProviderSecondarySalesAddress\\n    ) internal {\\n        platformProviderPrimarySalesAddress = payable(\\n            _platformProviderPrimarySalesAddress\\n        );\\n        platformProviderSecondarySalesAddress = payable(\\n            _platformProviderSecondarySalesAddress\\n        );\\n        renderProviderPrimarySalesAddress = payable(\\n            _renderProviderPrimarySalesAddress\\n        );\\n        renderProviderSecondarySalesAddress = payable(\\n            _renderProviderSecondarySalesAddress\\n        );\\n        emit PlatformUpdated(FIELD_PROVIDER_SALES_ADDRESSES);\\n    }\\n\\n    /**\\n     * @notice Updates randomizer address to `_randomizerAddress`.\\n     * @param _randomizerAddress New randomizer address.\\n     * @dev Note that this method does not check that the input address is\\n     * not `address(0)`, as it is expected that callers of this method should\\n     * perform input validation where applicable.\\n     */\\n    function _updateRandomizerAddress(address _randomizerAddress) internal {\\n        randomizerContract = IRandomizerV2(_randomizerAddress);\\n        // populate historical randomizer array\\n        _historicalRandomizerAddresses.push(_randomizerAddress);\\n        emit PlatformUpdated(FIELD_RANDOMIZER_ADDRESS);\\n    }\\n\\n    /**\\n     * @notice Updates default base URI to `_defaultBaseURI`.\\n     * When new projects are added, their `projectBaseURI` is automatically\\n     * initialized to `_defaultBaseURI`.\\n     * @param _defaultBaseURI New default base URI.\\n     * @dev Note that this method does not check that the input string is not\\n     * the empty string, as it is expected that callers of this method should\\n     * perform input validation where applicable.\\n     */\\n    function _updateDefaultBaseURI(string memory _defaultBaseURI) internal {\\n        defaultBaseURI = _defaultBaseURI;\\n        emit PlatformUpdated(FIELD_DEFAULT_BASE_URI);\\n    }\\n\\n    /**\\n     * @notice Internal function to complete a project.\\n     * @param _projectId Project ID to be completed.\\n     */\\n    function _completeProject(uint256 _projectId) internal {\\n        projects[_projectId].completedTimestamp = uint64(block.timestamp);\\n        emit ProjectUpdated(_projectId, FIELD_PROJECT_COMPLETED);\\n    }\\n\\n    /**\\n     * @notice Internal function that returns whether a project is unlocked.\\n     * Projects automatically lock four weeks after they are completed.\\n     * Projects are considered completed when they have been invoked the\\n     * maximum number of times.\\n     * @param _projectId Project ID to be queried.\\n     * @return bool true if project is unlocked, false otherwise.\\n     * @dev This also enforces that the `_projectId` passed in is valid.\\n     */\\n    function _projectUnlocked(uint256 _projectId) internal view returns (bool) {\\n        _onlyValidProjectId(_projectId);\\n        uint256 projectCompletedTimestamp = projects[_projectId]\\n            .completedTimestamp;\\n        bool projectOpen = projectCompletedTimestamp == 0;\\n        return\\n            projectOpen ||\\n            (block.timestamp - projectCompletedTimestamp <\\n                FOUR_WEEKS_IN_SECONDS);\\n    }\\n\\n    // strings library from OpenZeppelin, modified for no constants\\n\\n    bytes16 private _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal view returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal view returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ethier_0-55-0/contracts/erc721/BaseTokenURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2023 the ethier authors (github.com/divergencetech/ethier)\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {AccessControlEnumerable} from \\\"../utils/AccessControlEnumerable.sol\\\";\\nimport {ERC721A, ERC721ACommon} from \\\"./ERC721ACommon.sol\\\";\\n\\n/**\\n * @notice ERC721 extension that implements a commonly used _baseURI() function\\n * to return an URL prefix that can be set by the contract steerer.\\n */\\ncontract BaseTokenURI is AccessControlEnumerable {\\n    /**\\n     * @notice Base token URI used as a prefix by tokenURI().\\n     */\\n    string private _baseTokenURI;\\n\\n    constructor(string memory baseTokenURI_) {\\n        _setBaseTokenURI(baseTokenURI_);\\n    }\\n\\n    /**\\n     * @notice Sets the base token URI prefix.\\n     * @dev Only callable by the contract steerer.\\n     */\\n    function setBaseTokenURI(string memory baseTokenURI_)\\n        public\\n        onlyRole(DEFAULT_STEERING_ROLE)\\n    {\\n        _setBaseTokenURI(baseTokenURI_);\\n    }\\n\\n    /**\\n     * @notice Sets the base token URI prefix.\\n     */\\n    function _setBaseTokenURI(string memory baseTokenURI_) internal virtual {\\n        _baseTokenURI = baseTokenURI_;\\n    }\\n\\n    /**\\n     * @notice Returns the `baseTokenURI`.\\n     */\\n    function baseTokenURI() public view virtual returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /**\\n     * @notice Returns the base token URI * without any additional characters (e.g. a slash).\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n}\\n\\n/**\\n * @notice ERC721ACommon extension that adds BaseTokenURI.\\n */\\nabstract contract ERC721ACommonBaseTokenURI is ERC721ACommon, BaseTokenURI {\\n    /**\\n     * @notice Overrides supportsInterface as required by inheritance.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721ACommon, AccessControlEnumerable)\\n        returns (bool)\\n    {\\n        return\\n            ERC721ACommon.supportsInterface(interfaceId) ||\\n            AccessControlEnumerable.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Inheritance resolution.\\n     */\\n    function _baseURI()\\n        internal\\n        view\\n        virtual\\n        override(ERC721A, BaseTokenURI)\\n        returns (string memory)\\n    {\\n        return BaseTokenURI._baseURI();\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ethier_0-55-0/contracts/erc721/OperatorFilterOS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2023 the ethier authors (github.com/divergencetech/ethier)\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {DefaultOperatorFilterer} from \\\"operator-filter-registry/src/DefaultOperatorFilterer.sol\\\";\\nimport {ERC721A, ERC721ACommon} from \\\"./ERC721ACommon.sol\\\";\\n\\n/**\\n * @notice ERC721ACommon extension that adds Opensea's operator filtering.\\n */\\nabstract contract OperatorFilterOS is ERC721ACommon, DefaultOperatorFilterer {\\n    using Address for address;\\n\\n    /**\\n     * @notice Calling the operator filter registry with given calldata.\\n     * @dev The registry contract did not foresee role-based contract access\\n     * control -- only the contract itself, or its (EIP-173) owner is allowed to\\n     * change subscription settings. To work around this, we enforce\\n     * authorisation here and forward arbitrary calldata to the registry.\\n     * Use with care!\\n     */\\n    function callOperatorFilterRegistry(bytes calldata cdata)\\n        external\\n        onlyRole(DEFAULT_STEERING_ROLE)\\n        returns (bytes memory)\\n    {\\n        return address(OPERATOR_FILTER_REGISTRY).functionCall(cdata);\\n    }\\n\\n    // =========================================================================\\n    //                           Operator filtering\\n    // =========================================================================\\n\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n        onlyAllowedOperatorApproval(operator)\\n    {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    function approve(address operator, uint256 tokenId)\\n        public\\n        payable\\n        virtual\\n        override\\n        onlyAllowedOperatorApproval(operator)\\n    {\\n        super.approve(operator, tokenId);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override onlyAllowedOperator(from) {\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public payable virtual override onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, tokenId, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/proof/proof-seller/contracts/artblocks/src/TokenIDMapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2023 Proof Holdings Inc.\\npragma solidity ^0.8.0;\\n\\nuint256 constant AB_ENGINE_PROJECT_MULTIPLIER = 1_000_000;\\n\\nfunction artblocksTokenID(uint256 projectId, uint256 edition) pure returns (uint256) {\\n    return (projectId * AB_ENGINE_PROJECT_MULTIPLIER) + edition;\\n}\\n\"\r\n    },\r\n    \"/home/dave/proof/proof-seller/contracts/artblocks/src/IGenArt721CoreContractV3_Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2023 Proof Holdings Inc.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @notice IGenArt721CoreContractV3_Base minting interface\\n */\\ninterface IGenArt721CoreContractV3_Mintable {\\n    function mint_Ecf(address to, uint256 projectId, address sender) external returns (uint256 _tokenId);\\n}\\n\"\r\n    },\r\n    \"/home/dave/proof/proof-seller/contracts/sellers/src/sellable/SellableERC721ACommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2023 PROOF Holdings Inc\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ERC721ACommon} from \\\"ethier/erc721/ERC721ACommon.sol\\\";\\nimport {AccessControlEnumerable, BaseSellable} from \\\"./BaseSellable.sol\\\";\\n\\n/**\\n * @notice Base contract for sellable ERC721ACommon tokens.\\n */\\nabstract contract SellableERC721ACommon is BaseSellable, ERC721ACommon {\\n    /**\\n     * @inheritdoc BaseSellable\\n     */\\n    function _handleSale(address to, uint64 num, bytes calldata) internal virtual override {\\n        _mint(to, num);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721ACommon, AccessControlEnumerable)\\n        returns (bool)\\n    {\\n        return ERC721ACommon.supportsInterface(interfaceId) || AccessControlEnumerable.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/exhibition/ProjectsConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2023 Proof Holdings Inc.\\npragma solidity >=0.8.17;\\n\\n/**\\n * @notice Diamond Exhibition - Projects configuration.\\n * @author David Huber (@cxkoda)\\n * @custom:reviewer Arran Schlosberg (@divergencearran)\\n */\\ncontract ProjectsConfig {\\n    /**\\n     * @notice The number of longform projects.\\n     */\\n    uint8 internal constant _NUM_LONGFORM_PROJECTS = 11;\\n\\n    /**\\n     * @notice The number of pre-curated projects.\\n     */\\n    uint8 internal constant _NUM_CURATED_PROJECTS = 10;\\n\\n    /**\\n     * @notice The total number of projects.\\n     */\\n    uint8 public constant NUM_PROJECTS = _NUM_LONGFORM_PROJECTS + _NUM_CURATED_PROJECTS;\\n\\n    /**\\n     * @notice Returns the number of projects than can be minted per project.\\n     */\\n    function _maxNumPerProject() internal pure virtual returns (uint256[NUM_PROJECTS] memory sizes) {\\n        return [\\n            // Longform\\n            uint256(600), // Impossible Distance\\n            600, // cathedral study\\n            600, // Deja Vu\\n            800, // WaveShapes\\n            1000, // Ephemeral Tides\\n            600, // StackSlash\\n            450, // Viridaria\\n            1000, // Windwoven\\n            256, // Memory Loss\\n            1000, // The Collector's Room\\n            1000, // Extra\u00f1ezas\\n            // Pre-curated\\n            100, // Everydays: Group Effort\\n            100, // Kid Heart\\n            100, // BEHEADED (SELF PORTRAIT)\\n            1127, // End Transmissions\\n            77, // DES CHOSES\u2122\\n            100, // A Wintry Night in Chinatown\\n            100, // Penthouse\\n            200, // Hands of Umbra\\n            100, // Solitaire\\n            100 // Remnants of a Distant Dream\\n        ];\\n    }\\n\\n    /**\\n     * @notice Returns the number of projects than can be minted per project.\\n     */\\n    function maxNumPerProject() external pure returns (uint256[NUM_PROJECTS] memory) {\\n        return _maxNumPerProject();\\n    }\\n\\n    // =========================================================================\\n    //                          Project Types\\n    // =========================================================================\\n\\n    /**\\n     * @notice The different types of projects.\\n     */\\n    enum ProjectType {\\n        Longform,\\n        Curated\\n    }\\n\\n    /**\\n     * @notice Returns the project type for a given project ID.\\n     */\\n    function projectType(uint8 projectId) public pure returns (ProjectType) {\\n        return projectId < _NUM_LONGFORM_PROJECTS ? ProjectType.Longform : ProjectType.Curated;\\n    }\\n\\n    /**\\n     * @notice Returns true iff the project is a longform project.\\n     */\\n    function _isLongformProject(uint8 projectId) internal pure virtual returns (bool) {\\n        return projectType(projectId) == ProjectType.Longform;\\n    }\\n\\n    // =========================================================================\\n    //                          Artblocks\\n    // =========================================================================\\n\\n    /**\\n     * @notice Returns the ArtBlocks engine project IDs for the longform projects.\\n     */\\n    function _artblocksProjectIds() internal pure virtual returns (uint8[_NUM_LONGFORM_PROJECTS] memory) {\\n        return [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\\n    }\\n\\n    /**\\n     * @notice Returns the ArtBlocks engine project IDs for the longform projects.\\n     */\\n    function artblocksProjectIds() external pure returns (uint8[_NUM_LONGFORM_PROJECTS] memory) {\\n        return _artblocksProjectIds();\\n    }\\n\\n    /**\\n     * @notice Returns the ArtBlocks engine project ID for a given project ID.\\n     * @dev Reverts if the project is not long-form.\\n     */\\n    function _artblocksProjectId(uint8 projectId) internal pure returns (uint256) {\\n        assert(_isLongformProject(projectId));\\n        return _artblocksProjectIds()[projectId];\\n    }\\n}\\n\"\r\n    },\r\n    \"src/exhibition/TokenInfoManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2023 Proof Holdings Inc.\\npragma solidity >=0.8.17;\\n\\n/**\\n * @notice Token information module for Diamond Exhibition.\\n * @author David Huber (@cxkoda)\\n * @custom:reviewer Arran Schlosberg (@divergencearran)\\n */\\ncontract TokenInfoManager {\\n    /**\\n     * @notice Encodes token information.\\n     * @param projectId the ID of the project associated with the token.\\n     * @param edition the edition of the token within the given project.\\n     */\\n    struct TokenInfo {\\n        uint8 projectId;\\n        uint16 edition;\\n    }\\n\\n    /**\\n     * @notice Max numbers of tokens that this contract can store.\\n     * @dev This constant is intentionally very large so we never have to worry about it.\\n     */\\n    uint256 internal constant _NUM_MAX_TOKEN_INFO = (1 << 32);\\n\\n    /**\\n     * @notice Stores token information.\\n     */\\n    TokenInfo[_NUM_MAX_TOKEN_INFO] private _infos;\\n\\n    /**\\n     * @notice Returns the token information for the given token IDs.\\n     * @dev Intended for off-chain use only.\\n     */\\n    function tokenInfos(uint256[] calldata tokenIds) external view returns (TokenInfo[] memory) {\\n        TokenInfo[] memory infos = new TokenInfo[](tokenIds.length);\\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\\n            infos[i] = _tokenInfo(tokenIds[i]);\\n        }\\n        return infos;\\n    }\\n\\n    /**\\n     * @notice Returns the token information for the given token ID.\\n     */\\n    function _tokenInfo(uint256 tokenId) internal view returns (TokenInfo memory) {\\n        return _infos[tokenId];\\n    }\\n\\n    /**\\n     * @notice Sets the token information for the given token ID.\\n     */\\n    function _setTokenInfo(uint256 tokenId, uint8 projectId, uint16 edition) internal {\\n        _infos[tokenId] = TokenInfo({projectId: projectId, edition: edition});\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/proof/proof-seller/contracts/sellers/src/base/Seller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2023 PROOF Holdings Inc\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ReentrancyGuard} from \\\"openzeppelin-contracts/security/ReentrancyGuard.sol\\\";\\nimport {PurchaseExecuter} from \\\"../interfaces/PurchaseExecuter.sol\\\";\\n\\n/**\\n * @notice Abstract base contract for all `Seller`s.\\n * @dev The intention of this contract is to provide an extensible base for various kinds of Seller modules that can be\\n * flexibly composed to build more complex sellers - allowing effective code reuse.\\n * Derived contracts are intended to implement their logic by overriding and extending the `_checkAndModifyPurchase` and\\n * `_beforePurchase` hooks (calling the parent implementation(s) to compose logic). The former is intended to perform\\n * manipulations and checks of the input data; the latter to update the internal state of the module.\\n * Final sellers will compose these modules and expose an addition external purchase function for buyers.\\n */\\n\\nabstract contract Seller is PurchaseExecuter, ReentrancyGuard {\\n    uint256 internal constant _UNDEFINED_COST = type(uint256).max;\\n\\n    /**\\n     * @notice Internal function handling a given purchase, performing checks and input manipulations depending on the\\n     * logic in the hooks.\\n     * @param to The receiver of the purchase\\n     * @param num Number of requested purchases\\n     * @param externalTotalCost Total cost of the purchase\\n     * @dev This function is intended to be wrapped in an external method for final sellers. Since we cannot foresee\\n     * what logic will be implemented in the hooks, we added a reentrancy guard for safety.\\n     */\\n    function _purchase(address to, uint64 num, uint256 externalTotalCost, bytes memory data)\\n        internal\\n        virtual\\n        nonReentrant\\n    {\\n        uint256 totalCost;\\n        (to, num, totalCost) = _checkAndModifyPurchase(to, num, externalTotalCost, data);\\n        _beforePurchase(to, num, totalCost, data);\\n        _executePurchase(to, num, totalCost, data);\\n    }\\n\\n    // =================================================================================================================\\n    //                           Hooks\\n    // =================================================================================================================\\n\\n    /**\\n     * @notice Hook that is called before handling a purchase (even before `_beforePurchase`)\\n     * @dev The intent of this hook is to manipulate the input data and perform  checks before actually handling the\\n     * purchase.\\n     * @param to The receiver of the purchase\\n     * @param num Number of requested purchases\\n     * @param totalCost Total cost of the purchase\\n     * @dev This function MUST return sensible values, since these will be used to perfom the purchase.\\n     */\\n    function _checkAndModifyPurchase(address to, uint64 num, uint256 totalCost, bytes memory)\\n        internal\\n        view\\n        virtual\\n        returns (address, uint64, uint256)\\n    {\\n        return (to, num, totalCost);\\n    }\\n\\n    /**\\n     * @notice Hook that is called before handling a purchase.\\n     * @dev The intent of this hook is to update the internal state of the seller (module) if necessary.\\n     * It is critical that the updates happen here and not in `_checkAndModifyPurchase` because only after calling that\\n     * function the purchase parameters can be considered fixed.\\n     */\\n    function _beforePurchase(address to, uint64 num, uint256 totalCost, bytes memory data) internal virtual {\\n        // solhint-disable-line no-empty-blocks\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/proof/proof-seller/contracts/sellers/src/interfaces/ISellable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2023 PROOF Holdings Inc\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @notice Basic interface for a contract providing sellable content.\\n */\\ninterface ISellable {\\n    /**\\n     * @notice Handles the sale of sellable content.\\n     * @dev This is usually only callable by Sellers.\\n     */\\n    function handleSale(address to, uint64 num, bytes calldata data) external payable;\\n}\\n\"\r\n    },\r\n    \"/home/dave/proof/proof-seller/contracts/sellers/src/interfaces/PurchaseExecuter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2023 PROOF Holdings Inc\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @notice Interface to execute purchases in `Seller`s.\\n * @dev This executes the final purchase. This can be anything from minting ERC721 tokens to transfering funds, etc.\\n */\\nabstract contract PurchaseExecuter {\\n    function _executePurchase(address to, uint64 num, uint256 cost, bytes memory data) internal virtual;\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/artblocks-contracts_fa1dc466/contracts/interfaces/0.8.x/IRandomizerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Creatd By: Art Blocks Inc.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IGenArt721CoreContractV3_Base.sol\\\";\\n\\ninterface IRandomizerV2 {\\n    // The core contract that may interact with this randomizer contract.\\n    function genArt721Core()\\n        external\\n        view\\n        returns (IGenArt721CoreContractV3_Base);\\n\\n    // When a core contract calls this, it can be assured that the randomizer\\n    // will set a bytes32 hash for tokenId `_tokenId` on the core contract.\\n    function assignTokenHash(uint256 _tokenId) external;\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/artblocks-contracts_fa1dc466/contracts/interfaces/0.8.x/IAdminACLV0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAdminACLV0 {\\n    /**\\n     * @notice Token ID `_tokenId` minted to `_to`.\\n     * @param previousSuperAdmin The previous superAdmin address.\\n     * @param newSuperAdmin The new superAdmin address.\\n     * @param genArt721CoreAddressesToUpdate Array of genArt721Core\\n     * addresses to update to the new superAdmin, for indexing purposes only.\\n     */\\n    event SuperAdminTransferred(\\n        address indexed previousSuperAdmin,\\n        address indexed newSuperAdmin,\\n        address[] genArt721CoreAddressesToUpdate\\n    );\\n\\n    /// Type of the Admin ACL contract, e.g. \\\"AdminACLV0\\\"\\n    function AdminACLType() external view returns (string memory);\\n\\n    /// super admin address\\n    function superAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Calls transferOwnership on other contract from this contract.\\n     * This is useful for updating to a new AdminACL contract.\\n     * @dev this function should be gated to only superAdmin-like addresses.\\n     */\\n    function transferOwnershipOn(\\n        address _contract,\\n        address _newAdminACL\\n    ) external;\\n\\n    /**\\n     * @notice Calls renounceOwnership on other contract from this contract.\\n     * @dev this function should be gated to only superAdmin-like addresses.\\n     */\\n    function renounceOwnershipOn(address _contract) external;\\n\\n    /**\\n     * @notice Checks if sender `_sender` is allowed to call function with selector\\n     * `_selector` on contract `_contract`.\\n     */\\n    function allowed(\\n        address _sender,\\n        address _contract,\\n        bytes4 _selector\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/artblocks-contracts_fa1dc466/contracts/interfaces/0.8.x/IEngineRegistryV0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\npragma solidity ^0.8.17;\\n\\ninterface IEngineRegistryV0 {\\n    /// ADDRESS\\n    /**\\n     * @notice contract has been registered as a contract that is powered by the Art Blocks Engine.\\n     */\\n    event ContractRegistered(\\n        address indexed _contractAddress,\\n        bytes32 _coreVersion,\\n        bytes32 _coreType\\n    );\\n\\n    /// ADDRESS\\n    /**\\n     * @notice contract has been unregistered as a contract that is powered by the Art Blocks Engine.\\n     */\\n    event ContractUnregistered(address indexed _contractAddress);\\n\\n    /**\\n     * @notice Emits a `ContractRegistered` event with the provided information.\\n     * @dev this function should be gated to only deployer addresses.\\n     */\\n    function registerContract(\\n        address _contractAddress,\\n        bytes32 _coreVersion,\\n        bytes32 _coreType\\n    ) external;\\n\\n    /**\\n     * @notice Emits a `ContractUnregistered` event with the provided information, validating that the provided\\n     *         address was indeed previously registered.\\n     * @dev this function should be gated to only deployer addresses.\\n     */\\n    function unregisterContract(address _contractAddress) external;\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/artblocks-contracts_fa1dc466/contracts/interfaces/0.8.x/IGenArt721CoreContractV3_Engine_Flex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAdminACLV0.sol\\\";\\nimport \\\"./IGenArt721CoreContractV3_Engine.sol\\\";\\n\\n/**\\n * @title This interface is intended to house interface items that are common\\n * across all GenArt721CoreContractV3 Engine Flex and derivative implementations.\\n * @author Art Blocks Inc.\\n */\\ninterface IGenArt721CoreContractV3_Engine_Flex is\\n    IGenArt721CoreContractV3_Engine\\n{\\n    /**\\n     * @notice When an external asset dependency is updated or added, this event is emitted.\\n     * @param _projectId The project ID of the project that was updated.\\n     * @param _index The index of the external asset dependency that was updated.\\n     * @param _cid The content ID of the external asset dependency. This is an empty string\\n     * if the dependency type is ONCHAIN.\\n     * @param _dependencyType The type of the external asset dependency.\\n     * @param _externalAssetDependencyCount The number of external asset dependencies.\\n     */\\n    event ExternalAssetDependencyUpdated(\\n        uint256 indexed _projectId,\\n        uint256 indexed _index,\\n        string _cid,\\n        ExternalAssetDependencyType _dependencyType,\\n        uint24 _externalAssetDependencyCount\\n    );\\n\\n    /**\\n     * @notice The project id `_projectId` has had an external asset dependency removed at index `_index`.\\n     */\\n    event ExternalAssetDependencyRemoved(\\n        uint256 indexed _projectId,\\n        uint256 indexed _index\\n    );\\n\\n    /**\\n     * @notice The preferred gateway for dependency type `_dependencyType` has been updated to `_gatewayAddress`.\\n     */\\n    event GatewayUpdated(\\n        ExternalAssetDependencyType indexed _dependencyType,\\n        string _gatewayAddress\\n    );\\n\\n    /**\\n     * @notice The project id `_projectId` has had all external asset dependencies locked.\\n     * @dev This is a one-way operation. Once locked, the external asset dependencies cannot be updated.\\n     */\\n    event ProjectExternalAssetDependenciesLocked(uint256 indexed _projectId);\\n\\n    /**\\n     * @notice An external asset dependency type. Can be one of IPFS, ARWEAVE, or ONCHAIN.\\n     */\\n    enum ExternalAssetDependencyType {\\n        IPFS,\\n        ARWEAVE,\\n        ONCHAIN\\n    }\\n\\n    /**\\n     * @notice An external asset dependency. This is a struct that contains the CID of the dependency,\\n     * the type of the dependency, and the address of the bytecode for this dependency.\\n     */\\n    struct ExternalAssetDependency {\\n        string cid;\\n        ExternalAssetDependencyType dependencyType;\\n        address bytecodeAddress;\\n    }\\n\\n    /**\\n     * @notice An external asset dependency with data. This is a convenience struct that contains the CID of the dependency,\\n     * the type of the dependency, the address of the bytecode for this dependency, and the data retrieved from this bytecode address.\\n     */\\n    struct ExternalAssetDependencyWithData {\\n        string cid;\\n        ExternalAssetDependencyType dependencyType;\\n        address bytecodeAddress;\\n        string data;\\n    }\\n\\n    // preferredIPFSGateway is a url string\\n    function preferredIPFSGateway() external view returns (string memory);\\n\\n    // preferredArweaveGateway is a url string\\n    function preferredArweaveGateway() external view returns (string memory);\\n\\n    // updates the preferred IPFS gateway\\n    function updateIPFSGateway(string calldata _gateway) external;\\n\\n    // updates the preferred Arweave gateway\\n    function updateArweaveGateway(string calldata _gateway) external;\\n\\n    // locks the external asset dependencies for a project\\n    function lockProjectExternalAssetDependencies(uint256 _projectId) external;\\n\\n    // updates the external asset dependency for a project at a given index\\n    function updateProjectExternalAssetDependency(\\n        uint256 _projectId,\\n        uint256 _index,\\n        string memory _cidOrData,\\n        ExternalAssetDependencyType _dependencyType\\n    ) external;\\n\\n    // adds an external asset dependency for a project\\n    function addProjectExternalAssetDependency(\\n        uint256 _projectId,\\n        string memory _cidOrData,\\n        ExternalAssetDependencyType _dependencyType\\n    ) external;\\n\\n    // removes an external asset dependency for a project at a given index\\n    function removeProjectExternalAssetDependency(\\n        uint256 _projectId,\\n        uint256 _index\\n    ) external;\\n\\n    // getter function for project external asset dependencies\\n    function projectExternalAssetDependencyByIndex(\\n        uint256 _projectId,\\n        uint256 _index\\n    ) external view returns (ExternalAssetDependencyWithData memory);\\n\\n    // getter function project external asset dependency count\\n    function projectExternalAssetDependencyCount(\\n        uint256 _projectId\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/artblocks-contracts_fa1dc466/contracts/interfaces/0.8.x/IDependencyRegistryCompatibleV0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\npragma solidity ^0.8.17;\\n\\ninterface IDependencyRegistryCompatibleV0 {\\n    /// Dependency registry managed by Art Blocks\\n    function artblocksDependencyRegistryAddress()\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Returns script information for project `_projectId`.\\n     * @param _projectId Project to be queried.\\n     * @return scriptTypeAndVersion Project's script type and version\\n     * (e.g. \\\"p5js(atSymbol)1.0.0\\\")\\n     * @return aspectRatio Aspect ratio of project (e.g. \\\"1\\\" for square,\\n     * \\\"1.77777778\\\" for 16:9, etc.)\\n     * @return scriptCount Count of scripts for project\\n     */\\n    function projectScriptDetails(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory scriptTypeAndVersion,\\n            string memory aspectRatio,\\n            uint256 scriptCount\\n        );\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/artblocks-contracts_fa1dc466/contracts/interfaces/0.8.x/IManifold.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @dev Royalty Registry interface, used to support the Royalty Registry.\\n/// @dev Source: https://github.com/manifoldxyz/royalty-registry-solidity/blob/main/contracts/specs/IManifold.sol\\n\\n/// @author: manifold.xyz\\n\\n/**\\n * @dev Royalty interface for creator core classes\\n */\\ninterface IManifold {\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     *\\n     *  bytes4(keccak256('getRoyalties(uint256)')) == 0xbb3bafd6\\n     *\\n     *  => 0xbb3bafd6 = 0xbb3bafd6\\n     */\\n    function getRoyalties(\\n        uint256 tokenId\\n    ) external view returns (address payable[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-7-0_exact_remap/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/artblocks-contracts_fa1dc466/contracts/libs/0.8.x/ERC721_PackedHashSeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin-4.7/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin-4.7/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Forked version of the OpenZeppelin v4.7.1 ERC721 contract. Utilizes a\\n * struct to pack owner and hash seed into a single storage slot.\\n * ---------------------\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721_PackedHashSeed is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    /// struct to pack a token owner and hash seed into same storage slot\\n    struct OwnerAndHashSeed {\\n        // 20 bytes for address of token's owner\\n        address owner;\\n        // remaining 12 bytes allocated to token hash seed\\n        bytes12 hashSeed;\\n    }\\n\\n    /// mapping of token ID to OwnerAndHashSeed\\n    /// @dev visibility internal so inheriting contracts can access\\n    mapping(uint256 => OwnerAndHashSeed) internal _ownersAndHashSeeds;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: address zero is not a valid owner\\\"\\n        );\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        address owner = _ownersAndHashSeeds[tokenId].owner;\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721_PackedHashSeed.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: caller is not token owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownersAndHashSeeds[tokenId].owner != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        address owner = ERC721_PackedHashSeed.ownerOf(tokenId);\\n        return (spender == owner ||\\n            isApprovedForAll(owner, spender) ||\\n            getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _ownersAndHashSeeds[tokenId].owner = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721_PackedHashSeed.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _ownersAndHashSeeds[tokenId].owner;\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            ERC721_PackedHashSeed.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer from incorrect owner\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _ownersAndHashSeeds[tokenId].owner = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721_PackedHashSeed.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/artblocks-contracts_fa1dc466/contracts/libs/0.8.x/BytecodeStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Art Blocks Script Storage Library\\n * @notice Utilize contract bytecode as persistant storage for large chunks of script string data.\\n *\\n * @author Art Blocks Inc.\\n * @author Modified from 0xSequence (https://github.com/0xsequence/sstore2/blob/master/contracts/SSTORE2.sol)\\n * @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SSTORE2.sol)\\n *\\n * @dev Compared to the above two rerferenced libraries, this contracts-as-storage implementation makes a few\\n *      notably different design decisions:\\n *      - uses the `string` data type for input/output on reads, rather than speaking in bytes directly\\n *      - exposes \\\"delete\\\" functionality, allowing no-longer-used storage to be purged from chain state\\n *      - stores the \\\"writer\\\" address (library user) in the deployed contract bytes, which is useful for both:\\n *         a) providing necessary information for safe deletion; and\\n *         b) allowing this to be introspected on-chain\\n *      Also, given that much of this library is written in assembly, this library makes use of a slightly\\n *      different convention (when compared to the rest of the Art Blocks smart contract repo) around\\n *      pre-defining return values in some cases in order to simplify need to directly memory manage these\\n *      return values.\\n */\\nlibrary BytecodeStorage {\\n    //---------------------------------------------------------------------------------------------------------------//\\n    // Starting Index | Size | Ending Index | Description                                                            //\\n    //---------------------------------------------------------------------------------------------------------------//\\n    // 0              | N/A  | 0            |                                                                        //\\n    // 0              | 72   | 72           | the bytes of the gated-cleanup-logic allowing for `selfdestruct`ion    //\\n    // 72             | 32   | 104          | the 32 bytes for storing the deploying contract's (0-padded) address   //\\n    //---------------------------------------------------------------------------------------------------------------//\\n    // Define the offset for where the \\\"logic bytes\\\" end, and the \\\"data bytes\\\" begin. Note that this is a manually\\n    // calculated value, and must be updated if the above table is changed. It is expected that tests will fail\\n    // loudly if these values are not updated in-step with eachother.\\n    uint256 internal constant DATA_OFFSET = 104;\\n    uint256 internal constant ADDRESS_OFFSET = 72;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                           WRITE LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Write a string to contract bytecode\\n     * @param _data string to be written to contract. No input validation is performed on this parameter.\\n     * @return address_ address of deployed contract with bytecode containing concat(gated-cleanup-logic, address, data)\\n     */\\n    function writeToBytecode(\\n        string memory _data\\n    ) internal returns (address address_) {\\n        // prefix bytecode with\\n        bytes memory creationCode = abi.encodePacked(\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // Opcode  | Opcode + Arguments  | Description  | Stack View                                                     //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (0) creation code returns all code in the contract except for the first 11 (0B in hex) bytes, as these 11\\n            //     bytes are the creation code itself which we do not want to store in the deployed storage contract result\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x60    |  0x60_0B            | PUSH1 11     | codeOffset                                                     //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset                                                   //\\n            // 0x81    |  0x81               | DUP2         | codeOffset 0 codeOffset                                        //\\n            // 0x38    |  0x38               | CODESIZE     | codeSize codeOffset 0 codeOffset                               //\\n            // 0x03    |  0x03               | SUB          | (codeSize - codeOffset) 0 codeOffset                           //\\n            // 0x80    |  0x80               | DUP          | (codeSize - codeOffset) (codeSize - codeOffset) 0 codeOffset   //\\n            // 0x92    |  0x92               | SWAP3        | codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset)   //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset) //\\n            // 0x39    |  0x39               | CODECOPY     | 0 (codeSize - codeOffset)                                      //\\n            // 0xf3    |  0xf3               | RETURN       |                                                                //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (11 bytes)\\n            hex\\\"60_0B_59_81_38_03_80_92_59_39_F3\\\",\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // Opcode  | Opcode + Arguments  | Description  | Stack View                                                     //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (1a) conditional logic for determing purge-gate (only the bytecode contract deployer can `selfdestruct`)\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x60    |  0x60_20            | PUSH1 32           | 32                                                       //\\n            // 0x60    |  0x60_48            | PUSH1 72 (*)       | contractOffset 32                                        //\\n            // 0x60    |  0x60_00            | PUSH1 0            | 0 contractOffset 32                                      //\\n            // 0x39    |  0x39               | CODECOPY           |                                                          //\\n            // 0x60    |  0x60_00            | PUSH1 0            | 0                                                        //\\n            // 0x51    |  0x51               | MLOAD              | byteDeployerAddress                                      //\\n            // 0x33    |  0x33               | CALLER             | msg.sender byteDeployerAddress                           //\\n            // 0x14    |  0x14               | EQ                 | (msg.sender == byteDeployerAddress)                      //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (12 bytes: 0-11 in deployed contract)\\n            hex\\\"60_20_60_48_60_00_39_60_00_51_33_14\\\",\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (1b) load up the destination jump address for `(2a) calldata length check` logic, jump or raise `invalid` op-code\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x60    |  0x60_10            | PUSH1 16 (^)       | jumpDestination (msg.sender == byteDeployerAddress)      //\\n            // 0x57    |  0x57               | JUMPI              |                                                          //\\n            // 0xFE    |  0xFE               | INVALID            |                                                          //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (4 bytes: 12-15 in deployed contract)\\n            hex\\\"60_10_57_FE\\\",\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (2a) conditional logic for determing purge-gate (only if calldata length is 1 byte)\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x5B    |  0x5B               | JUMPDEST (16)      |                                                          //\\n            // 0x60    |  0x60_01            | PUSH1 1            | 1                                                        //\\n            // 0x36    |  0x36               | CALLDATASIZE       | calldataSize 1                                           //\\n            // 0x14    |  0x14               | EQ                 | (calldataSize == 1)                                      //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (5 bytes: 16-20 in deployed contract)\\n            hex\\\"5B_60_01_36_14\\\",\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (2b) load up the destination jump address for `(3a) calldata value check` logic, jump or raise `invalid` op-code\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x60    |  0x60_19            | PUSH1 25 (^)       | jumpDestination (calldataSize == 1)                      //\\n            // 0x57    |  0x57               | JUMPI              |                                                          //\\n            // 0xFE    |  0xFE               | INVALID            |                                                          //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (4 bytes: 21-24 in deployed contract)\\n            hex\\\"60_19_57_FE\\\",\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (3a) conditional logic for determing purge-gate (only if calldata is `0xFF`)\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x5B    |  0x5B               | JUMPDEST (25)      |                                                          //\\n            // 0x60    |  0x60_00            | PUSH1 0            | 0                                                        //\\n            // 0x35    |  0x35               | CALLDATALOAD       | calldata                                                 //\\n            // 0x7F    |  0x7F_FF_00_..._00  | PUSH32 0xFF00...00 | 0xFF0...00 calldata                                      //\\n            // 0x14    |  0x14               | EQ                 | (0xFF00...00 == calldata)                                //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (4 bytes: 25-28 in deployed contract)\\n            hex\\\"5B_60_00_35\\\",\\n            // (33 bytes: 29-61 in deployed contract)\\n            hex\\\"7F_FF_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00_00\\\",\\n            // (1 byte: 62 in deployed contract)\\n            hex\\\"14\\\",\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (3b) load up the destination jump address for actual purging (4), jump or raise `invalid` op-code\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x60    |  0x60_43            | PUSH1 67 (^)       | jumpDestination (0xFF00...00 == calldata)                //\\n            // 0x57    |  0x57               | JUMPI              |                                                          //\\n            // 0xFE    |  0xFE               | INVALID            |                                                          //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (4 bytes: 63-66 in deployed contract)\\n            hex\\\"60_43_57_FE\\\",\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (4) perform actual purging\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x5B    |  0x5B               | JUMPDEST (67)      |                                                          //\\n            // 0x60    |  0x60_00            | PUSH1 0            | 0                                                        //\\n            // 0x51    |  0x51               | MLOAD              | byteDeployerAddress                                      //\\n            // 0xFF    |  0xFF               | SELFDESTRUCT       |                                                          //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (5 bytes: 67-71 in deployed contract)\\n            hex\\\"5B_60_00_51_FF\\\",\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (*) Note: this value must be adjusted if selfdestruct purge logic is adjusted, to refer to the correct start  //\\n            //           offset for where the `msg.sender` address was stored in deployed bytecode.                          //\\n            //                                                                                                               //\\n            // (^) Note: this value must be adjusted if portions of the selfdestruct purge logic are adjusted.               //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            //\\n            // store the deploying-contract's address (to be used to gate and call `selfdestruct`),\\n            // with expected 0-padding to fit a 20-byte address into a 30-byte slot.\\n            //\\n            // note: it is important that this address is the executing contract's address\\n            //      (the address that represents the client-application smart contract of this library)\\n            //      which means that it is the responsibility of the client-application smart contract\\n            //      to determine how deletes are gated (or if they are exposed at all) as it is only\\n            //      this contract that will be able to call `purgeBytecode` as the `CALLER` that is\\n            //      checked above (op-code 0x33).\\n            hex\\\"00_00_00_00_00_00_00_00_00_00_00_00\\\", // left-pad 20-byte address with 12 0x00 bytes\\n            address(this),\\n            // uploaded data (stored as bytecode) comes last\\n            _data\\n        );\\n\\n        assembly {\\n            // deploy a new contract with the generated creation code.\\n            // start 32 bytes into creationCode to avoid copying the byte length.\\n            address_ := create(0, add(creationCode, 0x20), mload(creationCode))\\n        }\\n\\n        // address must be non-zero if contract was deployed successfully\\n        require(address_ != address(0), \\\"ContractAsStorage: Write Error\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               READ LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Read a string from contract bytecode\\n     * @param _address address of deployed contract with bytecode containing concat(gated-cleanup-logic, address, data)\\n     * @return data string read from contract bytecode\\n     */\\n    function readFromBytecode(\\n        address _address\\n    ) internal view returns (string memory data) {\\n        // get the size of the bytecode\\n        uint256 bytecodeSize = _bytecodeSizeAt(_address);\\n        // handle case where address contains code < DATA_OFFSET\\n        // note: the first check here also captures the case where\\n        //       (bytecodeSize == 0) implicitly, but we add the second check of\\n        //       (bytecodeSize == 0) as a fall-through that will never execute\\n        //       unless `DATA_OFFSET` is set to 0 at some point.\\n        if ((bytecodeSize < DATA_OFFSET) || (bytecodeSize == 0)) {\\n            revert(\\\"ContractAsStorage: Read Error\\\");\\n        }\\n        // handle case where address contains code >= DATA_OFFSET\\n        // decrement by DATA_OFFSET to account for purge logic\\n        uint256 size;\\n        unchecked {\\n            size = bytecodeSize - DATA_OFFSET;\\n        }\\n\\n        assembly {\\n            // allocate free memory\\n            data := mload(0x40)\\n            // update free memory pointer\\n            // use and(x, not(0x1f) as cheaper equivalent to sub(x, mod(x, 0x20)).\\n            // adding 0x1f to size + logic above ensures the free memory pointer\\n            // remains word-aligned, following the Solidity convention.\\n            mstore(0x40, add(data, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n            // store length of data in first 32 bytes\\n            mstore(data, size)\\n            // copy code to memory, excluding the gated-cleanup-logic and address\\n            extcodecopy(_address, add(data, 0x20), DATA_OFFSET, size)\\n        }\\n    }\\n\\n    /**\\n     * @notice Get address for deployer for given contract bytecode\\n     * @param _address address of deployed contract with bytecode containing concat(gated-cleanup-logic, address, data)\\n     * @return writerAddress address read from contract bytecode\\n     */\\n    function getWriterAddressForBytecode(\\n        address _address\\n    ) internal view returns (address) {\\n        // get the size of the data\\n        uint256 bytecodeSize = _bytecodeSizeAt(_address);\\n        // handle case where address contains code < DATA_OFFSET\\n        // note: the first check here also captures the case where\\n        //       (bytecodeSize == 0) implicitly, but we add the second check of\\n        //       (bytecodeSize == 0) as a fall-through that will never execute\\n        //       unless `DATA_OFFSET` is set to 0 at some point.\\n        if ((bytecodeSize < DATA_OFFSET) || (bytecodeSize == 0)) {\\n            revert(\\\"ContractAsStorage: Read Error\\\");\\n        }\\n\\n        assembly {\\n            // allocate free memory\\n            let writerAddress := mload(0x40)\\n            // shift free memory pointer by one slot\\n            mstore(0x40, add(mload(0x40), 0x20))\\n            // copy the 32-byte address of the data contract writer to memory\\n            // note: this relies on the assumption noted at the top-level of\\n            //       this file that the storage layout for the deployed\\n            //       contracts-as-storage contract looks like:\\n            //       | gated-cleanup-logic | deployer-address (padded) | data |\\n            extcodecopy(\\n                _address,\\n                writerAddress,\\n                ADDRESS_OFFSET,\\n                0x20 // full 32-bytes, as address is expected to be zero-padded\\n            )\\n            return(\\n                writerAddress,\\n                0x20 // return size is entire slot, as it is zero-padded\\n            )\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              DELETE LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Purge contract bytecode for cleanup purposes\\n     * note: Although this does reduce usage of Ethereum state, it does not reduce the gas costs of removal\\n     * transactions. We believe this is the best behavior at the time of writing, and do not expect this to\\n     * result in any breaking changes in the future. All current proposals to change the self-destruct opcode\\n     * are backwards compatible, but may result in not removing the bytecode from the blockchain state. This\\n     * implementation is compatible with that architecture, as it does not rely on the bytecode being removed\\n     * from the blockchain state (as opposed to using a CREATE2 style opcode when creating bytecode contracts,\\n     * which could be used in a way that may rely on the bytecode being removed from the blockchain state,\\n     * e.g. replacing a contract at a given deployed address).\\n     * @param _address address of deployed contract with bytecode containing concat(gated-cleanup-logic, address, data)\\n     * @dev This contract is only callable by the address of the contract that originally deployed the bytecode\\n     *      being purged. If this method is called by any other address, it will revert with the `INVALID` op-code.\\n     *      Additionally, for security purposes, the contract must be called with calldata `0xFF` to ensure that\\n     *      the `selfdestruct` op-code is intentionally being invoked, otherwise the `INVALID` op-code will be raised.\\n     */\\n    function purgeBytecode(address _address) internal {\\n        // deployed bytecode (above) handles all logic for purging state, so no\\n        // call data is expected to be passed along to perform data purge\\n        (bool success /* `data` not needed */, ) = _address.call(hex\\\"FF\\\");\\n        if (!success) {\\n            revert(\\\"ContractAsStorage: Delete Error\\\");\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n        @notice Returns the size of the bytecode at address `_address`\\n        @param _address address that may or may not contain bytecode\\n        @return size size of the bytecode code at `_address`\\n    */\\n    function _bytecodeSizeAt(\\n        address _address\\n    ) private view returns (uint256 size) {\\n        assembly {\\n            size := extcodesize(_address)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/artblocks-contracts_fa1dc466/contracts/libs/0.8.x/Bytes32Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n// Inspired by: https://ethereum.stackexchange.com/a/123950/103422\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Operations on bytes32 data type, dealing with conversion to string.\\n */\\nlibrary Bytes32Strings {\\n    /**\\n     * @dev Intended to convert a `bytes32`-encoded string literal to `string`.\\n     * Trims zero padding to arrive at original string literal.\\n     */\\n    function toString(\\n        bytes32 source\\n    ) internal pure returns (string memory result) {\\n        uint8 length = 0;\\n        while (source[length] != 0 && length < 32) {\\n            length++;\\n        }\\n        assembly {\\n            // free memory pointer\\n            result := mload(0x40)\\n            // update free memory pointer to new \\\"memory end\\\"\\n            // (offset is 64-bytes: 32 for length, 32 for data)\\n            mstore(0x40, add(result, 0x40))\\n            // store length in first 32-byte memory slot\\n            mstore(result, length)\\n            // write actual data in second 32-byte memory slot\\n            mstore(add(result, 0x20), source)\\n        }\\n    }\\n\\n    /**\\n     * @dev Intended to check if a `bytes32`-encoded string contains a given\\n     * character with UTF-8 character code `utf8CharCode exactly `targetQty`\\n     * times. Does not support searching for multi-byte characters, only\\n     * characters with UTF-8 character codes < 0x80.\\n     */\\n    function containsExactCharacterQty(\\n        bytes32 source,\\n        uint8 utf8CharCode,\\n        uint8 targetQty\\n    ) internal pure returns (bool) {\\n        uint8 _occurrences = 0;\\n        uint8 i;\\n        for (i = 0; i < 32; ) {\\n            uint8 _charCode = uint8(source[i]);\\n            // if not a null byte, or a multi-byte UTF-8 character, check match\\n            if (_charCode != 0 && _charCode < 0x80) {\\n                if (_charCode == utf8CharCode) {\\n                    unchecked {\\n                        // no risk of overflow since max 32 iterations < max uin8=255\\n                        ++_occurrences;\\n                    }\\n                }\\n            }\\n            unchecked {\\n                // no risk of overflow since max 32 iterations < max uin8=255\\n                ++i;\\n            }\\n        }\\n        return _occurrences == targetQty;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ethier_0-55-0/contracts/erc721/ERC721ACommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2022 the ethier authors (github.com/divergencetech/ethier)\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {ERC721A} from \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport {ERC2981} from \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport {AccessControlEnumerable} from \\\"../utils/AccessControlEnumerable.sol\\\";\\nimport {AccessControlPausable} from \\\"../utils/AccessControlPausable.sol\\\";\\nimport {ERC4906} from \\\"./ERC4906.sol\\\";\\n\\n/**\\n@notice An ERC721A contract with common functionality:\\n - Pausable with toggling functions exposed to Owner only\\n - ERC2981 royalties\\n */\\ncontract ERC721ACommon is ERC721A, AccessControlPausable, ERC2981, ERC4906 {\\n    constructor(\\n        address admin,\\n        address steerer,\\n        string memory name,\\n        string memory symbol,\\n        address payable royaltyReciever,\\n        uint96 royaltyBasisPoints\\n    ) ERC721A(name, symbol) {\\n        _setDefaultRoyalty(royaltyReciever, royaltyBasisPoints);\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(DEFAULT_STEERING_ROLE, steerer);\\n    }\\n\\n    /// @notice Requires that the token exists.\\n    modifier tokenExists(uint256 tokenId) {\\n        require(ERC721A._exists(tokenId), \\\"ERC721ACommon: Token doesn't exist\\\");\\n        _;\\n    }\\n\\n    /// @notice Requires that msg.sender owns or is approved for the token.\\n    modifier onlyApprovedOrOwner(uint256 tokenId) {\\n        require(\\n            _ownershipOf(tokenId).addr == _msgSender() ||\\n                getApproved(tokenId) == _msgSender(),\\n            \\\"ERC721ACommon: Not approved nor owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual override {\\n        require(!paused(), \\\"ERC721ACommon: paused\\\");\\n        super._beforeTokenTransfers(from, to, startTokenId, quantity);\\n    }\\n\\n    /// @notice Overrides supportsInterface as required by inheritance.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721A, AccessControlEnumerable, ERC2981, ERC4906)\\n        returns (bool)\\n    {\\n        return\\n            ERC721A.supportsInterface(interfaceId) ||\\n            ERC2981.supportsInterface(interfaceId) ||\\n            AccessControlEnumerable.supportsInterface(interfaceId) ||\\n            ERC4906.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Sets the royalty receiver and percentage (in units of basis\\n    /// points = 0.01%).\\n    function setDefaultRoyalty(address receiver, uint96 basisPoints)\\n        public\\n        virtual\\n        onlyRole(DEFAULT_STEERING_ROLE)\\n    {\\n        _setDefaultRoyalty(receiver, basisPoints);\\n    }\\n\\n    function emitMetadataUpdateForAll()\\n        external\\n        onlyRole(DEFAULT_STEERING_ROLE)\\n    {\\n        // EIP4906 is unfortunately quite vague on whether the `toTokenId` in\\n        // the following event is included or not. We hence use `totalSupply()`\\n        // to ensure that the last actual `tokenId` is included in any case.\\n        _refreshMetadata(0, totalSupply());\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/operator-filter-registry_1-4-1/src/DefaultOperatorFilterer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {OperatorFilterer} from \\\"./OperatorFilterer.sol\\\";\\nimport {CANONICAL_CORI_SUBSCRIPTION} from \\\"./lib/Constants.sol\\\";\\n/**\\n * @title  DefaultOperatorFilterer\\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\\n * @dev    Please note that if your token contract does not provide an owner with EIP-173, it must provide\\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\\n *         will be locked to the options set during construction.\\n */\\n\\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\\n    /// @dev The constructor that is called when the contract is being deployed.\\n    constructor() OperatorFilterer(CANONICAL_CORI_SUBSCRIPTION, true) {}\\n}\\n\"\r\n    },\r\n    \"/home/dave/proof/proof-seller/contracts/sellers/src/sellable/BaseSellable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright 2023 PROOF Holdings Inc\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {AccessControlEnumerable} from \\\"ethier/utils/AccessControlEnumerable.sol\\\";\\nimport {ISellable} from \\\"../interfaces/ISellable.sol\\\";\\n\\n/**\\n * @notice A base contract for selling content via authorised sellers.\\n */\\nabstract contract BaseSellable is ISellable, AccessControlEnumerable {\\n    /**\\n     * @notice Authorised sellers.\\n     */\\n    bytes32 public constant AUTHORISED_SELLER_ROLE = keccak256(\\\"AUTHORISED_SELLER_ROLE\\\");\\n\\n    /**\\n     * @notice A role that cannot be granted or revoked.\\n     * @dev Used to lock in members of the `AUTHORISED_SELLER_ROLE` role.\\n     */\\n    bytes32 private constant _NOOP_ROLE = keccak256(\\\"NOOP_ROLE\\\");\\n\\n    constructor() {\\n        _setRoleAdmin(AUTHORISED_SELLER_ROLE, DEFAULT_STEERING_ROLE);\\n        _setRoleAdmin(_NOOP_ROLE, _NOOP_ROLE);\\n    }\\n\\n    /**\\n     * @notice Handles the sale of sellable content via an authorised seller.\\n     * @dev Delegates the implementation to `_handleSale`.\\n     */\\n    function handleSale(address to, uint64 num, bytes calldata data)\\n        external\\n        payable\\n        onlyRole(AUTHORISED_SELLER_ROLE)\\n    {\\n        _handleSale(to, num, data);\\n    }\\n\\n    /**\\n     * @notice Handles the sale of sellable content.\\n     */\\n    function _handleSale(address to, uint64 num, bytes calldata data) internal virtual;\\n\\n    /**\\n     * @notice Locks the `AUTHORISED_SELLER_ROLE` role.\\n     */\\n    function lockSellers() external onlyRole(DEFAULT_STEERING_ROLE) {\\n        _lockSellers();\\n    }\\n\\n    /**\\n     * @notice Locks the `AUTHORISED_SELLER_ROLE` role.\\n     */\\n    function _lockSellers() internal {\\n        _setRoleAdmin(AUTHORISED_SELLER_ROLE, _NOOP_ROLE);\\n    }\\n\\n    /**\\n     * @notice Revokes approval for all sellers.\\n     */\\n    function _revokeAllSellers() internal {\\n        uint256 num = getRoleMemberCount(AUTHORISED_SELLER_ROLE);\\n        for (uint256 i = 0; i < num; i++) {\\n            // Akin to a popFront\\n            address seller = getRoleMember(AUTHORISED_SELLER_ROLE, 0);\\n            _revokeRole(AUTHORISED_SELLER_ROLE, seller);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/artblocks-contracts_fa1dc466/contracts/interfaces/0.8.x/IGenArt721CoreContractV3_Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAdminACLV0.sol\\\";\\n/// use the Royalty Registry's IManifold interface for token royalties\\nimport \\\"./IManifold.sol\\\";\\n\\n/**\\n * @title This interface is intended to house interface items that are common\\n * across all GenArt721CoreContractV3 flagship and derivative implementations.\\n * This interface extends the IManifold royalty interface in order to\\n * add support the Royalty Registry by default.\\n * @author Art Blocks Inc.\\n */\\ninterface IGenArt721CoreContractV3_Base is IManifold {\\n    /**\\n     * @notice Token ID `_tokenId` minted to `_to`.\\n     */\\n    event Mint(address indexed _to, uint256 indexed _tokenId);\\n\\n    /**\\n     * @notice currentMinter updated to `_currentMinter`.\\n     * @dev Implemented starting with V3 core\\n     */\\n    event MinterUpdated(address indexed _currentMinter);\\n\\n    /**\\n     * @notice Platform updated on bytes32-encoded field `_field`.\\n     */\\n    event PlatformUpdated(bytes32 indexed _field);\\n\\n    /**\\n     * @notice Project ID `_projectId` updated on bytes32-encoded field\\n     * `_update`.\\n     */\\n    event ProjectUpdated(uint256 indexed _projectId, bytes32 indexed _update);\\n\\n    event ProposedArtistAddressesAndSplits(\\n        uint256 indexed _projectId,\\n        address _artistAddress,\\n        address _additionalPayeePrimarySales,\\n        uint256 _additionalPayeePrimarySalesPercentage,\\n        address _additionalPayeeSecondarySales,\\n        uint256 _additionalPayeeSecondarySalesPercentage\\n    );\\n\\n    event AcceptedArtistAddressesAndSplits(uint256 indexed _projectId);\\n\\n    // version and type of the core contract\\n    // coreVersion is a string of the form \\\"0.x.y\\\"\\n    function coreVersion() external view returns (string memory);\\n\\n    // coreType is a string of the form \\\"GenArt721CoreV3\\\"\\n    function coreType() external view returns (string memory);\\n\\n    // owner (pre-V3 was named admin) of contract\\n    // this is expected to be an Admin ACL contract for V3\\n    function owner() external view returns (address);\\n\\n    // Admin ACL contract for V3, will be at the address owner()\\n    function adminACLContract() external returns (IAdminACLV0);\\n\\n    // backwards-compatible (pre-V3) admin - equal to owner()\\n    function admin() external view returns (address);\\n\\n    /**\\n     * Function determining if _sender is allowed to call function with\\n     * selector _selector on contract `_contract`. Intended to be used with\\n     * peripheral contracts such as minters, as well as internally by the\\n     * core contract itself.\\n     */\\n    function adminACLAllowed(\\n        address _sender,\\n        address _contract,\\n        bytes4 _selector\\n    ) external returns (bool);\\n\\n    // getter function of public variable\\n    function nextProjectId() external view returns (uint256);\\n\\n    // getter function of public mapping\\n    function tokenIdToProjectId(\\n        uint256 tokenId\\n    ) external view returns (uint256 projectId);\\n\\n    // @dev this is not available in V0\\n    function isMintWhitelisted(address minter) external view returns (bool);\\n\\n    function projectIdToArtistAddress(\\n        uint256 _projectId\\n    ) external view returns (address payable);\\n\\n    function projectIdToAdditionalPayeePrimarySales(\\n        uint256 _projectId\\n    ) external view returns (address payable);\\n\\n    function projectIdToAdditionalPayeePrimarySalesPercentage(\\n        uint256 _projectId\\n    ) external view returns (uint256);\\n\\n    function projectIdToSecondaryMarketRoyaltyPercentage(\\n        uint256 _projectId\\n    ) external view returns (uint256);\\n\\n    function projectURIInfo(\\n        uint256 _projectId\\n    ) external view returns (string memory projectBaseURI);\\n\\n    // @dev new function in V3\\n    function projectStateData(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 invocations,\\n            uint256 maxInvocations,\\n            bool active,\\n            bool paused,\\n            uint256 completedTimestamp,\\n            bool locked\\n        );\\n\\n    function projectDetails(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory projectName,\\n            string memory artist,\\n            string memory description,\\n            string memory website,\\n            string memory license\\n        );\\n\\n    function projectScriptDetails(\\n        uint256 _projectId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory scriptTypeAndVersion,\\n            string memory aspectRatio,\\n            uint256 scriptCount\\n        );\\n\\n    function projectScriptByIndex(\\n        uint256 _projectId,\\n        uint256 _index\\n    ) external view returns (string memory);\\n\\n    function tokenIdToHash(uint256 _tokenId) external view returns (bytes32);\\n\\n    // function to set a token's hash (must be guarded)\\n    function setTokenHash_8PT(uint256 _tokenId, bytes32 _hash) external;\\n\\n    // @dev gas-optimized signature in V3 for `mint`\\n    function mint_Ecf(\\n        address _to,\\n        uint256 _projectId,\\n        address _by\\n    ) external returns (uint256 tokenId);\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/artblocks-contracts_fa1dc466/contracts/interfaces/0.8.x/IGenArt721CoreContractV3_Engine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAdminACLV0.sol\\\";\\nimport \\\"./IGenArt721CoreContractV3_Base.sol\\\";\\n\\ninterface IGenArt721CoreContractV3_Engine is IGenArt721CoreContractV3_Base {\\n    // @dev new function in V3\\n    function getPrimaryRevenueSplits(\\n        uint256 _projectId,\\n        uint256 _price\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 renderProviderRevenue_,\\n            address payable renderProviderAddress_,\\n            uint256 platformProviderRevenue_,\\n            address payable platformProviderAddress_,\\n            uint256 artistRevenue_,\\n            address payable artistAddress_,\\n            uint256 additionalPayeePrimaryRevenue_,\\n            address payable additionalPayeePrimaryAddress_\\n        );\\n\\n    // @dev The render provider primary sales payment address\\n    function renderProviderPrimarySalesAddress()\\n        external\\n        view\\n        returns (address payable);\\n\\n    // @dev The platform provider primary sales payment address\\n    function platformProviderPrimarySalesAddress()\\n        external\\n        view\\n        returns (address payable);\\n\\n    // @dev Percentage of primary sales allocated to the render provider\\n    function renderProviderPrimarySalesPercentage()\\n        external\\n        view\\n        returns (uint256);\\n\\n    // @dev Percentage of primary sales allocated to the platform provider\\n    function platformProviderPrimarySalesPercentage()\\n        external\\n        view\\n        returns (uint256);\\n\\n    // @dev The render provider secondary sales royalties payment address\\n    function renderProviderSecondarySalesAddress()\\n        external\\n        view\\n        returns (address payable);\\n\\n    // @dev The platform provider secondary sales royalties payment address\\n    function platformProviderSecondarySalesAddress()\\n        external\\n        view\\n        returns (address payable);\\n\\n    // @dev Basis points of secondary sales allocated to the render provider\\n    function renderProviderSecondarySalesBPS() external view returns (uint256);\\n\\n    // @dev Basis points of secondary sales allocated to the platform provider\\n    function platformProviderSecondarySalesBPS()\\n        external\\n        view\\n        returns (uint256);\\n\\n    // function to read the hash-seed for a given tokenId\\n    function tokenIdToHashSeed(\\n        uint256 _tokenId\\n    ) external view returns (bytes12);\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-7-0_exact_remap/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-7-0_exact_remap/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-7-0_exact_remap/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-7-0_exact_remap/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-7-0_exact_remap/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-7-0_exact_remap/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-7-0_exact_remap/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ERC721A_4-2-3/contracts/ERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/token/common/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ethier_0-55-0/contracts/utils/AccessControlPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2021 the ethier authors (github.com/divergencetech/ethier)\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {AccessControlEnumerable} from \\\"./AccessControlEnumerable.sol\\\";\\n\\n/// @notice A Pausable contract that can only be toggled by a member of the\\n/// STEERING role.\\ncontract AccessControlPausable is AccessControlEnumerable, Pausable {\\n    /// @notice Pauses the contract.\\n    function pause() public onlyRole(DEFAULT_STEERING_ROLE) {\\n        Pausable._pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    function unpause() public onlyRole(DEFAULT_STEERING_ROLE) {\\n        Pausable._unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ethier_0-55-0/contracts/erc721/ERC4906.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC165, ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\ninterface IERC4906Events {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\\n/// @title EIP-721 Metadata Update Extension\\n// solhint-disable-next-line no-empty-blocks\\ninterface IERC4906 is IERC165, IERC4906Events {\\n\\n}\\n\\ncontract ERC4906 is IERC4906, ERC165 {\\n    function _refreshMetadata(uint256 tokenId) internal {\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    function _refreshMetadata(uint256 fromTokenId, uint256 toTokenId) internal {\\n        emit BatchMetadataUpdate(fromTokenId, toTokenId);\\n    }\\n\\n    /// @dev See {IERC165-supportsInterface}.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == bytes4(0x49064906) ||\\n            ERC165.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/operator-filter-registry_1-4-1/src/OperatorFilterer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IOperatorFilterRegistry} from \\\"./IOperatorFilterRegistry.sol\\\";\\nimport {CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS} from \\\"./lib/Constants.sol\\\";\\n/**\\n * @title  OperatorFilterer\\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\\n *         registrant's entries in the OperatorFilterRegistry.\\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\\n *         Please note that if your token contract does not provide an owner with EIP-173, it must provide\\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\\n *         will be locked to the options set during construction.\\n */\\n\\nabstract contract OperatorFilterer {\\n    /// @dev Emitted when an operator is not allowed.\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS);\\n\\n    /// @dev The constructor that is called when the contract is being deployed.\\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (subscribe) {\\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n            } else {\\n                if (subscriptionOrRegistrantToCopy != address(0)) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev A helper function to check if an operator is allowed.\\n     */\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Allow spending tokens from addresses with balance\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n        // from an EOA.\\n        if (from != msg.sender) {\\n            _checkFilterOperator(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev A helper function to check if an operator approval is allowed.\\n     */\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkFilterOperator(operator);\\n        _;\\n    }\\n\\n    /**\\n     * @dev A helper function to check if an operator is allowed.\\n     */\\n    function _checkFilterOperator(address operator) internal view virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            // under normal circumstances, this function will revert rather than return false, but inheriting contracts\\n            // may specify their own OperatorFilterRegistry implementations, which may behave differently\\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/operator-filter-registry_1-4-1/src/lib/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-7-0_exact_remap/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ERC721A_4-2-3/contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/operator-filter-registry_1-4-1/src/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    /**\\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\\n     *         true if supplied registrant address is not registered.\\n     */\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\\n     */\\n    function register(address registrant) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and \\\"subscribes\\\" to another address's filtered operators and codeHashes.\\n     */\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\\n     *         address without subscribing.\\n     */\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\\n     *         Note that this does not remove any filtered addresses or codeHashes.\\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\\n     */\\n    function unregister(address addr) external;\\n\\n    /**\\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\\n     */\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n\\n    /**\\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\\n     */\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n\\n    /**\\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\\n     */\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n\\n    /**\\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\\n     */\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n\\n    /**\\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\\n     *         subscription if present.\\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\\n     *         used.\\n     */\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    /**\\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\\n     */\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    /**\\n     * @notice Get the subscription address of a given registrant, if any.\\n     */\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    /**\\n     * @notice Get the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    /**\\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\\n     */\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Returns true if operator is filtered by a given address or its subscription.\\n     */\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    /**\\n     * @notice Returns a list of filtered operators for a given address or its subscription.\\n     */\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    /**\\n     * @notice Returns true if an address has registered\\n     */\\n    function isRegistered(address addr) external returns (bool);\\n\\n    /**\\n     * @dev Convenience method to compute the code hash of an arbitrary contract\\n     */\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@divergencetech/ethier/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ethier_0-55-0/\",\r\n      \"@openzeppelin-4-7-0/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-7-0_exact_remap/\",\r\n      \"@openzeppelin-4.7/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-7-0_exact_remap/\",\r\n      \"@openzeppelin/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/\",\r\n      \"ERC721A/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ERC721A_4-2-3/contracts/\",\r\n      \"ERC721A_root/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ERC721A_4-2-3/\",\r\n      \"artblocks-contracts/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/artblocks-contracts_fa1dc466/contracts/\",\r\n      \"artblocks-contracts_root/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/artblocks-contracts_fa1dc466/\",\r\n      \"delegation-registry/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/delegation-registry_2d1a158b/src/\",\r\n      \"delegation-registry_root/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/delegation-registry_2d1a158b/\",\r\n      \"ds-test/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ds-test_013e6c64/src/\",\r\n      \"ds-test_root/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ds-test_013e6c64/\",\r\n      \"erc721a/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ERC721A_4-2-3/\",\r\n      \"ethier/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ethier_0-55-0/contracts/\",\r\n      \"ethier_root/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/ethier_0-55-0/\",\r\n      \"forge-std/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/forge-std_1-4-0/src/\",\r\n      \"openzeppelin-contracts-4-7-0/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-7-0_exact_remap/contracts/\",\r\n      \"openzeppelin-contracts/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/\",\r\n      \"openzeppelin-contracts/contracts/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/contracts/\",\r\n      \"openzeppelin-contracts_root-4-7-0/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-7-0_exact_remap/\",\r\n      \"openzeppelin-contracts_root/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/openzeppelin-contracts_4-8-1/\",\r\n      \"operator-filter-registry/src/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/operator-filter-registry_1-4-1/src/\",\r\n      \"operator-filter-registry_root/=/home/dave/.cache/bazel/_bazel_dave/b9a57168317213f9241a484d2ee2d038/external/operator-filter-registry_1-4-1/\",\r\n      \"proof/artblocks/=/home/dave/proof/proof-seller/contracts/artblocks/src/\",\r\n      \"proof/constants/=/home/dave/proof/proof-seller/contracts/constants/src/\",\r\n      \"proof/redemption/=/home/dave/proof/proof-seller/contracts/redemption/src/\",\r\n      \"proof/sellers/=/home/dave/proof/proof-seller/contracts/sellers/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"steerer\",\"type\":\"address\"},{\"internalType\":\"contract DiamondExhibition\",\"name\":\"exhibition\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"CallbackFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"actual\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expected\",\"type\":\"uint64\"}],\"name\":\"InvalidNumSoldAfter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"actual\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expected\",\"type\":\"uint64\"}],\"name\":\"InvalidNumSoldBefore\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_STEERING_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSold\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"projectIds\",\"type\":\"uint8[]\"}],\"internalType\":\"struct DiamondAirdropper.Receiver[]\",\"name\":\"receivers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"expectedNumSoldBefore\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expectedNumSoldAfter\",\"type\":\"uint64\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellable\",\"outputs\":[{\"internalType\":\"contract ISellable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DiamondAirdropper", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "00000000000000000000000032220f07dbcd18149f619f28cd09fd911cc0372d00000000000000000000000032220f07dbcd18149f619f28cd09fd911cc0372d00000000000000000000000068d0f6d1d99bb830e17ffaa8adb5bbed9d6eec2e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}