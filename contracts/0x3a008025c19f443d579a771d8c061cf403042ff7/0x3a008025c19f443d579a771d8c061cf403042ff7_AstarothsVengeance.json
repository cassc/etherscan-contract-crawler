{"SourceCode": "// SPDX-License-Identifier: WAGDIE\r\n//\r\n//    \u2111\ud835\udd2b \ud835\udd09\ud835\udd2c\ud835\udd2f\ud835\udd30\ud835\udd1e\ud835\udd28\ud835\udd22\ud835\udd2b \ud835\udd0f\ud835\udd1e\ud835\udd2b\ud835\udd21\ud835\udd30, \ud835\udd34\ud835\udd25\ud835\udd22\ud835\udd2f\ud835\udd22 \ud835\udd30\ud835\udd25\ud835\udd1e\ud835\udd21\ud835\udd2c\ud835\udd34\ud835\udd30 \ud835\udd29\ud835\udd26\ud835\udd22,\r\n//    \ud835\udd17\ud835\udd25\ud835\udd22 \ud835\udd31\ud835\udd1e\ud835\udd29\ud835\udd22 \ud835\udd2c\ud835\udd23 \ud835\udd04\ud835\udd30\ud835\udd31\ud835\udd1e\ud835\udd2f\ud835\udd2c\ud835\udd31\ud835\udd25 \ud835\udd2d\ud835\udd26\ud835\udd22\ud835\udd2f\ud835\udd20\ud835\udd22\ud835\udd30 \ud835\udd30\ud835\udd28\ud835\udd36.\r\n//    \ud835\udd05\ud835\udd2c\ud835\udd2b\ud835\udd22\ud835\udd30 \ud835\udd2c\ud835\udd23 \ud835\udd2f\ud835\udd22\ud835\udd21, \ud835\udd1e\ud835\udd2b\ud835\udd21 \ud835\udd25\ud835\udd22\ud835\udd1e\ud835\udd2f\ud835\udd31 \ud835\udd1e\ud835\udd1f\ud835\udd29\ud835\udd1e\ud835\udd37\ud835\udd22,\r\n//    \u210c\ud835\udd26\ud835\udd30 \ud835\udd2e\ud835\udd32\ud835\udd22\ud835\udd30\ud835\udd31, \ud835\udd1e \ud835\udd2f\ud835\udd22\ud835\udd29\ud835\udd22\ud835\udd2b\ud835\udd31\ud835\udd29\ud835\udd22\ud835\udd30\ud835\udd30, \ud835\udd1f\ud835\udd32\ud835\udd2f\ud835\udd2b\ud835\udd26\ud835\udd2b\ud835\udd24 \ud835\udd2f\ud835\udd1e\ud835\udd24\ud835\udd22.\r\n//\r\n//\r\n//    \ud835\udd04\ud835\udd24\ud835\udd1e\ud835\udd26\ud835\udd2b\ud835\udd30\ud835\udd31 \ud835\udd17\ud835\udd25\ud835\udd22 \ud835\udd0a\ud835\udd29\ud835\udd32\ud835\udd31\ud835\udd31\ud835\udd2c\ud835\udd2b, \ud835\udd1e \ud835\udd1f\ud835\udd22\ud835\udd1e\ud835\udd30\ud835\udd31\ud835\udd29\ud835\udd36 \ud835\udd2a\ud835\udd26\ud835\udd24\ud835\udd25\ud835\udd31,\r\n//    \ud835\udd09\ud835\udd22\ud835\udd1e\ud835\udd31\ud835\udd25\ud835\udd22\ud835\udd2f\ud835\udd30 \ud835\udd1e\ud835\udd2b\ud835\udd24\ud835\udd22\ud835\udd29\ud835\udd26\ud835\udd20, \ud835\udd1f\ud835\udd32\ud835\udd31 \ud835\udd23\ud835\udd1e\ud835\udd29\ud835\udd30\ud835\udd22 \ud835\udd26\ud835\udd2b \ud835\udd29\ud835\udd26\ud835\udd24\ud835\udd25\ud835\udd31.\r\n//    \ud835\udd17\ud835\udd25\ud835\udd2f\ud835\udd2c\ud835\udd32\ud835\udd24\ud835\udd25 \ud835\udd1f\ud835\udd1e\ud835\udd31\ud835\udd31\ud835\udd29\ud835\udd22, \ud835\udd31\ud835\udd25\ud835\udd22\ud835\udd26\ud835\udd2f \ud835\udd23\ud835\udd32\ud835\udd2f\ud835\udd36 \ud835\udd2f\ud835\udd2c\ud835\udd1e\ud835\udd2f\ud835\udd22\ud835\udd21,\r\n//    \ud835\udd16\ud835\udd31\ud835\udd22\ud835\udd22\ud835\udd29 \ud835\udd1e\ud835\udd2b\ud835\udd21 \ud835\udd25\ud835\udd26\ud835\udd21\ud835\udd22, \ud835\udd1e \ud835\udd17\ud835\udd32\ud835\udd2f\ud835\udd29\ud835\udd2c \ud835\udd30\ud835\udd20\ud835\udd2c\ud835\udd2f\ud835\udd2b\ud835\udd22\ud835\udd21.\r\n//\r\n//\r\n//    \ud835\udd16\ud835\udd34\ud835\udd1e\ud835\udd29\ud835\udd29\ud835\udd2c\ud835\udd34\ud835\udd22\ud835\udd21 \ud835\udd34\ud835\udd25\ud835\udd2c\ud835\udd29\ud835\udd22 \ud835\udd1f\ud835\udd36 \ud835\udd0a\ud835\udd29\ud835\udd32\ud835\udd31\ud835\udd31\ud835\udd2c\ud835\udd2b'\ud835\udd30 \ud835\udd2a\ud835\udd1e\ud835\udd34,\r\n//    \ud835\udd17\ud835\udd25\ud835\udd22 \ud835\udd21\ud835\udd22\ud835\udd2a\ud835\udd2c\ud835\udd2b'\ud835\udd30 \ud835\udd2d\ud835\udd29\ud835\udd1e\ud835\udd2b \ud835\udd31\ud835\udd2c \ud835\udd23\ud835\udd1e\ud835\udd31\ud835\udd1e\ud835\udd29 \ud835\udd23\ud835\udd29\ud835\udd1e\ud835\udd34.\r\n//    \ud835\udd04\ud835\udd20\ud835\udd2c\ud835\udd29\ud835\udd36\ud835\udd31\ud835\udd22\ud835\udd30 \ud835\udd34\ud835\udd25\ud835\udd26\ud835\udd30\ud835\udd2d\ud835\udd22\ud835\udd2f \ud835\udd26\ud835\udd2b \ud835\udd2b\ud835\udd26\ud835\udd24\ud835\udd25\ud835\udd31'\ud835\udd30 \ud835\udd22\ud835\udd2a\ud835\udd1f\ud835\udd2f\ud835\udd1e\ud835\udd20\ud835\udd22,\r\n//    \u212d\ud835\udd1e\ud835\udd2f\ud835\udd2f\ud835\udd36\ud835\udd26\ud835\udd2b\ud835\udd24 \ud835\udd23\ud835\udd2c\ud835\udd2f\ud835\udd31\ud835\udd25 \ud835\udd25\ud835\udd26\ud835\udd30 \ud835\udd32\ud835\udd2b\ud835\udd23\ud835\udd32\ud835\udd29\ud835\udd23\ud835\udd26\ud835\udd29\ud835\udd29\ud835\udd22\ud835\udd21 \ud835\udd20\ud835\udd25\ud835\udd1e\ud835\udd30\ud835\udd22.\r\n//\r\n//\r\n//    \u2111\ud835\udd2b \ud835\udd31\ud835\udd25\ud835\udd22\ud835\udd26\ud835\udd2f \ud835\udd25\ud835\udd22\ud835\udd1e\ud835\udd2f\ud835\udd31\ud835\udd30, \ud835\udd25\ud835\udd26\ud835\udd30 \ud835\udd23\ud835\udd32\ud835\udd2f\ud835\udd36 \ud835\udd21\ud835\udd2c\ud835\udd31\ud835\udd25 \ud835\udd1f\ud835\udd32\ud835\udd2f\ud835\udd2b,\r\n//    \ud835\udd04\ud835\udd30\ud835\udd31\ud835\udd1e\ud835\udd2f\ud835\udd2c\ud835\udd31\ud835\udd25'\ud835\udd30 \ud835\udd33\ud835\udd22\ud835\udd2b\ud835\udd24\ud835\udd22\ud835\udd1e\ud835\udd2b\ud835\udd20\ud835\udd22, \ud835\udd31\ud835\udd25\ud835\udd22\ud835\udd36 \ud835\udd30\ud835\udd22\ud835\udd22\ud835\udd28 \ud835\udd31\ud835\udd2c \ud835\udd22\ud835\udd1e\ud835\udd2f\ud835\udd2b.\r\n//    \u2111\ud835\udd2b \ud835\udd34\ud835\udd25\ud835\udd26\ud835\udd30\ud835\udd2d\ud835\udd22\ud835\udd2f\ud835\udd30, \ud835\udd26\ud835\udd2b \ud835\udd30\ud835\udd25\ud835\udd1e\ud835\udd21\ud835\udd2c\ud835\udd34\ud835\udd30, \ud835\udd26\ud835\udd2b \ud835\udd2e\ud835\udd32\ud835\udd26\ud835\udd22\ud835\udd31 \ud835\udd2c\ud835\udd23 \ud835\udd2b\ud835\udd26\ud835\udd24\ud835\udd25\ud835\udd31,\r\n//    \u210c\ud835\udd26\ud835\udd30 \ud835\udd30\ud835\udd2d\ud835\udd26\ud835\udd2f\ud835\udd26\ud835\udd31 \ud835\udd22\ud835\udd2b\ud835\udd21\ud835\udd32\ud835\udd2f\ud835\udd22\ud835\udd30, \ud835\udd26\ud835\udd2b \ud835\udd31\ud835\udd25\ud835\udd22\ud835\udd26\ud835\udd2f \ud835\udd34\ud835\udd26\ud835\udd29\ud835\udd29 \ud835\udd31\ud835\udd2c \ud835\udd23\ud835\udd26\ud835\udd24\ud835\udd25\ud835\udd31.\r\n//\r\n//\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC721 {\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    function transfer(address to, uint256 tokenId) external;\r\n}\r\n\r\ninterface IConcord {\r\n    function bestowTokensMany(\r\n        address[] calldata _to,\r\n        uint256[] calldata _tokens,\r\n        uint256[] calldata _amounts\r\n    ) external;\r\n}\r\n\r\ncontract AstarothsVengeance {\r\n    address constant burnAddress =\r\n        address(0x000000000000000000000000000000000000dEaD);\r\n    address constant wagdieAuthor =\r\n        address(0x8d2Eb1c6Ab5D87C5091f09fFE4a5ed31B1D9CF71);\r\n\r\n    bool public vengeanceAchieved = false;\r\n\r\n    struct Acolytes {\r\n        uint256 wagdieTokenId;\r\n        uint256 acolyteTokenId;\r\n        bool vengeanceAgreed;\r\n    }\r\n\r\n    mapping(address => Acolytes) private submissions;\r\n    address[] private acolyteAddresses;\r\n\r\n    IERC721 public wagdieContract;\r\n    IERC721 public acolyteContract;\r\n    IConcord public concordContract;\r\n\r\n    constructor() {\r\n        wagdieContract = IERC721(\r\n            address(0x659A4BdaAaCc62d2bd9Cb18225D9C89b5B697A5A)\r\n        );\r\n        acolyteContract = IERC721(\r\n            address(0xE7061488cE937012dadee6F82608cB5becaFF8D9)\r\n        );\r\n        concordContract = IConcord(\r\n            address(0x1d38150f1Fd989Fb89Ab19518A9C4E93C5554634)\r\n        );\r\n    }\r\n\r\n    // Acolytes arrive to demand vengeance for Astaroth\r\n    function sendAcolyte(uint256 wagdieTokenId, uint256 acolyteTokenId) public {\r\n        require( submissions[msg.sender].wagdieTokenId == 0 && submissions[msg.sender].acolyteTokenId == 0, \"This address has already sent an Acolyte.\" );\r\n        require(acolyteTokenId >= 31 && acolyteTokenId <= 43,\"This AKIB Hero is not an Acolyte of Astaroth.\");\r\n        require(!vengeanceAchieved, \"Cannot join the pact, after vengeance has been achieved.\");\r\n\r\n        wagdieContract.transferFrom(msg.sender, address(this), wagdieTokenId);\r\n        acolyteContract.transferFrom(msg.sender, address(this), acolyteTokenId);\r\n\r\n        // Upon entry, arrive with a sense of unfulfilled vengeance\r\n        acolyteAddresses.push(msg.sender);\r\n        submissions[msg.sender] = Acolytes(\r\n            wagdieTokenId,\r\n            acolyteTokenId,\r\n            false\r\n        );\r\n    }\r\n\r\n    // Once Vengeance has been granted and agreed, Acolytes may return\r\n    function returnAcolyte() public {\r\n        require(vengeanceAchieved, \"Vengeance has not yet been achieved.\");\r\n\r\n        for (uint i = 0; i < acolyteAddresses.length; i++) {\r\n            require(submissions[acolyteAddresses[i]].vengeanceAgreed, \"Not all Acolytes have agreed to vengeance.\");\r\n        }\r\n\r\n        Acolytes storage submission = submissions[msg.sender];\r\n\r\n        require(submission.wagdieTokenId > 0 && submission.acolyteTokenId > 0, \"No Acolyte from this address is present.\");\r\n\r\n        // Transfer the tokens back to the sender\r\n        wagdieContract.transfer(msg.sender, submission.wagdieTokenId);\r\n        acolyteContract.transfer(msg.sender, submission.acolyteTokenId);\r\n\r\n        // Remove the user's address from acolyteAddresses\r\n        _removeAddressFromSubmitters(_findAddressIndex(msg.sender));\r\n    }\r\n\r\n    // The Two may slay random Acolytes\r\n    function slayAcolyte() public {\r\n        require(\r\n            msg.sender == wagdieAuthor,\r\n            \"Fates can only be controlled by The Two.\"\r\n        );\r\n        require(acolyteAddresses.length > 0, \"No acolytes to slay.\");\r\n\r\n        // Select Random Acolyte\r\n        uint256 rng = _getPseudoRandomNumber();\r\n        uint256 submitterCount = acolyteAddresses.length;\r\n        uint256 selectedAddressIndex = rng % submitterCount;\r\n        address selectedAddress = acolyteAddresses[selectedAddressIndex];\r\n\r\n        // Burn Acolyte Token Pair\r\n        wagdieContract.transferFrom(\r\n            address(this),\r\n            burnAddress,\r\n            submissions[selectedAddress].wagdieTokenId\r\n        );\r\n        acolyteContract.transferFrom(\r\n            address(this),\r\n            burnAddress,\r\n            submissions[selectedAddress].acolyteTokenId\r\n        );\r\n\r\n        // Remove Acolyte From Set\r\n        _removeAddressFromSubmitters(selectedAddressIndex);\r\n    }\r\n\r\n    // The Two grant an opportunity at vengeance\r\n    function grantVengeance() public {\r\n        require(\r\n            msg.sender == wagdieAuthor,\r\n            \"Vengeance can only be granted by The Two.\"\r\n        );\r\n\r\n        vengeanceAchieved = true;\r\n\r\n    }\r\n\r\n    // Individual Acolyte agrees to vengeance\r\n    function agreeVengeance() public {\r\n        require(\r\n            submissions[msg.sender].wagdieTokenId != 0,\r\n            \"No Acolyte from this address is present.\"\r\n        );\r\n\r\n        submissions[msg.sender].vengeanceAgreed = true;\r\n\r\n    }\r\n\r\n    // Random number generator\r\n    function _getPseudoRandomNumber() private view returns (uint256) {\r\n        return\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        blockhash(block.number - 1),\r\n                        block.timestamp\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    // Locate address index within array (for removals)\r\n    function _findAddressIndex(address addr) private view returns (uint256) {\r\n        for (uint256 i = 0; i < acolyteAddresses.length; i++) {\r\n            if (acolyteAddresses[i] == addr) {\r\n                return i;\r\n            }\r\n        }\r\n        revert(\"Address not found in acolyteAddresses.\");\r\n    }\r\n\r\n    // Remove address from array by index (does not affect memory)\r\n    function _removeAddressFromSubmitters(uint256 index) private {\r\n        uint256 lastAddressIndex = acolyteAddresses.length - 1;\r\n        acolyteAddresses[index] = acolyteAddresses[lastAddressIndex];\r\n        acolyteAddresses.pop();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"acolyteContract\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agreeVengeance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"concordContract\",\"outputs\":[{\"internalType\":\"contract IConcord\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grantVengeance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnAcolyte\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wagdieTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acolyteTokenId\",\"type\":\"uint256\"}],\"name\":\"sendAcolyte\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slayAcolyte\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vengeanceAchieved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wagdieContract\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AstarothsVengeance", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://58220902cb7501e179d3e176bafac3a49ed0d1e7ca624d7e83006f4e21b66dc4"}