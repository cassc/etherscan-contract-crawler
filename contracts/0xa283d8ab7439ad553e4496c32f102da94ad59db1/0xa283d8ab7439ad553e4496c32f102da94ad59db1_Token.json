{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Function can only be performed by the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Invalid address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Token is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    uint256 private constant _totalSupply = 76543000000000000000000;\r\n    uint256 private constant _top = 100;\r\n    uint256 private constant _contract_deployment_time = 1603395000; // intended contract deployment time\r\n    uint256 private constant _time_delayed_start = 2700;\r\n\r\n    uint256 public holdersCount;\r\n    address constant GUARD = address(1);\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => address) private _nextHolders;\r\n\r\n    function name() public pure returns (string memory) {\r\n        return \"X\";\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return \"X\";\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n    \r\n    function totalSupply() external pure returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    constructor () public {\r\n        _nextHolders[GUARD] = GUARD;\r\n\r\n        addHolder(msg.sender, 76543000000000000000000);\r\n\r\n        emit Transfer(address(0), msg.sender, 76543000000000000000000);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        require(spender != address(0), \"Invalid address 3\");\r\n\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function balanceOf(address who) public view returns (uint256) {\r\n        return _balances[who];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(_balances[msg.sender] >= value, \"Insufficient balance\");\r\n\r\n        return _transferFrom(msg.sender, to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(_balances[from] >= value, \"Insufficient balance\");\r\n        require(_allowances[from][msg.sender] >= value, \"Insufficient balance\");\r\n        \r\n        _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value);\r\n\r\n        return _transferFrom(from, to, value);\r\n    }\r\n\r\n    function _transferFrom(address from, address to, uint256 value) private returns (bool) {\r\n        address random = _getRandomHolder();\r\n        \r\n        uint256 tax;\r\n        \r\n        if(now > _contract_deployment_time + _time_delayed_start){ // tax rate only starts after\r\n            tax = value.mul(22).div(100);          // contract deployment time (hardcoded above);\r\n            value = value.mul(78).div(100);\r\n        }else{\r\n            tax = 0;\r\n        }\r\n        \r\n        \r\n        if (_balances[to] == 0) {\r\n            addHolder(to, value);\r\n        } else {\r\n            _updateBalance(to, _balances[to].add(value));\r\n        }\r\n\r\n        _updateBalance(random, _balances[random].add(tax));\r\n\r\n        if (_balances[from].sub(value) == 0) {\r\n            removeHolder(from);\r\n        } else {\r\n            _updateBalance(from, _balances[from].sub(value));\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n        emit Transfer(from, random, tax);\r\n        return true;\r\n    }\r\n\r\n    //make private\r\n    function addHolder(address who, uint256 balance) private {\r\n        require(_nextHolders[who] == address(0), \"Invalid address (add holder)\");\r\n\r\n        address index = _findIndex(balance);\r\n        _balances[who] = balance;\r\n\r\n        _nextHolders[who] = _nextHolders[index];\r\n        _nextHolders[index] = who;\r\n\r\n        holdersCount = holdersCount.add(1);\r\n    }\r\n\r\n    //make private\r\n    function removeHolder(address who) private {\r\n        require(_nextHolders[who] != address(0), \"Invalid address (remove holder)\");\r\n\r\n        address prevHolder = _findPrevHolder(who);\r\n        _nextHolders[prevHolder] = _nextHolders[who];\r\n        _nextHolders[who] = address(0);\r\n        _balances[who] = 0;\r\n        holdersCount = holdersCount.sub(1);\r\n    }\r\n\r\n    function getTopHolders(uint256 k) public view returns (address[] memory) {\r\n        require(k <= holdersCount, \"Index out of bounds\");\r\n        address[] memory holdersLists = new address[](k);\r\n        address currentAddress = _nextHolders[GUARD];\r\n        \r\n        for(uint256 i = 0; i < k; ++i) {\r\n            holdersLists[i] = currentAddress;\r\n            currentAddress = _nextHolders[currentAddress];\r\n        }\r\n\r\n        return holdersLists;\r\n    }\r\n\r\n    function getTopHolder(uint256 n) public view returns (address) {\r\n        require(n <= holdersCount, \"Index out of bounds\");\r\n        address currentAddress = _nextHolders[GUARD];\r\n        \r\n        for(uint256 i = 0; i < n; ++i) {\r\n            currentAddress = _nextHolders[currentAddress];\r\n        }\r\n\r\n        return currentAddress;\r\n    }\r\n\r\n    function _updateBalance(address who, uint256 newBalance) internal {\r\n        require(_nextHolders[who] != address(0), \"Invalid address (update balance)\");\r\n        address prevHolder = _findPrevHolder(who);\r\n        address nextHolder = _nextHolders[who];\r\n\r\n        if(_verifyIndex(prevHolder, newBalance, nextHolder)){\r\n            _balances[who] = newBalance;\r\n        } else {\r\n            removeHolder(who);\r\n            addHolder(who, newBalance);\r\n        }\r\n    }\r\n\r\n    function _verifyIndex(address prevHolder, uint256 newValue, address nextHolder) internal view returns(bool) {\r\n        return (prevHolder == GUARD || _balances[prevHolder] >= newValue) && \r\n            (nextHolder == GUARD || newValue > _balances[nextHolder]);\r\n    }\r\n\r\n    function _findIndex(uint256 newValue) internal view returns(address) {\r\n        address candidateAddress = GUARD;\r\n        while(true) {\r\n            if(_verifyIndex(candidateAddress, newValue, _nextHolders[candidateAddress]))\r\n                return candidateAddress;\r\n                \r\n            candidateAddress = _nextHolders[candidateAddress];\r\n        }\r\n    }\r\n\r\n    function _isPrevHolder(address who, address prev) internal view returns(bool) {\r\n        return _nextHolders[prev] == who;\r\n    }\r\n\r\n    function _findPrevHolder(address who) internal view returns(address) {\r\n        address currentAddress = GUARD;\r\n        while(_nextHolders[currentAddress] != GUARD) {\r\n            if(_isPrevHolder(who, currentAddress))\r\n                return currentAddress;\r\n                \r\n            currentAddress = _nextHolders[currentAddress];\r\n        }\r\n\r\n        return address(0);\r\n    }\r\n\r\n    function _getRandomHolder() private view returns (address) {\r\n        uint256 mod = 100;\r\n\r\n        if (holdersCount < 100) {\r\n            mod = holdersCount;\r\n        }\r\n\r\n        uint256 n = uint256(keccak256(abi.encodePacked(now, block.difficulty, msg.sender)));\r\n        uint256 randomIndex = n % mod;\r\n\r\n        return getTopHolder(randomIndex);\r\n    }\r\n\r\n    function quickSort(uint[] memory arr, int left, int right) internal {\r\n        int i = left;\r\n        int j = right;\r\n        if(i==j) return;\r\n        uint pivot = arr[uint(left + (right - left) / 2)];\r\n        while (i <= j) {\r\n            while (arr[uint(i)] < pivot) i++;\r\n            while (pivot < arr[uint(j)]) j--;\r\n            if (i <= j) {\r\n                (arr[uint(i)], arr[uint(j)]) = (arr[uint(j)], arr[uint(i)]);\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n        if (left < j)\r\n            quickSort(arr, left, j);\r\n        if (i < right)\r\n            quickSort(arr, i, right);\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getTopHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"}],\"name\":\"getTopHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8b6a10589191301bf10d1038c3d2cc13629e1b5de070b303b8df69c487986c2f"}