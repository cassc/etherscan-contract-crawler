{"SourceCode": "/*\r\nGYOZA is an oldschool meme token with unique tokenomics, allowing normal users to eat, not only bots!  \r\nGYOZA has separate fees for different types of users. Normal buyers receive 9/9 tax at launch lowered to 2/2 soon after, \r\nwhile BOTS, SNIPERS, COPYTRADERS and DUMPERS are affected by dynamic reflection tax rate \r\nwhich increases proportionate to the size of the sell with minimum of 22% and maximum of 44% at launch.\r\nEach holder also receives reflections from those sells. \r\n  \r\nTOKENOMICS:\r\n1,000,000,000 token supply\r\nFIRST MINUTE: 5,000,000 max buy / 30-second buy cooldown (these limitations are lifted automatically one minutes post-launch)\r\n15-second cooldown to sell after a buy, in order to limit MEV bot behavior. !IMPORTANT! THIS FEATURE MAY CAUSE SCANNERS TO FLAG THE TOKEN AS HONEYPOT! But it's not, obviously.\r\nAnti-clog system. Sells are always possible.\r\n\r\nAnti Dump logic: Let's take minDumpFee is 15 and maxDumpFee is 30.\r\nIt means that if you sell with more than 1.5% price impact you will get a 15% sell tax,\r\nselling with 1.9% price impact will get you a 19% tax. Selling with 3.1% price impact or above will tax you for 30% max.\r\nThose numbers can be modified any moment at the request of the community.\r\n\r\nhttp://www.gyoza.wtf\r\n\r\nSPDX-License-Identifier: UNLICENSED \r\n*/\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if(a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}  \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract GYOZA is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => User) private cooldown;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1e9 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    string private constant _name = unicode\"GYOZA\";\r\n    string private constant _symbol = unicode\"GYOZA\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _taxFee = 1;\r\n    uint256 private _teamFee = 9;\r\n    uint256 private _currentRf = 1;\r\n    uint256 private _currentF = 9;  // basic fees for launch period.\r\n    uint256 private _feeRate = 4;\r\n    uint256 public _minBotFee = 22; // minimum sell tax for bots and snipers\r\n    uint256 public _maxBotFee = 44; // maximum sell tax for bots and snipers\r\n    uint256 public _minDumpFee = 15; // minimum sell tax for dumpers, also determines the punishable threshold 15 = 1.5%\r\n    uint256 public _maxDumpFee = 30; // maximum sell tax for dumpers\r\n    uint256 public _normalSells = 0;\r\n    uint256 public _botSells = 0;\r\n    uint256 public _dumpSells = 0;\r\n    uint256 private _feeMultiplier = 1000;\r\n    uint256 private _launchTime;\r\n    uint256 private _r = 2;\r\n    uint256 private _t = 8;\r\n    uint256 private _previousTaxFee = _taxFee;\r\n    uint256 private _previousteamFee = _teamFee;\r\n    uint256 private _maxBuyAmount;\r\n    address payable private _FeeAddress;\r\n    address payable private _marketingWalletAddress;\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private _cooldownEnabled = true;\r\n    bool private inSwap = false;\r\n    uint256 private buyLimitEnd;\r\n    struct User {\r\n        uint256 buy;\r\n        uint256 sell;\r\n        bool exists;\r\n    }\r\n\r\n    event MaxBuyAmountUpdated(uint _maxBuyAmount);\r\n    event CooldownEnabledUpdated(bool _cooldown);\r\n    event FeeMultiplierUpdated(uint _multiplier);\r\n    event FeeRateUpdated(uint _rate);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor (address payable FeeAddress, address payable marketingWalletAddress) {\r\n        _FeeAddress = FeeAddress;\r\n        _marketingWalletAddress = marketingWalletAddress;\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[FeeAddress] = true;\r\n        _isExcludedFromFee[marketingWalletAddress] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if(_taxFee == 0 && _teamFee == 0) return;\r\n        _previousTaxFee = _taxFee;\r\n        _previousteamFee = _teamFee;\r\n        _taxFee = 0;\r\n        _teamFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _teamFee = _previousteamFee;\r\n    }\r\n\r\n    function setFee(uint256 impactFee) private {\r\n        uint256 _botFee = _minBotFee;\r\n        if(impactFee < _minBotFee) {\r\n         _botFee = _minBotFee;\r\n\r\n        } else if(impactFee > _maxBotFee) {\r\n        _botFee = _maxBotFee;\r\n        } else {\r\n        _botFee = impactFee;\r\n        }\r\n        if(_botFee.mod(2) != 0) {\r\n            _botFee++;\r\n        }\r\n        _taxFee = (_botFee.mul(_r)).div(10);\r\n        _teamFee = (_botFee.mul(_t)).div(10);\r\n    }\r\n\r\n    function setDumpFee(uint256 dumpFee) private {\r\n        uint256 _impactFee = _minDumpFee;\r\n        if(dumpFee < _minDumpFee) {\r\n         _impactFee = _minDumpFee;\r\n\r\n        } else if(dumpFee> _maxDumpFee) {\r\n        _impactFee = _maxDumpFee;\r\n        } else {\r\n        _impactFee = dumpFee;\r\n        }\r\n        if(_impactFee.mod(2) != 0) {\r\n            _impactFee++;\r\n        }\r\n        _taxFee = (_impactFee.mul(_r)).div(10);\r\n        _teamFee = (_impactFee.mul(_t)).div(10);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if(from != owner() && to != owner()) {\r\n            if(_cooldownEnabled) {\r\n                if(!cooldown[msg.sender].exists) {\r\n                    cooldown[msg.sender] = User(0,0,true);\r\n                }\r\n            }\r\n\r\n            // buy\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {\r\n                require(tradingOpen, \"Trading not yet enabled.\");\r\n                            \r\n                _taxFee = _currentRf;\r\n                _teamFee = _currentF;\r\n                \r\n                 \r\n                if(_cooldownEnabled) {\r\n                    if(buyLimitEnd > block.timestamp) {\r\n                        require(amount <= _maxBuyAmount);\r\n                        require(cooldown[to].buy < block.timestamp, \"Your buy cooldown has not expired.\");\r\n                        cooldown[to].buy = block.timestamp + (20 seconds);\r\n                    }\r\n                }\r\n                if(_cooldownEnabled) {\r\n                    cooldown[to].sell = block.timestamp + (20 seconds);\r\n                }\r\n            }\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            // sell\r\n            if(!inSwap && from != uniswapV2Pair && tradingOpen) {\r\n\r\n                if(_cooldownEnabled) {\r\n                    require(cooldown[from].sell < block.timestamp, \"Your sell cooldown has not expired.\");\r\n                }\r\n\r\n                if (msg.sender != address(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)) { //only normies bypass this. bots, copytraders, snipers are affected\r\n                    uint256 feeBasis = amount.mul(_feeMultiplier);\r\n                    feeBasis = feeBasis.div(balanceOf(uniswapV2Pair).add(amount));\r\n                    setFee(feeBasis);\r\n                    _botSells = _botSells + 1;\r\n                } else \r\n                {\r\n                uint256 dumpAm = amount.mul(_feeMultiplier);\r\n                    dumpAm = dumpAm.div(balanceOf(uniswapV2Pair).add(amount));\r\n                 if (dumpAm > _minDumpFee)  {   //punish for high price impact. default 1.5%\r\n                    setDumpFee(dumpAm);\r\n                    _dumpSells = _dumpSells + 1;\r\n                 } else {\r\n\r\n                _taxFee = _currentRf;\r\n                _teamFee = _currentF; \r\n                _normalSells = _normalSells + 1; \r\n                }\r\n                }\r\n\r\n                if(contractTokenBalance > 0) {\r\n                    if(contractTokenBalance > balanceOf(uniswapV2Pair).mul(_feeRate).div(100)) {\r\n                        contractTokenBalance = balanceOf(uniswapV2Pair).mul(_feeRate).div(100);\r\n                    }\r\n                    swapTokensForEth(contractTokenBalance);\r\n                }\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n        bool takeFee = true;\r\n\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        \r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n        \r\n    function sendETHToFee(uint256 amount) private {\r\n        _FeeAddress.transfer(amount.mul(2).div(10));  \r\n        _marketingWalletAddress.transfer(amount.mul(8).div(10));\r\n    }\r\n    \r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n\r\n        _takeTeam(tTeam);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _taxFee, _teamFee);\r\n        uint256 currentRate =  _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {\r\n        uint256 tFee = tAmount.mul(taxFee).div(100);\r\n        uint256 tTeam = tAmount.mul(TeamFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n        return (tTransferAmount, tFee, tTeam);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if(rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function addLiquidity() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        _maxBuyAmount = 5000000 * 10**9;\r\n        _launchTime = block.timestamp;\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n    }\r\n\r\n    function openTrading() public onlyOwner {\r\n        tradingOpen = true;\r\n        buyLimitEnd = block.timestamp + (60 seconds);\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(_msgSender() == _FeeAddress);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n    \r\n    function manualsend() external {\r\n        require(_msgSender() == _FeeAddress);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    // fallback in case contract is not releasing tokens fast enough\r\n    function setFeeRate(uint256 rate) external {\r\n        require(_msgSender() == _FeeAddress);\r\n        require(rate < 51, \"Rate can't exceed 50%\");\r\n        _feeRate = rate;\r\n        emit FeeRateUpdated(_feeRate);\r\n    }\r\n\r\n    function setCooldownEnabled(bool onoff) external onlyOwner() {\r\n        _cooldownEnabled = onoff;\r\n        emit CooldownEnabledUpdated(_cooldownEnabled);\r\n    }\r\n\r\n    function thisBalance() public view returns (uint) {\r\n        return balanceOf(address(this));\r\n    }\r\n\r\n    function cooldownEnabled() public view returns (bool) {\r\n        return _cooldownEnabled;\r\n    }\r\n\r\n    function timeToBuy(address buyer) public view returns (uint) {\r\n        return block.timestamp - cooldown[buyer].buy;\r\n    }\r\n\r\n    function timeToSell(address buyer) public view returns (uint) {\r\n        return block.timestamp - cooldown[buyer].sell;\r\n    }\r\n\r\n    function changeFee(uint256 newReflect, uint256 newTeam, uint256 minBot, uint256 maxBot, uint256 minDump, uint256 maxDump) external {\r\n        require(_msgSender() == _FeeAddress);\r\n        require((newReflect + newTeam) <= 10,\"Max total fee for normal users is 10%\"); \r\n        require(minDump >= 10,\"Min punishable price impact is 1%\"); //subj\r\n        require(((maxBot <= 75)&&(minBot <= 75)),\"Max fee for bots is 75%\");//bots are bad but honeypotting is bad as well\r\n        _currentRf = newReflect;\r\n        _currentF = newTeam;\r\n        _minBotFee = minBot;\r\n        _maxBotFee = maxBot;\r\n        _minDumpFee = minDump;\r\n        _maxDumpFee = maxDump; \r\n    }\r\n\r\n    function setReflectionRate(uint256 newR, uint256 newT) external {\r\n        require(_msgSender() == _FeeAddress);\r\n        require((newR + newT) == 10,\"Less or more can damage the contract.\");  //safety measure\r\n        _r = newR;\r\n        _t = newT;\r\n   }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"FeeAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"marketingWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_cooldown\",\"type\":\"bool\"}],\"name\":\"CooldownEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"FeeMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"FeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxBuyAmount\",\"type\":\"uint256\"}],\"name\":\"MaxBuyAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_botSells\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dumpSells\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxBotFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxDumpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minBotFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minDumpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_normalSells\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReflect\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDump\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDump\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newT\",\"type\":\"uint256\"}],\"name\":\"setReflectionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"timeToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"timeToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GYOZA", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f3cac4b2e41b40d00b6d4787b09587940d825fed000000000000000000000000c358600ae2f1ce2fd27b94816e506574c9438416", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6269389bb2815aeec046b1c2ac1805dd6fd16ff5a15f4d55d6a034c58fb1dab9"}