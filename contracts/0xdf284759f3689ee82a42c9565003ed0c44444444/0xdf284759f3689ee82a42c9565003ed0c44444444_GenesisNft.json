{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC4906.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC5267.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ShortStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ITokenDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\ninterface ITokenDistribution {\\n    function setTotalClaimed(address wallet, uint256 totalClaimed) external;\\n\\n    function claimedTokens(address _account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IWorkToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\ninterface IWorkToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/nft/GenesisNft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4906.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport \\\"./GenesisNftData.sol\\\";\\nimport \\\"./../interface/ITokenDistribution.sol\\\";\\nimport \\\"./../interface/IWorkToken.sol\\\";\\n\\nerror StartTimeInvalid();\\nerror InitHasCompleted();\\nerror RewarderRoleNotPresent();\\n\\nerror AccountMintedPreviously();\\nerror SignatureInvalid();\\nerror NftMintUnavailable();\\nerror MintTypeInvalid();\\n\\nerror NftNotOwned();\\nerror NftLocked(uint256 lockedTill);\\nerror NftNotExists();\\nerror UnstakeAmountNotAllowed();\\nerror AllowanceExceeded(uint256 allowance);\\nerror TransferFailed();\\nerror ArrayLengthMismatch();\\nerror LockPeriodInvalid();\\nerror StakeAtMintMaxExceeded();\\n\\ncontract GenesisNft is ERC721, Ownable, EIP712, IERC4906 {\\n    GenesisNftData private immutable nftData;\\n    ITokenDistribution private immutable tokenDistribution;\\n    IWorkToken private immutable token;\\n\\n    uint256 private constant NFT_MAX_LOCK_PERIOD = 550 days;\\n    uint256 private constant NFT_MAX_AMOUNT = 999;\\n    uint256 private constant MAX_LEVEL = 80;\\n    uint256 public constant BASE_STAKE = 50;\\n    uint256 private constant TYPE_GUAR = 0;\\n    uint256 private constant TYPE_FCFS = 1;\\n    uint256 private constant TYPE_INV = 2;\\n    uint256 public constant DAILY_STAKING_ALLOWANCE = 294;\\n    uint256 private constant COUNT_GUAR = 400;\\n    uint256 private constant COUNT_FCFS = 150;\\n    uint256 private constant COUNT_INV = 449;\\n    uint256 private constant ONE_E18 = 10 ** 18;\\n    uint256 private constant TOTAL_STAKE_AT_MINT_MAX = 24000000 * ONE_E18;\\n\\n    uint128 public startTime;\\n    uint16 public nftIdCounter;\\n    uint8 public initCompleted;\\n\\n    string private imageFolder = \\\"ipfs://QmdXcctk5G1rkqFuqsEAVhoKxJ6tMoV1fjqYRXri3VY47b/\\\";\\n    address public voucherSigner;\\n\\n    mapping(address => bool) public accountMinted;\\n    mapping(address => bool) public isRewarder;\\n    mapping(uint256 => NftTotalMonth) public monthlyTotal;\\n    struct NftTotalMonth {\\n        uint32 totalShares;\\n        uint128 totalStaked;\\n        uint128 minimumStaked;\\n    }\\n\\n    mapping(uint256 => NftInfo) public nft;\\n    struct NftInfo {\\n        uint16 tier;\\n        uint16 voucherId;\\n        uint64 lockPeriod;\\n        uint128 stakedAtMint;\\n        bytes32 encodedAttributes;\\n        mapping(uint256 => NftInfoMonth) monthly;\\n    }\\n    struct NftInfoMonth {\\n        uint16 shares;\\n        uint8 hasWithdrawn;\\n        uint128 staked;\\n        uint128 minimumStaked;\\n    }\\n\\n    event Stake(uint256 indexed tokenId, uint256 amount);\\n    event Unstake(uint256 indexed tokenId, uint256 amount);\\n    event Evolve(uint256 indexed tokenId, uint256 tier);\\n    event Destroy(uint256 indexed tokenId);\\n\\n    event InitCompleted();\\n    event IpfsFolderChanged(string indexed ipfsFolder);\\n    event VoucherSignerSet(address indexed voucherSigner);\\n    event RewarderSet(address indexed rewarder, bool isRewarder);\\n    event StartTimeSet(uint256 indexed startTime);\\n    event RemainingToTreasuryMinted(uint256 indexed amount);\\n\\n    /**\\n     * @notice Deploying the NFT contract and sets the Admin role and references Erc20 Token, TokenDistribution and NftData contracts.\\n     * @dev Requires the Erc20Token, TokenDistribution and NftData contracts to be deployed first and they addresses set to the constants.\\n     * @param _nftName The name of the nft, which will be Work X Genesis NFT in this case.\\n     * @param _nftSymbol The symbol of the nft, which will be Work X Genesis NFT in this case.\\n     * @param _workTokenAddress The address of the $WORK token contract (ERC20).\\n     * @param _tokenDistributionAddress The TokenDistribution address that will be used to mint tokens and update the claimed amount.\\n     * @param _nftDataAddress The address of the NftData contract that will be used to get the data for the nft, like how many tokens are needed for each level.\\n     * @param _voucherSigner The address of account that is authorized to sign NFT minting vouchers.\\n     **/\\n    constructor(\\n        string memory _nftName,\\n        string memory _nftSymbol,\\n        address _workTokenAddress,\\n        address _tokenDistributionAddress,\\n        address _nftDataAddress,\\n        address _voucherSigner\\n    ) ERC721(_nftName, _nftSymbol) EIP712(_nftName, \\\"1.0.0\\\") {\\n        if (\\n            _workTokenAddress == address(0) ||\\n            _tokenDistributionAddress == address(0) ||\\n            _nftDataAddress == address(0) ||\\n            _voucherSigner == address(0)\\n        ) {\\n            revert AddressInvalid();\\n        }\\n        token = IWorkToken(_workTokenAddress);\\n        tokenDistribution = ITokenDistribution(_tokenDistributionAddress);\\n        nftData = GenesisNftData(_nftDataAddress);\\n        voucherSigner = _voucherSigner;\\n        startTime = uint128(block.timestamp + 22 days);\\n    }\\n\\n    /**\\n     * @notice Combine ERC721 with ERC4906\\n     **/\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /****\\n     **** ONLY OWNER\\n     ****/\\n\\n    /**\\n     * @notice Sets the IPFS folder where the NFT images are stored.\\n     * @param _folder The folder that will be set.\\n     **/\\n    function setIpfsFolder(string calldata _folder) external onlyOwner {\\n        imageFolder = _folder;\\n        emit IpfsFolderChanged(_folder);\\n        emit BatchMetadataUpdate(0, NFT_MAX_AMOUNT);\\n    }\\n\\n    /**\\n     * @notice Sets initCompleted to 1\\n     * @dev This is used to make sure that the attributes can not be changed after the init is completed.\\n     **/\\n    function setInitCompleted() external onlyOwner {\\n        initCompleted = 1;\\n        emit InitCompleted();\\n        emit BatchMetadataUpdate(0, NFT_MAX_AMOUNT);\\n    }\\n\\n    /**\\n     * @notice Sets the attributes for a batch of NFTs.\\n     * @dev This function can only be called before the init is completed.\\n     * The array of tokenIds and the array of encodedAttributes should be the same length.\\n     * The array of tokenIds should be ordered and contain no gaps\\n     * @param _tokenId The tokenId of the NFT.\\n     * @param _encodedAttributes The 11 NFT attributes encoded in a bytes32.\\n     **/\\n    function setNftAttributes(uint256[] calldata _tokenId, bytes32[] calldata _encodedAttributes) external onlyOwner {\\n        if (_tokenId.length != _encodedAttributes.length || _tokenId.length == 0) {\\n            revert ArrayLengthMismatch();\\n        }\\n        if (initCompleted != 0) {\\n            revert InitHasCompleted();\\n        }\\n        for (uint256 id = 0; id < _tokenId.length; id++) {\\n            nft[_tokenId[id]].encodedAttributes = _encodedAttributes[id];\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the address of the Voucher Signer.\\n     * @param _voucherSigner Address of the vouchersigner that will be set.\\n     **/\\n    function setVoucherSigner(address _voucherSigner) external onlyOwner {\\n        voucherSigner = _voucherSigner;\\n        emit VoucherSignerSet(_voucherSigner);\\n    }\\n\\n    /**\\n     * @notice Sets or unsets a specific address to be a rewarder, they can add tokens to any NFT bypassing the stakingAllowance.\\n     * @param _rewarder Address of the vouchersigner that will be set.\\n     **/\\n    function setRewarder(address _rewarder, bool _isRewarder) external onlyOwner {\\n        isRewarder[_rewarder] = _isRewarder;\\n        emit RewarderSet(_rewarder, _isRewarder);\\n    }\\n\\n    /**\\n     * @notice Sets the start time of the NFT reward mechanism.\\n     * @param _startTime The new start time.\\n     **/\\n    function setStartTime(uint256 _startTime) external onlyOwner {\\n        _startTime = uint256(uint128(_startTime));\\n        if (startTime <= block.timestamp || _startTime <= block.timestamp) {\\n            revert StartTimeInvalid();\\n        }\\n        startTime = uint128(_startTime);\\n        emit StartTimeSet(_startTime);\\n    }\\n\\n    /**\\n     * @notice After the minting period has ended, the remaining NFT will be minted to the treasury account.\\n     **/\\n    function mintRemainingToTreasury() external onlyOwner {\\n        if (initCompleted != 0) {\\n            revert InitHasCompleted();\\n        }\\n        if (startTime <= block.timestamp) {\\n            revert StartTimeInvalid();\\n        }\\n        for (uint256 i = nftIdCounter; i < NFT_MAX_AMOUNT; i++) {\\n            _mint(msg.sender, i);\\n        }\\n\\n        emit RemainingToTreasuryMinted(NFT_MAX_AMOUNT - nftIdCounter);\\n        nftIdCounter = uint16(NFT_MAX_AMOUNT);\\n    }\\n\\n    /**\\n     * @notice Rescue function to withdraw any ERC20 token mistakenly sent to the contract, except the $WORK token after init has completed.\\n     * @param _tokenAddress Address of the ERC20 token contract.\\n     * @param _amount Amount of the ERC20 token to withdraw.\\n     **/\\n    function withdrawTokens(address _tokenAddress, uint256 _amount) external payable onlyOwner {\\n        if (initCompleted == 0) {\\n            IERC20(_tokenAddress).transfer(msg.sender, _amount);\\n        } else {\\n            if (_tokenAddress != address(token)) {\\n                IERC20(_tokenAddress).transfer(msg.sender, _amount);\\n            } else {\\n                revert InitHasCompleted();\\n            }\\n        }\\n    }\\n\\n    /****\\n     **** EXTERNAL WRITE\\n     ****/\\n\\n    /**\\n     * @notice The function mintNft mints the Work X GenesisNft and mints an amount of tokens into the NFT these tokens are locked for a certain amount of time but the NFT is freely tradable.\\n     *  A voucher is constructed by Work X backend and only callers with a valid voucher can mint the NFT.\\n     * @dev Before giving out vouchers the tokenDistribution startTime has to be set, otherwise the tokens will not be locked correctly.\\n     * @param _voucherId The id of the voucher that will be used to mint the NFT.\\n     * @param _type The id of the minting type.\\n     * @param _lockPeriod The amount of time that the tokens will be locked in the NFT from the startTime of the distribution contract.\\n     * @param _amountToStake The amount of tokens that will be staked into the minted NFT.\\n     * @param _signature A signature signed by the minter role, to check if a voucher is valid.\\n     **/\\n    function mintNft(\\n        uint256 _voucherId,\\n        uint256 _type,\\n        uint256 _lockPeriod,\\n        uint256 _amountToStake,\\n        bytes calldata _signature\\n    ) external {\\n        if (accountMinted[msg.sender]) {\\n            revert AccountMintedPreviously();\\n        }\\n        bytes32 digest = _hashMint(_voucherId, _type, _lockPeriod, msg.sender, _amountToStake);\\n        if (!_verify(digest, _signature, voucherSigner)) {\\n            revert SignatureInvalid();\\n        }\\n        if (_lockPeriod > NFT_MAX_LOCK_PERIOD) {\\n            revert LockPeriodInvalid();\\n        }\\n\\n        uint256 oldCounter = nftIdCounter;\\n        if (_type == TYPE_GUAR) {\\n            if (oldCounter >= COUNT_GUAR) {\\n                revert NftMintUnavailable();\\n            }\\n        } else if (_type == TYPE_FCFS) {\\n            if (oldCounter >= COUNT_GUAR + COUNT_FCFS) {\\n                revert NftMintUnavailable();\\n            }\\n        } else if (_type == TYPE_INV) {\\n            if (oldCounter >= COUNT_GUAR + COUNT_FCFS + COUNT_INV) {\\n                revert NftMintUnavailable();\\n            }\\n        } else {\\n            revert MintTypeInvalid();\\n        }\\n\\n        accountMinted[msg.sender] = true;\\n\\n        if (_amountToStake > 0) {\\n            if (tokenDistribution.claimedTokens(msg.sender) == 0) {\\n                tokenDistribution.setTotalClaimed(msg.sender, _amountToStake);\\n            } else {\\n                _amountToStake = 0;\\n            }\\n        }\\n\\n        uint128 amountToStake = uint128(_amountToStake);\\n\\n        NftInfo storage _nft = nft[oldCounter];\\n        _nft.voucherId = uint16(_voucherId);\\n        _nft.lockPeriod = uint64(_lockPeriod);\\n        _nft.stakedAtMint = amountToStake;\\n        uint256 level = nftData.getLevel(amountToStake);\\n        _nft.tier = uint16(level / 10);\\n\\n        uint256 shares = nftData.shares(level) + BASE_STAKE;\\n        NftInfoMonth memory _info = NftInfoMonth(uint16(shares), 0, amountToStake, amountToStake);\\n        _nft.monthly[0] = _info;\\n\\n        NftTotalMonth memory totalMonthly = monthlyTotal[0];\\n        if (totalMonthly.totalStaked + amountToStake > TOTAL_STAKE_AT_MINT_MAX) {\\n            revert StakeAtMintMaxExceeded();\\n        }\\n        NftTotalMonth memory _monthTotal = NftTotalMonth(\\n            totalMonthly.totalShares + uint32(shares),\\n            uint128(totalMonthly.totalStaked + amountToStake),\\n            uint128(totalMonthly.minimumStaked + amountToStake)\\n        );\\n        monthlyTotal[0] = _monthTotal;\\n\\n        nftIdCounter = uint16(oldCounter + 1);\\n        if (_amountToStake > 0) {\\n            token.mint(address(this), uint256(amountToStake));\\n        }\\n        _safeMint(msg.sender, oldCounter);\\n    }\\n\\n    /**\\n     * @notice The function destroyNft destroys your NFT and gives you back the tokens in that NFT. Your \\\"Piggy bank will be destroyed forever.\\\"\\n     * @dev In order to destroy an NFT you need to be the owner, the lockPeriod should have passed.\\n     *  Its fine to use the block.timestamp for the comparison because the miner can not manipulate the block.timestamp by a practically significant amount.\\n     * @param _tokenId The id of the NFT that will destroyed.\\n     **/\\n    function destroyNft(uint256 _tokenId) external {\\n        if (msg.sender != ownerOf(_tokenId)) {\\n            revert NftNotOwned();\\n        }\\n        uint64 lockPeriod = nft[_tokenId].lockPeriod;\\n        if (block.timestamp <= lockPeriod + startTime) {\\n            revert NftLocked(lockPeriod + startTime);\\n        }\\n        uint256 currentMonth = getCurrentMonth();\\n        (uint256 stakedAmount, ) = getStaked(_tokenId, currentMonth);\\n\\n        _updateMonthly(_tokenId, false, stakedAmount, currentMonth);\\n        _updateShares(_tokenId, false);\\n\\n        nft[_tokenId].monthly[currentMonth].hasWithdrawn = 1;\\n\\n        _burn(_tokenId);\\n        if (!token.transfer(msg.sender, stakedAmount)) {\\n            revert TransferFailed();\\n        }\\n\\n        emit Destroy(_tokenId);\\n    }\\n\\n    /**\\n     * @notice The stake function stakes an amount of tokens into an NFT.\\n     * @dev The amount that can be staked for a specific tokenId builds up over time. You can only stake up to this allowance and you need to own enough tokens.\\n     * @param _tokenId The id of the nft that will receive the tokens.\\n     * @param _amount The amount of tokens that should be staked.\\n     **/\\n    function stake(uint256 _tokenId, uint256 _amount) external {\\n        _checkAllowance(_tokenId, _amount);\\n        _stake(_tokenId, _amount);\\n    }\\n\\n    /**\\n     * @notice The stakeAndEvolve function stakes tokens and afterwards evolves the NFT to the a higher tier if applicable.\\n     * @param _tokenId The id of the nft that will receive the tokens.\\n     * @param _amount The amount of tokens that should be staked.\\n     **/\\n    function stakeAndEvolve(uint256 _tokenId, uint256 _amount) external {\\n        _checkAllowance(_tokenId, _amount);\\n        _stake(_tokenId, _amount);\\n        _evolveTier(_tokenId);\\n    }\\n\\n    /**\\n     * @notice The reward function stakes an amount of tokens into any NFT, bypassing the stakingAllowance.\\n     * @dev Rewarders can stake tokens into any NFT, which potentially increases its level but does not evolve it to the next tier.\\n     * @param _tokenId The id of the nft that will receive the tokens.\\n     * @param _amount The amount of tokens that will be staked.\\n     **/\\n    function reward(uint256 _tokenId, uint256 _amount) external {\\n        if (!isRewarder[msg.sender]) {\\n            revert RewarderRoleNotPresent();\\n        }\\n        if (!_exists(_tokenId)) {\\n            revert NftNotExists();\\n        }\\n        _stake(_tokenId, _amount);\\n    }\\n\\n    /**\\n     * @notice The unstake function unstakes an amount of tokens from the NFT with a specific tokenId\\n     * @dev You can only unstake tokens after the lockPeriod has passed, and even then you can not unstake more than the minimum amount of tokens that is required to make the NFT level 10 in the current tier.\\n     * If an NFT evolves to the next tier it has to reach level 10 first and only the tokens that are above the minimum amount of tokens required to reach level 10 in the current tier can be unstaked. We call this unstakable amount \\\"Surplus\\\"\\n     * @param _tokenId The id of the NFT that will receive the tokens.\\n     * @param _amount The amount of tokens that will be staked.\\n     **/\\n    function unstake(uint256 _tokenId, uint256 _amount) external {\\n        if (msg.sender != ownerOf(_tokenId)) {\\n            revert NftNotOwned();\\n        }\\n        NftInfo storage _nft = nft[_tokenId];\\n        if (block.timestamp <= _nft.lockPeriod + startTime) {\\n            revert NftLocked(_nft.lockPeriod + startTime);\\n        }\\n\\n        uint256 currentMonth = getCurrentMonth();\\n        (uint256 stakedAmount, ) = getStaked(_tokenId, currentMonth);\\n        uint256 tokensRequiredForMaxLevelInTier = nftData.getTokensRequiredForTier(_nft.tier + 1);\\n        if (tokensRequiredForMaxLevelInTier + _amount > stakedAmount) {\\n            revert UnstakeAmountNotAllowed();\\n        }\\n\\n        _updateMonthly(_tokenId, false, _amount, currentMonth);\\n        nft[_tokenId].monthly[currentMonth].hasWithdrawn = 1;\\n\\n        if (!token.transfer(msg.sender, _amount)) {\\n            revert TransferFailed();\\n        }\\n\\n        emit Unstake(_tokenId, _amount);\\n    }\\n\\n    /**\\n     * @notice Tries to evolve the tier if you are the owner of the NFT.\\n     **/\\n    function evolveTier(uint256 _tokenId) external {\\n        if (msg.sender != ownerOf(_tokenId)) {\\n            revert NftNotOwned();\\n        }\\n        _evolveTier(_tokenId);\\n    }\\n\\n    /****\\n     **** private WRITE\\n     ****/\\n\\n    /**\\n     * @notice The _updateShares function updates the shares of an NFT, it needs to calculate the shares amount when an NFT changes level, or tier, or when it is destroyed.\\n     * @dev It calculates the new amount of shares of an nft, and then updates both the total, and NFT specific shares amounts.\\n     *      Note that unstaking does never change shares because the level can not decrease, only destroying an NFT does.\\n     * @param _tokenId The id of the NFT of which the shares will be updated.\\n     * @param _isIncreasingShares True if we have to add shares, false if we need to subtract shares.\\n     **/\\n    function _updateShares(uint256 _tokenId, bool _isIncreasingShares) private {\\n        uint256 currentMonth = getCurrentMonth();\\n        uint256 nftSharesOld = getShares(_tokenId, currentMonth);\\n        uint256 totalSharesCurrentMonth = _getTotalShares(currentMonth);\\n        NftTotalMonth storage _nftMonthTotal = monthlyTotal[currentMonth];\\n        NftInfo storage _nft = nft[_tokenId];\\n        NftInfoMonth storage _nftMonthToSet = _nft.monthly[currentMonth];\\n        for (uint256 i = currentMonth + 1; i >= 1; --i) {\\n            NftInfoMonth memory _nftMonth = _nft.monthly[i - 1];\\n            if (_nftMonth.staked > 0 || _nftMonth.hasWithdrawn == 1 || i == 1) {\\n                if (_isIncreasingShares) {\\n                    uint256 nftSharesNew = nftData.shares(nftData.getLevelCapped(_nftMonth.staked, _nft.tier)) +\\n                        BASE_STAKE;\\n                    _nftMonthToSet.shares = uint16(nftSharesNew);\\n                    _nftMonthTotal.totalShares = uint32(totalSharesCurrentMonth + nftSharesNew - nftSharesOld);\\n                } else {\\n                    _nftMonthToSet.shares = 0;\\n                    _nftMonthTotal.totalShares = uint32(totalSharesCurrentMonth - nftSharesOld);\\n                }\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases the tier of an NFT.\\n     * @dev It recalculates the tier of an NFT and set it, als the amount of shares is updated as we might jump several tiers/levels at once.\\n     * @param _tokenId The id of the NFT.\\n     **/\\n    function _evolveTier(uint256 _tokenId) private {\\n        (uint256 staked, ) = getStaked(_tokenId, getCurrentMonth());\\n        uint256 tier = nftData.getLevel(staked) / 10;\\n        NftInfo storage _nft = nft[_tokenId];\\n        _nft.tier = uint16(tier);\\n        _updateShares(_tokenId, true);\\n        emit Evolve(_tokenId, tier);\\n    }\\n\\n    /**\\n     * @notice The _stake function stakes an amount of tokens into an NFT of the owner.\\n     * @dev The amount that can be staked for a specific tokenId builds up over time. You can only stake up to this allowance and you need own enough tokens.\\n     *      The _updateMonthly function is called to update the monthly totals and the monthly totals of the NFT.\\n     *      The _updateShares function is called to update the shares totals and the shares of the NFT.\\n     *      The token.transferFrom function is called to transfer the tokens from the sender to the contract.\\n     * @param _tokenId The id of the NFT.\\n     * @param _amount The amount that will be staked.\\n     **/\\n    function _stake(uint256 _tokenId, uint256 _amount) private {\\n        _updateMonthly(_tokenId, true, _amount, getCurrentMonth());\\n        _updateShares(_tokenId, true);\\n        if (!token.transferFrom(msg.sender, address(this), _amount)) {\\n            revert TransferFailed();\\n        }\\n\\n        emit Stake(_tokenId, _amount);\\n    }\\n\\n    /**\\n     * @notice _updateMonthly updates the monthly balance of an NFT, as well as the global totals.\\n     * @dev Important: For - Loop through the previous months and to find the last non-zero value for \\\"nft.monthly\\\" Because you might have tokens in a month, but if you did not stake/unstake in that month, the value for that month will be never set (0).\\n     * @param _tokenId The id of the NFT.\\n     * @param _isIncreasingStake Whether the amount of tokens staked is increasing or decreasing.\\n     * @param _amount The amount of tokens staked.\\n     * @param _amount The month at which we are looking.\\n     **/\\n    function _updateMonthly(uint256 _tokenId, bool _isIncreasingStake, uint256 _amount, uint256 _month) private {\\n        NftInfo storage _nft = nft[_tokenId];\\n        NftInfoMonth storage _nftMonthToSet = _nft.monthly[_month];\\n        NftTotalMonth storage _totalToSet = monthlyTotal[_month];\\n        uint256 _minimumToCheck;\\n        for (uint256 i = _month + 1; i >= 1; --i) {\\n            NftInfoMonth memory _nftMonth = _nft.monthly[i - 1];\\n            if (_nftMonth.staked > 0 || _nftMonth.hasWithdrawn == 1 || i == 1) {\\n                uint256 _minimumDecreased;\\n                if (_isIncreasingStake) {\\n                    _nftMonthToSet.staked = _nftMonth.staked + uint128(_amount);\\n                    if (i < _month + 1) {\\n                        _nftMonthToSet.minimumStaked = _nftMonth.staked;\\n                    } else {\\n                        _nftMonthToSet.minimumStaked = _nftMonth.minimumStaked;\\n                    }\\n                } else {\\n                    if (_nftMonth.staked >= _amount) {\\n                        uint128 stakedToSet = _nftMonth.staked - uint128(_amount);\\n                        _nftMonthToSet.staked = stakedToSet;\\n                        _minimumToCheck = i < _month + 1 ? _nftMonth.staked : _nftMonth.minimumStaked;\\n                        if (stakedToSet < _minimumToCheck) {\\n                            _nftMonthToSet.minimumStaked = stakedToSet;\\n                            _minimumDecreased = _minimumToCheck - stakedToSet;\\n                        } else {\\n                            _nftMonthToSet.minimumStaked = uint128(_minimumToCheck);\\n                        }\\n                    } else {\\n                        revert UnstakeAmountNotAllowed();\\n                    }\\n                }\\n\\n                for (uint256 ii = _month + 1; ii >= 1; --ii) {\\n                    NftTotalMonth memory _monthlyTotal = monthlyTotal[ii - 1];\\n                    if (_monthlyTotal.totalStaked > 0 || ii == 1) {\\n                        if (_isIncreasingStake) {\\n                            _totalToSet.totalStaked = _monthlyTotal.totalStaked + uint128(_amount);\\n                            if (ii < _month + 1) {\\n                                _totalToSet.minimumStaked = _monthlyTotal.totalStaked;\\n                            }\\n                        } else {\\n                            if (_monthlyTotal.totalStaked >= _amount) {\\n                                _totalToSet.totalStaked = _monthlyTotal.totalStaked - uint128(_amount);\\n                                _minimumToCheck = ii < _month + 1\\n                                    ? _monthlyTotal.totalStaked\\n                                    : _monthlyTotal.minimumStaked;\\n                                _totalToSet.minimumStaked = uint128(_minimumToCheck - _minimumDecreased);\\n                            } else {\\n                                revert UnstakeAmountNotAllowed();\\n                            }\\n                        }\\n                        break;\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n    }\\n\\n    /****\\n     **** PUBLIC VIEW\\n     ****/\\n\\n    /**\\n     * @notice Get the current month number since the reward period has started.\\n     * @return The current month.\\n     **/\\n    function getCurrentMonth() public view returns (uint256) {\\n        if (block.timestamp < startTime) {\\n            return 0;\\n        } else {\\n            return (block.timestamp - startTime) / 30 days;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the currently staked and minimumStaked tokens for a specific NFT at a specific month (looping back).\\n     * @param _tokenId The id of the NFT.\\n     * @return stakedAmount The amount of tokens staked in an NFT.\\n     * @return stakedAmountMinimum The amountMinimum of tokens staked in an NFT.s\\n     **/\\n    function getStaked(\\n        uint256 _tokenId,\\n        uint256 _month\\n    ) public view returns (uint256 stakedAmount, uint256 stakedAmountMinimum) {\\n        if (!_exists(_tokenId)) {\\n            revert NftNotExists();\\n        }\\n        NftInfo storage _nft = nft[_tokenId];\\n        for (uint256 i = _month + 1; i >= 1; --i) {\\n            NftInfoMonth storage _nftMonth = _nft.monthly[i - 1];\\n            if (_nftMonth.staked > 0 || _nftMonth.hasWithdrawn == 1) {\\n                if (i == _month + 1) {\\n                    return (_nftMonth.staked, _nftMonth.minimumStaked);\\n                } else {\\n                    return (_nftMonth.staked, _nftMonth.staked);\\n                }\\n            }\\n        }\\n        return (0, 0);\\n    }\\n\\n    /**\\n     * @notice Get the current shares for a specific NFT at a specific month (looping back).\\n     * @dev Loops from the current month back over the previous months to find the last time this NFT has been staked or unstaked\\n     * @param _tokenId The id of the NFT.\\n     * @return The shares of the NFT.\\n     **/\\n    function getShares(uint256 _tokenId, uint256 _month) public view returns (uint256) {\\n        if (!_exists(_tokenId)) {\\n            revert NftNotExists();\\n        }\\n        NftInfo storage _nft = nft[_tokenId];\\n        for (uint256 i = _month + 1; i >= 1; --i) {\\n            NftInfoMonth storage _nftMonth = _nft.monthly[i - 1];\\n            if (_nftMonth.shares > 0 || (_nftMonth.hasWithdrawn == 1 && _nftMonth.staked == 0)) {\\n                return _nftMonth.shares;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice This function gets the tokenURI for this NFT.\\n     * @dev The tokenURI is dynamically generated, it will be based on the type and level and many other variables and is then formatted.\\n     * @param _tokenId The id of the NFT.\\n     * @return _tokenUri a string which is the tokenURI of an NFT.\\n     **/\\n    function tokenURI(uint256 _tokenId) public view override returns (string memory _tokenUri) {\\n        if (!_exists(_tokenId)) {\\n            revert NftNotExists();\\n        }\\n        (uint256 staked, , uint256 shares, , , ) = getNftInfo(_tokenId);\\n        uint256 level = nftData.getLevelCapped(staked, nft[_tokenId].tier);\\n        NftInfo storage _nft = nft[_tokenId];\\n\\n        return\\n            nftData.tokenUriTraits(\\n                _tokenId,\\n                level,\\n                _nft.tier,\\n                staked,\\n                shares,\\n                _nft.encodedAttributes,\\n                _nft.lockPeriod + startTime,\\n                initCompleted,\\n                imageFolder\\n            );\\n    }\\n\\n    /****\\n     **** EXTERNAL VIEW\\n     ****/\\n\\n    /**\\n     * @notice Aggregates the information of a given NFT.\\n     * @dev This function can be used to get all relevant data at once so that you do not have to do many blockchain calls in sequence.\\n     * @param _tokenId The id of the NFT.\\n     * @return _staked The amount of tokens staked in an NFT.\\n     * @return _stakingAllowance The total amount of tokens you are still allowed to stake.\\n     * @return _shares The shares of the NFT.\\n     * @return _level The level of the NFT.\\n     * @return _tier The tier of the NFT.\\n     * @return _lockPeriod The period the NFT is locked for.\\n     **/\\n    function getNftInfo(\\n        uint256 _tokenId\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 _staked,\\n            uint256 _stakingAllowance,\\n            uint256 _shares,\\n            uint256 _level,\\n            uint256 _tier,\\n            uint256 _lockPeriod\\n        )\\n    {\\n        if (!_exists(_tokenId)) {\\n            revert NftNotExists();\\n        }\\n        NftInfo storage _nft = nft[_tokenId];\\n        uint256 currentMonth = getCurrentMonth();\\n        for (uint256 i = currentMonth + 1; i >= 1; --i) {\\n            NftInfoMonth storage _nftMonth = _nft.monthly[i - 1];\\n            if (_nftMonth.staked > 0 || _nftMonth.hasWithdrawn == 1) {\\n                _staked = _nftMonth.staked;\\n                break;\\n            }\\n        }\\n        for (uint256 i = currentMonth + 1; i >= 1; --i) {\\n            NftInfoMonth storage _nftMonth = _nft.monthly[i - 1];\\n            if (_nftMonth.shares > 0 || (_nftMonth.hasWithdrawn == 1 && _nftMonth.staked == 0)) {\\n                _shares = _nftMonth.shares;\\n                break;\\n            }\\n        }\\n        _stakingAllowance = _getStakingAllowance(_tokenId, _staked);\\n        _tier = _nft.tier;\\n        _level = nftData.getLevelCapped(_staked, _tier);\\n        _lockPeriod = _nft.lockPeriod;\\n        return (_staked, _stakingAllowance, _shares, _level, _tier, _lockPeriod);\\n    }\\n\\n    /**\\n     * @notice Gets the token ids that a wallet owns.\\n     * @dev It loops over the tokenIds array and finds the owners of each id and then returns the array of ids.\\n     * @param _nftOwner The address of the owner.\\n     * @return tokenIds The array of token ids that the owner has.\\n     **/\\n    function getIdsFromWallet(address _nftOwner) external view returns (uint256[] memory tokenIds) {\\n        tokenIds = new uint256[](balanceOf(_nftOwner));\\n        uint256 counter = 0;\\n        for (uint256 i = 1; i <= nftIdCounter; ++i) {\\n            if (_exists(i) && ownerOf(i) == _nftOwner) {\\n                tokenIds[counter] = i;\\n                counter++;\\n            }\\n        }\\n        return tokenIds;\\n    }\\n\\n    /**\\n     * @notice Aggregate function that returns the total shares, total balance and total minimum balance for a specific month.\\n     * @dev The function loops back to prior months if the current month has no data.\\n     * @param _month The specific month.\\n     * @return _totalShares The total shares for that month.\\n     * @return _totalBalance The total staked tokens that month.\\n     * @return _minimumBalance The minimum total staked tokens that month.\\n     **/\\n    function getTotals(\\n        uint256 _month\\n    ) external view returns (uint256 _totalShares, uint256 _totalBalance, uint256 _minimumBalance) {\\n        _totalShares = monthlyTotal[_month].totalShares;\\n        _totalBalance = monthlyTotal[_month].totalStaked;\\n        _minimumBalance = monthlyTotal[_month].minimumStaked;\\n        if (_month > 0 && _totalBalance == 0) {\\n            for (uint256 i = _month + 1; i >= 1; --i) {\\n                NftTotalMonth storage _monthlyTotal = monthlyTotal[i - 1];\\n                if (_monthlyTotal.totalStaked > 0 || i <= 1) {\\n                    _totalBalance = _monthlyTotal.totalStaked;\\n                    _minimumBalance = _monthlyTotal.minimumStaked;\\n                    break;\\n                }\\n            }\\n        }\\n        if (_month > 0 && _totalShares == 0) {\\n            for (uint256 i = _month + 1; i >= 1; --i) {\\n                NftTotalMonth storage _monthlyTotal = monthlyTotal[i - 1];\\n                if (_monthlyTotal.totalShares > 0 || i <= 1) {\\n                    _totalShares = _monthlyTotal.totalShares;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /****\\n     **** private VIEW\\n     ****/\\n\\n    /**\\n     * @notice The _checkAllowance function checks if an amount does not go over the staking allowance for a specific NFT.\\n     * @param _tokenId The id of the NFT.\\n     * @param _amount The amount of tokens that should be staked.\\n     **/\\n    function _checkAllowance(uint256 _tokenId, uint256 _amount) private view {\\n        if (msg.sender != ownerOf(_tokenId)) {\\n            revert NftNotOwned();\\n        }\\n\\n        (uint256 stakedAmount, ) = getStaked(_tokenId, getCurrentMonth());\\n        if (nftData.getLevel(stakedAmount) < MAX_LEVEL) {\\n            uint256 allowance = _getStakingAllowance(_tokenId, stakedAmount);\\n            if (_amount > allowance) {\\n                revert AllowanceExceeded(allowance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice How much tokens you are allowed to stake into a specific tokenId.\\n     * @dev It finds the allowance for the passed time since the startTime and calculates how much tokens you are allowed to stake for each.\\n     *  After it checks how much you have staked already this month and subtracts that.\\n     * @param _tokenId The id of the nft for which you want to know the total allowance.\\n     * @return stakingAllowance The total amount of tokens you are currently allowed to stake.\\n     **/\\n    function _getStakingAllowance(uint256 _tokenId, uint256 _staked) private view returns (uint256 stakingAllowance) {\\n        if (startTime > block.timestamp) return 0;\\n        NftInfo storage _nft = nft[_tokenId];\\n        uint256 allowance = (((((block.timestamp - startTime) / 1 days) * DAILY_STAKING_ALLOWANCE) +\\n            DAILY_STAKING_ALLOWANCE) * ONE_E18) + _nft.stakedAtMint;\\n        if (allowance > _staked) {\\n            stakingAllowance = allowance - _staked;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the total shares from all NFTs.\\n     * @dev The function loops back to the last month the total shares where updated.\\n     * @param _month The month to look at, and from which to loop back.\\n     * @return sharesTotal The total amount of shares.\\n     **/\\n    function _getTotalShares(uint256 _month) private view returns (uint256 sharesTotal) {\\n        for (uint256 i = _month + 1; i > 0 && sharesTotal == 0; --i) {\\n            sharesTotal = monthlyTotal[i - 1].totalShares;\\n        }\\n    }\\n\\n    /**\\n     * @notice Hashes the data from a voucher that includes the information to mint an NFT.\\n     * @dev This is done according to the EIP-712 standard. So that it is secure and takes into account context information such as chainId and contract address.\\n     * @param _voucherId Id of the Voucher\\n     * @param _type time mint type of the NFT\\n     * @param _lockPeriod time the NFT will remain locked\\n     * @param _account address of the minter\\n     * @param _amountToStake amount of tokens staked directly into the NFT\\n     **/\\n    function _hashMint(\\n        uint256 _voucherId,\\n        uint256 _type,\\n        uint256 _lockPeriod,\\n        address _account,\\n        uint256 _amountToStake\\n    ) private view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"NFT(uint256 voucherId,uint256 type,uint256 lockPeriod,address account,uint256 amountToStake)\\\"\\n                        ),\\n                        _voucherId,\\n                        _type,\\n                        _lockPeriod,\\n                        _account,\\n                        _amountToStake\\n                    )\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Checks with a digest and a signature if the account that signed the digest matches the voucherSigner.\\n     * @param _digest The digest that is checked, this is the hash of messages that included the the typed data.\\n     * @param _signature The signature that is checked, this is the signature of the person that signed the digest.\\n     * @return a bool that is true if the account that signed the digest matches the voucherSigner.\\n     **/\\n    function _verify(bytes32 _digest, bytes memory _signature, address _voucherSigner) private pure returns (bool) {\\n        return ECDSA.recover(_digest, _signature) == _voucherSigner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/nft/GenesisNftAttributes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\ncontract GenesisNftAttributes {\\n    bytes32[2] public gender = [bytes32(\\\"Male\\\"), bytes32(\\\"Female\\\")];\\n\\n    bytes32[7] public body = [\\n        bytes32(\\\"Brown\\\"),\\n        bytes32(\\\"Yellow\\\"),\\n        bytes32(\\\"White\\\"),\\n        bytes32(\\\"Tan\\\"),\\n        bytes32(\\\"Caramel\\\"),\\n        bytes32(\\\"Red\\\"),\\n        bytes32(\\\"Black\\\")\\n    ];\\n\\n    bytes32[10] public profession = [\\n        bytes32(\\\"Founder\\\"),\\n        bytes32(\\\"Sales\\\"),\\n        bytes32(\\\"Web3 Hacker\\\"),\\n        bytes32(\\\"Graphics Designer\\\"),\\n        bytes32(\\\"Tester\\\"),\\n        bytes32(\\\"Community Moderator\\\"),\\n        bytes32(\\\"Investor\\\"),\\n        bytes32(\\\"Marketeer\\\"),\\n        bytes32(\\\"Influencer\\\"),\\n        bytes32(\\\"Security Researcher\\\")\\n    ];\\n\\n    bytes32[21] public accessories = [\\n        bytes32(\\\"None\\\"),\\n        bytes32(\\\"Airpods Pro\\\"),\\n        bytes32(\\\"Airpods\\\"),\\n        bytes32(\\\"Earbud\\\"),\\n        bytes32(\\\"Earring Blue\\\"),\\n        bytes32(\\\"Earring Gold\\\"),\\n        bytes32(\\\"Earring Green\\\"),\\n        bytes32(\\\"Earring Pink\\\"),\\n        bytes32(\\\"Earring Red\\\"),\\n        bytes32(\\\"Earring Silver-Blue\\\"),\\n        bytes32(\\\"Earring Silver-Pink\\\"),\\n        bytes32(\\\"Earring Silver\\\"),\\n        bytes32(\\\"Glasses Black\\\"),\\n        bytes32(\\\"Glasses Blue\\\"),\\n        bytes32(\\\"Glasses Bordeaux\\\"),\\n        bytes32(\\\"Glasses Gold\\\"),\\n        bytes32(\\\"Glasses Pink\\\"),\\n        bytes32(\\\"Google Glass\\\"),\\n        bytes32(\\\"Mardi Mask\\\"),\\n        bytes32(\\\"Sennheiser\\\"),\\n        bytes32(\\\"Vision Pro\\\")\\n    ];\\n\\n    bytes32[52] public background = [\\n        bytes32(\\\"3D Printer\\\"),\\n        bytes32(\\\"Airplane Business Class\\\"),\\n        bytes32(\\\"Atelier\\\"),\\n        bytes32(\\\"Beach\\\"),\\n        bytes32(\\\"Blockchain Schematics\\\"),\\n        bytes32(\\\"Cabin In The Woods\\\"),\\n        bytes32(\\\"Co-working Space\\\"),\\n        bytes32(\\\"Coffeeshop\\\"),\\n        bytes32(\\\"Community Meetup\\\"),\\n        bytes32(\\\"Conference Booth\\\"),\\n        bytes32(\\\"Flip-over Board with Diagrams\\\"),\\n        bytes32(\\\"Garden Office\\\"),\\n        bytes32(\\\"Grand Conference\\\"),\\n        bytes32(\\\"Hackathon\\\"),\\n        bytes32(\\\"Hacker Desk\\\"),\\n        bytes32(\\\"Home Office\\\"),\\n        bytes32(\\\"Hotel Conference Room\\\"),\\n        bytes32(\\\"Hotel Lobby\\\"),\\n        bytes32(\\\"Library\\\"),\\n        bytes32(\\\"Linear Behongo\\\"),\\n        bytes32(\\\"Linear Crazy Orange\\\"),\\n        bytes32(\\\"Linear Earthly\\\"),\\n        bytes32(\\\"Linear Endless River\\\"),\\n        bytes32(\\\"Linear Hersheys\\\"),\\n        bytes32(\\\"Linear Metalic Toad\\\"),\\n        bytes32(\\\"Linear Predawn\\\"),\\n        bytes32(\\\"Linear Purple Bliss\\\"),\\n        bytes32(\\\"Linear Red Mist\\\"),\\n        bytes32(\\\"Linear Shore\\\"),\\n        bytes32(\\\"Meeting Room\\\"),\\n        bytes32(\\\"Mobile Office\\\"),\\n        bytes32(\\\"Modern Office Space\\\"),\\n        bytes32(\\\"Monitoring Room\\\"),\\n        bytes32(\\\"Office Desk\\\"),\\n        bytes32(\\\"Open Office Space\\\"),\\n        bytes32(\\\"Park\\\"),\\n        bytes32(\\\"Radial Aqua\\\"),\\n        bytes32(\\\"Radial Blue\\\"),\\n        bytes32(\\\"Radial Gold\\\"),\\n        bytes32(\\\"Radial Green\\\"),\\n        bytes32(\\\"Radial Grey\\\"),\\n        bytes32(\\\"Radial Mint\\\"),\\n        bytes32(\\\"Radial Pink\\\"),\\n        bytes32(\\\"Radial Purple\\\"),\\n        bytes32(\\\"Radial Red\\\"),\\n        bytes32(\\\"Radial Yellow\\\"),\\n        bytes32(\\\"Rooftop Terrace\\\"),\\n        bytes32(\\\"Sales Presentation\\\"),\\n        bytes32(\\\"Sunny Desk\\\"),\\n        bytes32(\\\"Trading Desk\\\"),\\n        bytes32(\\\"University Campus\\\"),\\n        bytes32(\\\"Yacht\\\")\\n    ];\\n\\n    bytes32[19] public eyes = [\\n        bytes32(\\\"Amber Blue\\\"),\\n        bytes32(\\\"Amber Grey\\\"),\\n        bytes32(\\\"Amber\\\"),\\n        bytes32(\\\"Blue\\\"),\\n        bytes32(\\\"Bright Green\\\"),\\n        bytes32(\\\"Brown\\\"),\\n        bytes32(\\\"Dark Green\\\"),\\n        bytes32(\\\"Deep Blue\\\"),\\n        bytes32(\\\"Deep Brown\\\"),\\n        bytes32(\\\"Deep Green\\\"),\\n        bytes32(\\\"Gold\\\"),\\n        bytes32(\\\"Green-Brown\\\"),\\n        bytes32(\\\"Green-Blue\\\"),\\n        bytes32(\\\"Green\\\"),\\n        bytes32(\\\"Grey\\\"),\\n        bytes32(\\\"Hazel\\\"),\\n        bytes32(\\\"Sea Blue\\\"),\\n        bytes32(\\\"Starlake\\\"),\\n        bytes32(\\\"Steel-Blue\\\")\\n    ];\\n\\n    bytes32[34] public hair = [\\n        bytes32(\\\"Black Hat\\\"),\\n        bytes32(\\\"Black\\\"),\\n        bytes32(\\\"Blonde Light\\\"),\\n        bytes32(\\\"Blonde Long\\\"),\\n        bytes32(\\\"Blonde Short\\\"),\\n        bytes32(\\\"Blonde\\\"),\\n        bytes32(\\\"Brown\\\"),\\n        bytes32(\\\"Cap Green\\\"),\\n        bytes32(\\\"Cap Grey\\\"),\\n        bytes32(\\\"Cap Hodl\\\"),\\n        bytes32(\\\"Cap Hype\\\"),\\n        bytes32(\\\"Cap KOL Green\\\"),\\n        bytes32(\\\"Cap KOL Pink\\\"),\\n        bytes32(\\\"Cap Orange\\\"),\\n        bytes32(\\\"Cap Pink\\\"),\\n        bytes32(\\\"Cap Red\\\"),\\n        bytes32(\\\"Cap Swag\\\"),\\n        bytes32(\\\"Cap Work X\\\"),\\n        bytes32(\\\"Dark Brown\\\"),\\n        bytes32(\\\"Grey\\\"),\\n        bytes32(\\\"Headphones\\\"),\\n        bytes32(\\\"Light Brown\\\"),\\n        bytes32(\\\"Light Orange\\\"),\\n        bytes32(\\\"Orange\\\"),\\n        bytes32(\\\"Pencil\\\"),\\n        bytes32(\\\"Purple\\\"),\\n        bytes32(\\\"Red Hat\\\"),\\n        bytes32(\\\"Red Long\\\"),\\n        bytes32(\\\"Red\\\"),\\n        bytes32(\\\"White Hat\\\"),\\n        bytes32(\\\"Anonymous\\\"),\\n        bytes32(\\\"Fire\\\"),\\n        bytes32(\\\"White\\\"),\\n        bytes32(\\\"VR Glasses\\\")\\n    ];\\n\\n    bytes32[7] public mouth = [\\n        bytes32(\\\"Full\\\"),\\n        bytes32(\\\"Neutral\\\"),\\n        bytes32(\\\"Slight Smile\\\"),\\n        bytes32(\\\"Smile\\\"),\\n        bytes32(\\\"Thin Smile\\\"),\\n        bytes32(\\\"Thin\\\"),\\n        bytes32(\\\"Wide Smile\\\")\\n    ];\\n\\n    bytes32[8] public complexion = [\\n        bytes32(\\\"Blush Light\\\"),\\n        bytes32(\\\"Blush Strong\\\"),\\n        bytes32(\\\"Clear\\\"),\\n        bytes32(\\\"Freckles Light\\\"),\\n        bytes32(\\\"Freckles Strong\\\"),\\n        bytes32(\\\"Beauty Spot Cheek\\\"),\\n        bytes32(\\\"Beauty Spot Eye\\\"),\\n        bytes32(\\\"Beauty Spot Lip\\\")\\n    ];\\n\\n    bytes32[40] public item = [\\n        bytes32(\\\"None\\\"),\\n        bytes32(\\\"A/B Testing\\\"),\\n        bytes32(\\\"Announcement Of An Announcement\\\"),\\n        bytes32(\\\"Briefcase Open\\\"),\\n        bytes32(\\\"Briefcase With Money\\\"),\\n        bytes32(\\\"Briefcase\\\"),\\n        bytes32(\\\"Bug Swatter\\\"),\\n        bytes32(\\\"Calendar\\\"),\\n        bytes32(\\\"Coding Laptop\\\"),\\n        bytes32(\\\"Compass\\\"),\\n        bytes32(\\\"Credit Card\\\"),\\n        bytes32(\\\"e-Reader\\\"),\\n        bytes32(\\\"Email Flow\\\"),\\n        bytes32(\\\"Floating Heart Icons\\\"),\\n        bytes32(\\\"Handshake\\\"),\\n        bytes32(\\\"Hearts Magnet\\\"),\\n        bytes32(\\\"Key\\\"),\\n        bytes32(\\\"Ledger\\\"),\\n        bytes32(\\\"Magnifying Glass\\\"),\\n        bytes32(\\\"Matrix Laptop\\\"),\\n        bytes32(\\\"Mechanical Keyboard\\\"),\\n        bytes32(\\\"Megaphone\\\"),\\n        bytes32(\\\"Merchandise Box\\\"),\\n        bytes32(\\\"Money Bag\\\"),\\n        bytes32(\\\"Money Plant Pots\\\"),\\n        bytes32(\\\"NDA Documents\\\"),\\n        bytes32(\\\"News Raises 20 Mil\\\"),\\n        bytes32(\\\"Pear Tablet\\\"),\\n        bytes32(\\\"Remote Control\\\"),\\n        bytes32(\\\"Satelite Dish\\\"),\\n        bytes32(\\\"Shield\\\"),\\n        bytes32(\\\"Stack of Flyers\\\"),\\n        bytes32(\\\"Stickered Tablet\\\"),\\n        bytes32(\\\"Tweet Flow\\\"),\\n        bytes32(\\\"Vlog Ring\\\"),\\n        bytes32(\\\"Warning Sign\\\"),\\n        bytes32(\\\"Writing Tablet\\\"),\\n        bytes32(\\\"Mardi Mask\\\"),\\n        bytes32(\\\"Pencil\\\"),\\n        bytes32(\\\"VR Glasses\\\")\\n    ];\\n\\n    bytes32[92] public clothes = [\\n        bytes32(\\\"Business Suit\\\"),\\n        bytes32(\\\"Cardigan Blue\\\"),\\n        bytes32(\\\"Cardigan Purple\\\"),\\n        bytes32(\\\"Chambray Shirt\\\"),\\n        bytes32(\\\"Corduroy Jacket\\\"),\\n        bytes32(\\\"Crewneck Sweater Blue\\\"),\\n        bytes32(\\\"Crewneck Sweater Grey\\\"),\\n        bytes32(\\\"Crewneck Sweater Orange\\\"),\\n        bytes32(\\\"Denim Jacket Blue\\\"),\\n        bytes32(\\\"Denim Jacket Red\\\"),\\n        bytes32(\\\"Fitted Blazer\\\"),\\n        bytes32(\\\"Graphic Tee\\\"),\\n        bytes32(\\\"Jacket With Hoodie Blue\\\"),\\n        bytes32(\\\"Jacket With Hoodie Green\\\"),\\n        bytes32(\\\"Jacket With Hoodie Red\\\"),\\n        bytes32(\\\"Party Suit\\\"),\\n        bytes32(\\\"Pullover Red\\\"),\\n        bytes32(\\\"Pullover Tropical\\\"),\\n        bytes32(\\\"Shirt Blue Lines\\\"),\\n        bytes32(\\\"Shirt Flannel\\\"),\\n        bytes32(\\\"Shirt Green\\\"),\\n        bytes32(\\\"Shirt Hawai\\\"),\\n        bytes32(\\\"Shirt Orange Lines\\\"),\\n        bytes32(\\\"Shirt Purple Logo\\\"),\\n        bytes32(\\\"Shirt Red\\\"),\\n        bytes32(\\\"Shirt White\\\"),\\n        bytes32(\\\"Shirt With Braces Light\\\"),\\n        bytes32(\\\"Shirt With Braces Robust\\\"),\\n        bytes32(\\\"Shirt With Tie Blue\\\"),\\n        bytes32(\\\"Shirt With Tie Logo\\\"),\\n        bytes32(\\\"Shirt With Tie White\\\"),\\n        bytes32(\\\"Turtleneck Sweater\\\"),\\n        bytes32(\\\"V-neck Sweater\\\"),\\n        bytes32(\\\"Zip-up Hoodie Blue\\\"),\\n        bytes32(\\\"Zip-up Hoodie Brown\\\"),\\n        bytes32(\\\"Zip-up Hoodie Gold\\\"),\\n        bytes32(\\\"Button Down Shirt With Necklace\\\"),\\n        bytes32(\\\"Button Down Shirt\\\"),\\n        bytes32(\\\"Cardigan On Pink Shirt\\\"),\\n        bytes32(\\\"Cardigan On Red Shirt\\\"),\\n        bytes32(\\\"Chambrey Shirt Grey\\\"),\\n        bytes32(\\\"Chambrey Shirt Light Blue\\\"),\\n        bytes32(\\\"Chambrey Shirt Logo\\\"),\\n        bytes32(\\\"Crewneck Sweater Green\\\"),\\n        bytes32(\\\"Crewneck Sweater Grey\\\"),\\n        bytes32(\\\"Denim Jacket Hoodie\\\"),\\n        bytes32(\\\"Denim Jacket\\\"),\\n        bytes32(\\\"Fitted Blazer High\\\"),\\n        bytes32(\\\"Fitted Blazer Logo\\\"),\\n        bytes32(\\\"Fitted Blazer Necklace\\\"),\\n        bytes32(\\\"Fitted Blazer\\\"),\\n        bytes32(\\\"Graphic Tee Ape\\\"),\\n        bytes32(\\\"Graphic Tee Eye\\\"),\\n        bytes32(\\\"Henley Shirt Robust\\\"),\\n        bytes32(\\\"Henley Shirt Smooth\\\"),\\n        bytes32(\\\"Hoodie Green\\\"),\\n        bytes32(\\\"Hoodie Purple\\\"),\\n        bytes32(\\\"Hoodie Robust\\\"),\\n        bytes32(\\\"Knit Cardigan Necklace\\\"),\\n        bytes32(\\\"Knit Cardigan Robust\\\"),\\n        bytes32(\\\"Knit Cardigan Smooth\\\"),\\n        bytes32(\\\"Pencil Skirt Brown\\\"),\\n        bytes32(\\\"Pencil Skirt Logo\\\"),\\n        bytes32(\\\"Pencil Skirt Necklace\\\"),\\n        bytes32(\\\"Pencil Skirt White\\\"),\\n        bytes32(\\\"Pullover Vest\\\"),\\n        bytes32(\\\"Satin Blouse Necklace\\\"),\\n        bytes32(\\\"Satin Blouse Open\\\"),\\n        bytes32(\\\"Satin Blouse Purple\\\"),\\n        bytes32(\\\"Satin Blouse Smooth\\\"),\\n        bytes32(\\\"Shirt With Braces Necklace\\\"),\\n        bytes32(\\\"Shirt With Braces\\\"),\\n        bytes32(\\\"Silk Blouse Grey\\\"),\\n        bytes32(\\\"Silk Blouse Open\\\"),\\n        bytes32(\\\"Sweatshirt Grey\\\"),\\n        bytes32(\\\"Sweatshirt Necklace\\\"),\\n        bytes32(\\\"Sweatshirt White\\\"),\\n        bytes32(\\\"Turtleneck Sweater\\\"),\\n        bytes32(\\\"V Neck Sweater Blue\\\"),\\n        bytes32(\\\"V Neck Sweater Necklace\\\"),\\n        bytes32(\\\"V Neck Sweater Red\\\"),\\n        bytes32(\\\"Velvet Blazer Bordeaux\\\"),\\n        bytes32(\\\"Velvet Blazer Necklace\\\"),\\n        bytes32(\\\"Velvet Blazer Robust\\\"),\\n        bytes32(\\\"Velvet Blazer Smooth\\\"),\\n        bytes32(\\\"Wide Leg Pantsuit Necklace\\\"),\\n        bytes32(\\\"Wide Leg Pantsuit Robust\\\"),\\n        bytes32(\\\"Wide Leg Pantsuit Smooth\\\"),\\n        bytes32(\\\"Zip-up Jacket Blue\\\"),\\n        bytes32(\\\"Zip-up Jacket Gold\\\"),\\n        bytes32(\\\"Zip-up Jacket Loose\\\"),\\n        bytes32(\\\"Zip-up Jacket Robust\\\")\\n    ];\\n}\\n\"\r\n    },\r\n    \"contracts/nft/GenesisNftData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"./GenesisNftAttributes.sol\\\";\\n\\nerror AddressInvalid();\\nerror LevelInvalid();\\n\\ncontract GenesisNftData {\\n    GenesisNftAttributes public immutable attributes;\\n\\n    uint256 private constant ONE_E18 = 10 ** 18;\\n    uint256 private constant FOUR_E18 = 4 * 10 ** 18;\\n    uint256 private constant MAX_LEVEL = 80;\\n\\n    /**\\n     * @notice The formula is: (175 + level * 2.5) * ( 3 + floor(level / 10))\\n     * This formula should be run and accumulated for each level up to the current level and then divided by 4 to fit into a uint16\\n     */\\n    uint16[MAX_LEVEL] private levels = [\\n        131,\\n        264,\\n        399,\\n        535,\\n        674,\\n        814,\\n        957,\\n        1101,\\n        1247,\\n        1395,\\n        1595,\\n        1797,\\n        2002,\\n        2209,\\n        2419,\\n        2631,\\n        2846,\\n        3063,\\n        3283,\\n        3505,\\n        3786,\\n        4070,\\n        4357,\\n        4647,\\n        4941,\\n        5237,\\n        5537,\\n        5840,\\n        6146,\\n        6455,\\n        6830,\\n        7208,\\n        7590,\\n        7976,\\n        8366,\\n        8759,\\n        9156,\\n        9557,\\n        9962,\\n        10370,\\n        10851,\\n        11336,\\n        11826,\\n        12319,\\n        12818,\\n        13320,\\n        13828,\\n        14339,\\n        14855,\\n        15375,\\n        15975,\\n        16579,\\n        17189,\\n        17803,\\n        18423,\\n        19047,\\n        19677,\\n        20311,\\n        20951,\\n        21595,\\n        22326,\\n        23062,\\n        23804,\\n        24551,\\n        25305,\\n        26063,\\n        26828,\\n        27598,\\n        28374,\\n        29155,\\n        30030,\\n        30910,\\n        31797,\\n        32690,\\n        33590,\\n        34495,\\n        35407,\\n        36325,\\n        37250,\\n        38180\\n    ];\\n\\n    /**\\n     * @notice The formula is: (level * 12 + levelCost) / 500\\n     */\\n    uint16[81] public shares = [\\n        1,\\n        2,\\n        3,\\n        4,\\n        5,\\n        7,\\n        8,\\n        9,\\n        10,\\n        11,\\n        13,\\n        15,\\n        16,\\n        18,\\n        20,\\n        21,\\n        23,\\n        25,\\n        27,\\n        28,\\n        31,\\n        33,\\n        35,\\n        38,\\n        40,\\n        43,\\n        45,\\n        47,\\n        50,\\n        52,\\n        55,\\n        58,\\n        61,\\n        65,\\n        68,\\n        71,\\n        74,\\n        77,\\n        81,\\n        84,\\n        88,\\n        92,\\n        96,\\n        100,\\n        104,\\n        108,\\n        112,\\n        116,\\n        120,\\n        124,\\n        129,\\n        134,\\n        139,\\n        144,\\n        149,\\n        154,\\n        159,\\n        164,\\n        169,\\n        174,\\n        180,\\n        186,\\n        192,\\n        198,\\n        204,\\n        210,\\n        216,\\n        222,\\n        229,\\n        235,\\n        242,\\n        249,\\n        256,\\n        263,\\n        270,\\n        278,\\n        285,\\n        292,\\n        300,\\n        307,\\n        320\\n    ];\\n\\n    constructor(address _attributesAddress) {\\n        if (_attributesAddress == address(0)) {\\n            revert AddressInvalid();\\n        }\\n        attributes = GenesisNftAttributes(_attributesAddress);\\n    }\\n\\n    /**\\n     * @notice Returns the level of the NFT based on the amount of tokens staked.\\n     * @dev Splits 80 into 4 seconds of 20, then splits 20 into 4 sections of 5, then loops over the remaining 5 to find the correct level from the XP array.\\n     * @param _staked The amount of tokens staked.\\n     * @return The level of the NFT.\\n     **/\\n    function getLevel(uint256 _staked) public view returns (uint256) {\\n        for (uint256 s1 = 1; s1 <= 4; ++s1) {\\n            if (_staked < uint256(levels[s1 * 20 - 1]) * FOUR_E18) {\\n                for (uint256 s2 = 1; s2 <= 4; ++s2) {\\n                    if (_staked <= uint256(levels[(s1 - 1) * 20 + (s2) * 5 - 1]) * FOUR_E18) {\\n                        uint256 ls = (s1 - 1) * 20 + (s2 - 1) * 5;\\n                        for (uint256 level = ls; level <= ls + 4; ++level) {\\n                            if (_staked < uint256(levels[level]) * FOUR_E18) {\\n                                return level;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return MAX_LEVEL;\\n    }\\n\\n    /**\\n     * @notice Returns the level of the NFT based on the amount of tokens staked capped by the tier.\\n     * @dev Gets the level using getLevel, but then caps it based on the tier as the level does not increase if the tier is not evolved.\\n     * @param _staked The amount of tokens staked.\\n     * @param _tier The tier of the NFT.\\n     * @return The level of the NFT.\\n     **/\\n    function getLevelCapped(uint256 _staked, uint256 _tier) external view returns (uint256) {\\n        uint256 level = getLevel(_staked);\\n        if ((_tier + 1) * 10 < level) {\\n            return (_tier + 1) * 10;\\n        }\\n        return level;\\n    }\\n\\n    /**\\n     * @notice Returns the amount of tokens required to reach a specific level.\\n     * @dev Gets the tokens from the level array and multiplies it by 4e18.\\n     * @param _level The level to get the tokens required for.\\n     * @return The amount of tokens required to reach the level.\\n     **/\\n    function getTokensRequiredForLevel(uint256 _level) external view returns (uint256) {\\n        if (_level < 1) {\\n            return 0;\\n        } else if (_level > MAX_LEVEL) {\\n            revert LevelInvalid();\\n        }\\n        return levels[_level - 1] * FOUR_E18;\\n    }\\n\\n    /**\\n     * @notice Returns the amount of tokens required to reach a specific tier.\\n     * @dev Gets the tokens required for the specified tier from the level array and multiplies it by 4e18.\\n     * @param _tier The tier to get the tokens required to reach it for.\\n     * @return The amount of tokens required to reach the tier.\\n     **/\\n    function getTokensRequiredForTier(uint256 _tier) external view returns (uint256) {\\n        if (_tier == 0) {\\n            return 0;\\n        }\\n        if (_tier * 10 <= levels.length) {\\n            return levels[(_tier * 10) - 1] * FOUR_E18;\\n        } else {\\n            return levels[levels.length - 1] * FOUR_E18;\\n        }\\n    }\\n\\n    /**\\n     * @notice splits a bytes into an array of uint8's.\\n     * @param _b The bytes to split.\\n     * @return _res The array of uint8s's.\\n     **/\\n    function splitBytes(bytes memory _b) public pure returns (uint8[11] memory _res) {\\n        for (uint256 i = 0; i < 11; i++) {\\n            _res[i] = uint8(bytes1(_b[i]));\\n        }\\n    }\\n\\n    /**\\n     * @notice Converts bytes32 to a string.\\n     * @param _bytes32 The bytes to convert.\\n     * @return The string representation of the bytes32.\\n     **/\\n    function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\\n        uint8 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    /**\\n     * @notice Decodes the attributes from the encoded attributes bytes32.\\n     * @param _encodedAttributes The encoded attributes bytes.\\n     * @return _attributes The array of attributes.\\n     **/\\n    function decodeAttributes(\\n        bytes32 _encodedAttributes,\\n        uint256 _initCompleted\\n    ) public view returns (string[11] memory _attributes) {\\n        if (_initCompleted > 0) {\\n            uint8[11] memory i = splitBytes(abi.encode(_encodedAttributes));\\n            _attributes[0] = bytes32ToString(attributes.gender(i[0]));\\n            _attributes[1] = bytes32ToString(attributes.body(i[1]));\\n            _attributes[2] = bytes32ToString(attributes.profession(i[2]));\\n            _attributes[3] = bytes32ToString(attributes.accessories(i[3]));\\n            _attributes[4] = bytes32ToString(attributes.background(i[4]));\\n            _attributes[5] = bytes32ToString(attributes.eyes(i[5]));\\n            _attributes[6] = bytes32ToString(attributes.hair(i[6]));\\n            _attributes[7] = bytes32ToString(attributes.mouth(i[7]));\\n            _attributes[8] = bytes32ToString(attributes.complexion(i[8]));\\n            _attributes[9] = bytes32ToString(attributes.item(i[9]));\\n            _attributes[10] = bytes32ToString(attributes.clothes(i[10]));\\n        } else {\\n            _attributes = [\\\"?\\\", \\\"?\\\", \\\"?\\\", \\\"?\\\", \\\"?\\\", \\\"?\\\", \\\"?\\\", \\\"?\\\", \\\"?\\\", \\\"?\\\", \\\"?\\\"];\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the token URI for the Genesis NFT.\\n     * @dev Returns the token URI for the Genesis NFT.\\n     * @param _level The level of the NFT.\\n     * @param _tier The tier of the NFT.\\n     * @param _staked The amount of tokens staked.\\n     * @param _shares The amount of shares.\\n     * @param _encodedAttributes The encoded attributes string.\\n     * @param _unlockTime The unlock time of the NFT.\\n     * @param _initCompleted Weather the initialization of the NFT has completed.\\n     * @param _imageUri The image URI of the NFT.\\n     * @return The token URI for the Genesis NFT.\\n     **/\\n    function tokenUriTraits(\\n        uint256 _tokenId,\\n        uint256 _level,\\n        uint256 _tier,\\n        uint256 _staked,\\n        uint256 _shares,\\n        bytes32 _encodedAttributes,\\n        uint256 _unlockTime,\\n        uint256 _initCompleted,\\n        string calldata _imageUri\\n    ) external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                part1(_tokenId, _level, _tier, _staked, _imageUri, _initCompleted),\\n                                part2(_encodedAttributes, _initCompleted, _shares, _unlockTime)\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function part1(\\n        uint256 _tokenId,\\n        uint256 _level,\\n        uint256 _tier,\\n        uint256 _staked,\\n        string calldata _imageUri,\\n        uint256 _initCompleted\\n    ) private pure returns (string memory) {\\n        string memory img = _getImageUri(_tokenId, _imageUri, _initCompleted);\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"name\\\":\\\"Work X Genesis #',\\n                    Strings.toString(_tokenId),\\n                    '\\\", \\\"description\\\":\\\"This Work X Genesis NFT was obtained by being an early Work X adopter.\\\"',\\n                    img,\\n                    ',\\\"attributes\\\": [{\\\"trait_type\\\":\\\"Level\\\",\\\"value\\\":',\\n                    Strings.toString(_level),\\n                    '},{\\\"trait_type\\\":\\\"Tier\\\",\\\"value\\\":',\\n                    Strings.toString(_tier),\\n                    '},{\\\"trait_type\\\":\\\"$WORK Staked\\\",\\\"value\\\":',\\n                    Strings.toString(_staked / ONE_E18)\\n                )\\n            );\\n    }\\n\\n    function part2(\\n        bytes32 _encodedAttributes,\\n        uint256 _initCompleted,\\n        uint256 _shares,\\n        uint256 _unlockTime\\n    ) private view returns (string memory) {\\n        string[11] memory attr = decodeAttributes(_encodedAttributes, _initCompleted);\\n\\n        string memory p1 = string(\\n            abi.encodePacked(\\n                '},{\\\"trait_type\\\":\\\"Gender\\\",\\\"value\\\":\\\"',\\n                attr[0],\\n                '\\\"},{\\\"trait_type\\\":\\\"Body\\\",\\\"value\\\":\\\"',\\n                attr[1],\\n                '\\\"},{\\\"trait_type\\\":\\\"Profession\\\",\\\"value\\\":\\\"',\\n                attr[2],\\n                '\\\"},{\\\"trait_type\\\":\\\"Accessories\\\",\\\"value\\\":\\\"',\\n                attr[3],\\n                '\\\"},{\\\"trait_type\\\":\\\"Background\\\",\\\"value\\\":\\\"',\\n                attr[4],\\n                '\\\"},{\\\"trait_type\\\":\\\"Eyes\\\",\\\"value\\\":\\\"',\\n                attr[5]\\n            )\\n        );\\n\\n        string memory p2 = string(\\n            abi.encodePacked(\\n                '\\\"},{\\\"trait_type\\\":\\\"Hair\\\",\\\"value\\\":\\\"',\\n                attr[6],\\n                '\\\"},{\\\"trait_type\\\":\\\"Mouth\\\",\\\"value\\\":\\\"',\\n                attr[7],\\n                '\\\"},{\\\"trait_type\\\":\\\"Complexion\\\",\\\"value\\\":\\\"',\\n                attr[8],\\n                '\\\"},{\\\"trait_type\\\":\\\"Item\\\",\\\"value\\\":\\\"',\\n                attr[9],\\n                '\\\"},{\\\"trait_type\\\":\\\"Clothes\\\",\\\"value\\\":\\\"',\\n                attr[10]\\n            )\\n        );\\n\\n        string memory p3 = string(\\n            abi.encodePacked(\\n                '\\\"},{\\\"display_type\\\": \\\"boost_number\\\", \\\"trait_type\\\": \\\"Shares\\\",\\\"value\\\":',\\n                Strings.toString(_shares),\\n                '},{\\\"display_type\\\": \\\"date\\\", \\\"trait_type\\\": \\\"Tokens Unlock\\\",\\\"value\\\":',\\n                Strings.toString(_unlockTime),\\n                \\\"}]}\\\"\\n            )\\n        );\\n\\n        return string(abi.encodePacked(p1, p2, p3));\\n    }\\n\\n    function _getImageUri(\\n        uint256 _tokenId,\\n        string calldata _image,\\n        uint256 _initCompleted\\n    ) private pure returns (string memory img) {\\n        if (_initCompleted > 0) {\\n            img = string.concat(',\\\"image\\\":\\\"', _image, Strings.toString(_tokenId), '.png\\\"');\\n        } else {\\n            img = ',\\\"image\\\": \\\"https://content.workx.io/video/Work-X-Lockup.mp4\\\"';\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nftSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_workTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenDistributionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftDataAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voucherSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccountMintedPreviously\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"AllowanceExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitHasCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockPeriodInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintTypeInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedTill\",\"type\":\"uint256\"}],\"name\":\"NftLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMintUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftNotOwned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewarderRoleNotPresent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeAtMintMaxExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StartTimeInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnstakeAmountNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Destroy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"Evolve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InitCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"ipfsFolder\",\"type\":\"string\"}],\"name\":\"IpfsFolderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemainingToTreasuryMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRewarder\",\"type\":\"bool\"}],\"name\":\"RewarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"StartTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voucherSigner\",\"type\":\"address\"}],\"name\":\"VoucherSignerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_STAKE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAILY_STAKING_ALLOWANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"destroyNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"evolveTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftOwner\",\"type\":\"address\"}],\"name\":\"getIdsFromWallet\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getNftInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"getShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"getStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmountMinimum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"getTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initCompleted\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voucherId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mintNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRemainingToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"monthlyTotal\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"totalShares\",\"type\":\"uint32\"},{\"internalType\":\"uint128\",\"name\":\"totalStaked\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minimumStaked\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tier\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"voucherId\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"lockPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"stakedAtMint\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"encodedAttributes\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftIdCounter\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setInitCompleted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_folder\",\"type\":\"string\"}],\"name\":\"setIpfsFolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_encodedAttributes\",\"type\":\"bytes32[]\"}],\"name\":\"setNftAttributes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isRewarder\",\"type\":\"bool\"}],\"name\":\"setRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voucherSigner\",\"type\":\"address\"}],\"name\":\"setVoucherSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeAndEvolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_tokenUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voucherSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "GenesisNft", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000008888888837f84a7a82668e0320ac454f5945d0b9000000000000000000000000e91f8bd2b6558564ff4e5bcb104e38e95846455b00000000000000000000000047333f9f83cf75a8ed7ca06c378fc918f484d8f000000000000000000000000070e732011ccd81adf781484478267e7ca81d38000000000000000000000000000000000000000000000000000000000000000012576f726b20582047656e65736973204e465400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012576f726b20582047656e65736973204e46540000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}