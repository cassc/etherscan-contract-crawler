{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/_base/ZapBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../oz/0.8.0/access/Ownable.sol\\\";\\nimport \\\"../oz/0.8.0/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract ZapBaseV2 is Ownable {\\n    using SafeERC20 for IERC20;\\n    bool public stopped = false;\\n\\n    // if true, goodwill is not deducted\\n    mapping(address => bool) public feeWhitelist;\\n\\n    uint256 public goodwill;\\n    // % share of goodwill (0-100 %)\\n    uint256 affiliateSplit;\\n    // restrict affiliates\\n    mapping(address => bool) public affiliates;\\n    // affiliate => token => amount\\n    mapping(address => mapping(address => uint256)) public affiliateBalance;\\n    // token => amount\\n    mapping(address => uint256) public totalAffiliateBalance;\\n    // swapTarget => approval status\\n    mapping(address => bool) public approvedTargets;\\n\\n    address internal constant ETHAddress =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    constructor(uint256 _goodwill, uint256 _affiliateSplit) {\\n        goodwill = _goodwill;\\n        affiliateSplit = _affiliateSplit;\\n    }\\n\\n    // circuit breaker modifiers\\n    modifier stopInEmergency {\\n        if (stopped) {\\n            revert(\\\"Temporarily Paused\\\");\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    function _getBalance(address token)\\n        internal\\n        view\\n        returns (uint256 balance)\\n    {\\n        if (token == address(0)) {\\n            balance = address(this).balance;\\n        } else {\\n            balance = IERC20(token).balanceOf(address(this));\\n        }\\n    }\\n\\n    function _approveToken(address token, address spender) internal {\\n        IERC20 _token = IERC20(token);\\n        if (_token.allowance(address(this), spender) > 0) return;\\n        else {\\n            _token.safeApprove(spender, type(uint256).max);\\n        }\\n    }\\n\\n    function _approveToken(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        IERC20(token).safeApprove(spender, 0);\\n        IERC20(token).safeApprove(spender, amount);\\n    }\\n\\n    // - to Pause the contract\\n    function toggleContractActive() public onlyOwner {\\n        stopped = !stopped;\\n    }\\n\\n    function set_feeWhitelist(address zapAddress, bool status)\\n        external\\n        onlyOwner\\n    {\\n        feeWhitelist[zapAddress] = status;\\n    }\\n\\n    function set_new_goodwill(uint256 _new_goodwill) public onlyOwner {\\n        require(\\n            _new_goodwill >= 0 && _new_goodwill <= 100,\\n            \\\"GoodWill Value not allowed\\\"\\n        );\\n        goodwill = _new_goodwill;\\n    }\\n\\n    function set_new_affiliateSplit(uint256 _new_affiliateSplit)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _new_affiliateSplit <= 100,\\n            \\\"Affiliate Split Value not allowed\\\"\\n        );\\n        affiliateSplit = _new_affiliateSplit;\\n    }\\n\\n    function set_affiliate(address _affiliate, bool _status)\\n        external\\n        onlyOwner\\n    {\\n        affiliates[_affiliate] = _status;\\n    }\\n\\n    ///@notice Withdraw goodwill share, retaining affilliate share\\n    function withdrawTokens(address[] calldata tokens) external onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 qty;\\n\\n            if (tokens[i] == ETHAddress) {\\n                qty = address(this).balance - totalAffiliateBalance[tokens[i]];\\n\\n                Address.sendValue(payable(owner()), qty);\\n            } else {\\n                qty =\\n                    IERC20(tokens[i]).balanceOf(address(this)) -\\n                    totalAffiliateBalance[tokens[i]];\\n                IERC20(tokens[i]).safeTransfer(owner(), qty);\\n            }\\n        }\\n    }\\n\\n    ///@notice Withdraw affilliate share, retaining goodwill share\\n    function affilliateWithdraw(address[] calldata tokens) external {\\n        uint256 tokenBal;\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            tokenBal = affiliateBalance[msg.sender][tokens[i]];\\n            affiliateBalance[msg.sender][tokens[i]] = 0;\\n            totalAffiliateBalance[tokens[i]] =\\n                totalAffiliateBalance[tokens[i]] -\\n                tokenBal;\\n\\n            if (tokens[i] == ETHAddress) {\\n                Address.sendValue(payable(msg.sender), tokenBal);\\n            } else {\\n                IERC20(tokens[i]).safeTransfer(msg.sender, tokenBal);\\n            }\\n        }\\n    }\\n\\n    function setApprovedTargets(\\n        address[] calldata targets,\\n        bool[] calldata isApproved\\n    ) external onlyOwner {\\n        require(targets.length == isApproved.length, \\\"Invalid Input length\\\");\\n\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            approvedTargets[targets[i]] = isApproved[i];\\n        }\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender != tx.origin, \\\"Do not send ETH directly\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/0.8.0/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/0.8.0/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata =\\n            address(token).functionCall(\\n                data,\\n                \\\"SafeERC20: low-level call failed\\\"\\n            );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/0.8.0/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/0.8.0/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/oz/0.8.0/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) =\\n            target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Polygon/Bridge/Zapper_Matic_Bridge_V1.sol\": {\r\n      \"content\": \"// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\\n// \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\\n// \u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\\n// \u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\\n// \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n// Copyright (C) 2021 zapper\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 2 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n\\n///@author Zapper\\n///@notice This contract swaps and bridges ETH/Tokens to Matic/Polygon\\n// SPDX-License-Identifier: GPLv2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../_base/ZapBaseV2.sol\\\";\\n\\n// PoS Bridge\\ninterface IRootChainManager {\\n    function depositEtherFor(address user) external payable;\\n\\n    function depositFor(\\n        address user,\\n        address rootToken,\\n        bytes calldata depositData\\n    ) external;\\n\\n    function tokenToType(address) external returns (bytes32);\\n\\n    function typeToPredicate(bytes32) external returns (address);\\n}\\n\\n// Plasma Bridge\\ninterface IDepositManager {\\n    function depositERC20ForUser(\\n        address _token,\\n        address _user,\\n        uint256 _amount\\n    ) external;\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n}\\n\\ncontract Zapper_Matic_Bridge_V1_1 is ZapBaseV2 {\\n    using SafeERC20 for IERC20;\\n\\n    address private constant wethTokenAddress =\\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    IRootChainManager public rootChainManager =\\n        IRootChainManager(0xA0c68C638235ee32657e8f720a23ceC1bFc77C77);\\n    IDepositManager public depositManager =\\n        IDepositManager(0x401F6c983eA34274ec46f84D70b31C151321188b);\\n\\n    address private constant maticAddress =\\n        0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0;\\n\\n    constructor(uint256 _goodwill, uint256 _affiliateSplit)\\n        ZapBaseV2(_goodwill, _affiliateSplit)\\n    {\\n        _approveToken(maticAddress, address(depositManager));\\n\\n        approvedTargets[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\\n    }\\n\\n    /**\\n    @notice Bridge from Ethereum to Matic\\n    @notice Use index 0 for primary swap and index 1 for matic swap\\n    @param fromToken Address of the token to swap from\\n    @param toToken Address of the token to bridge\\n    @param swapAmounts Quantites of fromToken to swap to toToken and matic\\n    @param minTokensRec Minimum acceptable quantity of swapped tokens and/or matic\\n    @param swapTargets Execution targets for swaps\\n    @param swapData DEX swap data\\n    @param affiliate Affiliate address\\n    */\\n    function ZapBridge(\\n        address fromToken,\\n        address toToken,\\n        uint256[2] calldata swapAmounts,\\n        uint256[2] calldata minTokensRec,\\n        address[2] calldata swapTargets,\\n        bytes[2] calldata swapData,\\n        address affiliate\\n    ) external payable stopInEmergency {\\n        uint256[2] memory toInvest =\\n            _pullTokens(fromToken, swapAmounts, affiliate);\\n\\n        if (swapAmounts[0] > 0) {\\n            // Token swap\\n            uint256 toTokenAmt =\\n                _fillQuote(\\n                    fromToken,\\n                    toInvest[0],\\n                    toToken,\\n                    swapTargets[0],\\n                    swapData[0]\\n                );\\n            require(toTokenAmt >= minTokensRec[0], \\\"ERR: High Slippage 1\\\");\\n\\n            _bridgeToken(toToken, toTokenAmt);\\n        }\\n\\n        // Matic swap\\n        if (swapAmounts[1] > 0) {\\n            uint256 maticAmount =\\n                _fillQuote(\\n                    fromToken,\\n                    toInvest[1],\\n                    maticAddress,\\n                    swapTargets[1],\\n                    swapData[1]\\n                );\\n            require(maticAmount >= minTokensRec[1], \\\"ERR: High Slippage 2\\\");\\n\\n            _bridgeMatic(maticAmount);\\n        }\\n    }\\n\\n    function _bridgeToken(address toToken, uint256 toTokenAmt) internal {\\n        if (toToken == address(0)) {\\n            rootChainManager.depositEtherFor{ value: toTokenAmt }(msg.sender);\\n        } else {\\n            bytes32 tokenType = rootChainManager.tokenToType(toToken);\\n            address predicate = rootChainManager.typeToPredicate(tokenType);\\n            _approveToken(toToken, predicate);\\n            rootChainManager.depositFor(\\n                msg.sender,\\n                toToken,\\n                abi.encode(toTokenAmt)\\n            );\\n        }\\n    }\\n\\n    function _bridgeMatic(uint256 maticAmount) internal {\\n        depositManager.depositERC20ForUser(\\n            maticAddress,\\n            msg.sender,\\n            maticAmount\\n        );\\n    }\\n\\n    // 0x Swap\\n    function _fillQuote(\\n        address fromToken,\\n        uint256 amount,\\n        address toToken,\\n        address swapTarget,\\n        bytes memory swapCallData\\n    ) internal returns (uint256 amtBought) {\\n        if (fromToken == wethTokenAddress && toToken == address(0)) {\\n            IWETH(wethTokenAddress).deposit{ value: amount }();\\n            return amount;\\n        }\\n\\n        uint256 valueToSend;\\n\\n        if (fromToken == toToken) {\\n            return amount;\\n        }\\n\\n        if (fromToken == address(0)) {\\n            valueToSend = amount;\\n        } else {\\n            _approveToken(fromToken, swapTarget);\\n        }\\n\\n        uint256 iniBal = _getBalance(toToken);\\n        require(approvedTargets[swapTarget], \\\"Target not Authorized\\\");\\n        (bool success, ) = swapTarget.call{ value: valueToSend }(swapCallData);\\n        require(success, \\\"Error Swapping Tokens\\\");\\n        uint256 finalBal = _getBalance(toToken);\\n\\n        amtBought = finalBal - iniBal;\\n    }\\n\\n    function _pullTokens(\\n        address fromToken,\\n        uint256[2] memory swapAmounts,\\n        address affiliate\\n    ) internal returns (uint256[2] memory toInvest) {\\n        if (fromToken == address(0)) {\\n            require(msg.value > 0, \\\"No eth sent\\\");\\n            require(\\n                swapAmounts[0] + (swapAmounts[1]) == msg.value,\\n                \\\"msg.value != fromTokenAmounts\\\"\\n            );\\n        } else {\\n            require(msg.value == 0, \\\"Eth sent with token\\\");\\n\\n            // transfer token\\n            IERC20(fromToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                swapAmounts[0] + (swapAmounts[1])\\n            );\\n        }\\n\\n        if (swapAmounts[0] > 0) {\\n            toInvest[0] =\\n                swapAmounts[0] -\\n                (_subtractGoodwill(fromToken, swapAmounts[0], affiliate));\\n        }\\n\\n        if (swapAmounts[1] > 0) {\\n            toInvest[1] =\\n                swapAmounts[1] -\\n                (_subtractGoodwill(fromToken, swapAmounts[1], affiliate));\\n        }\\n    }\\n\\n    function _subtractGoodwill(\\n        address token,\\n        uint256 amount,\\n        address affiliate\\n    ) internal returns (uint256 totalGoodwillPortion) {\\n        bool whitelisted = feeWhitelist[msg.sender];\\n        if (!whitelisted && goodwill > 0) {\\n            totalGoodwillPortion = (amount * goodwill) / 10000;\\n\\n            if (affiliates[affiliate]) {\\n                if (token == address(0)) {\\n                    token = ETHAddress;\\n                }\\n\\n                uint256 affiliatePortion =\\n                    (totalGoodwillPortion * affiliateSplit) / 100;\\n                affiliateBalance[affiliate][token] += affiliatePortion;\\n                totalAffiliateBalance[token] += affiliatePortion;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/_base/ZapOutBaseV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.0;\\nimport \\\"./ZapBaseV2.sol\\\";\\n\\nabstract contract ZapOutBaseV3 is ZapBaseV2 {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n        @dev Transfer tokens from msg.sender to this contract\\n        @param token The ERC20 token to transfer to this contract\\n        @param shouldSellEntireBalance If True transfers entrire allowable amount from another contract\\n        @return Quantity of tokens transferred to this contract\\n     */\\n    function _pullTokens(\\n        address token,\\n        uint256 amount,\\n        bool shouldSellEntireBalance\\n    ) internal returns (uint256) {\\n        if (shouldSellEntireBalance) {\\n            require(\\n                Address.isContract(msg.sender),\\n                \\\"ERR: shouldSellEntireBalance is true for EOA\\\"\\n            );\\n\\n            uint256 allowance =\\n                IERC20(token).allowance(msg.sender, address(this));\\n            IERC20(token).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                allowance\\n            );\\n\\n            return allowance;\\n        } else {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n            return amount;\\n        }\\n    }\\n\\n    function _subtractGoodwill(\\n        address token,\\n        uint256 amount,\\n        address affiliate,\\n        bool enableGoodwill\\n    ) internal returns (uint256 totalGoodwillPortion) {\\n        bool whitelisted = feeWhitelist[msg.sender];\\n        if (enableGoodwill && !whitelisted && goodwill > 0) {\\n            totalGoodwillPortion = (amount * goodwill) / 10000;\\n\\n            if (affiliates[affiliate]) {\\n                if (token == address(0)) {\\n                    token = ETHAddress;\\n                }\\n\\n                uint256 affiliatePortion =\\n                    (totalGoodwillPortion * affiliateSplit) / 100;\\n                affiliateBalance[affiliate][token] += affiliatePortion;\\n                totalAffiliateBalance[token] += affiliatePortion;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/UniswapV2/UniswapV2_ZapOut_General_V4.sol\": {\r\n      \"content\": \"// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\\n// \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\\n// \u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\\n// \u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\\n// \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n// Copyright (C) 2021 zapper\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 2 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// Visit <https://www.gnu.org/licenses/>for a copy of the GNU Affero General Public License\\n\\n///@author Zapper\\n///@notice this contract implements one click removal of liquidity from UniswapV2 pools, receiving ETH, ERC20 or both.\\n// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.0;\\nimport \\\"../_base/ZapOutBaseV3.sol\\\";\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function WETH() external pure returns (address);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IWETH {\\n    function withdraw(uint256 wad) external;\\n}\\n\\ncontract UniswapV2_ZapOut_General_V4_0_1 is ZapOutBaseV3 {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant deadline =\\n        0xf000000000000000000000000000000000000000000000000000000000000000;\\n\\n    IUniswapV2Router02 private constant uniswapV2Router =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    IUniswapV2Factory private constant uniswapFactory =\\n        IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n\\n    address private constant wethTokenAddress =\\n        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    constructor(uint256 _goodwill, uint256 _affiliateSplit)\\n        ZapBaseV2(_goodwill, _affiliateSplit)\\n    {\\n        // 0x exchange\\n        approvedTargets[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\\n    }\\n\\n    event zapOut(\\n        address sender,\\n        address pool,\\n        address token,\\n        uint256 tokensRec\\n    );\\n\\n    /**\\n        @notice Zap out in both tokens\\n        @param fromPoolAddress Pool from which to remove liquidity\\n        @param incomingLP Quantity of LP to remove from pool\\n        @param affiliate Affiliate address\\n        @return amountA Quantity of tokenA received after zapout\\n        @return amountB Quantity of tokenB received after zapout\\n    */\\n    function ZapOut2PairToken(\\n        address fromPoolAddress,\\n        uint256 incomingLP,\\n        address affiliate\\n    ) public stopInEmergency returns (uint256 amountA, uint256 amountB) {\\n        IUniswapV2Pair pair = IUniswapV2Pair(fromPoolAddress);\\n\\n        require(address(pair) != address(0), \\\"Pool Cannot be Zero Address\\\");\\n\\n        // get reserves\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        IERC20(fromPoolAddress).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            incomingLP\\n        );\\n\\n        _approveToken(fromPoolAddress, address(uniswapV2Router), incomingLP);\\n\\n        if (token0 == wethTokenAddress || token1 == wethTokenAddress) {\\n            address _token = token0 == wethTokenAddress ? token1 : token0;\\n            (amountA, amountB) = uniswapV2Router.removeLiquidityETH(\\n                _token,\\n                incomingLP,\\n                1,\\n                1,\\n                address(this),\\n                deadline\\n            );\\n\\n            // subtract goodwill\\n            uint256 tokenGoodwill =\\n                _subtractGoodwill(_token, amountA, affiliate, true);\\n            uint256 ethGoodwill =\\n                _subtractGoodwill(ETHAddress, amountB, affiliate, true);\\n\\n            // send tokens\\n            IERC20(_token).safeTransfer(msg.sender, amountA - tokenGoodwill);\\n            Address.sendValue(payable(msg.sender), amountB - ethGoodwill);\\n        } else {\\n            (amountA, amountB) = uniswapV2Router.removeLiquidity(\\n                token0,\\n                token1,\\n                incomingLP,\\n                1,\\n                1,\\n                address(this),\\n                deadline\\n            );\\n\\n            // subtract goodwill\\n            uint256 tokenAGoodwill =\\n                _subtractGoodwill(token0, amountA, affiliate, true);\\n            uint256 tokenBGoodwill =\\n                _subtractGoodwill(token1, amountB, affiliate, true);\\n\\n            // send tokens\\n            IERC20(token0).safeTransfer(msg.sender, amountA - tokenAGoodwill);\\n            IERC20(token1).safeTransfer(msg.sender, amountB - tokenBGoodwill);\\n        }\\n        emit zapOut(msg.sender, fromPoolAddress, token0, amountA);\\n        emit zapOut(msg.sender, fromPoolAddress, token1, amountB);\\n    }\\n\\n    /**\\n        @notice Zap out in a single token\\n        @param toTokenAddress Address of desired token\\n        @param fromPoolAddress Pool from which to remove liquidity\\n        @param incomingLP Quantity of LP to remove from pool\\n        @param minTokensRec Minimum quantity of tokens to receive\\n        @param swapTargets Execution targets for swaps\\n        @param swapData DEX swap data\\n        @param affiliate Affiliate address\\n        @param shouldSellEntireBalance If True transfers entrire allowable amount from another contract\\n    */\\n    function ZapOut(\\n        address toTokenAddress,\\n        address fromPoolAddress,\\n        uint256 incomingLP,\\n        uint256 minTokensRec,\\n        address[] memory swapTargets,\\n        bytes[] memory swapData,\\n        address affiliate,\\n        bool shouldSellEntireBalance\\n    ) public stopInEmergency returns (uint256 tokensRec) {\\n        (uint256 amount0, uint256 amount1) =\\n            _removeLiquidity(\\n                fromPoolAddress,\\n                incomingLP,\\n                shouldSellEntireBalance\\n            );\\n\\n        //swaps tokens to token\\n        tokensRec = _swapTokens(\\n            fromPoolAddress,\\n            amount0,\\n            amount1,\\n            toTokenAddress,\\n            swapTargets,\\n            swapData\\n        );\\n        require(tokensRec >= minTokensRec, \\\"High Slippage\\\");\\n\\n        uint256 totalGoodwillPortion;\\n\\n        // transfer toTokens to sender\\n        if (toTokenAddress == address(0)) {\\n            totalGoodwillPortion = _subtractGoodwill(\\n                ETHAddress,\\n                tokensRec,\\n                affiliate,\\n                true\\n            );\\n\\n            payable(msg.sender).transfer(tokensRec - totalGoodwillPortion);\\n        } else {\\n            totalGoodwillPortion = _subtractGoodwill(\\n                toTokenAddress,\\n                tokensRec,\\n                affiliate,\\n                true\\n            );\\n\\n            IERC20(toTokenAddress).safeTransfer(\\n                msg.sender,\\n                tokensRec - totalGoodwillPortion\\n            );\\n        }\\n\\n        tokensRec = tokensRec - totalGoodwillPortion;\\n\\n        emit zapOut(msg.sender, fromPoolAddress, toTokenAddress, tokensRec);\\n\\n        return tokensRec;\\n    }\\n\\n    /**\\n        @notice Zap out in both tokens with permit\\n        @param fromPoolAddress Pool from which to remove liquidity\\n        @param incomingLP Quantity of LP to remove from pool\\n        @param affiliate Affiliate address to share fees\\n        @param permitData Encoded permit data, which contains owner, spender, value, deadline, r,s,v values \\n        @return amountA Quantity of tokenA received\\n        @return amountB Quantity of tokenB received\\n    */\\n    function ZapOut2PairTokenWithPermit(\\n        address fromPoolAddress,\\n        uint256 incomingLP,\\n        address affiliate,\\n        bytes calldata permitData\\n    ) external stopInEmergency returns (uint256 amountA, uint256 amountB) {\\n        // permit\\n        _validatePool(fromPoolAddress);\\n        (bool success, ) = fromPoolAddress.call(permitData);\\n        require(success, \\\"Could Not Permit\\\");\\n\\n        (amountA, amountB) = ZapOut2PairToken(\\n            fromPoolAddress,\\n            incomingLP,\\n            affiliate\\n        );\\n    }\\n\\n    /**\\n        @notice Zap out in a single token with permit\\n        @param toTokenAddress Address of desired token\\n        @param fromPoolAddress Pool from which to remove liquidity\\n        @param incomingLP Quantity of LP to remove from pool\\n        @param minTokensRec Minimum quantity of tokens to receive\\n        @param swapTargets Execution targets for swaps\\n        @param swapData DEX swap data\\n        @param affiliate Affiliate address\\n    */\\n    function ZapOutWithPermit(\\n        address toTokenAddress,\\n        address fromPoolAddress,\\n        uint256 incomingLP,\\n        uint256 minTokensRec,\\n        bytes memory permitData,\\n        address[] memory swapTargets,\\n        bytes[] memory swapData,\\n        address affiliate\\n    ) public stopInEmergency returns (uint256) {\\n        // permit\\n        _validatePool(fromPoolAddress);\\n        (bool success, ) = fromPoolAddress.call(permitData);\\n        require(success, \\\"Could Not Permit\\\");\\n\\n        return (\\n            ZapOut(\\n                toTokenAddress,\\n                fromPoolAddress,\\n                incomingLP,\\n                minTokensRec,\\n                swapTargets,\\n                swapData,\\n                affiliate,\\n                false\\n            )\\n        );\\n    }\\n\\n    function _validatePool(address poolAddress) internal view {\\n        IUniswapV2Pair pair = IUniswapV2Pair(poolAddress);\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        address retrievedAddress = uniswapFactory.getPair(token0, token1);\\n\\n        require(retrievedAddress == poolAddress, \\\"Invalid Pool Address\\\");\\n    }\\n\\n    function _removeLiquidity(\\n        address fromPoolAddress,\\n        uint256 incomingLP,\\n        bool shouldSellEntireBalance\\n    ) internal returns (uint256 amount0, uint256 amount1) {\\n        IUniswapV2Pair pair = IUniswapV2Pair(fromPoolAddress);\\n\\n        require(address(pair) != address(0), \\\"Pool Cannot be Zero Address\\\");\\n\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        _pullTokens(fromPoolAddress, incomingLP, shouldSellEntireBalance);\\n\\n        _approveToken(fromPoolAddress, address(uniswapV2Router), incomingLP);\\n\\n        (amount0, amount1) = uniswapV2Router.removeLiquidity(\\n            token0,\\n            token1,\\n            incomingLP,\\n            1,\\n            1,\\n            address(this),\\n            deadline\\n        );\\n        require(amount0 > 0 && amount1 > 0, \\\"Removed Insufficient Liquidity\\\");\\n    }\\n\\n    function _swapTokens(\\n        address fromPoolAddress,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address toToken,\\n        address[] memory swapTargets,\\n        bytes[] memory swapData\\n    ) internal returns (uint256 tokensBought) {\\n        address token0 = IUniswapV2Pair(fromPoolAddress).token0();\\n        address token1 = IUniswapV2Pair(fromPoolAddress).token1();\\n\\n        //swap token0 to toToken\\n        if (token0 == toToken) {\\n            tokensBought = tokensBought + amount0;\\n        } else {\\n            //swap token using 0x swap\\n            tokensBought =\\n                tokensBought +\\n                _fillQuote(\\n                    token0,\\n                    toToken,\\n                    amount0,\\n                    swapTargets[0],\\n                    swapData[0]\\n                );\\n        }\\n\\n        //swap token1 to toToken\\n        if (token1 == toToken) {\\n            tokensBought = tokensBought + amount1;\\n        } else {\\n            //swap token using 0x swap\\n            tokensBought =\\n                tokensBought +\\n                _fillQuote(\\n                    token1,\\n                    toToken,\\n                    amount1,\\n                    swapTargets[1],\\n                    swapData[1]\\n                );\\n        }\\n    }\\n\\n    function _fillQuote(\\n        address fromTokenAddress,\\n        address toToken,\\n        uint256 amount,\\n        address swapTarget,\\n        bytes memory swapData\\n    ) internal returns (uint256) {\\n        if (fromTokenAddress == wethTokenAddress && toToken == address(0)) {\\n            IWETH(wethTokenAddress).withdraw(amount);\\n            return amount;\\n        }\\n\\n        uint256 valueToSend;\\n        if (fromTokenAddress == address(0)) {\\n            valueToSend = amount;\\n        } else {\\n            _approveToken(fromTokenAddress, swapTarget, amount);\\n        }\\n\\n        uint256 initialBalance = _getBalance(toToken);\\n\\n        require(approvedTargets[swapTarget], \\\"Target not Authorized\\\");\\n        (bool success, ) = swapTarget.call{ value: valueToSend }(swapData);\\n        require(success, \\\"Error Swapping Tokens\\\");\\n\\n        uint256 finalBalance = _getBalance(toToken) - initialBalance;\\n\\n        require(finalBalance > 0, \\\"Swapped to Invalid Intermediate\\\");\\n\\n        return finalBalance;\\n    }\\n\\n    /**\\n        @notice Utility function to determine quantity and addresses of tokens being removed\\n        @param fromPoolAddress Pool from which to remove liquidity\\n        @param liquidity Quantity of LP tokens to remove.\\n        @return amountA Quantity of tokenA removed\\n        @return amountB Quantity of tokenB removed\\n        @return token0 Address of the underlying token to be removed\\n        @return token1 Address of the underlying token to be removed\\n    */\\n    function removeLiquidityReturn(address fromPoolAddress, uint256 liquidity)\\n        external\\n        view\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            address token0,\\n            address token1\\n        )\\n    {\\n        IUniswapV2Pair pair = IUniswapV2Pair(fromPoolAddress);\\n        token0 = pair.token0();\\n        token1 = pair.token1();\\n\\n        uint256 balance0 = IERC20(token0).balanceOf(fromPoolAddress);\\n        uint256 balance1 = IERC20(token1).balanceOf(fromPoolAddress);\\n\\n        uint256 _totalSupply = pair.totalSupply();\\n\\n        amountA = (liquidity * balance0) / _totalSupply;\\n        amountB = (liquidity * balance1) / _totalSupply;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Sushiswap/Sushiswap_ZapOut_General_V3.sol\": {\r\n      \"content\": \"// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\\n// \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\\n// \u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\\n// \u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\\n// \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n// Copyright (C) 2021 zapper\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 2 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// Visit <https://www.gnu.org/licenses/>for a copy of the GNU Affero General Public License\\n\\n///@author Zapper\\n///@notice this contract implements one click removal of liquidity from Sushiswap pools, receiving ETH, ERC20 or both.\\n// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.0;\\nimport \\\"../_base/ZapOutBaseV3.sol\\\";\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function WETH() external pure returns (address);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IWETH {\\n    function withdraw(uint256 wad) external;\\n}\\n\\ncontract Sushiswap_ZapOut_General_V3 is ZapOutBaseV3 {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant deadline =\\n        0xf000000000000000000000000000000000000000000000000000000000000000;\\n\\n    IUniswapV2Router02 private constant sushiswapRouter =\\n        IUniswapV2Router02(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\\n    IUniswapV2Factory private constant sushiswapFactory =\\n        IUniswapV2Factory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\\n\\n    address private constant wethTokenAddress =\\n        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    constructor(uint256 _goodwill, uint256 _affiliateSplit)\\n        ZapBaseV2(_goodwill, _affiliateSplit)\\n    {\\n        // 0x exchange\\n        approvedTargets[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\\n    }\\n\\n    event zapOut(\\n        address sender,\\n        address pool,\\n        address token,\\n        uint256 tokensRec\\n    );\\n\\n    /**\\n        @notice Zap out in both tokens\\n        @param fromPoolAddress Pool from which to remove liquidity\\n        @param incomingLP Quantity of LP to remove from pool\\n        @param affiliate Affiliate address\\n        @return amountA Quantity of tokenA received after zapout\\n        @return amountB Quantity of tokenB received after zapout\\n    */\\n    function ZapOut2PairToken(\\n        address fromPoolAddress,\\n        uint256 incomingLP,\\n        address affiliate\\n    ) public stopInEmergency returns (uint256 amountA, uint256 amountB) {\\n        IUniswapV2Pair pair = IUniswapV2Pair(fromPoolAddress);\\n\\n        require(address(pair) != address(0), \\\"Pool Cannot be Zero Address\\\");\\n\\n        // get reserves\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        IERC20(fromPoolAddress).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            incomingLP\\n        );\\n\\n        _approveToken(fromPoolAddress, address(sushiswapRouter), incomingLP);\\n\\n        if (token0 == wethTokenAddress || token1 == wethTokenAddress) {\\n            address _token = token0 == wethTokenAddress ? token1 : token0;\\n            (amountA, amountB) = sushiswapRouter.removeLiquidityETH(\\n                _token,\\n                incomingLP,\\n                1,\\n                1,\\n                address(this),\\n                deadline\\n            );\\n\\n            // subtract goodwill\\n            uint256 tokenGoodwill =\\n                _subtractGoodwill(_token, amountA, affiliate, true);\\n            uint256 ethGoodwill =\\n                _subtractGoodwill(ETHAddress, amountB, affiliate, true);\\n\\n            // send tokens\\n            IERC20(_token).safeTransfer(msg.sender, amountA - tokenGoodwill);\\n            Address.sendValue(payable(msg.sender), amountB - ethGoodwill);\\n        } else {\\n            (amountA, amountB) = sushiswapRouter.removeLiquidity(\\n                token0,\\n                token1,\\n                incomingLP,\\n                1,\\n                1,\\n                address(this),\\n                deadline\\n            );\\n\\n            // subtract goodwill\\n            uint256 tokenAGoodwill =\\n                _subtractGoodwill(token0, amountA, affiliate, true);\\n            uint256 tokenBGoodwill =\\n                _subtractGoodwill(token1, amountB, affiliate, true);\\n\\n            // send tokens\\n            IERC20(token0).safeTransfer(msg.sender, amountA - tokenAGoodwill);\\n            IERC20(token1).safeTransfer(msg.sender, amountB - tokenBGoodwill);\\n        }\\n        emit zapOut(msg.sender, fromPoolAddress, token0, amountA);\\n        emit zapOut(msg.sender, fromPoolAddress, token1, amountB);\\n    }\\n\\n    /**\\n    @notice Zap out in a single token\\n    @param toTokenAddress Address of desired token\\n    @param fromPoolAddress Pool from which to remove liquidity\\n    @param incomingLP Quantity of LP to remove from pool\\n    @param minTokensRec Minimum quantity of tokens to receive\\n    @param swapTargets Execution targets for swaps\\n    @param swapData DEX swap data\\n    @param affiliate Affiliate address\\n    @param shouldSellEntireBalance If True transfers entrire allowable amount from another contract\\n    */\\n    function ZapOut(\\n        address toTokenAddress,\\n        address fromPoolAddress,\\n        uint256 incomingLP,\\n        uint256 minTokensRec,\\n        address[] memory swapTargets,\\n        bytes[] memory swapData,\\n        address affiliate,\\n        bool shouldSellEntireBalance\\n    ) public stopInEmergency returns (uint256 tokensRec) {\\n        (uint256 amount0, uint256 amount1) =\\n            _removeLiquidity(\\n                fromPoolAddress,\\n                incomingLP,\\n                shouldSellEntireBalance\\n            );\\n\\n        //swaps tokens to token\\n        tokensRec = _swapTokens(\\n            fromPoolAddress,\\n            amount0,\\n            amount1,\\n            toTokenAddress,\\n            swapTargets,\\n            swapData\\n        );\\n        require(tokensRec >= minTokensRec, \\\"High Slippage\\\");\\n\\n        uint256 totalGoodwillPortion;\\n\\n        // transfer toTokens to sender\\n        if (toTokenAddress == address(0)) {\\n            totalGoodwillPortion = _subtractGoodwill(\\n                ETHAddress,\\n                tokensRec,\\n                affiliate,\\n                true\\n            );\\n\\n            payable(msg.sender).transfer(tokensRec - totalGoodwillPortion);\\n        } else {\\n            totalGoodwillPortion = _subtractGoodwill(\\n                toTokenAddress,\\n                tokensRec,\\n                affiliate,\\n                true\\n            );\\n\\n            IERC20(toTokenAddress).safeTransfer(\\n                msg.sender,\\n                tokensRec - totalGoodwillPortion\\n            );\\n        }\\n\\n        tokensRec = tokensRec - totalGoodwillPortion;\\n\\n        emit zapOut(msg.sender, fromPoolAddress, toTokenAddress, tokensRec);\\n\\n        return tokensRec;\\n    }\\n\\n    /**\\n    @notice Zap out in both tokens with permit\\n    @param fromPoolAddress Pool from which to remove liquidity\\n    @param incomingLP Quantity of LP to remove from pool\\n    @param affiliate Affiliate address to share fees\\n    @param permitData Encoded permit data, which contains owner, spender, value, deadline, r,s,v values \\n    @return amountA Quantity of tokenA received\\n    @return amountB Quantity of tokenB received\\n    */\\n    function ZapOut2PairTokenWithPermit(\\n        address fromPoolAddress,\\n        uint256 incomingLP,\\n        address affiliate,\\n        bytes calldata permitData\\n    ) external stopInEmergency returns (uint256 amountA, uint256 amountB) {\\n        // permit\\n        _validatePool(fromPoolAddress);\\n        (bool success, ) = fromPoolAddress.call(permitData);\\n        require(success, \\\"Could Not Permit\\\");\\n\\n        (amountA, amountB) = ZapOut2PairToken(\\n            fromPoolAddress,\\n            incomingLP,\\n            affiliate\\n        );\\n    }\\n\\n    /**\\n    @notice Zap out in a single token with permit\\n    @param toTokenAddress Address of desired token\\n    @param fromPoolAddress Pool from which to remove liquidity\\n    @param incomingLP Quantity of LP to remove from pool\\n    @param minTokensRec Minimum quantity of tokens to receive\\n    @param swapTargets Execution targets for swaps\\n    @param swapData DEX swap data\\n    @param affiliate Affiliate address\\n    */\\n    function ZapOutWithPermit(\\n        address toTokenAddress,\\n        address fromPoolAddress,\\n        uint256 incomingLP,\\n        uint256 minTokensRec,\\n        bytes memory permitData,\\n        address[] memory swapTargets,\\n        bytes[] memory swapData,\\n        address affiliate\\n    ) public stopInEmergency returns (uint256) {\\n        // permit\\n        _validatePool(fromPoolAddress);\\n        (bool success, ) = fromPoolAddress.call(permitData);\\n        require(success, \\\"Could Not Permit\\\");\\n\\n        return (\\n            ZapOut(\\n                toTokenAddress,\\n                fromPoolAddress,\\n                incomingLP,\\n                minTokensRec,\\n                swapTargets,\\n                swapData,\\n                affiliate,\\n                false\\n            )\\n        );\\n    }\\n\\n    function _validatePool(address poolAddress) internal view {\\n        IUniswapV2Pair pair = IUniswapV2Pair(poolAddress);\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        address retrievedAddress = sushiswapFactory.getPair(token0, token1);\\n\\n        require(retrievedAddress == poolAddress, \\\"Invalid Pool Address\\\");\\n    }\\n\\n    function _removeLiquidity(\\n        address fromPoolAddress,\\n        uint256 incomingLP,\\n        bool shouldSellEntireBalance\\n    ) internal returns (uint256 amount0, uint256 amount1) {\\n        IUniswapV2Pair pair = IUniswapV2Pair(fromPoolAddress);\\n\\n        require(address(pair) != address(0), \\\"Pool Cannot be Zero Address\\\");\\n\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        _pullTokens(fromPoolAddress, incomingLP, shouldSellEntireBalance);\\n\\n        _approveToken(fromPoolAddress, address(sushiswapRouter), incomingLP);\\n\\n        (amount0, amount1) = sushiswapRouter.removeLiquidity(\\n            token0,\\n            token1,\\n            incomingLP,\\n            1,\\n            1,\\n            address(this),\\n            deadline\\n        );\\n        require(amount0 > 0 && amount1 > 0, \\\"Removed Insufficient Liquidity\\\");\\n    }\\n\\n    function _swapTokens(\\n        address fromPoolAddress,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address toToken,\\n        address[] memory swapTargets,\\n        bytes[] memory swapData\\n    ) internal returns (uint256 tokensBought) {\\n        address token0 = IUniswapV2Pair(fromPoolAddress).token0();\\n        address token1 = IUniswapV2Pair(fromPoolAddress).token1();\\n\\n        //swap token0 to toToken\\n        if (token0 == toToken) {\\n            tokensBought = tokensBought + amount0;\\n        } else {\\n            //swap token using 0x swap\\n            tokensBought =\\n                tokensBought +\\n                _fillQuote(\\n                    token0,\\n                    toToken,\\n                    amount0,\\n                    swapTargets[0],\\n                    swapData[0]\\n                );\\n        }\\n\\n        //swap token1 to toToken\\n        if (token1 == toToken) {\\n            tokensBought = tokensBought + amount1;\\n        } else {\\n            //swap token using 0x swap\\n            tokensBought =\\n                tokensBought +\\n                _fillQuote(\\n                    token1,\\n                    toToken,\\n                    amount1,\\n                    swapTargets[1],\\n                    swapData[1]\\n                );\\n        }\\n    }\\n\\n    function _fillQuote(\\n        address fromTokenAddress,\\n        address toToken,\\n        uint256 amount,\\n        address swapTarget,\\n        bytes memory swapData\\n    ) internal returns (uint256) {\\n        if (fromTokenAddress == wethTokenAddress && toToken == address(0)) {\\n            IWETH(wethTokenAddress).withdraw(amount);\\n            return amount;\\n        }\\n\\n        uint256 valueToSend;\\n        if (fromTokenAddress == address(0)) {\\n            valueToSend = amount;\\n        } else {\\n            _approveToken(fromTokenAddress, swapTarget, amount);\\n        }\\n\\n        uint256 initialBalance = _getBalance(toToken);\\n\\n        require(approvedTargets[swapTarget], \\\"Target not Authorized\\\");\\n        (bool success, ) = swapTarget.call{ value: valueToSend }(swapData);\\n        require(success, \\\"Error Swapping Tokens\\\");\\n\\n        uint256 finalBalance = _getBalance(toToken) - initialBalance;\\n\\n        require(finalBalance > 0, \\\"Swapped to Invalid Intermediate\\\");\\n\\n        return finalBalance;\\n    }\\n\\n    /**\\n        @notice Utility function to determine quantity and addresses of tokens being removed\\n        @param fromPoolAddress Pool from which to remove liquidity\\n        @param liquidity Quantity of LP tokens to remove.\\n        @return amountA Quantity of tokenA removed\\n        @return amountB Quantity of tokenB removed\\n        @return token0 Address of the underlying token to be removed\\n        @return token1 Address of the underlying token to be removed\\n    */\\n    function removeLiquidityReturn(address fromPoolAddress, uint256 liquidity)\\n        external\\n        view\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            address token0,\\n            address token1\\n        )\\n    {\\n        IUniswapV2Pair pair = IUniswapV2Pair(fromPoolAddress);\\n        token0 = pair.token0();\\n        token1 = pair.token1();\\n\\n        uint256 balance0 = IERC20(token0).balanceOf(fromPoolAddress);\\n        uint256 balance1 = IERC20(token1).balanceOf(fromPoolAddress);\\n\\n        uint256 _totalSupply = pair.totalSupply();\\n\\n        amountA = (liquidity * balance0) / _totalSupply;\\n        amountB = (liquidity * balance1) / _totalSupply;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/_base/ZapInBaseV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.0;\\nimport \\\"./ZapBaseV2.sol\\\";\\n\\nabstract contract ZapInBaseV3 is ZapBaseV2 {\\n    using SafeERC20 for IERC20;\\n\\n    function _pullTokens(\\n        address token,\\n        uint256 amount,\\n        address affiliate,\\n        bool enableGoodwill,\\n        bool shouldSellEntireBalance\\n    ) internal returns (uint256 value) {\\n        uint256 totalGoodwillPortion;\\n\\n        if (token == address(0)) {\\n            require(msg.value > 0, \\\"No eth sent\\\");\\n\\n            // subtract goodwill\\n            totalGoodwillPortion = _subtractGoodwill(\\n                ETHAddress,\\n                msg.value,\\n                affiliate,\\n                enableGoodwill\\n            );\\n\\n            return msg.value - totalGoodwillPortion;\\n        }\\n        require(amount > 0, \\\"Invalid token amount\\\");\\n        require(msg.value == 0, \\\"Eth sent with token\\\");\\n\\n        //transfer token\\n        if (shouldSellEntireBalance) {\\n            require(\\n                Address.isContract(msg.sender),\\n                \\\"ERR: shouldSellEntireBalance is true for EOA\\\"\\n            );\\n            amount = IERC20(token).allowance(msg.sender, address(this));\\n        }\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // subtract goodwill\\n        totalGoodwillPortion = _subtractGoodwill(\\n            token,\\n            amount,\\n            affiliate,\\n            enableGoodwill\\n        );\\n\\n        return amount - totalGoodwillPortion;\\n    }\\n\\n    function _subtractGoodwill(\\n        address token,\\n        uint256 amount,\\n        address affiliate,\\n        bool enableGoodwill\\n    ) internal returns (uint256 totalGoodwillPortion) {\\n        bool whitelisted = feeWhitelist[msg.sender];\\n        if (enableGoodwill && !whitelisted && goodwill > 0) {\\n            totalGoodwillPortion = (amount * goodwill) / 10000;\\n\\n            if (affiliates[affiliate]) {\\n                if (token == address(0)) {\\n                    token = ETHAddress;\\n                }\\n\\n                uint256 affiliatePortion =\\n                    (totalGoodwillPortion * affiliateSplit) / 100;\\n                affiliateBalance[affiliate][token] += affiliatePortion;\\n                totalAffiliateBalance[token] += affiliatePortion;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/UniswapV2/UniswapV2_ZapIn_General_V5.sol\": {\r\n      \"content\": \"// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\\n// \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\\n// \u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\\n// \u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\\n// \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n// Copyright (C) 2021 zapper\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 2 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n\\n///@author Zapper\\n///@notice This contract adds liquidity to Uniswap V2 pools using ETH or any ERC20 Token.\\n// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.0;\\nimport \\\"../_base/ZapInBaseV3.sol\\\";\\n\\n// import \\\"@uniswap/lib/contracts/libraries/Babylonian.sol\\\";\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n}\\n\\ncontract UniswapV2_ZapIn_General_V5 is ZapInBaseV3 {\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Factory private constant UniSwapV2FactoryAddress =\\n        IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\n\\n    IUniswapV2Router02 private constant uniswapRouter =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    address private constant wethTokenAddress =\\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    uint256 private constant deadline =\\n        0xf000000000000000000000000000000000000000000000000000000000000000;\\n\\n    constructor(uint256 _goodwill, uint256 _affiliateSplit)\\n        ZapBaseV2(_goodwill, _affiliateSplit)\\n    {\\n        // 0x exchange\\n        approvedTargets[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\\n    }\\n\\n    event zapIn(address sender, address pool, uint256 tokensRec);\\n\\n    /**\\n    @notice This function is used to invest in given Uniswap V2 pair through ETH/ERC20 Tokens\\n    @param _FromTokenContractAddress The ERC20 token used for investment (address(0x00) if ether)\\n    @param _pairAddress The Uniswap pair address\\n    @param _amount The amount of fromToken to invest\\n    @param _minPoolTokens Reverts if less tokens received than this\\n    @param _swapTarget Excecution target for the first swap\\n    @param swapData DEX quote data\\n    @param affiliate Affiliate address\\n    @param transferResidual Set false to save gas by donating the residual remaining after a Zap\\n    @param shouldSellEntireBalance If True transfers entrire allowable amount from another contract\\n    @return Amount of LP bought\\n     */\\n    function ZapIn(\\n        address _FromTokenContractAddress,\\n        address _pairAddress,\\n        uint256 _amount,\\n        uint256 _minPoolTokens,\\n        address _swapTarget,\\n        bytes calldata swapData,\\n        address affiliate,\\n        bool transferResidual,\\n        bool shouldSellEntireBalance\\n    ) external payable stopInEmergency returns (uint256) {\\n        uint256 toInvest =\\n            _pullTokens(\\n                _FromTokenContractAddress,\\n                _amount,\\n                affiliate,\\n                true,\\n                shouldSellEntireBalance\\n            );\\n\\n        uint256 LPBought =\\n            _performZapIn(\\n                _FromTokenContractAddress,\\n                _pairAddress,\\n                toInvest,\\n                _swapTarget,\\n                swapData,\\n                transferResidual\\n            );\\n        require(LPBought >= _minPoolTokens, \\\"High Slippage\\\");\\n\\n        emit zapIn(msg.sender, _pairAddress, LPBought);\\n\\n        IERC20(_pairAddress).safeTransfer(msg.sender, LPBought);\\n        return LPBought;\\n    }\\n\\n    function _getPairTokens(address _pairAddress)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        IUniswapV2Pair uniPair = IUniswapV2Pair(_pairAddress);\\n        token0 = uniPair.token0();\\n        token1 = uniPair.token1();\\n    }\\n\\n    function _performZapIn(\\n        address _FromTokenContractAddress,\\n        address _pairAddress,\\n        uint256 _amount,\\n        address _swapTarget,\\n        bytes memory swapData,\\n        bool transferResidual\\n    ) internal returns (uint256) {\\n        uint256 intermediateAmt;\\n        address intermediateToken;\\n        (address _ToUniswapToken0, address _ToUniswapToken1) =\\n            _getPairTokens(_pairAddress);\\n\\n        if (\\n            _FromTokenContractAddress != _ToUniswapToken0 &&\\n            _FromTokenContractAddress != _ToUniswapToken1\\n        ) {\\n            // swap to intermediate\\n            (intermediateAmt, intermediateToken) = _fillQuote(\\n                _FromTokenContractAddress,\\n                _pairAddress,\\n                _amount,\\n                _swapTarget,\\n                swapData\\n            );\\n        } else {\\n            intermediateToken = _FromTokenContractAddress;\\n            intermediateAmt = _amount;\\n        }\\n\\n        // divide intermediate into appropriate amount to add liquidity\\n        (uint256 token0Bought, uint256 token1Bought) =\\n            _swapIntermediate(\\n                intermediateToken,\\n                _ToUniswapToken0,\\n                _ToUniswapToken1,\\n                intermediateAmt\\n            );\\n\\n        return\\n            _uniDeposit(\\n                _ToUniswapToken0,\\n                _ToUniswapToken1,\\n                token0Bought,\\n                token1Bought,\\n                transferResidual\\n            );\\n    }\\n\\n    function _uniDeposit(\\n        address _ToUnipoolToken0,\\n        address _ToUnipoolToken1,\\n        uint256 token0Bought,\\n        uint256 token1Bought,\\n        bool transferResidual\\n    ) internal returns (uint256) {\\n        _approveToken(_ToUnipoolToken0, address(uniswapRouter), token0Bought);\\n        _approveToken(_ToUnipoolToken1, address(uniswapRouter), token1Bought);\\n\\n        (uint256 amountA, uint256 amountB, uint256 LP) =\\n            uniswapRouter.addLiquidity(\\n                _ToUnipoolToken0,\\n                _ToUnipoolToken1,\\n                token0Bought,\\n                token1Bought,\\n                1,\\n                1,\\n                address(this),\\n                deadline\\n            );\\n\\n        if (transferResidual) {\\n            //Returning Residue in token0, if any.\\n            if (token0Bought - amountA > 0) {\\n                IERC20(_ToUnipoolToken0).safeTransfer(\\n                    msg.sender,\\n                    token0Bought - amountA\\n                );\\n            }\\n\\n            //Returning Residue in token1, if any\\n            if (token1Bought - amountB > 0) {\\n                IERC20(_ToUnipoolToken1).safeTransfer(\\n                    msg.sender,\\n                    token1Bought - amountB\\n                );\\n            }\\n        }\\n\\n        return LP;\\n    }\\n\\n    function _fillQuote(\\n        address _fromTokenAddress,\\n        address _pairAddress,\\n        uint256 _amount,\\n        address _swapTarget,\\n        bytes memory swapData\\n    ) internal returns (uint256 amountBought, address intermediateToken) {\\n        if (_swapTarget == wethTokenAddress) {\\n            IWETH(wethTokenAddress).deposit{ value: _amount }();\\n            return (_amount, wethTokenAddress);\\n        }\\n\\n        uint256 valueToSend;\\n        if (_fromTokenAddress == address(0)) {\\n            valueToSend = _amount;\\n        } else {\\n            _approveToken(_fromTokenAddress, _swapTarget, _amount);\\n        }\\n\\n        (address _token0, address _token1) = _getPairTokens(_pairAddress);\\n        IERC20 token0 = IERC20(_token0);\\n        IERC20 token1 = IERC20(_token1);\\n        uint256 initialBalance0 = token0.balanceOf(address(this));\\n        uint256 initialBalance1 = token1.balanceOf(address(this));\\n\\n        require(approvedTargets[_swapTarget], \\\"Target not Authorized\\\");\\n        (bool success, ) = _swapTarget.call{ value: valueToSend }(swapData);\\n        require(success, \\\"Error Swapping Tokens 1\\\");\\n\\n        uint256 finalBalance0 =\\n            token0.balanceOf(address(this)) - initialBalance0;\\n        uint256 finalBalance1 =\\n            token1.balanceOf(address(this)) - initialBalance1;\\n\\n        if (finalBalance0 > finalBalance1) {\\n            amountBought = finalBalance0;\\n            intermediateToken = _token0;\\n        } else {\\n            amountBought = finalBalance1;\\n            intermediateToken = _token1;\\n        }\\n\\n        require(amountBought > 0, \\\"Swapped to Invalid Intermediate\\\");\\n    }\\n\\n    function _swapIntermediate(\\n        address _toContractAddress,\\n        address _ToUnipoolToken0,\\n        address _ToUnipoolToken1,\\n        uint256 _amount\\n    ) internal returns (uint256 token0Bought, uint256 token1Bought) {\\n        IUniswapV2Pair pair =\\n            IUniswapV2Pair(\\n                UniSwapV2FactoryAddress.getPair(\\n                    _ToUnipoolToken0,\\n                    _ToUnipoolToken1\\n                )\\n            );\\n        (uint256 res0, uint256 res1, ) = pair.getReserves();\\n        if (_toContractAddress == _ToUnipoolToken0) {\\n            uint256 amountToSwap = calculateSwapInAmount(res0, _amount);\\n            //if no reserve or a new pair is created\\n            if (amountToSwap <= 0) amountToSwap = _amount / 2;\\n            token1Bought = _token2Token(\\n                _toContractAddress,\\n                _ToUnipoolToken1,\\n                amountToSwap\\n            );\\n            token0Bought = _amount - amountToSwap;\\n        } else {\\n            uint256 amountToSwap = calculateSwapInAmount(res1, _amount);\\n            //if no reserve or a new pair is created\\n            if (amountToSwap <= 0) amountToSwap = _amount / 2;\\n            token0Bought = _token2Token(\\n                _toContractAddress,\\n                _ToUnipoolToken0,\\n                amountToSwap\\n            );\\n            token1Bought = _amount - amountToSwap;\\n        }\\n    }\\n\\n    function calculateSwapInAmount(uint256 reserveIn, uint256 userIn)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            (Babylonian.sqrt(\\n                reserveIn * ((userIn * 3988000) + (reserveIn * 3988009))\\n            ) - (reserveIn * 1997)) / 1994;\\n    }\\n\\n    /**\\n    @notice This function is used to swap ERC20 <> ERC20\\n    @param _FromTokenContractAddress The token address to swap from.\\n    @param _ToTokenContractAddress The token address to swap to. \\n    @param tokens2Trade The amount of tokens to swap\\n    @return tokenBought The quantity of tokens bought\\n    */\\n    function _token2Token(\\n        address _FromTokenContractAddress,\\n        address _ToTokenContractAddress,\\n        uint256 tokens2Trade\\n    ) internal returns (uint256 tokenBought) {\\n        if (_FromTokenContractAddress == _ToTokenContractAddress) {\\n            return tokens2Trade;\\n        }\\n\\n        _approveToken(\\n            _FromTokenContractAddress,\\n            address(uniswapRouter),\\n            tokens2Trade\\n        );\\n\\n        address pair =\\n            UniSwapV2FactoryAddress.getPair(\\n                _FromTokenContractAddress,\\n                _ToTokenContractAddress\\n            );\\n        require(pair != address(0), \\\"No Swap Available\\\");\\n        address[] memory path = new address[](2);\\n        path[0] = _FromTokenContractAddress;\\n        path[1] = _ToTokenContractAddress;\\n\\n        tokenBought = uniswapRouter.swapExactTokensForTokens(\\n            tokens2Trade,\\n            1,\\n            path,\\n            address(this),\\n            deadline\\n        )[path.length - 1];\\n\\n        require(tokenBought > 0, \\\"Error Swapping Tokens 2\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Sushiswap/Sushiswap_ZapIn_V4.sol\": {\r\n      \"content\": \"// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\\n// \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\\n// \u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\\n// \u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\\n// \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n// Copyright (C) 2021 zapper\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 2 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n\\n///@author Zapper\\n///@notice This contract adds liquidity to Sushiswap pools using ETH or any ERC20 Token.\\n// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.0;\\nimport \\\"../_base/ZapInBaseV3.sol\\\";\\n\\n// import \\\"@uniswap/lib/contracts/libraries/Babylonian.sol\\\";\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n}\\n\\ninterface IUniswapV2Factory {\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n}\\n\\ncontract Sushiswap_ZapIn_V4 is ZapInBaseV3 {\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Factory private constant sushiSwapFactoryAddress =\\n        IUniswapV2Factory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\\n\\n    IUniswapV2Router02 private constant sushiSwapRouter =\\n        IUniswapV2Router02(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\\n\\n    address private constant wethTokenAddress =\\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    uint256 private constant deadline =\\n        0xf000000000000000000000000000000000000000000000000000000000000000;\\n\\n    constructor(uint256 _goodwill, uint256 _affiliateSplit)\\n        ZapBaseV2(_goodwill, _affiliateSplit)\\n    {\\n        // 0x exchange\\n        approvedTargets[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\\n    }\\n\\n    event zapIn(address sender, address pool, uint256 tokensRec);\\n\\n    /**\\n    @notice Add liquidity to Sushiswap pools with ETH/ERC20 Tokens\\n    @param _FromTokenContractAddress The ERC20 token used (address(0x00) if ether)\\n    @param _pairAddress The Sushiswap pair address\\n    @param _amount The amount of fromToken to invest\\n    @param _minPoolTokens Minimum quantity of pool tokens to receive. Reverts otherwise\\n    @param _swapTarget Excecution target for the first swap\\n    @param swapData DEX quote data\\n    @param affiliate Affiliate address\\n    @param transferResidual Set false to save gas by donating the residual remaining after a Zap\\n    @param shouldSellEntireBalance If True transfers entrire allowable amount from another contract\\n    @return Amount of LP bought\\n     */\\n    function ZapIn(\\n        address _FromTokenContractAddress,\\n        address _pairAddress,\\n        uint256 _amount,\\n        uint256 _minPoolTokens,\\n        address _swapTarget,\\n        bytes calldata swapData,\\n        address affiliate,\\n        bool transferResidual,\\n        bool shouldSellEntireBalance\\n    ) external payable stopInEmergency returns (uint256) {\\n        uint256 toInvest =\\n            _pullTokens(\\n                _FromTokenContractAddress,\\n                _amount,\\n                affiliate,\\n                true,\\n                shouldSellEntireBalance\\n            );\\n\\n        uint256 LPBought =\\n            _performZapIn(\\n                _FromTokenContractAddress,\\n                _pairAddress,\\n                toInvest,\\n                _swapTarget,\\n                swapData,\\n                transferResidual\\n            );\\n        require(LPBought >= _minPoolTokens, \\\"High Slippage\\\");\\n\\n        emit zapIn(msg.sender, _pairAddress, LPBought);\\n\\n        IERC20(_pairAddress).safeTransfer(msg.sender, LPBought);\\n        return LPBought;\\n    }\\n\\n    function _getPairTokens(address _pairAddress)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        IUniswapV2Pair uniPair = IUniswapV2Pair(_pairAddress);\\n        token0 = uniPair.token0();\\n        token1 = uniPair.token1();\\n    }\\n\\n    function _performZapIn(\\n        address _FromTokenContractAddress,\\n        address _pairAddress,\\n        uint256 _amount,\\n        address _swapTarget,\\n        bytes memory swapData,\\n        bool transferResidual\\n    ) internal returns (uint256) {\\n        uint256 intermediateAmt;\\n        address intermediateToken;\\n        (address _ToUniswapToken0, address _ToUniswapToken1) =\\n            _getPairTokens(_pairAddress);\\n\\n        if (\\n            _FromTokenContractAddress != _ToUniswapToken0 &&\\n            _FromTokenContractAddress != _ToUniswapToken1\\n        ) {\\n            // swap to intermediate\\n            (intermediateAmt, intermediateToken) = _fillQuote(\\n                _FromTokenContractAddress,\\n                _pairAddress,\\n                _amount,\\n                _swapTarget,\\n                swapData\\n            );\\n        } else {\\n            intermediateToken = _FromTokenContractAddress;\\n            intermediateAmt = _amount;\\n        }\\n\\n        // divide intermediate into appropriate amount to add liquidity\\n        (uint256 token0Bought, uint256 token1Bought) =\\n            _swapIntermediate(\\n                intermediateToken,\\n                _ToUniswapToken0,\\n                _ToUniswapToken1,\\n                intermediateAmt\\n            );\\n\\n        return\\n            _uniDeposit(\\n                _ToUniswapToken0,\\n                _ToUniswapToken1,\\n                token0Bought,\\n                token1Bought,\\n                transferResidual\\n            );\\n    }\\n\\n    function _uniDeposit(\\n        address _ToUnipoolToken0,\\n        address _ToUnipoolToken1,\\n        uint256 token0Bought,\\n        uint256 token1Bought,\\n        bool transferResidual\\n    ) internal returns (uint256) {\\n        _approveToken(_ToUnipoolToken0, address(sushiSwapRouter), token0Bought);\\n        _approveToken(_ToUnipoolToken1, address(sushiSwapRouter), token1Bought);\\n\\n        (uint256 amountA, uint256 amountB, uint256 LP) =\\n            sushiSwapRouter.addLiquidity(\\n                _ToUnipoolToken0,\\n                _ToUnipoolToken1,\\n                token0Bought,\\n                token1Bought,\\n                1,\\n                1,\\n                address(this),\\n                deadline\\n            );\\n\\n        if (transferResidual) {\\n            //Returning Residue in token0, if any.\\n            if (token0Bought - amountA > 0) {\\n                IERC20(_ToUnipoolToken0).safeTransfer(\\n                    msg.sender,\\n                    token0Bought - amountA\\n                );\\n            }\\n\\n            //Returning Residue in token1, if any\\n            if (token1Bought - amountB > 0) {\\n                IERC20(_ToUnipoolToken1).safeTransfer(\\n                    msg.sender,\\n                    token1Bought - amountB\\n                );\\n            }\\n        }\\n\\n        return LP;\\n    }\\n\\n    function _fillQuote(\\n        address _fromTokenAddress,\\n        address _pairAddress,\\n        uint256 _amount,\\n        address _swapTarget,\\n        bytes memory swapData\\n    ) internal returns (uint256 amountBought, address intermediateToken) {\\n        if (_swapTarget == wethTokenAddress) {\\n            IWETH(wethTokenAddress).deposit{ value: _amount }();\\n            return (_amount, wethTokenAddress);\\n        }\\n\\n        uint256 valueToSend;\\n        if (_fromTokenAddress == address(0)) {\\n            valueToSend = _amount;\\n        } else {\\n            _approveToken(_fromTokenAddress, _swapTarget, _amount);\\n        }\\n\\n        (address _token0, address _token1) = _getPairTokens(_pairAddress);\\n        IERC20 token0 = IERC20(_token0);\\n        IERC20 token1 = IERC20(_token1);\\n        uint256 initialBalance0 = token0.balanceOf(address(this));\\n        uint256 initialBalance1 = token1.balanceOf(address(this));\\n\\n        require(approvedTargets[_swapTarget], \\\"Target not Authorized\\\");\\n        (bool success, ) = _swapTarget.call{ value: valueToSend }(swapData);\\n        require(success, \\\"Error Swapping Tokens 1\\\");\\n\\n        uint256 finalBalance0 =\\n            token0.balanceOf(address(this)) - initialBalance0;\\n        uint256 finalBalance1 =\\n            token1.balanceOf(address(this)) - initialBalance1;\\n\\n        if (finalBalance0 > finalBalance1) {\\n            amountBought = finalBalance0;\\n            intermediateToken = _token0;\\n        } else {\\n            amountBought = finalBalance1;\\n            intermediateToken = _token1;\\n        }\\n\\n        require(amountBought > 0, \\\"Swapped to Invalid Intermediate\\\");\\n    }\\n\\n    function _swapIntermediate(\\n        address _toContractAddress,\\n        address _ToUnipoolToken0,\\n        address _ToUnipoolToken1,\\n        uint256 _amount\\n    ) internal returns (uint256 token0Bought, uint256 token1Bought) {\\n        IUniswapV2Pair pair =\\n            IUniswapV2Pair(\\n                sushiSwapFactoryAddress.getPair(\\n                    _ToUnipoolToken0,\\n                    _ToUnipoolToken1\\n                )\\n            );\\n        (uint256 res0, uint256 res1, ) = pair.getReserves();\\n        if (_toContractAddress == _ToUnipoolToken0) {\\n            uint256 amountToSwap = calculateSwapInAmount(res0, _amount);\\n            //if no reserve or a new pair is created\\n            if (amountToSwap <= 0) amountToSwap = _amount / 2;\\n            token1Bought = _token2Token(\\n                _toContractAddress,\\n                _ToUnipoolToken1,\\n                amountToSwap\\n            );\\n            token0Bought = _amount - amountToSwap;\\n        } else {\\n            uint256 amountToSwap = calculateSwapInAmount(res1, _amount);\\n            //if no reserve or a new pair is created\\n            if (amountToSwap <= 0) amountToSwap = _amount / 2;\\n            token0Bought = _token2Token(\\n                _toContractAddress,\\n                _ToUnipoolToken0,\\n                amountToSwap\\n            );\\n            token1Bought = _amount - amountToSwap;\\n        }\\n    }\\n\\n    function calculateSwapInAmount(uint256 reserveIn, uint256 userIn)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            (Babylonian.sqrt(\\n                reserveIn * ((userIn * 3988000) + (reserveIn * 3988009))\\n            ) - (reserveIn * 1997)) / 1994;\\n    }\\n\\n    /**\\n    @notice This function is used to swap ERC20 <> ERC20\\n    @param _FromTokenContractAddress The token address to swap from.\\n    @param _ToTokenContractAddress The token address to swap to. \\n    @param tokens2Trade The amount of tokens to swap\\n    @return tokenBought The quantity of tokens bought\\n    */\\n    function _token2Token(\\n        address _FromTokenContractAddress,\\n        address _ToTokenContractAddress,\\n        uint256 tokens2Trade\\n    ) internal returns (uint256 tokenBought) {\\n        if (_FromTokenContractAddress == _ToTokenContractAddress) {\\n            return tokens2Trade;\\n        }\\n\\n        _approveToken(\\n            _FromTokenContractAddress,\\n            address(sushiSwapRouter),\\n            tokens2Trade\\n        );\\n\\n        address pair =\\n            sushiSwapFactoryAddress.getPair(\\n                _FromTokenContractAddress,\\n                _ToTokenContractAddress\\n            );\\n        require(pair != address(0), \\\"No Swap Available\\\");\\n        address[] memory path = new address[](2);\\n        path[0] = _FromTokenContractAddress;\\n        path[1] = _ToTokenContractAddress;\\n\\n        tokenBought = sushiSwapRouter.swapExactTokensForTokens(\\n            tokens2Trade,\\n            1,\\n            path,\\n            address(this),\\n            deadline\\n        )[path.length - 1];\\n\\n        require(tokenBought > 0, \\\"Error Swapping Tokens 2\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Curve/Curve_ZapIn_General_V4.sol\": {\r\n      \"content\": \"// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\\n// \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\\n// \u2591\u2591\u2588\u2588\u2588\u2554\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\\n// \u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\\n// \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\\n// Copyright (C) 2021 zapper\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 2 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n\\n///@author Zapper\\n///@notice This contract adds liquidity to Curve pools with ETH or ERC tokens.\\n// SPDX-License-Identifier: GPL-2.0\\n\\npragma solidity ^0.8.0;\\nimport \\\"../_base/ZapInBaseV3.sol\\\";\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n}\\n\\ninterface ICurveSwap {\\n    function coins(int128 arg0) external view returns (address);\\n\\n    function underlying_coins(int128 arg0) external view returns (address);\\n\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function add_liquidity(\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool addUnderlying\\n    ) external;\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function add_liquidity(\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool addUnderlying\\n    ) external;\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function add_liquidity(\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool addUnderlying\\n    ) external;\\n}\\n\\ninterface ICurveEthSwap {\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\\n        external\\n        payable\\n        returns (uint256);\\n}\\n\\ninterface ICurveRegistry {\\n    function getSwapAddress(address tokenAddress)\\n        external\\n        view\\n        returns (address swapAddress);\\n\\n    function getTokenAddress(address swapAddress)\\n        external\\n        view\\n        returns (address tokenAddress);\\n\\n    function getDepositAddress(address swapAddress)\\n        external\\n        view\\n        returns (address depositAddress);\\n\\n    function getPoolTokens(address swapAddress)\\n        external\\n        view\\n        returns (address[4] memory poolTokens);\\n\\n    function shouldAddUnderlying(address swapAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getNumTokens(address swapAddress)\\n        external\\n        view\\n        returns (uint8 numTokens);\\n\\n    function isBtcPool(address swapAddress) external view returns (bool);\\n\\n    function isEthPool(address swapAddress) external view returns (bool);\\n\\n    function isUnderlyingToken(\\n        address swapAddress,\\n        address tokenContractAddress\\n    ) external view returns (bool, uint8);\\n}\\n\\ncontract Curve_ZapIn_General_V4 is ZapInBaseV3 {\\n    using SafeERC20 for IERC20;\\n\\n    ICurveRegistry public curveReg;\\n\\n    address private constant wethTokenAddress =\\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    constructor(\\n        ICurveRegistry _curveRegistry,\\n        uint256 _goodwill,\\n        uint256 _affiliateSplit\\n    ) ZapBaseV2(_goodwill, _affiliateSplit) {\\n        curveReg = _curveRegistry;\\n\\n        // 0x exchange\\n        approvedTargets[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\\n    }\\n\\n    event zapIn(address sender, address pool, uint256 tokensRec);\\n\\n    /**\\n        @notice This function adds liquidity to a Curve pool with ETH or ERC20 tokens\\n        @param fromTokenAddress The token used for entry (address(0) if ether)\\n        @param toTokenAddress The intermediate ERC20 token to swap to\\n        @param swapAddress Curve swap address for the pool\\n        @param incomingTokenQty The amount of fromTokenAddress to invest\\n        @param minPoolTokens The minimum acceptable quantity of Curve LP to receive. Reverts otherwise\\n        @param swapTarget Excecution target for the first swap\\n        @param swapData DEX quote data\\n        @param affiliate Affiliate address\\n        @param shouldSellEntireBalance If True transfers entrire allowable amount from another contract\\n        @return crvTokensBought Quantity of Curve LP tokens received\\n    */\\n    function ZapIn(\\n        address fromTokenAddress,\\n        address toTokenAddress,\\n        address swapAddress,\\n        uint256 incomingTokenQty,\\n        uint256 minPoolTokens,\\n        address swapTarget,\\n        bytes calldata swapData,\\n        address affiliate,\\n        bool shouldSellEntireBalance\\n    ) external payable stopInEmergency returns (uint256 crvTokensBought) {\\n        uint256 toInvest =\\n            _pullTokens(\\n                fromTokenAddress,\\n                incomingTokenQty,\\n                affiliate,\\n                true,\\n                shouldSellEntireBalance\\n            );\\n        if (fromTokenAddress == address(0)) {\\n            fromTokenAddress = ETHAddress;\\n        }\\n\\n        // perform zapIn\\n        crvTokensBought = _performZapIn(\\n            fromTokenAddress,\\n            toTokenAddress,\\n            swapAddress,\\n            toInvest,\\n            swapTarget,\\n            swapData\\n        );\\n\\n        require(\\n            crvTokensBought > minPoolTokens,\\n            \\\"Received less than minPoolTokens\\\"\\n        );\\n\\n        address poolTokenAddress = curveReg.getTokenAddress(swapAddress);\\n\\n        emit zapIn(msg.sender, poolTokenAddress, crvTokensBought);\\n\\n        IERC20(poolTokenAddress).transfer(msg.sender, crvTokensBought);\\n    }\\n\\n    function _performZapIn(\\n        address fromTokenAddress,\\n        address toTokenAddress,\\n        address swapAddress,\\n        uint256 toInvest,\\n        address swapTarget,\\n        bytes memory swapData\\n    ) internal returns (uint256 crvTokensBought) {\\n        (bool isUnderlying, uint8 underlyingIndex) =\\n            curveReg.isUnderlyingToken(swapAddress, fromTokenAddress);\\n\\n        if (isUnderlying) {\\n            crvTokensBought = _enterCurve(\\n                swapAddress,\\n                toInvest,\\n                underlyingIndex\\n            );\\n        } else {\\n            //swap tokens using 0x swap\\n            uint256 tokensBought =\\n                _fillQuote(\\n                    fromTokenAddress,\\n                    toTokenAddress,\\n                    toInvest,\\n                    swapTarget,\\n                    swapData\\n                );\\n            if (toTokenAddress == address(0)) toTokenAddress = ETHAddress;\\n\\n            //get underlying token index\\n            (isUnderlying, underlyingIndex) = curveReg.isUnderlyingToken(\\n                swapAddress,\\n                toTokenAddress\\n            );\\n\\n            if (isUnderlying) {\\n                crvTokensBought = _enterCurve(\\n                    swapAddress,\\n                    tokensBought,\\n                    underlyingIndex\\n                );\\n            } else {\\n                (uint256 tokens, uint8 metaIndex) =\\n                    _enterMetaPool(swapAddress, toTokenAddress, tokensBought);\\n\\n                crvTokensBought = _enterCurve(swapAddress, tokens, metaIndex);\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice This function gets adds the liquidity for meta pools and returns the token index and swap tokens\\n        @param swapAddress Curve swap address for the pool\\n        @param toTokenAddress The ERC20 token to which from token to be convert\\n        @param swapTokens quantity of toToken to invest\\n        @return tokensBought quantity of curve LP acquired\\n        @return index index of LP token in swapAddress whose pool tokens were acquired\\n     */\\n    function _enterMetaPool(\\n        address swapAddress,\\n        address toTokenAddress,\\n        uint256 swapTokens\\n    ) internal returns (uint256 tokensBought, uint8 index) {\\n        address[4] memory poolTokens = curveReg.getPoolTokens(swapAddress);\\n        for (uint8 i = 0; i < 4; i++) {\\n            address intermediateSwapAddress =\\n                curveReg.getSwapAddress(poolTokens[i]);\\n            if (intermediateSwapAddress != address(0)) {\\n                (, index) = curveReg.isUnderlyingToken(\\n                    intermediateSwapAddress,\\n                    toTokenAddress\\n                );\\n\\n                tokensBought = _enterCurve(\\n                    intermediateSwapAddress,\\n                    swapTokens,\\n                    index\\n                );\\n\\n                return (tokensBought, i);\\n            }\\n        }\\n    }\\n\\n    function _fillQuote(\\n        address fromTokenAddress,\\n        address toTokenAddress,\\n        uint256 amount,\\n        address swapTarget,\\n        bytes memory swapData\\n    ) internal returns (uint256 amountBought) {\\n        if (fromTokenAddress == toTokenAddress) {\\n            return amount;\\n        }\\n\\n        if (swapTarget == wethTokenAddress) {\\n            IWETH(wethTokenAddress).deposit{ value: amount }();\\n            return amount;\\n        }\\n\\n        uint256 valueToSend;\\n        if (fromTokenAddress == ETHAddress) {\\n            valueToSend = amount;\\n        } else {\\n            _approveToken(fromTokenAddress, swapTarget, amount);\\n        }\\n\\n        uint256 initialBalance = _getBalance(toTokenAddress);\\n\\n        require(approvedTargets[swapTarget], \\\"Target not Authorized\\\");\\n        (bool success, ) = swapTarget.call{ value: valueToSend }(swapData);\\n        require(success, \\\"Error Swapping Tokens\\\");\\n\\n        amountBought = _getBalance(toTokenAddress) - initialBalance;\\n\\n        require(amountBought > 0, \\\"Swapped To Invalid Intermediate\\\");\\n    }\\n\\n    /**\\n        @notice This function adds liquidity to a curve pool\\n        @param swapAddress Curve swap address for the pool\\n        @param amount The quantity of tokens being added as liquidity\\n        @param index The token index for the add_liquidity call\\n        @return crvTokensBought the quantity of curve LP tokens received\\n    */\\n    function _enterCurve(\\n        address swapAddress,\\n        uint256 amount,\\n        uint8 index\\n    ) internal returns (uint256 crvTokensBought) {\\n        address tokenAddress = curveReg.getTokenAddress(swapAddress);\\n        address depositAddress = curveReg.getDepositAddress(swapAddress);\\n        uint256 initialBalance = _getBalance(tokenAddress);\\n        address entryToken = curveReg.getPoolTokens(swapAddress)[index];\\n        if (entryToken != ETHAddress) {\\n            IERC20(entryToken).safeIncreaseAllowance(\\n                address(depositAddress),\\n                amount\\n            );\\n        }\\n\\n        uint256 numTokens = curveReg.getNumTokens(swapAddress);\\n        bool addUnderlying = curveReg.shouldAddUnderlying(swapAddress);\\n\\n        if (numTokens == 4) {\\n            uint256[4] memory amounts;\\n            amounts[index] = amount;\\n            if (addUnderlying) {\\n                ICurveSwap(depositAddress).add_liquidity(amounts, 0, true);\\n            } else {\\n                ICurveSwap(depositAddress).add_liquidity(amounts, 0);\\n            }\\n        } else if (numTokens == 3) {\\n            uint256[3] memory amounts;\\n            amounts[index] = amount;\\n            if (addUnderlying) {\\n                ICurveSwap(depositAddress).add_liquidity(amounts, 0, true);\\n            } else {\\n                ICurveSwap(depositAddress).add_liquidity(amounts, 0);\\n            }\\n        } else {\\n            uint256[2] memory amounts;\\n            amounts[index] = amount;\\n            if (curveReg.isEthPool(depositAddress)) {\\n                ICurveEthSwap(depositAddress).add_liquidity{ value: amount }(\\n                    amounts,\\n                    0\\n                );\\n            } else if (addUnderlying) {\\n                ICurveSwap(depositAddress).add_liquidity(amounts, 0, true);\\n            } else {\\n                ICurveSwap(depositAddress).add_liquidity(amounts, 0);\\n            }\\n        }\\n        crvTokensBought = _getBalance(tokenAddress) - initialBalance;\\n    }\\n\\n    function updateCurveRegistry(ICurveRegistry newCurveRegistry)\\n        external\\n        onlyOwner\\n    {\\n        require(newCurveRegistry != curveReg, \\\"Already using this Registry\\\");\\n        curveReg = newCurveRegistry;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/0.8.0/token/ERC20/utils/TokenTimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SafeERC20.sol\\\";\\n\\n/**\\n * @dev A token holder contract that will allow a beneficiary to extract the\\n * tokens after a given release time.\\n *\\n * Useful for simple vesting schedules like \\\"advisors get all of their tokens\\n * after 1 year\\\".\\n */\\ncontract TokenTimelock {\\n    using SafeERC20 for IERC20;\\n\\n    // ERC20 basic token contract being held\\n    IERC20 private immutable _token;\\n\\n    // beneficiary of tokens after they are released\\n    address private immutable _beneficiary;\\n\\n    // timestamp when token release is enabled\\n    uint256 private immutable _releaseTime;\\n\\n    constructor(\\n        IERC20 token_,\\n        address beneficiary_,\\n        uint256 releaseTime_\\n    ) {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(\\n            releaseTime_ > block.timestamp,\\n            \\\"TokenTimelock: release time is before current time\\\"\\n        );\\n        _token = token_;\\n        _beneficiary = beneficiary_;\\n        _releaseTime = releaseTime_;\\n    }\\n\\n    /**\\n     * @return the token being held.\\n     */\\n    function token() public view virtual returns (IERC20) {\\n        return _token;\\n    }\\n\\n    /**\\n     * @return the beneficiary of the tokens.\\n     */\\n    function beneficiary() public view virtual returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @return the time when the tokens are released.\\n     */\\n    function releaseTime() public view virtual returns (uint256) {\\n        return _releaseTime;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens held by timelock to beneficiary.\\n     */\\n    function release() public virtual {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(\\n            block.timestamp >= releaseTime(),\\n            \\\"TokenTimelock: current time is before release time\\\"\\n        );\\n\\n        uint256 amount = token().balanceOf(address(this));\\n        require(amount > 0, \\\"TokenTimelock: no tokens to release\\\");\\n\\n        token().safeTransfer(beneficiary(), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/0.8.0/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/oz/0.8.0/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(\\n            senderBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/oz/0.8.0/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IAccessControl).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override\\n        onlyRole(getRoleAdmin(role))\\n    {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override\\n        onlyRole(getRoleAdmin(role))\\n    {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account)\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            account == _msgSender(),\\n            \\\"AccessControl: can only renounce roles for self\\\"\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/0.8.0/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/0.8.0/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oz/0.8.0/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goodwill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_affiliateSplit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"swapAmounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"minTokensRec\",\"type\":\"uint256[2]\"},{\"internalType\":\"address[2]\",\"name\":\"swapTargets\",\"type\":\"address[2]\"},{\"internalType\":\"bytes[2]\",\"name\":\"swapData\",\"type\":\"bytes[2]\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"ZapBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"affilliateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedTargets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositManager\",\"outputs\":[{\"internalType\":\"contract IDepositManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goodwill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootChainManager\",\"outputs\":[{\"internalType\":\"contract IRootChainManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isApproved\",\"type\":\"bool[]\"}],\"name\":\"setApprovedTargets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"set_affiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zapAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"set_feeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_affiliateSplit\",\"type\":\"uint256\"}],\"name\":\"set_new_affiliateSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_goodwill\",\"type\":\"uint256\"}],\"name\":\"set_new_goodwill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleContractActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAffiliateBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Zapper_Matic_Bridge_V1_1", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b15ed18efc59a00718b2feed77f21004a5f67ad01c3985e801c68a2840bbe074"}