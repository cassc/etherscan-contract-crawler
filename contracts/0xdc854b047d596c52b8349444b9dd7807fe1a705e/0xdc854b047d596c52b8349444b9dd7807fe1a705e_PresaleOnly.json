{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n   \r\n   */\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract PresaleOnly is Context {\r\n    address public owner;\r\n    uint256 public Adminfees = 0.01 ether;\r\n\r\n    struct preSaleStruct {\r\n        uint256 rate; // 1 eth\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 hardCap;\r\n        uint256 softCap;\r\n        uint256 minContribution;\r\n        uint256 maxContribution;\r\n        address preSalecreator;\r\n        bool Whitelist;\r\n    }\r\n\r\n    mapping(address => mapping(address => bool)) public whitelisted;\r\n\r\n    mapping(address => mapping(address => uint256)) public contributions;\r\n\r\n    mapping(address => preSaleStruct) public preSaleContractDetails;\r\n\r\n    mapping(address => mapping(address => uint256)) public userBuyedToken; //amount of token revied by user\r\n\r\n    // mapping(address => uint256) public contributions;         // amount of payment user has paid to buy token (in Eth)\r\n\r\n    event TokensPurchased(address indexed buyer, uint256 amount, uint256 cost);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only the owner can perform this operation\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Function to store the elements in the preSaleContractDetails mapping\r\n    function storePreSaleDetails(\r\n        address _contractAddress,\r\n        uint256 _rate, //3000\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _softCap,\r\n        uint256 _hardCap,\r\n        uint256 _minContribution,\r\n        uint256 _maxContribution,\r\n        bool _Whitelist\r\n    ) public payable {\r\n        require(msg.value >= Adminfees, \"do not have balance\");\r\n        payable(owner).transfer(Adminfees);\r\n\r\n        preSaleContractDetails[_contractAddress] = preSaleStruct({\r\n            rate: _rate, // 1 eth =3000\r\n            startTime: _startTime,\r\n            endTime: _endTime,\r\n            hardCap: _hardCap,\r\n            softCap: _softCap,\r\n            minContribution: _minContribution,\r\n            maxContribution: _maxContribution,\r\n            preSalecreator: msg.sender,\r\n            Whitelist: _Whitelist\r\n        });\r\n    }\r\n\r\n    //  Function to transfer tokens to presale addresses\r\n    function addPresaleAddresses(\r\n        address[] memory presaleAddresses,\r\n        address _contractAddress\r\n    ) public {\r\n        require(\r\n            msg.sender ==\r\n                preSaleContractDetails[_contractAddress].preSalecreator,\r\n            \"uour are not xreator\"\r\n        );\r\n        for (uint256 i = 0; i < presaleAddresses.length; i++) {\r\n            address recipient = presaleAddresses[i];\r\n\r\n            whitelisted[_contractAddress][recipient] = true;\r\n        }\r\n    }\r\n\r\n    function buyTokens(\r\n        uint256 tokensToBuy,\r\n        address _contractAdress\r\n    ) external payable {\r\n        IERC20 token = IERC20(_contractAdress);\r\n\r\n        require(\r\n            block.timestamp >=\r\n                preSaleContractDetails[_contractAdress].startTime &&\r\n                block.timestamp <=\r\n                preSaleContractDetails[_contractAdress].endTime,\r\n            \"Presale is not open\"\r\n        );\r\n        require(\r\n            contributions[_contractAdress][msg.sender] <=\r\n                preSaleContractDetails[_contractAdress].maxContribution,\r\n            \"max rreach\"\r\n        );\r\n        require(\r\n            msg.value >=\r\n                preSaleContractDetails[_contractAdress].minContribution,\r\n            \"can not contribute les than this\"\r\n        );\r\n\r\n        uint256 valueInEth = (tokensToBuy /\r\n            preSaleContractDetails[_contractAdress].rate) * 10 ** 18;\r\n\r\n\r\n        address creator = preSaleContractDetails[_contractAdress]\r\n            .preSalecreator;\r\n\r\n        require(tokensToBuy > 0, \"Ether amount must be greater than zero\");\r\n        require(msg.value >= valueInEth, \"not enouh balance\");\r\n\r\n        if (preSaleContractDetails[_contractAdress].Whitelist == true) {\r\n\r\n            require(\r\n                whitelisted[_contractAdress][msg.sender] == true,\r\n                \"you are not allowed\"\r\n            );\r\n            require(\r\n                token.transferFrom(creator, msg.sender, tokensToBuy),\r\n                \"Token transfer failed\"\r\n            );\r\n        } else if (preSaleContractDetails[_contractAdress].Whitelist == false) {\r\n            require(\r\n                token.transferFrom(creator, msg.sender, tokensToBuy),\r\n                \"Token transfer failed\"\r\n            );\r\n        }\r\n\r\n\r\n        userBuyedToken[_contractAdress][msg.sender] += tokensToBuy;\r\n\r\n        contributions[_contractAdress][msg.sender] += valueInEth;\r\n\r\n        payable(creator).transfer(valueInEth);\r\n\r\n        emit TokensPurchased(msg.sender, tokensToBuy, valueInEth);\r\n    }\r\n\r\n    function withdrawFunds() external onlyOwner {\r\n        address payable ownerPayable = payable(owner);\r\n        ownerPayable.transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawUnsoldTokens(address _contractAddess) external onlyOwner {\r\n        IERC20 token = IERC20(_contractAddess);\r\n        require(\r\n            token.transfer(owner, token.balanceOf(address(this))),\r\n            \"Token transfer failed\"\r\n        );\r\n    }\r\n\r\n    function setOwner (address _newFeecollector) public onlyOwner {\r\n        owner =_newFeecollector;\r\n    }\r\n\r\n    function setAdminFee (uint256 _newfee) public onlyOwner{\r\n        Adminfees= _newfee;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Adminfees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"presaleAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"addPresaleAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToBuy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contractAdress\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"preSaleContractDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"preSalecreator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"Whitelist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newfee\",\"type\":\"uint256\"}],\"name\":\"setAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeecollector\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_Whitelist\",\"type\":\"bool\"}],\"name\":\"storePreSaleDetails\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBuyedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddess\",\"type\":\"address\"}],\"name\":\"withdrawUnsoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PresaleOnly", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://30fed83b63dc7c6e362c2b3497ead6356d34352ed1e62a8c695f9c75736980c6"}