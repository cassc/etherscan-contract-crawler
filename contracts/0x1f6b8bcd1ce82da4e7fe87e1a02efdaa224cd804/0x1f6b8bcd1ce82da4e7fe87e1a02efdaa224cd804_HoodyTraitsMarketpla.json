{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/HoodyTraitsMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\ninterface IHoodyTraits {\\r\\n    function listTraitsToMarketplace(uint16, uint16) external;\\r\\n\\r\\n    function downTraitsFromMarketplace(uint16, uint16) external;\\r\\n\\r\\n    function buyTraitFromMarketplace(uint16, uint16) external;\\r\\n}\\r\\n\\r\\ncontract HoodyTraitsMarketplace is Ownable, ReentrancyGuard {\\r\\n    address public hoodyTraits;\\r\\n\\r\\n    struct TraitForSale {\\r\\n        uint256 price;\\r\\n        uint16 amount;\\r\\n    }\\r\\n\\r\\n    mapping(address => mapping(uint16 => TraitForSale))\\r\\n        public traitsSaleInfoBySeller;\\r\\n\\r\\n    uint8 public tradingFee = 5;\\r\\n\\r\\n    event ListTrait(\\r\\n        address indexed seller,\\r\\n        uint16 indexed traitId,\\r\\n        uint16 amount,\\r\\n        uint256 price\\r\\n    );\\r\\n    event UpdateTraitPrice(\\r\\n        address indexed seller,\\r\\n        uint16 indexed traitId,\\r\\n        uint256 price\\r\\n    );\\r\\n    event DownTrait(\\r\\n        address indexed seller,\\r\\n        uint16 indexed traitId,\\r\\n        uint16 amount\\r\\n    );\\r\\n    event BuyTrait(\\r\\n        address indexed seller,\\r\\n        address indexed buyer,\\r\\n        uint16 indexed traitId,\\r\\n        uint16 amount\\r\\n    );\\r\\n    event AddTrait(\\r\\n        address indexed seller,\\r\\n        uint16 indexed traitId,\\r\\n        uint16 amount\\r\\n    );\\r\\n\\r\\n    constructor() Ownable(msg.sender) {}\\r\\n\\r\\n    function listNewTrait(\\r\\n        uint16 _traitId,\\r\\n        uint256 _price,\\r\\n        uint16 _amount\\r\\n    ) external {\\r\\n        require(\\r\\n            traitsSaleInfoBySeller[msg.sender][_traitId].amount == 0,\\r\\n            \\\"You already listed that trait.\\\"\\r\\n        );\\r\\n        IHoodyTraits(hoodyTraits).listTraitsToMarketplace(\\r\\n            _traitId,\\r\\n            _amount\\r\\n        );\\r\\n\\r\\n        traitsSaleInfoBySeller[msg.sender][_traitId] = TraitForSale(\\r\\n            _price,\\r\\n            _amount\\r\\n        );\\r\\n\\r\\n        emit ListTrait(msg.sender, _traitId, _amount, _price);\\r\\n    }\\r\\n\\r\\n    function addMoreTraits(uint16 _traitId, uint16 _amount) external {\\r\\n        require(\\r\\n            traitsSaleInfoBySeller[msg.sender][_traitId].amount > 0,\\r\\n            \\\"You didn't list that trait yet.\\\"\\r\\n        );\\r\\n        IHoodyTraits(hoodyTraits).listTraitsToMarketplace(\\r\\n            _traitId,\\r\\n            _amount\\r\\n        );\\r\\n\\r\\n        traitsSaleInfoBySeller[msg.sender][_traitId].amount += _amount;\\r\\n\\r\\n        emit AddTrait(msg.sender, _traitId, _amount);\\r\\n    }\\r\\n\\r\\n    function buyTrait(\\r\\n        address _seller,\\r\\n        uint16 _traitId,\\r\\n        uint16 _amount\\r\\n    ) internal {\\r\\n        require(_amount > 0, \\\"Invalid amount.\\\");\\r\\n        require(\\r\\n            traitsSaleInfoBySeller[_seller][_traitId].amount >= _amount,\\r\\n            \\\"Not enough amount.\\\"\\r\\n        );\\r\\n\\r\\n        traitsSaleInfoBySeller[_seller][_traitId].amount -= _amount;\\r\\n\\r\\n        IHoodyTraits(hoodyTraits).buyTraitFromMarketplace(\\r\\n            _traitId,\\r\\n            _amount\\r\\n        );\\r\\n\\r\\n        emit BuyTrait(_seller, msg.sender, _traitId, _amount);\\r\\n    }\\r\\n\\r\\n    function buyTraits(\\r\\n        address[] memory _sellers,\\r\\n        uint16[] memory _traitIds,\\r\\n        uint16[] memory _amounts\\r\\n    ) external payable nonReentrant {\\r\\n        require(_sellers.length == _traitIds.length, \\\"Invalid param length!\\\");\\r\\n        require(_sellers.length == _amounts.length, \\\"Invalid param length!\\\");\\r\\n\\r\\n        uint256 totalAmount = 0;\\r\\n        for (uint i; i < _sellers.length; i++) {\\r\\n            uint256 cost = traitsSaleInfoBySeller[_sellers[i]][_traitIds[i]]\\r\\n                .price * _amounts[i];\\r\\n            totalAmount += cost;\\r\\n            buyTrait(_sellers[i], _traitIds[i], _amounts[i]);\\r\\n            payable(_sellers[i]).transfer(cost * (100 - tradingFee) / 100);\\r\\n        }\\r\\n\\r\\n        require(totalAmount <= msg.value, \\\"Not enough eth balance!\\\");\\r\\n        if (msg.value > totalAmount) {\\r\\n            payable(msg.sender).transfer(msg.value - totalAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function downTrait(uint16 _traitId, uint16 _amount) external {\\r\\n        require(\\r\\n            traitsSaleInfoBySeller[msg.sender][_traitId].amount >= _amount,\\r\\n            \\\"Not enough amount.\\\"\\r\\n        );\\r\\n        IHoodyTraits(hoodyTraits).downTraitsFromMarketplace(\\r\\n            _traitId,\\r\\n            _amount\\r\\n        );\\r\\n        traitsSaleInfoBySeller[msg.sender][_traitId].amount -= _amount;\\r\\n\\r\\n        emit DownTrait(msg.sender, _traitId, _amount);\\r\\n    }\\r\\n\\r\\n    function updateTraitPrice(uint16 _traitId, uint256 _price) external {\\r\\n        require(\\r\\n            traitsSaleInfoBySeller[msg.sender][_traitId].amount >= 0,\\r\\n            \\\"You didn't list that trait yet.\\\"\\r\\n        );\\r\\n        traitsSaleInfoBySeller[msg.sender][_traitId].price = _price;\\r\\n        emit UpdateTraitPrice(msg.sender, _traitId, _price);\\r\\n    }\\r\\n\\r\\n    function withdrawFee(address payable _receiver) external onlyOwner {\\r\\n        _receiver.transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function setTradingFee(uint8 _fee) external onlyOwner {\\r\\n        tradingFee = _fee;\\r\\n    }\\r\\n\\r\\n    function setHoodyTraits(address _hoodyTraits) external onlyOwner {\\r\\n        hoodyTraits = _hoodyTraits;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"traitId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"AddTrait\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"traitId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"BuyTrait\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"traitId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"name\":\"DownTrait\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"traitId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ListTrait\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"traitId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"UpdateTraitPrice\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_traitId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_amount\",\"type\":\"uint16\"}],\"name\":\"addMoreTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sellers\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_traitIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_amounts\",\"type\":\"uint16[]\"}],\"name\":\"buyTraits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_traitId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_amount\",\"type\":\"uint16\"}],\"name\":\"downTrait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hoodyTraits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_traitId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_amount\",\"type\":\"uint16\"}],\"name\":\"listNewTrait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hoodyTraits\",\"type\":\"address\"}],\"name\":\"setHoodyTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_fee\",\"type\":\"uint8\"}],\"name\":\"setTradingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"traitsSaleInfoBySeller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"amount\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_traitId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateTraitPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HoodyTraitsMarketplace", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}