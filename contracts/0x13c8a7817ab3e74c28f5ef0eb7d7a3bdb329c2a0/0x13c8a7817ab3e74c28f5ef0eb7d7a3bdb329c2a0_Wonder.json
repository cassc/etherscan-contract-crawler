{"SourceCode": "pragma solidity ^0.4.19;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  address public ceoWallet;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    ceoWallet = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n// Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n}\r\n\r\n\r\ncontract CryptoRomeControl is Ownable {\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n    \r\n    function transferWalletOwnership(address newWalletAddress) onlyOwner public {\r\n      require(newWalletAddress != address(0));\r\n      ceoWallet = newWalletAddress;\r\n    }\r\n\r\n    function pause() external onlyOwner whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n    }\r\n}\r\n\r\ncontract CryptoRomeAuction is CryptoRomeControl {\r\n\r\n    address public WonderOwnershipAdd;\r\n    uint256 public auctionStart;\r\n    uint256 public startingBid;\r\n    uint256 public auctionDuration;\r\n    address public highestBidder;\r\n    uint256 public highestBid;\r\n    address public paymentAddress;\r\n    uint256 public wonderId;\r\n    bool public ended;\r\n\r\n    event Bid(address from, uint256 amount);\r\n    event AuctionEnded(address winner, uint256 amount);\r\n\r\n    constructor(uint256 _startTime, uint256 _startingBid, uint256 _duration, address wallet, uint256 _wonderId, address developer) public {\r\n        WonderOwnershipAdd = msg.sender;\r\n        auctionStart = _startTime;\r\n        startingBid = _startingBid;\r\n        auctionDuration = _duration;\r\n        paymentAddress = wallet;\r\n        wonderId = _wonderId;\r\n        transferOwnership(developer);\r\n    }\r\n    \r\n    function getAuctionData() public view returns(uint256, uint256, uint256, address) {\r\n        return(auctionStart, auctionDuration, highestBid, highestBidder);\r\n    }\r\n\r\n    function _isContract(address _user) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(_user) }\r\n        return size > 0;\r\n    }\r\n\r\n    function auctionExpired() public view returns (bool) {\r\n        return now > (SafeMath.add(auctionStart, auctionDuration));\r\n    }\r\n\r\n    function bidOnWonder() public payable {\r\n        require(!_isContract(msg.sender));\r\n        require(!auctionExpired());\r\n        require(msg.value >= (highestBid + 10000000000000000));\r\n\r\n        if (highestBid != 0) {\r\n            highestBidder.transfer(highestBid);\r\n        }\r\n\r\n        highestBidder = msg.sender;\r\n        highestBid = msg.value;\r\n\r\n        emit Bid(msg.sender, msg.value);\r\n    }\r\n\r\n    function endAuction() public onlyOwner {\r\n        require(auctionExpired());\r\n        require(!ended);\r\n        ended = true;\r\n        emit AuctionEnded(highestBidder, highestBid);\r\n        // Transfer the item to the buyer\r\n        Wonder(WonderOwnershipAdd).transfer(highestBidder, wonderId);\r\n\r\n        paymentAddress.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\ncontract Wonder is ERC721, CryptoRomeControl {\r\n    \r\n    // Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant name = \"CryptoRomeWonder\";\r\n    string public constant symbol = \"CROMEW\";\r\n\r\n    uint256[] internal allWonderTokens;\r\n\r\n    mapping(uint256 => string) internal tokenURIs;\r\n    address public originalAuction;\r\n    mapping (uint256 => bool) public wonderForSale;\r\n    mapping (uint256 => uint256) public askingPrice;\r\n\r\n    // Map of Wonder to the owner\r\n    mapping (uint256 => address) public wonderIndexToOwner;\r\n    mapping (address => uint256) ownershipTokenCount;\r\n    mapping (uint256 => address) wonderIndexToApproved;\r\n    \r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(wonderIndexToOwner[_tokenId] == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function updateTokenUri(uint256 _tokenId, string _tokenURI) public whenNotPaused onlyOwner {\r\n        _setTokenURI(_tokenId, _tokenURI);\r\n    }\r\n\r\n    function startWonderAuction(string _tokenURI, address wallet) public whenNotPaused onlyOwner {\r\n        uint256 finalId = _createWonder(msg.sender);\r\n        _setTokenURI(finalId, _tokenURI);\r\n        //Starting auction\r\n        originalAuction = new CryptoRomeAuction(now, 10 finney, 1 weeks, wallet, finalId, msg.sender);\r\n        _transfer(msg.sender, originalAuction, finalId);\r\n    }\r\n    \r\n    function createWonderNotAuction(string _tokenURI) public whenNotPaused onlyOwner returns (uint256) {\r\n        uint256 finalId = _createWonder(msg.sender);\r\n        _setTokenURI(finalId, _tokenURI);\r\n        return finalId;\r\n    }\r\n    \r\n    function sellWonder(uint256 _wonderId, uint256 _askingPrice) onlyOwnerOf(_wonderId) whenNotPaused public {\r\n        wonderForSale[_wonderId] = true;\r\n        askingPrice[_wonderId] = _askingPrice;\r\n    }\r\n    \r\n    function cancelWonderSale(uint256 _wonderId) onlyOwnerOf(_wonderId) whenNotPaused public {\r\n        wonderForSale[_wonderId] = false;\r\n        askingPrice[_wonderId] = 0;\r\n    }\r\n    \r\n    function purchaseWonder(uint256 _wonderId) whenNotPaused public payable {\r\n        require(wonderForSale[_wonderId]);\r\n        require(msg.value >= askingPrice[_wonderId]);\r\n        wonderForSale[_wonderId] = false;\r\n        uint256 fee = devFee(msg.value);\r\n        ceoWallet.transfer(fee);\r\n        wonderIndexToOwner[_wonderId].transfer(SafeMath.sub(address(this).balance, fee));\r\n        _transfer(wonderIndexToOwner[_wonderId], msg.sender, _wonderId);\r\n    }\r\n    \r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        ownershipTokenCount[_to] = SafeMath.add(ownershipTokenCount[_to], 1);\r\n        wonderIndexToOwner[_tokenId] = _to;\r\n        if (_from != address(0)) {\r\n            // clear any previously approved ownership exchange\r\n            ownershipTokenCount[_from] = SafeMath.sub(ownershipTokenCount[_from], 1);\r\n            delete wonderIndexToApproved[_tokenId];\r\n        }\r\n    }\r\n\r\n    function _createWonder(address _owner) internal returns (uint) {\r\n        uint256 newWonderId = allWonderTokens.push(allWonderTokens.length) - 1;\r\n        wonderForSale[newWonderId] = false;\r\n\r\n        // Only 8 wonders should ever exist (0-7)\r\n        require(newWonderId < 8);\r\n        _transfer(0, _owner, newWonderId);\r\n        return newWonderId;\r\n    }\r\n    \r\n    function devFee(uint256 amount) internal pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount, 3), 100);\r\n    }\r\n    \r\n    // Functions for ERC721 Below:\r\n\r\n    // Check is address has approval to transfer wonder.\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return wonderIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        address owner = wonderIndexToOwner[_tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string) {\r\n        require(exists(_tokenId));\r\n        return tokenURIs[_tokenId];\r\n    }\r\n\r\n    function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n        require(exists(_tokenId));\r\n        tokenURIs[_tokenId] = _uri;\r\n    }\r\n\r\n    // Sets a wonder as approved for transfer to another address.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        wonderIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    // Returns the number of Wonders owned by a specific address.\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    // Transfers a Wonder to another address. If transferring to a smart\r\n    // contract ensure that it is aware of ERC-721.\r\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) whenNotPaused {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n\r\n        _transfer(msg.sender, _to, _tokenId);\r\n        emit Transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    //  Permit another address the right to transfer a specific Wonder via\r\n    //  transferFrom(). \r\n    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) whenNotPaused {\r\n        _approve(_tokenId, _to);\r\n\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    // Transfer a Wonder owned by another address, for which the calling address\r\n    // has previously been granted transfer approval by the owner.\r\n    function takeOwnership(uint256 _tokenId) public {\r\n\r\n    require(wonderIndexToApproved[_tokenId] == msg.sender);\r\n    address owner = ownerOf(_tokenId);\r\n    _transfer(owner, msg.sender, _tokenId);\r\n    emit Transfer(owner, msg.sender, _tokenId);\r\n\r\n  }\r\n\r\n    // Eight Wonders will ever exist\r\n    function totalSupply() public view returns (uint) {\r\n        return 8;\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner)\r\n    {\r\n        owner = wonderIndexToOwner[_tokenId];\r\n        require(owner != address(0));\r\n    }\r\n\r\n    // List of all Wonder IDs assigned to an address.\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalWonders = totalSupply();\r\n            uint256 resultIndex = 0;\r\n            uint256 wonderId;\r\n\r\n            for (wonderId = 0; wonderId < totalWonders; wonderId++) {\r\n                if (wonderIndexToOwner[wonderId] == _owner) {\r\n                    result[resultIndex] = wonderId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"originalAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"createWonderNotAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wonderForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wonderIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"askingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wonderId\",\"type\":\"uint256\"},{\"name\":\"_askingPrice\",\"type\":\"uint256\"}],\"name\":\"sellWonder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenURI\",\"type\":\"string\"},{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"startWonderAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWalletAddress\",\"type\":\"address\"}],\"name\":\"transferWalletOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"updateTokenUri\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wonderId\",\"type\":\"uint256\"}],\"name\":\"purchaseWonder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wonderId\",\"type\":\"uint256\"}],\"name\":\"cancelWonderSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "Wonder", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ad6fdec98a0d89a757f20df00860ef4198480ebd8fc07a012a517db5b4fdec37"}