{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/dynamic-contracts/eip/ERC721AUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v3.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n////////// CHANGELOG: turn `approve` to virtual //////////\\n\\nimport \\\"../../eip/interface/IERC721A.sol\\\";\\nimport \\\"../../eip/interface/IERC721Receiver.sol\\\";\\nimport \\\"../../lib/TWAddress.sol\\\";\\nimport \\\"../../openzeppelin-presets/utils/Context.sol\\\";\\nimport \\\"../../lib/TWStrings.sol\\\";\\nimport \\\"../../eip/ERC165.sol\\\";\\nimport \\\"../extension/Initializable.sol\\\";\\n\\nlibrary ERC721AStorage {\\n    bytes32 public constant ERC721A_STORAGE_POSITION = keccak256(\\\"erc721.a.storage\\\");\\n\\n    struct Data {\\n        // The tokenId of the next token to be minted.\\n        uint256 _currentIndex;\\n        // The number of tokens burned.\\n        uint256 _burnCounter;\\n        // Token name\\n        string _name;\\n        // Token symbol\\n        string _symbol;\\n        // Mapping from token ID to ownership details\\n        // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\n        mapping(uint256 => IERC721A.TokenOwnership) _ownerships;\\n        // Mapping owner address to address data\\n        mapping(address => IERC721A.AddressData) _addressData;\\n        // Mapping from token ID to approved address\\n        mapping(uint256 => address) _tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) _operatorApprovals;\\n    }\\n\\n    function erc721AStorage() internal pure returns (Data storage erc721AData) {\\n        bytes32 position = ERC721A_STORAGE_POSITION;\\n        assembly {\\n            erc721AData.slot := position\\n        }\\n    }\\n}\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721AUpgradeable is Initializable, Context, ERC165, IERC721A {\\n    using TWAddress for address;\\n    using TWStrings for uint256;\\n\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n\\n        data._name = name_;\\n        data._symbol = symbol_;\\n        data._currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * To change the starting tokenId, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex - _startTokenId() times\\n        unchecked {\\n            return data._currentIndex - data._burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to _startTokenId()\\n        unchecked {\\n            return data._currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(data._addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n        return uint256(data._addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n        return uint256(data._addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n        return data._addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n        data._addressData[owner].aux = aux;\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < data._currentIndex) {\\n                    TokenOwnership memory ownership = data._ownerships[curr];\\n                    if (!ownership.burned) {\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                        // Invariant:\\n                        // There will always be an ownership that has an address and is not burned\\n                        // before an ownership that does not have an address and is not burned.\\n                        // Hence, curr will not underflow.\\n                        while (true) {\\n                            curr--;\\n                            ownership = data._ownerships[curr];\\n                            if (ownership.addr != address(0)) {\\n                                return ownership;\\n                            }\\n                        }\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return _ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n        return data._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n        return data._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721AUpgradeable.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner)\\n            if (!isApprovedForAll(owner, _msgSender())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return data._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        data._operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n        return data._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (to.isContract())\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n        return _startTokenId() <= tokenId && tokenId < data._currentIndex && !data._ownerships[tokenId].burned;\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n\\n        uint256 startTokenId = data._currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            data._addressData[to].balance += uint64(quantity);\\n            data._addressData[to].numberMinted += uint64(quantity);\\n\\n            data._ownerships[startTokenId].addr = to;\\n            data._ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            if (to.isContract()) {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex);\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (updatedIndex < end);\\n                // Reentrancy protection\\n                if (data._currentIndex != startTokenId) revert();\\n            } else {\\n                do {\\n                    emit Transfer(address(0), to, updatedIndex++);\\n                } while (updatedIndex < end);\\n            }\\n            data._currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 quantity) internal {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n\\n        uint256 startTokenId = data._currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        unchecked {\\n            data._addressData[to].balance += uint64(quantity);\\n            data._addressData[to].numberMinted += uint64(quantity);\\n\\n            data._ownerships[startTokenId].addr = to;\\n            data._ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            do {\\n                emit Transfer(address(0), to, updatedIndex++);\\n            } while (updatedIndex < end);\\n\\n            data._currentIndex = updatedIndex;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\n            isApprovedForAll(from, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            data._addressData[from].balance -= 1;\\n            data._addressData[to].balance += 1;\\n\\n            TokenOwnership storage currSlot = data._ownerships[tokenId];\\n            currSlot.addr = to;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = data._ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != data._currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\n\\n        address from = prevOwnership.addr;\\n\\n        if (approvalCheck) {\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\n                isApprovedForAll(from, _msgSender()) ||\\n                getApproved(tokenId) == _msgSender());\\n\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, from);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            AddressData storage addressData = data._addressData[from];\\n            addressData.balance -= 1;\\n            addressData.numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            TokenOwnership storage currSlot = data._ownerships[tokenId];\\n            currSlot.addr = from;\\n            currSlot.startTimestamp = uint64(block.timestamp);\\n            currSlot.burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            TokenOwnership storage nextSlot = data._ownerships[nextTokenId];\\n            if (nextSlot.addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId != data._currentIndex) {\\n                    nextSlot.addr = from;\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            data._burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n        data._tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/ContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IContractMetadata.sol\\\";\\n\\n/**\\n *  @author  thirdweb.com\\n *\\n *  @title   Contract Metadata\\n *  @notice  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *           for you contract.\\n *           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\nlibrary ContractMetadataStorage {\\n    bytes32 public constant CONTRACT_METADATA_STORAGE_POSITION = keccak256(\\\"contract.metadata.storage\\\");\\n\\n    struct Data {\\n        /// @notice Returns the contract metadata URI.\\n        string contractURI;\\n    }\\n\\n    function contractMetadataStorage() internal pure returns (Data storage contractMetadataData) {\\n        bytes32 position = CONTRACT_METADATA_STORAGE_POSITION;\\n        assembly {\\n            contractMetadataData.slot := position\\n        }\\n    }\\n}\\n\\nabstract contract ContractMetadata is IContractMetadata {\\n    /**\\n     *  @notice         Lets a contract admin set the URI for contract-level metadata.\\n     *  @dev            Caller should be authorized to setup contractURI, e.g. contract admin.\\n     *                  See {_canSetContractURI}.\\n     *                  Emits {ContractURIUpdated Event}.\\n     *\\n     *  @param _uri     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function setContractURI(string memory _uri) external override {\\n        if (!_canSetContractURI()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        _setupContractURI(_uri);\\n    }\\n\\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\\n    function _setupContractURI(string memory _uri) internal {\\n        ContractMetadataStorage.Data storage data = ContractMetadataStorage.contractMetadataStorage();\\n        string memory prevURI = data.contractURI;\\n        data.contractURI = _uri;\\n\\n        emit ContractURIUpdated(prevURI, _uri);\\n    }\\n\\n    /// @notice Returns the contract metadata URI.\\n    function contractURI() public view virtual override returns (string memory) {\\n        ContractMetadataStorage.Data storage data = ContractMetadataStorage.contractMetadataStorage();\\n        return data.contractURI;\\n    }\\n\\n    /// @dev Returns whether contract metadata can be set in the given execution context.\\n    function _canSetContractURI() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../openzeppelin-presets/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\nlibrary EIP712Storage {\\n    bytes32 public constant EIP712_STORAGE_POSITION = keccak256(\\\"eip712.storage\\\");\\n\\n    struct Data {\\n        /* solhint-disable var-name-mixedcase */\\n        bytes32 _HASHED_NAME;\\n        bytes32 _HASHED_VERSION;\\n        /* solhint-enable var-name-mixedcase */\\n    }\\n\\n    function eip712Storage() internal pure returns (Data storage eip712Data) {\\n        bytes32 position = EIP712_STORAGE_POSITION;\\n        assembly {\\n            eip712Data.slot := position\\n        }\\n    }\\n}\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n\\n        EIP712Storage.Data storage data = EIP712Storage.eip712Storage();\\n\\n        data._HASHED_NAME = hashedName;\\n        data._HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal view virtual returns (bytes32) {\\n        EIP712Storage.Data storage data = EIP712Storage.eip712Storage();\\n        return data._HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal view virtual returns (bytes32) {\\n        EIP712Storage.Data storage data = EIP712Storage.eip712Storage();\\n        return data._HASHED_VERSION;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/ERC2771ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../extension/interface/IERC2771Context.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\n\\nlibrary ERC2771ContextStorage {\\n    bytes32 public constant ERC2771_CONTEXT_STORAGE_POSITION = keccak256(\\\"erc2771.context.storage\\\");\\n\\n    struct Data {\\n        mapping(address => bool) trustedForwarder;\\n    }\\n\\n    function erc2771ContextStorage() internal pure returns (Data storage erc2771ContextData) {\\n        bytes32 position = ERC2771_CONTEXT_STORAGE_POSITION;\\n        assembly {\\n            erc2771ContextData.slot := position\\n        }\\n    }\\n}\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable {\\n    function __ERC2771Context_init(address[] memory trustedForwarder) internal onlyInitializing {\\n        __ERC2771Context_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771Context_init_unchained(address[] memory trustedForwarder) internal onlyInitializing {\\n        ERC2771ContextStorage.Data storage data = ERC2771ContextStorage.erc2771ContextStorage();\\n\\n        for (uint256 i = 0; i < trustedForwarder.length; i++) {\\n            data.trustedForwarder[trustedForwarder[i]] = true;\\n        }\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        ERC2771ContextStorage.Data storage data = ERC2771ContextStorage.erc2771ContextStorage();\\n        return data.trustedForwarder[forwarder];\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/TWAddress.sol\\\";\\n\\nlibrary InitStorage {\\n    /// @dev The location of the storage of the entrypoint contract's data.\\n    bytes32 constant INIT_STORAGE_POSITION = keccak256(\\\"init.storage\\\");\\n\\n    /// @dev Layout of the entrypoint contract's storage.\\n    struct Data {\\n        uint8 initialized;\\n        bool initializing;\\n    }\\n\\n    /// @dev Returns the entrypoint contract's data at the relevant storage location.\\n    function initStorage() internal pure returns (Data storage initData) {\\n        bytes32 position = INIT_STORAGE_POSITION;\\n        assembly {\\n            initData.slot := position\\n        }\\n    }\\n}\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        InitStorage.Data storage data = InitStorage.initStorage();\\n        uint8 _initialized = data.initialized;\\n        bool _initializing = data.initializing;\\n\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!TWAddress.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        data.initialized = 1;\\n        if (isTopLevelCall) {\\n            data.initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            data.initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        InitStorage.Data storage data = InitStorage.initStorage();\\n        uint8 _initialized = data.initialized;\\n        bool _initializing = data.initializing;\\n\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        data.initialized = version;\\n        data.initializing = true;\\n        _;\\n        data.initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        InitStorage.Data storage data = InitStorage.initStorage();\\n        require(data.initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        InitStorage.Data storage data = InitStorage.initStorage();\\n        uint8 _initialized = data.initialized;\\n        bool _initializing = data.initializing;\\n\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            data.initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/OperatorFilterToggle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IOperatorFilterToggle.sol\\\";\\n\\nlibrary OperatorFilterToggleStorage {\\n    bytes32 public constant OPERATOR_FILTER_TOGGLE_STORAGE_POSITION = keccak256(\\\"operator.filter.toggle.storage\\\");\\n\\n    struct Data {\\n        bool operatorRestriction;\\n    }\\n\\n    function operatorFilterToggleStorage() internal pure returns (Data storage operatorFilterToggleData) {\\n        bytes32 position = OPERATOR_FILTER_TOGGLE_STORAGE_POSITION;\\n        assembly {\\n            operatorFilterToggleData.slot := position\\n        }\\n    }\\n}\\n\\nabstract contract OperatorFilterToggle is IOperatorFilterToggle {\\n    function operatorRestriction() external view override returns (bool) {\\n        OperatorFilterToggleStorage.Data storage data = OperatorFilterToggleStorage.operatorFilterToggleStorage();\\n        return data.operatorRestriction;\\n    }\\n\\n    function setOperatorRestriction(bool _restriction) external {\\n        require(_canSetOperatorRestriction(), \\\"Not authorized to set operator restriction.\\\");\\n        _setOperatorRestriction(_restriction);\\n    }\\n\\n    function _setOperatorRestriction(bool _restriction) internal {\\n        OperatorFilterToggleStorage.Data storage data = OperatorFilterToggleStorage.operatorFilterToggleStorage();\\n\\n        data.operatorRestriction = _restriction;\\n        emit OperatorRestriction(_restriction);\\n    }\\n\\n    function _canSetOperatorRestriction() internal virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IOwnable.sol\\\";\\n\\n/**\\n *  @title   Ownable\\n *  @notice  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\\n *           information about who the contract's owner is.\\n */\\n\\nlibrary OwnableStorage {\\n    bytes32 public constant OWNABLE_STORAGE_POSITION = keccak256(\\\"ownable.storage\\\");\\n\\n    struct Data {\\n        /// @dev Owner of the contract (purpose: OpenSea compatibility)\\n        address _owner;\\n    }\\n\\n    function ownableStorage() internal pure returns (Data storage ownableData) {\\n        bytes32 position = OWNABLE_STORAGE_POSITION;\\n        assembly {\\n            ownableData.slot := position\\n        }\\n    }\\n}\\n\\nabstract contract Ownable is IOwnable {\\n    /// @dev Reverts if caller is not the owner.\\n    modifier onlyOwner() {\\n        OwnableStorage.Data storage data = OwnableStorage.ownableStorage();\\n        if (msg.sender != data._owner) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     *  @notice Returns the owner of the contract.\\n     */\\n    function owner() public view override returns (address) {\\n        OwnableStorage.Data storage data = OwnableStorage.ownableStorage();\\n        return data._owner;\\n    }\\n\\n    /**\\n     *  @notice Lets an authorized wallet set a new owner for the contract.\\n     *  @param _newOwner The address to set as the new owner of the contract.\\n     */\\n    function setOwner(address _newOwner) external override {\\n        if (!_canSetOwner()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n        _setupOwner(_newOwner);\\n    }\\n\\n    /// @dev Lets a contract admin set a new owner for the contract. The new owner must be a contract admin.\\n    function _setupOwner(address _newOwner) internal {\\n        OwnableStorage.Data storage data = OwnableStorage.ownableStorage();\\n\\n        address _prevOwner = data._owner;\\n        data._owner = _newOwner;\\n\\n        emit OwnerUpdated(_prevOwner, _newOwner);\\n    }\\n\\n    /// @dev Returns whether owner can be set in the given execution context.\\n    function _canSetOwner() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/Permissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IPermissions.sol\\\";\\nimport \\\"../../lib/TWStrings.sol\\\";\\n\\n/**\\n *  @title   Permissions\\n *  @dev     This contracts provides extending-contracts with role-based access control mechanisms\\n */\\n\\nlibrary PermissionsStorage {\\n    bytes32 public constant PERMISSIONS_STORAGE_POSITION = keccak256(\\\"permissions.storage\\\");\\n\\n    struct Data {\\n        /// @dev Map from keccak256 hash of a role => a map from address => whether address has role.\\n        mapping(bytes32 => mapping(address => bool)) _hasRole;\\n        /// @dev Map from keccak256 hash of a role to role admin. See {getRoleAdmin}.\\n        mapping(bytes32 => bytes32) _getRoleAdmin;\\n    }\\n\\n    function permissionsStorage() internal pure returns (Data storage permissionsData) {\\n        bytes32 position = PERMISSIONS_STORAGE_POSITION;\\n        assembly {\\n            permissionsData.slot := position\\n        }\\n    }\\n}\\n\\ncontract Permissions is IPermissions {\\n    /// @dev Default admin role for all roles. Only accounts with this role can grant/revoke other roles.\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev Modifier that checks if an account has the specified role; reverts otherwise.\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     *  @notice         Checks whether an account has a particular role.\\n     *  @dev            Returns `true` if `account` has been granted `role`.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account for which the role is being checked.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        return data._hasRole[role][account];\\n    }\\n\\n    /**\\n     *  @notice         Checks whether an account has a particular role;\\n     *                  role restrictions can be swtiched on and off.\\n     *\\n     *  @dev            Returns `true` if `account` has been granted `role`.\\n     *                  Role restrictions can be swtiched on and off:\\n     *                      - If address(0) has ROLE, then the ROLE restrictions\\n     *                        don't apply.\\n     *                      - If address(0) does not have ROLE, then the ROLE\\n     *                        restrictions will apply.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account for which the role is being checked.\\n     */\\n    function hasRoleWithSwitch(bytes32 role, address account) public view returns (bool) {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        if (!data._hasRole[role][address(0)]) {\\n            return data._hasRole[role][account];\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     *  @notice         Returns the admin role that controls the specified role.\\n     *  @dev            See {grantRole} and {revokeRole}.\\n     *                  To change a role's admin, use {_setRoleAdmin}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function getRoleAdmin(bytes32 role) external view override returns (bytes32) {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        return data._getRoleAdmin[role];\\n    }\\n\\n    /**\\n     *  @notice         Grants a role to an account, if not previously granted.\\n     *  @dev            Caller must have admin role for the `role`.\\n     *                  Emits {RoleGranted Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account to which the role is being granted.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        _checkRole(data._getRoleAdmin[role], _msgSender());\\n        if (data._hasRole[role][account]) {\\n            revert(\\\"Can only grant to non holders\\\");\\n        }\\n        _setupRole(role, account);\\n    }\\n\\n    /**\\n     *  @notice         Revokes role from an account.\\n     *  @dev            Caller must have admin role for the `role`.\\n     *                  Emits {RoleRevoked Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account from which the role is being revoked.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        _checkRole(data._getRoleAdmin[role], _msgSender());\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     *  @notice         Revokes role from the account.\\n     *  @dev            Caller must have the `role`, with caller being the same as `account`.\\n     *                  Emits {RoleRevoked Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account from which the role is being revoked.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        if (_msgSender() != account) {\\n            revert(\\\"Can only renounce for self\\\");\\n        }\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @dev Sets `adminRole` as `role`'s admin role.\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        bytes32 previousAdminRole = data._getRoleAdmin[role];\\n        data._getRoleAdmin[role] = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /// @dev Sets up `role` for `account`\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        data._hasRole[role][account] = true;\\n        emit RoleGranted(role, account, _msgSender());\\n    }\\n\\n    /// @dev Revokes `role` from `account`\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        _checkRole(role, account);\\n        delete data._hasRole[role][account];\\n        emit RoleRevoked(role, account, _msgSender());\\n    }\\n\\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        if (!data._hasRole[role][account]) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Permissions: account \\\",\\n                        TWStrings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        TWStrings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\\n    function _checkRoleWithSwitch(bytes32 role, address account) internal view virtual {\\n        if (!hasRoleWithSwitch(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Permissions: account \\\",\\n                        TWStrings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        TWStrings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/PermissionsEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IPermissionsEnumerable.sol\\\";\\nimport \\\"./Permissions.sol\\\";\\n\\n/**\\n *  @title   PermissionsEnumerable\\n *  @dev     This contracts provides extending-contracts with role-based access control mechanisms.\\n *           Also provides interfaces to view all members with a given role, and total count of members.\\n */\\n\\nlibrary PermissionsEnumerableStorage {\\n    bytes32 public constant PERMISSIONS_ENUMERABLE_STORAGE_POSITION = keccak256(\\\"permissions.enumerable.storage\\\");\\n\\n    /**\\n     *  @notice A data structure to store data of members for a given role.\\n     *\\n     *  @param index    Current index in the list of accounts that have a role.\\n     *  @param members  map from index => address of account that has a role\\n     *  @param indexOf  map from address => index which the account has.\\n     */\\n    struct RoleMembers {\\n        uint256 index;\\n        mapping(uint256 => address) members;\\n        mapping(address => uint256) indexOf;\\n    }\\n\\n    struct Data {\\n        /// @dev map from keccak256 hash of a role to its members' data. See {RoleMembers}.\\n        mapping(bytes32 => RoleMembers) roleMembers;\\n    }\\n\\n    function permissionsEnumerableStorage() internal pure returns (Data storage permissionsEnumerableData) {\\n        bytes32 position = PERMISSIONS_ENUMERABLE_STORAGE_POSITION;\\n        assembly {\\n            permissionsEnumerableData.slot := position\\n        }\\n    }\\n}\\n\\ncontract PermissionsEnumerable is IPermissionsEnumerable, Permissions {\\n    /**\\n     *  @notice         Returns the role-member from a list of members for a role,\\n     *                  at a given index.\\n     *  @dev            Returns `member` who has `role`, at `index` of role-members list.\\n     *                  See struct {RoleMembers}, and mapping {roleMembers}\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param index    Index in list of current members for the role.\\n     *\\n     *  @return member  Address of account that has `role`\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view override returns (address member) {\\n        PermissionsEnumerableStorage.Data storage data = PermissionsEnumerableStorage.permissionsEnumerableStorage();\\n        uint256 currentIndex = data.roleMembers[role].index;\\n        uint256 check;\\n\\n        for (uint256 i = 0; i < currentIndex; i += 1) {\\n            if (data.roleMembers[role].members[i] != address(0)) {\\n                if (check == index) {\\n                    member = data.roleMembers[role].members[i];\\n                    return member;\\n                }\\n                check += 1;\\n            } else if (hasRole(role, address(0)) && i == data.roleMembers[role].indexOf[address(0)]) {\\n                check += 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @notice         Returns total number of accounts that have a role.\\n     *  @dev            Returns `count` of accounts that have `role`.\\n     *                  See struct {RoleMembers}, and mapping {roleMembers}\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *\\n     *  @return count   Total number of accounts that have `role`\\n     */\\n    function getRoleMemberCount(bytes32 role) external view override returns (uint256 count) {\\n        PermissionsEnumerableStorage.Data storage data = PermissionsEnumerableStorage.permissionsEnumerableStorage();\\n        uint256 currentIndex = data.roleMembers[role].index;\\n\\n        for (uint256 i = 0; i < currentIndex; i += 1) {\\n            if (data.roleMembers[role].members[i] != address(0)) {\\n                count += 1;\\n            }\\n        }\\n        if (hasRole(role, address(0))) {\\n            count += 1;\\n        }\\n    }\\n\\n    /// @dev Revokes `role` from `account`, and removes `account` from {roleMembers}\\n    ///      See {_removeMember}\\n    function _revokeRole(bytes32 role, address account) internal override {\\n        super._revokeRole(role, account);\\n        _removeMember(role, account);\\n    }\\n\\n    /// @dev Grants `role` to `account`, and adds `account` to {roleMembers}\\n    ///      See {_addMember}\\n    function _setupRole(bytes32 role, address account) internal override {\\n        super._setupRole(role, account);\\n        _addMember(role, account);\\n    }\\n\\n    /// @dev adds `account` to {roleMembers}, for `role`\\n    function _addMember(bytes32 role, address account) internal {\\n        PermissionsEnumerableStorage.Data storage data = PermissionsEnumerableStorage.permissionsEnumerableStorage();\\n        uint256 idx = data.roleMembers[role].index;\\n        data.roleMembers[role].index += 1;\\n\\n        data.roleMembers[role].members[idx] = account;\\n        data.roleMembers[role].indexOf[account] = idx;\\n    }\\n\\n    /// @dev removes `account` from {roleMembers}, for `role`\\n    function _removeMember(bytes32 role, address account) internal {\\n        PermissionsEnumerableStorage.Data storage data = PermissionsEnumerableStorage.permissionsEnumerableStorage();\\n        uint256 idx = data.roleMembers[role].indexOf[account];\\n\\n        delete data.roleMembers[role].members[idx];\\n        delete data.roleMembers[role].indexOf[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/PrimarySale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IPrimarySale.sol\\\";\\n\\nlibrary PrimarySaleStorage {\\n    bytes32 public constant PRIMARY_SALE_STORAGE_POSITION = keccak256(\\\"primary.sale.storage\\\");\\n\\n    struct Data {\\n        address recipient;\\n    }\\n\\n    function primarySaleStorage() internal pure returns (Data storage primarySaleData) {\\n        bytes32 position = PRIMARY_SALE_STORAGE_POSITION;\\n        assembly {\\n            primarySaleData.slot := position\\n        }\\n    }\\n}\\n\\n/**\\n *  @title   Primary Sale\\n *  @notice  Thirdweb's `PrimarySale` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           the recipient of primary sales, and lets the inheriting contract perform conditional logic that uses information about\\n *           primary sales, if desired.\\n */\\n\\nabstract contract PrimarySale is IPrimarySale {\\n    /// @dev Returns primary sale recipient address.\\n    function primarySaleRecipient() public view override returns (address) {\\n        PrimarySaleStorage.Data storage data = PrimarySaleStorage.primarySaleStorage();\\n        return data.recipient;\\n    }\\n\\n    /**\\n     *  @notice         Updates primary sale recipient.\\n     *  @dev            Caller should be authorized to set primary sales info.\\n     *                  See {_canSetPrimarySaleRecipient}.\\n     *                  Emits {PrimarySaleRecipientUpdated Event}; See {_setupPrimarySaleRecipient}.\\n     *\\n     *  @param _saleRecipient   Address to be set as new recipient of primary sales.\\n     */\\n    function setPrimarySaleRecipient(address _saleRecipient) external override {\\n        if (!_canSetPrimarySaleRecipient()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n        _setupPrimarySaleRecipient(_saleRecipient);\\n    }\\n\\n    /// @dev Lets a contract admin set the recipient for all primary sales.\\n    function _setupPrimarySaleRecipient(address _saleRecipient) internal {\\n        PrimarySaleStorage.Data storage data = PrimarySaleStorage.primarySaleStorage();\\n        data.recipient = _saleRecipient;\\n        emit PrimarySaleRecipientUpdated(_saleRecipient);\\n    }\\n\\n    /// @dev Returns whether primary sale recipient can be set in the given execution context.\\n    function _canSetPrimarySaleRecipient() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/Royalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IRoyalty.sol\\\";\\n\\nlibrary RoyaltyStorage {\\n    bytes32 public constant ROYALTY_STORAGE_POSITION = keccak256(\\\"royalty.storage\\\");\\n\\n    struct Data {\\n        /// @dev The (default) address that receives all royalty value.\\n        address royaltyRecipient;\\n        /// @dev The (default) % of a sale to take as royalty (in basis points).\\n        uint16 royaltyBps;\\n        /// @dev Token ID => royalty recipient and bps for token\\n        mapping(uint256 => IRoyalty.RoyaltyInfo) royaltyInfoForToken;\\n    }\\n\\n    function royaltyStorage() internal pure returns (Data storage royaltyData) {\\n        bytes32 position = ROYALTY_STORAGE_POSITION;\\n        assembly {\\n            royaltyData.slot := position\\n        }\\n    }\\n}\\n\\n/**\\n *  @title   Royalty\\n *  @notice  Thirdweb's `Royalty` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           the recipient of royalty fee and the royalty fee basis points, and lets the inheriting contract perform conditional logic\\n *           that uses information about royalty fees, if desired.\\n *\\n *  @dev     The `Royalty` contract is ERC2981 compliant.\\n */\\n\\nabstract contract Royalty is IRoyalty {\\n    /**\\n     *  @notice   View royalty info for a given token and sale price.\\n     *  @dev      Returns royalty amount and recipient for `tokenId` and `salePrice`.\\n     *  @param tokenId          The tokenID of the NFT for which to query royalty info.\\n     *  @param salePrice        Sale price of the token.\\n     *\\n     *  @return receiver        Address of royalty recipient account.\\n     *  @return royaltyAmount   Royalty amount calculated at current royaltyBps value.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        (address recipient, uint256 bps) = getRoyaltyInfoForToken(tokenId);\\n        receiver = recipient;\\n        royaltyAmount = (salePrice * bps) / 10_000;\\n    }\\n\\n    /**\\n     *  @notice          View royalty info for a given token.\\n     *  @dev             Returns royalty recipient and bps for `_tokenId`.\\n     *  @param _tokenId  The tokenID of the NFT for which to query royalty info.\\n     */\\n    function getRoyaltyInfoForToken(uint256 _tokenId) public view override returns (address, uint16) {\\n        RoyaltyStorage.Data storage data = RoyaltyStorage.royaltyStorage();\\n\\n        RoyaltyInfo memory royaltyForToken = data.royaltyInfoForToken[_tokenId];\\n\\n        return\\n            royaltyForToken.recipient == address(0)\\n                ? (data.royaltyRecipient, uint16(data.royaltyBps))\\n                : (royaltyForToken.recipient, uint16(royaltyForToken.bps));\\n    }\\n\\n    /**\\n     *  @notice Returns the defualt royalty recipient and BPS for this contract's NFTs.\\n     */\\n    function getDefaultRoyaltyInfo() external view override returns (address, uint16) {\\n        RoyaltyStorage.Data storage data = RoyaltyStorage.royaltyStorage();\\n        return (data.royaltyRecipient, uint16(data.royaltyBps));\\n    }\\n\\n    /**\\n     *  @notice         Updates default royalty recipient and bps.\\n     *  @dev            Caller should be authorized to set royalty info.\\n     *                  See {_canSetRoyaltyInfo}.\\n     *                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\\n     *\\n     *  @param _royaltyRecipient   Address to be set as default royalty recipient.\\n     *  @param _royaltyBps         Updated royalty bps.\\n     */\\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external override {\\n        if (!_canSetRoyaltyInfo()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        _setupDefaultRoyaltyInfo(_royaltyRecipient, _royaltyBps);\\n    }\\n\\n    /// @dev Lets a contract admin update the default royalty recipient and bps.\\n    function _setupDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) internal {\\n        if (_royaltyBps > 10_000) {\\n            revert(\\\"Exceeds max bps\\\");\\n        }\\n\\n        RoyaltyStorage.Data storage data = RoyaltyStorage.royaltyStorage();\\n\\n        data.royaltyRecipient = _royaltyRecipient;\\n        data.royaltyBps = uint16(_royaltyBps);\\n\\n        emit DefaultRoyalty(_royaltyRecipient, _royaltyBps);\\n    }\\n\\n    /**\\n     *  @notice         Updates default royalty recipient and bps for a particular token.\\n     *  @dev            Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.\\n     *                  See {_canSetRoyaltyInfo}.\\n     *                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\\n     *\\n     *  @param _recipient   Address to be set as royalty recipient for given token Id.\\n     *  @param _bps         Updated royalty bps for the token Id.\\n     */\\n    function setRoyaltyInfoForToken(\\n        uint256 _tokenId,\\n        address _recipient,\\n        uint256 _bps\\n    ) external override {\\n        if (!_canSetRoyaltyInfo()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        _setupRoyaltyInfoForToken(_tokenId, _recipient, _bps);\\n    }\\n\\n    /// @dev Lets a contract admin set the royalty recipient and bps for a particular token Id.\\n    function _setupRoyaltyInfoForToken(\\n        uint256 _tokenId,\\n        address _recipient,\\n        uint256 _bps\\n    ) internal {\\n        if (_bps > 10_000) {\\n            revert(\\\"Exceeds max bps\\\");\\n        }\\n\\n        RoyaltyStorage.Data storage data = RoyaltyStorage.royaltyStorage();\\n\\n        data.royaltyInfoForToken[_tokenId] = RoyaltyInfo({ recipient: _recipient, bps: _bps });\\n\\n        emit RoyaltyForToken(_tokenId, _recipient, _bps);\\n    }\\n\\n    /// @dev Returns whether royalty info can be set in the given execution context.\\n    function _canSetRoyaltyInfo() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/SignatureActionUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/ISignatureAction.sol\\\";\\nimport \\\"./EIP712Upgradeable.sol\\\";\\n\\nlibrary SignatureActionStorage {\\n    bytes32 public constant SIGNATURE_ACTION_STORAGE_POSITION = keccak256(\\\"signature.action.storage\\\");\\n\\n    struct Data {\\n        /// @dev Mapping from a signed request UID => whether the request is processed.\\n        mapping(bytes32 => bool) executed;\\n    }\\n\\n    function signatureActionStorage() internal pure returns (Data storage signatureActionData) {\\n        bytes32 position = SIGNATURE_ACTION_STORAGE_POSITION;\\n        assembly {\\n            signatureActionData.slot := position\\n        }\\n    }\\n}\\n\\nabstract contract SignatureActionUpgradeable is EIP712Upgradeable, ISignatureAction {\\n    using ECDSA for bytes32;\\n\\n    bytes32 private constant TYPEHASH =\\n        keccak256(\\\"GenericRequest(uint128 validityStartTimestamp,uint128 validityEndTimestamp,bytes32 uid,bytes data)\\\");\\n\\n    function __SignatureAction_init() internal onlyInitializing {\\n        __EIP712_init(\\\"SignatureAction\\\", \\\"1\\\");\\n    }\\n\\n    function __SignatureAction_init_unchained() internal onlyInitializing {}\\n\\n    /// @dev Verifies that a request is signed by an authorized account.\\n    function verify(GenericRequest calldata _req, bytes calldata _signature)\\n        public\\n        view\\n        override\\n        returns (bool success, address signer)\\n    {\\n        SignatureActionStorage.Data storage data = SignatureActionStorage.signatureActionStorage();\\n\\n        signer = _recoverAddress(_req, _signature);\\n        success = !data.executed[_req.uid] && _isAuthorizedSigner(signer);\\n    }\\n\\n    /// @dev Returns whether a given address is authorized to sign requests.\\n    function _isAuthorizedSigner(address _signer) internal view virtual returns (bool);\\n\\n    /// @dev Verifies a request and marks the request as processed.\\n    function _processRequest(GenericRequest calldata _req, bytes calldata _signature)\\n        internal\\n        returns (address signer)\\n    {\\n        bool success;\\n        (success, signer) = verify(_req, _signature);\\n\\n        if (!success) {\\n            revert(\\\"Invalid req\\\");\\n        }\\n\\n        if (_req.validityStartTimestamp > block.timestamp || block.timestamp > _req.validityEndTimestamp) {\\n            revert(\\\"Req expired\\\");\\n        }\\n\\n        SignatureActionStorage.Data storage data = SignatureActionStorage.signatureActionStorage();\\n        data.executed[_req.uid] = true;\\n    }\\n\\n    /// @dev Returns the address of the signer of the request.\\n    function _recoverAddress(GenericRequest calldata _req, bytes calldata _signature) internal view returns (address) {\\n        return _hashTypedDataV4(keccak256(_encodeRequest(_req))).recover(_signature);\\n    }\\n\\n    /// @dev Encodes a request for recovery of the signer in `recoverAddress`.\\n    function _encodeRequest(GenericRequest calldata _req) internal pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                TYPEHASH,\\n                _req.validityStartTimestamp,\\n                _req.validityEndTimestamp,\\n                _req.uid,\\n                keccak256(_req.data)\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/ContractMetadataInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { ContractMetadataStorage } from \\\"../extension/ContractMetadata.sol\\\";\\n\\ncontract ContractMetadataInit {\\n    event ContractURIUpdated(string prevURI, string newURI);\\n\\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\\n    function _setupContractURI(string memory _uri) internal {\\n        ContractMetadataStorage.Data storage data = ContractMetadataStorage.contractMetadataStorage();\\n        string memory prevURI = data.contractURI;\\n        data.contractURI = _uri;\\n\\n        emit ContractURIUpdated(prevURI, _uri);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/DefaultOperatorFiltererInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../extension/interface/IOperatorFilterRegistry.sol\\\";\\nimport { OperatorFilterToggleStorage } from \\\"../extension/OperatorFilterToggle.sol\\\";\\n\\ncontract DefaultOperatorFiltererInit {\\n    event OperatorRestriction(bool restriction);\\n\\n    IOperatorFilterRegistry constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\\n\\n    function _setupOperatorFilterer() internal {\\n        __DefaultOperatorFilterer_init();\\n    }\\n\\n    function __DefaultOperatorFilterer_init() private {\\n        __OperatorFilterer_init(DEFAULT_SUBSCRIPTION, true);\\n\\n        OperatorFilterToggleStorage.Data storage data = OperatorFilterToggleStorage.operatorFilterToggleStorage();\\n        data.operatorRestriction = true;\\n\\n        emit OperatorRestriction(true);\\n    }\\n\\n    function __OperatorFilterer_init(address subscriptionOrRegistrantToCopy, bool subscribe) private {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (!OPERATOR_FILTER_REGISTRY.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        OPERATOR_FILTER_REGISTRY.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/ERC721AInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { ERC721AStorage } from \\\"../eip/ERC721AUpgradeable.sol\\\";\\nimport \\\"../extension/Initializable.sol\\\";\\n\\ncontract ERC721AInit is Initializable {\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC721AStorage.Data storage data = ERC721AStorage.erc721AStorage();\\n\\n        data._name = name_;\\n        data._symbol = symbol_;\\n        data._currentIndex = _startTokenId();\\n    }\\n\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/OwnableInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from \\\"../extension/Ownable.sol\\\";\\n\\ncontract OwnableInit {\\n    event OwnerUpdated(address indexed prevOwner, address indexed newOwner);\\n\\n    /// @dev Lets a contract admin set a new owner for the contract. The new owner must be a contract admin.\\n    function _setupOwner(address _newOwner) internal {\\n        OwnableStorage.Data storage data = OwnableStorage.ownableStorage();\\n\\n        address _prevOwner = data._owner;\\n        data._owner = _newOwner;\\n\\n        emit OwnerUpdated(_prevOwner, _newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/PermissionsEnumerableInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { PermissionsEnumerableStorage } from \\\"../extension/PermissionsEnumerable.sol\\\";\\nimport \\\"./PermissionsInit.sol\\\";\\n\\ncontract PermissionsEnumerableInit is PermissionsInit {\\n    /// @dev Sets up `role` for `account`\\n    function _setupRole(bytes32 role, address account) internal override {\\n        super._setupRole(role, account);\\n        _addMember(role, account);\\n    }\\n\\n    /// @dev adds `account` to {roleMembers}, for `role`\\n    function _addMember(bytes32 role, address account) internal {\\n        PermissionsEnumerableStorage.Data storage data = PermissionsEnumerableStorage.permissionsEnumerableStorage();\\n        uint256 idx = data.roleMembers[role].index;\\n        data.roleMembers[role].index += 1;\\n\\n        data.roleMembers[role].members[idx] = account;\\n        data.roleMembers[role].indexOf[account] = idx;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/PermissionsInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { PermissionsStorage } from \\\"../extension/Permissions.sol\\\";\\n\\ncontract PermissionsInit {\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /// @dev Sets up `role` for `account`\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        data._hasRole[role][account] = true;\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/PrimarySaleInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { PrimarySaleStorage } from \\\"../extension/PrimarySale.sol\\\";\\n\\ncontract PrimarySaleInit {\\n    /// @dev Emitted when a new sale recipient is set.\\n    event PrimarySaleRecipientUpdated(address indexed recipient);\\n\\n    /// @dev Lets a contract admin set the recipient for all primary sales.\\n    function _setupPrimarySaleRecipient(address _saleRecipient) internal {\\n        PrimarySaleStorage.Data storage data = PrimarySaleStorage.primarySaleStorage();\\n        data.recipient = _saleRecipient;\\n        emit PrimarySaleRecipientUpdated(_saleRecipient);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/RoyaltyInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { RoyaltyStorage, IRoyalty } from \\\"../extension/Royalty.sol\\\";\\n\\ncontract RoyaltyInit {\\n    event DefaultRoyalty(address indexed newRoyaltyRecipient, uint256 newRoyaltyBps);\\n\\n    /// @dev Lets a contract admin update the default royalty recipient and bps.\\n    function _setupDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) internal {\\n        if (_royaltyBps > 10_000) {\\n            revert(\\\"Exceeds max bps\\\");\\n        }\\n\\n        RoyaltyStorage.Data storage data = RoyaltyStorage.royaltyStorage();\\n\\n        data.royaltyRecipient = _royaltyRecipient;\\n        data.royaltyBps = uint16(_royaltyBps);\\n\\n        emit DefaultRoyalty(_royaltyRecipient, _royaltyBps);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/SignatureActionInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { SignatureActionStorage } from \\\"../extension/SignatureActionUpgradeable.sol\\\";\\nimport { EIP712Storage } from \\\"../extension/EIP712Upgradeable.sol\\\";\\nimport \\\"../extension/Initializable.sol\\\";\\n\\ncontract EIP712Init is Initializable {\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n\\n        EIP712Storage.Data storage data = EIP712Storage.eip712Storage();\\n\\n        data._HASHED_NAME = hashedName;\\n        data._HASHED_VERSION = hashedVersion;\\n    }\\n}\\n\\ncontract SignatureActionInit is EIP712Init {\\n    function __SignatureAction_init() internal onlyInitializing {\\n        __EIP712_init(\\\"SignatureAction\\\", \\\"1\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/eip/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/eip/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/eip/interface/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/eip/interface/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/eip/interface/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v3.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721A is IERC721, IERC721Metadata {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * The caller cannot approve to the current owner.\\n     */\\n    error ApprovalToCurrentOwner();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        uint64 aux;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     *\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/eip/interface/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\\n/* is ERC721 */\\ninterface IERC721Metadata {\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view returns (string memory);\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/eip/interface/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../lib/TWAddress.sol\\\";\\nimport \\\"./interface/IMulticall.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ncontract Multicall is IMulticall {\\n    /**\\n     *  @notice Receives and executes a batch of function calls on this contract.\\n     *  @dev Receives and executes a batch of function calls on this contract.\\n     *\\n     *  @param data The bytes data that makes up the batch of function calls to execute.\\n     *  @return results The bytes data that makes up the result of the batch of function calls executed.\\n     */\\n    function multicall(bytes[] calldata data) external virtual override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = TWAddress.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *  for you contract.\\n *\\n *  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\ninterface IContractMetadata {\\n    /// @dev Returns the metadata URI of the contract.\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\\n     *       Only module admin can call this function.\\n     */\\n    function setContractURI(string calldata _uri) external;\\n\\n    /// @dev Emitted when the contract URI is updated.\\n    event ContractURIUpdated(string prevURI, string newURI);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface IERC2771Context {\\n    function isTrustedForwarder(address forwarder) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ninterface IMulticall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    function register(address registrant) external;\\n\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    function unregister(address addr) external;\\n\\n    function updateOperator(\\n        address registrant,\\n        address operator,\\n        bool filtered\\n    ) external;\\n\\n    function updateOperators(\\n        address registrant,\\n        address[] calldata operators,\\n        bool filtered\\n    ) external;\\n\\n    function updateCodeHash(\\n        address registrant,\\n        bytes32 codehash,\\n        bool filtered\\n    ) external;\\n\\n    function updateCodeHashes(\\n        address registrant,\\n        bytes32[] calldata codeHashes,\\n        bool filtered\\n    ) external;\\n\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    function isRegistered(address addr) external returns (bool);\\n\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IOperatorFilterToggle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\ninterface IOperatorFilterToggle {\\n    event OperatorRestriction(bool restriction);\\n\\n    function operatorRestriction() external view returns (bool);\\n\\n    function setOperatorRestriction(bool restriction) external;\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\\n *  information about who the contract's owner is.\\n */\\n\\ninterface IOwnable {\\n    /// @dev Returns the owner of the contract.\\n    function owner() external view returns (address);\\n\\n    /// @dev Lets a module admin set a new owner for the contract. The new owner must be a module admin.\\n    function setOwner(address _newOwner) external;\\n\\n    /// @dev Emitted when a new Owner is set.\\n    event OwnerUpdated(address indexed prevOwner, address indexed newOwner);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IPermissions {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IPermissionsEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./IPermissions.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IPermissionsEnumerable is IPermissions {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * [forum post](https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296)\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IPrimarySale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `Primary` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  the recipient of primary sales, and lets the inheriting contract perform conditional logic that uses information about\\n *  primary sales, if desired.\\n */\\n\\ninterface IPrimarySale {\\n    /// @dev The adress that receives all primary sales value.\\n    function primarySaleRecipient() external view returns (address);\\n\\n    /// @dev Lets a module admin set the default recipient of all primary sales.\\n    function setPrimarySaleRecipient(address _saleRecipient) external;\\n\\n    /// @dev Emitted when a new sale recipient is set.\\n    event PrimarySaleRecipientUpdated(address indexed recipient);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IRoyalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../eip/interface/IERC2981.sol\\\";\\n\\n/**\\n *  Thirdweb's `Royalty` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  the recipient of royalty fee and the royalty fee basis points, and lets the inheriting contract perform conditional logic\\n *  that uses information about royalty fees, if desired.\\n *\\n *  The `Royalty` contract is ERC2981 compliant.\\n */\\n\\ninterface IRoyalty is IERC2981 {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint256 bps;\\n    }\\n\\n    /// @dev Returns the royalty recipient and fee bps.\\n    function getDefaultRoyaltyInfo() external view returns (address, uint16);\\n\\n    /// @dev Lets a module admin update the royalty bps and recipient.\\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external;\\n\\n    /// @dev Lets a module admin set the royalty recipient for a particular token Id.\\n    function setRoyaltyInfoForToken(\\n        uint256 tokenId,\\n        address recipient,\\n        uint256 bps\\n    ) external;\\n\\n    /// @dev Returns the royalty recipient for a particular token Id.\\n    function getRoyaltyInfoForToken(uint256 tokenId) external view returns (address, uint16);\\n\\n    /// @dev Emitted when royalty info is updated.\\n    event DefaultRoyalty(address indexed newRoyaltyRecipient, uint256 newRoyaltyBps);\\n\\n    /// @dev Emitted when royalty recipient for tokenId is set\\n    event RoyaltyForToken(uint256 indexed tokenId, address indexed royaltyRecipient, uint256 royaltyBps);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/ISignatureAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  thirdweb's `SignatureAction` extension smart contract can be used with any base smart contract. It provides a generic\\n *  payload struct that can be signed by an authorized wallet and verified by the contract. The bytes `data` field provided\\n *  in the payload can be abi encoded <-> decoded to use `SignatureContract` for any authorized signature action.\\n */\\n\\ninterface ISignatureAction {\\n    /**\\n     *  @notice The payload that must be signed by an authorized wallet.\\n     *\\n     *  @param validityStartTimestamp The UNIX timestamp at and after which a signature is valid.\\n     *  @param validityEndTimestamp The UNIX timestamp at and after which a signature is invalid/expired.\\n     *  @param uid A unique non-repeatable ID for the payload.\\n     *  @param data Arbitrary bytes data to be used at the discretion of the contract.\\n     */\\n    struct GenericRequest {\\n        uint128 validityStartTimestamp;\\n        uint128 validityEndTimestamp;\\n        bytes32 uid;\\n        bytes data;\\n    }\\n\\n    /// @notice Emitted when a payload is verified and executed.\\n    event RequestExecuted(address indexed user, address indexed signer, GenericRequest _req);\\n\\n    /**\\n     *  @notice Verfies that a payload is signed by an authorized wallet.\\n     *\\n     *  @param req The payload signed by the authorized wallet.\\n     *  @param signature The signature produced by the authorized wallet signing the given payload.\\n     *\\n     *  @return success Whether the payload is signed by the authorized wallet.\\n     *  @return signer The address of the signer.\\n     */\\n    function verify(GenericRequest calldata req, bytes calldata signature)\\n        external\\n        view\\n        returns (bool success, address signer);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TWAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary TWAddress {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * [EIP1884](https://eips.ethereum.org/EIPS/eip-1884) increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TWStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary TWStrings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin-presets/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin-presets/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../lib/TWStrings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", TWStrings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tiered-drop/TieredDrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n//   $$\\\\     $$\\\\       $$\\\\                 $$\\\\                         $$\\\\\\n//   $$ |    $$ |      \\\\__|                $$ |                        $$ |\\n// $$$$$$\\\\   $$$$$$$\\\\  $$\\\\  $$$$$$\\\\   $$$$$$$ |$$\\\\  $$\\\\  $$\\\\  $$$$$$\\\\  $$$$$$$\\\\\\n// \\\\_$$  _|  $$  __$$\\\\ $$ |$$  __$$\\\\ $$  __$$ |$$ | $$ | $$ |$$  __$$\\\\ $$  __$$\\\\\\n//   $$ |    $$ |  $$ |$$ |$$ |  \\\\__|$$ /  $$ |$$ | $$ | $$ |$$$$$$$$ |$$ |  $$ |\\n//   $$ |$$\\\\ $$ |  $$ |$$ |$$ |      $$ |  $$ |$$ | $$ | $$ |$$   ____|$$ |  $$ |\\n//   \\\\$$$$  |$$ |  $$ |$$ |$$ |      \\\\$$$$$$$ |\\\\$$$$$\\\\$$$$  |\\\\$$$$$$$\\\\ $$$$$$$  |\\n//    \\\\____/ \\\\__|  \\\\__|\\\\__|\\\\__|       \\\\_______| \\\\_____\\\\____/  \\\\_______|\\\\_______/\\n\\nimport \\\"lib/dynamic-contracts/src/presets/BaseRouter.sol\\\";\\n\\nimport \\\"../extension/Multicall.sol\\\";\\n\\nimport \\\"../dynamic-contracts/extension/Initializable.sol\\\";\\nimport \\\"../dynamic-contracts/extension/Permissions.sol\\\";\\nimport \\\"../dynamic-contracts/extension/ERC2771ContextUpgradeable.sol\\\";\\n\\nimport \\\"../dynamic-contracts/init/ContractMetadataInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/ERC721AInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/OwnableInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/PermissionsEnumerableInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/PrimarySaleInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/RoyaltyInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/SignatureActionInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/DefaultOperatorFiltererInit.sol\\\";\\n\\n/**\\n *  Defualt extensions to add:\\n *      - TieredDropLogic\\n *      - PermissionsEnumerable\\n */\\n\\ncontract TieredDrop is\\n    Initializable,\\n    Multicall,\\n    ERC2771ContextUpgradeable,\\n    BaseRouter,\\n    DefaultOperatorFiltererInit,\\n    PrimarySaleInit,\\n    ContractMetadataInit,\\n    ERC721AInit,\\n    OwnableInit,\\n    PermissionsEnumerableInit,\\n    RoyaltyInit,\\n    SignatureActionInit\\n{\\n    /*///////////////////////////////////////////////////////////////\\n                    Constructor and Initializer logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(Extension[] memory _extensions) BaseRouter(_extensions) {}\\n\\n    /// @dev Initiliazes the contract, like a constructor.\\n    function initialize(\\n        address _defaultAdmin,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _contractURI,\\n        address[] memory _trustedForwarders,\\n        address _saleRecipient,\\n        address _royaltyRecipient,\\n        uint16 _royaltyBps\\n    ) external initializer {\\n        // Initialize inherited contracts, most base-like -> most derived.\\n        __ERC2771Context_init(_trustedForwarders);\\n        __ERC721A_init(_name, _symbol);\\n        __SignatureAction_init();\\n\\n        _setupContractURI(_contractURI);\\n        _setupOwner(_defaultAdmin);\\n\\n        _setupRoles(_defaultAdmin);\\n\\n        _setupDefaultRoyaltyInfo(_royaltyRecipient, _royaltyBps);\\n        _setupPrimarySaleRecipient(_saleRecipient);\\n\\n        _setupOperatorFilterer();\\n    }\\n\\n    function _setupRoles(address _defaultAdmin) internal onlyInitializing {\\n        bytes32 _operatorRole = keccak256(\\\"OPERATOR_ROLE\\\");\\n        bytes32 _transferRole = keccak256(\\\"TRANSFER_ROLE\\\");\\n        bytes32 _minterRole = keccak256(\\\"MINTER_ROLE\\\");\\n        bytes32 _defaultAdminRole = 0x00;\\n\\n        _setupRole(_defaultAdminRole, _defaultAdmin);\\n        _setupRole(_minterRole, _defaultAdmin);\\n        _setupRole(_transferRole, _defaultAdmin);\\n        _setupRole(_transferRole, address(0));\\n        _setupRole(_operatorRole, _defaultAdmin);\\n        _setupRole(_operatorRole, address(0));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Internal functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Returns whether a plugin can be set in the given execution context.\\n    function _canSetExtension() internal view virtual override returns (bool) {\\n        bytes32 defaultAdminRole = 0x00;\\n        return _hasRole(defaultAdminRole, _msgSender());\\n    }\\n\\n    /// @dev Checks whether an account holds the given role.\\n    function _hasRole(bytes32 role, address addr) internal view returns (bool) {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        return data._hasRole[role][addr];\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/dynamic-contracts/src/core/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IRouter.sol\\\";\\n\\nabstract contract Router is IRouter {\\n\\n    fallback() external payable virtual {\\n    /// @dev delegate calls the appropriate implementation smart contract for a given function.\\n        address implementation = getImplementationForFunction(msg.sig);\\n        _delegate(implementation);\\n    }\\n\\n    receive() external payable virtual {}\\n\\n    /// @dev delegateCalls an `implementation` smart contract.\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /// @dev Unimplemented. Returns the implementation contract address for a given function signature.\\n    function getImplementationForFunction(bytes4 _functionSelector) public view virtual returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/dynamic-contracts/src/interface/IBaseRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDefaultExtensionSet.sol\\\";\\n\\ninterface IBaseRouter is IDefaultExtensionSet {\\n    /*///////////////////////////////////////////////////////////////\\n                        External functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Adds a new extension to the router.\\n    function addExtension(Extension memory extension) external;\\n\\n    /// @dev Updates an existing extension in the router, or overrides a default extension.\\n    function updateExtension(Extension memory extension) external;\\n\\n    /// @dev Removes an existing extension from the router.\\n    function removeExtension(string memory extensionName) external;\\n}\\n\"\r\n    },\r\n    \"lib/dynamic-contracts/src/interface/IDefaultExtensionSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IExtension.sol\\\";\\n\\ninterface IDefaultExtensionSet is IExtension {\\n    /*///////////////////////////////////////////////////////////////\\n                            View functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Returns all extensions stored.\\n    function getAllExtensions() external view returns (Extension[] memory);\\n\\n    /// @dev Returns all functions that belong to the given extension contract.\\n    function getAllFunctionsOfExtension(string memory extensionName) external view returns (ExtensionFunction[] memory);\\n\\n    /// @dev Returns the extension metadata for a given function.\\n    function getExtensionForFunction(bytes4 functionSelector) external view returns (ExtensionMetadata memory);\\n\\n    /// @dev Returns the extension's implementation smart contract address.\\n    function getExtensionImplementation(string memory extensionName) external view returns (address);\\n\\n    /// @dev Returns the extension metadata and functions for a given extension.\\n    function getExtension(string memory extensionName) external view returns (Extension memory);\\n}\"\r\n    },\r\n    \"lib/dynamic-contracts/src/interface/IExtension.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IExtension {\\n    /*///////////////////////////////////////////////////////////////\\n                                Structs\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice A extension's metadata.\\n     *\\n     *  @param name             The unique name of the extension.\\n     *  @param metadataURI      The URI where the metadata for the extension lives.\\n     *  @param implementation   The implementation smart contract address of the extension.\\n     */\\n    struct ExtensionMetadata {\\n        string name;\\n        string metadataURI;\\n        address implementation;\\n    }\\n\\n    /**\\n     *  @notice An interface to describe a extension's function.\\n     *\\n     *  @param functionSelector    The 4 byte selector of the function.\\n     *  @param functionSignature   Function signature as a string. E.g. \\\"transfer(address,address,uint256)\\\"\\n     */\\n    struct ExtensionFunction {\\n        bytes4 functionSelector;\\n        string functionSignature;\\n    }\\n\\n    /**\\n     *  @notice An interface to describe an extension.\\n     *\\n     *  @param metadata     The extension's metadata; it's name, metadata URI and implementation contract address.\\n     *  @param functions    The functions that belong to the extension.\\n     */\\n    struct Extension {\\n        ExtensionMetadata metadata;\\n        ExtensionFunction[] functions;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Emitted when a extension is added; emitted for each function of the extension.\\n    event ExtensionAdded(address indexed extensionAddress, bytes4 indexed functionSelector, string functionSignature);\\n\\n    /// @dev Emitted when extension is updated; emitted for each function of the extension.\\n    event ExtensionUpdated(\\n        address indexed oldExtensionAddress,\\n        address indexed newExtensionAddress,\\n        bytes4 indexed functionSelector,\\n        string functionSignature\\n    );\\n\\n    /// @dev Emitted when a extension is removed; emitted for each function of the extension.\\n    event ExtensionRemoved(address indexed extensionAddress, bytes4 indexed functionSelector, string functionSignature);\\n}\\n\"\r\n    },\r\n    \"lib/dynamic-contracts/src/interface/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRouter {\\n    fallback() external payable;\\n    receive() external payable;\\n\\n    function getImplementationForFunction(bytes4 _functionSelector) external view returns (address);\\n}\"\r\n    },\r\n    \"lib/dynamic-contracts/src/presets/BaseRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\n// Interface\\nimport \\\"../interface/IBaseRouter.sol\\\";\\n\\n// Core\\nimport \\\"../core/Router.sol\\\";\\n\\n// Utils\\nimport \\\"./utils/StringSet.sol\\\";\\nimport \\\"./utils/DefaultExtensionSet.sol\\\";\\nimport \\\"./utils/ExtensionState.sol\\\";\\n\\nabstract contract BaseRouter is IBaseRouter, Router, ExtensionState {\\n    using StringSet for StringSet.Set;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            State variables\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The DefaultExtensionSet that stores default extensions of the router.\\n    address public immutable defaultExtensionSet;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Constructor\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(Extension[] memory _extensions) {\\n\\n        DefaultExtensionSet map = new DefaultExtensionSet();\\n        defaultExtensionSet = address(map);\\n\\n        uint256 len = _extensions.length;\\n\\n        for (uint256 i = 0; i < len; i += 1) {\\n            map.setExtension(_extensions[i]);\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        External functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Adds a new extension to the router.\\n    function addExtension(Extension memory _extension) external {\\n        require(_canSetExtension(), \\\"BaseRouter: caller not authorized.\\\");\\n\\n        _addExtension(_extension);\\n    }\\n\\n    /// @dev Updates an existing extension in the router, or overrides a default extension.\\n    function updateExtension(Extension memory _extension) external {\\n        require(_canSetExtension(), \\\"BaseRouter: caller not authorized.\\\");\\n\\n        _updateExtension(_extension);\\n    }\\n\\n    /// @dev Removes an existing extension from the router.\\n    function removeExtension(string memory _extensionName) external {\\n        require(_canSetExtension(), \\\"BaseRouter: caller not authorized.\\\");\\n\\n        _removeExtension(_extensionName);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            View functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice Returns all extensions stored. Override default lugins stored in router are\\n     *          given precedence over default extensions in DefaultExtensionSet.\\n     */\\n    function getAllExtensions() external view returns (Extension[] memory allExtensions) {\\n        Extension[] memory defaultExtensions = IDefaultExtensionSet(defaultExtensionSet).getAllExtensions();\\n        uint256 defaultExtensionsLen = defaultExtensions.length;\\n\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n        string[] memory names = data.extensionNames.values();\\n        uint256 namesLen = names.length;\\n\\n        uint256 overrides = 0;\\n        for (uint256 i = 0; i < defaultExtensionsLen; i += 1) {\\n            if (data.extensionNames.contains(defaultExtensions[i].metadata.name)) {\\n                overrides += 1;\\n            }\\n        }\\n\\n        uint256 total = (namesLen + defaultExtensionsLen) - overrides;\\n\\n        allExtensions = new Extension[](total);\\n        uint256 idx = 0;\\n\\n        for (uint256 i = 0; i < defaultExtensionsLen; i += 1) {\\n            string memory name = defaultExtensions[i].metadata.name;\\n            if (!data.extensionNames.contains(name)) {\\n                allExtensions[idx] = defaultExtensions[i];\\n                idx += 1;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < namesLen; i += 1) {\\n            allExtensions[idx] = data.extensions[names[i]];\\n            idx += 1;\\n        }\\n    }\\n\\n    /// @dev Returns the extension metadata and functions for a given extension.\\n    function getExtension(string memory _extensionName) public view returns (Extension memory) {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n        bool isLocalExtension = data.extensionNames.contains(_extensionName);\\n\\n        return isLocalExtension ? data.extensions[_extensionName] : IDefaultExtensionSet(defaultExtensionSet).getExtension(_extensionName);\\n    }\\n\\n    /// @dev Returns the extension's implementation smart contract address.\\n    function getExtensionImplementation(string memory _extensionName) external view returns (address) {\\n        return getExtension(_extensionName).metadata.implementation;\\n    }\\n\\n    /// @dev Returns all functions that belong to the given extension contract.\\n    function getAllFunctionsOfExtension(string memory _extensionName) external view returns (ExtensionFunction[] memory) {\\n        return getExtension(_extensionName).functions;\\n    }\\n\\n    /// @dev Returns the extension metadata for a given function.\\n    function getExtensionForFunction(bytes4 _functionSelector) public view returns (ExtensionMetadata memory) {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n        ExtensionMetadata memory metadata = data.extensionMetadata[_functionSelector];\\n\\n        bool isLocalExtension = metadata.implementation != address(0);\\n\\n        return isLocalExtension ? metadata : IDefaultExtensionSet(defaultExtensionSet).getExtensionForFunction(_functionSelector);\\n    }\\n\\n    /// @dev Returns the extension implementation address stored in router, for the given function.\\n    function getImplementationForFunction(bytes4 _functionSelector)\\n        public\\n        view\\n        override\\n        returns (address extensionAddress)\\n    {\\n        return getExtensionForFunction(_functionSelector).implementation;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Internal functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Returns whether a extension can be set in the given execution context.\\n    function _canSetExtension() internal view virtual returns (bool);\\n}\"\r\n    },\r\n    \"lib/dynamic-contracts/src/presets/utils/DefaultExtensionSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\n// Interface\\nimport \\\"../../interface/IDefaultExtensionSet.sol\\\";\\n\\n// Extensions\\nimport \\\"./ExtensionState.sol\\\";\\n\\ncontract DefaultExtensionSet is IDefaultExtensionSet, ExtensionState {\\n    using StringSet for StringSet.Set;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            State variables\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The deployer of DefaultExtensionSet.\\n    address private deployer;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Constructor\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            External functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Stores a extension in the DefaultExtensionSet.\\n    function setExtension(Extension memory _extension) external {\\n        require(msg.sender == deployer, \\\"DefaultExtensionSet: unauthorized caller.\\\");\\n        _addExtension(_extension);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            View functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Returns all extensions stored.\\n    function getAllExtensions() external view returns (Extension[] memory allExtensions) {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n\\n        string[] memory names = data.extensionNames.values();\\n        uint256 len = names.length;\\n\\n        allExtensions = new Extension[](len);\\n\\n        for (uint256 i = 0; i < len; i += 1) {\\n            allExtensions[i] = data.extensions[names[i]];\\n        }\\n    }\\n\\n    /// @notice Returns the extension metadata and functions for a given extension.\\n    function getExtension(string memory _extensionName) public view returns (Extension memory) {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n        require(data.extensionNames.contains(_extensionName), \\\"DefaultExtensionSet: extension does not exist.\\\");\\n        return data.extensions[_extensionName];\\n    }\\n\\n    /// @notice Returns the extension's implementation smart contract address.\\n    function getExtensionImplementation(string memory _extensionName) external view returns (address) {\\n        return getExtension(_extensionName).metadata.implementation;\\n    }\\n\\n    /// @notice Returns all functions that belong to the given extension contract.\\n    function getAllFunctionsOfExtension(string memory _extensionName) external view returns (ExtensionFunction[] memory) {\\n        return getExtension(_extensionName).functions;\\n    }\\n\\n    /// @notice Returns the extension metadata for a given function.\\n    function getExtensionForFunction(bytes4 _functionSelector) external view returns (ExtensionMetadata memory) {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n        ExtensionMetadata memory metadata = data.extensionMetadata[_functionSelector];\\n        require(metadata.implementation != address(0), \\\"DefaultExtensionSet: no extension for function.\\\");\\n        return metadata;\\n    }\\n}\"\r\n    },\r\n    \"lib/dynamic-contracts/src/presets/utils/ExtensionState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\n// Interface\\nimport \\\"../../interface/IExtension.sol\\\";\\n\\n// Extensions\\nimport \\\"./StringSet.sol\\\";\\n\\nlibrary ExtensionStateStorage {\\n    bytes32 public constant EXTENSION_STATE_STORAGE_POSITION = keccak256(\\\"extension.state.storage\\\");\\n\\n    struct Data {\\n        /// @dev Set of names of all extensions stored.\\n        StringSet.Set extensionNames;\\n        /// @dev Mapping from extension name => `Extension` i.e. extension metadata and functions.\\n        mapping(string => IExtension.Extension) extensions;\\n        /// @dev Mapping from function selector => extension metadata of the extension the function belongs to.\\n        mapping(bytes4 => IExtension.ExtensionMetadata) extensionMetadata;\\n    }\\n\\n    function extensionStateStorage() internal pure returns (Data storage extensionStateData) {\\n        bytes32 position = EXTENSION_STATE_STORAGE_POSITION;\\n        assembly {\\n            extensionStateData.slot := position\\n        }\\n    }\\n}\\n\\ncontract ExtensionState is IExtension {\\n    using StringSet for StringSet.Set;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Internal functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Stores a new extension in the contract.\\n    function _addExtension(Extension memory _extension) internal {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n\\n        string memory name = _extension.metadata.name;\\n\\n        require(data.extensionNames.add(name), \\\"ExtensionState: extension already exists.\\\");\\n        data.extensions[name].metadata = _extension.metadata;\\n\\n        require(_extension.metadata.implementation != address(0), \\\"ExtensionState: adding extension without implementation.\\\");\\n\\n        uint256 len = _extension.functions.length;\\n        for (uint256 i = 0; i < len; i += 1) {\\n            require(\\n                _extension.functions[i].functionSelector ==\\n                    bytes4(keccak256(abi.encodePacked(_extension.functions[i].functionSignature))),\\n                \\\"ExtensionState: fn selector and signature mismatch.\\\"\\n            );\\n            require(\\n                data.extensionMetadata[_extension.functions[i].functionSelector].implementation == address(0),\\n                \\\"ExtensionState: extension already exists for function.\\\"\\n            );\\n\\n            data.extensionMetadata[_extension.functions[i].functionSelector] = _extension.metadata;\\n            data.extensions[name].functions.push(_extension.functions[i]);\\n\\n            emit ExtensionAdded(\\n                _extension.metadata.implementation,\\n                _extension.functions[i].functionSelector,\\n                _extension.functions[i].functionSignature\\n            );\\n        }\\n    }\\n\\n    /// @dev Updates / overrides an existing extension in the contract.\\n    function _updateExtension(Extension memory _extension) internal {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n\\n        string memory name = _extension.metadata.name;\\n        require(data.extensionNames.contains(name), \\\"ExtensionState: extension does not exist.\\\");\\n\\n        address oldImplementation = data.extensions[name].metadata.implementation;\\n        require(_extension.metadata.implementation != oldImplementation, \\\"ExtensionState: re-adding same extension.\\\");\\n\\n        data.extensions[name].metadata = _extension.metadata;\\n\\n        ExtensionFunction[] memory oldFunctions = data.extensions[name].functions;\\n        uint256 oldFunctionsLen = oldFunctions.length;\\n\\n        delete data.extensions[name].functions;\\n\\n        for (uint256 i = 0; i < oldFunctionsLen; i += 1) {\\n            delete data.extensionMetadata[oldFunctions[i].functionSelector];\\n        }\\n\\n        uint256 len = _extension.functions.length;\\n        for (uint256 i = 0; i < len; i += 1) {\\n            require(\\n                _extension.functions[i].functionSelector ==\\n                    bytes4(keccak256(abi.encodePacked(_extension.functions[i].functionSignature))),\\n                \\\"ExtensionState: fn selector and signature mismatch.\\\"\\n            );\\n\\n            data.extensionMetadata[_extension.functions[i].functionSelector] = _extension.metadata;\\n            data.extensions[name].functions.push(_extension.functions[i]);\\n\\n            emit ExtensionUpdated(\\n                oldImplementation,\\n                _extension.metadata.implementation,\\n                _extension.functions[i].functionSelector,\\n                _extension.functions[i].functionSignature\\n            );\\n        }\\n    }\\n\\n    /// @dev Removes an existing extension from the contract.\\n    function _removeExtension(string memory _extensionName) internal {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n\\n        require(data.extensionNames.remove(_extensionName), \\\"ExtensionState: extension does not exist.\\\");\\n\\n        address implementation = data.extensions[_extensionName].metadata.implementation;\\n        ExtensionFunction[] memory extensionFunctions = data.extensions[_extensionName].functions;\\n        delete data.extensions[_extensionName];\\n\\n        uint256 len = extensionFunctions.length;\\n        for (uint256 i = 0; i < len; i += 1) {\\n            emit ExtensionRemoved(\\n                implementation,\\n                extensionFunctions[i].functionSelector,\\n                extensionFunctions[i].functionSignature\\n            );\\n            delete data.extensionMetadata[extensionFunctions[i].functionSelector];\\n        }\\n    }\\n}\"\r\n    },\r\n    \"lib/dynamic-contracts/src/presets/utils/StringSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\nlibrary StringSet {\\n    struct Set {\\n        // Storage of set values\\n        string[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(string => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, string memory value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, string memory value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                string memory lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, string memory value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (string memory) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (string[] memory) {\\n        return set._values;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Set storage set, string memory value) internal returns (bool) {\\n        return _add(set, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Set storage set, string memory value) internal returns (bool) {\\n        return _remove(set, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Set storage set, string memory value) internal view returns (bool) {\\n        return _contains(set, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Set storage set) internal view returns (uint256) {\\n        return _length(set);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Set storage set, uint256 index) internal view returns (string memory) {\\n        return _at(set, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Set storage set) internal view returns (string[] memory) {\\n        return _values(set);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"remappings\": [\r\n      \":@chainlink/contracts/src/=node_modules/@chainlink/contracts/src/\",\r\n      \":@ds-test/=lib/ds-test/src/\",\r\n      \":@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \":@std/=lib/forge-std/src/\",\r\n      \":contracts/=contracts/\",\r\n      \":ds-test/=lib/ds-test/src/\",\r\n      \":dynamic-contracts/=lib/dynamic-contracts/src/\",\r\n      \":erc721a-upgradeable/=node_modules/erc721a-upgradeable/\",\r\n      \":erc721a/=node_modules/erc721a/\",\r\n      \":forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"internalType\":\"struct IExtension.ExtensionMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"internalType\":\"struct IExtension.ExtensionFunction[]\",\"name\":\"functions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IExtension.Extension[]\",\"name\":\"_extensions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extensionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"name\":\"ExtensionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extensionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"name\":\"ExtensionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExtensionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExtensionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"name\":\"ExtensionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"restriction\",\"type\":\"bool\"}],\"name\":\"OperatorRestriction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimarySaleRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"internalType\":\"struct IExtension.ExtensionMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"internalType\":\"struct IExtension.ExtensionFunction[]\",\"name\":\"functions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IExtension.Extension\",\"name\":\"_extension\",\"type\":\"tuple\"}],\"name\":\"addExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultExtensionSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllExtensions\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"internalType\":\"struct IExtension.ExtensionMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"internalType\":\"struct IExtension.ExtensionFunction[]\",\"name\":\"functions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IExtension.Extension[]\",\"name\":\"allExtensions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_extensionName\",\"type\":\"string\"}],\"name\":\"getAllFunctionsOfExtension\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"internalType\":\"struct IExtension.ExtensionFunction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_extensionName\",\"type\":\"string\"}],\"name\":\"getExtension\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"internalType\":\"struct IExtension.ExtensionMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"internalType\":\"struct IExtension.ExtensionFunction[]\",\"name\":\"functions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IExtension.Extension\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"getExtensionForFunction\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"internalType\":\"struct IExtension.ExtensionMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_extensionName\",\"type\":\"string\"}],\"name\":\"getExtensionImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"getImplementationForFunction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"extensionAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_trustedForwarders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_saleRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyBps\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_extensionName\",\"type\":\"string\"}],\"name\":\"removeExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"internalType\":\"struct IExtension.ExtensionMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"internalType\":\"struct IExtension.ExtensionFunction[]\",\"name\":\"functions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IExtension.Extension\",\"name\":\"_extension\",\"type\":\"tuple\"}],\"name\":\"updateExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TieredDrop", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001fa000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000e1fdf867e65b3b080b3f774b8453826acfdbc490000000000000000000000000000000000000000000000000000000000000000f54696572656444726f704c6f67696300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d58336353585867475159753743714d574c48464379594e635271427631363447507069476f487543766e63670000000000000000000000000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000005c0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006c0000000000000000000000000000000000000000000000000000000000000074000000000000000000000000000000000000000000000000000000000000007e0000000000000000000000000000000000000000000000000000000000000086000000000000000000000000000000000000000000000000000000000000008e0000000000000000000000000000000000000000000000000000000000000096000000000000000000000000000000000000000000000000000000000000009e00000000000000000000000000000000000000000000000000000000000000a600000000000000000000000000000000000000000000000000000000000000ae00000000000000000000000000000000000000000000000000000000000000b600000000000000000000000000000000000000000000000000000000000000be00000000000000000000000000000000000000000000000000000000000000c600000000000000000000000000000000000000000000000000000000000000ce00000000000000000000000000000000000000000000000000000000000000d600000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000e800000000000000000000000000000000000000000000000000000000000000f200000000000000000000000000000000000000000000000000000000000000fa0000000000000000000000000000000000000000000000000000000000000102000000000000000000000000000000000000000000000000000000000000010c0000000000000000000000000000000000000000000000000000000000000114000000000000000000000000000000000000000000000000000000000000011c0000000000000000000000000000000000000000000000000000000000000124000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000134000000000000000000000000000000000000000000000000000000000000013c0000000000000000000000000000000000000000000000000000000000000144000000000000000000000000000000000000000000000000000000000000014c0000000000000000000000000000000000000000000000000000000000000156000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001680000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000017a0000000000000000000000000000000000000000000000000000000000000182000000000000000000000000000000000000000000000000000000000000018a0000000000000000000000000000000000000000000000000000000000000192000000000000000000000000000000000000000000000000000000000000019c00000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000001ac00000000000000000000000000000000000000000000000000000000000001b400000000000000000000000000000000000000000000000000000000000001bc00000000000000000000000000000000000000000000000000000000000001c400000000000000000000000000000000000000000000000000000000000001cc00000000000000000000000000000000000000000000000000000000000001d60095ea7b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000018617070726f766528616464726573732c75696e7432353629000000000000000070a08231000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001262616c616e63654f66286164647265737329000000000000000000000000000042966c68000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000d6275726e2875696e7432353629000000000000000000000000000000000000007a70a8950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000039636c61696d576974685369676e6174757265282875696e743132382c75696e743132382c627974657333322c6279746573292c62797465732900000000000000e8a3d485000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000d636f6e7472616374555249282900000000000000000000000000000000000000e7150322000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001b656e6372797074446563727970742862797465732c6279746573290000000000a05112fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000016656e63727970746564446174612875696e743235362900000000000000000000081812fc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000014676574417070726f7665642875696e743235362900000000000000000000000063b45e2d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001167657442617365555249436f756e7428290000000000000000000000000000002419f51b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001a676574426174636849644174496e6465782875696e7432353629000000000000b24f2d39000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001767657444656661756c74526f79616c7479496e666f2829000000000000000000502eff7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000186765744d65746164617461466f72416c6c5469657273282900000000000000009fc4d68f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001b67657452657665616c5552492875696e743235362c62797465732900000000004cc157df000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001f676574526f79616c7479496e666f466f72546f6b656e2875696e7432353629005e73ff93000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001867657454696572466f72546f6b656e2875696e7432353629000000000000000051c6a0650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000027676574546f6b656e73496e5469657228737472696e672c75696e743235362c75696e7432353629000000000000000000000000000000000000000000000000009d63e4a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000014676574546f6b656e73496e546965724c656e2829000000000000000000000000e985e9c500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000216973417070726f766564466f72416c6c28616464726573732c616464726573732900000000000000000000000000000000000000000000000000000000000000492e224b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000196973456e6372797074656442617463682875696e743235362900000000000000572b6c05000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001b697354727573746564466f727761726465722861646472657373290000000000e28411ea00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000256c617a794d696e742875696e743235362c737472696e672c737472696e672c62797465732900000000000000000000000000000000000000000000000000000006fdde0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000066e616d65282900000000000000000000000000000000000000000000000000003b1475a700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000136e657874546f6b656e4964546f4d696e74282900000000000000000000000000504c6e0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000156f70657261746f725265737472696374696f6e282900000000000000000000008da5cb5b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000076f776e65722829000000000000000000000000000000000000000000000000006352211e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000106f776e65724f662875696e743235362900000000000000000000000000000000079fe40e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000167072696d61727953616c65526563697069656e74282900000000000000000000ce805642000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001572657665616c2875696e743235362c62797465732900000000000000000000002a55205a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001c726f79616c7479496e666f2875696e743235362c75696e74323536290000000042842e0e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000029736166655472616e7366657246726f6d28616464726573732c616464726573732c75696e74323536290000000000000000000000000000000000000000000000b88d4fde000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002f736166655472616e7366657246726f6d28616464726573732c616464726573732c75696e743235362c6279746573290000000000000000000000000000000000a22cb465000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001f736574417070726f76616c466f72416c6c28616464726573732c626f6f6c2900938e3d7b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000016736574436f6e747261637455524928737472696e672900000000000000000000600dd5ea000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002673657444656661756c74526f79616c7479496e666f28616464726573732c75696e7432353629000000000000000000000000000000000000000000000000000032f0cd64000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001c7365744f70657261746f725265737472696374696f6e28626f6f6c290000000013af403500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000117365744f776e65722861646472657373290000000000000000000000000000006f4f283700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000207365745072696d61727953616c65526563697069656e742861646472657373299bcf7a15000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002f736574526f79616c7479496e666f466f72546f6b656e2875696e743235362c616464726573732c75696e7432353629000000000000000000000000000000000001ffc9a70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000019737570706f727473496e7465726661636528627974657334290000000000000095d89b41000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000873796d626f6c2829000000000000000000000000000000000000000000000000c87b56dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000011746f6b656e5552492875696e7432353629000000000000000000000000000000a2309ff8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000d746f74616c4d696e746564282900000000000000000000000000000000000000b6d142300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000019746f74616c4d696e746564496e5469657228737472696e67290000000000000018160ddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000d746f74616c537570706c7928290000000000000000000000000000000000000023b872dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000257472616e7366657246726f6d28616464726573732c616464726573732c75696e7432353629000000000000000000000000000000000000000000000000000000c4376dd7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002d766572696679282875696e743132382c75696e743132382c627974657333322c6279746573292c6279746573290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000f7469c633bfa27978fcad60c94833afb8bbcb29000000000000000000000000000000000000000000000000000000000000000155065726d697373696f6e73456e756d657261626c6500000000000000000000000000000000000000000000000000000000000000000000000000000000000035697066733a2f2f516d656576387843746b356d597a706f7171375a56536e31617a43327274364a38745a4432557644324c31634d4d00000000000000000000000000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000004c00000000000000000000000000000000000000000000000000000000000000540a217fddf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001444454641554c545f41444d494e5f524f4c452829000000000000000000000000248a9ca30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000015676574526f6c6541646d696e28627974657333322900000000000000000000009010d07c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001e676574526f6c654d656d62657228627974657333322c75696e74323536290000ca15c873000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001b676574526f6c654d656d626572436f756e7428627974657333322900000000002f2ff15d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001a6772616e74526f6c6528627974657333322c616464726573732900000000000091d148540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000018686173526f6c6528627974657333322c61646472657373290000000000000000a32fa5b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000022686173526f6c655769746853776974636828627974657333322c616464726573732900000000000000000000000000000000000000000000000000000000000036568abe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001d72656e6f756e6365526f6c6528627974657333322c6164647265737329000000d547741f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001b7265766f6b65526f6c6528627974657333322c61646472657373290000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}