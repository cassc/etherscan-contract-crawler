{"SourceCode": "pragma solidity ^0.4.11;\r\n// Standard token interface (ERC 20)\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract Token {\r\n// Functions:\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n// Events:\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\ncontract StdToken is Token {\r\n// Fields:\r\n     mapping(address => uint256) balances;\r\n     mapping (address => mapping (address => uint256)) allowed;\r\n     uint256 public allSupply = 0;\r\n// Functions:\r\n     function transfer(address _to, uint256 _value) returns (bool success) {\r\n          if((balances[msg.sender] >= _value) && (balances[_to] + _value > balances[_to])){\r\n               balances[msg.sender] -= _value;\r\n               balances[_to] += _value;\r\n               Transfer(msg.sender, _to, _value);\r\n               return true;\r\n          } else { \r\n               return false; \r\n          }\r\n     }\r\n     function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n          if((balances[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balances[_to] + _value > balances[_to])){\r\n               balances[_to] += _value;\r\n               balances[_from] -= _value;\r\n               allowed[_from][msg.sender] -= _value;\r\n               Transfer(_from, _to, _value);\r\n               return true;\r\n          } else { \r\n               return false; \r\n          }\r\n     }\r\n     function balanceOf(address _owner) constant returns (uint256 balance) {\r\n          return balances[_owner];\r\n     }\r\n     function approve(address _spender, uint256 _value) returns (bool success) {\r\n          allowed[msg.sender][_spender] = _value;\r\n          Approval(msg.sender, _spender, _value);\r\n          return true;\r\n     }\r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n          return allowed[_owner][_spender];\r\n     }\r\n     function totalSupply() constant returns (uint256 supplyOut) {\r\n          supplyOut = allSupply;\r\n          return;\r\n     }\r\n}\r\ncontract QRL_Token is StdToken {\r\n     string public name = \"QRL\";\r\n     uint public decimals = 8;\r\n     string public symbol = \"QRL\";\r\n     address public creator = 0x0;\r\n     uint freezeblock = 0;\r\n     modifier notFrozen() {\r\n          if ((freezeblock != 0) && (block.number > freezeblock)) throw;\r\n          _;\r\n     }\r\n     modifier onlyPayloadSize(uint numwords) {\r\n          if (msg.data.length != numwords * 32 + 4) throw;\r\n          _;\r\n     }\r\n     modifier onlyInState(State state){\r\n          if(currentState!=state)\r\n               throw;\r\n          _;\r\n     }\r\n     modifier onlyByCreator(){\r\n          if(msg.sender!=creator)\r\n               throw;\r\n          _;\r\n     }\r\n// Functions:\r\n     function transfer(address _to, uint256 _value) notFrozen onlyPayloadSize(2) returns (bool success) {\r\n          if((balances[msg.sender] >= _value) && (balances[_to] + _value > balances[_to])){\r\n               balances[msg.sender] -= _value;\r\n               balances[_to] += _value;\r\n               Transfer(msg.sender, _to, _value);\r\n               return true;\r\n          } else { \r\n               return false; \r\n          }\r\n     }\r\n     function transferFrom(address _from, address _to, uint256 _value) notFrozen onlyPayloadSize(2) returns (bool success) {\r\n          if((balances[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balances[_to] + _value > balances[_to])){\r\n               balances[_to] += _value;\r\n               balances[_from] -= _value;\r\n               allowed[_from][msg.sender] -= _value;\r\n               Transfer(_from, _to, _value);\r\n               return true;\r\n          } else { \r\n               return false; \r\n          }\r\n     }\r\n     function approve(address _spender, uint256 _value) returns (bool success) {\r\n          //require user to set to zero before resetting to nonzero\r\n          if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\r\n               return false;\r\n          }\r\n          allowed[msg.sender][_spender] = _value;\r\n          Approval(msg.sender, _spender, _value);\r\n          return true;\r\n     }\r\n     function QRL_Token(){\r\n          creator = msg.sender;\r\n     }\r\n     enum State {\r\n          Start,\r\n          Closed\r\n     }\r\n     State public currentState = State.Start;\r\n     function freeze(uint fb) onlyByCreator {\r\n          freezeblock = fb;\r\n     }\r\n     function issueTokens(address forAddress, uint tokenCount) onlyInState(State.Start) onlyByCreator{\r\n          balances[forAddress]=tokenCount;\r\n          \r\n          // This is removed for optimization (lower gas consumption for each call)\r\n          // Please see 'setAllSupply' function\r\n          //\r\n          // allBalances+=tokenCount\r\n     }\r\n     // This is called to close the contract (so no one could mint more tokens)\r\n     function close() onlyInState(State.Start) onlyByCreator{\r\n          currentState = State.Closed;\r\n     }\r\n     function setAllSupply(uint data) onlyInState(State.Start) onlyByCreator{\r\n          allSupply = data;\r\n     }\r\n     function changeCreator(address newCreator) onlyByCreator{\r\n          creator = newCreator;\r\n     }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supplyOut\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"forAddress\",\"type\":\"address\"},{\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"issueTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"changeCreator\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fb\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"setAllSupply\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "QRL_Token", "CompilerVersion": "v0.4.11+commit.68ef5810", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://1dcf88a89e20b6e696555c04426b71860a39a8074c6f90f6718d9497d3ce7fd8"}