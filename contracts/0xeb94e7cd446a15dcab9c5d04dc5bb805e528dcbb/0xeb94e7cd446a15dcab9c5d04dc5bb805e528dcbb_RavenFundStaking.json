{"SourceCode": "// RavenFund - Staking\r\n//\r\n// The raven symbolizes prophecy, insight, transformation, and intelligence. It also represents long-term success.\r\n// The 1st AI-powered hedge fund\r\n//\r\n// https://www.ravenfund.app/\r\n// https://twitter.com/RavenFund\r\n// https://t.me/RavenFundPortal\r\n\r\n// File: @openzeppelin/contracts/utils/math/SignedMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1, \"Math: mulDiv overflow\");\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(int256 value) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n\r\n// File: @unlock-protocol/contracts/dist/PublicLock/IPublicLockV13.sol\r\n\r\n\r\npragma solidity >=0.5.17 <0.9.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title The PublicLock Interface\r\n */\r\n\r\ninterface IPublicLockV13 {\r\n  /// Functions\r\n  function initialize(\r\n    address _lockCreator,\r\n    uint _expirationDuration,\r\n    address _tokenAddress,\r\n    uint _keyPrice,\r\n    uint _maxNumberOfKeys,\r\n    string calldata _lockName\r\n  ) external;\r\n\r\n  // default role from OpenZeppelin\r\n  function DEFAULT_ADMIN_ROLE()\r\n    external\r\n    view\r\n    returns (bytes32 role);\r\n\r\n  /**\r\n   * @notice The version number of the current implementation on this network.\r\n   * @return The current version number.\r\n   */\r\n  function publicLockVersion()\r\n    external\r\n    pure\r\n    returns (uint16);\r\n\r\n  /**\r\n   * @dev Called by lock manager to withdraw all funds from the lock\r\n   * @param _tokenAddress specifies the token address to withdraw or 0 for ETH. This is usually\r\n   * the same as `tokenAddress` in MixinFunds.\r\n   * @param _recipient specifies the address that will receive the tokens\r\n   * @param _amount specifies the max amount to withdraw, which may be reduced when\r\n   * considering the available balance. Set to 0 or MAX_UINT to withdraw everything.\r\n   * -- however be wary of draining funds as it breaks the `cancelAndRefund` and `expireAndRefundFor` use cases.\r\n   */\r\n  function withdraw(\r\n    address _tokenAddress,\r\n    address payable _recipient,\r\n    uint _amount\r\n  ) external;\r\n\r\n  /**\r\n   * A function which lets a Lock manager of the lock to change the price for future purchases.\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @dev Throws if lock has been disabled\r\n   * @dev Throws if _tokenAddress is not a valid token\r\n   * @param _keyPrice The new price to set for keys\r\n   * @param _tokenAddress The address of the erc20 token to use for pricing the keys,\r\n   * or 0 to use ETH\r\n   */\r\n  function updateKeyPricing(\r\n    uint _keyPrice,\r\n    address _tokenAddress\r\n  ) external;\r\n\r\n  /**\r\n   * Update the main key properties for the entire lock:\r\n   *\r\n   * - default duration of each key\r\n   * - the maximum number of keys the lock can edit\r\n   * - the maximum number of keys a single address can hold\r\n   *\r\n   * @notice keys previously bought are unaffected by this changes in expiration duration (i.e.\r\n   * existing keys timestamps are not recalculated/updated)\r\n   * @param _newExpirationDuration the new amount of time for each key purchased or type(uint).max for a non-expiring key\r\n   * @param _maxKeysPerAcccount the maximum amount of key a single user can own\r\n   * @param _maxNumberOfKeys uint the maximum number of keys\r\n   * @dev _maxNumberOfKeys Can't be smaller than the existing supply\r\n   */\r\n  function updateLockConfig(\r\n    uint _newExpirationDuration,\r\n    uint _maxNumberOfKeys,\r\n    uint _maxKeysPerAcccount\r\n  ) external;\r\n\r\n  /**\r\n   * Checks if the user has a non-expired key.\r\n   * @param _user The address of the key owner\r\n   */\r\n  function getHasValidKey(\r\n    address _user\r\n  ) external view returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the key's ExpirationTimestamp field for a given owner.\r\n   * @param _tokenId the id of the key\r\n   * @dev Returns 0 if the owner has never owned a key for this lock\r\n   */\r\n  function keyExpirationTimestampFor(\r\n    uint _tokenId\r\n  ) external view returns (uint timestamp);\r\n\r\n  /**\r\n   * Public function which returns the total number of unique owners (both expired\r\n   * and valid).  This may be larger than totalSupply.\r\n   */\r\n  function numberOfOwners() external view returns (uint);\r\n\r\n  /**\r\n   * Allows the Lock owner to assign\r\n   * @param _lockName a descriptive name for this Lock.\r\n   * @param _lockSymbol a Symbol for this Lock (default to KEY).\r\n   * @param _baseTokenURI the baseTokenURI for this Lock\r\n   */\r\n  function setLockMetadata(\r\n    string calldata _lockName,\r\n    string calldata _lockSymbol,\r\n    string calldata _baseTokenURI\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**  @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n   * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\r\n   *  3986. The URI may point to a JSON file that conforms to the \"ERC721\r\n   *  Metadata JSON Schema\".\r\n   * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n   * @param _tokenId The tokenID we're inquiring about\r\n   * @return String representing the URI for the requested token\r\n   */\r\n  function tokenURI(\r\n    uint256 _tokenId\r\n  ) external view returns (string memory);\r\n\r\n  /**\r\n   * Allows a Lock manager to add or remove an event hook\r\n   * @param _onKeyPurchaseHook Hook called when the `purchase` function is called\r\n   * @param _onKeyCancelHook Hook called when the internal `_cancelAndRefund` function is called\r\n   * @param _onValidKeyHook Hook called to determine if the contract should overide the status for a given address\r\n   * @param _onTokenURIHook Hook called to generate a data URI used for NFT metadata\r\n   * @param _onKeyTransferHook Hook called when a key is transfered\r\n   * @param _onKeyExtendHook Hook called when a key is extended or renewed\r\n   * @param _onKeyGrantHook Hook called when a key is granted\r\n   */\r\n  function setEventHooks(\r\n    address _onKeyPurchaseHook,\r\n    address _onKeyCancelHook,\r\n    address _onValidKeyHook,\r\n    address _onTokenURIHook,\r\n    address _onKeyTransferHook,\r\n    address _onKeyExtendHook,\r\n    address _onKeyGrantHook\r\n  ) external;\r\n\r\n  /**\r\n   * Allows a Lock manager to give a collection of users a key with no charge.\r\n   * Each key may be assigned a different expiration date.\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @param _recipients An array of receiving addresses\r\n   * @param _expirationTimestamps An array of expiration Timestamps for the keys being granted\r\n   * @return the ids of the granted tokens\r\n   */\r\n  function grantKeys(\r\n    address[] calldata _recipients,\r\n    uint[] calldata _expirationTimestamps,\r\n    address[] calldata _keyManagers\r\n  ) external returns (uint256[] memory);\r\n\r\n  /**\r\n   * Allows the Lock owner to extend an existing keys with no charge.\r\n   * @param _tokenId The id of the token to extend\r\n   * @param _duration The duration in secondes to add ot the key\r\n   * @dev set `_duration` to 0 to use the default duration of the lock\r\n   */\r\n  function grantKeyExtension(\r\n    uint _tokenId,\r\n    uint _duration\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Purchase function\r\n   * @param _values array of tokens amount to pay for this purchase >= the current keyPrice - any applicable discount\r\n   * (_values is ignored when using ETH)\r\n   * @param _recipients array of addresses of the recipients of the purchased key\r\n   * @param _referrers array of addresses of the users making the referral\r\n   * @param _keyManagers optional array of addresses to grant managing rights to a specific address on creation\r\n   * @param _data array of arbitrary data populated by the front-end which initiated the sale\r\n   * @notice when called for an existing and non-expired key, the `_keyManager` param will be ignored\r\n   * @dev Setting _value to keyPrice exactly doubles as a security feature. That way if the lock owner increases the\r\n   * price while my transaction is pending I can't be charged more than I expected (only applicable to ERC-20 when more\r\n   * than keyPrice is approved for spending).\r\n   * @return tokenIds the ids of the created tokens\r\n   */\r\n  function purchase(\r\n    uint256[] calldata _values,\r\n    address[] calldata _recipients,\r\n    address[] calldata _referrers,\r\n    address[] calldata _keyManagers,\r\n    bytes[] calldata _data\r\n  ) external payable returns (uint256[] memory tokenIds);\r\n\r\n  /**\r\n   * @dev Extend function\r\n   * @param _value the number of tokens to pay for this purchase >= the current keyPrice - any applicable discount\r\n   * (_value is ignored when using ETH)\r\n   * @param _tokenId the id of the key to extend\r\n   * @param _referrer address of the user making the referral\r\n   * @param _data arbitrary data populated by the front-end which initiated the sale\r\n   * @dev Throws if lock is disabled or key does not exist for _recipient. Throws if _recipient == address(0).\r\n   */\r\n  function extend(\r\n    uint _value,\r\n    uint _tokenId,\r\n    address _referrer,\r\n    bytes calldata _data\r\n  ) external payable;\r\n\r\n  /**\r\n   * Returns the percentage of the keyPrice to be sent to the referrer (in basis points)\r\n   * @param _referrer the address of the referrer\r\n   * @return referrerFee the percentage of the keyPrice to be sent to the referrer (in basis points)\r\n   */\r\n  function referrerFees(\r\n    address _referrer\r\n  ) external view returns (uint referrerFee);\r\n\r\n  /**\r\n   * Set a specific percentage of the keyPrice to be sent to the referrer while purchasing,\r\n   * extending or renewing a key.\r\n   * @param _referrer the address of the referrer\r\n   * @param _feeBasisPoint the percentage of the price to be used for this\r\n   * specific referrer (in basis points)\r\n   * @dev To send a fixed percentage of the key price to all referrers, sett a percentage to `address(0)`\r\n   */\r\n  function setReferrerFee(\r\n    address _referrer,\r\n    uint _feeBasisPoint\r\n  ) external;\r\n\r\n  /**\r\n   * Merge existing keys\r\n   * @param _tokenIdFrom the id of the token to substract time from\r\n   * @param _tokenIdTo the id of the destination token  to add time\r\n   * @param _amount the amount of time to transfer (in seconds)\r\n   */\r\n  function mergeKeys(\r\n    uint _tokenIdFrom,\r\n    uint _tokenIdTo,\r\n    uint _amount\r\n  ) external;\r\n\r\n  /**\r\n   * Deactivate an existing key\r\n   * @param _tokenId the id of token to burn\r\n   * @notice the key will be expired and ownership records will be destroyed\r\n   */\r\n  function burn(uint _tokenId) external;\r\n\r\n  /**\r\n   * @param _gasRefundValue price in wei or token in smallest price unit\r\n   * @dev Set the value to be refunded to the sender on purchase\r\n   */\r\n  function setGasRefundValue(\r\n    uint256 _gasRefundValue\r\n  ) external;\r\n\r\n  /**\r\n   * _gasRefundValue price in wei or token in smallest price unit\r\n   * @dev Returns the value/price to be refunded to the sender on purchase\r\n   */\r\n  function gasRefundValue()\r\n    external\r\n    view\r\n    returns (uint256 _gasRefundValue);\r\n\r\n  /**\r\n   * @notice returns the minimum price paid for a purchase with these params.\r\n   * @dev this considers any discount from Unlock or the OnKeyPurchase hook.\r\n   */\r\n  function purchasePriceFor(\r\n    address _recipient,\r\n    address _referrer,\r\n    bytes calldata _data\r\n  ) external view returns (uint);\r\n\r\n  /**\r\n   * Allow a Lock manager to change the transfer fee.\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @param _transferFeeBasisPoints The new transfer fee in basis-points(bps).\r\n   * Ex: 200 bps = 2%\r\n   */\r\n  function updateTransferFee(\r\n    uint _transferFeeBasisPoints\r\n  ) external;\r\n\r\n  /**\r\n   * Determines how much of a fee would need to be paid in order to\r\n   * transfer to another account.  This is pro-rated so the fee goes\r\n   * down overtime.\r\n   * @dev Throws if _tokenId does not have a valid key\r\n   * @param _tokenId The id of the key check the transfer fee for.\r\n   * @param _time The amount of time to calculate the fee for.\r\n   * @return The transfer fee in seconds.\r\n   */\r\n  function getTransferFee(\r\n    uint _tokenId,\r\n    uint _time\r\n  ) external view returns (uint);\r\n\r\n  /**\r\n   * @dev Invoked by a Lock manager to expire the user's key\r\n   * and perform a refund and cancellation of the key\r\n   * @param _tokenId The key id we wish to refund to\r\n   * @param _amount The amount to refund to the key-owner\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @dev Throws if _keyOwner does not have a valid key\r\n   */\r\n  function expireAndRefundFor(\r\n    uint _tokenId,\r\n    uint _amount\r\n  ) external;\r\n\r\n  /**\r\n   * @dev allows the key manager to expire a given tokenId\r\n   * and send a refund to the keyOwner based on the amount of time remaining.\r\n   * @param _tokenId The id of the key to cancel.\r\n   * @notice cancel is enabled with a 10% penalty by default on all Locks.\r\n   */\r\n  function cancelAndRefund(uint _tokenId) external;\r\n\r\n  /**\r\n   * Allow a Lock manager to change the refund penalty.\r\n   * @dev Throws if called by other than a Lock manager\r\n   * @param _freeTrialLength The new duration of free trials for this lock\r\n   * @param _refundPenaltyBasisPoints The new refund penaly in basis-points(bps)\r\n   */\r\n  function updateRefundPenalty(\r\n    uint _freeTrialLength,\r\n    uint _refundPenaltyBasisPoints\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Determines how much of a refund a key owner would receive if they issued\r\n   * @param _tokenId the id of the token to get the refund value for.\r\n   * @notice Due to the time required to mine a tx, the actual refund amount will be lower\r\n   * than what the user reads from this call.\r\n   * @return refund the amount of tokens refunded\r\n   */\r\n  function getCancelAndRefundValue(\r\n    uint _tokenId\r\n  ) external view returns (uint refund);\r\n\r\n  function addLockManager(address account) external;\r\n\r\n  function isLockManager(\r\n    address account\r\n  ) external view returns (bool);\r\n\r\n  /**\r\n   * Returns the address of the `onKeyPurchaseHook` hook.\r\n   * @return hookAddress address of the hook\r\n   */\r\n  function onKeyPurchaseHook()\r\n    external\r\n    view\r\n    returns (address hookAddress);\r\n\r\n  /**\r\n   * Returns the address of the `onKeyCancelHook` hook.\r\n   * @return hookAddress address of the hook\r\n   */\r\n  function onKeyCancelHook()\r\n    external\r\n    view\r\n    returns (address hookAddress);\r\n\r\n  /**\r\n   * Returns the address of the `onValidKeyHook` hook.\r\n   * @return hookAddress address of the hook\r\n   */\r\n  function onValidKeyHook()\r\n    external\r\n    view\r\n    returns (address hookAddress);\r\n\r\n  /**\r\n   * Returns the address of the `onTokenURIHook` hook.\r\n   * @return hookAddress address of the hook\r\n   */\r\n  function onTokenURIHook()\r\n    external\r\n    view\r\n    returns (address hookAddress);\r\n\r\n  /**\r\n   * Returns the address of the `onKeyTransferHook` hook.\r\n   * @return hookAddress address of the hook\r\n   */\r\n  function onKeyTransferHook()\r\n    external\r\n    view\r\n    returns (address hookAddress);\r\n\r\n  /**\r\n   * Returns the address of the `onKeyExtendHook` hook.\r\n   * @return hookAddress the address ok the hook\r\n   */\r\n  function onKeyExtendHook()\r\n    external\r\n    view\r\n    returns (address hookAddress);\r\n\r\n  /**\r\n   * Returns the address of the `onKeyGrantHook` hook.\r\n   * @return hookAddress the address ok the hook\r\n   */\r\n  function onKeyGrantHook()\r\n    external\r\n    view\r\n    returns (address hookAddress);\r\n\r\n  function renounceLockManager() external;\r\n\r\n  /**\r\n   * @return the maximum number of key allowed for a single address\r\n   */\r\n  function maxKeysPerAddress() external view returns (uint);\r\n\r\n  function expirationDuration()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function freeTrialLength()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function keyPrice() external view returns (uint256);\r\n\r\n  function maxNumberOfKeys()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function refundPenaltyBasisPoints()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function tokenAddress() external view returns (address);\r\n\r\n  function transferFeeBasisPoints()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function unlockProtocol() external view returns (address);\r\n\r\n  function keyManagerOf(\r\n    uint\r\n  ) external view returns (address);\r\n\r\n  ///===================================================================\r\n\r\n  /**\r\n   * @notice Allows the key owner to safely share their key (parent key) by\r\n   * transferring a portion of the remaining time to a new key (child key).\r\n   * @dev Throws if key is not valid.\r\n   * @dev Throws if `_to` is the zero address\r\n   * @param _to The recipient of the shared key\r\n   * @param _tokenId the key to share\r\n   * @param _timeShared The amount of time shared\r\n   * checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n   * `onERC721Received` on `_to` and throws if the return value is not\r\n   * `bytes4(keccak256('onERC721Received(address,address,uint,bytes)'))`.\r\n   * @dev Emit Transfer event\r\n   */\r\n  function shareKey(\r\n    address _to,\r\n    uint _tokenId,\r\n    uint _timeShared\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Update transfer and cancel rights for a given key\r\n   * @param _tokenId The id of the key to assign rights for\r\n   * @param _keyManager The address to assign the rights to for the given key\r\n   */\r\n  function setKeyManagerOf(\r\n    uint _tokenId,\r\n    address _keyManager\r\n  ) external;\r\n\r\n  /**\r\n   * Check if a certain key is valid\r\n   * @param _tokenId the id of the key to check validity\r\n   * @notice this makes use of the onValidKeyHook if it is set\r\n   */\r\n  function isValidKey(\r\n    uint _tokenId\r\n  ) external view returns (bool);\r\n\r\n  /**\r\n   * Returns the number of keys owned by `_keyOwner` (expired or not)\r\n   * @param _keyOwner address for which we are retrieving the total number of keys\r\n   * @return numberOfKeys total number of keys owned by the address\r\n   */\r\n  function totalKeys(\r\n    address _keyOwner\r\n  ) external view returns (uint numberOfKeys);\r\n\r\n  /// @notice A descriptive name for a collection of NFTs in this contract\r\n  function name()\r\n    external\r\n    view\r\n    returns (string memory _name);\r\n\r\n  ///===================================================================\r\n\r\n  /// From ERC165.sol\r\n  function supportsInterface(\r\n    bytes4 interfaceId\r\n  ) external view returns (bool);\r\n\r\n  ///===================================================================\r\n\r\n  /// From ERC-721\r\n  /**\r\n   * In the specific case of a Lock, `balanceOf` returns only the tokens with a valid expiration timerange\r\n   * @return balance The number of valid keys owned by `_keyOwner`\r\n   */\r\n  function balanceOf(\r\n    address _owner\r\n  ) external view returns (uint256 balance);\r\n\r\n  /**\r\n   * @dev Returns the owner of the NFT specified by `tokenId`.\r\n   */\r\n  function ownerOf(\r\n    uint256 tokenId\r\n  ) external view returns (address _owner);\r\n\r\n  /**\r\n   * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Requirements:\r\n   * - `from`, `to` cannot be zero.\r\n   * - `tokenId` must be owned by `from`.\r\n   * - If the caller is not `from`, it must be have been allowed to move this\r\n   * NFT by either {approve} or {setApprovalForAll}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * an ERC721-like function to transfer a token from one account to another.\r\n   * @param from the owner of token to transfer\r\n   * @param to the address that will receive the token\r\n   * @param tokenId the id of the token\r\n   * @dev Requirements: if the caller is not `from`, it must be approved to move this token by\r\n   * either {approve} or {setApprovalForAll}.\r\n   * The key manager will be reset to address zero after the transfer\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * Lending a key allows you to transfer the token while retaining the\r\n   * ownerships right by setting yourself as a key manager first.\r\n   * @param from the owner of token to transfer\r\n   * @param to the address that will receive the token\r\n   * @param tokenId the id of the token\r\n   * @notice This function can only be called by 1) the key owner when no key manager is set or 2) the key manager.\r\n   * After calling the function, the `_recipent` will be the new owner, and the sender of the tx\r\n   * will become the key manager.\r\n   */\r\n  function lendKey(\r\n    address from,\r\n    address to,\r\n    uint tokenId\r\n  ) external;\r\n\r\n  /**\r\n   * Unlend is called when you have lent a key and want to claim its full ownership back.\r\n   * @param _recipient the address that will receive the token ownership\r\n   * @param _tokenId the id of the token\r\n   * @dev Only the key manager of the token can call this function\r\n   */\r\n  function unlendKey(\r\n    address _recipient,\r\n    uint _tokenId\r\n  ) external;\r\n\r\n  function approve(address to, uint256 tokenId) external;\r\n\r\n  /**\r\n   * @notice Get the approved address for a single NFT\r\n   * @dev Throws if `_tokenId` is not a valid NFT.\r\n   * @param _tokenId The NFT to find the approved address for\r\n   * @return operator The approved address for this NFT, or the zero address if there is none\r\n   */\r\n  function getApproved(\r\n    uint256 _tokenId\r\n  ) external view returns (address operator);\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _operator operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   * @notice disabled when transfers are disabled\r\n   */\r\n  function setApprovalForAll(\r\n    address _operator,\r\n    bool _approved\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given keyManager\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  ) external view returns (bool);\r\n\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes calldata data\r\n  ) external;\r\n\r\n  /**\r\n   * Returns the total number of keys, including non-valid ones\r\n   * @return _totalKeysCreated the total number of keys, valid or not\r\n   */\r\n  function totalSupply() external view returns (uint256 _totalKeysCreated);\r\n\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 index\r\n  ) external view returns (uint256 tokenId);\r\n\r\n  function tokenByIndex(\r\n    uint256 index\r\n  ) external view returns (uint256);\r\n\r\n  /**\r\n   * Innherited from Open Zeppelin AccessControl.sol\r\n   */\r\n  function getRoleAdmin(\r\n    bytes32 role\r\n  ) external view returns (bytes32);\r\n\r\n  function grantRole(\r\n    bytes32 role,\r\n    address account\r\n  ) external;\r\n\r\n  function revokeRole(\r\n    bytes32 role,\r\n    address account\r\n  ) external;\r\n\r\n  function renounceRole(\r\n    bytes32 role,\r\n    address account\r\n  ) external;\r\n\r\n  function hasRole(\r\n    bytes32 role,\r\n    address account\r\n  ) external view returns (bool);\r\n\r\n  /** `owner()` is provided as an helper to mimick the `Ownable` contract ABI.\r\n   * The `Ownable` logic is used by many 3rd party services to determine\r\n   * contract ownership - e.g. who is allowed to edit metadata on Opensea.\r\n   *\r\n   * @notice This logic is NOT used internally by the Unlock Protocol and is made\r\n   * available only as a convenience helper.\r\n   */\r\n  function owner() external view returns (address owner);\r\n\r\n  function setOwner(address account) external;\r\n\r\n  function isOwner(\r\n    address account\r\n  ) external view returns (bool isOwner);\r\n\r\n  /**\r\n   * Migrate data from the previous single owner => key mapping to\r\n   * the new data structure w multiple tokens.\r\n   * @param _calldata an ABI-encoded representation of the params (v10: the number of records to migrate as `uint`)\r\n   * @dev when all record schemas are sucessfully upgraded, this function will update the `schemaVersion`\r\n   * variable to the latest/current lock version\r\n   */\r\n  function migrate(bytes calldata _calldata) external;\r\n\r\n  /**\r\n   * Returns the version number of the data schema currently used by the lock\r\n   * @notice if this is different from `publicLockVersion`, then the ability to purchase, grant\r\n   * or extend keys is disabled.\r\n   * @dev will return 0 if no ;igration has ever been run\r\n   */\r\n  function schemaVersion() external view returns (uint);\r\n\r\n  /**\r\n   * Set the schema version to the latest\r\n   * @notice only lock manager call call this\r\n   */\r\n  function updateSchemaVersion() external;\r\n\r\n  /**\r\n   * Renew a given token\r\n   * @notice only works for non-free, expiring, ERC20 locks\r\n   * @param _tokenId the ID fo the token to renew\r\n   * @param _referrer the address of the person to be granted UDT\r\n   */\r\n  function renewMembershipFor(\r\n    uint _tokenId,\r\n    address _referrer\r\n  ) external;\r\n\r\n  /**\r\n   * @dev helper to check if a key is currently renewable \r\n   * it will revert if the pricing or duration of the lock have been modified \r\n   * unfavorably since the key was bought(price increase or duration decrease).\r\n   * It will also revert if a lock is not renewable or if the key is not ready for renewal yet \r\n   * (at least 90% expired).\r\n   * @param tokenId the id of the token to check\r\n   * @param referrer the address where to send the referrer fee\r\n   * @return true if the terms has changed\r\n   */\r\n  function isRenewable(uint256 tokenId, address referrer) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/RFStakePool.sol\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RavenFundStaking is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public stakingToken;\r\n    address public rewardsProvider;\r\n    address public teamWallet;\r\n    address public owner;\r\n    Lockers[] public lockSubNFT;\r\n\r\n    struct Lockers {\r\n        IPublicLockV13 instance;\r\n        IERC721 nft;\r\n    }\r\n\r\n    uint256 public maxStakeAmount = 0;\r\n    uint256 public minClaimAmount = 15_000 ether;\r\n    uint256 public stakeWaitTime = 12 hours;\r\n    uint256 public claimInterval = 24 hours;\r\n    uint256 public timeElapsedFactor = 7 days;\r\n    uint256 public rewardResetInterval = 15 days;\r\n    uint256 public malusNoSubscription = 70;\r\n    uint256 public totalDistributed = 0;\r\n\r\n    bool public enableClaim = false;\r\n    bool public enableStake = false;\r\n    bool public activateSendTeam = true;\r\n\r\n    struct StakerInfo {\r\n        uint256 amountStaked;\r\n        uint256 lastStakeTime;\r\n        uint256 lastClaimTime;\r\n        uint256 rewardsEarned;\r\n        uint256 rewardsClaimed;\r\n        uint256 lastRewardUpdateTime;\r\n        uint256 keyArray;\r\n    }\r\n\r\n    uint256 public totalStakedAmount;\r\n\r\n    struct Funds {\r\n        uint256 amount;\r\n        uint256 depositTime;\r\n    }\r\n\r\n    Funds[] public fundDeposits;\r\n    uint256 public consolidatedFunds = 0;\r\n\r\n    mapping(address => StakerInfo) public stakers;\r\n    address[] public stakerAddresses;\r\n\r\n    constructor(address _stakingToken, address _rewardsProvider, address _teamWallet) {\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardsProvider = _rewardsProvider;\r\n        teamWallet = _teamWallet;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyRewardsProvider() {\r\n        require(msg.sender == rewardsProvider || msg.sender == owner || msg.sender == teamWallet, \"Not the rewards provider\");\r\n        _;\r\n    }\r\n\r\n    function stake(uint256 amount) external nonReentrant {\r\n        require(enableStake, \"Stake not enabled.\");\r\n        StakerInfo storage staker = stakers[msg.sender];\r\n        if (maxStakeAmount > 0) {\r\n            require(staker.amountStaked + amount <= maxStakeAmount, \"Max stake amount reached\");\r\n        }\r\n\r\n        if (staker.lastRewardUpdateTime == 0) {\r\n            staker.lastRewardUpdateTime = block.timestamp;\r\n        }\r\n\r\n        if (staker.keyArray == 0){\r\n            stakerAddresses.push(msg.sender);\r\n            staker.keyArray = stakerAddresses.length;\r\n        }\r\n\r\n        uint256 allowance = stakingToken.allowance(msg.sender, address(this));\r\n        require(allowance >= amount, \"Allowance is not sufficient to stake tokens\");\r\n\r\n        staker.lastStakeTime = block.timestamp;\r\n        staker.amountStaked = staker.amountStaked.add(amount);\r\n        totalStakedAmount = totalStakedAmount.add(amount);\r\n\r\n        require(stakingToken.transferFrom(msg.sender, address(this), amount), \"Token transfer failed\");\r\n    }\r\n\r\n    function withdraw(uint256 amount) external nonReentrant {\r\n        StakerInfo storage staker = stakers[msg.sender];\r\n\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(staker.amountStaked >= amount, \"Insufficient staked amount\");\r\n\r\n        staker.amountStaked = staker.amountStaked.sub(amount);\r\n        totalStakedAmount = totalStakedAmount.sub(amount);\r\n\r\n        if (staker.amountStaked <= 0) {\r\n            uint256 reward = staker.rewardsEarned;\r\n            staker.rewardsEarned = 0;\r\n            staker.lastClaimTime = block.timestamp;\r\n            uint256 contractBalance = address(this).balance;\r\n            if (reward > 0 && contractBalance >= reward && activateSendTeam){\r\n                calibrateFundArray(reward);\r\n\r\n                payable(teamWallet).transfer(reward);\r\n            }\r\n        }\r\n\r\n        require(stakingToken.transfer(msg.sender, amount), \"Token transfer failed\");\r\n    }\r\n\r\n    function canClaim(address stakerAddress) public view returns (bool) {\r\n        StakerInfo storage staker = stakers[stakerAddress];\r\n        uint256 reward = previewStakerRewards(stakerAddress);\r\n        uint256 contractBalance = address(this).balance;\r\n        return enableClaim && reward > 0 && contractBalance >= reward && (staker.amountStaked >= minClaimAmount) && (block.timestamp > staker.lastStakeTime + stakeWaitTime) && (block.timestamp > staker.lastClaimTime + claimInterval);\r\n    }\r\n\r\n    function reasonClaim(address stakerAddress) public view returns (string memory) {\r\n        StakerInfo storage staker = stakers[stakerAddress];\r\n        uint256 reward = previewStakerRewards(stakerAddress);\r\n        uint256 contractBalance = address(this).balance;\r\n        if (!enableClaim){\r\n            return \"Claim not enabled, please wait a moment.\";\r\n        }\r\n        if (staker.amountStaked < minClaimAmount) {\r\n            return string(abi.encodePacked(\"To be eligible, you have to stake a minimum $RAVEN of \", Strings.toString(minClaimAmount.div(1 ether))));\r\n        }\r\n        if (block.timestamp <= staker.lastStakeTime + stakeWaitTime) {\r\n            return Strings.toString(staker.lastStakeTime + stakeWaitTime);\r\n        }\r\n        if (block.timestamp <= staker.lastClaimTime + claimInterval) {\r\n            return Strings.toString(staker.lastClaimTime + claimInterval);\r\n        }\r\n        if (reward <= 0){\r\n            return \"You don't have any reward to claim for the moment.\";\r\n        }\r\n        if (contractBalance < reward) {\r\n            return \"Please wait new funds to claim your reward.\";\r\n        }\r\n        return \"You can claim !\";\r\n    }\r\n\r\n    function claim() external nonReentrant {\r\n        require(enableClaim, \"Claim not enabled.\");\r\n        StakerInfo storage staker = stakers[msg.sender];\r\n        require(staker.amountStaked >= minClaimAmount, \"Not enough tokens staked to claim.\");\r\n        require(block.timestamp > staker.lastStakeTime + stakeWaitTime, \"Need to wait after staking\");\r\n        require(block.timestamp > staker.lastClaimTime + claimInterval, \"Already claimed recently\");\r\n\r\n        updateStakerRewards(msg.sender);\r\n\r\n        uint256 reward = staker.rewardsEarned;\r\n        require(reward > 0, \"No rewards available\");\r\n\r\n        uint256 contractBalance = address(this).balance;\r\n        require(contractBalance >= reward, \"Not enough ETH in the contract\");\r\n\r\n        calibrateFundArray(reward);\r\n        staker.rewardsEarned = 0;\r\n        staker.lastClaimTime = block.timestamp;\r\n        staker.rewardsClaimed = staker.rewardsClaimed.add(reward);\r\n        totalDistributed = totalDistributed.add(reward);\r\n\r\n        payable(msg.sender).transfer(reward);\r\n    }\r\n\r\n    function previewStakerRewards(address stakerAddress) public view returns (uint256) {\r\n        StakerInfo storage staker = stakers[stakerAddress];\r\n\r\n        if (staker.amountStaked < minClaimAmount || totalStakedAmount <= 0 || timeElapsedFactor <= 0) {\r\n            return staker.rewardsEarned;\r\n        }\r\n\r\n        uint256 totalReward = 0;\r\n        for(uint256 i = 0; i < fundDeposits.length; i++) {\r\n            if (fundDeposits[i].amount == 0) {\r\n                continue;\r\n            }\r\n            uint256 referenceTime = max(staker.lastRewardUpdateTime, fundDeposits[i].depositTime);\r\n            uint256 timeElapsed = block.timestamp.sub(referenceTime);\r\n            \r\n            uint256 timeFactor;\r\n            if(timeElapsed >= timeElapsedFactor) {\r\n                timeFactor = 1 ether;\r\n            } else {\r\n                timeFactor = timeElapsed.mul(1 ether).div(timeElapsedFactor);\r\n            }\r\n            \r\n            uint256 stakerShare = staker.amountStaked.mul(1 ether).div(totalStakedAmount);\r\n            uint256 rewardFromThisDeposit = fundDeposits[i].amount.mul(stakerShare).div(1 ether);\r\n            rewardFromThisDeposit = rewardFromThisDeposit.mul(timeFactor).div(1 ether);\r\n\r\n            if (!ownsActiveNFT(stakerAddress)) {\r\n                rewardFromThisDeposit = rewardFromThisDeposit.mul(malusNoSubscription).div(100);\r\n            }\r\n\r\n            totalReward = totalReward.add(rewardFromThisDeposit);\r\n        }\r\n        // Then add rewards from consolidated funds\r\n        uint256 stakerShareFromConsolidated = staker.amountStaked.mul(1 ether).div(totalStakedAmount);\r\n        uint256 rewardFromConsolidated = consolidatedFunds.mul(stakerShareFromConsolidated).div(1 ether);\r\n        if (!ownsActiveNFT(stakerAddress)) {\r\n            rewardFromConsolidated = rewardFromConsolidated.mul(malusNoSubscription).div(100);\r\n        }\r\n\r\n        totalReward = totalReward.add(rewardFromConsolidated);\r\n\r\n        return staker.rewardsEarned.add(totalReward);\r\n    }\r\n\r\n    function updateStakerRewards(address stakerAddress) internal {\r\n        StakerInfo storage staker = stakers[stakerAddress];\r\n\r\n        if (staker.amountStaked < minClaimAmount || totalStakedAmount <= 0 || timeElapsedFactor <= 0) {\r\n            staker.lastRewardUpdateTime = block.timestamp;\r\n            return;\r\n        }\r\n\r\n        uint256 totalReward = 0;\r\n        for(uint256 i = 0; i < fundDeposits.length; i++) {\r\n            if (fundDeposits[i].amount == 0) {\r\n                continue;\r\n            }\r\n            uint256 referenceTime = max(staker.lastRewardUpdateTime, fundDeposits[i].depositTime);\r\n            uint256 timeElapsed = block.timestamp.sub(referenceTime);\r\n            \r\n            uint256 timeFactor;\r\n            if(timeElapsed >= timeElapsedFactor) {\r\n                timeFactor = 1 ether;\r\n            } else {\r\n                timeFactor = timeElapsed.mul(1 ether).div(timeElapsedFactor);\r\n            }\r\n            \r\n            uint256 stakerShare = staker.amountStaked.mul(1 ether).div(totalStakedAmount);\r\n            uint256 rewardFromThisDeposit = fundDeposits[i].amount.mul(stakerShare).div(1 ether);\r\n            rewardFromThisDeposit = rewardFromThisDeposit.mul(timeFactor).div(1 ether);\r\n\r\n            if (!ownsActiveNFT(stakerAddress)) {\r\n                rewardFromThisDeposit = rewardFromThisDeposit.mul(malusNoSubscription).div(100);\r\n            }\r\n\r\n            totalReward = totalReward.add(rewardFromThisDeposit);\r\n        }\r\n        // Then add rewards from consolidated funds\r\n        uint256 stakerShareFromConsolidated = staker.amountStaked.mul(1 ether).div(totalStakedAmount);\r\n        uint256 rewardFromConsolidated = consolidatedFunds.mul(stakerShareFromConsolidated).div(1 ether);\r\n        if (!ownsActiveNFT(stakerAddress)) {\r\n            rewardFromConsolidated = rewardFromConsolidated.mul(malusNoSubscription).div(100);\r\n        }\r\n        totalReward = totalReward.add(rewardFromConsolidated);\r\n        staker.rewardsEarned = staker.rewardsEarned.add(totalReward);\r\n        staker.lastRewardUpdateTime = block.timestamp;\r\n    }\r\n\r\n    function consolidateFunds() private {\r\n        Funds[] memory newFundDeposits = new Funds[](fundDeposits.length);\r\n\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < fundDeposits.length; i++) {\r\n            uint256 timeElapsed = block.timestamp.sub(fundDeposits[i].depositTime);\r\n            if (timeElapsed >= timeElapsedFactor) {\r\n                consolidatedFunds = consolidatedFunds.add(fundDeposits[i].amount);\r\n            } else {\r\n                newFundDeposits[count] = fundDeposits[i];\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if (count > 0) {\r\n            if (fundDeposits.length != count) {\r\n                while (fundDeposits.length > count) {\r\n                    fundDeposits.pop();\r\n                }\r\n                \r\n                for (uint256 i = 0; i < count; i++) {\r\n                    fundDeposits[i] = newFundDeposits[i];\r\n                }\r\n            }\r\n        } else {\r\n            delete fundDeposits;\r\n        }\r\n    }\r\n\r\n    function getTotalAvailableRewards() public view returns (uint256) {\r\n        uint256 totalAvailable = consolidatedFunds;\r\n\r\n        for (uint256 i = 0; i < fundDeposits.length; i++) {\r\n            totalAvailable = totalAvailable.add(fundDeposits[i].amount);\r\n        }\r\n\r\n        return totalAvailable;\r\n    }\r\n\r\n    function depositETH() external payable onlyRewardsProvider {\r\n        fundDeposits.push(Funds({\r\n            amount: msg.value,\r\n            depositTime: block.timestamp\r\n        }));\r\n\r\n        consolidateFunds();\r\n    }\r\n\r\n    function withdrawFunds() external onlyRewardsProvider {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No funds to withdraw\");\r\n        payable(msg.sender).transfer(balance);\r\n\r\n        delete fundDeposits;\r\n        consolidatedFunds = 0;\r\n    }\r\n\r\n    function unClaim(uint256 indexStart, uint256 indexStop) external onlyRewardsProvider {\r\n        uint256 iStart = indexStart;\r\n        uint256 iEnd = stakerAddresses.length;\r\n        if (indexStop > 0 && indexStop > indexStart){\r\n            iEnd = indexStop;\r\n        }\r\n        uint256 totalReward = 0;\r\n        for (uint256 i = iStart; i < iEnd; i++) {\r\n            StakerInfo storage staker = stakers[stakerAddresses[i]];\r\n            if (block.timestamp - staker.lastClaimTime > rewardResetInterval && staker.rewardsEarned > 0) {\r\n                totalReward = totalReward.add(staker.rewardsEarned);\r\n                staker.rewardsEarned = 0;\r\n                staker.lastClaimTime = block.timestamp;\r\n                staker.lastRewardUpdateTime = block.timestamp;\r\n            }\r\n        }\r\n        uint256 balance = address(this).balance;\r\n        if (totalReward > 0 && balance >= totalReward && activateSendTeam){\r\n            calibrateFundArray(totalReward);\r\n            payable(teamWallet).transfer(totalReward);\r\n        }\r\n    }\r\n\r\n    function getStakersArray() public view returns (address[] memory) {\r\n        return stakerAddresses;\r\n    }\r\n\r\n    function getFundDepositsArray() public view returns (Funds[] memory) {\r\n        return fundDeposits;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    function calibrateFundArray(uint256 amount) private {\r\n        uint256 rewardLeftToClaim = amount;\r\n        for (uint256 i = 0; i < fundDeposits.length && rewardLeftToClaim > 0; i++) {\r\n            if (fundDeposits[i].amount == 0) {\r\n                continue;\r\n            }\r\n            if (fundDeposits[i].amount <= rewardLeftToClaim) {\r\n                rewardLeftToClaim = rewardLeftToClaim.sub(fundDeposits[i].amount);\r\n                delete fundDeposits[i];\r\n            } else {\r\n                fundDeposits[i].amount = fundDeposits[i].amount.sub(rewardLeftToClaim);\r\n                rewardLeftToClaim = 0;\r\n            }\r\n        }\r\n        if (rewardLeftToClaim > 0 && consolidatedFunds > 0) {\r\n            if (consolidatedFunds <= rewardLeftToClaim) {\r\n                rewardLeftToClaim = rewardLeftToClaim.sub(consolidatedFunds);\r\n                consolidatedFunds = 0;\r\n            } else {\r\n                consolidatedFunds = consolidatedFunds.sub(rewardLeftToClaim);\r\n                rewardLeftToClaim = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function ownsActiveNFT(address _user) public view returns (bool) {\r\n        for (uint256 i = 0; i < lockSubNFT.length; i++) {\r\n            if (lockSubNFT[i].instance.getHasValidKey(_user)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function ownsActiveNFTList(address _user) public view returns (address[] memory) {\r\n        uint256 activeCount = 0;\r\n        for (uint256 i = 0; i < lockSubNFT.length; i++) {\r\n            if (lockSubNFT[i].instance.getHasValidKey(_user)) {\r\n                activeCount++;\r\n            }\r\n        }\r\n        address[] memory activeLockersAddress = new address[](activeCount);\r\n\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < lockSubNFT.length; i++) {\r\n            if (lockSubNFT[i].instance.getHasValidKey(_user)) {\r\n                activeLockersAddress[j] = address(lockSubNFT[i].nft);\r\n                j++;\r\n            }\r\n        }\r\n\r\n        return activeLockersAddress;\r\n    }\r\n\r\n    function cleanLockers() external onlyRewardsProvider {\r\n        delete lockSubNFT;\r\n    }\r\n\r\n    function setSubscriptionLockers(address[] calldata _lockers) external onlyRewardsProvider {\r\n        for (uint i = 0; i < _lockers.length; i++) {\r\n            address currentLocker = _lockers[i];\r\n            Lockers memory lock;\r\n            lock.instance = IPublicLockV13(currentLocker);\r\n            lock.nft = IERC721(currentLocker);\r\n            lockSubNFT.push(lock);\r\n        }\r\n    }\r\n\r\n    function enableContract(bool _c, bool _s) external onlyRewardsProvider {\r\n        enableClaim = _c;\r\n        enableStake = _s;\r\n    }\r\n\r\n    function setTotalStakedAmount(uint256 _amount) external onlyRewardsProvider {\r\n        totalStakedAmount = _amount;\r\n    }\r\n\r\n    function setRewardsProvider(address _provider) external onlyRewardsProvider {\r\n        rewardsProvider = _provider;\r\n    }\r\n\r\n    function setOwner(address _owner) external onlyRewardsProvider {\r\n        owner = _owner;\r\n    }\r\n\r\n    function setMaxStakeAmount(uint256 _amount) external onlyRewardsProvider {\r\n        maxStakeAmount = _amount;\r\n    }\r\n\r\n    function setMinClaimAmount(uint256 _amount) external onlyRewardsProvider {\r\n        minClaimAmount = _amount;\r\n    }\r\n\r\n    function setStakeWaitTime(uint256 _time) external onlyRewardsProvider {\r\n        stakeWaitTime = _time;\r\n    }\r\n\r\n    function setClaimInterval(uint256 _interval) external onlyRewardsProvider {\r\n        claimInterval = _interval;\r\n    }\r\n\r\n    function setTimeElapsedFactor(uint256 _time) external onlyRewardsProvider {\r\n        timeElapsedFactor = _time;\r\n    }\r\n\r\n    function setMalusNoSubscription(uint256 _malus) external onlyRewardsProvider {\r\n        malusNoSubscription = _malus;\r\n    }\r\n\r\n    function setRewardResetInterval(uint256 _reset) external onlyRewardsProvider {\r\n        rewardResetInterval = _reset;\r\n    }\r\n\r\n    function setTotalDistributed(uint256 _t) external onlyRewardsProvider {\r\n        totalDistributed = _t;\r\n    }\r\n\r\n    function setActivateSendTeam(bool _a) external onlyRewardsProvider {\r\n        activateSendTeam = _a;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"activateSendTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanLockers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consolidatedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_c\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_s\",\"type\":\"bool\"}],\"name\":\"enableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDepositsArray\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"}],\"internalType\":\"struct RavenFundStaking.Funds[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakersArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAvailableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockSubNFT\",\"outputs\":[{\"internalType\":\"contract IPublicLockV13\",\"name\":\"instance\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"malusNoSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ownsActiveNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ownsActiveNFTList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"previewStakerRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddress\",\"type\":\"address\"}],\"name\":\"reasonClaim\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardResetInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_a\",\"type\":\"bool\"}],\"name\":\"setActivateSendTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"setClaimInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_malus\",\"type\":\"uint256\"}],\"name\":\"setMalusNoSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinClaimAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reset\",\"type\":\"uint256\"}],\"name\":\"setRewardResetInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"setRewardsProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setStakeWaitTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lockers\",\"type\":\"address[]\"}],\"name\":\"setSubscriptionLockers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setTimeElapsedFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"setTotalDistributed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTotalStakedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeWaitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyArray\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeElapsedFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexStop\",\"type\":\"uint256\"}],\"name\":\"unClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RavenFundStaking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000043af0944b34ad466dcea7fc8f77aafc6a4ec70fa0000000000000000000000002604ac3e76d34728e2d8b2878ebaaa1936989b000000000000000000000000008892c1843e632b9649e0cc8ad09e26c0198f7e30", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://463e61b072c33ed4a9a28e4c1105f37aaf3388e461b4c09d9521770877557b3b"}