{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Address {\r\n   \r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20Permit {\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract LPYield is Ownable, ReentrancyGuard {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    bool public isInitialized;\r\n    uint256 public duration;\r\n    uint256 public slot;\r\n    bool public hasUserLimit;\r\n    uint256 public poolLimitPerUser;\r\n    uint256 public startBlock;\r\n    uint256 public bonusEndBlock;\r\n    address public walletA;\r\n    uint256 private constant  MIN_SLOT = 1;\r\n    uint256 private constant  MAX_SLOT = 60 * 60 * 24;\r\n    uint256 private constant  DAY_LENGTH = 60 * 60 * 24;\r\n    uint256 private constant  MAX_INT = type(uint256).max;\r\n    address stakingToken;\r\n    address rewardsToken;\r\n    uint256 private totalEarnedTokenDeposed;\r\n    struct Lockup {\r\n        uint8 stakeType;\r\n        uint256 duration;\r\n        uint256 depositFee;\r\n        uint256 withdrawFee;\r\n        uint256 rate;\r\n        uint256 lastRewardBlock;\r\n        uint256 totalStaked;\r\n        uint256 totalEarned;\r\n        uint256 totalCompounded;\r\n        uint256 totalWithdrawn;\r\n        bool depositFeeReverse;\r\n        bool withdrawFeeReverse;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 lastRewardBlock;\r\n        uint256 totalStaked;\r\n        uint256 totalEarned;\r\n        uint256 totalCompounded;\r\n        uint256 totalWithdrawn;\r\n    }\r\n\r\n    struct Stake {\r\n        uint8 stakeType;\r\n        uint256 duration;\r\n        uint256 end;\r\n        uint256 lastRewardBlock;\r\n        uint256 staked;\r\n        uint256 earned;\r\n        uint256 compounded;\r\n        uint256 withdrawn;\r\n    }\r\n\r\n    uint256 constant MAX_STAKES = 2048;\r\n\r\n    Lockup[] public lockups;\r\n    mapping(address => Stake[]) public userStakes;\r\n    mapping(address => mapping(uint8 => UserInfo)) public userStaked;\r\n\r\n    event Deposit(address indexed user, uint256 stakeType, uint256 amount, uint256 depositFee, bool depositFeeReverse, uint256 fee);\r\n    event Withdraw(address indexed user, uint256 stakeType, uint256 amount, uint256 depositFee, bool depositFeeReverse, uint256 fee);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n    event AdminTokenRecovered(address tokenRecovered, uint256 amount);\r\n\r\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\r\n    event YieldUpdated(uint8 _type, uint256 _duration, uint256 _fee0, uint256 _fee1, uint256 _rate, bool _depositFeeReverse, bool _withdrawFeeReverse);\r\n    event NewPoolLimit(bool hasUserLimit, uint256 poolLimitPerUser);\r\n    event RewardsStop(uint256 blockNumber);\r\n    event DurationUpdated(uint256 duration);\r\n\r\n    event SetFeeAddr(\r\n        address _walletA\r\n    );\r\n    function configuration(\r\n        address _stakingToken,\r\n        address _rewardsToken,\r\n        uint256 _slot,\r\n        uint256 _duration\r\n    ) external onlyOwner {\r\n        require(!isInitialized, \"Already initialized\");\r\n        require(_slot >= MIN_SLOT && _slot <= MAX_SLOT, \"Incorrect slot!\");\r\n        require((DAY_LENGTH / _slot) * _slot == DAY_LENGTH, \"Incorrect slot!\");\r\n        require(_duration > 0, \"Incorrect duration!\");\r\n\r\n        slot = _slot;\r\n        duration = _duration;\r\n        isInitialized = true;\r\n        stakingToken = _stakingToken;\r\n        rewardsToken = _rewardsToken;\r\n        walletA = msg.sender;\r\n\r\n    }\r\n    function deposit(uint256 _amount, uint8 _stakeType) external nonReentrant {\r\n        require(isInitialized, \"Not initialized\");\r\n        require(startBlock > 0, \"Pool not started\");\r\n        require(_amount > 0, \"Amount should be greater than 0\");\r\n        require(_stakeType < lockups.length, \"Invalid stake type\");\r\n        UserInfo storage user = userStaked[msg.sender][_stakeType];\r\n        Lockup storage lockup = lockups[_stakeType];\r\n        _calcUserLockupReward(_stakeType);\r\n        uint256 beforeAmount = IERC20(stakingToken).balanceOf(address(this));\r\n        IERC20(stakingToken).safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n        uint256 afterAmount = IERC20(stakingToken).balanceOf(address(this));\r\n        uint256 realAmount = afterAmount.sub(beforeAmount);\r\n\r\n        if (hasUserLimit) {\r\n            require(\r\n                realAmount.add(user.totalStaked) <= poolLimitPerUser,\r\n                \"User amount above limit\"\r\n            );\r\n        }\r\n        uint256 fee;\r\n        if (lockup.depositFee > 0) {\r\n            fee = realAmount.mul(lockup.depositFee).div(10000);\r\n            if (fee > 0) {\r\n                if(lockup.depositFeeReverse == false){\r\n                    IERC20(stakingToken).safeTransfer(walletA, fee);\r\n                    realAmount = realAmount.sub(fee);\r\n                } else {\r\n                    realAmount = realAmount.add(fee);\r\n                }\r\n            }\r\n        }\r\n\r\n        _addStake(_stakeType, msg.sender, lockup.duration, realAmount);\r\n\r\n        user.totalStaked = user.totalStaked.add(realAmount);\r\n        lockup.totalStaked = lockup.totalStaked.add(realAmount);\r\n\r\n        emit Deposit(msg.sender, _stakeType, realAmount, lockup.depositFee, lockup.depositFeeReverse, fee);\r\n    }\r\n    function _addStake(uint8 _stakeType, address _account, uint256 _duration, uint256 _amount) internal {\r\n        Stake[] storage stakes = userStakes[_account];\r\n        uint256 end = block.timestamp.add(_duration).div(slot);\r\n        uint256 i = stakes.length;\r\n        require(i < MAX_STAKES, \"Max stakes\");\r\n        stakes.push();\r\n        Stake storage newStake = stakes[i];\r\n        newStake.stakeType = _stakeType;\r\n        newStake.duration = _duration;\r\n        newStake.end = end;\r\n        newStake.staked = _amount;\r\n        newStake.lastRewardBlock = _getSlot();\r\n\r\n    }\r\n\r\n    function withdraw(uint256 _amount, uint8 _stakeType) external nonReentrant {\r\n        require(isInitialized, \"Not initialized\");\r\n        require(startBlock > 0, \"Pool not started\");\r\n        require(_amount > 0, \"Amount should be greator than 0\");\r\n        require(_stakeType < lockups.length, \"Invalid stake type\");\r\n        UserInfo storage user = userStaked[msg.sender][_stakeType];\r\n        Stake[] storage stakes = userStakes[msg.sender];\r\n        Lockup storage lockup = lockups[_stakeType];\r\n        _calcUserLockupReward(_stakeType);\r\n        _calcStakeReward(_stakeType);\r\n        uint256 remained = _amount;\r\n        uint256 pending = 0;\r\n        for (uint256 j = 0; j < stakes.length; j++) {\r\n            Stake storage stake = stakes[j];\r\n            if (stake.stakeType != _stakeType) continue;\r\n            if (stake.staked == 0) continue;\r\n            if (_getSlot() <= stake.end) continue;\r\n            if (remained == 0) break;\r\n\r\n            uint256 _pending = stake.staked;\r\n            if (_pending > remained) {\r\n                _pending = remained;\r\n            }\r\n\r\n            stake.staked = stake.staked.sub(_pending);\r\n            remained = remained.sub(_pending);\r\n            pending = pending.add(_pending);\r\n        }\r\n\r\n        if (pending > 0) {\r\n            require(availableTokens() >= pending, \"Insufficient tokens\");\r\n\r\n            lockup.totalStaked = lockup.totalStaked.sub(pending);\r\n            user.totalStaked = user.totalStaked.sub(pending);\r\n\r\n            uint256 fee;\r\n            if (lockup.withdrawFee > 0) {\r\n                fee = pending.mul(lockup.withdrawFee).div(10000);\r\n                if(fee > 0){\r\n                    if(lockup.withdrawFeeReverse == false){\r\n                        IERC20(stakingToken).safeTransfer(walletA, fee);\r\n                        pending = pending.sub(fee);\r\n                    } else {\r\n                        pending = pending.add(fee);\r\n                    }\r\n                }\r\n            }\r\n            IERC20(stakingToken).safeTransfer(address(msg.sender), pending);\r\n            emit Withdraw(msg.sender, _stakeType, pending, lockup.withdrawFee, lockup.withdrawFeeReverse, fee);\r\n        }\r\n\r\n    }\r\n\r\n    function _claimReward(uint8 _stakeType, uint256 _amount) internal returns (uint256){\r\n        require(isInitialized, \"Not initialized\");\r\n        require(startBlock > 0, \"Pool not started\");\r\n        require(_amount > 0, \"Amount should be greator than 0\");\r\n        require(_stakeType < lockups.length, \"Invalid stake type\");\r\n\r\n        UserInfo storage user = userStaked[msg.sender][_stakeType];\r\n        Stake[] storage stakes = userStakes[msg.sender];\r\n        Lockup storage lockup = lockups[_stakeType];\r\n        _calcUserLockupReward(_stakeType);\r\n        _calcStakeReward(_stakeType);\r\n\r\n        uint256 remained = _amount;\r\n        uint256 pending = 0;\r\n\r\n        for (uint256 j = 0; j < stakes.length; j++) {\r\n            Stake storage stake = stakes[j];\r\n            if (stake.stakeType != _stakeType) continue;\r\n            if (_getSlot() <= stake.end) continue;\r\n            uint256 _pending = stake.earned.sub(stake.compounded).sub(stake.withdrawn);\r\n            if (_pending > remained) {\r\n                _pending = remained;\r\n            }\r\n            remained = remained.sub(_pending);\r\n            pending = pending.add(_pending);\r\n            stake.withdrawn = stake.withdrawn + _pending;\r\n            if (remained == 0) {\r\n                break;\r\n            }\r\n\r\n        }\r\n\r\n        if (pending > 0) {\r\n            require(availableRewardTokens() >= pending, \"Insufficient reward tokens\");\r\n            IERC20(rewardsToken).safeTransfer(address(msg.sender), pending);\r\n\r\n            lockup.totalWithdrawn = lockup.totalWithdrawn + pending;\r\n            user.totalWithdrawn = user.totalWithdrawn + pending;\r\n\r\n            emit Withdraw(msg.sender, _stakeType, pending, lockup.withdrawFee, lockup.withdrawFeeReverse, 0);\r\n\r\n        }\r\n\r\n        return pending;\r\n    }\r\n    \r\n    function claimReward(uint8 _stakeType) external payable nonReentrant {\r\n        require(isInitialized, \"Not initialized\");\r\n        require(startBlock > 0, \"Pool not started\");\r\n        require(_stakeType < lockups.length, \"Invalid stake type\");\r\n\r\n        _claimReward(_stakeType, MAX_INT);\r\n    }\r\n\r\n    function claimReward(uint8 _stakeType, uint256 _amount) external payable nonReentrant {\r\n        require(isInitialized, \"Not initialized\");\r\n        require(startBlock > 0, \"Pool not started\");\r\n        require(_stakeType < lockups.length, \"Invalid stake type\");\r\n\r\n        _claimReward(_stakeType, _amount);\r\n    }\r\n\r\n    function _calcUserLockupReward(uint8 _stakeType) internal {\r\n        require(isInitialized, \"Not initialized\");\r\n        require(startBlock > 0, \"Pool not started\");\r\n        require(_stakeType < lockups.length, \"Invalid stake type\");\r\n\r\n        Lockup storage lockup = lockups[_stakeType];\r\n        UserInfo storage user = userStaked[msg.sender][_stakeType];\r\n        uint256 currentSlot = _getSlot();\r\n        uint256 rate;\r\n        uint256 pending;\r\n\r\n        rate = _getRate(lockup.rate).mul(_getMultiplier(lockup.lastRewardBlock, currentSlot));\r\n        if(lockup.totalStaked == 0)\r\n            pending = 0;\r\n        else        \r\n            pending = rate.div(10 ** 24);\r\n        lockup.totalEarned = lockup.totalEarned + pending;\r\n        lockup.lastRewardBlock = currentSlot;\r\n        rate = _getRate(lockup.rate).mul(_getMultiplier(user.lastRewardBlock, currentSlot));\r\n        if(lockup.totalStaked == 0)\r\n            pending = 0;\r\n        else\r\n            pending = rate.mul(user.totalStaked).div(lockup.totalStaked).div(10 ** 24);\r\n        user.totalEarned = user.totalEarned + pending;\r\n        user.lastRewardBlock = currentSlot;\r\n\r\n    }\r\n\r\n    function _calcStakeReward(uint8 _stakeType) internal {\r\n        require(isInitialized, \"Not initialized\");\r\n        require(startBlock > 0, \"Pool not started\");\r\n        require(_stakeType < lockups.length, \"Invalid stake type\");\r\n\r\n        Stake[] storage stakes = userStakes[msg.sender];\r\n        Lockup storage lockup = lockups[_stakeType];\r\n\r\n        uint256 currentSlot = _getSlot();\r\n        uint256 rate;\r\n        uint256 pending;\r\n\r\n        for (uint256 j = 0; j < stakes.length; j++) {\r\n            Stake storage stake = stakes[j];\r\n            if (stake.stakeType != _stakeType) continue;\r\n            if (stake.staked == 0) continue;\r\n\r\n            rate = _getRate(lockup.rate).mul(_getMultiplier(stake.lastRewardBlock, currentSlot));\r\n            if(lockup.totalStaked == 0)\r\n                pending = 0;\r\n            else    \r\n                pending = rate.mul(stake.staked).div(lockup.totalStaked).div(10 ** 24);\r\n            stake.earned = stake.earned.add(pending);\r\n            stake.lastRewardBlock = currentSlot;\r\n        }\r\n\r\n    }\r\n\r\n    function emergencyWithdraw(uint8 _stakeType) external nonReentrant {\r\n        require(isInitialized, \"Not initialized\");\r\n        require(startBlock > 0, \"Pool not started\");\r\n        require(_stakeType < lockups.length, \"Invalid stake type\");\r\n\r\n        UserInfo storage user = userStaked[msg.sender][_stakeType];\r\n        Stake[] storage stakes = userStakes[msg.sender];\r\n        Lockup storage lockup = lockups[_stakeType];\r\n\r\n        _calcUserLockupReward(_stakeType);\r\n        _calcStakeReward(_stakeType);\r\n\r\n        uint256 amountToTransfer = 0;\r\n        uint256 totalStaked = 0;\r\n        uint256 totalCompounded = 0;\r\n        uint256 totalEarned = 0;\r\n\r\n        for (uint256 j = 0; j < stakes.length; j++) {\r\n            Stake storage stake = stakes[j];\r\n            if (stake.stakeType != _stakeType) continue;\r\n            if (stake.staked == 0) continue;\r\n            if (_getSlot() > stake.end) continue;\r\n\r\n            amountToTransfer = amountToTransfer.add(stake.staked).sub(stake.compounded);\r\n            totalStaked = totalStaked.add(stake.staked);\r\n            totalCompounded = totalCompounded.add(stake.compounded);\r\n            totalEarned = totalEarned.add(stake.earned);\r\n\r\n            stake.staked = 0;\r\n            stake.earned = 0;\r\n            stake.withdrawn = 0;\r\n            stake.compounded = 0;\r\n        }\r\n\r\n        if (amountToTransfer > 0) {\r\n\r\n            lockup.totalStaked = lockup.totalStaked.sub(totalStaked);\r\n            lockup.totalEarned = lockup.totalEarned.sub(totalEarned);\r\n            lockup.totalCompounded = lockup.totalCompounded.sub(totalCompounded);\r\n\r\n            user.totalStaked = user.totalStaked.sub(totalStaked);\r\n            user.totalEarned = user.totalEarned.sub(totalEarned);\r\n            user.totalCompounded = user.totalCompounded.sub(totalCompounded);\r\n\r\n            IERC20(stakingToken).safeTransfer(address(msg.sender), amountToTransfer);\r\n        }\r\n\r\n        emit EmergencyWithdraw(msg.sender, amountToTransfer);\r\n    }\r\n\r\n    function rewardPerStakeType(uint8 _stakeType) public view returns (uint256) {\r\n        if (_stakeType >= lockups.length) return 0;\r\n\r\n        return lockups[_stakeType].rate;\r\n    }\r\n\r\n    function availableRewardTokens() public view returns (uint256) {\r\n        uint256 _amount = IERC20(rewardsToken).balanceOf(address(this));\r\n        uint256 reserved;\r\n        if (_amount > reserved)\r\n            return _amount.sub(reserved);\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    function availableTokens() public view returns (uint256) {\r\n\r\n        uint256 _amount = IERC20(stakingToken).balanceOf(address(this));\r\n\r\n        uint256 reserved;\r\n\r\n        if (_amount > reserved)\r\n            return _amount.sub(reserved);\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    function userInfo(uint8 _stakeType, address _account) public view returns (uint256 amount, uint256 available, uint256 locked) {\r\n        Stake[] storage stakes = userStakes[_account];\r\n\r\n        for (uint256 i = 0; i < stakes.length; i++) {\r\n            Stake storage stake = stakes[i];\r\n\r\n            if (stake.stakeType != _stakeType) continue;\r\n            if (stake.staked == 0) continue;\r\n\r\n            amount = amount.add(stake.staked);\r\n            if (_getSlot() > stake.end) {\r\n                available = available.add(stake.staked);\r\n            } else {\r\n                locked = locked.add(stake.staked);\r\n            }\r\n        }\r\n    }\r\n\r\n    function pendingReward(address _account, uint8 _stakeType) external view returns (uint256) {\r\n        if (_stakeType >= lockups.length) return 0;\r\n        if (startBlock == 0) return 0;\r\n\r\n        Stake[] storage stakes = userStakes[_account];\r\n        Lockup storage lockup = lockups[_stakeType];\r\n\r\n        if (lockup.totalStaked == 0) return 0;\r\n\r\n        uint256 pending = 0;\r\n        for (uint256 i = 0; i < stakes.length; i++) {\r\n            Stake storage stake = stakes[i];\r\n            if (stake.stakeType != _stakeType) continue;\r\n            pending = pending.add(stake.earned - stake.compounded - stake.withdrawn);\r\n            uint256 rate = _getRate(lockup.rate).mul(_getMultiplier(stake.lastRewardBlock, _getSlot()));\r\n            uint256 reward = stake.staked.mul(rate).div(lockup.totalStaked).div(10 ** 24);\r\n            pending = pending.add(reward);\r\n\r\n        }\r\n        return pending;\r\n    }\r\n\r\n    function countStakes(address _account, uint8 _stakeType) external view returns (uint256) {\r\n        if (_stakeType >= lockups.length) return 0;\r\n        if (startBlock == 0) return 0;\r\n\r\n        Stake[] storage stakes = userStakes[_account];\r\n\r\n        return stakes.length;\r\n    }\r\n\r\n\r\n    function pendingUnlockReward(address _account, uint8 _stakeType) external view returns (uint256 pending, uint256 available, uint256 locked) {\r\n        if (_stakeType >= lockups.length) return (0, 0, 0);\r\n        if (startBlock == 0) return (0, 0, 0);\r\n\r\n        Stake[] storage stakes = userStakes[_account];\r\n        Lockup storage lockup = lockups[_stakeType];\r\n\r\n        if (lockup.totalStaked == 0) return (0, 0, 0);\r\n\r\n        for (uint256 i = 0; i < stakes.length; i++) {\r\n            Stake storage stake = stakes[i];\r\n            if (stake.stakeType != _stakeType) continue;\r\n\r\n            pending = pending.add(stake.earned - stake.compounded - stake.withdrawn);\r\n            if (_getSlot() <= stake.end) {\r\n                locked = locked.add(stake.earned - stake.compounded - stake.withdrawn);\r\n            }else{\r\n                available = available.add(stake.earned - stake.compounded - stake.withdrawn);\r\n            }\r\n            uint256 rate = _getRate(lockup.rate).mul(_getMultiplier(stake.lastRewardBlock, _getSlot()));\r\n            uint256 reward = stake.staked.mul(rate).div(lockup.totalStaked).div(10 ** 24);\r\n            pending = pending.add(reward);\r\n            if (_getSlot() <= stake.end) {\r\n                locked = locked.add(reward);\r\n            }else{\r\n                available = available.add(reward);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function pendingUnlock(address _account, uint8 _stakeType) external view returns (uint256 near, uint256 last) {\r\n        if (_stakeType >= lockups.length) return (0, 0);\r\n        if (startBlock == 0) return (0, 0);\r\n\r\n        Stake[] storage stakes = userStakes[_account];\r\n        Lockup storage lockup = lockups[_stakeType];\r\n\r\n        if (lockup.totalStaked == 0) return (0, 0);\r\n        \r\n        last = 0;\r\n        near = MAX_INT;\r\n        for (uint256 i = 0; i < stakes.length; i++) {\r\n            Stake storage stake = stakes[i];\r\n            if (stake.stakeType != _stakeType) continue;\r\n            if (stake.staked == 0) continue;\r\n\r\n            if(stake.end > last) last = stake.end;\r\n            if(stake.end < near) near = stake.end;\r\n\r\n        }\r\n    }\r\n\r\n    function injectingRewards(uint _amount) external onlyOwner nonReentrant {\r\n        require(_amount > 0);\r\n\r\n        uint256 beforeAmt = IERC20(rewardsToken).balanceOf(address(this));\r\n        IERC20(rewardsToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n        uint256 afterAmt = IERC20(rewardsToken).balanceOf(address(this));\r\n\r\n        totalEarnedTokenDeposed = totalEarnedTokenDeposed.add(afterAmt).sub(beforeAmt);\r\n    }\r\n\r\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\r\n        uint256 reserved;\r\n\r\n        if (_tokenAddress == stakingToken) {\r\n            for (uint256 j = 0; j < lockups.length; j++) {\r\n                Lockup storage lockup = lockups[j];\r\n                reserved = reserved.add(lockup.totalStaked);\r\n            }\r\n        }\r\n\r\n        if (reserved > 0) {\r\n            uint256 tokenBal = IERC20(_tokenAddress).balanceOf(address(this));\r\n            require(_tokenAmount <= tokenBal.sub(reserved), \"Insufficient balance\");\r\n        }\r\n\r\n        if (_tokenAddress == address(0x0)) {\r\n            payable(msg.sender).transfer(_tokenAmount);\r\n        } else {\r\n            IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\r\n        }\r\n\r\n        emit AdminTokenRecovered(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    function openYield() external onlyOwner {\r\n        require(startBlock == 0, \"Yield was already started\");\r\n\r\n        startBlock = _getSlot().add(1);\r\n        bonusEndBlock = startBlock.add(duration.mul(DAY_LENGTH / slot));\r\n\r\n        emit NewStartAndEndBlocks(startBlock, bonusEndBlock);\r\n    }\r\n\r\n    function stopReward() external onlyOwner {\r\n        bonusEndBlock = _getSlot();\r\n    }\r\n\r\n    function updatePoolLimitPerUser(bool _hasUserLimit, uint256 _poolLimitPerUser) external onlyOwner {\r\n        hasUserLimit = _hasUserLimit;\r\n        if (_hasUserLimit) {\r\n            poolLimitPerUser = _poolLimitPerUser;\r\n        } else {\r\n            poolLimitPerUser = 0;\r\n        }\r\n        emit NewPoolLimit(hasUserLimit, poolLimitPerUser);\r\n    }\r\n\r\n    function updateYield(uint8 _stakeType, uint256 _duration, uint256 _depositFee, uint256 _withdrawFee, uint256 _rate, bool _depositFeeReverse, bool _withdrawFeeReverse) external onlyOwner {\r\n        require(_stakeType < lockups.length, \"Lockup Not found\");\r\n        require(_depositFee < 2000, \"Invalid deposit fee\");\r\n        require(_withdrawFee < 2000, \"Invalid withdraw fee\");\r\n\r\n        Lockup storage _lockup = lockups[_stakeType];\r\n\r\n        if(_lockup.totalStaked == 0){\r\n            _lockup.duration = _duration;\r\n            _lockup.rate = _rate;\r\n        }\r\n\r\n        _lockup.depositFee = _depositFee;\r\n        _lockup.withdrawFee = _withdrawFee;\r\n        _lockup.depositFeeReverse = _depositFeeReverse;\r\n        _lockup.withdrawFeeReverse = _withdrawFeeReverse;\r\n\r\n        emit YieldUpdated(_stakeType, _lockup.duration, _depositFee, _withdrawFee, _lockup.rate, _depositFeeReverse, _withdrawFeeReverse);\r\n    }\r\n\r\n    function setUpYield(uint256 _duration, uint256 _depositFee, uint256 _withdrawFee, uint256 _rate, bool _depositFeeReverse, bool _withdrawFeeReverse) external onlyOwner {\r\n        require(_depositFee < 2000, \"Invalid deposit fee\");\r\n        require(_withdrawFee < 2000, \"Invalid withdraw fee\");\r\n        lockups.push();\r\n        Lockup storage _lockup = lockups[lockups.length - 1];\r\n        _lockup.duration = _duration;\r\n        _lockup.depositFee = _depositFee;\r\n        _lockup.withdrawFee = _withdrawFee;\r\n        _lockup.rate = _rate;\r\n        _lockup.depositFeeReverse = _depositFeeReverse;\r\n        _lockup.withdrawFeeReverse = _withdrawFeeReverse;\r\n\r\n        emit YieldUpdated(uint8(lockups.length - 1), _duration, _depositFee, _withdrawFee, _rate, _depositFeeReverse, _withdrawFeeReverse);\r\n    }\r\n\r\n    function setDuration(uint256 _duration) external onlyOwner {\r\n        require(startBlock == 0, \"Yield was already started\");\r\n        require(_duration >= 30, \"lower limit reached\");\r\n\r\n        duration = _duration;\r\n        emit DurationUpdated(_duration);\r\n    }\r\n\r\n    function setConfig(\r\n        address _feeAddr\r\n    ) external onlyOwner {\r\n        require(_feeAddr != address(0x0), \"Invalid Address\");\r\n        walletA = _feeAddr;\r\n\r\n        emit SetFeeAddr(_feeAddr);\r\n    }\r\n\r\n    function _getRate(uint256 _rate)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n\r\n        uint256 rate = _rate.mul(10 ** 24).div(DAY_LENGTH / slot);\r\n        return rate;\r\n\r\n    }\r\n\r\n    function _getMultiplier(uint256 _from, uint256 _to)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        if (_from >= bonusEndBlock) {\r\n            return 0;\r\n        } else if (_to <= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else {\r\n            return bonusEndBlock.sub(_from);\r\n        }\r\n    }\r\n\r\n    function _getSlot()\r\n    internal\r\n    view\r\n    returns (uint256 _slot)\r\n    {\r\n        _slot = block.timestamp.div(slot);\r\n    }\r\n\r\n\r\nreceive() external payable {}\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"depositFeeReverse\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"DurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasUserLimit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"NewPoolLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_walletA\",\"type\":\"address\"}],\"name\":\"SetFeeAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"depositFeeReverse\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_depositFeeReverse\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_withdrawFeeReverse\",\"type\":\"bool\"}],\"name\":\"YieldUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableRewardTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"configuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"countStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasUserLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"injectingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockups\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCompounded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"depositFeeReverse\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawFeeReverse\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"pendingUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"near\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"pendingUnlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLimitPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"rewardPerStakeType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddr\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_depositFeeReverse\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withdrawFeeReverse\",\"type\":\"bool\"}],\"name\":\"setUpYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasUserLimit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"updatePoolLimitPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_depositFeeReverse\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withdrawFeeReverse\",\"type\":\"bool\"}],\"name\":\"updateYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"userStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCompounded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compounded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_stakeType\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LPYield", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2add723605119631d12c4e23b859c8af9dafcba3631fe6c13a9e049a2dbbea70"}