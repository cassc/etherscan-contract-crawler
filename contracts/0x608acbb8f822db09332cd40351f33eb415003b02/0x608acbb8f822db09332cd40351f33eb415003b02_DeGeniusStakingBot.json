{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DeGeniusStaking.sol\": {\r\n      \"content\": \"/**\\n****************************************************\\n*********** INTERACT WITH THIS CONTRACT ************ \\n***************** FROM TELEGRAM AT ***************** \\n********* \\\"https://t.me/DegeniusStakingBot\\\" ********\\n****************************************************\\n\\n\\n* DeGenius Staking Smart Contract\\n *\\n * Features:\\n * - Staking tokens with duration-based early withdrawal penalties.\\n * - Claiming rewards with duration-based reward claim penalties.\\n\\n * - Penalties are as follows:\\n *   - 0-1 week: 30% penalty\\n *   - 1-2 weeks: 15% penalty\\n *   - 2-3 weeks: 7.5% penalty\\n *   - More than 3 weeks: No penalty\\n  ______________________________________________________________\\n |***Voted on by community \\\"https://t.me/c/1924245293/44567\\\".***|\\n  --------------------------------------------------------------\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ncontract DeGeniusStakingBot {\\n    IERC20 public immutable stakingToken;\\n    IERC20 public immutable rewardsToken;\\n    address public owner;\\n    address public penaltyRecipient;\\n    bool public paused;\\n    uint256 public duration;\\n    uint256 public finishAt;\\n    uint256 public updatedAt;\\n    uint256 public rewardRate;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => uint256) public userWeightedDepositTime;\\n    mapping(address => uint256) public userTotalDeposited;\\n\\n    error AmountZero();\\n    error NothingToClaim();\\n    error RewardsNotFinished();\\n    error InsufficientBalance();\\n    error RewardRateZero();\\n    error Paused();\\n\\n    event Stake(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event RewardClaimed(address indexed user, uint256 amount);\\n    event Compound(address indexed user, uint256 amount);\\n    \\n    constructor(address _stakingToken, address _rewardToken) {\\n        owner = msg.sender;\\n        stakingToken = IERC20(_stakingToken);\\n        rewardsToken = IERC20(_rewardToken);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"not authorized\\\");\\n        _;\\n    }\\n\\n    modifier updateReward(address _account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        updatedAt = lastTimeRewardApplicable();\\n        if (_account != address(0)) {\\n            rewards[_account] = earned(_account);\\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return _min(finishAt, block.timestamp);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) /\\n            totalSupply;\\n    }\\n\\n    function stake(uint256 _amount) external updateReward(msg.sender) {\\n        if(paused) revert Paused();\\n        if(_amount == 0) revert AmountZero();\\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\\n        uint256 previousDepositAmount = userTotalDeposited[msg.sender];\\n        uint256 newTotalDeposit = previousDepositAmount + _amount;\\n        userWeightedDepositTime[msg.sender] = \\n            ((userWeightedDepositTime[msg.sender] * previousDepositAmount) + (block.timestamp * _amount)) / newTotalDeposit;\\n        userTotalDeposited[msg.sender] = newTotalDeposit;\\n        balanceOf[msg.sender] += _amount;\\n        totalSupply += _amount;\\n        emit Stake(msg.sender, _amount);\\n    }\\n\\n\\n    function withdraw(uint256 _amount) external updateReward(msg.sender) {\\n        if(paused) revert Paused();\\n        if(_amount == 0) revert AmountZero();\\n        uint256 penalty = calculatePenalty(msg.sender, _amount);\\n        uint256 amountAfterPenalty = _amount - penalty;\\n        balanceOf[msg.sender] -= _amount;\\n        totalSupply -= _amount;\\n        stakingToken.transfer(msg.sender, amountAfterPenalty);\\n        if(penalty > 0) {\\n            uint256 recipientPenalty = (penalty * 30) / 100; // 30% of the penalty\\n            stakingToken.transfer(penaltyRecipient, recipientPenalty);\\n        }\\n        emit Withdraw(msg.sender, amountAfterPenalty);\\n    }\\n\\n\\n    function compound() external updateReward(msg.sender) {\\n        if(paused) revert Paused();\\n        uint256 amount = rewards[msg.sender];\\n        if (amount == 0) revert NothingToClaim();\\n        rewards[msg.sender] = 0;\\n        balanceOf[msg.sender] += amount;\\n        totalSupply += amount;\\n        emit Compound(msg.sender, amount);\\n    }\\n\\n    function earned(address _account) public view returns (uint256) {\\n        return\\n            ((balanceOf[_account] *\\n                (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18) +\\n            rewards[_account];\\n    }\\n\\n    function claimReward() external updateReward(msg.sender) {\\n        if(paused) revert Paused();\\n        uint256 reward = rewards[msg.sender];\\n        if (reward == 0) revert NothingToClaim();\\n\\n        uint256 penalty = calculateRewardClaimPenalty(msg.sender, reward);\\n        uint256 rewardAfterPenalty = reward - penalty;\\n\\n        rewards[msg.sender] = 0;\\n        rewardsToken.transfer(msg.sender, rewardAfterPenalty);\\n\\n        if(penalty > 0) {\\n            uint256 recipientPenalty = (penalty * 30) / 100;\\n            rewardsToken.transfer(penaltyRecipient, recipientPenalty);\\n        }\\n\\n        emit RewardClaimed(msg.sender, rewardAfterPenalty);\\n    }\\n\\n\\n    function setRewardsDuration(uint256 _duration) external onlyOwner {\\n        if(finishAt >= block.timestamp) revert RewardsNotFinished();\\n        duration = _duration;\\n    }\\n\\n    function notifyRewardAmount(uint256 _amount) external onlyOwner updateReward(address(0)) {\\n        if (block.timestamp >= finishAt) {\\n            rewardRate = _amount / duration;\\n        } else {\\n            uint256 remainingRewards = (finishAt - block.timestamp) * rewardRate;\\n            rewardRate = (_amount + remainingRewards) / duration;\\n        }\\n        if(rewardRate == 0) revert RewardRateZero();\\n        if(rewardRate * duration > rewardsToken.balanceOf(address(this))) revert InsufficientBalance();\\n        finishAt = block.timestamp + duration;\\n        updatedAt = block.timestamp;\\n    }\\n\\n    function setPaused(bool _paused) external onlyOwner {\\n        paused = _paused;\\n    }\\n\\n    function setPenaltyRecipient(address _penaltyRecipient) external onlyOwner {\\n        penaltyRecipient = _penaltyRecipient;\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"Contract does not accept Ether directly\\\");\\n    }\\n\\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\\n        return x <= y ? x : y;\\n    }\\n\\n    \\n    function calculatePenalty(address _user, uint256 _amount) internal view returns (uint256) {\\n        uint256 stakedDuration = block.timestamp - userWeightedDepositTime[_user];\\n        \\n        // Define the time limits in seconds for 1, 2, and 3 weeks\\n        uint256 oneWeek = 604800; // seconds in one week\\n        uint256 twoWeeks = 1209600; // seconds in two weeks\\n        uint256 threeWeeks = 1814400; // seconds in three weeks\\n\\n        if (stakedDuration >= threeWeeks) {\\n            return 0; // No penalty after 3 weeks\\n        } else if (stakedDuration >= twoWeeks) {\\n            return (_amount * 75) / 1000; // 7.5% penalty\\n        } else if (stakedDuration >= oneWeek) {\\n            return (_amount * 15) / 100; // 15% penalty\\n        } else {\\n            return (_amount * 30) / 100; // 30% penalty for less than 1 week\\n        }\\n    }\\n\\n    function calculateRewardClaimPenalty(address _user, uint256 _reward) internal view returns (uint256) {\\n        uint256 stakedDuration = block.timestamp - userWeightedDepositTime[_user];\\n\\n        // Define the time limits in seconds for 1, 2, and 3 weeks\\n        uint256 oneWeek = 604800; // seconds in one week\\n        uint256 twoWeeks = 1209600; // seconds in two weeks\\n        uint256 threeWeeks = 1814400; // seconds in three weeks\\n\\n        if (stakedDuration >= threeWeeks) {\\n            return 0; // No penalty after 3 weeks\\n        } else if (stakedDuration >= twoWeeks) {\\n            return (_reward * 75) / 1000; // 7.5% penalty\\n        } else if (stakedDuration >= oneWeek) {\\n            return (_reward * 15) / 100; // 15% penalty\\n        } else {\\n            return (_reward * 30) / 100; // 30% penalty for less than 1 week\\n        }\\n    }\\n\\n    \\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardRateZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardsNotFinished\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Compound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_penaltyRecipient\",\"type\":\"address\"}],\"name\":\"setPenaltyRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWeightedDepositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DeGeniusStakingBot", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000003fe85895030ce120e954b98dc1d96a262a9e89000000000000000000000000003fe85895030ce120e954b98dc1d96a262a9e89", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}