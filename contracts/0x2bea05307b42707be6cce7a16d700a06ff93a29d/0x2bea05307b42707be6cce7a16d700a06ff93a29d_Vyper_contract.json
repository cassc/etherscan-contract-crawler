{"SourceCode": "# @version 0.2.15\r\n\"\"\"\r\n@title Liquidity Gauge v3\r\n@author This version was modified starting from Curve Finance's DAO contracts\r\n@license MIT\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\n\r\n\r\ninterface Distributor:\r\n    def futureEpochTimeWrite() -> uint256: nonpayable\r\n    def rate() -> uint256: view\r\n\r\ninterface Controller:\r\n    def period() -> int128: view\r\n    def period_write() -> int128: nonpayable\r\n    def period_timestamp(p: int128) -> uint256: view\r\n    def gauge_relative_weight(addr: address, time: uint256) -> uint256: view\r\n    def voting_escrow() -> address: view\r\n    def checkpoint(): nonpayable\r\n    def checkpoint_gauge(addr: address): nonpayable\r\n\r\ninterface DistributorProxy:\r\n    def distributor() -> address: view\r\n    def controller() -> address: view\r\n    def distributed(user: address, gauge: address) -> uint256: view\r\n\r\ninterface VotingEscrow:\r\n    def user_point_epoch(addr: address) -> uint256: view\r\n    def user_point_history__ts(addr: address, epoch: uint256) -> uint256: view\r\n\r\ninterface ERC20Extended:\r\n    def symbol() -> String[26]: view\r\n\r\n\r\nevent Deposit:\r\n    provider: indexed(address)\r\n    value: uint256\r\n\r\nevent Withdraw:\r\n    provider: indexed(address)\r\n    value: uint256\r\n\r\nevent UpdateLiquidityLimit:\r\n    user: address\r\n    original_balance: uint256\r\n    original_supply: uint256\r\n    working_balance: uint256\r\n    working_supply: uint256\r\n\r\nevent CommitOwnership:\r\n    admin: address\r\n\r\nevent ApplyOwnership:\r\n    admin: address\r\n\r\nevent Transfer:\r\n    _from: indexed(address)\r\n    _to: indexed(address)\r\n    _value: uint256\r\n\r\nevent Approval:\r\n    _owner: indexed(address)\r\n    _spender: indexed(address)\r\n    _value: uint256\r\n\r\n\r\nMAX_REWARDS: constant(uint256) = 8\r\nTOKENLESS_PRODUCTION: constant(uint256) = 40\r\nWEEK: constant(uint256) = 604800\r\nCLAIM_FREQUENCY: constant(uint256) = 3600\r\n\r\ndistributor_proxy: public(address)\r\ndistributor: public(address)\r\nlp_token: public(address)\r\ncontroller: public(address)\r\nvoting_escrow: public(address)\r\nfuture_epoch_time: public(uint256)\r\n\r\nbalanceOf: public(HashMap[address, uint256])\r\ntotalSupply: public(uint256)\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\n\r\nname: public(String[64])\r\nsymbol: public(String[32])\r\n\r\nworking_balances: public(HashMap[address, uint256])\r\nworking_supply: public(uint256)\r\n\r\n# The goal is to be able to calculate \u222b(rate * balance / totalSupply dt) from 0 till checkpoint\r\n# All values are kept in units of being multiplied by 1e18\r\nperiod: public(int128)\r\nperiod_timestamp: public(uint256[100000000000000000000000000000])\r\n\r\n# 1e18 * \u222b(rate(t) / totalSupply(t) dt) from 0 till checkpoint\r\nintegrate_inv_supply: public(uint256[100000000000000000000000000000])  # bump epoch when rate() changes\r\n\r\n# 1e18 * \u222b(rate(t) / totalSupply(t) dt) from (last_action) till checkpoint\r\nintegrate_inv_supply_of: public(HashMap[address, uint256])\r\nintegrate_checkpoint_of: public(HashMap[address, uint256])\r\n\r\n# \u222b(balance * rate(t) / totalSupply(t) dt) from 0 till checkpoint\r\n# Units: rate * t = already number of coins per address to issue\r\nintegrate_fraction: public(HashMap[address, uint256])\r\n\r\ninflation_rate: public(uint256)\r\n\r\n# For tracking external rewards\r\nreward_data: uint256\r\nreward_tokens: public(address[MAX_REWARDS])\r\n\r\n# deposit / withdraw / claim\r\nreward_sigs: bytes32\r\n\r\n# claimant -> default reward receiver\r\nrewards_receiver: public(HashMap[address, address])\r\n\r\n# reward token -> integral\r\nreward_integral: public(HashMap[address, uint256])\r\n\r\n# reward token -> claiming address -> integral\r\nreward_integral_for: public(HashMap[address, HashMap[address, uint256]])\r\n\r\n# user -> [uint128 claimable amount][uint128 claimed amount]\r\nclaim_data: HashMap[address, HashMap[address, uint256]]\r\n\r\nadmin: public(address)\r\nfuture_admin: public(address)  # Can and will be a smart contract\r\nis_killed: public(bool)\r\n\r\n\r\n@external\r\ndef __init__(_lp_token: address, _distributor_proxy: address, _admin: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _lp_token Liquidity Pool contract address\r\n    @param _distributor_proxy DistributorProxy contract address\r\n    @param _admin Admin who can kill the gauge\r\n    \"\"\"\r\n\r\n    symbol: String[26] = ERC20Extended(_lp_token).symbol()\r\n    self.name = concat(symbol, \" Gauge Deposit\")\r\n    self.symbol = concat(symbol, \"-gauge\")\r\n\r\n    distributor: address = DistributorProxy(_distributor_proxy).distributor()\r\n    controller: address = DistributorProxy(_distributor_proxy).controller()\r\n\r\n    self.lp_token = _lp_token\r\n    self.distributor_proxy = _distributor_proxy\r\n    self.admin = _admin\r\n    self.distributor = distributor\r\n    self.controller = controller\r\n    self.voting_escrow = Controller(controller).voting_escrow()\r\n\r\n    self.period_timestamp[0] = block.timestamp\r\n    self.inflation_rate = Distributor(distributor).rate()\r\n    self.future_epoch_time = Distributor(distributor).futureEpochTimeWrite()\r\n\r\n\r\n@view\r\n@external\r\ndef decimals() -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of decimals for this token\r\n    @dev Implemented as a view method to reduce gas costs\r\n    @return uint256 decimal places\r\n    \"\"\"\r\n    return 18\r\n\r\n\r\n@view\r\n@external\r\ndef integrate_checkpoint() -> uint256:\r\n    return self.period_timestamp[self.period]\r\n\r\n\r\n@internal\r\ndef _update_liquidity_limit(addr: address, l: uint256, L: uint256):\r\n    \"\"\"\r\n    @notice Calculate limits which depend on the amount of IDLE token per-user.\r\n            Effectively it calculates working balances to apply amplification\r\n            of IDLE distribution by `distributor`\r\n    @param addr User address\r\n    @param l User's amount of liquidity (LP tokens)\r\n    @param L Total amount of liquidity (LP tokens)\r\n    \"\"\"\r\n    # To be called after totalSupply is updated\r\n    _voting_escrow: address = self.voting_escrow\r\n    voting_balance: uint256 = ERC20(_voting_escrow).balanceOf(addr)\r\n    voting_total: uint256 = ERC20(_voting_escrow).totalSupply()\r\n\r\n    lim: uint256 = l * TOKENLESS_PRODUCTION / 100\r\n    if voting_total > 0:\r\n        lim += L * voting_balance / voting_total * (100 - TOKENLESS_PRODUCTION) / 100\r\n\r\n    lim = min(l, lim)\r\n    old_bal: uint256 = self.working_balances[addr]\r\n    self.working_balances[addr] = lim\r\n    _working_supply: uint256 = self.working_supply + lim - old_bal\r\n    self.working_supply = _working_supply\r\n\r\n    log UpdateLiquidityLimit(addr, l, L, lim, _working_supply)\r\n\r\n\r\n@internal\r\ndef _checkpoint_rewards( _user: address, _total_supply: uint256, _claim: bool, _receiver: address):\r\n    \"\"\"\r\n    @notice Claim pending rewards and checkpoint rewards for a user\r\n    \"\"\"\r\n    # load reward tokens and integrals into memory\r\n    reward_tokens: address[MAX_REWARDS] = empty(address[MAX_REWARDS])\r\n    reward_integrals: uint256[MAX_REWARDS] = empty(uint256[MAX_REWARDS])\r\n    for i in range(MAX_REWARDS):\r\n        token: address = self.reward_tokens[i]\r\n        if token == ZERO_ADDRESS:\r\n            break\r\n        reward_tokens[i] = token\r\n        reward_integrals[i] = self.reward_integral[token]\r\n\r\n    reward_data: uint256 = self.reward_data\r\n    if _total_supply != 0 and reward_data != 0 and block.timestamp > shift(reward_data, -160) + CLAIM_FREQUENCY:\r\n        # track balances prior to claiming\r\n        reward_balances: uint256[MAX_REWARDS] = empty(uint256[MAX_REWARDS])\r\n        for i in range(MAX_REWARDS):\r\n            token: address = self.reward_tokens[i]\r\n            if token == ZERO_ADDRESS:\r\n                break\r\n            reward_balances[i] = ERC20(token).balanceOf(self)\r\n\r\n        # claim from reward contract\r\n        reward_contract: address = convert(reward_data % 2**160, address)\r\n        raw_call(reward_contract, slice(self.reward_sigs, 8, 4))  # dev: bad claim sig\r\n        self.reward_data = convert(reward_contract, uint256) + shift(block.timestamp, 160)\r\n\r\n        # get balances after claim and calculate new reward integrals\r\n        for i in range(MAX_REWARDS):\r\n            token: address = reward_tokens[i]\r\n            if token == ZERO_ADDRESS:\r\n                break\r\n            dI: uint256 = 10**18 * (ERC20(token).balanceOf(self) - reward_balances[i]) / _total_supply\r\n            if dI > 0:\r\n                reward_integrals[i] += dI\r\n                self.reward_integral[token] = reward_integrals[i]\r\n\r\n    if _user != ZERO_ADDRESS:\r\n\r\n        receiver: address = _receiver\r\n        if _claim and receiver == ZERO_ADDRESS:\r\n            # if receiver is not explicitly declared, check for default receiver\r\n            receiver = self.rewards_receiver[_user]\r\n            if receiver == ZERO_ADDRESS:\r\n                # direct claims to user if no default receiver is set\r\n                receiver = _user\r\n\r\n        # calculate new user reward integral and transfer any owed rewards\r\n        user_balance: uint256 = self.balanceOf[_user]\r\n        for i in range(MAX_REWARDS):\r\n            token: address = reward_tokens[i]\r\n            if token == ZERO_ADDRESS:\r\n                break\r\n\r\n            integral: uint256 = reward_integrals[i]\r\n            integral_for: uint256 = self.reward_integral_for[token][_user]\r\n            new_claimable: uint256 = 0\r\n            if integral_for < integral:\r\n                self.reward_integral_for[token][_user] = integral\r\n                new_claimable = user_balance * (integral - integral_for) / 10**18\r\n\r\n            claim_data: uint256 = self.claim_data[_user][token]\r\n            total_claimable: uint256 = shift(claim_data, -128) + new_claimable\r\n            if total_claimable > 0:\r\n                total_claimed: uint256 = claim_data % 2 ** 128\r\n                if _claim:\r\n                    response: Bytes[32] = raw_call(\r\n                        token,\r\n                        concat(\r\n                            method_id(\"transfer(address,uint256)\"),\r\n                            convert(receiver, bytes32),\r\n                            convert(total_claimable, bytes32),\r\n                        ),\r\n                        max_outsize=32,\r\n                    )\r\n                    if len(response) != 0:\r\n                        assert convert(response, bool)\r\n                    # update amount claimed (lower order bytes)\r\n                    self.claim_data[_user][token] = total_claimed + total_claimable\r\n                elif new_claimable > 0:\r\n                    # update total_claimable (higher order bytes)\r\n                    self.claim_data[_user][token] = total_claimed + shift(total_claimable, 128)\r\n\r\n\r\n@internal\r\ndef _checkpoint(addr: address):\r\n    \"\"\"\r\n    @notice Checkpoint for a user\r\n    @param addr User address\r\n    \"\"\"\r\n    _period: int128 = self.period\r\n    _period_time: uint256 = self.period_timestamp[_period]\r\n    _integrate_inv_supply: uint256 = self.integrate_inv_supply[_period]\r\n    rate: uint256 = self.inflation_rate\r\n    new_rate: uint256 = rate\r\n    prev_future_epoch: uint256 = self.future_epoch_time\r\n    if prev_future_epoch >= _period_time:\r\n        _distributor: address = self.distributor\r\n        self.future_epoch_time = Distributor(_distributor).futureEpochTimeWrite()\r\n        new_rate = Distributor(_distributor).rate()\r\n        self.inflation_rate = new_rate\r\n\r\n    if self.is_killed:\r\n        # Stop distributing inflation as soon as killed\r\n        rate = 0\r\n\r\n    # Update integral of 1/supply\r\n    if block.timestamp > _period_time:\r\n        _working_supply: uint256 = self.working_supply\r\n        _controller: address = self.controller\r\n        Controller(_controller).checkpoint_gauge(self)\r\n        prev_week_time: uint256 = _period_time\r\n        week_time: uint256 = min((_period_time + WEEK) / WEEK * WEEK, block.timestamp)\r\n\r\n        for i in range(500):\r\n            dt: uint256 = week_time - prev_week_time\r\n            w: uint256 = Controller(_controller).gauge_relative_weight(self, prev_week_time / WEEK * WEEK)\r\n\r\n            if _working_supply > 0:\r\n                if prev_future_epoch >= prev_week_time and prev_future_epoch < week_time:\r\n                    # If we went across one or multiple epochs, apply the rate\r\n                    # of the first epoch until it ends, and then the rate of\r\n                    # the last epoch.\r\n                    # If more than one epoch is crossed - the gauge gets less,\r\n                    # but that'd meen it wasn't called for more than 1 year\r\n                    _integrate_inv_supply += rate * w * (prev_future_epoch - prev_week_time) / _working_supply\r\n                    rate = new_rate\r\n                    _integrate_inv_supply += rate * w * (week_time - prev_future_epoch) / _working_supply\r\n                else:\r\n                    _integrate_inv_supply += rate * w * dt / _working_supply\r\n                # On precisions of the calculation\r\n                # rate ~= 10e18\r\n                # last_weight > 0.01 * 1e18 = 1e16 (if pool weight is 1%)\r\n                # _working_supply ~= TVL * 1e18 ~= 1e26 ($100M for example)\r\n                # The largest loss is at dt = 1\r\n                # Loss is 1e-9 - acceptable\r\n\r\n            if week_time == block.timestamp:\r\n                break\r\n            prev_week_time = week_time\r\n            week_time = min(week_time + WEEK, block.timestamp)\r\n\r\n    _period += 1\r\n    self.period = _period\r\n    self.period_timestamp[_period] = block.timestamp\r\n    self.integrate_inv_supply[_period] = _integrate_inv_supply\r\n\r\n    # Update user-specific integrals\r\n    _working_balance: uint256 = self.working_balances[addr]\r\n    self.integrate_fraction[addr] += _working_balance * (_integrate_inv_supply - self.integrate_inv_supply_of[addr]) / 10 ** 18\r\n    self.integrate_inv_supply_of[addr] = _integrate_inv_supply\r\n    self.integrate_checkpoint_of[addr] = block.timestamp\r\n\r\n\r\n@external\r\ndef user_checkpoint(addr: address) -> bool:\r\n    \"\"\"\r\n    @notice Record a checkpoint for `addr`\r\n    @param addr User address\r\n    @return bool success\r\n    \"\"\"\r\n    assert (msg.sender == addr) or (msg.sender == self.distributor_proxy)  # dev: unauthorized\r\n    self._checkpoint(addr)\r\n    self._update_liquidity_limit(addr, self.balanceOf[addr], self.totalSupply)\r\n    return True\r\n\r\n\r\n@external\r\ndef claimable_tokens(addr: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of claimable tokens per user\r\n    @dev This function should be manually changed to \"view\" in the ABI\r\n    @return uint256 number of claimable tokens per user\r\n    \"\"\"\r\n    self._checkpoint(addr)\r\n    return self.integrate_fraction[addr] - DistributorProxy(self.distributor_proxy).distributed(addr, self)\r\n\r\n\r\n@view\r\n@external\r\ndef reward_contract() -> address:\r\n    \"\"\"\r\n    @notice Address of the reward contract providing non-IDLE incentives for this gauge\r\n    @dev Returns `ZERO_ADDRESS` if there is no reward contract active\r\n    \"\"\"\r\n    return convert(self.reward_data % 2**160, address)\r\n\r\n\r\n@view\r\n@external\r\ndef last_claim() -> uint256:\r\n    \"\"\"\r\n    @notice Epoch timestamp of the last call to claim from `reward_contract`\r\n    @dev Rewards are claimed at most once per hour in order to reduce gas costs\r\n    \"\"\"\r\n    return shift(self.reward_data, -160)\r\n\r\n\r\n@view\r\n@external\r\ndef claimed_reward(_addr: address, _token: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of already-claimed reward tokens for a user\r\n    @param _addr Account to get reward amount for\r\n    @param _token Token to get reward amount for\r\n    @return uint256 Total amount of `_token` already claimed by `_addr`\r\n    \"\"\"\r\n    return self.claim_data[_addr][_token] % 2**128\r\n\r\n\r\n@view\r\n@external\r\ndef claimable_reward(_addr: address, _token: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of claimable reward tokens for a user\r\n    @dev This call does not consider pending claimable amount in `reward_contract`.\r\n         Off-chain callers should instead use `claimable_rewards_write` as a\r\n         view method.\r\n    @param _addr Account to get reward amount for\r\n    @param _token Token to get reward amount for\r\n    @return uint256 Claimable reward token amount\r\n    \"\"\"\r\n    return shift(self.claim_data[_addr][_token], -128)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef claimable_reward_write(_addr: address, _token: address) -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of claimable reward tokens for a user\r\n    @dev This function should be manually changed to \"view\" in the ABI\r\n         Calling it via a transaction will claim available reward tokens\r\n    @param _addr Account to get reward amount for\r\n    @param _token Token to get reward amount for\r\n    @return uint256 Claimable reward token amount\r\n    \"\"\"\r\n    if self.reward_tokens[0] != ZERO_ADDRESS:\r\n        self._checkpoint_rewards(_addr, self.totalSupply, False, ZERO_ADDRESS)\r\n    return shift(self.claim_data[_addr][_token], -128)\r\n\r\n\r\n@external\r\ndef set_rewards_receiver(_receiver: address):\r\n    \"\"\"\r\n    @notice Set the default reward receiver for the caller.\r\n    @dev When set to ZERO_ADDRESS, rewards are sent to the caller\r\n    @param _receiver Receiver address for any rewards claimed via `claim_rewards`\r\n    \"\"\"\r\n    self.rewards_receiver[msg.sender] = _receiver\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef claim_rewards(_addr: address = msg.sender, _receiver: address = ZERO_ADDRESS):\r\n    \"\"\"\r\n    @notice Claim available reward tokens for `_addr`\r\n    @param _addr Address to claim for\r\n    @param _receiver Address to transfer rewards to - if set to\r\n                     ZERO_ADDRESS, uses the default reward receiver\r\n                     for the caller\r\n    \"\"\"\r\n    if _receiver != ZERO_ADDRESS:\r\n        assert _addr == msg.sender  # dev: cannot redirect when claiming for another user\r\n    self._checkpoint_rewards(_addr, self.totalSupply, True, _receiver)\r\n\r\n\r\n@external\r\ndef kick(addr: address):\r\n    \"\"\"\r\n    @notice Kick `addr` for abusing their boost\r\n    @dev Only if either they had another voting event, or their voting escrow lock expired\r\n    @param addr Address to kick\r\n    \"\"\"\r\n    _voting_escrow: address = self.voting_escrow\r\n    t_last: uint256 = self.integrate_checkpoint_of[addr]\r\n    t_ve: uint256 = VotingEscrow(_voting_escrow).user_point_history__ts(\r\n        addr, VotingEscrow(_voting_escrow).user_point_epoch(addr)\r\n    )\r\n    _balance: uint256 = self.balanceOf[addr]\r\n\r\n    assert ERC20(_voting_escrow).balanceOf(addr) == 0 or t_ve > t_last # dev: kick not allowed\r\n    assert self.working_balances[addr] > _balance * TOKENLESS_PRODUCTION / 100  # dev: kick not needed\r\n\r\n    self._checkpoint(addr)\r\n    self._update_liquidity_limit(addr, self.balanceOf[addr], self.totalSupply)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef deposit(_value: uint256, _addr: address = msg.sender, _claim_rewards: bool = False):\r\n    \"\"\"\r\n    @notice Deposit `_value` LP tokens\r\n    @dev Depositting also claims pending reward tokens\r\n    @param _value Number of tokens to deposit\r\n    @param _addr Address to deposit for\r\n    \"\"\"\r\n\r\n    self._checkpoint(_addr)\r\n\r\n    if _value != 0:\r\n        is_rewards: bool = self.reward_tokens[0] != ZERO_ADDRESS\r\n        total_supply: uint256 = self.totalSupply\r\n        if is_rewards:\r\n            self._checkpoint_rewards(_addr, total_supply, _claim_rewards, ZERO_ADDRESS)\r\n\r\n        total_supply += _value\r\n        new_balance: uint256 = self.balanceOf[_addr] + _value\r\n        self.balanceOf[_addr] = new_balance\r\n        self.totalSupply = total_supply\r\n\r\n        self._update_liquidity_limit(_addr, new_balance, total_supply)\r\n\r\n        ERC20(self.lp_token).transferFrom(msg.sender, self, _value)\r\n        if is_rewards:\r\n            reward_data: uint256 = self.reward_data\r\n            if reward_data > 0:\r\n                deposit_sig: Bytes[4] = slice(self.reward_sigs, 0, 4)\r\n                if convert(deposit_sig, uint256) != 0:\r\n                    raw_call(\r\n                        convert(reward_data % 2**160, address),\r\n                        concat(deposit_sig, convert(_value, bytes32))\r\n                    )\r\n\r\n    log Deposit(_addr, _value)\r\n    log Transfer(ZERO_ADDRESS, _addr, _value)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef withdraw(_value: uint256, _claim_rewards: bool = False):\r\n    \"\"\"\r\n    @notice Withdraw `_value` LP tokens\r\n    @dev Withdrawing also claims pending reward tokens\r\n    @param _value Number of tokens to withdraw\r\n    \"\"\"\r\n    self._checkpoint(msg.sender)\r\n\r\n    if _value != 0:\r\n        is_rewards: bool = self.reward_tokens[0] != ZERO_ADDRESS\r\n        total_supply: uint256 = self.totalSupply\r\n        if is_rewards:\r\n            self._checkpoint_rewards(msg.sender, total_supply, _claim_rewards, ZERO_ADDRESS)\r\n\r\n        total_supply -= _value\r\n        new_balance: uint256 = self.balanceOf[msg.sender] - _value\r\n        self.balanceOf[msg.sender] = new_balance\r\n        self.totalSupply = total_supply\r\n\r\n        self._update_liquidity_limit(msg.sender, new_balance, total_supply)\r\n\r\n        if is_rewards:\r\n            reward_data: uint256 = self.reward_data\r\n            if reward_data > 0:\r\n                withdraw_sig: Bytes[4] = slice(self.reward_sigs, 4, 4)\r\n                if convert(withdraw_sig, uint256) != 0:\r\n                    raw_call(\r\n                        convert(reward_data % 2**160, address),\r\n                        concat(withdraw_sig, convert(_value, bytes32))\r\n                    )\r\n        ERC20(self.lp_token).transfer(msg.sender, _value)\r\n\r\n    log Withdraw(msg.sender, _value)\r\n    log Transfer(msg.sender, ZERO_ADDRESS, _value)\r\n\r\n\r\n@internal\r\ndef _transfer(_from: address, _to: address, _value: uint256):\r\n    self._checkpoint(_from)\r\n    self._checkpoint(_to)\r\n\r\n    if _value != 0:\r\n        total_supply: uint256 = self.totalSupply\r\n        is_rewards: bool = self.reward_tokens[0] != ZERO_ADDRESS\r\n        if is_rewards:\r\n            self._checkpoint_rewards(_from, total_supply, False, ZERO_ADDRESS)\r\n        new_balance: uint256 = self.balanceOf[_from] - _value\r\n        self.balanceOf[_from] = new_balance\r\n        self._update_liquidity_limit(_from, new_balance, total_supply)\r\n\r\n        if is_rewards:\r\n            self._checkpoint_rewards(_to, total_supply, False, ZERO_ADDRESS)\r\n        new_balance = self.balanceOf[_to] + _value\r\n        self.balanceOf[_to] = new_balance\r\n        self._update_liquidity_limit(_to, new_balance, total_supply)\r\n\r\n    log Transfer(_from, _to, _value)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef transfer(_to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer token for a specified address\r\n    @dev Transferring claims pending reward tokens for the sender and receiver\r\n    @param _to The address to transfer to.\r\n    @param _value The amount to be transferred.\r\n    \"\"\"\r\n    self._transfer(msg.sender, _to, _value)\r\n\r\n    return True\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n     @notice Transfer tokens from one address to another.\r\n     @dev Transferring claims pending reward tokens for the sender and receiver\r\n     @param _from address The address which you want to send tokens from\r\n     @param _to address The address which you want to transfer to\r\n     @param _value uint256 the amount of tokens to be transferred\r\n    \"\"\"\r\n    _allowance: uint256 = self.allowance[_from][msg.sender]\r\n    if _allowance != MAX_UINT256:\r\n        self.allowance[_from][msg.sender] = _allowance - _value\r\n\r\n    self._transfer(_from, _to, _value)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef approve(_spender : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @notice Approve the passed address to transfer the specified amount of\r\n            tokens on behalf of msg.sender\r\n    @dev Beware that changing an allowance via this method brings the risk\r\n         that someone may use both the old and new allowance by unfortunate\r\n         transaction ordering. This may be mitigated with the use of\r\n         {incraseAllowance} and {decreaseAllowance}.\r\n         https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param _spender The address which will transfer the funds\r\n    @param _value The amount of tokens that may be transferred\r\n    @return bool success\r\n    \"\"\"\r\n    self.allowance[msg.sender][_spender] = _value\r\n    log Approval(msg.sender, _spender, _value)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef increaseAllowance(_spender: address, _added_value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Increase the allowance granted to `_spender` by the caller\r\n    @dev This is alternative to {approve} that can be used as a mitigation for\r\n         the potential race condition\r\n    @param _spender The address which will transfer the funds\r\n    @param _added_value The amount of to increase the allowance\r\n    @return bool success\r\n    \"\"\"\r\n    allowance: uint256 = self.allowance[msg.sender][_spender] + _added_value\r\n    self.allowance[msg.sender][_spender] = allowance\r\n\r\n    log Approval(msg.sender, _spender, allowance)\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef decreaseAllowance(_spender: address, _subtracted_value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Decrease the allowance granted to `_spender` by the caller\r\n    @dev This is alternative to {approve} that can be used as a mitigation for\r\n         the potential race condition\r\n    @param _spender The address which will transfer the funds\r\n    @param _subtracted_value The amount of to decrease the allowance\r\n    @return bool success\r\n    \"\"\"\r\n    allowance: uint256 = self.allowance[msg.sender][_spender] - _subtracted_value\r\n    self.allowance[msg.sender][_spender] = allowance\r\n\r\n    log Approval(msg.sender, _spender, allowance)\r\n\r\n    return True\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef set_rewards(_reward_contract: address, _sigs: bytes32, _reward_tokens: address[MAX_REWARDS]):\r\n    \"\"\"\r\n    @notice Set the active reward contract\r\n    @dev A reward contract cannot be set while this contract has no deposits\r\n    @param _reward_contract Reward contract address. Set to ZERO_ADDRESS to\r\n                            disable staking.\r\n    @param _sigs Four byte selectors for staking, withdrawing and claiming,\r\n                 right padded with zero bytes. If the reward contract can\r\n                 be claimed from but does not require staking, the staking\r\n                 and withdraw selectors should be set to 0x00\r\n    @param _reward_tokens List of claimable reward tokens. New reward tokens\r\n                          may be added but they cannot be removed. When calling\r\n                          this function to unset or modify a reward contract,\r\n                          this array must begin with the already-set reward\r\n                          token addresses.\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n\r\n    lp_token: address = self.lp_token\r\n    current_reward_contract: address = convert(self.reward_data % 2**160, address)\r\n    total_supply: uint256 = self.totalSupply\r\n    if self.reward_tokens[0] != ZERO_ADDRESS:\r\n        self._checkpoint_rewards(ZERO_ADDRESS, total_supply, False, ZERO_ADDRESS)\r\n    if current_reward_contract != ZERO_ADDRESS:\r\n        withdraw_sig: Bytes[4] = slice(self.reward_sigs, 4, 4)\r\n        if convert(withdraw_sig, uint256) != 0:\r\n            if total_supply != 0:\r\n                raw_call(\r\n                    current_reward_contract,\r\n                    concat(withdraw_sig, convert(total_supply, bytes32))\r\n                )\r\n            ERC20(lp_token).approve(current_reward_contract, 0)\r\n\r\n    if _reward_contract != ZERO_ADDRESS:\r\n        assert _reward_tokens[0] != ZERO_ADDRESS  # dev: no reward token\r\n        assert _reward_contract.is_contract  # dev: not a contract\r\n        deposit_sig: Bytes[4] = slice(_sigs, 0, 4)\r\n        withdraw_sig: Bytes[4] = slice(_sigs, 4, 4)\r\n\r\n        if convert(deposit_sig, uint256) != 0:\r\n            # need a non-zero total supply to verify the sigs\r\n            assert total_supply != 0  # dev: zero total supply\r\n            ERC20(lp_token).approve(_reward_contract, MAX_UINT256)\r\n\r\n            # it would be Very Bad if we get the signatures wrong here, so\r\n            # we do a test deposit and withdrawal prior to setting them\r\n            raw_call(\r\n                _reward_contract,\r\n                concat(deposit_sig, convert(total_supply, bytes32))\r\n            )  # dev: failed deposit\r\n            assert ERC20(lp_token).balanceOf(self) == 0\r\n            raw_call(\r\n                _reward_contract,\r\n                concat(withdraw_sig, convert(total_supply, bytes32))\r\n            )  # dev: failed withdraw\r\n            assert ERC20(lp_token).balanceOf(self) == total_supply\r\n\r\n            # deposit and withdraw are good, time to make the actual deposit\r\n            raw_call(\r\n                _reward_contract,\r\n                concat(deposit_sig, convert(total_supply, bytes32))\r\n            )\r\n        else:\r\n            assert convert(withdraw_sig, uint256) == 0  # dev: withdraw without deposit\r\n\r\n    self.reward_data = convert(_reward_contract, uint256)\r\n    self.reward_sigs = _sigs\r\n    for i in range(MAX_REWARDS):\r\n        current_token: address = self.reward_tokens[i]\r\n        new_token: address = _reward_tokens[i]\r\n        if current_token != ZERO_ADDRESS:\r\n            assert current_token == new_token  # dev: cannot modify existing reward token\r\n        elif new_token != ZERO_ADDRESS:\r\n            # store new reward token\r\n            self.reward_tokens[i] = new_token\r\n        else:\r\n            break\r\n\r\n    if _reward_contract != ZERO_ADDRESS:\r\n        # do an initial checkpoint to verify that claims are working\r\n        self._checkpoint_rewards(ZERO_ADDRESS, total_supply, False, ZERO_ADDRESS)\r\n\r\n\r\n@external\r\ndef set_killed(_is_killed: bool):\r\n    \"\"\"\r\n    @notice Set the killed status for this contract\r\n    @dev When killed, the gauge always yields a rate of 0 and so cannot receive IDLE\r\n    @param _is_killed Killed status to set\r\n    \"\"\"\r\n    assert msg.sender == self.admin\r\n\r\n    self.is_killed = _is_killed\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(addr: address):\r\n    \"\"\"\r\n    @notice Transfer ownership of GaugeController to `addr`\r\n    @param addr Address to have ownership transferred to\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n\r\n    self.future_admin = addr\r\n    log CommitOwnership(addr)\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership():\r\n    \"\"\"\r\n    @notice Accept a pending ownership transfer\r\n    \"\"\"\r\n    _admin: address = self.future_admin\r\n    assert msg.sender == _admin  # dev: future admin only\r\n\r\n    self.admin = _admin\r\n    log ApplyOwnership(_admin)", "ABI": "[{\"name\":\"Deposit\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Withdraw\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateLiquidityLimit\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"indexed\":false},{\"name\":\"original_balance\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"original_supply\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"working_balance\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"working_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitOwnership\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyOwnership\",\"inputs\":[{\"name\":\"admin\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_to\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_lp_token\",\"type\":\"address\"},{\"name\":\"_distributor_proxy\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":288},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"integrate_checkpoint\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":4560},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"user_checkpoint\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":3133382},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claimable_tokens\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3046449},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_contract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2718},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"last_claim\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2544},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claimed_reward\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3066},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"claimable_reward\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3034},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claimable_reward_write\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1209922},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_rewards_receiver\",\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[],\"gas\":35733},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_rewards\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_rewards\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_rewards\",\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"kick\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[],\"gas\":3147973},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_claim_rewards\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_claim_rewards\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":17167132},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":17205082},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":38211},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseAllowance\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_added_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":40755},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decreaseAllowance\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtracted_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":40779},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_rewards\",\"inputs\":[{\"name\":\"_reward_contract\",\"type\":\"address\"},{\"name\":\"_sigs\",\"type\":\"bytes32\"},{\"name\":\"_reward_tokens\",\"type\":\"address[8]\"}],\"outputs\":[],\"gas\":2740447},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_killed\",\"inputs\":[{\"name\":\"_is_killed\",\"type\":\"bool\"}],\"outputs\":[],\"gas\":38145},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"outputs\":[],\"gas\":39525},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_ownership\",\"inputs\":[],\"outputs\":[],\"gas\":39470},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"distributor_proxy\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3078},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"distributor\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3108},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lp_token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3138},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"controller\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3168},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"voting_escrow\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3198},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_epoch_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3228},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3473},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3288},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3748},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":13578},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":11331},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"working_balances\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3623},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"working_supply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3438},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"period\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"int128\"}],\"gas\":3468},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"period_timestamp\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3543},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"integrate_inv_supply\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3573},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"integrate_inv_supply_of\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3773},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"integrate_checkpoint_of\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3803},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"integrate_fraction\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3833},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"inflation_rate\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3648},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_tokens\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3723},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"rewards_receiver\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3923},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_integral\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3953},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reward_integral_for\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":4198},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3798},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_admin\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3828},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_killed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":3858}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.2.15", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000002688fc68c4eac90d9e5e1b94776cf14eade8d877000000000000000000000000074306bc6a6fc1bd02b425dd41d742adf36ca9c6000000000000000000000000bb1cb94f14881dda38793d7f6f99d96db0594051", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}