{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport { IPriceOracle } from \\\"../Oracles/Interfaces/IPriceOracle.sol\\\";\\n\\ninterface IPriceFeed {\\n    // --- Events ---\\n\\n    /// @dev Last good price has been updated.\\n    event LastGoodPriceUpdated(uint256 lastGoodPrice);\\n\\n    /// @dev Price difference between oracles has been updated.\\n    /// @param priceDifferenceBetweenOracles New price difference between oracles.\\n    event PriceDifferenceBetweenOraclesUpdated(uint256 priceDifferenceBetweenOracles);\\n\\n    /// @dev Primary oracle has been updated.\\n    /// @param primaryOracle New primary oracle.\\n    event PrimaryOracleUpdated(IPriceOracle primaryOracle);\\n\\n    /// @dev Secondary oracle has been updated.\\n    /// @param secondaryOracle New secondary oracle.\\n    event SecondaryOracleUpdated(IPriceOracle secondaryOracle);\\n\\n    // --- Errors ---\\n\\n    /// @dev Invalid primary oracle.\\n    error InvalidPrimaryOracle();\\n\\n    /// @dev Invalid secondary oracle.\\n    error InvalidSecondaryOracle();\\n\\n    /// @dev Primary oracle is broken or frozen or has bad result.\\n    error PrimaryOracleBrokenOrFrozenOrBadResult();\\n\\n    /// @dev Invalid price difference between oracles.\\n    error InvalidPriceDifferenceBetweenOracles();\\n\\n    // --- Functions ---\\n\\n    /// @dev Return primary oracle address.\\n    function primaryOracle() external returns (IPriceOracle);\\n\\n    /// @dev Return secondary oracle address\\n    function secondaryOracle() external returns (IPriceOracle);\\n\\n    /// @dev The last good price seen from an oracle by Raft.\\n    function lastGoodPrice() external returns (uint256);\\n\\n    /// @dev The maximum relative price difference between two oracle responses.\\n    function priceDifferenceBetweenOracles() external returns (uint256);\\n\\n    /// @dev Set primary oracle address.\\n    /// @param newPrimaryOracle Primary oracle address.\\n    function setPrimaryOracle(IPriceOracle newPrimaryOracle) external;\\n\\n    /// @dev Set secondary oracle address.\\n    /// @param newSecondaryOracle Secondary oracle address.\\n    function setSecondaryOracle(IPriceOracle newSecondaryOracle) external;\\n\\n    /// @dev Set the maximum relative price difference between two oracle responses.\\n    /// @param newPriceDifferenceBetweenOracles The maximum relative price difference between two oracle responses.\\n    function setPriceDifferenceBetweenOracles(uint256 newPriceDifferenceBetweenOracles) external;\\n\\n    /// @dev Returns the latest price obtained from the Oracle. Called by Raft functions that require a current price.\\n    ///\\n    /// Also callable by anyone externally.\\n    /// Non-view function - it stores the last good price seen by Raft.\\n    ///\\n    /// Uses a primary oracle and a fallback oracle in case primary fails. If both fail,\\n    /// it uses the last good price seen by Raft.\\n    ///\\n    /// @return currentPrice Returned price.\\n    /// @return deviation Deviation of the reported price in percentage.\\n    /// @notice Actual returned price is in range `currentPrice` +/- `currentPrice * deviation / ONE`\\n    function fetchPrice() external returns (uint256 currentPrice, uint256 deviation);\\n}\\n\"\r\n    },\r\n    \"contracts/Oracles/Interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IPriceOracle {\\n    // --- Errors ---\\n\\n    /// @dev Contract initialized with an invalid deviation parameter.\\n    error InvalidDeviation();\\n\\n    // --- Types ---\\n\\n    struct PriceOracleResponse {\\n        bool isBrokenOrFrozen;\\n        bool priceChangeAboveMax;\\n        uint256 price;\\n    }\\n\\n    // --- Functions ---\\n\\n    /// @dev Return price oracle response which consists the following information: oracle is broken or frozen, the\\n    /// price change between two rounds is more than max, and the price.\\n    function getPriceOracleResponse() external returns (PriceOracleResponse memory);\\n\\n    /// @dev Maximum time period allowed since oracle latest round data timestamp, beyond which oracle is considered\\n    /// frozen.\\n    function timeout() external view returns (uint256);\\n\\n    /// @dev Used to convert a price answer to an 18-digit precision uint.\\n    function TARGET_DIGITS() external view returns (uint256);\\n\\n    /// @dev price deviation for the oracle in percentage.\\n    function DEVIATION() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/common/ConstantPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport { IPriceFeed } from \\\"../Interfaces/IPriceFeed.sol\\\";\\nimport { IPriceOracle } from \\\"../Oracles/Interfaces/IPriceOracle.sol\\\";\\nimport { Lock } from \\\"./Lock.sol\\\";\\n\\n/// @dev Price oracle to be used for peg stability module to mint R.\\n/// Returns constant price of 1 USD per token with 0 deviation.\\ncontract ConstantPriceFeed is IPriceFeed, Lock {\\n    /// @dev Thrown in case action is not supported\\n    error NotSupported();\\n\\n    IPriceOracle public override primaryOracle;\\n    IPriceOracle public override secondaryOracle;\\n\\n    uint256 public constant override lastGoodPrice = 1e18;\\n    uint256 public override priceDifferenceBetweenOracles;\\n\\n    constructor(address unlocker) Lock(unlocker) { }\\n\\n    function setPrimaryOracle(IPriceOracle) external pure override {\\n        revert NotSupported();\\n    }\\n\\n    function setSecondaryOracle(IPriceOracle) external pure override {\\n        revert NotSupported();\\n    }\\n\\n    function setPriceDifferenceBetweenOracles(uint256) external pure override {\\n        revert NotSupported();\\n    }\\n\\n    function fetchPrice() external view override whenUnlocked returns (uint256, uint256) {\\n        return (lastGoodPrice, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/ILock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface ILock {\\n    /// @dev Thrown when contract usage is locked.\\n    error ContractLocked();\\n\\n    /// @dev Unauthorized call to lock/unlock.\\n    error Unauthorized();\\n\\n    /// @dev Retrieves if contract is currently locked or not.\\n    function locked() external view returns (bool);\\n\\n    /// @dev Retrieves address of the locker who can unlock contract.\\n    function locker() external view returns (address);\\n\\n    /// @dev Unlcoks the usage of the contract.\\n    function unlock() external;\\n\\n    /// @dev Locks the usage of the contract.\\n    function lock() external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/Lock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport { ILock } from \\\"./ILock.sol\\\";\\n\\ncontract Lock is ILock {\\n    bool public override locked;\\n    address public override locker;\\n\\n    constructor(address locker_) {\\n        locker = locker_;\\n        locked = true;\\n    }\\n\\n    modifier whenUnlocked() {\\n        if (locked) {\\n            revert ContractLocked();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyLocker() {\\n        if (msg.sender != locker) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    function unlock() external override onlyLocker {\\n        locked = false;\\n    }\\n\\n    function lock() public onlyLocker {\\n        locked = true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@balancer-labs/=node_modules/@balancer-labs/\",\r\n      \"@balancer-labs/v2-interfaces/contracts/=lib/balancer-v2-monorepo/pkg/interfaces/contracts/\",\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@redstone-finance/=node_modules/@redstone-finance/\",\r\n      \"@smartcontractkit/chainlink/=lib/chainlink/contracts/src/v0.8/\",\r\n      \"@tempusfinance/=node_modules/@tempusfinance/\",\r\n      \"@tempusfinance/tempus-utils/contracts/=lib/tempus-utils/contracts/\",\r\n      \"balancer-v2-monorepo/=lib/balancer-v2-monorepo/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"tempus-utils/=lib/tempus-utils/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"unlocker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ContractLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPriceDifferenceBetweenOracles\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrimaryOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSecondaryOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrimaryOracleBrokenOrFrozenOrBadResult\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastGoodPrice\",\"type\":\"uint256\"}],\"name\":\"LastGoodPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceDifferenceBetweenOracles\",\"type\":\"uint256\"}],\"name\":\"PriceDifferenceBetweenOraclesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPriceOracle\",\"name\":\"primaryOracle\",\"type\":\"address\"}],\"name\":\"PrimaryOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPriceOracle\",\"name\":\"secondaryOracle\",\"type\":\"address\"}],\"name\":\"SecondaryOracleUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fetchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastGoodPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDifferenceBetweenOracles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primaryOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setPriceDifferenceBetweenOracles\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setPrimaryOracle\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setSecondaryOracle\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConstantPriceFeed", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200000", "ConstructorArguments": "00000000000000000000000072505efdee61021af3592ab13a54739e672afb9a", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}