{"SourceCode": "# @version 0.3.10\r\n\"\"\"\r\n@title CCIP Block Hash Sender\r\n@license MIT\r\n@author Curve Finance\r\n\"\"\"\r\n\r\n# https://github.com/smartcontractkit/ccip/blob/ccip-develop/contracts/src/v0.8/ccip/interfaces/IRouterClient.sol\r\ninterface Router:\r\n    def getFee(_destinationChainSelector: uint64, _message: EVM2AnyMessage) -> uint256: view\r\n    def ccipSend(_destinationChainSelector: uint64, _message: EVM2AnyMessage) -> bytes32: payable\r\n\r\n\r\nevent Transmission:\r\n    message_id: bytes32\r\n\r\nevent TransferOwnership:\r\n    owner: indexed(address)\r\n\r\nevent SetGasLimit:\r\n    gas_limit: uint256\r\n\r\nevent SetRouter:\r\n    router: address\r\n\r\nevent SetReceiver:\r\n    destination_chain_selector: indexed(uint64)\r\n    receiver: address\r\n\r\n\r\n# https://github.com/smartcontractkit/ccip/blob/ccip-develop/contracts/src/v0.8/ccip/libraries/Client.sol#L7-L10\r\nstruct EVMTokenAmount:\r\n    token: address\r\n    amount: uint256\r\n\r\n# https://github.com/smartcontractkit/ccip/blob/ccip-develop/contracts/src/v0.8/ccip/libraries/Client.sol#L20-L27\r\nstruct EVM2AnyMessage:\r\n    receiver: Bytes[32]\r\n    data: Bytes[64]\r\n    token_amounts: DynArray[EVMTokenAmount, 1]\r\n    fee_token: address\r\n    extra_args: Bytes[68]\r\n\r\n# https://etherscan.io/address/0xd0B5Fc9790a6085b048b8Aa1ED26ca2b3b282CF2#code#F9#L30\r\nstruct EVMExtraArgsV1:\r\n    gas_limit: uint256\r\n    strict: bool\r\n\r\n\r\nEVM_EXTRA_ARGS_V1_TAG: constant(bytes4) = 0x97a657c9\r\n\r\n\r\nrouter: public(address)\r\nselector_to_receiver: public(HashMap[uint64, address])\r\n\r\ngas_limit: public(uint256)\r\n\r\nowner: public(address)\r\nfuture_owner: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_ccip_router: address, _gas_limit: uint256):\r\n    self.gas_limit = _gas_limit\r\n    log SetGasLimit(_gas_limit)\r\n\r\n    self.owner = msg.sender\r\n    log TransferOwnership(msg.sender)\r\n\r\n    self.router = _ccip_router\r\n    log SetRouter(_ccip_router)\r\n\r\n\r\n@payable\r\n@external\r\ndef transmit(_destination_chain_selector: uint64, _block_number: uint256):\r\n    \"\"\"\r\n    @dev See https://docs.chain.link/ccip/supported-networks/mainnet for chain selectors\r\n    \"\"\"\r\n    assert block.number - 256 <= _block_number and _block_number < block.number - 64  # dev: invalid block\r\n\r\n    message: EVM2AnyMessage = EVM2AnyMessage({\r\n        receiver: _abi_encode(self.selector_to_receiver[_destination_chain_selector]),\r\n        data: _abi_encode(_block_number, blockhash(_block_number)),\r\n        token_amounts: empty(DynArray[EVMTokenAmount, 1]),\r\n        fee_token: empty(address),\r\n        extra_args: _abi_encode(EVMExtraArgsV1({gas_limit: self.gas_limit, strict: False}), method_id=EVM_EXTRA_ARGS_V1_TAG)\r\n    })\r\n\r\n    Router(self.router).ccipSend(_destination_chain_selector, message, value=msg.value)\r\n\r\n\r\n@view\r\n@external\r\ndef quote(_destination_chain_selector: uint64) -> uint256:\r\n    return Router(self.router).getFee(\r\n        _destination_chain_selector,\r\n        EVM2AnyMessage({\r\n            receiver: _abi_encode(self.selector_to_receiver[_destination_chain_selector]),\r\n            data: _abi_encode(block.number, max_value(uint256)),\r\n            token_amounts: empty(DynArray[EVMTokenAmount, 1]),\r\n            fee_token: empty(address),\r\n            extra_args: _abi_encode(EVMExtraArgsV1({gas_limit: self.gas_limit, strict: False}), method_id=EVM_EXTRA_ARGS_V1_TAG)\r\n        })\r\n    )\r\n\r\n\r\n@external\r\ndef set_gas_limit(_gas_limit: uint256):\r\n    \"\"\"\r\n    @notice Set the gas limit to use for cross-chain transactions\r\n    @param _gas_limit The gas limit for cross-chain transactions\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.gas_limit = _gas_limit\r\n    log SetGasLimit(_gas_limit)\r\n\r\n\r\n@external\r\ndef set_receiver(_destination_chain_selector: uint64, _receiver: address):\r\n    \"\"\"\r\n    @notice Set the receiver for cross chain transactions\r\n    @param _destination_chain_selector The unique CCIP destination chain selector\r\n    @param _receiver The address on the destination chain to transmit messages to\r\n    \"\"\"\r\n    assert msg.sender == self.owner\r\n\r\n    self.selector_to_receiver[_destination_chain_selector] = _receiver\r\n    log SetReceiver(_destination_chain_selector, _receiver)\r\n\r\n\r\n@external\r\ndef set_router(_ccip_router: address):\r\n    \"\"\"\r\n    @notice Set the CCIP router\r\n    @dev Necessary for any potential upgrades to the router tech\r\n    \"\"\"\r\n    assert msg.sender == self.owner\r\n\r\n    self.router = _ccip_router\r\n    log SetRouter(_ccip_router)\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address):\r\n    \"\"\"\r\n    @notice Transfer ownership to `_future_owner`\r\n    @param _future_owner The account to commit as the future owner\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.future_owner = _future_owner\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership():\r\n    \"\"\"\r\n    @notice Accept the transfer of ownership\r\n    @dev Only the committed future owner can call this function\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only future owner\r\n\r\n    self.owner = msg.sender\r\n    log TransferOwnership(msg.sender)", "ABI": "[{\"name\":\"Transmission\",\"inputs\":[{\"name\":\"message_id\",\"type\":\"bytes32\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TransferOwnership\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetGasLimit\",\"inputs\":[{\"name\":\"gas_limit\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetRouter\",\"inputs\":[{\"name\":\"router\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetReceiver\",\"inputs\":[{\"name\":\"destination_chain_selector\",\"type\":\"uint64\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_ccip_router\",\"type\":\"address\"},{\"name\":\"_gas_limit\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"transmit\",\"inputs\":[{\"name\":\"_destination_chain_selector\",\"type\":\"uint64\"},{\"name\":\"_block_number\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"quote\",\"inputs\":[{\"name\":\"_destination_chain_selector\",\"type\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_gas_limit\",\"inputs\":[{\"name\":\"_gas_limit\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_receiver\",\"inputs\":[{\"name\":\"_destination_chain_selector\",\"type\":\"uint64\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_router\",\"inputs\":[{\"name\":\"_ccip_router\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"_future_owner\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_ownership\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"router\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"selector_to_receiver\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gas_limit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "CCIP Block Hash Sender", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "000000000000000000000000e561d5e02207fb5eb32cca20a699e0d8919a1476000000000000000000000000000000000000000000000000000000000007a120", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}