{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Parrot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\nimport './FeeProcessor.sol';\\nimport './ParrotRewards.sol';\\n\\ncontract Parrot is ERC20, Ownable {\\n  uint256 private constant PERCENT_DENOMENATOR = 1000;\\n  address private constant DEX_ROUTER =\\n    0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n  uint256 public buyDevelopmentFee = 20; // 2%\\n  uint256 public buyTreasuryFee = 20; // 2%\\n  uint256 public buyLiquidityFee = 20; // 2%\\n  uint256 public buyTotalFees =\\n    buyDevelopmentFee + buyTreasuryFee + buyLiquidityFee;\\n\\n  uint256 public sellDevelopmentFee = 20; // 2%\\n  uint256 public sellTreasuryFee = 20; // 2%\\n  uint256 public sellLiquidityFee = 20; // 2%\\n  uint256 public sellTotalFees =\\n    sellDevelopmentFee + sellTreasuryFee + sellLiquidityFee;\\n\\n  uint256 public tokensForDevelopment;\\n  uint256 public tokensForTreasury;\\n  uint256 public tokensForLiquidity;\\n\\n  FeeProcessor private _feeProcessor;\\n  ParrotRewards private _rewards;\\n  mapping(address => bool) private _isTaxExcluded;\\n  bool private _taxesOff;\\n\\n  uint256 public maxTxnAmount;\\n  mapping(address => bool) public isExcludedMaxTxnAmount;\\n  uint256 public maxWallet;\\n  mapping(address => bool) public isExcludedMaxWallet;\\n\\n  uint256 public liquifyRate = 5; // 0.5% of LP balance\\n\\n  address public USDC;\\n  address public uniswapV2Pair;\\n  IUniswapV2Router02 public uniswapV2Router;\\n  mapping(address => bool) public marketMakingPairs;\\n\\n  mapping(address => bool) private _isBlacklisted;\\n\\n  bool private _swapEnabled = true;\\n  bool private _swapping = false;\\n  modifier lockSwap() {\\n    _swapping = true;\\n    _;\\n    _swapping = false;\\n  }\\n\\n  constructor(address _usdc) ERC20('Parrot', 'PRT') {\\n    _mint(msg.sender, 1_000_000_000 * 10**18);\\n\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(DEX_ROUTER);\\n    address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n      .createPair(address(this), _usdc);\\n    USDC = _usdc;\\n    marketMakingPairs[_uniswapV2Pair] = true;\\n    uniswapV2Pair = _uniswapV2Pair;\\n    uniswapV2Router = _uniswapV2Router;\\n\\n    maxTxnAmount = (totalSupply() * 1) / 100; // 1% supply\\n    maxWallet = (totalSupply() * 1) / 100; // 1% supply\\n\\n    _feeProcessor = new FeeProcessor(address(this), USDC, DEX_ROUTER);\\n    _feeProcessor.transferOwnership(msg.sender);\\n    _rewards = new ParrotRewards(address(this));\\n    _rewards.transferOwnership(msg.sender);\\n    _isTaxExcluded[address(this)] = true;\\n    _isTaxExcluded[address(_feeProcessor)] = true;\\n    _isTaxExcluded[msg.sender] = true;\\n    isExcludedMaxTxnAmount[address(this)] = true;\\n    isExcludedMaxTxnAmount[address(_feeProcessor)] = true;\\n    isExcludedMaxTxnAmount[msg.sender] = true;\\n    isExcludedMaxWallet[address(this)] = true;\\n    isExcludedMaxWallet[address(_feeProcessor)] = true;\\n    isExcludedMaxWallet[msg.sender] = true;\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual override {\\n    bool _isBuy = marketMakingPairs[sender] &&\\n      recipient != address(uniswapV2Router);\\n    bool _isSell = marketMakingPairs[recipient];\\n    bool _isSwap = _isBuy || _isSell;\\n    address _marketMakingPair;\\n\\n    if (!_isBuy) {\\n      require(!_isBlacklisted[recipient], 'blacklisted wallet');\\n      require(!_isBlacklisted[sender], 'blacklisted wallet');\\n      require(!_isBlacklisted[_msgSender()], 'blacklisted wallet');\\n    }\\n\\n    if (_isSwap) {\\n      if (_isBuy) {\\n        // buy\\n        _marketMakingPair = sender;\\n\\n        if (!isExcludedMaxTxnAmount[recipient]) {\\n          require(\\n            amount <= maxTxnAmount,\\n            'cannot swap more than max transaction amount'\\n          );\\n        }\\n      } else {\\n        // sell\\n        _marketMakingPair = recipient;\\n\\n        if (!isExcludedMaxTxnAmount[sender]) {\\n          require(\\n            amount <= maxTxnAmount,\\n            'cannot swap more than max transaction amount'\\n          );\\n        }\\n      }\\n    }\\n\\n    // enforce on buys and wallet/wallet transfers only\\n    if (!_isSell && !isExcludedMaxWallet[recipient]) {\\n      require(\\n        amount + balanceOf(recipient) <= maxWallet,\\n        'max wallet exceeded'\\n      );\\n    }\\n\\n    uint256 _minSwap = totalSupply();\\n    if (_marketMakingPair != address(0)) {\\n      _minSwap =\\n        (balanceOf(_marketMakingPair) * liquifyRate) /\\n        PERCENT_DENOMENATOR;\\n      _minSwap = _minSwap == 0 ? totalSupply() : _minSwap;\\n    }\\n    bool _overMin = tokensForDevelopment +\\n      tokensForTreasury +\\n      tokensForLiquidity >=\\n      _minSwap;\\n    if (_swapEnabled && !_swapping && _overMin && sender != _marketMakingPair) {\\n      _swap(_minSwap);\\n    }\\n\\n    uint256 tax = 0;\\n    if (\\n      _isSwap &&\\n      !_taxesOff &&\\n      !(_isTaxExcluded[sender] || _isTaxExcluded[recipient])\\n    ) {\\n      if (_isBuy) {\\n        tax = (amount * buyTotalFees) / PERCENT_DENOMENATOR;\\n        tokensForDevelopment += (tax * buyDevelopmentFee) / buyTotalFees;\\n        tokensForTreasury += (tax * buyTreasuryFee) / buyTotalFees;\\n        tokensForLiquidity += (tax * buyLiquidityFee) / buyTotalFees;\\n      } else {\\n        // sell\\n        tax = (amount * sellTotalFees) / PERCENT_DENOMENATOR;\\n        tokensForDevelopment += (tax * sellDevelopmentFee) / sellTotalFees;\\n        tokensForTreasury += (tax * sellTreasuryFee) / sellTotalFees;\\n        tokensForLiquidity += (tax * sellLiquidityFee) / sellTotalFees;\\n      }\\n      if (tax > 0) {\\n        super._transfer(sender, address(this), tax);\\n      }\\n\\n      _trueUpTaxTokens();\\n    }\\n\\n    super._transfer(sender, recipient, amount - tax);\\n  }\\n\\n  function _swap(uint256 _amountToSwap) private lockSwap {\\n    uint256 _tokensForDevelopment = tokensForDevelopment;\\n    uint256 _tokensForTreasury = tokensForTreasury;\\n    uint256 _tokensForLiquidity = tokensForLiquidity;\\n\\n    // the max amount we want to swap is _amountToSwap, so make sure if\\n    // the amount of tokens that are available to swap is more than that,\\n    // that we adjust the tokens to swap to be max that amount.\\n    if (\\n      _tokensForDevelopment + _tokensForTreasury + _tokensForLiquidity >\\n      _amountToSwap\\n    ) {\\n      _tokensForLiquidity = _tokensForLiquidity > _amountToSwap\\n        ? _amountToSwap\\n        : _tokensForLiquidity;\\n      uint256 _remaining = _amountToSwap - _tokensForLiquidity;\\n      _tokensForTreasury =\\n        (_remaining * buyTreasuryFee) /\\n        (buyTreasuryFee + buyDevelopmentFee);\\n      _tokensForDevelopment = _remaining - _tokensForTreasury;\\n    }\\n\\n    uint256 _liquidityTokens = _tokensForLiquidity / 2;\\n    uint256 _finalAmountToSwap = _tokensForDevelopment +\\n      _tokensForTreasury +\\n      _liquidityTokens;\\n\\n    // generate the uniswap pair path of token -> USDC\\n    address[] memory path = new address[](2);\\n    path[0] = address(this);\\n    path[1] = USDC;\\n\\n    _approve(address(this), address(uniswapV2Router), _finalAmountToSwap);\\n    uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n      _finalAmountToSwap,\\n      0,\\n      path,\\n      address(_feeProcessor),\\n      block.timestamp\\n    );\\n    if (_liquidityTokens > 0) {\\n      super._transfer(address(this), address(_feeProcessor), _liquidityTokens);\\n    }\\n    _feeProcessor.processAndDistribute(\\n      _tokensForDevelopment,\\n      _tokensForTreasury,\\n      _liquidityTokens\\n    );\\n\\n    tokensForDevelopment -= _tokensForDevelopment;\\n    tokensForTreasury -= _tokensForTreasury;\\n    tokensForLiquidity -= _tokensForLiquidity;\\n  }\\n\\n  function _trueUpTaxTokens() internal {\\n    uint256 _latestBalance = balanceOf(address(this));\\n    uint256 _latestDesiredBal = tokensForDevelopment +\\n      tokensForTreasury +\\n      tokensForLiquidity;\\n    if (_latestDesiredBal != _latestBalance) {\\n      if (_latestDesiredBal > _latestBalance) {\\n        bool _areExcessMoreThanBal = tokensForDevelopment + tokensForTreasury >\\n          _latestBalance;\\n        tokensForTreasury = _areExcessMoreThanBal ? 0 : tokensForTreasury;\\n        tokensForDevelopment = _areExcessMoreThanBal ? 0 : tokensForDevelopment;\\n      }\\n      tokensForLiquidity =\\n        _latestBalance -\\n        tokensForTreasury -\\n        tokensForDevelopment;\\n    }\\n  }\\n\\n  function feeProcessor() external view returns (address) {\\n    return address(_feeProcessor);\\n  }\\n\\n  function rewardsContract() external view returns (address) {\\n    return address(_rewards);\\n  }\\n\\n  function isBlacklisted(address wallet) external view returns (bool) {\\n    return _isBlacklisted[wallet];\\n  }\\n\\n  function blacklistWallet(address wallet) external onlyOwner {\\n    require(\\n      wallet != address(uniswapV2Router),\\n      'cannot not blacklist dex router'\\n    );\\n    require(!_isBlacklisted[wallet], 'wallet is already blacklisted');\\n    _isBlacklisted[wallet] = true;\\n  }\\n\\n  function forgiveBlacklistedWallet(address wallet) external onlyOwner {\\n    require(_isBlacklisted[wallet], 'wallet is not blacklisted');\\n    _isBlacklisted[wallet] = false;\\n  }\\n\\n  function setBuyTaxes(\\n    uint256 _developmentFee,\\n    uint256 _treasuryFee,\\n    uint256 _liquidityFee\\n  ) external onlyOwner {\\n    buyDevelopmentFee = _developmentFee;\\n    buyTreasuryFee = _treasuryFee;\\n    buyLiquidityFee = _liquidityFee;\\n    buyTotalFees = buyDevelopmentFee + buyTreasuryFee + buyLiquidityFee;\\n    require(\\n      buyTotalFees <= (PERCENT_DENOMENATOR * 15) / 100,\\n      'tax cannot be more than 15%'\\n    );\\n  }\\n\\n  function setSellTaxes(\\n    uint256 _developmentFee,\\n    uint256 _treasuryFee,\\n    uint256 _liquidityFee\\n  ) external onlyOwner {\\n    sellDevelopmentFee = _developmentFee;\\n    sellTreasuryFee = _treasuryFee;\\n    sellLiquidityFee = _liquidityFee;\\n    sellTotalFees = sellDevelopmentFee + sellTreasuryFee + sellLiquidityFee;\\n    require(\\n      sellTotalFees <= (PERCENT_DENOMENATOR * 15) / 100,\\n      'tax cannot be more than 15%'\\n    );\\n  }\\n\\n  function setMarketMakingPair(address _addy, bool _isPair) external onlyOwner {\\n    marketMakingPairs[_addy] = _isPair;\\n  }\\n\\n  function setMaxTxnAmount(uint256 _numTokens) external onlyOwner {\\n    require(\\n      _numTokens >= (totalSupply() * 1) / 1000,\\n      'must be more than 0.1% supply'\\n    );\\n    maxTxnAmount = _numTokens;\\n  }\\n\\n  function setMaxWallet(uint256 _numTokens) external onlyOwner {\\n    require(\\n      _numTokens >= (totalSupply() * 5) / 1000,\\n      'must be more than 0.5% supply'\\n    );\\n    maxWallet = _numTokens;\\n  }\\n\\n  function setLiquifyRate(uint256 _rate) external onlyOwner {\\n    require(_rate <= PERCENT_DENOMENATOR / 10, 'must be less than 10%');\\n    liquifyRate = _rate;\\n  }\\n\\n  function setIsTaxExcluded(address _wallet, bool _isExcluded)\\n    external\\n    onlyOwner\\n  {\\n    _isTaxExcluded[_wallet] = _isExcluded;\\n  }\\n\\n  function setIsExcludeFromMaxTxnAmount(address _wallet, bool _isExcluded)\\n    external\\n    onlyOwner\\n  {\\n    isExcludedMaxTxnAmount[_wallet] = _isExcluded;\\n  }\\n\\n  function setIsExcludeFromMaxWallet(address _wallet, bool _isExcluded)\\n    external\\n    onlyOwner\\n  {\\n    isExcludedMaxWallet[_wallet] = _isExcluded;\\n  }\\n\\n  function setTaxesOff(bool _areOff) external onlyOwner {\\n    _taxesOff = _areOff;\\n  }\\n\\n  function setSwapEnabled(bool _enabled) external onlyOwner {\\n    _swapEnabled = _enabled;\\n  }\\n\\n  function withdrawTokens(address _tokenAddy, uint256 _amount)\\n    external\\n    onlyOwner\\n  {\\n    require(_tokenAddy != address(this), 'cannot withdraw this token');\\n    IERC20 _token = IERC20(_tokenAddy);\\n    _amount = _amount > 0 ? _amount : _token.balanceOf(address(this));\\n    require(_amount > 0, 'make sure there is a balance available to withdraw');\\n    _token.transfer(owner(), _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/FeeProcessor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\n\\ncontract FeeProcessor is Ownable {\\n  address public developmentWallet;\\n  address public treasuryWallet;\\n  address public liquidityWallet;\\n\\n  address public PRT;\\n  address public USDC;\\n  IUniswapV2Router02 public uniswapV2Router;\\n\\n  modifier onlyPrt() {\\n    require(msg.sender == PRT, 'only PRT contract can call');\\n    _;\\n  }\\n\\n  constructor(\\n    address _prt,\\n    address _usdc,\\n    address _dexRouter\\n  ) {\\n    PRT = _prt;\\n    USDC = _usdc;\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_dexRouter);\\n    uniswapV2Router = _uniswapV2Router;\\n  }\\n\\n  function processAndDistribute(\\n    uint256 _tokensForDevelopment,\\n    uint256 _tokensForTreasury,\\n    uint256 _liquidityPRT\\n  ) external onlyPrt {\\n    uint256 _finalSwapAmount = _tokensForDevelopment +\\n      _tokensForTreasury +\\n      _liquidityPRT;\\n    uint256 _usdcBalToProcess = IERC20(USDC).balanceOf(address(this));\\n    if (_usdcBalToProcess > 0) {\\n      uint256 _treasuryUSDC = (_usdcBalToProcess * _tokensForTreasury) /\\n        _finalSwapAmount;\\n      uint256 _developmentUSDC = (_usdcBalToProcess * _tokensForDevelopment) /\\n        _finalSwapAmount;\\n      uint256 _liquidityUSDC = _usdcBalToProcess -\\n        _treasuryUSDC -\\n        _developmentUSDC;\\n      _processFees(\\n        _developmentUSDC,\\n        _treasuryUSDC,\\n        _liquidityUSDC,\\n        _liquidityPRT\\n      );\\n    }\\n  }\\n\\n  function _processFees(\\n    uint256 _developmentUSDC,\\n    uint256 _treasuryUSDC,\\n    uint256 _liquidityUSDC,\\n    uint256 _liquidityPRT\\n  ) internal {\\n    IERC20 _usdc = IERC20(USDC);\\n    if (_developmentUSDC > 0) {\\n      address _developmentWallet = developmentWallet == address(0)\\n        ? owner()\\n        : developmentWallet;\\n      _usdc.transfer(_developmentWallet, _developmentUSDC);\\n    }\\n\\n    if (_treasuryUSDC > 0) {\\n      address _treasuryWallet = treasuryWallet == address(0)\\n        ? owner()\\n        : treasuryWallet;\\n      _usdc.transfer(_treasuryWallet, _treasuryUSDC);\\n    }\\n\\n    if (_liquidityUSDC > 0 && _liquidityPRT > 0) {\\n      _addLp(_liquidityPRT, _liquidityUSDC);\\n    }\\n  }\\n\\n  function _addLp(uint256 prtAmount, uint256 usdcAmount) internal {\\n    address _liquidityWallet = liquidityWallet == address(0)\\n      ? owner()\\n      : liquidityWallet;\\n    IERC20 _prt = IERC20(PRT);\\n    IERC20 _usdc = IERC20(USDC);\\n\\n    _prt.approve(address(uniswapV2Router), prtAmount);\\n    _usdc.approve(address(uniswapV2Router), usdcAmount);\\n    uniswapV2Router.addLiquidity(\\n      USDC,\\n      PRT,\\n      usdcAmount,\\n      prtAmount,\\n      0,\\n      0,\\n      _liquidityWallet,\\n      block.timestamp\\n    );\\n    uint256 _contUSDCBal = _usdc.balanceOf(address(this));\\n    if (_contUSDCBal > 0) {\\n      _usdc.transfer(_liquidityWallet, _contUSDCBal);\\n    }\\n    uint256 _contPRTBal = _prt.balanceOf(address(this));\\n    if (_contPRTBal > 0) {\\n      _prt.transfer(_liquidityWallet, _contPRTBal);\\n    }\\n  }\\n\\n  function setDevelopmentWallet(address _wallet) external onlyOwner {\\n    developmentWallet = _wallet;\\n  }\\n\\n  function setTreasuryWallet(address _wallet) external onlyOwner {\\n    treasuryWallet = _wallet;\\n  }\\n\\n  function setLiquidityWallet(address _wallet) external onlyOwner {\\n    liquidityWallet = _wallet;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/ParrotRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\\nimport './interfaces/IParrotRewards.sol';\\n\\ncontract ParrotRewards is IParrotRewards, Ownable {\\n  uint256 private constant ONE_DAY = 60 * 60 * 24;\\n  int256 private constant OFFSET19700101 = 2440588;\\n\\n  struct Reward {\\n    uint256 totalExcluded;\\n    uint256 totalRealised;\\n    uint256 lastClaim;\\n  }\\n\\n  struct Share {\\n    uint256 amount;\\n    uint256 lockedTime;\\n  }\\n\\n  uint256 public timeLock = 30 days;\\n  address public shareholderToken;\\n  uint256 public totalLockedUsers;\\n  uint256 public totalSharesDeposited;\\n\\n  uint8 public minDayOfMonthCanLock = 1;\\n  uint8 public maxDayOfMonthCanLock = 5;\\n\\n  // amount of shares a user has\\n  mapping(address => Share) public shares;\\n  // reward information per user\\n  mapping(address => Reward) public rewards;\\n\\n  uint256 public totalRewards;\\n  uint256 public totalDistributed;\\n  uint256 public rewardsPerShare;\\n\\n  uint256 private constant ACC_FACTOR = 10**36;\\n\\n  event ClaimReward(address wallet);\\n  event DistributeReward(address indexed wallet, address payable receiver);\\n  event DepositRewards(address indexed wallet, uint256 amountETH);\\n\\n  constructor(address _shareholderToken) {\\n    shareholderToken = _shareholderToken;\\n  }\\n\\n  function lock(uint256 _amount) external {\\n    uint256 _currentDayOfMonth = _dayOfMonth(block.timestamp);\\n    require(\\n      _currentDayOfMonth >= minDayOfMonthCanLock &&\\n        _currentDayOfMonth <= maxDayOfMonthCanLock,\\n      'outside of allowed lock window'\\n    );\\n    address shareholder = msg.sender;\\n    IERC20 tokenContract = IERC20(shareholderToken);\\n    _amount = _amount == 0 ? tokenContract.balanceOf(shareholder) : _amount;\\n    tokenContract.transferFrom(shareholder, address(this), _amount);\\n    _addShares(shareholder, _amount);\\n  }\\n\\n  function unlock(uint256 _amount) external {\\n    address shareholder = msg.sender;\\n    require(\\n      block.timestamp >= shares[shareholder].lockedTime + timeLock,\\n      'must wait the time lock before unstaking'\\n    );\\n    _amount = _amount == 0 ? shares[shareholder].amount : _amount;\\n    require(_amount > 0, 'need tokens to unlock');\\n    require(\\n      _amount <= shares[shareholder].amount,\\n      'cannot unlock more than you have locked'\\n    );\\n    IERC20(shareholderToken).transfer(shareholder, _amount);\\n    _removeShares(shareholder, _amount);\\n  }\\n\\n  function _addShares(address shareholder, uint256 amount) internal {\\n    _distributeReward(shareholder);\\n\\n    uint256 sharesBefore = shares[shareholder].amount;\\n    totalSharesDeposited += amount;\\n    shares[shareholder].amount += amount;\\n    shares[shareholder].lockedTime = block.timestamp;\\n    if (sharesBefore == 0 && shares[shareholder].amount > 0) {\\n      totalLockedUsers++;\\n    }\\n    rewards[shareholder].totalExcluded = getCumulativeRewards(\\n      shares[shareholder].amount\\n    );\\n  }\\n\\n  function _removeShares(address shareholder, uint256 amount) internal {\\n    amount = amount == 0 ? shares[shareholder].amount : amount;\\n    require(\\n      shares[shareholder].amount > 0 && amount <= shares[shareholder].amount,\\n      'you can only unlock if you have some lockd'\\n    );\\n    _distributeReward(shareholder);\\n\\n    totalSharesDeposited -= amount;\\n    shares[shareholder].amount -= amount;\\n    if (shares[shareholder].amount == 0) {\\n      totalLockedUsers--;\\n    }\\n    rewards[shareholder].totalExcluded = getCumulativeRewards(\\n      shares[shareholder].amount\\n    );\\n  }\\n\\n  function depositRewards() public payable override {\\n    _depositRewards(msg.value);\\n  }\\n\\n  function _depositRewards(uint256 _amount) internal {\\n    require(_amount > 0, 'must provide ETH to deposit');\\n    require(totalSharesDeposited > 0, 'must be shares deposited');\\n\\n    totalRewards += _amount;\\n    rewardsPerShare += (ACC_FACTOR * _amount) / totalSharesDeposited;\\n    emit DepositRewards(msg.sender, _amount);\\n  }\\n\\n  function _distributeReward(address shareholder) internal {\\n    if (shares[shareholder].amount == 0) {\\n      return;\\n    }\\n\\n    uint256 amount = getUnpaid(shareholder);\\n\\n    rewards[shareholder].totalRealised += amount;\\n    rewards[shareholder].totalExcluded = getCumulativeRewards(\\n      shares[shareholder].amount\\n    );\\n    rewards[shareholder].lastClaim = block.timestamp;\\n\\n    if (amount > 0) {\\n      address payable receiver = payable(shareholder);\\n      totalDistributed += amount;\\n      uint256 balanceBefore = address(this).balance;\\n      receiver.call{ value: amount }('');\\n      require(address(this).balance >= balanceBefore - amount);\\n      emit DistributeReward(shareholder, receiver);\\n    }\\n  }\\n\\n  function _dayOfMonth(uint256 _timestamp) internal pure returns (uint256) {\\n    (, , uint256 day) = _daysToDate(_timestamp / ONE_DAY);\\n    return day;\\n  }\\n\\n  // date conversion algorithm from http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n  function _daysToDate(uint256 _days)\\n    internal\\n    pure\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    int256 __days = int256(_days);\\n\\n    int256 L = __days + 68569 + OFFSET19700101;\\n    int256 N = (4 * L) / 146097;\\n    L = L - (146097 * N + 3) / 4;\\n    int256 _year = (4000 * (L + 1)) / 1461001;\\n    L = L - (1461 * _year) / 4 + 31;\\n    int256 _month = (80 * L) / 2447;\\n    int256 _day = L - (2447 * _month) / 80;\\n    L = _month / 11;\\n    _month = _month + 2 - 12 * L;\\n    _year = 100 * (N - 49) + _year + L;\\n\\n    return (uint256(_year), uint256(_month), uint256(_day));\\n  }\\n\\n  function claimReward() external override {\\n    _distributeReward(msg.sender);\\n    emit ClaimReward(msg.sender);\\n  }\\n\\n  // returns the unpaid rewards\\n  function getUnpaid(address shareholder) public view returns (uint256) {\\n    if (shares[shareholder].amount == 0) {\\n      return 0;\\n    }\\n\\n    uint256 earnedRewards = getCumulativeRewards(shares[shareholder].amount);\\n    uint256 rewardsExcluded = rewards[shareholder].totalExcluded;\\n    if (earnedRewards <= rewardsExcluded) {\\n      return 0;\\n    }\\n\\n    return earnedRewards - rewardsExcluded;\\n  }\\n\\n  function getCumulativeRewards(uint256 share) internal view returns (uint256) {\\n    return (share * rewardsPerShare) / ACC_FACTOR;\\n  }\\n\\n  function getLockedShares(address user)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return shares[user].amount;\\n  }\\n\\n  function setMinDayOfMonthCanLock(uint8 _day) external onlyOwner {\\n    require(_day <= maxDayOfMonthCanLock, 'can set min day above max day');\\n    minDayOfMonthCanLock = _day;\\n  }\\n\\n  function setMaxDayOfMonthCanLock(uint8 _day) external onlyOwner {\\n    require(_day >= minDayOfMonthCanLock, 'can set max day below min day');\\n    maxDayOfMonthCanLock = _day;\\n  }\\n\\n  function setTimeLock(uint256 numSec) external onlyOwner {\\n    require(numSec <= 365 days, 'must be less than a year');\\n    timeLock = numSec;\\n  }\\n\\n  receive() external payable {\\n    _depositRewards(msg.value);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"contracts/interfaces/IParrotRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IParrotRewards {\\n  function claimReward() external;\\n\\n  function depositRewards() external payable;\\n\\n  function getLockedShares(address wallet) external view returns (uint256);\\n\\n  function lock(uint256 amount) external;\\n\\n  function unlock(uint256 amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"blacklistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeProcessor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"forgiveBlacklistedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedMaxTxnAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketMakingPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExcluded\",\"type\":\"bool\"}],\"name\":\"setIsExcludeFromMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExcluded\",\"type\":\"bool\"}],\"name\":\"setIsExcludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExcluded\",\"type\":\"bool\"}],\"name\":\"setIsTaxExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setLiquifyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPair\",\"type\":\"bool\"}],\"name\":\"setMarketMakingPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_developmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_areOff\",\"type\":\"bool\"}],\"name\":\"setTaxesOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDevelopment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Parrot", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}