{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-12-11\r\n*/\r\n\r\n// SPDX-License-Identifier: MyCampaign.vip by Osher Haim Glick aka encrypto.bite\r\npragma solidity ^0.8.23;\r\n\r\ncontract MyCampaign {\r\n\r\n    //A Campaign struct\r\n    struct Campaign {\r\n        string phoneNumber; //phonenumber or email of the campaign owner\r\n        address owner; //public wallet address of the campaign owner\r\n        string title; //title of the campaign\r\n        string description; //description of the campaign\r\n        uint256 target; //the target amount for raising in the campaign\r\n        uint256 endDate; //the date of the end of the campaign\r\n        uint256 amountCollected; //the amount that the campaign collected so far\r\n        string videoLinkFromPinata; //the Hash (from pinata.cloud) of the video\r\n        string typeOfCampaign; //the category of the campaign\r\n        address[] donators; //list of the donators\r\n        uint256[] donations; //the amount each donator donated\r\n        string[] comments; //the comments of the donators\r\n        bool cashedOut; //check if the campaign took the money and finished or not yet\r\n        bool isCheckedByWebsite; //checks if the campaign is verified\r\n        string websiteComment; //a comment of the website on the campaign, like how much it collected or proofes for achieve the goals the campaign intended\r\n    }\r\n\r\n    // Events for transparancy\r\n    event CampaignCreated(uint256 campaignId, address owner, string title);\r\n    event DonationReceived(uint256 campaignId, address donor, uint256 amount);\r\n    event CampaignWithdrawn(uint256 campaignId, address owner, uint256 amount);\r\n    event CampaignClosed(uint256 campaignId, address byModerator);\r\n    event ModeratorAdded(address moderator, address bySuperMod);\r\n    event SuperModeratorAdded(address superModerator);\r\n    event ModeratorRemoved(address moderator, address bySuperMod);\r\n    event SuperModeratorRemoved(address superModerator);\r\n    event CampaignReported(uint256 campaignId, address reporter);\r\n    event CampaignStopped(uint256 campaignId);\r\n\r\n\r\n    //Global Vars\r\n    mapping (uint256 => Campaign) public campaigns;\r\n    uint256[] public activeCampaignIDs;\r\n    uint256 public numberOfCampaigns = 0;\r\n    mapping(address => bool) moderators; // Mapping to check if an address is a moderator\r\n    mapping(address => bool) superModerators; // Mapping to check if an address is a supermoderator\r\n    mapping(uint256 => uint256) reportBalances; // Mapping to store report balances for campaigns\r\n    mapping(uint256 => uint256) reportCounts; // Mapping to store report counts for campaigns\r\n    uint256 constant REPORT_COST = 1e16; // Cost to report a campaign\r\n    uint256 constant MIN_DONATION = 1e16; //Minimum amount for donation\r\n    address public contractOwner; //Osher Haim Glick\r\n    mapping(uint256 => mapping(address => uint256)) individualReportAmounts; // Mapping to store individual report amounts for campaigns\r\n    mapping(uint256 => address[]) campaignReporters; // Mapping to store addresses of all reporters for a campaign\r\n    mapping(uint256 => mapping(address => bool)) hasReported; //Mapping to check if a user already reported a campaign\r\n    mapping(uint256 => mapping(address => string)) reportReasons; //Mapping to get the reason of the report\r\n    address[] private modAddresses; //list of moderators\r\n    address[] private superModAddresses; //list of supermoderators\r\n\r\n\r\n    //Checks the user doesnt attack the SmartContract by entering to a function before the function ends it ends.\r\n    //For example: It required for functions like withdraw so no user can withdraw more then once, the user must wait until the function ends to try again\r\n    bool internal locked = false;\r\n    modifier reentrancyGuard() {\r\n        require(!locked, \"Reentrant call\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    constructor(address _MyCampaign) {\r\n        contractOwner = _MyCampaign;\r\n    }\r\n\r\n    //modifier to make some of the functions only for the contract owner, Osher Haim Glick\r\n    modifier onlyOwner() {\r\n        require(msg.sender == contractOwner, \"Only the contract owner can execute this\");\r\n        _;\r\n    }\r\n\r\n    //modifier to make some of the functions only for a moderator\r\n    modifier onlyModerator() {\r\n        require(moderators[msg.sender], \"Only a moderator can execute this\");\r\n        _;\r\n    }\r\n\r\n    //modifier to make some of the functions only for a supermoderator\r\n    modifier onlySuperModerator() {\r\n        require(superModerators[msg.sender], \"Only a SuperModerator can execute this\");\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    //The next 8 functions are about creating a string (means \"text\") of fructional numbers because in code there is no fructional numbers.\r\n    //for example the number 5.567 cannot be calculated in solidity code. only numbers like 5 or 9, only whole numbers.\r\n    //so, to create the amount the campaign owners collected represented in the website correctly I needed to create those functions.\r\n   \r\n    //the amount of digits after the point for a fructional number.\r\n    uint256 constant DECIMAL_FACTOR = 1000;\r\n\r\n    //add 2 whole numbers\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    //substract 2 whole numbers\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Subtraction overflow\");\r\n        return a - b;\r\n    }\r\n    \r\n    //multiplay 2 whole numbers divided by the decimal factor for achieving the text convert and fructional number correctly\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * b) / DECIMAL_FACTOR;\r\n    }\r\n\r\n    //divide 2 whole numbers multiplay by the decimal factor for achieving the text convert and fructional number correctly\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"Division by zero\");\r\n        return (a * DECIMAL_FACTOR ) / b;\r\n    }\r\n\r\n    // finaly convert a whole number to a decimal fructional string (text) representation\r\n    function uintToDecimalString(uint256 value) internal pure returns (string memory) {\r\n        uint256 integerPart = value / DECIMAL_FACTOR;\r\n        uint256 fractionalPart = value % DECIMAL_FACTOR;\r\n\r\n        // Ensure the fractional part is represented correctly\r\n        string memory fractionalPartStr = uintToString(fractionalPart);\r\n        if (fractionalPart < DECIMAL_FACTOR / 10) {\r\n            fractionalPartStr = string(abi.encodePacked(\"0\", fractionalPartStr));\r\n        }\r\n\r\n        return string(abi.encodePacked(uintToString(integerPart), \".\", fractionalPartStr));\r\n    }\r\n\r\n    // convert whole number to string (to text)\r\n    function uintToString(uint256 _i) internal pure returns (string memory) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 j = _i;\r\n        uint256 len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len;\r\n        while (_i != 0) {\r\n            k = k - 1;\r\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    //normalizeFractionalPart in the number\r\n    function normalizeFractionalPart(uint256 fractionalPart) internal pure returns (string memory) {\r\n        uint256 requiredDigits = calculateDigits(DECIMAL_FACTOR);\r\n        uint256 actualDigits = calculateDigits(fractionalPart);\r\n\r\n        // Add leading zeros if necessary\r\n        string memory leadingZeros = new string(requiredDigits - actualDigits);\r\n        for (uint256 i = 0; i < requiredDigits - actualDigits; i++) {\r\n            leadingZeros = string(abi.encodePacked(\"0\", leadingZeros));\r\n        }\r\n\r\n        return string(abi.encodePacked(leadingZeros, uintToString(fractionalPart)));\r\n    }\r\n\r\n    //calculate how much digits the number has\r\n    function calculateDigits(uint256 number) internal pure returns (uint256 digits) {\r\n        while (number != 0) {\r\n            number /= 10;\r\n            digits++;\r\n        }\r\n    }\r\n\r\n    //create new campaign\r\n    function createCampaign(string memory _phoneNumber , string memory _title, string memory _description, uint256 _target, uint256 _endDate, string memory _videoLinkFromPinata, string memory _type) public reentrancyGuard returns (uint256) {\r\n        require(_endDate > block.timestamp, \"The endDate should be a date in the future\");\r\n        Campaign storage campaign = campaigns[numberOfCampaigns];\r\n        campaign.owner = msg.sender;\r\n        campaign.phoneNumber = _phoneNumber;\r\n        campaign.title = _title;\r\n        campaign.description = _description;\r\n        campaign.target = _target;\r\n        campaign.endDate = _endDate;\r\n        campaign.videoLinkFromPinata = _videoLinkFromPinata;\r\n        campaign.typeOfCampaign = _type;\r\n        campaign.amountCollected = 0;\r\n        campaign.cashedOut = false;\r\n        numberOfCampaigns++;\r\n        campaign.isCheckedByWebsite = false;\r\n        campaign.websiteComment = \"Hasn't verified yet\";\r\n        \r\n        emit CampaignCreated(numberOfCampaigns-1, msg.sender, _title);\r\n\r\n        return numberOfCampaigns-1;\r\n    }\r\n\r\n    //let the moderator verify the campaign and add proofes from the campaign owner afterwards\r\n    function verifyCampaign(uint256 _id,string memory _websiteComment) public onlyModerator {\r\n        Campaign storage campaign = campaigns[_id];\r\n        campaign.isCheckedByWebsite = true;\r\n        campaign.websiteComment = _websiteComment;\r\n        activeCampaignIDs.push(_id);\r\n    }\r\n\r\n    //donate to a campaign\r\n    function donateToCampaign(uint256 _id, string memory _comment) public payable reentrancyGuard {\r\n        require( campaigns[_id].cashedOut==false ,\"Campaign already cashed out\");\r\n        require(_id < numberOfCampaigns && campaigns[_id].owner != address(0)&& campaigns[_id].isCheckedByWebsite == true, \"Invalid campaign Id or the campaign hasn't reviewed yet by the website\");\r\n        require(msg.value>=MIN_DONATION,\"Minimum donation amount is 0.01 ETH\");\r\n        Campaign storage campaign = campaigns[_id];\r\n        require(block.timestamp < campaign.endDate, \"Donation period for this campaign has ended\");\r\n        campaign.comments.push(_comment);\r\n        uint256 amount = msg.value;\r\n        campaign.donators.push(msg.sender);\r\n        campaign.donations.push(amount);\r\n        campaign.amountCollected += amount;\r\n        emit DonationReceived(_id, msg.sender, amount);\r\n    }\r\n\r\n    //get all the donators and donations of specified campaign\r\n    function getDonators(uint256 _id) view public returns (address[] memory, uint256[] memory, string[] memory) {\r\n        return (campaigns[_id].donators, campaigns[_id].donations, campaigns[_id].comments);\r\n    }\r\n\r\n    //get a list of all the campaigns\r\n    function getCampaigns() view public returns (Campaign[] memory) {\r\n        Campaign[] memory allCampaigns = new Campaign[](numberOfCampaigns);\r\n        for (uint256 i = 0; i < numberOfCampaigns; i++) {\r\n            Campaign storage item = campaigns[i];\r\n            allCampaigns[i] = item;\r\n        }\r\n        return allCampaigns;\r\n    }\r\n\r\n    //add 3 text vars to create one sentence\r\n    function concatenate(string memory a, string memory b, string memory c) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b, c));\r\n    }\r\n\r\n    //withdraw the campaign after it finished (can be after the end date or after achieving the goal)\r\n    function withdrawCampaign(uint256 _id) public reentrancyGuard {\r\n        Campaign storage campaign = campaigns[_id];\r\n        require(msg.sender == campaign.owner, \"Only the campaign owner can withdraw\");\r\n        require( campaign.target <= campaign.amountCollected || block.timestamp > campaign.endDate, \"Cannot withdraw before reaching the target amount or before the campaign's end time\");\r\n        require( campaign.cashedOut==false ,\"Campaign already cashed out\");\r\n        require(campaign.isCheckedByWebsite==true, \"Please note that this campaign has not yet been reviewed by our team. For further assistance or inquiries, kindly reach out to us at support@YourCampaign.io\");\r\n        uint256 fee = campaign.amountCollected * 35 / 1000;\r\n        uint256 amountToWithdraw = campaign.amountCollected - fee;\r\n        \r\n        payable(contractOwner).transfer(fee + reportBalances[_id]);\r\n        payable(campaign.owner).transfer(amountToWithdraw);\r\n\r\n        for (uint256 i = 0; i < activeCampaignIDs.length; i++) {\r\n            if (activeCampaignIDs[i] == _id) {\r\n                activeCampaignIDs[i] = activeCampaignIDs[activeCampaignIDs.length - 1];\r\n                activeCampaignIDs.pop();\r\n                break;\r\n            }\r\n        }\r\n        \r\n        campaign.amountCollected = 0;\r\n\r\n        campaign.cashedOut = true;\r\n        string memory part1 = \"The campaign raised \";\r\n        string memory part2 = uintToDecimalString(div(amountToWithdraw,1e18));\r\n        string memory part3 = \" Ethereum successfully!\";\r\n        \r\n        campaign.websiteComment = concatenate(part1, part2, part3);\r\n        emit CampaignWithdrawn(_id, campaign.owner, amountToWithdraw);\r\n    }\r\n\r\n    //refund all the reporters if campaign closed for any reason\r\n    function RefundReportFunds(uint256 _campaignId) internal {\r\n        uint256 totalReportFunds = reportBalances[_campaignId];\r\n        address[] memory reporters = campaignReporters[_campaignId];\r\n\r\n        for (uint256 i = 0; i < reporters.length; i++) {\r\n            address reporter = reporters[i];\r\n            uint256 refundAmount = individualReportAmounts[_campaignId][reporter];\r\n\r\n            if (refundAmount > 0 && totalReportFunds >= refundAmount) {\r\n                payable(reporter).transfer(refundAmount);\r\n                totalReportFunds -= refundAmount;\r\n                individualReportAmounts[_campaignId][reporter] = 0;\r\n            }\r\n        }\r\n        reportBalances[_campaignId] = 0;\r\n    }\r\n\r\n    //close a campaign if its against website rules\r\n    function closeCampaign(uint256 _id) public onlySuperModerator {\r\n        Campaign storage campaign = campaigns[_id];\r\n        if (campaign.donations.length>0) {\r\n            returnFundsToDonators(_id);\r\n        }\r\n\r\n        for (uint256 i = 0; i < activeCampaignIDs.length; i++) {\r\n            if (activeCampaignIDs[i] == _id) {\r\n                activeCampaignIDs[i] = activeCampaignIDs[activeCampaignIDs.length - 1];\r\n                activeCampaignIDs.pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        campaign.isCheckedByWebsite = false;\r\n        campaign.videoLinkFromPinata = \"X\";\r\n        campaign.websiteComment = \"Refunded because of illegal activity\";\r\n        emit CampaignClosed(_id, msg.sender);\r\n    }\r\n\r\n    //just like the name of the function, add a new moderator for the website\r\n    function addModerator(address _moderator) public onlySuperModerator {\r\n        moderators[_moderator] = true;\r\n        modAddresses.push(_moderator); // Add to the array\r\n        emit ModeratorAdded(_moderator, msg.sender);\r\n    }\r\n\r\n    //remove a moderator\r\n    function removeModerator(address _moderator) public onlySuperModerator {\r\n        moderators[_moderator] = false;\r\n        // Remove from the array\r\n        for (uint256 i = 0; i < modAddresses.length; i++) {\r\n            if (modAddresses[i] == _moderator) {\r\n                modAddresses[i] = modAddresses[modAddresses.length - 1];\r\n                modAddresses.pop();\r\n                break;\r\n            }\r\n        }\r\n        emit ModeratorRemoved(_moderator, msg.sender);\r\n    }\r\n\r\n    //add supermoderator\r\n    function addSuperModerator(address _superModerator) public onlyOwner {\r\n        superModerators[_superModerator] = true;\r\n        superModAddresses.push(_superModerator); // Add to the array\r\n        emit SuperModeratorAdded(_superModerator);\r\n    }\r\n\r\n    //remove supermoderator\r\n    function removeSuperModerator(address _superModerator) public onlyOwner {\r\n        superModerators[_superModerator] = false;\r\n        // Remove from the array\r\n        for (uint256 i = 0; i < superModAddresses.length; i++) {\r\n            if (superModAddresses[i] == _superModerator) {\r\n                superModAddresses[i] = superModAddresses[superModAddresses.length - 1];\r\n                superModAddresses.pop();\r\n                break;\r\n            }\r\n        }\r\n        emit SuperModeratorRemoved(_superModerator);\r\n    }\r\n\r\n    //get all the modertors addresses if needed to remove one\r\n    function getModsAddresses() onlySuperModerator public view returns (address[] memory) {\r\n        return modAddresses;\r\n    }\r\n\r\n    //get all the supermodertors addresses if needed to remove one\r\n    function getSuperModsAddresses() onlySuperModerator public view returns (address[] memory) {\r\n        return superModAddresses;\r\n    }\r\n\r\n    //report a campaign, cost 0.01 ETH to avoid spam\r\n    function reportCampaign(uint256 _campaignId, string memory _reason) public payable reentrancyGuard {\r\n        require(msg.value >= REPORT_COST, \"Insufficient report fee, must pay 0.01 ETH to report.\");\r\n        require(!hasReported[_campaignId][msg.sender], \"You have already reported this campaign\");\r\n        \r\n        hasReported[_campaignId][msg.sender] = true;\r\n        \r\n        if(individualReportAmounts[_campaignId][msg.sender] == 0) {\r\n            campaignReporters[_campaignId].push(msg.sender);\r\n        }\r\n\r\n        individualReportAmounts[_campaignId][msg.sender] += msg.value;\r\n        reportBalances[_campaignId] += msg.value;\r\n        reportCounts[_campaignId]++;\r\n\r\n        emit CampaignReported(_campaignId, msg.sender);\r\n\r\n        reportReasons[_campaignId][msg.sender] = _reason;\r\n    }\r\n\r\n    //stop campaign in the middle if needed before choosing if to continue it or close it\r\n    function stopCampaignByMod(uint256 _campaignId) public onlyModerator {\r\n        Campaign storage campaign = campaigns[_campaignId];\r\n        campaign.isCheckedByWebsite = false;\r\n        campaign.websiteComment = \"Stopped for review because of suspicious activity\";\r\n        emit CampaignStopped(_campaignId);\r\n    }\r\n\r\n    //refund all the donators if a campaign closed for any reason\r\n    function returnFundsToDonators(uint256 _campaignId) internal {\r\n        for (uint256 i = 0; i < campaigns[_campaignId].donators.length; i++) {\r\n            payable(campaigns[_campaignId].donators[i]).transfer(campaigns[_campaignId].donations[i]);\r\n        }\r\n        RefundReportFunds(_campaignId);\r\n        campaigns[_campaignId].amountCollected = 0;\r\n    }\r\n\r\n    //get all the reports of a specified campaign, available only to moderator\r\n    function getReportReasonsOfCampaign(uint256 campaignId) public view onlyModerator returns (address[] memory, string[] memory) {\r\n        address[] memory reportersForThisCampaign = campaignReporters[campaignId];\r\n        string[] memory reasonsForThisCampaign = new string[](reportersForThisCampaign.length);\r\n\r\n        for (uint256 i = 0; i < reportersForThisCampaign.length; i++) {\r\n            reasonsForThisCampaign[i] = reportReasons[campaignId][reportersForThisCampaign[i]];\r\n            }\r\n\r\n        return (reportersForThisCampaign, reasonsForThisCampaign);\r\n    }\r\n\r\n    //get info of campaign by phone or email\r\n    function getCampaignsByPhoneOrEmail(string memory _phoneNumber) public onlyModerator view returns (Campaign[] memory) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < numberOfCampaigns; i++) {\r\n            if (keccak256(abi.encodePacked(campaigns[i].phoneNumber)) == keccak256(abi.encodePacked(_phoneNumber))) {\r\n                count++;\r\n            }\r\n        }\r\n        Campaign[] memory campaignsByPhoneOrEmail = new Campaign[](count);\r\n        uint256 j = 0;\r\n        for (uint256 i = 0; i < numberOfCampaigns; i++) {\r\n            if (keccak256(abi.encodePacked(campaigns[i].phoneNumber)) == keccak256(abi.encodePacked(_phoneNumber))) {\r\n                campaignsByPhoneOrEmail[j] = campaigns[i];\r\n                j++;\r\n            }\r\n        }\r\n        return campaignsByPhoneOrEmail;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_MyCampaign\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"byModerator\",\"type\":\"address\"}],\"name\":\"CampaignClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"CampaignReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"CampaignStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CampaignWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DonationReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bySuperMod\",\"type\":\"address\"}],\"name\":\"ModeratorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bySuperMod\",\"type\":\"address\"}],\"name\":\"ModeratorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superModerator\",\"type\":\"address\"}],\"name\":\"SuperModeratorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superModerator\",\"type\":\"address\"}],\"name\":\"SuperModeratorRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeCampaignIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moderator\",\"type\":\"address\"}],\"name\":\"addModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superModerator\",\"type\":\"address\"}],\"name\":\"addSuperModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"phoneNumber\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"videoLinkFromPinata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"typeOfCampaign\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"cashedOut\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCheckedByWebsite\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"websiteComment\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"closeCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_phoneNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_videoLinkFromPinata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"createCampaign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_comment\",\"type\":\"string\"}],\"name\":\"donateToCampaign\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCampaigns\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"phoneNumber\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"videoLinkFromPinata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"typeOfCampaign\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"donators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"donations\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"comments\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"cashedOut\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCheckedByWebsite\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"websiteComment\",\"type\":\"string\"}],\"internalType\":\"struct MyCampaign.Campaign[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_phoneNumber\",\"type\":\"string\"}],\"name\":\"getCampaignsByPhoneOrEmail\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"phoneNumber\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollected\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"videoLinkFromPinata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"typeOfCampaign\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"donators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"donations\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"comments\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"cashedOut\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCheckedByWebsite\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"websiteComment\",\"type\":\"string\"}],\"internalType\":\"struct MyCampaign.Campaign[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDonators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"getReportReasonsOfCampaign\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuperModsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfCampaigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moderator\",\"type\":\"address\"}],\"name\":\"removeModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superModerator\",\"type\":\"address\"}],\"name\":\"removeSuperModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"reportCampaign\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"stopCampaignByMod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_websiteComment\",\"type\":\"string\"}],\"name\":\"verifyCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MyCampaign", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a2d4c7d1af6a266b446b5264f74ec34e582cce1c", "EVMVersion": "paris", "Library": "", "LicenseType": "BSL 1.1", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a5bb861db1d0a9ef4e30011f3920241c0762dea1762ed5492309377a806f4d8e"}