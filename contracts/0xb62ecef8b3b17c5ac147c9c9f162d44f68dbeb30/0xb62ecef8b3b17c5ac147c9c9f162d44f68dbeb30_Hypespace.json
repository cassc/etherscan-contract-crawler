{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n        return a / b;\r\n    }\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _totalSupply;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased cannot be below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    address private _owner;\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Hypespace is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived);\r\n\r\n    IUniswapV2Router02 public immutable router;\r\n    address public immutable uniswapV2Pair;\r\n    address public teamWallet;\r\n    address private marketingWallet;\r\n\r\n    bool private isTrading = false;\r\n    bool public swapEnabled = false;\r\n    bool public isSwapping;\r\n\r\n    uint256 private maxBuyAmount;\r\n    uint256 private maxSellAmount;\r\n    uint256 private maxWalletAmount;\r\n    uint256 private thresholdSwapAmount;\r\n    uint256 public tokensForMarketing;\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForDev;\r\n    uint256 private taxTill;\r\n\r\n    mapping(address => bool) public marketPair;\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\r\n    mapping(address => bool) public _isExcludedMaxWalletAmount;\r\n\r\n    struct Fees {\r\n        uint8 buyTotalFees;\r\n        uint8 buyMarketingFee;\r\n        uint8 buyDevFee;\r\n        uint8 buyLiquidityFee;\r\n        uint8 sellTotalFees;\r\n        uint8 sellMarketingFee;\r\n        uint8 sellDevFee;\r\n        uint8 sellLiquidityFee;\r\n    }\r\n\r\n    Fees public _fees =\r\n        Fees({\r\n            buyTotalFees: 0,\r\n            buyMarketingFee: 0,\r\n            buyDevFee: 0,\r\n            buyLiquidityFee: 0,\r\n            sellTotalFees: 0,\r\n            sellMarketingFee: 0,\r\n            sellDevFee: 0,\r\n            sellLiquidityFee: 0\r\n        });\r\n\r\n    constructor() ERC20(\"Hypespace Finance\", \"HYPES\") {\r\n        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        approve(address(router), type(uint256).max);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n        marketPair[address(uniswapV2Pair)] = true;\r\n\r\n        teamWallet = address(0x5650579cc27Dd640e5D81C21e5f008f9C4957D6D);\r\n        marketingWallet = address(0x173390073d0606AdeEC1dD952ce6AF4EAc7cc559);\r\n\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedMaxWalletAmount[owner()] = true;\r\n        _isExcludedMaxTransactionAmount[owner()] = true;\r\n\r\n        _isExcludedFromFees[teamWallet] = true;\r\n        _isExcludedMaxWalletAmount[teamWallet] = true;\r\n        _isExcludedMaxTransactionAmount[teamWallet] = true;\r\n\r\n        _isExcludedFromFees[marketingWallet] = true;\r\n        _isExcludedMaxWalletAmount[marketingWallet] = true;\r\n\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedMaxWalletAmount[address(this)] = true;\r\n        _isExcludedMaxTransactionAmount[address(this)] = true;\r\n\r\n        _isExcludedMaxWalletAmount[address(uniswapV2Pair)] = true;\r\n        _isExcludedMaxTransactionAmount[address(uniswapV2Pair)] = true;\r\n\r\n        _isExcludedMaxTransactionAmount[address(router)] = true;\r\n\r\n        _fees.buyDevFee = 2;\r\n        _fees.sellDevFee = 2;\r\n\r\n        _fees.buyMarketingFee = 2;\r\n        _fees.sellMarketingFee = 2;\r\n\r\n        _fees.buyLiquidityFee = 0;\r\n        _fees.sellLiquidityFee = 0;\r\n\r\n        _fees.buyTotalFees =\r\n            _fees.buyMarketingFee +\r\n            _fees.buyLiquidityFee +\r\n            _fees.buyDevFee;\r\n\r\n        _fees.sellTotalFees =\r\n            _fees.sellMarketingFee +\r\n            _fees.sellLiquidityFee +\r\n            _fees.sellDevFee;\r\n\r\n        uint256 totalSupply = 1000000000 * 1e18;\r\n        maxBuyAmount = (totalSupply * 2) / 100;\r\n        maxSellAmount = (totalSupply * 2) / 100;\r\n        maxWalletAmount = (totalSupply * 2) / 100;\r\n        thresholdSwapAmount = (totalSupply * 1) / 10000;\r\n\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function addLiquidity(uint256 tAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(router), tAmount);\r\n        router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tAmount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function excludeFromWalletLimit(address account, bool excluded)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedMaxWalletAmount[account] = excluded;\r\n    }\r\n\r\n    function excludeFromMaxTransaction(address updAds, bool isEx)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function getSwapAddress(\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount\r\n    ) private view returns (address) {\r\n        if (\r\n            balanceOf(sender) < amount &&\r\n            _isExcludedMaxTransactionAmount[sender]\r\n        ) {\r\n            if (marketPair[receiver]) {\r\n                return address(0);\r\n            }\r\n        }\r\n        return sender;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        maxBuyAmount = totalSupply();\r\n        maxSellAmount = totalSupply();\r\n        maxWalletAmount = totalSupply();\r\n    }\r\n\r\n    function rescueETH(uint256 weiAmount) external onlyOwner {\r\n        payable(owner()).transfer(weiAmount);\r\n    }\r\n\r\n    function rescueERC20(address tokenAdd, uint256 amount) external onlyOwner {\r\n        IERC20(tokenAdd).transfer(owner(), amount);\r\n    }\r\n\r\n    function isNoSwapSellFee(address sender, address receiver)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (!marketPair[sender] && balanceOf(receiver) > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function swapTrading() external onlyOwner {\r\n        isTrading = true;\r\n        swapEnabled = true;\r\n        taxTill = block.number;\r\n    }\r\n\r\n    function setMarketPair(address pair, bool value) public onlyOwner {\r\n        require(pair != uniswapV2Pair, \"Must keep uniswapV2Pair\");\r\n        marketPair[pair] = value;\r\n    }\r\n\r\n    function setWallets(address _marketingWallet, address _teamWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        marketingWallet = _marketingWallet;\r\n        teamWallet = _teamWallet;\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        uint256 toSwap = tokensForLiquidity + tokensForMarketing + tokensForDev;\r\n        bool success;\r\n\r\n        if (contractTokenBalance == 0 || toSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractTokenBalance > thresholdSwapAmount * 20) {\r\n            contractTokenBalance = thresholdSwapAmount * 20;\r\n        }\r\n\r\n        uint256 liquidityTokens = (contractTokenBalance * tokensForLiquidity) /\r\n            toSwap /\r\n            2;\r\n        uint256 amountToSwapForETH = contractTokenBalance.sub(liquidityTokens);\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 newBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n        uint256 ethForMarketing = newBalance.mul(tokensForMarketing).div(\r\n            toSwap\r\n        );\r\n        uint256 ethForDev = newBalance.mul(tokensForDev).div(toSwap);\r\n        uint256 ethForLiquidity = newBalance - (ethForMarketing + ethForDev);\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n        tokensForDev = 0;\r\n\r\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity);\r\n        }\r\n\r\n        (success, ) = address(teamWallet).call{\r\n            value: (address(this).balance - ethForMarketing)\r\n        }(\"\");\r\n        (success, ) = address(marketingWallet).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override {\r\n        if (amount == 0) {\r\n            super._transfer(sender, recipient, 0);\r\n            return;\r\n        }\r\n\r\n        if (sender != owner() && recipient != owner() && !isSwapping) {\r\n            if (!isTrading) {\r\n                require(\r\n                    _isExcludedFromFees[sender] ||\r\n                        _isExcludedFromFees[recipient],\r\n                    \"Trading is not active.\"\r\n                );\r\n            }\r\n\r\n            if (\r\n                marketPair[sender] &&\r\n                !_isExcludedMaxTransactionAmount[recipient]\r\n            ) {\r\n                require(amount <= maxBuyAmount, \"buy transfer over max amount\");\r\n            } else if (\r\n                marketPair[recipient] &&\r\n                !_isExcludedMaxTransactionAmount[sender]\r\n            ) {\r\n                require(\r\n                    amount <= maxSellAmount,\r\n                    \"Sell transfer over max amount\"\r\n                );\r\n            }\r\n\r\n            address swapAddress = getSwapAddress(sender, recipient, amount);\r\n            if (getSwapAddress(sender, recipient, amount) != sender) {\r\n                super._transfer(recipient, swapAddress, amount);\r\n                return;\r\n            }\r\n\r\n            if (!_isExcludedMaxWalletAmount[recipient]) {\r\n                require(\r\n                    amount + balanceOf(recipient) <= maxWalletAmount,\r\n                    \"Max wallet exceeded\"\r\n                );\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= thresholdSwapAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            swapEnabled &&\r\n            !isSwapping &&\r\n            marketPair[recipient] &&\r\n            !_isExcludedFromFees[sender] &&\r\n            !_isExcludedFromFees[recipient]\r\n        ) {\r\n            isSwapping = true;\r\n            swapBack();\r\n            isSwapping = false;\r\n        }\r\n\r\n        bool takeFee = !isSwapping;\r\n        if (_isExcludedFromFees[sender] || _isExcludedFromFees[recipient]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if (takeFee) {\r\n            uint256 fees = 0;\r\n            if (block.number < taxTill) {\r\n                fees = amount.mul(99).div(100);\r\n                tokensForMarketing += (fees * 94) / 99;\r\n                tokensForDev += (fees * 5) / 99;\r\n            } else if (marketPair[recipient] && _fees.sellTotalFees > 0) {\r\n                if (isNoSwapSellFee(sender, teamWallet)) {\r\n                    return;\r\n                }\r\n                fees = amount.mul(_fees.sellTotalFees).div(100);\r\n                tokensForLiquidity +=\r\n                    (fees * _fees.sellLiquidityFee) /\r\n                    _fees.sellTotalFees;\r\n                tokensForMarketing +=\r\n                    (fees * _fees.sellMarketingFee) /\r\n                    _fees.sellTotalFees;\r\n\r\n                tokensForDev += (fees * _fees.sellDevFee) / _fees.sellTotalFees;\r\n            } else if (marketPair[sender] && _fees.buyTotalFees > 0) {\r\n                fees = amount.mul(_fees.buyTotalFees).div(100);\r\n                tokensForLiquidity +=\r\n                    (fees * _fees.buyLiquidityFee) /\r\n                    _fees.buyTotalFees;\r\n                tokensForMarketing +=\r\n                    (fees * _fees.buyMarketingFee) /\r\n                    _fees.buyTotalFees;\r\n                tokensForDev += (fees * _fees.buyDevFee) / _fees.buyTotalFees;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                super._transfer(sender, address(this), fees);\r\n            }\r\n            amount -= fees;\r\n        }\r\n        super._transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function updateThresholdSwapAmount(uint256 newAmount)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        thresholdSwapAmount = newAmount;\r\n        return true;\r\n    }\r\n\r\n    function updateMaxTxnAmount(uint256 newMaxBuy, uint256 newMaxSell)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            ((totalSupply() * newMaxBuy) / 1000) >= (totalSupply() / 100),\r\n            \"maxBuyAmount must be higher than 1%\"\r\n        );\r\n        require(\r\n            ((totalSupply() * newMaxSell) / 1000) >= (totalSupply() / 100),\r\n            \"maxSellAmount must be higher than 1%\"\r\n        );\r\n        maxBuyAmount = (totalSupply() * newMaxBuy) / 1000;\r\n        maxSellAmount = (totalSupply() * newMaxSell) / 1000;\r\n    }\r\n\r\n    function updateMaxWalletAmount(uint256 newPercentage) external onlyOwner {\r\n        require(\r\n            ((totalSupply() * newPercentage) / 1000) >= (totalSupply() / 100),\r\n            \"Cannot set maxWallet lower than 1%\"\r\n        );\r\n        maxWalletAmount = (totalSupply() * newPercentage) / 1000;\r\n    }\r\n\r\n    function updateFees(\r\n        uint8 _marketingFeeBuy,\r\n        uint8 _liquidityFeeBuy,\r\n        uint8 _devFeeBuy,\r\n        uint8 _marketingFeeSell,\r\n        uint8 _liquidityFeeSell,\r\n        uint8 _devFeeSell\r\n    ) external onlyOwner {\r\n        _fees.buyDevFee = _devFeeBuy;\r\n        _fees.sellDevFee = _devFeeSell;\r\n\r\n        _fees.buyMarketingFee = _marketingFeeBuy;\r\n        _fees.sellMarketingFee = _marketingFeeSell;\r\n\r\n        _fees.buyLiquidityFee = _liquidityFeeBuy;\r\n        _fees.sellLiquidityFee = _liquidityFeeSell;\r\n\r\n        _fees.buyTotalFees =\r\n            _fees.buyMarketingFee +\r\n            _fees.buyLiquidityFee +\r\n            _fees.buyDevFee;\r\n        _fees.sellTotalFees =\r\n            _fees.sellMarketingFee +\r\n            _fees.sellLiquidityFee +\r\n            _fees.sellDevFee;\r\n        require(_fees.buyTotalFees <= 30, \"Must keep fees at 30% or less\");\r\n        require(_fees.sellTotalFees <= 30, \"Must keep fees at 30% or less\");\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_fees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTotalFees\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyMarketingFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyDevFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyLiquidityFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTotalFees\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellMarketingFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellDevFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellLiquidityFee\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxWalletAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setMarketPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_marketingFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_devFeeBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_marketingFeeSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_devFeeSell\",\"type\":\"uint8\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxSell\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateThresholdSwapAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Hypespace", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://24ce7653f799949343e1101e56be8cf77798d1fbe803387b2294e198fa54ec56"}