{"SourceCode": "/*\r\n\r\nHi friends. This #1 DEI community in world. We honor people. Fight bigot. Bring DEI to NBA and all place.\r\n\r\nYou join us: https://weidei.xyz\r\n\r\nhttps://t.me/diversityequityandinclusion\r\nhttps://twitter.com/wuwei113\r\nhttps://twitter.com/dei4all\r\n\r\n\r\n\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%#%#######**##%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%######*#*******###%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%##+**+++****###%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%#%#%@%%@@%#+*#%#***###%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#%%@@@@@@@@@@@#+*#@%*****####%%%%@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%##@@@@@@@@@@@@@@@%**%%*##++++****##%%@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@%*+*%@@@%@@@@@@@@@@@@@@%##*%%*++++++*##%%%@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@%%%%@@@@@%%%%%@@@@@@@@##*%@@@@@@@@@@@@@@@@@@@%@%**%##*====+**##%%@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@%%#####%####***@@@@@@@@%*#@@@@@@@@@@@@@@@@@@@@%**%+==+#*----==++**###@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@%##******++++++*@@@@@@@@#+#%%@@@@@@@@@@@@@@@@@@@@%+*+++***+----===++***#%@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@#**++++========+%@@@@@@@%++*+++*##%@@@@@@@@@@@@%%##+++-*%%%#*----====+++**%@@@@@@@@@@@@@\r\n@@@@@@@@@@@#++++==========+%@@@@@@@@%*+====++++#@@@%@@@@@@@%*#+++++=#%@%%*---====+++***%@@@@@@@@@@@@\r\n@@@@@@@@@@#+++============*@@@@@@@@%#**=--=-++***%@%%%%%@@%#++*+=*#=+%%@@#=--=====++++**%@@@@@@@@@@@\r\n@@@@@@@@@#+++============+*@@@@@@@@%#*+--:+=-==*+*#%%##*%%*++*=%*#%%**%@@@==-======+++++*%@@@@@@@@@@\r\n@@@@@@@@%++======-----===+%@@@@@@@%%*+==---=--+=+*==%%#=+++*#%%*%%@%@#%@@@=+========+++++*@@@@@@@@@@\r\n@@@@@@@@+====-----------=*@@@@@@@@#*+=+===+==-====-==+#++=#%%@%%#@%%@@%@@@+==========+++++#@@@@@@@@@\r\n@@@@@@@#===-------------=#@@@@@@@#*++++=--====+++-==-+-+#*+#%%@@%#@%@@@%@#*=--=========++++%@@@@@@@@\r\n@@@@@@@+---------::::::-=@@@@@@%#******=-:-:-+=:-+==-=+-=*+=*##@@#@@@@@@%**------=========+*@@@@@@@@\r\n@@@@@@%--------:::::::--%@@@@@%%%%@@@%%#*=--:+=-::--++=-::++++**#%%@%@@@@**--------========+@@@@@@@@\r\n@@@@@@*--------::::::--+@@@@@+--=*++=++*+==-:--=+++*+**++=+::===*+*%%@@@@*+----------=======#@@@@@@@\r\n@@@@@@=--------::::::=-#%%@**++*#%%#==+*+=-:..:=-=++=:-.......:..-+##@@@@%==-----------=====*@@@@@@@\r\n@@@@@@---------::::::-*++##*=:**=%%%+++*+==...=++=++++*==-.:....---#*%%@@%--------------====+@@@@@@@\r\n@@@@@@---------:::::-==++%-+::-====+##*#*+=-:+-+=::-%@@**+:--==:...=*%%*%@+==-----------====+@@@@@@@\r\n@@@@@%----------::::+++:=#:-::---=+****%=++-:=-.++=+---==+*=......:++*==*%+==-------------==+@@@@@@@\r\n@@@%%%-:::::----:::-++-:-+=:::::--=+++*#+=++===..-++----..--......-:--:+=++::::-----------==+@@@@@@@\r\n@%%%%%-:::::::::::::++-::=+=-::::-=++*#*+=..=+:++-:::::...+.......=*-:.+=*+-:::::----------=*@@@@@@@\r\n%%%%%%=..:::::::::::+=+-==-:+=:::-+*#%#*-::..-+=.-:::::.:+:.......=--=.+*#==::::::---------=#@@@@@@@\r\n%%%%##*........:::::======+::-==++*#%*=---:....-=+++====-.........=:-:++*#:=:::::::--------=%@@@@@@@\r\n%%%##*#..........::::-:--+#-::::--=*#***+==--=+==+=-:::.............:=#**#-=--::::---------+@@@@@@@@\r\n%%%###*=.........:::::::-+#*------=+****+*+-=+=:.:*--::............-++**##+==-:::---------=%@@@@@@@@\r\n%%%%##*#........:::---==-+%%=----=+=++++=::#:.....:---::.........-#*%**+*%*==+:----------=+@@@@@@@@@\r\n@%%%%##**....:::::-+***+*%%@#---=+***#%%%#+---:...:==-:::.......:#%%%**+###==-=---------==@@@@@@@@@@\r\n@%%%%%%#%+.:::::::-=**###@@@@#===+#%@@%@###***++*+*%#-:::......:#%##@***%%*++-----------=#@@@@@@@@@@\r\n@@%%%%%%%%=.:::-:::-=***@@@@@@%+++*##%%@%****+==:::-#=:::......*%%%%%**#@%++=++=------==#@@@@@@@@@@@\r\n@@@@@%%%%%%=::====--++#%@@@@@@@%******#%%%*++==--:.:---:::....:%#%%%%+*%@%*=++==----===*@@@@@@@@@@@@\r\n@@@@@@@@@@@@==*%###*##%@@@@@@@@@@*++++**#%%%%*+-::::::::::::..-*+%%#*+#%@%*=++=+-----=*@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@%%%%%%%%%%@@@@@@@@@@#%*===++**#*=-::::::::::::...-##%%*+-**%++*+==------#@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@%%%%%%%%@@@@@@@@@@##%+++=++***-:::::::--:::.....#*##+*+*+*+--*--=---=%@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@#*+*###%%%%@@@@@@%*%+=++**####*+=====-:::.....:**##**#%#+++=+==---*@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@%+##****+#%@@@@@%%*+-==+**#%%%#+=---:::......:+##*##%@%*+++===-=#@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@%+**-==+%#%@@@@@@*---==+*###+=---:::::....-=*#+=+*#%##%##*=+#%@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@%=+--=+=-*@%@@@#----==+***+==--:::::...--=%@*:=#-==#*%%#%%%%%@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@%%+-=*-=*%@@@%+----==++**##*=--:::-:.:-+#@@%=-+=+==+####%%%%@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@%%#**+*%@#%+*-----==++***#*+=--:::::=**##%@@#*+#%#*###%%%%%@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%#%*=*-----==+++**##*=----:-+**+**+#%@@%%%###%%%%%%@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%*#===--===++**###+---++***==**%@@%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@%@@@@@@@%#*+++++*#%#+=+##*##%@@@@@@@@@%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n\r\n*/ \r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n/// Uniswap factory interface\r\ninterface IFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\n/// Uniswap Router interface\r\ninterface IUniswapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\n\r\n/// @title DEI: Diversity Equity and Inclusion\r\ncontract DEI is ERC20, Ownable {\r\n    /// @notice MAX SUPPLY 1 Billion DEI\r\n    uint256 private constant MAX_SUPPLY = 1_000_000_000 * 1e18;\r\n    /// @notice max buy per tx\r\n    uint256 maxBuyAmountPerTx = MAX_SUPPLY / 100;\r\n    /// @notice max sell per tx\r\n    uint256 maxSellAmountPerTx = MAX_SUPPLY / 100;\r\n    /// @notice marketing wallet address\r\n    address public marketingWallet = 0x2d28DAe821982842f2Af805BF0FA7384E69EA7b6;\r\n    /// @notice WeiWuSalary wallet address\r\n    address public weiWuSalaryWallet =\r\n        0xC0Cc0E340c7a6F154c86ec0455ffF55f1c07B868;\r\n    /// @notice uniswapV2Router\r\n    IUniswapRouter public immutable uniswapV2Router;\r\n    /// @notice uniswapPair\r\n    address public immutable uniswapPair;\r\n    /// fees struct\r\n    struct BuyFee {\r\n        uint256 marketing;\r\n        uint256 weiWuSalary;\r\n        uint256 autoLP;\r\n    }\r\n    struct SellFee {\r\n        uint256 marketing;\r\n        uint256 weiWuSalary;\r\n        uint256 autoLP;\r\n    }\r\n\r\n    /// @notice buyFee\r\n    BuyFee public buyFee;\r\n    /// @notice sellFee\r\n    SellFee public sellFee;\r\n    /// @notice swapping status\r\n    bool swapping = false;\r\n    /// @notice tax is modifiable or not\r\n    bool taxIsLocked = false;\r\n    /// @notice tax admin\r\n    address taxAdmin;\r\n    /// @notice manage exclude / incclude from fees\r\n    mapping(address => bool) isExcludedFromFees;\r\n\r\n    ///  errors\r\n    error OnlyMarketingWallet();\r\n    error MaxBuyPerTxExceeds();\r\n    error MaxSellPerTxExceeds();\r\n    error OnlyTaxAdmin();\r\n    error Renounced();\r\n    error MinOnePercent();\r\n\r\n    constructor() ERC20(\"Diversity Equity and Inclusion\", \"DEI\") {\r\n        uniswapV2Router = IUniswapRouter(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        uniswapPair = IFactory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n        taxAdmin = address(0xaBDF7661B28698fD6Db04991968E0DfaCd949411);\r\n\r\n        buyFee.marketing = 1;\r\n        buyFee.weiWuSalary = 1;\r\n        buyFee.autoLP = 1;\r\n\r\n        sellFee.marketing = 1;\r\n        sellFee.weiWuSalary = 1;\r\n        sellFee.autoLP = 1;\r\n\r\n        isExcludedFromFees[owner()] = true;\r\n        isExcludedFromFees[address(this)] = true;\r\n        isExcludedFromFees[marketingWallet] = true;\r\n        isExcludedFromFees[weiWuSalaryWallet] = true;\r\n        _mint(msg.sender, MAX_SUPPLY);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /// @dev claim any erc20 token, accidently sent to token contract\r\n    /// @param token: token to rescue\r\n    /// @param amount: amount to rescue\r\n    /// Requirements -\r\n    /// only marketing wallet can rescue stucked tokens\r\n    function claimStuckedERC20(address token, uint256 amount) external {\r\n        if (msg.sender != marketingWallet) {\r\n            revert OnlyMarketingWallet();\r\n        }\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, marketingWallet, amount)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"BARC: TOKEN_CLAIM_FAILED\"\r\n        );\r\n    }\r\n\r\n    /// @dev exclude or include a address from / to fees\r\n    /// @param user: user address to exclude or include\r\n    /// @param excluded: true to exclude, false to include\r\n    function exlcudeFromFees(address user, bool excluded) external onlyOwner {\r\n        isExcludedFromFees[user] = excluded;\r\n    }\r\n\r\n    /// @dev update max buy  amount per tx globally\r\n    /// @param _percent: pecent of total supply\r\n    /// Requirements -\r\n    /// must be 1 or more\r\n    function updateBuyAmountPerTx(uint256 _percent) external onlyOwner {\r\n        if (_percent < 1) {\r\n            revert MinOnePercent();\r\n        }\r\n        maxBuyAmountPerTx = (totalSupply() * _percent) / 100;\r\n    }\r\n\r\n    /// @dev update max sell amount per tx globally\r\n    ///  /// @param _percent: pecent of total supply\r\n    /// Requirements -\r\n    /// must be 1 or more\r\n    function updateSellAmountPerTx(uint256 _percent) external onlyOwner {\r\n        if (_percent < 1) {\r\n            revert MinOnePercent();\r\n        }\r\n        maxSellAmountPerTx = (totalSupply() * _percent) / 100;\r\n    }\r\n\r\n    /// @dev update buy tax globally\r\n    /// @param _marketing: new  marketing tax on buy\r\n    /// @param _wwsalary: new wei wu tax on buy\r\n    /// @param _lp: new lp tax on buy\r\n    function updateBuyTax(\r\n        uint256 _marketing,\r\n        uint256 _wwsalary,\r\n        uint256 _lp\r\n    ) external {\r\n        if (taxIsLocked) {\r\n            revert Renounced();\r\n        }\r\n        if(owner() != address(0)){\r\n            require (msg.sender == owner());\r\n        } else {\r\n           require ( msg.sender == taxAdmin);\r\n        }\r\n        buyFee.marketing = _marketing;\r\n        buyFee.weiWuSalary = _wwsalary;\r\n        buyFee.autoLP = _lp;\r\n    }\r\n\r\n    /// @dev update sell tax globally\r\n    /// @param _marketing: new  marketing tax on sell\r\n    /// @param _wwsalary: new wei wu tax on sell\r\n    /// @param _lp: new lp tax on sell\r\n    function updateSellTax(\r\n        uint256 _marketing,\r\n        uint256 _wwsalary,\r\n        uint256 _lp\r\n    ) external {\r\n        if (taxIsLocked) {\r\n            revert Renounced();\r\n        }\r\n        if(owner() != address(0)){\r\n            require (msg.sender == owner());\r\n        } else {\r\n           require ( msg.sender == taxAdmin);\r\n        }\r\n        sellFee.marketing = _marketing;\r\n        sellFee.weiWuSalary = _wwsalary;\r\n        sellFee.autoLP = _lp;\r\n    }\r\n\r\n    /// @dev renounce Tax lock status\r\n    /// Once this is called, tax values won't be\r\n    /// changeable anymore\r\n    function revokeTaxOwnership() external {\r\n        if (msg.sender != taxAdmin) {\r\n            revert OnlyTaxAdmin();\r\n        }\r\n        if (taxIsLocked) {\r\n            revert Renounced();\r\n        }\r\n        taxIsLocked = true;\r\n    }\r\n\r\n    /// @notice manage token transfer and fees\r\n    ///         fees is applicable for first 48 hours from launch\r\n    ///         after 48 hours, fees will become zero globally\r\n    /// @dev See {ERC20-_transfer}\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        bool takeFee = true;\r\n        if (isExcludedFromFees[from] || isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if (takeFee) {\r\n            uint256 fee;\r\n            uint256 weiWuSalaryTax;\r\n            if (from == uniswapPair) {\r\n                if (amount > maxBuyAmountPerTx) {\r\n                    revert MaxBuyPerTxExceeds();\r\n                }\r\n                uint256 totalBuyFee = buyFee.marketing +\r\n                    buyFee.weiWuSalary +\r\n                    buyFee.autoLP;\r\n                if (totalBuyFee > 0) {\r\n                    fee = (amount * totalBuyFee) / 100;\r\n                    weiWuSalaryTax = (fee * buyFee.weiWuSalary) / totalBuyFee;\r\n                }\r\n            } else if (to == uniswapPair) {\r\n                if (amount > maxSellAmountPerTx) {\r\n                    revert MaxSellPerTxExceeds();\r\n                }\r\n                uint256 totalSellFee = sellFee.marketing +\r\n                    sellFee.weiWuSalary +\r\n                    sellFee.autoLP;\r\n                if (totalSellFee > 0) {\r\n                    fee = (amount * totalSellFee) / 100;\r\n                    weiWuSalaryTax = (fee * sellFee.weiWuSalary) / totalSellFee;\r\n                }\r\n            }\r\n\r\n            amount = amount - fee;\r\n            if (fee > 0) {\r\n                super._transfer(from, address(this), fee);\r\n            }\r\n            if (weiWuSalaryTax > 0) {\r\n                super._transfer(\r\n                    address(this),\r\n                    weiWuSalaryWallet,\r\n                    weiWuSalaryTax\r\n                );\r\n            }\r\n            \r\n        }\r\n        uint256 contractBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractBalance >= 100e18 &&\r\n            from != uniswapPair &&\r\n            (!isExcludedFromFees[from]) &&\r\n            !swapping;\r\n        if (canSwap) {\r\n            swapping = true;\r\n            swapAndLiquify(contractBalance);\r\n            swapping = false;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    /// @notice swap and liquify\r\n    /// transfer collected tax to designated addresses as per there share\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        uint256 total = buyFee.autoLP +\r\n            sellFee.autoLP +\r\n            buyFee.marketing +\r\n            sellFee.marketing;\r\n        uint256 lpHalf = ((buyFee.autoLP + sellFee.autoLP) * tokens) /\r\n            (total * 2);\r\n        uint256 tokensForSwap = (tokens - lpHalf);\r\n        swapTokensForETH(tokensForSwap);\r\n        uint256 ethBalance = address(this).balance;\r\n        uint256 lpEth = (ethBalance * lpHalf) / tokens;\r\n        if (lpEth > 0 && lpHalf > 0) {\r\n            addLiquidity(lpEth, lpHalf);\r\n        }\r\n        if (address(this).balance > 0) {\r\n            bool sent;\r\n            (sent, ) = marketingWallet.call{value: address(this).balance}(\"\");\r\n        }\r\n    }\r\n\r\n    ///@notice swap the tax tokens for eth and send to marketing wallet\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> wbnb\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        if (allowance(address(this), address(uniswapV2Router)) < tokenAmount) {\r\n            _approve(\r\n                address(this),\r\n                address(uniswapV2Router),\r\n                type(uint256).max\r\n            );\r\n        }\r\n\r\n        uint256 out = uniswapV2Router.getAmountsOut(tokenAmount, path)[1];\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            (out * 80) / 100, //20% Slippage\r\n            path,\r\n            address(this),\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n\r\n    /// add liquidity\r\n    function addLiquidity(uint256 ethAmount, uint256 tokens) private {\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokens,\r\n            0,\r\n            0,\r\n            address(0xdead), // burn lp\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MaxBuyPerTxExceeds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSellPerTxExceeds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinOnePercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMarketingWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyTaxAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Renounced\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiWuSalary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoLP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimStuckedERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"exlcudeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeTaxOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weiWuSalary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoLP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateBuyAmountPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wwsalary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lp\",\"type\":\"uint256\"}],\"name\":\"updateBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateSellAmountPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wwsalary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lp\",\"type\":\"uint256\"}],\"name\":\"updateSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiWuSalaryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DEI", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cf1d7ac884870240c7c5494231d4e0c47c1f22f7e13e6b1699687b5c28ce4d3d"}