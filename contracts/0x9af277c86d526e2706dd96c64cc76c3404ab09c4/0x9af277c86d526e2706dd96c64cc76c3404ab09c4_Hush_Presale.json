{"SourceCode": "// HHHHHHHHH     HHHHHHHHHUUUUUUUU     UUUUUUUU   SSSSSSSSSSSSSSS HHHHHHHHH     HHHHHHHHH\r\n// H:::::::H     H:::::::HU::::::U     U::::::U SS:::::::::::::::SH:::::::H     H:::::::H\r\n// H:::::::H     H:::::::HU::::::U     U::::::US:::::SSSSSS::::::SH:::::::H     H:::::::H\r\n// HH::::::H     H::::::HHUU:::::U     U:::::UUS:::::S     SSSSSSSHH::::::H     H::::::HH\r\n//   H:::::H     H:::::H   U:::::U     U:::::U S:::::S              H:::::H     H:::::H  \r\n//   H:::::H     H:::::H   U:::::D     D:::::U S:::::S              H:::::H     H:::::H  \r\n//   H::::::HHHHH::::::H   U:::::D     D:::::U  S::::SSSS           H::::::HHHHH::::::H  \r\n//   H:::::::::::::::::H   U:::::D     D:::::U   SS::::::SSSSS      H:::::::::::::::::H  \r\n//   H:::::::::::::::::H   U:::::D     D:::::U     SSS::::::::SS    H:::::::::::::::::H  \r\n//   H::::::HHHHH::::::H   U:::::D     D:::::U        SSSSSS::::S   H::::::HHHHH::::::H  \r\n//   H:::::H     H:::::H   U:::::D     D:::::U             S:::::S  H:::::H     H:::::H  \r\n//   H:::::H     H:::::H   U::::::U   U::::::U             S:::::S  H:::::H     H:::::H  \r\n// HH::::::H     H::::::HH U:::::::UUU:::::::U SSSSSSS     S:::::SHH::::::H     H::::::HH\r\n// H:::::::H     H:::::::H  UU:::::::::::::UU  S::::::SSSSSS:::::SH:::::::H     H:::::::H\r\n// H:::::::H     H:::::::H    UU:::::::::UU    S:::::::::::::::SS H:::::::H     H:::::::H\r\n// HHHHHHHHH     HHHHHHHHH      UUUUUUUUU       SSSSSSSSSSSSSSS   HHHHHHHHH     HHHHHHHHH\r\n\r\n\r\n// website: https://hush.fi\r\n// whitepaper: https://hush.fi/whitepaper\r\n\r\n// SPDX-License-Identifier: MIT\r\n// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev An operation with an ERC20 token failed.\r\n     */\r\n    error SafeERC20FailedOperation(address token);\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\r\n     * value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance < requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\ncontract Hush_Presale is ReentrancyGuard, Ownable(msg.sender) {\r\n    uint256 public overalllRaised;\r\n    uint256 public presaleId;\r\n    uint256 public USDT_MULTIPLIER;\r\n    uint256 public ETH_MULTIPLIER;\r\n    address public fundReceiver;\r\n    uint256 public uniqueBuyers;\r\n\r\n    struct PresaleData {\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 price;\r\n        uint256 nextStagePrice;\r\n        uint256 Sold;\r\n        uint256 tokensToSell;\r\n        uint256 UsdtHardcap;\r\n        uint256 amountRaised;\r\n        bool Active;\r\n        bool isEnableClaim;\r\n    }\r\n\r\n    struct VestingData {\r\n        uint256 vestingStartTime;\r\n        uint256 initialClaimPercent;\r\n        uint256 vestingTime;\r\n        uint256 vestingPercentage;\r\n        uint256 totalClaimCycles;\r\n    }\r\n\r\n    struct UserData {\r\n        uint256 investedAmount;\r\n        uint256 claimAt;\r\n        uint256 claimAbleAmount;\r\n        uint256 claimedVestingAmount;\r\n        uint256 claimedAmount;\r\n        uint256 claimCount;\r\n        uint256 activePercentAmount;\r\n    }\r\n\r\n    IERC20Metadata public USDTInterface;\r\n    IERC20Metadata public USDCInterface;\r\n    AggregatorV3Interface internal aggregatorInterface;\r\n\r\n    mapping(uint256 => bool) public paused;\r\n    mapping(uint256 => PresaleData) public presale;\r\n    mapping(uint256 => VestingData) public vesting;\r\n    mapping(address => mapping(uint256 => UserData)) public userClaimData;\r\n    mapping(address => bool) public isExcludeMinToken;\r\n    mapping(address => bool) public isBlackList;\r\n    mapping(address => bool) public isExist;\r\n\r\n    uint256 public MinTokenTobuy;\r\n    uint256 public currentSale;\r\n    address public SaleToken;\r\n\r\n    event PresaleCreated(\r\n        uint256 indexed _id,\r\n        uint256 _totalTokens,\r\n        uint256 _startTime,\r\n        uint256 _endTime\r\n    );\r\n\r\n    event PresaleUpdated(\r\n        bytes32 indexed key,\r\n        uint256 prevValue,\r\n        uint256 newValue,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event TokensBought(\r\n        address indexed user,\r\n        uint256 indexed id,\r\n        address indexed purchaseToken,\r\n        uint256 tokensBought,\r\n        uint256 amountPaid,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event TokensClaimed(\r\n        address indexed user,\r\n        uint256 indexed id,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event PresaleTokenAddressUpdated(\r\n        address indexed prevValue,\r\n        address indexed newValue,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event PresalePaused(uint256 indexed id, uint256 timestamp);\r\n    event PresaleUnpaused(uint256 indexed id, uint256 timestamp);\r\n\r\n    constructor(\r\n        address _oracle,\r\n        address _usdt,\r\n        address _usdc,\r\n        address _SaleToken,\r\n        uint256 _MinTokenTobuy\r\n    ) {\r\n        aggregatorInterface = AggregatorV3Interface(_oracle);\r\n        SaleToken = _SaleToken;\r\n        MinTokenTobuy = _MinTokenTobuy;\r\n        USDTInterface = IERC20Metadata(_usdt);\r\n        USDCInterface = IERC20Metadata(_usdc);\r\n        ETH_MULTIPLIER = (10**18);\r\n        USDT_MULTIPLIER = (10**6);\r\n        fundReceiver = msg.sender;\r\n    }\r\n\r\n    function createPresale(\r\n        uint256 _price,\r\n        uint256 _nextStagePrice,\r\n        uint256 _tokensToSell,\r\n        uint256 _UsdtHardcap\r\n    ) external onlyOwner {\r\n        require(_price > 0, \"Zero price\");\r\n        require(_tokensToSell > 0, \"Zero tokens to sell\");\r\n\r\n        presaleId++;\r\n\r\n        presale[presaleId] = PresaleData(\r\n            0,\r\n            0,\r\n            _price,\r\n            _nextStagePrice,\r\n            0,\r\n            _tokensToSell,\r\n            _UsdtHardcap,\r\n            0,\r\n            false,\r\n            false\r\n        );\r\n\r\n        emit PresaleCreated(presaleId, _tokensToSell, 0, 0);\r\n    }\r\n\r\n    function setPresaleStage(uint256 _id) public onlyOwner {\r\n        require(presale[_id].tokensToSell > 0, \"Presale don't exist\");\r\n        if (currentSale != 0) {\r\n            presale[currentSale].endTime = block.timestamp;\r\n            presale[currentSale].Active = false;\r\n        }\r\n        presale[_id].startTime = block.timestamp;\r\n        presale[_id].Active = true;\r\n        currentSale = _id;\r\n    }\r\n\r\n    function setPresaleVesting(\r\n        uint256[] memory _id,\r\n        uint256[] memory vestingStartTime,\r\n        uint256[] memory _initialClaimPercent,\r\n        uint256[] memory _vestingTime,\r\n        uint256[] memory _vestingPercentage\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < _id.length; i++) {\r\n            vesting[_id[i]] = VestingData(\r\n                vestingStartTime[i],\r\n                _initialClaimPercent[i],\r\n                _vestingTime[i],\r\n                _vestingPercentage[i],\r\n                (1000 - _initialClaimPercent[i]) / _vestingPercentage[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function updatePresaleVesting(\r\n        uint256 _id,\r\n        uint256 _vestingStartTime,\r\n        uint256 _initialClaimPercent,\r\n        uint256 _vestingTime,\r\n        uint256 _vestingPercentage\r\n    ) public onlyOwner {\r\n        vesting[_id].vestingStartTime = _vestingStartTime;\r\n        vesting[_id].initialClaimPercent = _initialClaimPercent;\r\n        vesting[_id].vestingTime = _vestingTime;\r\n        vesting[_id].vestingPercentage = _vestingPercentage;\r\n        vesting[_id].totalClaimCycles =\r\n            (100 - _initialClaimPercent) /\r\n            _vestingPercentage;\r\n    }\r\n\r\n    uint256 initialClaimPercent;\r\n    uint256 vestingTime;\r\n    uint256 vestingPercentage;\r\n    uint256 totalClaimCycles;\r\n\r\n    function enableClaim(uint256 _id, bool _status) public onlyOwner {\r\n        presale[_id].isEnableClaim = _status;\r\n    }\r\n\r\n    function updatePresale(\r\n        uint256 _id,\r\n        uint256 _price,\r\n        uint256 _nextStagePrice,\r\n        uint256 _tokensToSell,\r\n        uint256 _Hardcap,\r\n        bool isclaimAble\r\n    ) external onlyOwner {\r\n        require(_price > 0, \"Zero price\");\r\n        require(_tokensToSell > 0, \"Zero tokens to sell\");\r\n        require(_Hardcap > 0, \"Zero harcap\");\r\n        presale[_id].price = _price;\r\n        presale[_id].nextStagePrice = _nextStagePrice;\r\n        presale[_id].tokensToSell = _tokensToSell;\r\n        presale[_id].UsdtHardcap = _Hardcap;\r\n        presale[_id].isEnableClaim = isclaimAble;\r\n    }\r\n\r\n    function changeFundWallet(address _wallet) external onlyOwner {\r\n        require(_wallet != address(0), \"Invalid parameters\");\r\n        fundReceiver = _wallet;\r\n    }\r\n\r\n    function changeUSDTToken(address _newAddress) external onlyOwner {\r\n        require(_newAddress != address(0), \"Zero token address\");\r\n        USDTInterface = IERC20Metadata(_newAddress);\r\n    }\r\n\r\n    function changeUSDCToken(address _newAddress) external onlyOwner {\r\n        require(_newAddress != address(0), \"Zero token address\");\r\n        USDCInterface = IERC20Metadata(_newAddress);\r\n    }\r\n\r\n    function pausePresale(uint256 _id) external checkPresaleId(_id) onlyOwner {\r\n        require(!paused[_id], \"Already paused\");\r\n        paused[_id] = true;\r\n        emit PresalePaused(_id, block.timestamp);\r\n    }\r\n\r\n    function unPausePresale(uint256 _id)\r\n        external\r\n        checkPresaleId(_id)\r\n        onlyOwner\r\n    {\r\n        require(paused[_id], \"Not paused\");\r\n        paused[_id] = false;\r\n        emit PresaleUnpaused(_id, block.timestamp);\r\n    }\r\n\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (, int256 price, , , ) = aggregatorInterface.latestRoundData();\r\n        price = (price * (10**10));\r\n        return uint256(price);\r\n    }\r\n\r\n    modifier checkPresaleId(uint256 _id) {\r\n        require(_id > 0 && _id == currentSale, \"Invalid presale id\");\r\n        _;\r\n    }\r\n\r\n    modifier checkSaleState(uint256 _id, uint256 amount) {\r\n        require(presale[_id].Active == true, \"preSAle not Active\");\r\n        require(\r\n            amount > 0 &&\r\n                amount <= presale[_id].tokensToSell - presale[_id].Sold,\r\n            \"Invalid sale amount\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function ExcludeAccouctFromMinBuy(address _user, bool _status)\r\n        external\r\n        onlyOwner\r\n    {\r\n        isExcludeMinToken[_user] = _status;\r\n    }\r\n\r\n    function buyWithUSDT(uint256 usdAmount)\r\n        external\r\n        checkPresaleId(currentSale)\r\n        checkSaleState(currentSale, usdtToTokens(currentSale, usdAmount))\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(!paused[currentSale], \"Presale paused\");\r\n        require(\r\n            presale[currentSale].Active == true,\r\n            \"Presale is not active yet\"\r\n        );\r\n        require(!isBlackList[msg.sender], \"Account is blackListed\");\r\n        require(\r\n            presale[currentSale].amountRaised + usdAmount <=\r\n                presale[currentSale].UsdtHardcap,\r\n            \"Amount should be less than leftHardcap\"\r\n        );\r\n        if (!isExist[msg.sender]) {\r\n            isExist[msg.sender] = true;\r\n            uniqueBuyers++;\r\n        }\r\n        uint256 tokens = usdtToTokens(currentSale, usdAmount);\r\n        presale[currentSale].Sold += tokens;\r\n        presale[currentSale].amountRaised += usdAmount;\r\n        overalllRaised += usdAmount;\r\n\r\n        if (isExcludeMinToken[msg.sender] == false) {\r\n            require(tokens >= MinTokenTobuy, \"Less than min amount\");\r\n        }\r\n        if (userClaimData[_msgSender()][currentSale].claimAbleAmount > 0) {\r\n            userClaimData[_msgSender()][currentSale].claimAbleAmount += tokens;\r\n            userClaimData[_msgSender()][currentSale].investedAmount += usdAmount;\r\n        } else {\r\n            userClaimData[_msgSender()][currentSale] = UserData(\r\n                usdAmount,\r\n                0,\r\n                tokens,\r\n                0,\r\n                0,\r\n                0,\r\n                0\r\n            );\r\n        }\r\n\r\n        uint256 ourAllowance = USDTInterface.allowance(\r\n            _msgSender(),\r\n            address(this)\r\n        );\r\n        require(usdAmount <= ourAllowance, \"Make sure to add enough allowance\");\r\n        (bool success, ) = address(USDTInterface).call(\r\n            abi.encodeWithSignature(\r\n                \"transferFrom(address,address,uint256)\",\r\n                _msgSender(),\r\n                fundReceiver,\r\n                usdAmount\r\n            )\r\n        );\r\n        require(success, \"Token payment failed\");\r\n        emit TokensBought(\r\n            _msgSender(),\r\n            currentSale,\r\n            address(USDTInterface),\r\n            tokens,\r\n            usdAmount,\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function changeClaimAddress(address _oldAddress, address _newWallet)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 1; i < presaleId; i++) {\r\n            require(isExist[_oldAddress], \"User not a participant\");\r\n            userClaimData[_newWallet][i].claimAbleAmount = userClaimData[\r\n                _oldAddress\r\n            ][i].claimAbleAmount;\r\n            userClaimData[_oldAddress][i].claimAbleAmount = 0;\r\n        }\r\n        isExist[_oldAddress] = false;\r\n        isExist[_newWallet] = true;\r\n    }\r\n\r\n    function blackListUser(address _user, bool _value) public onlyOwner {\r\n        isBlackList[_user] = _value;\r\n    }\r\n\r\n    function buyWithUSDC(uint256 usdcAmount)\r\n        external\r\n        checkPresaleId(currentSale)\r\n        checkSaleState(currentSale, usdtToTokens(currentSale, usdcAmount))\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(!paused[currentSale], \"Presale paused\");\r\n        require(\r\n            presale[currentSale].Active == true,\r\n            \"Presale is not active yet\"\r\n        );\r\n        require(\r\n            presale[currentSale].amountRaised + usdcAmount <=\r\n                presale[currentSale].UsdtHardcap,\r\n            \"Amount should be less than leftHardcap\"\r\n        );\r\n        require(!isBlackList[msg.sender], \"Account is blackListed\");\r\n        if (!isExist[msg.sender]) {\r\n            isExist[msg.sender] = true;\r\n            uniqueBuyers++;\r\n        }\r\n        uint256 tokens = usdtToTokens(currentSale, usdcAmount);\r\n        presale[currentSale].Sold += tokens;\r\n        presale[currentSale].amountRaised += usdcAmount;\r\n        overalllRaised += usdcAmount;\r\n\r\n        if (isExcludeMinToken[msg.sender] == false) {\r\n            require(tokens >= MinTokenTobuy, \"Less than min amount\");\r\n        }\r\n        if (userClaimData[_msgSender()][currentSale].claimAbleAmount > 0) {\r\n            userClaimData[_msgSender()][currentSale].claimAbleAmount += tokens;\r\n            userClaimData[_msgSender()][currentSale].investedAmount += usdcAmount;\r\n        } else {\r\n            userClaimData[_msgSender()][currentSale] = UserData(\r\n                usdcAmount,\r\n                0,\r\n                tokens,\r\n                0,\r\n                0,\r\n                0,\r\n                0\r\n            );\r\n            require(isExist[_msgSender()], \"User not a participant\");\r\n        }\r\n\r\n        uint256 ourAllowance = USDTInterface.allowance(\r\n            _msgSender(),\r\n            address(this)\r\n        );\r\n        require(\r\n            usdcAmount <= ourAllowance,\r\n            \"Make sure to add enough allowance\"\r\n        );\r\n        (bool success, ) = address(USDCInterface).call(\r\n            abi.encodeWithSignature(\r\n                \"transferFrom(address,address,uint256)\",\r\n                _msgSender(),\r\n                fundReceiver,\r\n                usdcAmount\r\n            )\r\n        );\r\n        require(success, \"Token payment failed\");\r\n        emit TokensBought(\r\n            _msgSender(),\r\n            currentSale,\r\n            address(USDTInterface),\r\n            tokens,\r\n            usdcAmount,\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function buyWithEth()\r\n        external\r\n        payable\r\n        checkPresaleId(currentSale)\r\n        checkSaleState(currentSale, ethToTokens(currentSale, msg.value))\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        uint256 usdAmount = (msg.value * getLatestPrice() * USDT_MULTIPLIER) /\r\n            (ETH_MULTIPLIER * ETH_MULTIPLIER);\r\n        require(\r\n            presale[currentSale].amountRaised + usdAmount <=\r\n                presale[currentSale].UsdtHardcap,\r\n            \"Amount should be less than leftHardcap\"\r\n        );\r\n        require(!isBlackList[msg.sender], \"Account is blackListed\");\r\n        require(!paused[currentSale], \"Presale paused\");\r\n        require(\r\n            presale[currentSale].Active == true,\r\n            \"Presale is not active yet\"\r\n        );\r\n        if (!isExist[msg.sender]) {\r\n            isExist[msg.sender] = true;\r\n            uniqueBuyers++;\r\n        }\r\n\r\n        uint256 tokens = usdtToTokens(currentSale, usdAmount);\r\n        if (isExcludeMinToken[msg.sender] == false) {\r\n            require(tokens >= MinTokenTobuy, \"Insufficient amount!\");\r\n        }\r\n        presale[currentSale].Sold += tokens;\r\n        presale[currentSale].amountRaised += usdAmount;\r\n        overalllRaised += usdAmount;\r\n\r\n        if (userClaimData[_msgSender()][currentSale].claimAbleAmount > 0) {\r\n            userClaimData[_msgSender()][currentSale].claimAbleAmount += tokens;\r\n            userClaimData[_msgSender()][currentSale].investedAmount += usdAmount;\r\n        } else {\r\n            userClaimData[_msgSender()][currentSale] = UserData(\r\n                usdAmount,\r\n                0, // Last claimed at\r\n                tokens, // total tokens to be claimed\r\n                0, // vesting claimed amount\r\n                0, // claimed amount\r\n                0, // claim count\r\n                0 // vesting percent\r\n            );\r\n        }\r\n\r\n        sendValue(payable(fundReceiver), msg.value);\r\n        emit TokensBought(\r\n            _msgSender(),\r\n            currentSale,\r\n            address(0),\r\n            tokens,\r\n            msg.value,\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function ethBuyHelper(uint256 _id, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256 ethAmount)\r\n    {\r\n        uint256 usdPrice = (amount * presale[_id].price);\r\n        ethAmount =\r\n            (usdPrice * ETH_MULTIPLIER) /\r\n            (getLatestPrice() * 10**IERC20Metadata(SaleToken).decimals());\r\n    }\r\n\r\n    function usdtBuyHelper(uint256 _id, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256 usdPrice)\r\n    {\r\n        usdPrice =\r\n            (amount * presale[_id].price) /\r\n            10**IERC20Metadata(SaleToken).decimals();\r\n    }\r\n\r\n    function ethToTokens(uint256 _id, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256 _tokens)\r\n    {\r\n        uint256 usdAmount = (amount * getLatestPrice() * USDT_MULTIPLIER) /\r\n            (ETH_MULTIPLIER * ETH_MULTIPLIER);\r\n        _tokens = usdtToTokens(_id, usdAmount);\r\n    }\r\n\r\n    function usdtToTokens(uint256 _id, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256 _tokens)\r\n    {\r\n        _tokens = (amount * presale[_id].price) / USDT_MULTIPLIER;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Low balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"ETH Payment failed\");\r\n    }\r\n\r\n    function claimableAmount(address user, uint256 _id)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        UserData memory _user = userClaimData[user][_id];\r\n\r\n        require(_user.claimAbleAmount > 0, \"Nothing to claim\");\r\n        uint256 amount = _user.claimAbleAmount;\r\n        require(amount > 0, \"Already claimed\");\r\n        return amount;\r\n    }\r\n\r\n    function claimAmount(uint256 _id) public returns (bool) {\r\n        require(isExist[_msgSender()], \"User not a participant\");\r\n        uint256 amount = claimableAmount(msg.sender, _id);\r\n        require(amount > 0, \"No claimable amount\");\r\n        require(!isBlackList[msg.sender], \"Account is blackListed\");\r\n        require(SaleToken != address(0), \"Presale token address not set\");\r\n        require(\r\n            amount <= IERC20(SaleToken).balanceOf(address(this)),\r\n            \"Not enough tokens in the contract\"\r\n        );\r\n        require((presale[_id].isEnableClaim == true), \"Claim is not enable\");\r\n        uint256 transferAmount;\r\n        if (userClaimData[msg.sender][_id].claimCount == 0) {\r\n            transferAmount =\r\n                (amount * (vesting[_id].initialClaimPercent)) /\r\n                1000;\r\n            userClaimData[msg.sender][_id].activePercentAmount =\r\n                (amount * vesting[_id].vestingPercentage) /\r\n                1000;\r\n            bool status = IERC20(SaleToken).transfer(\r\n                msg.sender,\r\n                transferAmount\r\n            );\r\n            require(status, \"Token transfer failed\");\r\n            userClaimData[msg.sender][_id].claimAbleAmount -= transferAmount;\r\n            userClaimData[msg.sender][_id].claimedAmount += transferAmount;\r\n            userClaimData[msg.sender][_id].claimCount++;\r\n        } else if (\r\n            userClaimData[msg.sender][_id].claimAbleAmount >\r\n            userClaimData[msg.sender][_id].activePercentAmount\r\n        ) {\r\n            uint256 duration = block.timestamp - vesting[_id].vestingStartTime;\r\n            uint256 multiplier = duration / vesting[_id].vestingTime;\r\n            if (multiplier > vesting[_id].totalClaimCycles) {\r\n                multiplier = vesting[_id].totalClaimCycles;\r\n            }\r\n            uint256 _amount = multiplier *\r\n                userClaimData[msg.sender][_id].activePercentAmount;\r\n            transferAmount =\r\n                _amount -\r\n                userClaimData[msg.sender][_id].claimedVestingAmount;\r\n            require(transferAmount > 0, \"Please wait till next claim\");\r\n            bool status = IERC20(SaleToken).transfer(\r\n                msg.sender,\r\n                transferAmount\r\n            );\r\n            require(status, \"Token transfer failed\");\r\n            userClaimData[msg.sender][_id].claimAbleAmount -= transferAmount;\r\n            userClaimData[msg.sender][_id]\r\n                .claimedVestingAmount += transferAmount;\r\n            userClaimData[msg.sender][_id].claimedAmount += transferAmount;\r\n            userClaimData[msg.sender][_id].claimCount++;\r\n        } else {\r\n            uint256 duration = block.timestamp - vesting[_id].vestingStartTime;\r\n            uint256 multiplier = duration / vesting[_id].vestingTime;\r\n            if (multiplier > vesting[_id].totalClaimCycles + 1) {\r\n                transferAmount = userClaimData[msg.sender][_id].claimAbleAmount;\r\n                require(transferAmount > 0, \"Please wait till next claim\");\r\n                bool status = IERC20(SaleToken).transfer(\r\n                    msg.sender,\r\n                    transferAmount\r\n                );\r\n                require(status, \"Token transfer failed\");\r\n                userClaimData[msg.sender][_id]\r\n                    .claimAbleAmount -= transferAmount;\r\n                userClaimData[msg.sender][_id].claimedAmount += transferAmount;\r\n                userClaimData[msg.sender][_id]\r\n                    .claimedVestingAmount += transferAmount;\r\n                userClaimData[msg.sender][_id].claimCount++;\r\n            } else {\r\n                revert(\"Wait for next claiim\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function WithdrawTokens(address _token, uint256 amount) external onlyOwner {\r\n        IERC20(_token).transfer(fundReceiver, amount);\r\n    }\r\n\r\n    function WithdrawContractFunds(uint256 amount) external onlyOwner {\r\n        sendValue(payable(fundReceiver), amount);\r\n    }\r\n\r\n    function ChangeTokenToSell(address _token) public onlyOwner {\r\n        SaleToken = _token;\r\n    }\r\n\r\n    function EditMinTokenToBuy(uint256 _amount) public onlyOwner {\r\n        MinTokenTobuy = _amount;\r\n    }\r\n\r\n    function ChangeOracleAddress(address _oracle) public onlyOwner {\r\n        aggregatorInterface = AggregatorV3Interface(_oracle);\r\n    }\r\n\r\n    function blockStamp() public view returns(uint256) {\r\n        return block.timestamp;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SaleToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MinTokenTobuy\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"PresaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleTokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"ChangeOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ChangeTokenToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EditMinTokenToBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ExcludeAccouctFromMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinTokenTobuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SaleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCInterface\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTInterface\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawContractFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"blackListUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWithEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"changeClaimAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeUSDCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeUSDTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_UsdtHardcap\",\"type\":\"uint256\"}],\"name\":\"createPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeMinToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overalllRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UsdtHardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnableClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setPresaleStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_id\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"vestingStartTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_initialClaimPercent\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_vestingTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_vestingPercentage\",\"type\":\"uint256[]\"}],\"name\":\"setPresaleVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unPausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueBuyers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Hardcap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isclaimAble\",\"type\":\"bool\"}],\"name\":\"updatePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPercentage\",\"type\":\"uint256\"}],\"name\":\"updatePresaleVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userClaimData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAbleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedVestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activePercentAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCycles\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Hush_Presale", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000af9220d4ded148b98594b13552f5d69d3be738180000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3f396b5b4572ad111cf1dd42482555342cfe4912154c28896282729e0fee6a61"}