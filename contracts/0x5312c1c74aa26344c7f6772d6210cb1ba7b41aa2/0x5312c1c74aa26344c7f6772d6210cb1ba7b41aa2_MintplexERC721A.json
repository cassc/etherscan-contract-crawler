{"SourceCode": "// SPDX-License-Identifier: MIT\r\n//-------------DEPENDENCIES--------------------------//\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if account is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, isContract will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on isContract to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's transfer: sends amount wei to\r\n     * recipient, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by transfer, making them unable to receive funds via\r\n     * transfer. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to recipient, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level call. A\r\n     * plain call is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If target reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[abi.decode].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - target must be a contract.\r\n     * - calling target with data must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall], but with\r\n     * errorMessage as a fallback revert reason when target reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],\r\n     * but also transferring value wei to target.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least value.\r\n     * - the called Solidity function must be payable.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[functionCallWithValue], but\r\n     * with errorMessage as a fallback revert reason when target reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[functionCall],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[functionCall],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/proxy/utils/Initializable.sol\r\n// OpenZeppelin Contracts v4.7.3 (v4.7.3/contracts/proxy/utils/Initializable.sol)\r\n\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\r\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\r\n     * initialization.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized < type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} tokenId token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by operator from from, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with IERC721.onERC721Received.selector.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * interfaceId. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * \r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when tokenId token is transferred from from to to.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when owner enables approved to manage the tokenId token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when owner enables or disables (approved) operator to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in owner's account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the tokenId token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - tokenId must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers tokenId token from from to to, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - from cannot be the zero address.\r\n     * - to cannot be the zero address.\r\n     * - tokenId token must exist and be owned by from.\r\n     * - If the caller is not from, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers tokenId token from from to to.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - from cannot be the zero address.\r\n     * - to cannot be the zero address.\r\n     * - tokenId token must be owned by from.\r\n     * - If the caller is not from, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to to to transfer tokenId token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - tokenId must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for tokenId token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - tokenId must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove operator as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The operator cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the operator is allowed to manage all of the assets of owner.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers tokenId token from from to to.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - from cannot be the zero address.\r\n     * - to cannot be the zero address.\r\n     * - tokenId token must exist and be owned by from.\r\n     * - If the caller is not from, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by owner at a given index of its token list.\r\n     * Use along with {balanceOf} to enumerate all of owner's tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given index of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for tokenId token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a uint256 to its ASCII string decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a uint256 to its ASCII string hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a uint256 to its ASCII string hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from ReentrancyGuard will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single nonReentrant guard, functions marked as\r\n * nonReentrant may not call one another. This can be worked around by making\r\n * those functions private, and then adding external nonReentrant entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a nonReentrant function from another nonReentrant\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the nonReentrant function external, and making it call a\r\n     * private function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * onlyOwner, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    function _onlyOwner() private view {\r\n       require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * onlyOwner functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (newOwner).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (newOwner).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File contracts/OperatorFilter/IOperatorFilterRegistry.sol\r\npragma solidity ^0.8.9;\r\n\r\ninterface IOperatorFilterRegistry {\r\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\r\n    function register(address registrant) external;\r\n    function registerAndSubscribe(address registrant, address subscription) external;\r\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\r\n    function updateOperator(address registrant, address operator, bool filtered) external;\r\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\r\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\r\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\r\n    function subscribe(address registrant, address registrantToSubscribe) external;\r\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\r\n    function subscriptionOf(address addr) external returns (address registrant);\r\n    function subscribers(address registrant) external returns (address[] memory);\r\n    function subscriberAt(address registrant, uint256 index) external returns (address);\r\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\r\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\r\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\r\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\r\n    function filteredOperators(address addr) external returns (address[] memory);\r\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\r\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\r\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\r\n    function isRegistered(address addr) external returns (bool);\r\n    function codeHashOf(address addr) external returns (bytes32);\r\n}\r\n\r\n// File contracts/OperatorFilter/OperatorFilterer.sol\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract OperatorFilterer {\r\n    error OperatorNotAllowed(address operator);\r\n\r\n    IOperatorFilterRegistry constant operatorFilterRegistry =\r\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\r\n\r\n    constructor() {}\r\n    function _init(address subscriptionOrRegistrantToCopy, bool subscribe) internal {\r\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\r\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\r\n        // order for the modifier to filter addresses.\r\n        if (address(operatorFilterRegistry).code.length > 0) {\r\n            if (subscribe) {\r\n                operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\r\n            } else {\r\n                if (subscriptionOrRegistrantToCopy != address(0)) {\r\n                    operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\r\n                } else {\r\n                    operatorFilterRegistry.register(address(this));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _onlyAllowedOperator(address from) private view {\r\n      if (\r\n          !(\r\n              operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)\r\n              && operatorFilterRegistry.isOperatorAllowed(address(this), from)\r\n          )\r\n      ) {\r\n          revert OperatorNotAllowed(msg.sender);\r\n      }\r\n    }\r\n\r\n    modifier onlyAllowedOperator(address from) virtual {\r\n        // Check registry code length to facilitate testing in environments without a deployed registry.\r\n        if (address(operatorFilterRegistry).code.length > 0) {\r\n            // Allow spending tokens from addresses with balance\r\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\r\n            // from an EOA.\r\n            if (from == msg.sender) {\r\n                _;\r\n                return;\r\n            }\r\n            _onlyAllowedOperator(from);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\r\n        _checkFilterOperator(operator);\r\n        _;\r\n    }\r\n\r\n    function _checkFilterOperator(address operator) internal view virtual {\r\n        // Check registry code length to facilitate testing in environments without a deployed registry.\r\n        if (address(operatorFilterRegistry).code.length > 0) {\r\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\r\n                revert OperatorNotAllowed(operator);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//-------------END DEPENDENCIES------------------------//\r\n\r\n\r\n  \r\nerror TransactionCapExceeded();\r\nerror PublicMintingClosed();\r\nerror ExcessiveOwnedMints();\r\nerror MintZeroQuantity();\r\nerror InvalidPayment();\r\nerror CapExceeded();\r\nerror IsAlreadyUnveiled();\r\nerror ValueCannotBeZero();\r\nerror CannotBeNullAddress();\r\nerror NoStateChange();\r\n\r\nerror PublicMintClosed();\r\nerror AllowlistMintClosed();\r\n\r\nerror AddressNotAllowlisted();\r\nerror AllowlistDropTimeHasNotPassed();\r\nerror PublicDropTimeHasNotPassed();\r\nerror DropTimeNotInFuture();\r\n\r\nerror OnlyERC20MintingEnabled();\r\nerror ERC20TokenNotApproved();\r\nerror ERC20InsufficientBalance();\r\nerror ERC20InsufficientAllowance();\r\nerror ERC20TransferFailed();\r\n\r\nerror ClaimModeDisabled();\r\nerror IneligibleRedemptionContract();\r\nerror TokenAlreadyRedeemed();\r\nerror InvalidOwnerForRedemption();\r\nerror InvalidApprovalForRedemption();\r\n\r\nerror ERC721RestrictedApprovalAddressRestricted();\r\nerror NotMaintainer();\r\nerror PayablePayoutMisMatch();\r\nerror PayoutsNot100();\r\n  \r\n  \r\n// Rampp Contracts v2.1 (Teams.sol)\r\n\r\nerror InvalidTeamAddress();\r\nerror DuplicateTeamAddress();\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n* Teams is a contract implementation to extend upon Ownable that allows multiple controllers\r\n* of a single contract to modify specific mint settings but not have overall ownership of the contract.\r\n* This will easily allow cross-collaboration via Mintplex.xyz.\r\n**/\r\nabstract contract Teams is Ownable{\r\n  mapping (address => bool) internal team;\r\n\r\n  /**\r\n  * @dev Adds an address to the team. Allows them to execute protected functions\r\n  * @param _address the ETH address to add, cannot be 0x and cannot be in team already\r\n  **/\r\n  function addToTeam(address _address) public onlyOwner {\r\n    if(_address == address(0)) revert InvalidTeamAddress();\r\n    if(inTeam(_address)) revert DuplicateTeamAddress();\r\n  \r\n    team[_address] = true;\r\n  }\r\n\r\n  /**\r\n  * @dev Removes an address to the team.\r\n  * @param _address the ETH address to remove, cannot be 0x and must be in team\r\n  **/\r\n  function removeFromTeam(address _address) public onlyOwner {\r\n    if(_address == address(0)) revert InvalidTeamAddress();\r\n    if(!inTeam(_address)) revert InvalidTeamAddress();\r\n  \r\n    team[_address] = false;\r\n  }\r\n\r\n  /**\r\n  * @dev Check if an address is valid and active in the team\r\n  * @param _address ETH address to check for truthiness\r\n  **/\r\n  function inTeam(address _address)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    if(_address == address(0)) revert InvalidTeamAddress();\r\n    return team[_address] == true;\r\n  }\r\n\r\n  /**\r\n  * @dev Throws if called by any account other than the owner or team member.\r\n  */\r\n  function _onlyTeamOrOwner() private view {\r\n    bool _isOwner = owner() == _msgSender();\r\n    bool _isTeam = inTeam(_msgSender());\r\n    require(_isOwner || _isTeam, \"Team: caller is not the owner or in Team.\");\r\n  }\r\n\r\n  modifier onlyTeamOrOwner() {\r\n    _onlyTeamOrOwner();\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n  \r\n  pragma solidity ^0.8.0;\r\n\r\n  /**\r\n  * @dev These functions deal with verification of Merkle Trees proofs.\r\n  *\r\n  * The proofs can be generated using the JavaScript library\r\n  * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n  * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n  *\r\n  *\r\n  * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n  * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n  * This is because the concatenation of a sorted pair of internal nodes in\r\n  * the merkle tree could be reinterpreted as a leaf value.\r\n  */\r\n  library MerkleProof {\r\n      /**\r\n      * @dev Returns true if a 'leaf' can be proved to be a part of a Merkle tree\r\n      * defined by 'root'. For this, a 'proof' must be provided, containing\r\n      * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n      * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n      */\r\n      function verify(\r\n          bytes32[] memory proof,\r\n          bytes32 root,\r\n          bytes32 leaf\r\n      ) internal pure returns (bool) {\r\n          return processProof(proof, leaf) == root;\r\n      }\r\n\r\n      /**\r\n      * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n      * from 'leaf' using 'proof'. A 'proof' is valid if and only if the rebuilt\r\n      * hash matches the root of the tree. When processing the proof, the pairs\r\n      * of leafs & pre-images are assumed to be sorted.\r\n      *\r\n      * _Available since v4.4._\r\n      */\r\n      function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n          bytes32 computedHash = leaf;\r\n          for (uint256 i = 0; i < proof.length; i++) {\r\n              bytes32 proofElement = proof[i];\r\n              if (computedHash <= proofElement) {\r\n                  // Hash(current computed hash + current element of the proof)\r\n                  computedHash = _efficientHash(computedHash, proofElement);\r\n              } else {\r\n                  // Hash(current element of the proof + current computed hash)\r\n                  computedHash = _efficientHash(proofElement, computedHash);\r\n              }\r\n          }\r\n          return computedHash;\r\n      }\r\n\r\n      function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n          assembly {\r\n              mstore(0x00, a)\r\n              mstore(0x20, b)\r\n              value := keccak256(0x00, 0x40)\r\n          }\r\n      }\r\n  }\r\n\r\n\r\n  // File: Allowlist.sol\r\n\r\n  pragma solidity ^0.8.0;\r\n\r\n  abstract contract Allowlist is Teams {\r\n    bytes32 public merkleRoot;\r\n    bool public onlyAllowlistMode;\r\n\r\n    /**\r\n     * @dev Update merkle root to reflect changes in Allowlist\r\n     * @param _newMerkleRoot new merkle root to reflect most recent Allowlist\r\n     */\r\n    function updateMerkleRoot(bytes32 _newMerkleRoot) public onlyTeamOrOwner {\r\n      if(_newMerkleRoot == merkleRoot) revert NoStateChange();\r\n      merkleRoot = _newMerkleRoot;\r\n    }\r\n\r\n    /**\r\n     * @dev Check the proof of an address if valid for merkle root\r\n     * @param _to address to check for proof\r\n     * @param _merkleProof Proof of the address to validate against root and leaf\r\n     */\r\n    function isAllowlisted(address _to, bytes32[] calldata _merkleProof) public view returns(bool) {\r\n      if(merkleRoot == 0) revert ValueCannotBeZero();\r\n      bytes32 leaf = keccak256(abi.encodePacked(_to));\r\n\r\n      return MerkleProof.verify(_merkleProof, merkleRoot, leaf);\r\n    }\r\n\r\n    \r\n    function enableAllowlistOnlyMode() public onlyTeamOrOwner {\r\n      onlyAllowlistMode = true;\r\n    }\r\n\r\n    function disableAllowlistOnlyMode() public onlyTeamOrOwner {\r\n        onlyAllowlistMode = false;\r\n    }\r\n  }\r\n  \r\n  \r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\r\n * \r\n * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.\r\n *\r\n * Does not support burning tokens to address(0).\r\n */\r\nabstract contract ERC721A is\r\n  Context,\r\n  ERC165,\r\n  IERC721,\r\n  IERC721Metadata,\r\n  IERC721Enumerable,\r\n  Teams,\r\n  OperatorFilterer\r\n{\r\n  using Address for address;\r\n  using Strings for uint256;\r\n\r\n  struct TokenOwnership {\r\n    address addr;\r\n    uint64 startTimestamp;\r\n  }\r\n\r\n  struct AddressData {\r\n    uint128 balance;\r\n    uint128 numberMinted;\r\n  }\r\n\r\n  uint256 private currentIndex;\r\n\r\n  uint256 public collectionSize;\r\n  uint256 public maxBatchSize;\r\n\r\n  // Token name\r\n  string private _name;\r\n\r\n  // Token symbol\r\n  string private _symbol;\r\n\r\n  // Mapping from token ID to ownership details\r\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n  mapping(uint256 => TokenOwnership) private _ownerships;\r\n\r\n  // Mapping owner address to address data\r\n  mapping(address => AddressData) private _addressData;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping(uint256 => address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n  /* @dev Mapping of restricted operator approvals set by contract Owner\r\n  * This serves as an optional addition to ERC-721 so\r\n  * that the contract owner can elect to prevent specific addresses/contracts\r\n  * from being marked as the approver for a token. The reason for this\r\n  * is that some projects may want to retain control of where their tokens can/can not be listed\r\n  * either due to ethics, loyalty, or wanting trades to only occur on their personal marketplace.\r\n  * By default, there are no restrictions. The contract owner must deliberatly block an address \r\n  */\r\n  mapping(address => bool) public restrictedApprovalAddresses;\r\n\r\n  /**\r\n   * @dev\r\n   * maxBatchSize refers to how much a minter can mint at a time.\r\n   * collectionSize_ refers to how many tokens are in the collection.\r\n   */\r\n   constructor(){}\r\n   function _init(\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint256 maxBatchSize_,\r\n    uint256 collectionSize_\r\n  ) internal {\r\n    require(\r\n      collectionSize_ > 0,\r\n      \"ERC721A: collection must have a nonzero supply\"\r\n    );\r\n    require(maxBatchSize_ > 0, \"ERC721A: max batch size must be nonzero\");\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    maxBatchSize = maxBatchSize_;\r\n    collectionSize = collectionSize_;\r\n    currentIndex = _startTokenId();\r\n    OperatorFilterer._init(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6, true);\r\n  }\r\n\r\n  /**\r\n  * To change the starting tokenId, please override this function.\r\n  */\r\n  function _startTokenId() internal view virtual returns (uint256) {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-totalSupply}.\r\n   */\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _totalMinted();\r\n  }\r\n\r\n  function currentTokenId() public view returns (uint256) {\r\n    return _totalMinted();\r\n  }\r\n\r\n  function getNextTokenId() public view returns (uint256) {\r\n      return _totalMinted() + 1;\r\n  }\r\n\r\n  /**\r\n  * Returns the total amount of tokens minted in the contract.\r\n  */\r\n  function _totalMinted() internal view returns (uint256) {\r\n    unchecked {\r\n      return currentIndex - _startTokenId();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-tokenByIndex}.\r\n   */\r\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\r\n    require(index < totalSupply(), \"ERC721A: global index out of bounds\");\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n   * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\r\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\r\n   */\r\n  function tokenOfOwnerByIndex(address owner, uint256 index)\r\n    public\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    require(index < balanceOf(owner), \"ERC721A: owner index out of bounds\");\r\n    uint256 numMintedSoFar = totalSupply();\r\n    uint256 tokenIdsIdx = 0;\r\n    address currOwnershipAddr = address(0);\r\n    for (uint256 i = 0; i < numMintedSoFar; i++) {\r\n      TokenOwnership memory ownership = _ownerships[i];\r\n      if (ownership.addr != address(0)) {\r\n        currOwnershipAddr = ownership.addr;\r\n      }\r\n      if (currOwnershipAddr == owner) {\r\n        if (tokenIdsIdx == index) {\r\n          return i;\r\n        }\r\n        tokenIdsIdx++;\r\n      }\r\n    }\r\n    revert(\"ERC721A: unable to get token of owner by index\");\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(ERC165, IERC165)\r\n    returns (bool)\r\n  {\r\n    return\r\n      interfaceId == type(IERC721).interfaceId ||\r\n      interfaceId == type(IERC721Metadata).interfaceId ||\r\n      interfaceId == type(IERC721Enumerable).interfaceId ||\r\n      super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-balanceOf}.\r\n   */\r\n  function balanceOf(address owner) public view override returns (uint256) {\r\n    require(owner != address(0), \"ERC721A: balance query for the zero address\");\r\n    return uint256(_addressData[owner].balance);\r\n  }\r\n\r\n  function _numberMinted(address owner) internal view returns (uint256) {\r\n    require(\r\n      owner != address(0),\r\n      \"ERC721A: number minted query for the zero address\"\r\n    );\r\n    return uint256(_addressData[owner].numberMinted);\r\n  }\r\n\r\n  function ownershipOf(uint256 tokenId)\r\n    internal\r\n    view\r\n    returns (TokenOwnership memory)\r\n  {\r\n    uint256 curr = tokenId;\r\n\r\n    unchecked {\r\n        if (_startTokenId() <= curr && curr < currentIndex) {\r\n            TokenOwnership memory ownership = _ownerships[curr];\r\n            if (ownership.addr != address(0)) {\r\n                return ownership;\r\n            }\r\n\r\n            // Invariant:\r\n            // There will always be an ownership that has an address and is not burned\r\n            // before an ownership that does not have an address and is not burned.\r\n            // Hence, curr will not underflow.\r\n            while (true) {\r\n                curr--;\r\n                ownership = _ownerships[curr];\r\n                if (ownership.addr != address(0)) {\r\n                    return ownership;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    revert(\"ERC721A: unable to determine the owner of token\");\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-ownerOf}.\r\n   */\r\n  function ownerOf(uint256 tokenId) public view override returns (address) {\r\n    return ownershipOf(tokenId).addr;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-name}.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-symbol}.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-tokenURI}.\r\n   */\r\n  function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n  {\r\n    string memory baseURI = _baseURI();\r\n    string memory extension = _baseURIExtension();\r\n    return\r\n      bytes(baseURI).length > 0\r\n        ? string(abi.encodePacked(baseURI, tokenId.toString(), extension))\r\n        : \"\";\r\n  }\r\n\r\n  /**\r\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n   * token will be the concatenation of the baseURI and the tokenId. Empty\r\n   * by default, can be overriden in child contracts.\r\n   */\r\n  function _baseURI() internal view virtual returns (string memory) {\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * @dev Base URI extension used for computing {tokenURI}. If set, the resulting URI for each\r\n   * token will be the concatenation of the baseURI, tokenId, and this value. Empty\r\n   * by default, can be overriden in child contracts.\r\n   */\r\n  function _baseURIExtension() internal view virtual returns (string memory) {\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the value for an address to be in the restricted approval address pool.\r\n   * Setting an address to true will disable token owners from being able to mark the address\r\n   * for approval for trading. This would be used in theory to prevent token owners from listing\r\n   * on specific marketplaces or protcols. Only modifible by the contract owner/team.\r\n   * @param _address the marketplace/user to modify restriction status of\r\n   * @param _isRestricted restriction status of the _address to be set. true => Restricted, false => Open\r\n   */\r\n  function setApprovalRestriction(address _address, bool _isRestricted) public onlyTeamOrOwner {\r\n    restrictedApprovalAddresses[_address] = _isRestricted;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-approve}.\r\n   */\r\n  function approve(address to, uint256 tokenId) public override onlyAllowedOperatorApproval(to) {\r\n    address owner = ERC721A.ownerOf(tokenId);\r\n    require(to != owner, \"ERC721A: approval to current owner\");\r\n    if(restrictedApprovalAddresses[to]) revert ERC721RestrictedApprovalAddressRestricted();\r\n\r\n    require(\r\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n      \"ERC721A: approve caller is not owner nor approved for all\"\r\n    );\r\n\r\n    _approve(to, tokenId, owner);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-getApproved}.\r\n   */\r\n  function getApproved(uint256 tokenId) public view override returns (address) {\r\n    require(_exists(tokenId), \"ERC721A: approved query for nonexistent token\");\r\n\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-setApprovalForAll}.\r\n   */\r\n  function setApprovalForAll(address operator, bool approved) public override onlyAllowedOperatorApproval(operator) {\r\n    require(operator != _msgSender(), \"ERC721A: approve to caller\");\r\n    if(restrictedApprovalAddresses[operator]) revert ERC721RestrictedApprovalAddressRestricted();\r\n\r\n    _operatorApprovals[_msgSender()][operator] = approved;\r\n    emit ApprovalForAll(_msgSender(), operator, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-isApprovedForAll}.\r\n   */\r\n  function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-transferFrom}.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public override onlyAllowedOperator(from) {\r\n    _transfer(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public override onlyAllowedOperator(from) {\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) public override onlyAllowedOperator(from) {\r\n    _transfer(from, to, tokenId);\r\n    require(\r\n      _checkOnERC721Received(from, to, tokenId, _data),\r\n      \"ERC721A: transfer to non ERC721Receiver implementer\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether tokenId exists.\r\n   *\r\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n   *\r\n   * Tokens start existing when they are minted (_mint),\r\n   */\r\n  function _exists(uint256 tokenId) internal view returns (bool) {\r\n    return _startTokenId() <= tokenId && tokenId < currentIndex;\r\n  }\r\n\r\n  function _safeMint(address to, uint256 quantity, bool isAdminMint) internal {\r\n    _safeMint(to, quantity, isAdminMint, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Mints quantity tokens and transfers them to to.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - there must be quantity tokens remaining unminted in the total collection.\r\n   * - to cannot be the zero address.\r\n   * - quantity cannot be larger than the max batch size.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _safeMint(\r\n    address to,\r\n    uint256 quantity,\r\n    bool isAdminMint,\r\n    bytes memory _data\r\n  ) internal {\r\n    uint256 startTokenId = currentIndex;\r\n    require(to != address(0), \"ERC721A: mint to the zero address\");\r\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\r\n    require(!_exists(startTokenId), \"ERC721A: token already minted\");\r\n\r\n    // For admin mints we do not want to enforce the maxBatchSize limit\r\n    if (isAdminMint == false) {\r\n        require(quantity <= maxBatchSize, \"ERC721A: quantity to mint too high\");\r\n    }\r\n\r\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n    AddressData memory addressData = _addressData[to];\r\n    _addressData[to] = AddressData(\r\n      addressData.balance + uint128(quantity),\r\n      addressData.numberMinted + (isAdminMint ? 0 : uint128(quantity))\r\n    );\r\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n    uint256 updatedIndex = startTokenId;\r\n\r\n    for (uint256 i = 0; i < quantity; i++) {\r\n      emit Transfer(address(0), to, updatedIndex);\r\n      require(\r\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\r\n        \"ERC721A: transfer to non ERC721Receiver implementer\"\r\n      );\r\n      updatedIndex++;\r\n    }\r\n\r\n    currentIndex = updatedIndex;\r\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers tokenId from from to to.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - to cannot be the zero address.\r\n   * - tokenId token must be owned by from.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) private {\r\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n      getApproved(tokenId) == _msgSender() ||\r\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\r\n\r\n    require(\r\n      isApprovedOrOwner,\r\n      \"ERC721A: transfer caller is not owner nor approved\"\r\n    );\r\n\r\n    require(\r\n      prevOwnership.addr == from,\r\n      \"ERC721A: transfer from incorrect owner\"\r\n    );\r\n    require(to != address(0), \"ERC721A: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n    // Clear approvals from the previous owner\r\n    _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n    _addressData[from].balance -= 1;\r\n    _addressData[to].balance += 1;\r\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n    uint256 nextTokenId = tokenId + 1;\r\n    if (_ownerships[nextTokenId].addr == address(0)) {\r\n      if (_exists(nextTokenId)) {\r\n        _ownerships[nextTokenId] = TokenOwnership(\r\n          prevOwnership.addr,\r\n          prevOwnership.startTimestamp\r\n        );\r\n      }\r\n    }\r\n\r\n    emit Transfer(from, to, tokenId);\r\n    _afterTokenTransfers(from, to, tokenId, 1);\r\n  }\r\n\r\n  /**\r\n   * @dev Approve to to operate on tokenId\r\n   *\r\n   * Emits a {Approval} event.\r\n   */\r\n  function _approve(\r\n    address to,\r\n    uint256 tokenId,\r\n    address owner\r\n  ) private {\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(owner, to, tokenId);\r\n  }\r\n\r\n  uint256 public nextOwnerToExplicitlySet = 0;\r\n\r\n  /**\r\n   * @dev Explicitly set owners to eliminate loops in future calls of ownerOf().\r\n   */\r\n  function _setOwnersExplicit(uint256 quantity) internal {\r\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\r\n    require(quantity > 0, \"quantity must be nonzero\");\r\n    if (currentIndex == _startTokenId()) revert('No Tokens Minted Yet');\r\n\r\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\r\n    if (endIndex > collectionSize - 1) {\r\n      endIndex = collectionSize - 1;\r\n    }\r\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\r\n    require(_exists(endIndex), \"not enough minted yet for this cleanup\");\r\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\r\n      if (_ownerships[i].addr == address(0)) {\r\n        TokenOwnership memory ownership = ownershipOf(i);\r\n        _ownerships[i] = TokenOwnership(\r\n          ownership.addr,\r\n          ownership.startTimestamp\r\n        );\r\n      }\r\n    }\r\n    nextOwnerToExplicitlySet = endIndex + 1;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n   * The call is not executed if the target address is not a contract.\r\n   *\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param to target address that will receive the tokens\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return bool whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) private returns (bool) {\r\n    if (to.isContract()) {\r\n      try\r\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\r\n      returns (bytes4 retval) {\r\n        return retval == IERC721Receiver(to).onERC721Received.selector;\r\n      } catch (bytes memory reason) {\r\n        if (reason.length == 0) {\r\n          revert(\"ERC721A: transfer to non ERC721Receiver implementer\");\r\n        } else {\r\n          assembly {\r\n            revert(add(32, reason), mload(reason))\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n   *\r\n   * startTokenId - the first token id to be transferred\r\n   * quantity - the amount to be transferred\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - When from and to are both non-zero, from's tokenId will be\r\n   * transferred to to.\r\n   * - When from is zero, tokenId will be minted for to.\r\n   */\r\n  function _beforeTokenTransfers(\r\n    address from,\r\n    address to,\r\n    uint256 startTokenId,\r\n    uint256 quantity\r\n  ) internal virtual {}\r\n\r\n  /**\r\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n   * minting.\r\n   *\r\n   * startTokenId - the first token id to be transferred\r\n   * quantity - the amount to be transferred\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when from and to are both non-zero.\r\n   * - from and to are never both zero.\r\n   */\r\n  function _afterTokenTransfers(\r\n    address from,\r\n    address to,\r\n    uint256 startTokenId,\r\n    uint256 quantity\r\n  ) internal virtual {}\r\n}\r\n\r\nabstract contract ProviderFees is Context {\r\n  address private PROVIDER;\r\n  uint256 public PROVIDER_FEE;\r\n  \r\n  constructor() {}\r\n  function init() internal {\r\n    PROVIDER = 0xa9dAC8f3aEDC55D0FE707B86B8A45d246858d2E1;\r\n    PROVIDER_FEE = 0.000777 ether;\r\n  }\r\n\r\n  function sendProviderFee() internal {\r\n    payable(PROVIDER).transfer(PROVIDER_FEE);\r\n  }\r\n\r\n  function setProviderFee(uint256 _fee) public {\r\n    if(_msgSender() != PROVIDER) revert NotMaintainer();\r\n    PROVIDER_FEE = _fee;\r\n  }\r\n}\r\n\r\n\r\n\r\n  \r\n  \r\ninterface IERC20 {\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address _to, uint256 _amount) external returns (bool);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: WithdrawableV2\r\n// This abstract allows the contract to be able to mint and ingest ERC-20 payments for mints.\r\n// ERC-20 Payouts are limited to a single payout address. This feature \r\n// will charge a small flat fee in native currency that is not subject to regular rev sharing.\r\n// This contract also covers the normal functionality of accepting native base currency rev-sharing\r\nabstract contract WithdrawableV2 is Teams {\r\n  struct acceptedERC20 {\r\n    bool isActive;\r\n    uint256 chargeAmount;\r\n  }\r\n\r\n  \r\n  mapping(address => acceptedERC20) private allowedTokenContracts;\r\n  address[] public payableAddresses;\r\n  address public erc20Payable;\r\n  uint256[] public payableFees;\r\n  uint256 public payableAddressCount;\r\n  bool public onlyERC20MintingMode;\r\n  \r\n  function resetPayables(address[] memory _newPayables, uint256[] memory _newPayouts) public onlyTeamOrOwner {\r\n    if(_newPayables.length != _newPayouts.length) revert PayablePayoutMisMatch();\r\n\r\n    uint sum;\r\n    for(uint i=0; i < _newPayouts.length; i++ ) {\r\n        sum += _newPayouts[i];\r\n    }\r\n    if(sum != 100) revert PayoutsNot100();\r\n\r\n    payableAddresses = _newPayables;\r\n    payableFees = _newPayouts;\r\n    payableAddressCount = _newPayables.length;\r\n  }\r\n\r\n  function withdrawAll() public onlyTeamOrOwner {\r\n      if(address(this).balance == 0) revert ValueCannotBeZero();\r\n      _withdrawAll(address(this).balance);\r\n  }\r\n\r\n  function _withdrawAll(uint256 balance) private {\r\n      for(uint i=0; i < payableAddressCount; i++ ) {\r\n          _widthdraw(\r\n              payableAddresses[i],\r\n              (balance * payableFees[i]) / 100\r\n          );\r\n      }\r\n  }\r\n  \r\n  function _widthdraw(address _address, uint256 _amount) private {\r\n      (bool success, ) = _address.call{value: _amount}(\"\");\r\n      require(success, \"Transfer failed.\");\r\n  }\r\n\r\n  /**\r\n  * @dev Allow contract owner to withdraw ERC-20 balance from contract\r\n  * in the event ERC-20 tokens are paid to the contract for mints.\r\n  * @param _tokenContract contract of ERC-20 token to withdraw\r\n  * @param _amountToWithdraw balance to withdraw according to balanceOf of ERC-20 token in wei\r\n  */\r\n  function withdrawERC20(address _tokenContract, uint256 _amountToWithdraw) public onlyTeamOrOwner {\r\n    if(_amountToWithdraw == 0) revert ValueCannotBeZero();\r\n    IERC20 tokenContract = IERC20(_tokenContract);\r\n    if(tokenContract.balanceOf(address(this)) < _amountToWithdraw) revert ERC20InsufficientBalance();\r\n    tokenContract.transfer(erc20Payable, _amountToWithdraw); // Payout ERC-20 tokens to recipient\r\n  }\r\n\r\n  /**\r\n  * @dev check if an ERC-20 contract is a valid payable contract for executing a mint.\r\n  * @param _erc20TokenContract address of ERC-20 contract in question\r\n  */\r\n  function isApprovedForERC20Payments(address _erc20TokenContract) public view returns(bool) {\r\n    return allowedTokenContracts[_erc20TokenContract].isActive == true;\r\n  }\r\n\r\n  /**\r\n  * @dev get the value of tokens to transfer for user of an ERC-20\r\n  * @param _erc20TokenContract address of ERC-20 contract in question\r\n  */\r\n  function chargeAmountForERC20(address _erc20TokenContract) public view returns(uint256) {\r\n    if(!isApprovedForERC20Payments(_erc20TokenContract)) revert ERC20TokenNotApproved();\r\n    return allowedTokenContracts[_erc20TokenContract].chargeAmount;\r\n  }\r\n\r\n  /**\r\n  * @dev Explicity sets and ERC-20 contract as an allowed payment method for minting\r\n  * @param _erc20TokenContract address of ERC-20 contract in question\r\n  * @param _isActive default status of if contract should be allowed to accept payments\r\n  * @param _chargeAmountInTokens fee (in tokens) to charge for mints for this specific ERC-20 token\r\n  */\r\n  function addOrUpdateERC20ContractAsPayment(address _erc20TokenContract, bool _isActive, uint256 _chargeAmountInTokens) public onlyTeamOrOwner {\r\n    allowedTokenContracts[_erc20TokenContract].isActive = _isActive;\r\n    allowedTokenContracts[_erc20TokenContract].chargeAmount = _chargeAmountInTokens;\r\n  }\r\n\r\n  /**\r\n  * @dev Add an ERC-20 contract as being a valid payment method. If passed a contract which has not been added\r\n  * it will assume the default value of zero. This should not be used to create new payment tokens.\r\n  * @param _erc20TokenContract address of ERC-20 contract in question\r\n  */\r\n  function enableERC20ContractAsPayment(address _erc20TokenContract) public onlyTeamOrOwner {\r\n    allowedTokenContracts[_erc20TokenContract].isActive = true;\r\n  }\r\n\r\n  /**\r\n  * @dev Disable an ERC-20 contract as being a valid payment method. If passed a contract which has not been added\r\n  * it will assume the default value of zero. This should not be used to create new payment tokens.\r\n  * @param _erc20TokenContract address of ERC-20 contract in question\r\n  */\r\n  function disableERC20ContractAsPayment(address _erc20TokenContract) public onlyTeamOrOwner {\r\n    allowedTokenContracts[_erc20TokenContract].isActive = false;\r\n  }\r\n\r\n  /**\r\n  * @dev Enable only ERC-20 payments for minting on this contract\r\n  */\r\n  function enableERC20OnlyMinting() public onlyTeamOrOwner {\r\n    onlyERC20MintingMode = true;\r\n  }\r\n\r\n  /**\r\n  * @dev Disable only ERC-20 payments for minting on this contract\r\n  */\r\n  function disableERC20OnlyMinting() public onlyTeamOrOwner {\r\n    onlyERC20MintingMode = false;\r\n  }\r\n\r\n  /**\r\n  * @dev Set the payout of the ERC-20 token payout to a specific address\r\n  * @param _newErc20Payable new payout addresses of ERC-20 tokens\r\n  */\r\n  function setERC20PayableAddress(address _newErc20Payable) public onlyTeamOrOwner {\r\n    if(_newErc20Payable == address(0)) revert CannotBeNullAddress();\r\n    if(_newErc20Payable == erc20Payable) revert NoStateChange();\r\n    erc20Payable = _newErc20Payable;\r\n  }\r\n}\r\n\r\n\r\n  \r\n// File: isFeeable.sol\r\nabstract contract Feeable is Teams, ProviderFees {\r\n  uint256 public PRICE;\r\n\r\n  function setPrice(uint256 _feeInWei) public onlyTeamOrOwner {\r\n    PRICE = _feeInWei;\r\n  }\r\n\r\n  function getPrice(uint256 _count) public view returns (uint256) {\r\n    return (PRICE * _count) + PROVIDER_FEE;\r\n  }\r\n}\r\n\r\n  \r\n/* File: Tippable.sol\r\n/* @dev Allows owner to set strict enforcement of payment to mint price.\r\n/* Would then allow buyers to pay _more_ than the mint fee - consider it as a tip\r\n/* when doing a free mint with opt-in pricing.\r\n/* When strict pricing is enabled => msg.value must extactly equal the expected value\r\n/* when strict pricing is disabled => msg.value must be _at least_ the expected value.\r\n/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/* Pros - can take in gratituity payments during a mint. \r\n/* Cons - However if you decrease pricing during mint txn settlement \r\n/* it can result in mints landing who technically now have overpaid.\r\n*/\r\nabstract contract Tippable is Teams {\r\n  bool public strictPricing;\r\n\r\n  function setStrictPricing(bool _newStatus) public onlyTeamOrOwner {\r\n    strictPricing = _newStatus;\r\n  }\r\n\r\n  // @dev check if msg.value is correct according to pricing enforcement\r\n  // @param _msgValue -> passed in msg.value of tx\r\n  // @param _expectedPrice -> result of getPrice(...args)\r\n  function priceIsRight(uint256 _msgValue, uint256 _expectedPrice) internal view returns (bool) {\r\n    return strictPricing ? \r\n      _msgValue == _expectedPrice : \r\n      _msgValue >= _expectedPrice;\r\n  }\r\n}\r\n  \r\ncontract MintplexERC721A is \r\n    Ownable,\r\n    Teams,\r\n    ERC721A,\r\n    Initializable,\r\n    WithdrawableV2,\r\n    ReentrancyGuard, \r\n    Feeable,\r\n    Tippable,\r\n    Allowlist \r\n{\r\n    constructor() {_disableInitializers();}\r\n    function initialize(\r\n        address _owner,\r\n        address[] memory _payables,\r\n        uint256[] memory _payouts,\r\n        string memory tokenName,\r\n        string memory tokenSymbol,\r\n        string[2] memory uris, // [basetokenURI, collectionURI]\r\n        uint256[2] memory _collectionSettings, // [maxMintsPerTxn, collectionSize]\r\n        uint256[2] memory _settings //[mintPrice, maxWalletMints]\r\n    ) initializer public {\r\n        erc20Payable = _owner;\r\n    \r\n        payableAddresses = _payables;\r\n        payableFees = _payouts;\r\n        payableAddressCount = _payables.length;\r\n\r\n        _baseTokenURI = uris[0];\r\n        _contractURI = uris[1];\r\n\r\n        PRICE = _settings[0];\r\n        MAX_WALLET_MINTS = _settings[1];\r\n\r\n        // Contract-wide presets\r\n        strictPricing = true;\r\n        _baseTokenExtension = \".json\";\r\n\r\n        Ownable._transferOwnership(_owner);\r\n        ERC721A._init(tokenName, tokenSymbol, _collectionSettings[0], _collectionSettings[1]);\r\n        ProviderFees.init();\r\n    }\r\n\r\n    uint8 constant public CONTRACT_VERSION = 2;\r\n    string public _contractURI;\r\n    string public _baseTokenURI;\r\n    string public _baseTokenExtension;\r\n    bool public mintingOpen;\r\n    uint256 public MAX_WALLET_MINTS;\r\n  \r\n    /////////////// Admin Mint Functions\r\n    /**\r\n     * @dev Mints a token to an address with a tokenURI.\r\n     * This is owner only and allows a fee-free drop\r\n     * @param _to address of the future owner of the token\r\n     * @param _qty amount of tokens to drop the owner\r\n     */\r\n     function mintToAdminV2(address _to, uint256 _qty) public onlyTeamOrOwner{\r\n         if(_qty == 0) revert MintZeroQuantity();\r\n         if(currentTokenId() + _qty > collectionSize) revert CapExceeded();\r\n         _safeMint(_to, _qty, true);\r\n     }\r\n\r\n  \r\n    /////////////// PUBLIC MINT FUNCTIONS\r\n    /**\r\n    * @dev Mints tokens to an address in batch.\r\n    * fee may or may not be required*\r\n    * @param _to address of the future owner of the token\r\n    * @param _amount number of tokens to mint\r\n    */\r\n    function mintToMultiple(address _to, uint256 _amount) public payable {\r\n        if(onlyERC20MintingMode) revert OnlyERC20MintingEnabled();\r\n        if(_amount == 0) revert MintZeroQuantity();\r\n        if(_amount > maxBatchSize) revert TransactionCapExceeded();\r\n        if(!mintingOpen) revert PublicMintClosed();\r\n        if(mintingOpen && onlyAllowlistMode) revert PublicMintClosed();\r\n        \r\n        if(!canMintAmount(_to, _amount)) revert ExcessiveOwnedMints();\r\n        if(currentTokenId() + _amount > collectionSize) revert CapExceeded();\r\n        if(!priceIsRight(msg.value, getPrice(_amount))) revert InvalidPayment();\r\n        sendProviderFee();\r\n        _safeMint(_to, _amount, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints tokens to an address in batch using an ERC-20 token for payment\r\n     * fee may or may not be required*\r\n     * @param _to address of the future owner of the token\r\n     * @param _amount number of tokens to mint\r\n     * @param _erc20TokenContract erc-20 token contract to mint with\r\n     */\r\n    function mintToMultipleERC20(address _to, uint256 _amount, address _erc20TokenContract) public payable {\r\n      if(_amount == 0) revert MintZeroQuantity();\r\n      if(_amount > maxBatchSize) revert TransactionCapExceeded();\r\n      if(!mintingOpen) revert PublicMintClosed();\r\n      if(currentTokenId() + _amount > collectionSize) revert CapExceeded();\r\n      if(mintingOpen && onlyAllowlistMode) revert PublicMintClosed();\r\n      \r\n      if(!canMintAmount(_to, _amount)) revert ExcessiveOwnedMints();\r\n      if(msg.value != PROVIDER_FEE) revert InvalidPayment();\r\n\r\n      // ERC-20 Specific pre-flight checks\r\n      if(!isApprovedForERC20Payments(_erc20TokenContract)) revert ERC20TokenNotApproved();\r\n      uint256 tokensQtyToTransfer = chargeAmountForERC20(_erc20TokenContract) * _amount;\r\n      IERC20 payableToken = IERC20(_erc20TokenContract);\r\n\r\n      if(payableToken.balanceOf(_to) < tokensQtyToTransfer) revert ERC20InsufficientBalance();\r\n      if(payableToken.allowance(_to, address(this)) < tokensQtyToTransfer) revert ERC20InsufficientAllowance();\r\n\r\n      bool transferComplete = payableToken.transferFrom(_to, address(this), tokensQtyToTransfer);\r\n      if(!transferComplete) revert ERC20TransferFailed();\r\n\r\n      sendProviderFee();\r\n      _safeMint(_to, _amount, false);\r\n    }\r\n\r\n    function openMinting() public onlyTeamOrOwner {\r\n        mintingOpen = true;\r\n    }\r\n\r\n    function stopMinting() public onlyTeamOrOwner {\r\n        mintingOpen = false;\r\n    }\r\n\r\n  \r\n    ///////////// ALLOWLIST MINTING FUNCTIONS\r\n    /**\r\n    * @dev Mints tokens to an address using an allowlist.\r\n    * fee may or may not be required*\r\n    * @param _to address of the future owner of the token\r\n    * @param _amount number of tokens to mint\r\n    * @param _merkleProof merkle proof array\r\n    */\r\n    function mintToMultipleAL(address _to, uint256 _amount, bytes32[] calldata _merkleProof) public payable {\r\n        if(onlyERC20MintingMode) revert OnlyERC20MintingEnabled();\r\n        if(!onlyAllowlistMode || !mintingOpen) revert AllowlistMintClosed();\r\n        if(!isAllowlisted(_to, _merkleProof)) revert AddressNotAllowlisted();\r\n        if(_amount == 0) revert MintZeroQuantity();\r\n        if(_amount > maxBatchSize) revert TransactionCapExceeded();\r\n        if(!canMintAmount(_to, _amount)) revert ExcessiveOwnedMints();\r\n        if(currentTokenId() + _amount > collectionSize) revert CapExceeded();\r\n        if(!priceIsRight(msg.value, getPrice(_amount))) revert InvalidPayment();\r\n        \r\n\r\n        sendProviderFee();\r\n        _safeMint(_to, _amount, false);\r\n    }\r\n\r\n    /**\r\n    * @dev Mints tokens to an address using an allowlist.\r\n    * fee may or may not be required*\r\n    * @param _to address of the future owner of the token\r\n    * @param _amount number of tokens to mint\r\n    * @param _merkleProof merkle proof array\r\n    * @param _erc20TokenContract erc-20 token contract to mint with\r\n    */\r\n    function mintToMultipleERC20AL(address _to, uint256 _amount, bytes32[] calldata _merkleProof, address _erc20TokenContract) public payable {\r\n      if(!onlyAllowlistMode || !mintingOpen) revert AllowlistMintClosed();\r\n      if(!isAllowlisted(_to, _merkleProof)) revert AddressNotAllowlisted();\r\n      if(_amount == 0) revert MintZeroQuantity();\r\n      if(_amount > maxBatchSize) revert TransactionCapExceeded();\r\n      if(!canMintAmount(_to, _amount)) revert ExcessiveOwnedMints();\r\n      if(currentTokenId() + _amount > collectionSize) revert CapExceeded();\r\n      \r\n      if(msg.value != PROVIDER_FEE) revert InvalidPayment();\r\n\r\n      // ERC-20 Specific pre-flight checks\r\n      if(!isApprovedForERC20Payments(_erc20TokenContract)) revert ERC20TokenNotApproved();\r\n      uint256 tokensQtyToTransfer = chargeAmountForERC20(_erc20TokenContract) * _amount;\r\n      IERC20 payableToken = IERC20(_erc20TokenContract);\r\n\r\n      if(payableToken.balanceOf(_to) < tokensQtyToTransfer) revert ERC20InsufficientBalance();\r\n      if(payableToken.allowance(_to, address(this)) < tokensQtyToTransfer) revert ERC20InsufficientAllowance();\r\n\r\n      bool transferComplete = payableToken.transferFrom(_to, address(this), tokensQtyToTransfer);\r\n      if(!transferComplete) revert ERC20TransferFailed();\r\n      \r\n      sendProviderFee();\r\n      _safeMint(_to, _amount, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Enable allowlist minting fully by enabling both flags\r\n     * This is a convenience function for the Rampp user\r\n     */\r\n    function openAllowlistMint() public onlyTeamOrOwner {\r\n        enableAllowlistOnlyMode();\r\n        mintingOpen = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Close allowlist minting fully by disabling both flags\r\n     * This is a convenience function for the Rampp user\r\n     */\r\n    function closeAllowlistMint() public onlyTeamOrOwner {\r\n        disableAllowlistOnlyMode();\r\n        mintingOpen = false;\r\n    }\r\n\r\n\r\n  \r\n    /**\r\n    * @dev Check if wallet over MAX_WALLET_MINTS\r\n    * @param _address address in question to check if minted count exceeds max\r\n    */\r\n    function canMintAmount(address _address, uint256 _amount) public view returns(bool) {\r\n        if(_amount == 0) revert ValueCannotBeZero();\r\n        return (_numberMinted(_address) + _amount) <= MAX_WALLET_MINTS;\r\n    }\r\n\r\n    /**\r\n    * @dev Update the maximum amount of tokens that can be minted by a unique wallet\r\n    * @param _newWalletMax the new max of tokens a wallet can mint. Must be >= 1\r\n    */\r\n    function setWalletMax(uint256 _newWalletMax) public onlyTeamOrOwner {\r\n        if(_newWalletMax == 0) revert ValueCannotBeZero();\r\n        MAX_WALLET_MINTS = _newWalletMax;\r\n    }\r\n    \r\n\r\n  \r\n    /**\r\n     * @dev Allows owner to set Max mints per tx\r\n     * @param _newMaxMint maximum amount of tokens allowed to mint per tx. Must be >= 1\r\n     */\r\n     function setMaxMint(uint256 _newMaxMint) public onlyTeamOrOwner {\r\n         if(_newMaxMint == 0) revert ValueCannotBeZero();\r\n         maxBatchSize = _newMaxMint;\r\n     }\r\n    \r\n\r\n  function contractURI() public view returns (string memory) {\r\n    return _contractURI;\r\n  }\r\n  \r\n\r\n  function _baseURI() internal view virtual override returns(string memory) {\r\n    return _baseTokenURI;\r\n  }\r\n\r\n  function _baseURIExtension() internal view virtual override returns(string memory) {\r\n    return _baseTokenExtension;\r\n  }\r\n\r\n  function baseTokenURI() public view returns(string memory) {\r\n    return _baseTokenURI;\r\n  }\r\n\r\n  function setBaseURI(string calldata baseURI) external onlyTeamOrOwner {\r\n    _baseTokenURI = baseURI;\r\n  }\r\n\r\n  function setBaseTokenExtension(string calldata baseExtension) external onlyTeamOrOwner {\r\n    _baseTokenExtension = baseExtension;\r\n  }\r\n}\r\n\r\n//*********************************************************************//\r\n//*********************************************************************//  \r\n//                       Mintplex v3.0.0\r\n//\r\n//         This smart contract was generated by mintplex.xyz.\r\n//            Mintplex allows creators like you to launch \r\n//             large scale NFT communities without code!\r\n//\r\n//    Mintplex is not responsible for the content of this contract and\r\n//        hopes it is being used in a responsible and kind way.  \r\n//       Mintplex is not associated or affiliated with this project.                                                    \r\n//             Twitter: @MintplexNFT ---- mintplex.xyz\r\n//*********************************************************************//                                                     \r\n//*********************************************************************//", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressNotAllowlisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllowlistMintClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotBeNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateTeamAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TokenNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721RestrictedApprovalAddressRestricted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveOwnedMints\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTeamAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStateChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMaintainer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyERC20MintingEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayablePayoutMisMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayoutsNot100\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicMintClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionCapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueCannotBeZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WALLET_MINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROVIDER_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseTokenExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_chargeAmountInTokens\",\"type\":\"uint256\"}],\"name\":\"addOrUpdateERC20ContractAsPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"canMintAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"chargeAmountForERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAllowlistMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAllowlistOnlyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"disableERC20ContractAsPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableERC20OnlyMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAllowlistOnlyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"enableERC20ContractAsPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableERC20OnlyMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Payable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"inTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_payables\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_payouts\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string[2]\",\"name\":\"uris\",\"type\":\"string[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_collectionSettings\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_settings\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"isAllowlisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"isApprovedForERC20Payments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"mintToAdminV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintToMultiple\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintToMultipleAL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"mintToMultipleERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"mintToMultipleERC20AL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyAllowlistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyERC20MintingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openAllowlistMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payableAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payableAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payableFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newPayables\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newPayouts\",\"type\":\"uint256[]\"}],\"name\":\"resetPayables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"restrictedApprovalAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isRestricted\",\"type\":\"bool\"}],\"name\":\"setApprovalRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseExtension\",\"type\":\"string\"}],\"name\":\"setBaseTokenExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newErc20Payable\",\"type\":\"address\"}],\"name\":\"setERC20PayableAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxMint\",\"type\":\"uint256\"}],\"name\":\"setMaxMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInWei\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setProviderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setStrictPricing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWalletMax\",\"type\":\"uint256\"}],\"name\":\"setWalletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strictPricing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MintplexERC721A", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://74e8d090802542e6958e6ab5ab329d3482139bd49b90f6aa8e7b09fd2bc26703"}