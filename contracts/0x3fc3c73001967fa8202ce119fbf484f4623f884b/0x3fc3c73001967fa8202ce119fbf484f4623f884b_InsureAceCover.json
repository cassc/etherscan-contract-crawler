{"SourceCode": "// File: libs/BasicMetaTransaction.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract BasicMetaTransaction {\r\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\r\n\r\n    mapping(address => uint256) private nonces;\r\n\r\n    /**\r\n     * Main function to be called when user wants to execute meta transaction.\r\n     * The actual function to be called should be passed as param with name functionSignature\r\n     * Here the basic signature recovery is being used. Signature is expected to be generated using\r\n     * personal_sign method.\r\n     * @param userAddress Address of user trying to do meta transaction\r\n     * @param functionSignature Signature of the actual function to be called via meta transaction\r\n     * @param sigR R part of the signature\r\n     * @param sigS S part of the signature\r\n     * @param sigV V part of the signature\r\n     */\r\n    function executeMetaTransaction(\r\n        address userAddress,\r\n        bytes memory functionSignature,\r\n        bytes32 sigR,\r\n        bytes32 sigS,\r\n        uint8 sigV\r\n    ) public payable returns (bytes memory) {\r\n        require(\r\n            verify(userAddress, nonces[userAddress], block.chainid, functionSignature, sigR, sigS, sigV),\r\n            \"Signer and signature do not match\"\r\n        );\r\n        nonces[userAddress] += 1;\r\n\r\n        // Append userAddress at the end to extract it from calling context\r\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\r\n\r\n        require(success, \"Function call not successful\");\r\n        emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\r\n        return returnData;\r\n    }\r\n\r\n    function getNonce(address user) external view returns (uint256 nonce) {\r\n        nonce = nonces[user];\r\n    }\r\n\r\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\r\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    function verify(\r\n        address owner,\r\n        uint256 nonce,\r\n        uint256 chainID,\r\n        bytes memory functionSignature,\r\n        bytes32 sigR,\r\n        bytes32 sigS,\r\n        uint8 sigV\r\n    ) public view returns (bool) {\r\n        bytes32 hash = prefixed(keccak256(abi.encodePacked(nonce, this, chainID, functionSignature)));\r\n        address signer = ecrecover(hash, sigV, sigR, sigS);\r\n        require(signer != address(0), \"Invalid signature\");\r\n        return (owner == signer);\r\n    }\r\n\r\n    function msgSender() internal view returns (address sender) {\r\n        if (msg.sender == address(this)) {\r\n            bytes memory array = msg.data;\r\n            uint256 index = msg.data.length;\r\n            assembly {\r\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\r\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\r\n            }\r\n        } else {\r\n            return msg.sender;\r\n        }\r\n    }\r\n}\r\n\r\n// File: libs/TransferHelper.sol\r\n\r\n\r\n\r\npragma solidity 0.8.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeApprove: approve failed\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::safeTransfer: transfer failed\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper::transferFrom: transferFrom failed\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Counters.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: onchain/BaseCoverOnChain.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BaseCoverOnChain is Ownable, Pausable, BasicMetaTransaction {\r\n    event BuyProduct(uint256 indexed _productId, address _buyer);\r\n    event WithdrawAsset(address _user, address _to, address _token, uint256 _amount);\r\n    event SetExchangeAgent(address _setter, address _exchangeAgent);\r\n\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter public productIds;\r\n    mapping(address => bool) public availableCurrencies;\r\n\r\n    // address public immutable WETH;\r\n    address public exchangeAgent;\r\n\r\n    constructor(address _CVR, address _exchangeAgent) {\r\n        availableCurrencies[_CVR] = true;\r\n        exchangeAgent = _exchangeAgent;\r\n    }\r\n\r\n    modifier onlyAvailableToken(address _token) {\r\n        require(availableCurrencies[_token], \"Not allowed token\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function addCurrency(address _currency) external onlyOwner {\r\n        require(!availableCurrencies[_currency], \"Already available\");\r\n        availableCurrencies[_currency] = true;\r\n    }\r\n\r\n    function removeCurrency(address _currency) external onlyOwner {\r\n        require(availableCurrencies[_currency], \"Not available yet\");\r\n        availableCurrencies[_currency] = false;\r\n    }\r\n\r\n    function setExchangeAgent(address _exchangeAgent) external onlyOwner {\r\n        require(_exchangeAgent != address(0), \"ZERO Address\");\r\n        exchangeAgent = _exchangeAgent;\r\n        emit SetExchangeAgent(msg.sender, _exchangeAgent);\r\n    }\r\n\r\n    /**\r\n     * @dev For reflect tokens, we should deposit some tokens at contract directly,\r\n     * We will withdraw tokens deposited at contract through this function\r\n     */\r\n    function withdrawAsset(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyOwner {\r\n        TransferHelper.safeTransfer(_token, _to, _amount);\r\n        emit WithdrawAsset(msgSender(), _to, _token, _amount);\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * We would allow ExchangeAgent to consume _token in advance to save gas fee\r\n     */\r\n    function setAllowanceExchangeAgent(address _token) external onlyOwner {\r\n        TransferHelper.safeApprove(_token, exchangeAgent, type(uint256).max);\r\n    }\r\n\r\n    function revokeAllowExchangeAgent(address _token) external onlyOwner {\r\n        TransferHelper.safeApprove(_token, exchangeAgent, 0);\r\n    }\r\n}\r\n\r\n// File: interfaces/IInsureAce.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IInsureAce {\r\n    function getPremium(\r\n        uint256[] memory products,\r\n        uint256[] memory durationInDays,\r\n        uint256[] memory amounts,\r\n        address currency,\r\n        address owner,\r\n        uint256 referralCode,\r\n        uint256[] memory rewardPercentages\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256[] memory,\r\n            uint256,\r\n            uint256[] memory\r\n        );\r\n\r\n    function buyCover(\r\n        uint16[] memory products,\r\n        uint16[] memory durationInDays,\r\n        uint256[] memory amounts,\r\n        address currency,\r\n        address owner,\r\n        uint256 referralCode,\r\n        uint256 premiumAmount,\r\n        uint256[] memory helperParameters,\r\n        uint256[] memory securityParameters,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s\r\n    ) external payable;\r\n\r\n    function unlockRewardByController(address owner, address to) external returns (uint256);\r\n\r\n    function getRewardAmount() external view returns (uint256);\r\n\r\n    function getCoverOwnerRewardAmount(uint256 premiumAmount2Insur, uint256 overwrittenRewardPctg)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n\r\n    function getINSURRewardBalanceDetails() external view returns (uint256, uint256);\r\n\r\n    function removeINSURRewardBalance(address toAddress, uint256 amount) external;\r\n\r\n    function setBuyCoverMaxBlkNumLatency(uint256 numOfBlocks) external;\r\n\r\n    function setBuyCoverSigner(address signer, bool enabled) external;\r\n\r\n    function data() external view returns (address);\r\n}\r\n\r\n// File: interfaces/IExchangeAgent.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IExchangeAgent {\r\n    function getNeededTokenAmount(\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _desiredAmount\r\n    ) external returns (uint256);\r\n\r\n    function getTokenAmountForUSDC(address _token, uint256 _desiredAmount) external returns (uint256);\r\n\r\n    function getETHAmountForUSDC(uint256 _desiredAmount) external view returns (uint256);\r\n\r\n    function getTokenAmountForETH(address _token, uint256 _desiredAmount) external returns (uint256);\r\n\r\n    function swapTokenWithETH(\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _desiredAmount\r\n    ) external;\r\n\r\n    function swapTokenWithToken(\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _amount,\r\n        uint256 _desiredAmount\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: onchain/InsureAceCover.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * We are supporting only CVR for InsureAce\r\n */\r\ncontract InsureAceCover is BaseCoverOnChain, ReentrancyGuard {\r\n    event BuyInsureAce(uint16[] productIds, address _buyer, address _currency, address _token, uint256 _amount);\r\n\r\n    address public coverContractAddress;\r\n    // This is the WETH address of InsureAce smart contract\r\n    address public constant WETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    constructor(\r\n        address _CVR,\r\n        address _exchangeAgent,\r\n        address _coverContractAddress\r\n    ) BaseCoverOnChain(_CVR, _exchangeAgent) {\r\n        require(_coverContractAddress != address(0), \"S:1\");\r\n        coverContractAddress = _coverContractAddress;\r\n    }\r\n\r\n    function setup(address _coverContractAddress) external onlyOwner {\r\n        require(_coverContractAddress != address(0), \"S:1\");\r\n        coverContractAddress = _coverContractAddress;\r\n    }\r\n\r\n    function buyETHCoverByETH(\r\n        uint16[] memory products,\r\n        uint16[] memory durationInDays,\r\n        uint256[] memory amounts,\r\n        address currency,\r\n        uint256 referralCode,\r\n        uint256 premiumAmount,\r\n        uint256[] memory helperParameters,\r\n        uint256[] memory securityParameters,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s\r\n    ) external payable nonReentrant whenNotPaused {\r\n        require(currency == WETH, \"Should be ETH product\");\r\n        require(msg.value >= premiumAmount, \"Insufficient amount\");\r\n        if (msg.value - premiumAmount > 0) {\r\n            TransferHelper.safeTransferETH(msgSender(), msg.value - premiumAmount);\r\n        }\r\n\r\n        IInsureAce(coverContractAddress).buyCover{value: premiumAmount}(\r\n            products,\r\n            durationInDays,\r\n            amounts,\r\n            currency,\r\n            msgSender(),\r\n            referralCode,\r\n            premiumAmount,\r\n            helperParameters,\r\n            securityParameters,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        emit BuyInsureAce(products, msgSender(), currency, currency, premiumAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Through this function, users can get covers from Insure by some tokens such as CVR...\r\n     */\r\n    function buyETHCoverByToken(\r\n        uint16[] memory products,\r\n        uint16[] memory durationInDays,\r\n        uint256[] memory amounts,\r\n        address currency,\r\n        address _token,\r\n        uint256 referralCode,\r\n        uint256 premiumAmount,\r\n        uint256[] memory helperParameters,\r\n        uint256[] memory securityParameters,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s\r\n    ) external nonReentrant whenNotPaused {\r\n        require(currency == WETH, \"Should be ETH product\");\r\n        uint256 amount = IExchangeAgent(exchangeAgent).getTokenAmountForETH(_token, premiumAmount);\r\n\r\n        TransferHelper.safeTransferFrom(_token, msgSender(), address(this), amount);\r\n        // TransferHelper.safeApprove(_token, exchangeAgent, amount);\r\n\r\n        IExchangeAgent(exchangeAgent).swapTokenWithETH(_token, amount, premiumAmount);\r\n\r\n        IInsureAce(coverContractAddress).buyCover{value: premiumAmount}(\r\n            products,\r\n            durationInDays,\r\n            amounts,\r\n            currency,\r\n            msgSender(),\r\n            referralCode,\r\n            premiumAmount,\r\n            helperParameters,\r\n            securityParameters,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        emit BuyInsureAce(products, msgSender(), currency, _token, premiumAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Through this function, users can get covers from Insure by some tokens such as CVR...\r\n     */\r\n    function buyTokenCoverByToken(\r\n        uint16[] memory products,\r\n        uint16[] memory durationInDays,\r\n        uint256[] memory amounts,\r\n        address currency,\r\n        address _token,\r\n        uint256 referralCode,\r\n        uint256 premiumAmount,\r\n        uint256[] memory helperParameters,\r\n        uint256[] memory securityParameters,\r\n        uint8[] memory v,\r\n        bytes32[] memory r,\r\n        bytes32[] memory s\r\n    ) external nonReentrant whenNotPaused {\r\n        require(currency != WETH, \"Should be ERC20 token product\");\r\n        uint256 amount = currency == _token\r\n            ? premiumAmount\r\n            : IExchangeAgent(exchangeAgent).getNeededTokenAmount(_token, currency, premiumAmount);\r\n\r\n        TransferHelper.safeTransferFrom(_token, msgSender(), address(this), amount);\r\n        // TransferHelper.safeApprove(_token, exchangeAgent, amount);\r\n        if (currency != _token) {\r\n            IExchangeAgent(exchangeAgent).swapTokenWithToken(_token, currency, amount, premiumAmount);\r\n        }\r\n        TransferHelper.safeApprove(currency, coverContractAddress, premiumAmount);\r\n\r\n        IInsureAce(coverContractAddress).buyCover(\r\n            products,\r\n            durationInDays,\r\n            amounts,\r\n            currency,\r\n            msgSender(),\r\n            referralCode,\r\n            premiumAmount,\r\n            helperParameters,\r\n            securityParameters,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n\r\n        emit BuyInsureAce(products, msgSender(), currency, _token, premiumAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CVR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coverContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"productIds\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyInsureAce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"BuyProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_setter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"SetExchangeAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAsset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableCurrencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"products\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"durationInDays\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"helperParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"securityParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"buyETHCoverByETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"products\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"durationInDays\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"helperParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"securityParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"buyETHCoverByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"products\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"durationInDays\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"helperParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"securityParameters\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"buyTokenCoverByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coverContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"revokeAllowExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setAllowanceExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeAgent\",\"type\":\"address\"}],\"name\":\"setExchangeAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coverContractAddress\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "InsureAceCover", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003c03b4ec9477809072ff9cc9292c9b25d4a8e6c60000000000000000000000005365fd7770c795e82869c57b5b254ccaae91d07a00000000000000000000000088ef6f235a4790292068646e79ee563339c796a0", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bce037c8fcb16e5aeab0b0aed6b7bd6244f29aa8bb67f91114b048a618a7e053"}