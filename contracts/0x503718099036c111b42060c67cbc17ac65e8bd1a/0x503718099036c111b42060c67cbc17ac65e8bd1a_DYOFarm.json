{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/DYOFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// DYOFarm:\\n// Create custom reward pools to incentivize stakers of any ERC20!\\n// https://twitter.com/DYOFarm\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"openzeppelin-contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"openzeppelin-contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"openzeppelin-contracts/access/Ownable.sol\\\";\\n\\nimport {IDYOFarmFactory} from \\\"./DYOFarmFactory.sol\\\";\\n\\ncontract DYOFarm is ReentrancyGuard, Ownable {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    struct UserInfo {\\n        uint256 totalDepositAmount; // Save total deposit amount\\n        uint256 rewardDebtToken1;\\n    }\\n\\n    struct Settings {\\n        uint256 startTime; // Start of rewards distribution\\n        uint256 endTime; // End of rewards distribution\\n    }\\n\\n    struct RewardsToken {\\n        IERC20 token;\\n        uint256 amount; // Total rewards to distribute\\n        uint256 remainingAmount; // Remaining rewards to distribute\\n        uint256 accRewardsPerShare;\\n    }\\n\\n    IDYOFarmFactory public factory;\\n    uint256 public creationTime; // Creation time of this DYOFarm.sol\\n    bool public emergencyClose; // When activated, can't distribute rewards anymore\\n\\n    IERC20 public depositToken;\\n    RewardsToken public rewardsToken1; // rewardsToken1 data\\n\\n    // pool info\\n    uint256 public totalDepositAmount;\\n    uint256 public lastRewardTime;\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    Settings public settings; // global and requirements settings\\n\\n    constructor(address owner_, IERC20 depositToken_, IERC20 rewardsToken1_, Settings memory settings_) {\\n        require(_currentBlockTimestamp() < settings_.startTime, \\\"invalid startTime\\\");\\n        require(settings_.startTime < settings_.endTime, \\\"invalid endTime\\\");\\n\\n        factory = IDYOFarmFactory(msg.sender);\\n\\n        creationTime = _currentBlockTimestamp();\\n\\n        depositToken = depositToken_;\\n        rewardsToken1.token = rewardsToken1_;\\n\\n        settings.startTime = settings_.startTime;\\n        settings.endTime = settings_.endTime;\\n        lastRewardTime = settings_.startTime;\\n\\n        Ownable.transferOwnership(owner_);\\n    }\\n\\n    event ActivateEmergencyClose();\\n    event AddRewardsToken1(uint256 amount, uint256 feeAmount);\\n    event Deposit(address indexed userAddress, uint256 amount);\\n    event Harvest(address indexed userAddress, IERC20 rewardsToken, uint256 pending);\\n    event SetDateSettings(uint256 endTime);\\n    event UpdatePool();\\n    event Withdraw(address indexed userAddress, uint256 amount);\\n    event EmergencyWithdraw(address indexed userAddress, uint256 amount);\\n    event WithdrawRewardsToken1(uint256 amount, uint256 totalRewardsAmount);\\n\\n    /**\\n     * @dev Returns the amount of rewardsToken1 distributed every second\\n     */\\n    function rewardsToken1PerSecond() public view returns (uint256) {\\n        if (settings.endTime <= lastRewardTime) return 0;\\n        return rewardsToken1.remainingAmount.div(settings.endTime.sub(lastRewardTime));\\n    }\\n\\n    /**\\n     * @dev Returns pending rewards (rewardsToken1) for \\\"account\\\" address\\n     */\\n    function pendingRewards(address account) external view returns (uint256 pending1) {\\n        UserInfo memory user = userInfo[account];\\n\\n        // recompute accRewardsPerShare for rewardsToken1 if not up to date\\n        uint256 accRewardsToken1PerShare_ = rewardsToken1.accRewardsPerShare;\\n\\n        // only if existing deposits and lastRewardTime already passed\\n        if (lastRewardTime < _currentBlockTimestamp() && totalDepositAmount > 0) {\\n            uint256 rewardsAmount = rewardsToken1PerSecond().mul(_currentBlockTimestamp().sub(lastRewardTime));\\n            // in case of rounding errors\\n            if (rewardsAmount > rewardsToken1.remainingAmount) rewardsAmount = rewardsToken1.remainingAmount;\\n            accRewardsToken1PerShare_ = accRewardsToken1PerShare_.add(rewardsAmount.mul(1e18).div(totalDepositAmount));\\n        }\\n        pending1 = (user.totalDepositAmount.mul(accRewardsToken1PerShare_).div(1e18).sub(user.rewardDebtToken1));\\n    }\\n\\n    /**\\n     * @dev Update this DYOFarm.sol\\n     */\\n    function updatePool() external nonReentrant {\\n        _updatePool();\\n    }\\n\\n    function deposit(uint256 amount) external {\\n        require((settings.endTime >= _currentBlockTimestamp()) && !emergencyClose, \\\"not allowed\\\");\\n        uint256 balanceBefore = IERC20(depositToken).balanceOf(address(this));\\n        IERC20(depositToken).transferFrom(msg.sender, address(this), amount);\\n        _deposit(msg.sender, amount);\\n        require(balanceBefore + amount >= IERC20(depositToken).balanceOf(address(this)), \\\"Likely a fee on transfer error\\\");\\n    }\\n\\n    function withdraw(uint256 amount) external virtual nonReentrant {\\n        _updatePool();\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(user.totalDepositAmount >= amount, \\\"Withdrawing too much\\\");\\n        _harvest(user, msg.sender);\\n\\n        user.totalDepositAmount = user.totalDepositAmount.sub(amount);\\n        totalDepositAmount = totalDepositAmount.sub(amount);\\n\\n        _updateRewardDebt(user);\\n\\n        IERC20(depositToken).transfer(msg.sender, amount);\\n\\n        emit Withdraw(msg.sender, amount);\\n    }\\n\\n    function emergencyWithdraw() external virtual nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 amount = user.totalDepositAmount;\\n\\n        user.totalDepositAmount = user.totalDepositAmount.sub(amount);\\n        totalDepositAmount = totalDepositAmount.sub(amount);\\n\\n        _updateRewardDebt(user);\\n\\n        IERC20(depositToken).transfer(msg.sender, amount);\\n\\n        emit EmergencyWithdraw(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Harvest pending DYOFarm.sol rewards\\n     */\\n    function harvest() external nonReentrant {\\n        _updatePool();\\n        UserInfo storage user = userInfo[msg.sender];\\n        _harvest(user, msg.sender);\\n        _updateRewardDebt(user);\\n    }\\n\\n    /**\\n     * @dev Transfer ownership of this DYOFarm.sol\\n     *\\n     * Must only be called by the owner of this contract\\n     */\\n    function transferOwnership(address newOwner) public override onlyOwner {\\n        _setNitroPoolOwner(newOwner);\\n        Ownable.transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfer ownership of this DYOFarm.sol\\n     *\\n     * Must only be called by the owner of this contract\\n     */\\n    function renounceOwnership() public override onlyOwner {\\n        _setNitroPoolOwner(address(0));\\n        Ownable.renounceOwnership();\\n    }\\n\\n    /**\\n     * @dev Add rewards to this DYOFarm.sol\\n     */\\n    function addRewards(uint256 amountToken1) external nonReentrant {\\n        require(_currentBlockTimestamp() < settings.endTime, \\\"pool ended\\\");\\n        _updatePool();\\n\\n        // get active fee share for this DYOFarm.sol\\n        uint256 feeShare = factory.getNitroPoolFee(address(this), owner());\\n        address feeAddress = factory.feeAddress();\\n        uint256 feeAmount;\\n\\n        if (amountToken1 > 0) {\\n            // token1 fee\\n            feeAmount = amountToken1.mul(feeShare).div(10000);\\n            amountToken1 =\\n                _transferSupportingFeeOnTransfer(rewardsToken1.token, msg.sender, amountToken1.sub(feeAmount));\\n\\n            // recomputes rewards to distribute\\n            rewardsToken1.amount = rewardsToken1.amount.add(amountToken1);\\n            rewardsToken1.remainingAmount = rewardsToken1.remainingAmount.add(amountToken1);\\n\\n            emit AddRewardsToken1(amountToken1, feeAmount);\\n\\n            if (feeAmount > 0) {\\n                rewardsToken1.token.safeTransferFrom(msg.sender, feeAddress, feeAmount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw rewards from this DYOFarm.sol\\n     *\\n     * Must only be called by the owner\\n     * Must only be called before the start time of the Nitro Pool\\n     */\\n    function withdrawRewards(uint256 amountToken1) external onlyOwner nonReentrant {\\n        require(block.timestamp < settings.startTime);\\n        if (amountToken1 > 0) {\\n            // recomputes rewards to distribute\\n            rewardsToken1.amount = rewardsToken1.amount.sub(amountToken1, \\\"too high\\\");\\n            rewardsToken1.remainingAmount = rewardsToken1.remainingAmount.sub(amountToken1, \\\"too high\\\");\\n\\n            emit WithdrawRewardsToken1(amountToken1, rewardsToken1.amount);\\n            _safeRewardsTransfer(rewardsToken1.token, msg.sender, amountToken1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the pool's datetime settings\\n     *\\n     * Must only be called by the owner\\n     */\\n    function setDateSettings(uint256 endTime_) external nonReentrant onlyOwner {\\n        require(settings.startTime < endTime_, \\\"invalid endTime\\\");\\n        require(_currentBlockTimestamp() <= settings.endTime, \\\"pool ended\\\");\\n\\n        settings.endTime = endTime_;\\n\\n        emit SetDateSettings(endTime_);\\n    }\\n\\n    /**\\n     * @dev Emergency close\\n     *\\n     * Must only be called by the owner\\n     * Emergency only: if used, the whole pool is definitely made void\\n     * All rewards are automatically transferred to the emergency recovery address\\n     */\\n    function activateEmergencyClose() external nonReentrant onlyOwner {\\n        address emergencyRecoveryAddress = factory.emergencyRecoveryAddress();\\n\\n        uint256 remainingToken1 = rewardsToken1.remainingAmount;\\n\\n        rewardsToken1.amount = rewardsToken1.amount.sub(remainingToken1);\\n        rewardsToken1.remainingAmount = 0;\\n\\n        emergencyClose = true;\\n\\n        emit ActivateEmergencyClose();\\n        // transfer rewardsToken1 remaining amount if any\\n        _safeRewardsTransfer(rewardsToken1.token, emergencyRecoveryAddress, remainingToken1);\\n    }\\n\\n    /**\\n     * @dev Updates rewards states of this Nitro Pool to be up-to-date\\n     */\\n    function _updatePool() internal {\\n        uint256 currentBlockTimestamp = _currentBlockTimestamp();\\n\\n        if (currentBlockTimestamp <= lastRewardTime) return;\\n\\n        // do nothing if there is no deposit\\n        if (totalDepositAmount == 0) {\\n            lastRewardTime = currentBlockTimestamp;\\n            emit UpdatePool();\\n            return;\\n        }\\n\\n        // updates rewardsToken1 state\\n        uint256 rewardsAmount = rewardsToken1PerSecond().mul(currentBlockTimestamp.sub(lastRewardTime));\\n        // ensure we do not distribute more than what's available\\n        if (rewardsAmount > rewardsToken1.remainingAmount) rewardsAmount = rewardsToken1.remainingAmount;\\n        rewardsToken1.remainingAmount = rewardsToken1.remainingAmount.sub(rewardsAmount);\\n        rewardsToken1.accRewardsPerShare =\\n            rewardsToken1.accRewardsPerShare.add(rewardsAmount.mul(1e18).div(totalDepositAmount));\\n\\n        lastRewardTime = currentBlockTimestamp;\\n        emit UpdatePool();\\n    }\\n\\n    /**\\n     * @dev Add a user's deposited amount into this Nitro Pool\\n     */\\n    function _deposit(address account, uint256 amount) internal {\\n        _updatePool();\\n\\n        UserInfo storage user = userInfo[account];\\n        _harvest(user, account);\\n\\n        user.totalDepositAmount = user.totalDepositAmount.add(amount);\\n        totalDepositAmount = totalDepositAmount.add(amount);\\n        _updateRewardDebt(user);\\n\\n        emit Deposit(account, amount);\\n    }\\n\\n    /**\\n     * @dev Transfer to a user its pending rewards\\n     */\\n    function _harvest(UserInfo storage user, address to) internal {\\n        uint256 pending =\\n            user.totalDepositAmount.mul(rewardsToken1.accRewardsPerShare).div(1e18).sub(user.rewardDebtToken1);\\n        _safeRewardsTransfer(rewardsToken1.token, to, pending);\\n\\n        emit Harvest(to, rewardsToken1.token, pending);\\n    }\\n\\n    /**\\n     * @dev Update a user's rewardDebt for rewardsToken1\\n     */\\n    function _updateRewardDebt(UserInfo storage user) internal virtual {\\n        (bool succeed, uint256 result) = user.totalDepositAmount.tryMul(rewardsToken1.accRewardsPerShare);\\n        if (succeed) user.rewardDebtToken1 = result.div(1e18);\\n    }\\n\\n    /**\\n     * @dev Handle deposits of tokens with transfer tax\\n     */\\n    function _transferSupportingFeeOnTransfer(IERC20 token, address user, uint256 amount)\\n        internal\\n        returns (uint256 receivedAmount)\\n    {\\n        uint256 previousBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(user, address(this), amount);\\n        return token.balanceOf(address(this)).sub(previousBalance);\\n    }\\n\\n    /**\\n     * @dev Safe token transfer function, in case rounding error causes pool to not have enough tokens\\n     */\\n    function _safeRewardsTransfer(IERC20 token, address to, uint256 amount) internal virtual {\\n        if (amount == 0) return;\\n\\n        uint256 balance = token.balanceOf(address(this));\\n        // cap to available balance\\n        if (amount > balance) {\\n            amount = balance;\\n        }\\n        token.safeTransfer(to, amount);\\n    }\\n\\n    function _setNitroPoolOwner(address newOwner) internal {\\n        factory.setNitroPoolOwner(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Utility function to get the current block timestamp\\n     */\\n    function _currentBlockTimestamp() internal view virtual returns (uint256) {\\n        /* solhint-disable not-rely-on-time */\\n        return block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/DYOFarmFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// DYOFarm:\\n// Create custom reward pools to incentivize stakers of any ERC20!\\n// https://twitter.com/DYOFarm\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"openzeppelin-contracts/access/Ownable.sol\\\";\\nimport \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-contracts/utils/EnumerableSet.sol\\\";\\n\\nimport \\\"./DYOFarm.sol\\\";\\n\\ninterface IDYOFarmFactory {\\n    function emergencyRecoveryAddress() external view returns (address);\\n    function feeAddress() external view returns (address);\\n    function getNitroPoolFee(address nitroPoolAddress, address ownerAddress) external view returns (uint256);\\n    function setNitroPoolOwner(address previousOwner, address newOwner) external;\\n}\\n\\ncontract DYOFarmFactory is Ownable, IDYOFarmFactory {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet internal _nitroPools; // all nitro pools\\n    mapping(address => EnumerableSet.AddressSet) internal _ownerNitroPools; // nitro pools per owner\\n\\n    uint256 public constant MAX_DEFAULT_FEE = 500; // (1%) max authorized default fee\\n    uint256 public defaultFee; // default fee for nitro pools (*1e2)\\n    address public override feeAddress; // to receive fees when defaultFee is set\\n    EnumerableSet.AddressSet internal _exemptedAddresses; // owners or nitro addresses exempted from default fee\\n\\n    address public override emergencyRecoveryAddress; // to recover rewards from emergency closed nitro pools\\n\\n    constructor(address emergencyRecoveryAddress_, address feeAddress_) {\\n        require(emergencyRecoveryAddress_ != address(0) && feeAddress_ != address(0), \\\"invalid\\\");\\n\\n        emergencyRecoveryAddress = emergencyRecoveryAddress_;\\n        feeAddress = feeAddress_;\\n    }\\n\\n    event CreateNitroPool(address nitroAddress);\\n    event SetDefaultFee(uint256 fee);\\n    event SetFeeAddress(address feeAddress);\\n    event SetEmergencyRecoveryAddress(address emergencyRecoveryAddress);\\n    event SetExemptedAddress(address exemptedAddress, bool isExempted);\\n    event SetNitroPoolOwner(address previousOwner, address newOwner);\\n\\n    modifier nitroPoolExists(address nitroPoolAddress) {\\n        require(_nitroPools.contains(nitroPoolAddress), \\\"unknown nitroPool\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the number of nitroPools\\n     */\\n    function nitroPoolsLength() external view returns (uint256) {\\n        return _nitroPools.length();\\n    }\\n\\n    /**\\n     * @dev Returns a nitroPool from its \\\"index\\\"\\n     */\\n    function getNitroPool(uint256 index) external view returns (address) {\\n        return _nitroPools.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of nitroPools owned by \\\"userAddress\\\"\\n     */\\n    function ownerNitroPoolsLength(address userAddress) external view returns (uint256) {\\n        return _ownerNitroPools[userAddress].length();\\n    }\\n\\n    /**\\n     * @dev Returns a nitroPool owned by \\\"userAddress\\\" from its \\\"index\\\"\\n     */\\n    function getOwnerNitroPool(address userAddress, uint256 index) external view returns (address) {\\n        return _ownerNitroPools[userAddress].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of exemptedAddresses\\n     */\\n    function exemptedAddressesLength() external view returns (uint256) {\\n        return _exemptedAddresses.length();\\n    }\\n\\n    /**\\n     * @dev Returns an exemptedAddress from its \\\"index\\\"\\n     */\\n    function getExemptedAddress(uint256 index) external view returns (address) {\\n        return _exemptedAddresses.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns if a given address is in exemptedAddresses\\n     */\\n    function isExemptedAddress(address checkedAddress) external view returns (bool) {\\n        return _exemptedAddresses.contains(checkedAddress);\\n    }\\n\\n    /**\\n     * @dev Returns the fee for \\\"nitroPoolAddress\\\" address\\n     */\\n    function getNitroPoolFee(address nitroPoolAddress, address ownerAddress) external view override returns (uint256) {\\n        if (_exemptedAddresses.contains(nitroPoolAddress) || _exemptedAddresses.contains(ownerAddress)) {\\n            return 0;\\n        }\\n        return defaultFee;\\n    }\\n\\n    /**\\n     * @dev Deploys a new Nitro Pool\\n     */\\n    function createNitroPool(IERC20 depositToken, IERC20 rewardsToken1, DYOFarm.Settings calldata settings)\\n        external\\n        virtual\\n        returns (address nitroPool)\\n    {\\n        // Initialize new nitro pool\\n        nitroPool = address(new DYOFarm(msg.sender, depositToken, rewardsToken1, settings));\\n\\n        // Add new nitro\\n        _nitroPools.add(nitroPool);\\n        _ownerNitroPools[msg.sender].add(nitroPool);\\n\\n        emit CreateNitroPool(nitroPool);\\n    }\\n\\n    /**\\n     * @dev Transfers a Nitro Pool's ownership\\n     *\\n     * Must only be called by the DYOFarm.sol contract\\n     */\\n    function setNitroPoolOwner(address previousOwner, address newOwner) external override nitroPoolExists(msg.sender) {\\n        require(_ownerNitroPools[previousOwner].remove(msg.sender), \\\"invalid owner\\\");\\n        _ownerNitroPools[newOwner].add(msg.sender);\\n\\n        emit SetNitroPoolOwner(previousOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev Set nitroPools default fee (when adding rewards)\\n     *\\n     * Must only be called by the owner\\n     */\\n    function setDefaultFee(uint256 newFee) external onlyOwner {\\n        require(newFee <= MAX_DEFAULT_FEE, \\\"invalid amount\\\");\\n\\n        defaultFee = newFee;\\n        emit SetDefaultFee(newFee);\\n    }\\n\\n    /**\\n     * @dev Set fee address\\n     *\\n     * Must only be called by the owner\\n     */\\n    function setFeeAddress(address feeAddress_) external onlyOwner {\\n        require(feeAddress_ != address(0), \\\"zero address\\\");\\n\\n        feeAddress = feeAddress_;\\n        emit SetFeeAddress(feeAddress_);\\n    }\\n\\n    /**\\n     * @dev Add or remove exemptedAddresses\\n     *\\n     * Must only be called by the owner\\n     */\\n    function setExemptedAddress(address exemptedAddress, bool isExempted) external onlyOwner {\\n        require(exemptedAddress != address(0), \\\"zero address\\\");\\n\\n        if (isExempted) _exemptedAddresses.add(exemptedAddress);\\n        else _exemptedAddresses.remove(exemptedAddress);\\n\\n        emit SetExemptedAddress(exemptedAddress, isExempted);\\n    }\\n\\n    /**\\n     * @dev Set emergencyRecoveryAddress\\n     *\\n     * Must only be called by the owner\\n     */\\n    function setEmergencyRecoveryAddress(address emergencyRecoveryAddress_) external onlyOwner {\\n        require(emergencyRecoveryAddress_ != address(0), \\\"zero address\\\");\\n\\n        emergencyRecoveryAddress = emergencyRecoveryAddress_;\\n        emit SetEmergencyRecoveryAddress(emergencyRecoveryAddress_);\\n    }\\n\\n    /**\\n     * @dev Utility function to get the current block timestamp\\n     */\\n    function _currentBlockTimestamp() internal view virtual returns (uint256) {\\n        /* solhint-disable not-rely-on-time */\\n        return block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"depositToken_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardsToken1_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct DYOFarm.Settings\",\"name\":\"settings_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ActivateEmergencyClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"AddRewardsToken1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"SetDateSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewardsAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRewardsToken1\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateEmergencyClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken1\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyClose\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IDYOFarmFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken1PerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime_\",\"type\":\"uint256\"}],\"name\":\"setDateSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebtToken1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken1\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DYOFarm", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008d1071dd9e03bb94fd6576f460bfc648488e92aa0000000000000000000000005b093501e321e8430d6e260798453c408c7d1c0b000000000000000000000000e0f63a424a4439cbe457d80e4f4b51ad25b2c56c0000000000000000000000000000000000000000000000000000000065496ff000000000000000000000000000000000000000000000000000000000654eee30", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}