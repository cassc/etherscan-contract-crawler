{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @title ERC1155 Token\r\n * @author 0xSumo @PBADAO\r\n */\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ERC1155TokenReceiver {\r\n    function onERC1155Received(address operator_, address from_, uint256 id_, uint256 amount_, bytes calldata data_) external returns (bytes4);\r\n    function onERC1155BatchReceived(address operator_, address from_, uint256[] calldata ids_, uint256[] calldata amounts_, bytes calldata data_) external returns (bytes4);\r\n}\r\n\r\nabstract contract ERC1155Enumerable {\r\n    \r\n    string public name;\r\n    string public symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        name = name_; \r\n        symbol = symbol_; \r\n    }\r\n\r\n    event TransferSingle(address indexed operator_, address indexed from_,  address indexed to_, uint256 id_, uint256 amount_);\r\n    event TransferBatch(address indexed operator_, address indexed from_, address indexed to_, uint256[] ids_, uint256[] amounts_);\r\n    event ApprovalForAll(address indexed owner_, address indexed operator_, bool approved_);\r\n    event URI(string value_, uint256 indexed id_);\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    mapping(uint256 => address[]) public tokenToOwners;\r\n    mapping(uint256 => mapping(address => uint256)) public tokenToOwnersToIndex;\r\n\r\n    struct TokenBalances {\r\n        address owner;\r\n        uint256 balance;\r\n    }\r\n\r\n    function _addEnumerableData(address address_, uint256 id_) internal {\r\n        if (balanceOf[address_][id_] == 0) {\r\n            uint256 _nextIndex = tokenToOwners[id_].length;\r\n            tokenToOwners[id_].push(address_);\r\n            tokenToOwnersToIndex[id_][address_] = _nextIndex;\r\n        }\r\n    }\r\n\r\n    function _removeEnumerableData(address address_, uint256 id_) internal {\r\n        if (balanceOf[address_][id_] == 0) {\r\n            uint256 _userIndex = tokenToOwnersToIndex[id_][address_];\r\n            uint256 _lastIndex = tokenToOwners[id_].length - 1;\r\n            if (_userIndex != _lastIndex) {\r\n                address _userAtLastIndex = tokenToOwners[id_][_lastIndex];\r\n                tokenToOwners[id_][_userIndex] = _userAtLastIndex;\r\n                tokenToOwnersToIndex[id_][_userAtLastIndex] = _userIndex;\r\n            }\r\n\r\n            tokenToOwners[id_].pop();\r\n            delete tokenToOwnersToIndex[id_][address_];\r\n        }\r\n    }\r\n\r\n    function getOwnersOfTokenId(uint256 id_) public view returns (address[] memory) {\r\n        return tokenToOwners[id_];\r\n    }\r\n\r\n    function getOwnersOfTokenIdAndBalance(uint256 id_) public view returns (TokenBalances[] memory) {\r\n        address[] memory _owners = getOwnersOfTokenId(id_);\r\n        uint256 _ownersLength = _owners.length;\r\n        TokenBalances[] memory _TokenBalancesAll = new TokenBalances[] (_ownersLength);\r\n\r\n        for (uint256 i = 0; i < _ownersLength; i++) {\r\n            address _currentOwner = _owners[i];\r\n            _TokenBalancesAll[i] = TokenBalances(\r\n                _currentOwner,\r\n                balanceOf[_currentOwner][id_]\r\n            );\r\n        }\r\n        return _TokenBalancesAll;\r\n    }\r\n\r\n    function getTotalSupplyOfIds(uint256[] calldata ids_) public view returns (uint256) {\r\n        uint256 _tokens;\r\n        for (uint256 i = 0; i < ids_.length; i++) {\r\n            _tokens += getOwnersOfTokenId(ids_[i]).length;\r\n        }\r\n        return _tokens;\r\n    }\r\n\r\n    function uri(uint256 id) public view virtual returns (string memory);\r\n\r\n    function _isSameLength(uint256 a, uint256 b) internal pure returns (bool) {\r\n        return a == b;\r\n    }\r\n\r\n    function _isApprovedOrOwner(address from_) internal view returns (bool) {\r\n        return msg.sender == from_ || isApprovedForAll[from_][msg.sender];\r\n    }\r\n\r\n    function _ERC1155Supported(address from_, address to_, uint256 id_, uint256 amount_, bytes memory data_) internal {\r\n        require(to_.code.length == 0 ? to_ != address(0) :\r\n            ERC1155TokenReceiver(to_).onERC1155Received(\r\n                msg.sender, from_, id_, amount_, data_) ==\r\n            ERC1155TokenReceiver.onERC1155Received.selector,\r\n                \"_ERC1155Supported(): Unsupported Recipient!\"\r\n        );\r\n    }\r\n\r\n    function _ERC1155BatchSupported(address from_, address to_, uint256[] memory ids_, uint256[] memory amounts_, bytes memory data_) internal {\r\n        require(to_.code.length == 0 ? to_ != address(0) :\r\n            ERC1155TokenReceiver(to_).onERC1155BatchReceived(\r\n                msg.sender, from_, ids_, amounts_, data_) ==\r\n            ERC1155TokenReceiver.onERC1155BatchReceived.selector,\r\n                \"_ERC1155BatchSupported(): Unsupported Recipient!\"\r\n        );\r\n    }\r\n\r\n    function setApprovalForAll(address operator_, bool approved_) public virtual {\r\n        isApprovedForAll[msg.sender][operator_] = approved_;\r\n        emit ApprovalForAll(msg.sender, operator_, approved_);\r\n    }\r\n\r\n    function _transfer(address from_, address to_, uint256 id_, uint256 amount_) internal {\r\n        _addEnumerableData(to_, id_);\r\n        balanceOf[to_][id_] += amount_;\r\n        balanceOf[from_][id_] -= amount_;\r\n        _removeEnumerableData(from_, id_);\r\n    }\r\n\r\n    function safeTransferFrom(address from_, address to_, uint256 id_, uint256 amount_, bytes memory data_) public virtual {\r\n        require(_isApprovedOrOwner(from_));\r\n        _transfer(from_, to_, id_, amount_);\r\n        emit TransferSingle(msg.sender, from_, to_, id_, amount_);\r\n        _ERC1155Supported(from_, to_, id_, amount_, data_);\r\n    }\r\n\r\n    function safeBatchTransferFrom(address from_, address to_, uint256[] memory ids_, uint256[] memory amounts_, bytes memory data_) public virtual {\r\n        require(_isSameLength(ids_.length, amounts_.length));\r\n        require(_isApprovedOrOwner(from_));\r\n\r\n        for (uint256 i = 0; i < ids_.length; i++) {\r\n            _transfer(from_, to_, ids_[i], amounts_[i]);\r\n        }\r\n\r\n        emit TransferBatch(msg.sender, from_, to_, ids_, amounts_);\r\n\r\n        _ERC1155BatchSupported(from_, to_, ids_, amounts_, data_);\r\n    }\r\n\r\n    function _mintInternal(address to_, uint256 id_, uint256 amount_) internal {\r\n        _addEnumerableData(to_, id_);\r\n        balanceOf[to_][id_] += amount_;\r\n    }\r\n\r\n    function _mint(address to_, uint256 id_, uint256 amount_, bytes memory data_) internal {\r\n        _mintInternal(to_, id_, amount_);\r\n\r\n        emit TransferSingle(msg.sender, address(0), to_, id_, amount_);\r\n\r\n        _ERC1155Supported(address(0), to_, id_, amount_, data_);\r\n    }\r\n\r\n    function _batchMint(address to_, uint256[] memory ids_, uint256[] memory amounts_, bytes memory data_) internal {\r\n        require(_isSameLength(ids_.length, amounts_.length));\r\n\r\n        for (uint256 i = 0; i < ids_.length; i++) {\r\n            _mintInternal(to_, ids_[i], amounts_[i]);\r\n        }\r\n\r\n        emit TransferBatch(msg.sender, address(0), to_, ids_, amounts_);\r\n\r\n        _ERC1155BatchSupported(address(0), to_, ids_, amounts_, data_);\r\n    }\r\n\r\n    function _burnInternal(address from_, uint256 id_, uint256 amount_) internal {\r\n        balanceOf[from_][id_] -= amount_;\r\n        _removeEnumerableData(from_, id_);\r\n    }\r\n\r\n    function _burn(address from_, uint256 id_, uint256 amount_) internal {\r\n        _burnInternal(from_, id_, amount_);\r\n        emit TransferSingle(msg.sender, from_, address(0), id_, amount_);\r\n    }\r\n\r\n    function _batchBurn(address from_, uint256[] memory ids_, uint256[] memory amounts_) internal {\r\n        require(_isSameLength(ids_.length, amounts_.length));\r\n        \r\n        for (uint256 i = 0; i < ids_.length; i++) {\r\n            _burnInternal(from_, ids_[i], amounts_[i]);\r\n        }\r\n\r\n        emit TransferBatch(msg.sender, from_, address(0), ids_, amounts_);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId_) public pure virtual returns (bool) {\r\n        return interfaceId_ == 0x01ffc9a7 || interfaceId_ == 0xd9b67a26 || interfaceId_ == 0x0e89341c;\r\n    }\r\n\r\n    function balanceOfBatch(address[] memory owners_, uint256[] memory ids_) public view virtual returns (uint256[] memory) {\r\n        require(_isSameLength(owners_.length, ids_.length));\r\n\r\n        uint256[] memory _balances = new uint256[](owners_.length);\r\n\r\n        for (uint256 i = 0; i < owners_.length; i++) {\r\n            _balances[i] = balanceOf[owners_[i]][ids_[i]];\r\n        }\r\n        return _balances;\r\n    }\r\n}\r\n\r\nabstract contract ERC1155URI {\r\n    mapping(uint256 => string) public tokenToURI;\r\n    function _setTokenToURI(uint256 tokenId_, string memory uri_) internal virtual {\r\n        tokenToURI[tokenId_] = uri_;\r\n    }\r\n}\r\n\r\nabstract contract OwnControll {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event AdminSet(bytes32 indexed controllerType, bytes32 indexed controllerSlot, address indexed controller, bool status);\r\n    address public owner;\r\n    mapping(bytes32 => mapping(address => bool)) internal admin;\r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner() { require(owner == msg.sender, \"only owner\");_; }\r\n    modifier onlyAdmin(string memory type_) { require(isAdmin(type_, msg.sender), \"only admin\");_; }\r\n    function transferOwnership(address newOwner) external onlyOwner { emit OwnershipTransferred(owner, newOwner); owner = newOwner; }\r\n    function setAdmin(string calldata type_, address controller, bool status) external onlyOwner { bytes32 typeHash = keccak256(abi.encodePacked(type_)); admin[typeHash][controller] = status; emit AdminSet(typeHash, typeHash, controller, status); }\r\n    function isAdmin(string memory type_, address controller) public view returns (bool) { bytes32 typeHash = keccak256(abi.encodePacked(type_)); return admin[typeHash][controller]; }\r\n}\r\n\r\ninterface IMetadata {\r\n    function tokenURI(uint256 tokenId_) external view returns (string memory);\r\n}\r\n\r\ncontract TerumoJinjaShrine is ERC1155Enumerable, ERC1155URI, OwnControll {\r\n\r\n    address public metadata;\r\n    bool public useMetadata;\r\n\r\n    constructor() ERC1155Enumerable(\"TerumoJinja-Shrine\", \"TJS\") {\r\n        _setTokenToURI(1, \"ipfs://QmS6MnhAqyt3Ht1gPZ7LMTHiQvxu1csYYdMukYA1pwyPxe\");\r\n        _mint(0xE8E0A9042Df33d16b8604D87d9B703aBD64a31eC, 1, 100, \"0x00\");\r\n    }\r\n\r\n    function mint(address to_, uint256 id_, uint256 amount_, bytes memory data_) external onlyAdmin(\"MINTER\") {\r\n        _mint(to_, id_, amount_, data_);\r\n    }\r\n\r\n    function burn(address from_, uint256 id_, uint256 amount_) external onlyAdmin(\"BURNER\") {\r\n        _burn(from_, id_, amount_);\r\n    }\r\n\r\n    function setMetadata(address address_) external onlyAdmin(\"ADMIN\") { \r\n        metadata = address_; \r\n    }\r\n\r\n    function setTokenToURI(uint256 tokenId_, string memory uri_) external onlyAdmin(\"ADMIN\") { \r\n        _setTokenToURI(tokenId_, uri_);\r\n    }\r\n\r\n    function setUseMetadata(bool bool_) external onlyAdmin(\"ADMIN\") { \r\n        useMetadata = bool_; \r\n    }\r\n\r\n    function uri(uint256 id_) public view override returns (string memory) {\r\n        if (!useMetadata) {\r\n            return tokenToURI[id_];\r\n        }\r\n        else {\r\n            return IMetadata(metadata).tokenURI(id_);\r\n        }\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"controllerType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"controllerSlot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value_\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"getOwnersOfTokenId\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"getOwnersOfTokenIdAndBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC1155Enumerable.TokenBalances[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"}],\"name\":\"getTotalSupplyOfIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"type_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"type_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setTokenToURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setUseMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId_\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToOwnersToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useMetadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TerumoJinjaShrine", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a37033c7c373082dfeb3a0599abc3f11aa947bdafa355befe5f908130f899af0"}