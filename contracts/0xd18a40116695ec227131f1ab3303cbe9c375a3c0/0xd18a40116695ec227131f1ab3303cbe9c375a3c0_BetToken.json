{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\nBetKing is a frictionless and verifiable TG betting bot. you can bet many famous sports on it without KYC.\r\n\r\nWebsite: https://www.betking.games\r\nDocs: https://docs.betking.games\r\nBot: https://t.me/betkingwinbot\r\nTelegram:  https://t.me/BetKing_portal\r\nTwitter: https://twitter.com/betking_eth\r\n\r\n**/\r\npragma solidity 0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ncontract BetToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    // tax distribut config\r\n    uint256 private _taxDistributThreshold = 0.1 ether;\r\n    address[] public taxWallets;\r\n    mapping(address => uint) public taxPercentages;\r\n\r\n    string private constant _name = unicode\"BetKing\";\r\n    string private constant _symbol = unicode\"BET\";\r\n    uint256 private constant _tTotal = 1000000 ether;\r\n\r\n    uint256 public maxWalletSize = (_tTotal * 1) / 100;\r\n\r\n    uint256 public buyTax = 5;\r\n    uint256 public sellTax = 5;\r\n    uint256 public taxToBlackHole = 1;\r\n\r\n    address private blackHole = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 private _taxSwapThreshold = (_tTotal * 1) / 100;\r\n    uint256 private _maxTaxSwap = (_tTotal * 1) / 100;\r\n\r\n    uint256 private _highTaxBlock = 0;\r\n    uint256 private _highTax = 5;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router =\r\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address private uniswapV2Pair;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    uint256 private tradingStartBlock;\r\n\r\n    bool public tradingOpen = false;\r\n\r\n    event MaxWalletSizeUpdated(uint256 maxWalletSize);\r\n    event TaxUpdated(uint256 buyTax, uint256 sellTax);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        _balances[msg.sender] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        // only addresses that excluded from fee can transfer when trading is not open\r\n        if (!tradingOpen) {\r\n            require(\r\n                _isExcludedFromFee[from],\r\n                \"This account cannot send tokens until trading is enabled\"\r\n            );\r\n        }\r\n\r\n        uint256 taxAmount = _getTaxAmount(from, to, amount);\r\n\r\n        // swap tokens for eth\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        if (\r\n            !inSwap &&\r\n            to == uniswapV2Pair &&\r\n            swapEnabled &&\r\n            contractTokenBalance > _taxSwapThreshold\r\n        ) {\r\n            swapTokensForEth(\r\n                min(amount, min(contractTokenBalance, _maxTaxSwap))\r\n            );\r\n            uint256 contractETHBalance = address(this).balance;\r\n            if (\r\n                contractETHBalance > 0 &&\r\n                contractETHBalance > _taxDistributThreshold\r\n            ) {\r\n                distributTaxETH();\r\n            }\r\n        }\r\n\r\n        if (taxAmount > 0) {\r\n            // transfer tax to dead address\r\n            uint256 deadTaxAmount = (amount * taxToBlackHole) / 100;\r\n            _balances[blackHole] = _balances[blackHole] + deadTaxAmount;\r\n            emit Transfer(address(this), blackHole, deadTaxAmount);\r\n\r\n            // transfer tax to this contract\r\n            _balances[address(this)] =\r\n                _balances[address(this)] +\r\n                taxAmount -\r\n                deadTaxAmount;\r\n            emit Transfer(from, address(this), taxAmount - deadTaxAmount);\r\n        }\r\n\r\n        _balances[from] = _balances[from] - amount;\r\n        _balances[to] = _balances[to] + amount - taxAmount;\r\n        emit Transfer(from, to, amount - taxAmount);\r\n    }\r\n\r\n    function _getTaxAmount(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private view returns (uint256) {\r\n        uint256 taxAmount = 0;\r\n\r\n        // buy\r\n        if (\r\n            from == uniswapV2Pair &&\r\n            to != address(uniswapV2Router) &&\r\n            !_isExcludedFromFee[to]\r\n        ) {\r\n            require(\r\n                balanceOf(to) + amount <= maxWalletSize,\r\n                \"Exceeds the maxWalletSize.\"\r\n            );\r\n            taxAmount = block.number >= tradingStartBlock + _highTaxBlock\r\n                ? (amount * buyTax) / 100\r\n                : (amount * _highTax) / 100;\r\n        }\r\n\r\n        // sale\r\n        if (\r\n            to == uniswapV2Pair &&\r\n            from != address(this) &&\r\n            !_isExcludedFromFee[from]\r\n        ) {\r\n            taxAmount = block.number >= tradingStartBlock + _highTaxBlock\r\n                ? (amount * sellTax) / 100\r\n                : (amount * _highTax) / 100;\r\n        }\r\n\r\n        return taxAmount;\r\n    }\r\n\r\n    // reduceTax\r\n    function reduceTax(\r\n        uint256 _buyTax,\r\n        uint256 _sellTax,\r\n        uint256 _taxToBlackHole\r\n    ) external onlyOwner {\r\n        require(_buyTax <= buyTax && _sellTax <= sellTax, \"Invalid tax\");\r\n        require(\r\n            _taxToBlackHole <= _buyTax && _taxToBlackHole <= _sellTax,\r\n            \"Invalid tax\"\r\n        );\r\n\r\n        buyTax = _buyTax;\r\n        sellTax = _sellTax;\r\n        taxToBlackHole = _taxToBlackHole;\r\n\r\n        emit TaxUpdated(buyTax, sellTax);\r\n    }\r\n\r\n    // add address to _isExcludedFromFee\r\n    function addIsExcludedFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function setTaxSwapConfig(\r\n        uint256 taxSwapThreshold,\r\n        uint256 maxTaxSwap\r\n    ) external onlyOwner {\r\n        _taxSwapThreshold = taxSwapThreshold;\r\n        _maxTaxSwap = maxTaxSwap;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        maxWalletSize = _tTotal;\r\n        emit MaxWalletSizeUpdated(_tTotal);\r\n    }\r\n\r\n    function openTrading(\r\n        uint256 highTaxBlock,\r\n        uint256 highTax,\r\n        uint256 teamShare,\r\n        uint256 _buyTax,\r\n        uint256 _sellTax\r\n    ) external onlyOwner {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        require(taxWallets.length > 0, \"taxWallets is empty\");\r\n\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)) - teamShare,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        _highTaxBlock = highTaxBlock;\r\n        _highTax = highTax;\r\n\r\n        buyTax = _buyTax;\r\n        sellTax = _sellTax;\r\n\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        tradingStartBlock = block.number;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            distributTaxETH();\r\n        }\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n        if (!tradingOpen) {\r\n            return;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function distributTaxETH() public {\r\n        for (uint i = 0; i < taxWallets.length; i++) {\r\n            uint256 amount = (address(this).balance *\r\n                taxPercentages[taxWallets[i]]) / 100;\r\n            payable(taxWallets[i]).transfer(amount);\r\n        }\r\n    }\r\n\r\n    function setTaxDistributConfig(\r\n        uint256 taxDistributThreshold,\r\n        address[] memory _taxWallets,\r\n        uint[] memory _taxPercentages\r\n    ) external onlyOwner {\r\n        require(\r\n            _taxWallets.length == _taxPercentages.length,\r\n            \"taxWallets and taxPercentages length mismatch\"\r\n        );\r\n\r\n        _taxDistributThreshold = taxDistributThreshold;\r\n        taxWallets = _taxWallets;\r\n\r\n        uint count = 0;\r\n\r\n        for (uint i = 0; i < _taxWallets.length; i++) {\r\n            taxPercentages[_taxWallets[i]] = _taxPercentages[i];\r\n            count += _taxPercentages[i];\r\n        }\r\n\r\n        require(count == 100, \"Invalid taxPercentages\");\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"MaxWalletSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"}],\"name\":\"TaxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributTaxETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"highTaxBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTax\",\"type\":\"uint256\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_taxToBlackHole\",\"type\":\"uint256\"}],\"name\":\"reduceTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxDistributThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_taxWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_taxPercentages\",\"type\":\"uint256[]\"}],\"name\":\"setTaxDistributConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxSwapThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTaxSwap\",\"type\":\"uint256\"}],\"name\":\"setTaxSwapConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"taxPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxToBlackHole\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"taxWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BetToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0cade996b3380fa510be64fb330d69406b1193c460f59423af91192f7ab0328d"}