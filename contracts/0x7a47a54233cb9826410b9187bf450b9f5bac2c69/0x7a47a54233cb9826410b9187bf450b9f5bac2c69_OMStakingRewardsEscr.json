{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/nicklatkovich/pixelplex/riochain/om-token-v2/contracts/IntervalEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/Math.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./TwoStageOwnable.sol\\\";\\n\\ncontract IntervalEscrow is TwoStageOwnable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct NominatedStrategy {\\n        bool nominated;\\n        uint256 applicableAt;\\n        uint256 firstIntervalPerBlockReleaseAmount;\\n        uint256[] intervals;\\n    }\\n\\n    struct Strategy {\\n        uint256 currentIntervalIndex;\\n        uint256 currentIntervalStartedAt;\\n        uint256 lastReleasedAt;\\n        uint256 perBlockReleaseAmount;\\n        uint256[] intervals;\\n    }\\n\\n    function getBlockNumber() internal virtual view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    function getTimestamp() internal virtual view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    uint256 public exitApplicableAt = 0;\\n    uint256 public exitTimeout;\\n    uint256 public strategyChangeTimeout;\\n    NominatedStrategy public nominatedStrategy;\\n    Strategy public currentStrategy;\\n\\n    uint256 private _pool = 0;\\n    uint256 private _released = 0;\\n    IERC20 private _token;\\n\\n    function pool() public view returns (uint256) {\\n        return _pool;\\n    }\\n\\n    function released() public view returns (uint256) {\\n        return _released;\\n    }\\n\\n    function token() public view returns (IERC20) {\\n        return _token;\\n    }\\n\\n    function calculateUpdates(uint256 limit)\\n        public\\n        view\\n        returns (Strategy memory updatedStrategy, uint256 releasedAmount)\\n    {\\n        uint256 currentBlockNumber = getBlockNumber();\\n        updatedStrategy = currentStrategy;\\n        uint256 intervalsCount = updatedStrategy.intervals.length;\\n        while (limit > 0 && updatedStrategy.lastReleasedAt < currentBlockNumber) {\\n            uint256 releaseBlockNumber;\\n            uint256 perBlockReleaseAmount = updatedStrategy.perBlockReleaseAmount;\\n            if (updatedStrategy.currentIntervalIndex >= intervalsCount) releaseBlockNumber = currentBlockNumber;\\n            else {\\n                uint256 currentIntervalLength = updatedStrategy.intervals[updatedStrategy.currentIntervalIndex];\\n                uint256 currentIntervalStartedAt = updatedStrategy.currentIntervalStartedAt;\\n                uint256 currentIntervalEndsAt = currentIntervalStartedAt.add(currentIntervalLength);\\n                if (currentBlockNumber >= currentIntervalEndsAt) {\\n                    releaseBlockNumber = currentIntervalEndsAt;\\n                    updatedStrategy.currentIntervalIndex = updatedStrategy.currentIntervalIndex.add(1);\\n                    updatedStrategy.currentIntervalStartedAt = currentIntervalEndsAt;\\n                    updatedStrategy.perBlockReleaseAmount /= 2;\\n                } else releaseBlockNumber = currentBlockNumber;\\n            }\\n            uint256 blockDiff = releaseBlockNumber.sub(updatedStrategy.lastReleasedAt);\\n            uint256 intervalReleasedAmount = blockDiff.mul(perBlockReleaseAmount);\\n            releasedAmount = releasedAmount.add(intervalReleasedAmount);\\n            updatedStrategy.lastReleasedAt = releaseBlockNumber;\\n            limit -= 1;\\n        }\\n        releasedAmount = Math.min(releasedAmount, _pool);\\n    }\\n\\n    function getReleasableAmountWithLimit(uint256 limit) public view returns (uint256) {\\n        (, uint256 result) = calculateUpdates(limit);\\n        return result;\\n    }\\n\\n    function getReleasableAmount() public view returns (uint256) {\\n        return getReleasableAmountWithLimit(uint256(-1));\\n    }\\n\\n    event Claimed(uint256 amount);\\n    event ExitInitialized(uint256 applicableAt);\\n    event Exited(uint256 amount);\\n    event PoolIncreased(address indexed payer, uint256 amount);\\n    event Released(uint256 amount);\\n    event StrategyNominated(uint256 firstIntervalPerBlockReleaseAmount, uint256[] intervals, uint256 applicableAt);\\n    event StrategyUpdated(uint256 firstIntervalPerBlockReleaseAmount, uint256[] intervals);\\n\\n    constructor(\\n        uint256 exitTimeout_,\\n        uint256 firstIntervalPerBlockReleaseAmount,\\n        uint256 strategyChangeTimeout_,\\n        address owner_,\\n        uint256[] memory intervals,\\n        IERC20 token_\\n    ) public TwoStageOwnable(owner_) {\\n        exitTimeout = exitTimeout_;\\n        strategyChangeTimeout = strategyChangeTimeout_;\\n        _token = token_;\\n        _setup(firstIntervalPerBlockReleaseAmount, intervals);\\n    }\\n\\n    function releaseWithLimit(uint256 limit) public returns (bool success, uint256 releasedAmount) {\\n        (currentStrategy, releasedAmount) = calculateUpdates(limit);\\n        _pool = _pool.sub(releasedAmount);\\n        _released = _released.add(releasedAmount);\\n        emit Released(releasedAmount);\\n        success = true;\\n    }\\n\\n    function release() public returns (bool success, uint256 _releasedAmount) {\\n        return releaseWithLimit(uint256(-1));\\n    }\\n\\n    function applyExit() public onlyOwner returns (bool success) {\\n        require(exitApplicableAt > 0, \\\"Exit not initialized\\\");\\n        require(getTimestamp() >= exitApplicableAt, \\\"Exit timeout not passed\\\");\\n        exitApplicableAt = 0;\\n        _released = _released.add(_pool);\\n        _pool = 0;\\n        emit Exited(_released);\\n        _claim(_released);\\n        return true;\\n    }\\n\\n    function applyNominatedStrategy() public onlyOwner returns (bool success) {\\n        require(nominatedStrategy.nominated, \\\"No nominated strategy\\\");\\n        require(getTimestamp() >= nominatedStrategy.applicableAt, \\\"Nominating timeout not passed\\\");\\n        release();\\n        _setup(nominatedStrategy.firstIntervalPerBlockReleaseAmount, nominatedStrategy.intervals);\\n        nominatedStrategy.nominated = false;\\n        return true;\\n    }\\n\\n    function exit() public onlyOwner returns (bool success) {\\n        require(exitApplicableAt == 0, \\\"Exit initilized\\\");\\n        exitApplicableAt = getTimestamp().add(exitTimeout);\\n        emit ExitInitialized(exitApplicableAt);\\n        return true;\\n    }\\n\\n    function increasePool(uint256 amount) external returns (bool success) {\\n        release();\\n        _increasePool(msg.sender, amount);\\n        return true;\\n    }\\n\\n    function nominateNewStrategy(uint256 firstIntervalPerBlockReleaseAmount, uint256[] memory intervals)\\n        external\\n        onlyOwner\\n        returns (uint256 applicableAt)\\n    {\\n        applicableAt = getTimestamp().add(strategyChangeTimeout);\\n        nominatedStrategy = NominatedStrategy({\\n            nominated: true,\\n            applicableAt: applicableAt,\\n            firstIntervalPerBlockReleaseAmount: firstIntervalPerBlockReleaseAmount,\\n            intervals: intervals\\n        });\\n        emit StrategyNominated(firstIntervalPerBlockReleaseAmount, intervals, applicableAt);\\n    }\\n\\n    function claim(uint256 amount) external onlyOwner returns (bool success) {\\n        release();\\n        _claim(amount);\\n        return true;\\n    }\\n\\n    function claimAll() external onlyOwner returns (bool success) {\\n        release();\\n        _claim(_released);\\n        return true;\\n    }\\n\\n    function _claim(uint256 amount) internal {\\n        require(_released >= amount, \\\"No enough released tokens\\\");\\n        _released -= amount;\\n        emit Claimed(amount);\\n        _token.safeTransfer(owner, amount);\\n    }\\n\\n    function _increasePool(address payer, uint256 amount) internal {\\n        _pool = _pool.add(amount);\\n        emit PoolIncreased(payer, amount);\\n        _token.safeTransferFrom(payer, address(this), amount);\\n    }\\n\\n    function _setup(uint256 firstIntervalPerBlockReleaseAmount, uint256[] memory intervals) internal {\\n        uint256 currentBlockNumber = getBlockNumber();\\n        currentStrategy = Strategy({\\n            currentIntervalIndex: 0,\\n            currentIntervalStartedAt: currentBlockNumber,\\n            lastReleasedAt: currentBlockNumber,\\n            perBlockReleaseAmount: firstIntervalPerBlockReleaseAmount,\\n            intervals: intervals\\n        });\\n        emit StrategyUpdated(firstIntervalPerBlockReleaseAmount, intervals);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/nicklatkovich/pixelplex/riochain/om-token-v2/contracts/OMStakingRewardsEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IntervalEscrow.sol\\\";\\n\\ncontract OMStakingRewardsEscrow is IntervalEscrow {\\n    constructor(\\n        uint256 exitTimeout_,\\n        uint256 firstIntervalPerBlockReleaseAmount,\\n        uint256 strategyChangeTimeout_,\\n        address owner_,\\n        uint256[] memory intervals,\\n        IERC20 token_\\n    )\\n        public\\n        IntervalEscrow(\\n            exitTimeout_,\\n            firstIntervalPerBlockReleaseAmount,\\n            strategyChangeTimeout_,\\n            owner_,\\n            intervals,\\n            token_\\n        )\\n    {}\\n}\\n\"\r\n    },\r\n    \"/home/nicklatkovich/pixelplex/riochain/om-token-v2/contracts/TwoStageOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nabstract contract TwoStageOwnable {\\n  address public nominatedOwner;\\n  address public owner;\\n\\n  event OwnerChanged(address indexed newOwner);\\n  event OwnerNominated(address indexed nominatedOwner);\\n\\n  constructor(address owner_) internal {\\n    require(owner_ != address(0), \\\"Owner cannot be zero address\\\");\\n    _setOwner(owner_);\\n  }\\n\\n  function acceptOwnership() external returns (bool success) {\\n      require(msg.sender == nominatedOwner, \\\"Not nominated to ownership\\\");\\n      _setOwner(nominatedOwner);\\n      nominatedOwner = address(0);\\n      return true;\\n  }\\n\\n  function nominateNewOwner(address owner_) external onlyOwner returns (bool success) {\\n    _nominateNewOwner(owner_);\\n    return true;\\n  }\\n\\n  modifier onlyOwner {\\n      require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n      _;\\n  }\\n\\n  function _nominateNewOwner(address owner_) internal {\\n    nominatedOwner = owner_;\\n    emit OwnerNominated(owner_);\\n  }\\n\\n  function _setOwner(address newOwner) internal {\\n    owner = newOwner;\\n    emit OwnerChanged(newOwner);\\n  }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"constantinople\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exitTimeout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstIntervalPerBlockReleaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strategyChangeTimeout_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"intervals\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicableAt\",\"type\":\"uint256\"}],\"name\":\"ExitInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Exited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nominatedOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstIntervalPerBlockReleaseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"intervals\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicableAt\",\"type\":\"uint256\"}],\"name\":\"StrategyNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstIntervalPerBlockReleaseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"intervals\",\"type\":\"uint256[]\"}],\"name\":\"StrategyUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyNominatedStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"calculateUpdates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentIntervalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentIntervalStartedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleasedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perBlockReleaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"intervals\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IntervalEscrow.Strategy\",\"name\":\"updatedStrategy\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentIntervalIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentIntervalStartedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleasedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perBlockReleaseAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitApplicableAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getReleasableAmountWithLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increasePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstIntervalPerBlockReleaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"intervals\",\"type\":\"uint256[]\"}],\"name\":\"nominateNewStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"applicableAt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"nominated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"applicableAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstIntervalPerBlockReleaseAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_releasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"releaseWithLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyChangeTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OMStakingRewardsEscrow", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000008c67c00000000000000000000000000000000000000000000000001d0e7e88267960000000000000000000000000000000000000000000000000000000000000012750000000000000000000000000058dd7676663e28c937370d5fe89b91fb08958cc900000000000000000000000000000000000000000000000000000000000000c00000000000000000000000003593d125a4f7849a1b059e64f4517a86dd60c95d00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000247398", "EVMVersion": "constantinople", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}