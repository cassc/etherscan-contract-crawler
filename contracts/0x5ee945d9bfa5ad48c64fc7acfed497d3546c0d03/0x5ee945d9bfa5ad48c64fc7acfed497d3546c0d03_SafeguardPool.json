{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nlibrary BasePoolUserData {\\n    // Special ExitKind for all pools, used in Recovery Mode. Use the max 8-bit value to prevent conflicts\\n    // with future additions to the ExitKind enums (or any front-end code that maps to existing values)\\n    uint8 public constant RECOVERY_MODE_EXIT_KIND = 255;\\n\\n    // Return true if this is the special exit kind.\\n    function isRecoveryModeExitKind(bytes memory self) internal pure returns (bool) {\\n        // Check for the \\\"no data\\\" case, or abi.decode would revert\\n        return self.length > 0 && abi.decode(self, (uint8)) == RECOVERY_MODE_EXIT_KIND;\\n    }\\n\\n    // Parse the bptAmountIn out of the userData\\n    function recoveryModeExit(bytes memory self) internal pure returns (uint256 bptAmountIn) {\\n        (, bptAmountIn) = abi.decode(self, (uint8, uint256));\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IControlledPool {\\n    function setSwapFeePercentage(uint256 swapFeePercentage) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the RecoveryMode module.\\n */\\ninterface IRecoveryMode {\\n    /**\\n     * @dev Emitted when the Recovery Mode status changes.\\n     */\\n    event RecoveryModeStateChanged(bool enabled);\\n\\n    /**\\n     * @notice Enables Recovery Mode in the Pool, disabling protocol fee collection and allowing for safe proportional\\n     * exits with low computational complexity and no dependencies.\\n     */\\n    function enableRecoveryMode() external;\\n\\n    /**\\n     * @notice Disables Recovery Mode in the Pool, restoring protocol fee collection and disallowing proportional exits.\\n     */\\n    function disableRecoveryMode() external;\\n\\n    /**\\n     * @notice Returns true if the Pool is in Recovery Mode.\\n     */\\n    function inRecoveryMode() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(\\n    bool condition,\\n    uint256 errorCode,\\n    bytes3 prefix\\n) pure {\\n    if (!condition) _revert(errorCode, prefix);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    _revert(errorCode, 0x42414c); // This is the raw byte representation of \\\"BAL\\\"\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode, bytes3 prefix) pure {\\n    uint256 prefixUint = uint256(uint24(prefix));\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string.\\n        // We first append the '#' character (0x23) to the prefix. In the case of 'BAL', it results in 0x42414c23 ('BAL#')\\n        // Then, we shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n        let formattedPrefix := shl(24, add(0x23, shl(8, prefixUint)))\\n\\n        let revertReason := shl(200, add(formattedPrefix, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n    uint256 internal constant INSUFFICIENT_DATA = 105;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n    uint256 internal constant DISABLED = 211;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_MANAGED_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n    uint256 internal constant OUT_OF_NEW_TARGET_RANGE = 343;\\n    uint256 internal constant FEATURE_DISABLED = 344;\\n    uint256 internal constant UNINITIALIZED_POOL_CONTROLLER = 345;\\n    uint256 internal constant SET_SWAP_FEE_DURING_FEE_CHANGE = 346;\\n    uint256 internal constant SET_SWAP_FEE_PENDING_FEE_CHANGE = 347;\\n    uint256 internal constant CHANGE_TOKENS_DURING_WEIGHT_CHANGE = 348;\\n    uint256 internal constant CHANGE_TOKENS_PENDING_WEIGHT_CHANGE = 349;\\n    uint256 internal constant MAX_WEIGHT = 350;\\n    uint256 internal constant UNAUTHORIZED_JOIN = 351;\\n    uint256 internal constant MAX_MANAGEMENT_AUM_FEE_PERCENTAGE = 352;\\n    uint256 internal constant FRACTIONAL_TARGET = 353;\\n    uint256 internal constant ADD_OR_REMOVE_BPT = 354;\\n    uint256 internal constant INVALID_CIRCUIT_BREAKER_BOUNDS = 355;\\n    uint256 internal constant CIRCUIT_BREAKER_TRIPPED = 356;\\n    uint256 internal constant MALICIOUS_QUERY_REVERT = 357;\\n    uint256 internal constant JOINS_EXITS_DISABLED = 358;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n    uint256 internal constant NOT_PAUSED = 431;\\n    uint256 internal constant ADDRESS_ALREADY_ALLOWLISTED = 432;\\n    uint256 internal constant ADDRESS_NOT_ALLOWLISTED = 433;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_BALANCE = 434;\\n    uint256 internal constant INVALID_OPERATION = 435;\\n    uint256 internal constant CODEC_OVERFLOW = 436;\\n    uint256 internal constant IN_RECOVERY_MODE = 437;\\n    uint256 internal constant NOT_IN_RECOVERY_MODE = 438;\\n    uint256 internal constant INDUCED_FAILURE = 439;\\n    uint256 internal constant EXPIRED_SIGNATURE = 440;\\n    uint256 internal constant MALFORMED_SIGNATURE = 441;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_UINT64 = 442;\\n    uint256 internal constant UNHANDLED_FEE_TYPE = 443;\\n    uint256 internal constant BURN_FROM_ZERO = 444;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n    uint256 internal constant AUM_FEE_PERCENTAGE_TOO_HIGH = 603;\\n\\n    // FeeSplitter\\n    uint256 internal constant SPLITTER_FEE_PERCENTAGE_TOO_HIGH = 700;\\n\\n    // Misc\\n    uint256 internal constant UNIMPLEMENTED = 998;\\n    uint256 internal constant SHOULD_NOT_HAPPEN = 999;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IAuthentication {\\n    /**\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\n     */\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the TemporarilyPausable helper.\\n */\\ninterface ITemporarilyPausable {\\n    /**\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\n     */\\n    event PausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev Returns the current paused state.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        );\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface for adding and removing liquidity that all Pool contracts should implement. Note that this is not\\n * the complete Pool contract interface, as it is missing the swap hooks. Pool contracts should also inherit from\\n * either IGeneralPool or IMinimalSwapInfoPool\\n */\\ninterface IBasePool is IPoolSwapStructs {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of\\n     * each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault.\\n     * The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect\\n     * the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join.\\n     *\\n     * `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account\\n     * designated to receive any benefits (typically pool shares). `balances` contains the total balances\\n     * for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many\\n     * tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes\\n     * to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`,\\n     * as well as collect the reported amount in protocol fees, which the Pool should calculate based on\\n     * `protocolSwapFeePercentage`.\\n     *\\n     * Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share.\\n     *\\n     * `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account\\n     * to which the Vault will send the proceeds. `balances` contains the total token balances for each token\\n     * the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return.\\n     *\\n     * `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total\\n     * balance.\\n     *\\n     * `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of\\n     * exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.)\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Returns this Pool's ID, used when interacting with the Vault (to e.g. join the Pool or swap with it).\\n     */\\n    function getPoolId() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the current swap fee percentage as a 18 decimal fixed point number, so e.g. 1e17 corresponds to a\\n     * 10% swap fee.\\n     */\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaling factors of each of the Pool's tokens. This is an implementation detail that is typically\\n     * not relevant for outside parties, but which might be useful for some types of Pools.\\n     */\\n    function getScalingFactors() external view returns (uint256[] memory);\\n\\n    function queryJoin(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn);\\n\\n    function queryExit(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\n/**\\n * @dev Pool contracts with the MinimalSwapInfo or TwoToken specialization settings should implement this interface.\\n *\\n * This is called by the Vault when a user calls `IVault.swap` or `IVault.batchSwap` to swap with this Pool.\\n * Returns the number of tokens the Pool will grant to the user in a 'given in' swap, or that the user will grant\\n * to the pool in a 'given out' swap.\\n *\\n * This can often be implemented by a `view` function, since many pricing algorithms don't need to track state\\n * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n * indeed the Vault.\\n */\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external returns (uint256 amount);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IPoolSwapStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n    //\\n    // This data structure represents a request for a token swap, where `kind` indicates the swap type ('given in' or\\n    // 'given out') which indicates whether or not the amount sent by the pool is known.\\n    //\\n    // The pool receives `tokenIn` and sends `tokenOut`. `amount` is the number of `tokenIn` tokens the pool will take\\n    // in, or the number of `tokenOut` tokens the Pool will send out, depending on the given swap `kind`.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // The meaning of `lastChangeBlock` depends on the Pool specialization:\\n    //  - Two Token or Minimal Swap Info: the last block in which either `tokenIn` or `tokenOut` changed its total\\n    //    balance.\\n    //  - General: the last block in which *any* of the Pool's registered tokens changed its total balance.\\n    //\\n    // `from` is the origin address for the funds the Pool receives, and `to` is the destination address\\n    // where the Pool sends the outgoing tokens.\\n    //\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\n\\ninterface IProtocolFeesCollector {\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\n\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\\n\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getFlashLoanFeePercentage() external view returns (uint256);\\n\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\\n\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    function vault() external view returns (IVault);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"../solidity-utils/helpers/IAuthentication.sol\\\";\\nimport \\\"../solidity-utils/helpers/ISignaturesValidator.sol\\\";\\nimport \\\"../solidity-utils/helpers/ITemporarilyPausable.sol\\\";\\nimport \\\"../solidity-utils/misc/IWETH.sol\\\";\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\nimport \\\"./IProtocolFeesCollector.sol\\\";\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable, IAuthentication {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     *\\n     * Emits an `AuthorizerChanged` event.\\n     */\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\n     */\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\n\\n    // Relayers\\n    //\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\n    // this power, two things must occur:\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\n    //    functions.\\n    //  - Each user must approve the relayer to act on their behalf.\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\n\\n    /**\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\n     */\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\n     *\\n     * Emits a `RelayerApprovalChanged` event.\\n     */\\n    function setRelayerApproval(\\n        address sender,\\n        address relayer,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\n     */\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    /**\\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n    event PoolBalanceChanged(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        int256[] deltas,\\n        uint256[] protocolFeeAmounts\\n    );\\n\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\\n    //\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\n    //\\n    // This concept is unrelated to the IAsset interface.\\n\\n    /**\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\n     *\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\n     * operations of different kinds, with different Pools and tokens, at once.\\n     *\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\n     */\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\\n     *\\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\\n     *\\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     */\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\\n     */\\n    event PoolBalanceManaged(\\n        bytes32 indexed poolId,\\n        address indexed assetManager,\\n        IERC20 indexed token,\\n        int256 cashDelta,\\n        int256 managedDelta\\n    );\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are two kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee module.\\n     */\\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\\n\\n    /**\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\n     * error in some part of the system.\\n     *\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\n     *\\n     * While the contract is paused, the following features are disabled:\\n     * - depositing and transferring internal balance\\n     * - transferring external balance (using the Vault's allowance)\\n     * - swaps\\n     * - joining Pools\\n     * - Asset Manager interactions\\n     *\\n     * Internal Balance can still be withdrawn, and Pools exited.\\n     */\\n    function setPaused(bool paused) external;\\n\\n    /**\\n     * @dev Returns the Vault's WETH instance.\\n     */\\n    function WETH() external view returns (IWETH);\\n    // solhint-disable-previous-line func-name-mixedcase\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/BalancerPoolToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol\\\";\\n\\n/**\\n * @title Highly opinionated token implementation\\n * @author Balancer Labs\\n * @dev\\n * - Includes functions to increase and decrease allowance as a workaround\\n *   for the well-known issue with `approve`:\\n *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n * - Allows for 'infinite allowance', where an allowance of 0xff..ff is not\\n *   decreased by calls to transferFrom\\n * - Lets a token holder use `transferFrom` to send their own tokens,\\n *   without first setting allowance\\n * - Emits 'Approval' events whenever allowance is changed by `transferFrom`\\n * - Assigns infinite allowance for all token holders to the Vault\\n */\\ncontract BalancerPoolToken is ERC20Permit {\\n    IVault private immutable _vault;\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        IVault vault\\n    ) ERC20(tokenName, tokenSymbol) ERC20Permit(tokenName) {\\n        _vault = vault;\\n    }\\n\\n    function getVault() public view returns (IVault) {\\n        return _vault;\\n    }\\n\\n    // Overrides\\n\\n    /**\\n     * @dev Override to grant the Vault infinite allowance, causing for Pool Tokens to not require approval.\\n     *\\n     * This is sound as the Vault already provides authorization mechanisms when initiation token transfers, which this\\n     * contract inherits.\\n     */\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        if (spender == address(getVault())) {\\n            return uint256(-1);\\n        } else {\\n            return super.allowance(owner, spender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Override to allow for 'infinite allowance' and let the token owner use `transferFrom` with no self-allowance\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        uint256 currentAllowance = allowance(sender, msg.sender);\\n        _require(msg.sender == sender || currentAllowance >= amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE);\\n\\n        _transfer(sender, recipient, amount);\\n\\n        if (msg.sender != sender && currentAllowance != uint256(-1)) {\\n            // Because of the previous require, we know that if msg.sender != sender then currentAllowance >= amount\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Override to allow decreasing allowance by more than the current amount (setting it to zero)\\n     */\\n    function decreaseAllowance(address spender, uint256 amount) public override returns (bool) {\\n        uint256 currentAllowance = allowance(msg.sender, spender);\\n\\n        if (amount >= currentAllowance) {\\n            _approve(msg.sender, spender, 0);\\n        } else {\\n            // No risk of underflow due to if condition\\n            _approve(msg.sender, spender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    // Internal functions\\n\\n    function _mintPoolTokens(address recipient, uint256 amount) internal {\\n        _mint(recipient, amount);\\n    }\\n\\n    function _burnPoolTokens(address sender, uint256 amount) internal {\\n        _burn(sender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/BasePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/IControlledPool.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/ScalingHelpers.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\n\\nimport \\\"./lib/PoolRegistrationLib.sol\\\";\\n\\nimport \\\"./BalancerPoolToken.sol\\\";\\nimport \\\"./BasePoolAuthorization.sol\\\";\\nimport \\\"./RecoveryMode.sol\\\";\\n\\n// solhint-disable max-states-count\\n\\n/**\\n * @notice Reference implementation for the base layer of a Pool contract.\\n * @dev Reference implementation for the base layer of a Pool contract that manages a single Pool with optional\\n * Asset Managers, an admin-controlled swap fee percentage, and an emergency pause mechanism.\\n *\\n * This Pool pays protocol fees by minting BPT directly to the ProtocolFeeCollector instead of using the\\n * `dueProtocolFees` return value. This results in the underlying tokens continuing to provide liquidity\\n * for traders, while still keeping gas usage to a minimum since only a single token (the BPT) is transferred.\\n *\\n * Note that neither swap fees nor the pause mechanism are used by this contract. They are passed through so that\\n * derived contracts can use them via the `_addSwapFeeAmount` and `_subtractSwapFeeAmount` functions, and the\\n * `whenNotPaused` modifier.\\n *\\n * No admin permissions are checked here: instead, this contract delegates that to the Vault's own Authorizer.\\n *\\n * Because this contract doesn't implement the swap hooks, derived contracts should generally inherit from\\n * BaseGeneralPool or BaseMinimalSwapInfoPool. Otherwise, subclasses must inherit from the corresponding interfaces\\n * and implement the swap callbacks themselves.\\n */\\nabstract contract BasePool is\\n    IBasePool,\\n    IControlledPool,\\n    BasePoolAuthorization,\\n    BalancerPoolToken,\\n    TemporarilyPausable,\\n    RecoveryMode\\n{\\n    using WordCodec for bytes32;\\n    using FixedPoint for uint256;\\n    using BasePoolUserData for bytes;\\n\\n    uint256 private constant _MIN_TOKENS = 2;\\n\\n    uint256 private constant _DEFAULT_MINIMUM_BPT = 1e6;\\n\\n    // 1e18 corresponds to 1.0, or a 100% fee\\n    uint256 private constant _MIN_SWAP_FEE_PERCENTAGE = 1e12; // 0.0001%\\n    uint256 private constant _MAX_SWAP_FEE_PERCENTAGE = 1e17; // 10% - this fits in 64 bits\\n\\n    // `_miscData` is a storage slot that can be used to store unrelated pieces of information. All pools store the\\n    // recovery mode flag and swap fee percentage, but `miscData` can be extended to store more pieces of information.\\n    // The most signficant bit is reserved for the recovery mode flag, and the swap fee percentage is stored in\\n    // the next most significant 63 bits, leaving the remaining 192 bits free to store any other information derived\\n    // pools might need.\\n    //\\n    // This slot is preferred for gas-sensitive operations as it is read in all joins, swaps and exits,\\n    // and therefore warm.\\n\\n    // [ recovery | swap  fee | available ]\\n    // [   1 bit  |  63 bits  |  192 bits ]\\n    // [ MSB                          LSB ]\\n    bytes32 private _miscData;\\n\\n    uint256 private constant _SWAP_FEE_PERCENTAGE_OFFSET = 192;\\n    uint256 private constant _RECOVERY_MODE_BIT_OFFSET = 255;\\n\\n    // A fee can never be larger than FixedPoint.ONE, which fits in 60 bits, so 63 is more than enough.\\n    uint256 private constant _SWAP_FEE_PERCENTAGE_BIT_LENGTH = 63;\\n\\n    bytes32 private immutable _poolId;\\n\\n    // Note that this value is immutable in the Vault, so we can make it immutable here and save gas\\n    IProtocolFeesCollector private immutable _protocolFeesCollector;\\n\\n    event SwapFeePercentageChanged(uint256 swapFeePercentage);\\n\\n    constructor(\\n        IVault vault,\\n        IVault.PoolSpecialization specialization,\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers,\\n        uint256 swapFeePercentage,\\n        uint256 pauseWindowDuration,\\n        uint256 bufferPeriodDuration,\\n        address owner\\n    )\\n        // Base Pools are expected to be deployed using factories. By using the factory address as the action\\n        // disambiguator, we make all Pools deployed by the same factory share action identifiers. This allows for\\n        // simpler management of permissions (such as being able to manage granting the 'set fee percentage' action in\\n        // any Pool created by the same factory), while still making action identifiers unique among different factories\\n        // if the selectors match, preventing accidental errors.\\n        Authentication(bytes32(uint256(msg.sender)))\\n        BalancerPoolToken(name, symbol, vault)\\n        BasePoolAuthorization(owner)\\n        TemporarilyPausable(pauseWindowDuration, bufferPeriodDuration)\\n        RecoveryMode(vault)\\n    {\\n        _require(tokens.length >= _MIN_TOKENS, Errors.MIN_TOKENS);\\n        _require(tokens.length <= _getMaxTokens(), Errors.MAX_TOKENS);\\n\\n        _setSwapFeePercentage(swapFeePercentage);\\n\\n        bytes32 poolId = PoolRegistrationLib.registerPoolWithAssetManagers(\\n            vault,\\n            specialization,\\n            tokens,\\n            assetManagers\\n        );\\n\\n        // Set immutable state variables - these cannot be read from during construction\\n        _poolId = poolId;\\n        _protocolFeesCollector = vault.getProtocolFeesCollector();\\n    }\\n\\n    // Getters / Setters\\n\\n    /**\\n     * @notice Return the pool id.\\n     */\\n    function getPoolId() public view override returns (bytes32) {\\n        return _poolId;\\n    }\\n\\n    function _getTotalTokens() internal view virtual returns (uint256);\\n\\n    function _getMaxTokens() internal pure virtual returns (uint256);\\n\\n    /**\\n     * @dev Returns the minimum BPT supply. This amount is minted to the zero address during initialization, effectively\\n     * locking it.\\n     *\\n     * This is useful to make sure Pool initialization happens only once, but derived Pools can change this value (even\\n     * to zero) by overriding this function.\\n     */\\n    function _getMinimumBpt() internal pure virtual returns (uint256) {\\n        return _DEFAULT_MINIMUM_BPT;\\n    }\\n\\n    /**\\n     * @notice Return the current value of the swap fee percentage.\\n     * @dev This is stored in `_miscData`.\\n     */\\n    function getSwapFeePercentage() public view virtual override returns (uint256) {\\n        return _miscData.decodeUint(_SWAP_FEE_PERCENTAGE_OFFSET, _SWAP_FEE_PERCENTAGE_BIT_LENGTH);\\n    }\\n\\n    /**\\n     * @notice Return the ProtocolFeesCollector contract.\\n     * @dev This is immutable, and retrieved from the Vault on construction. (It is also immutable in the Vault.)\\n     */\\n    function getProtocolFeesCollector() public view returns (IProtocolFeesCollector) {\\n        return _protocolFeesCollector;\\n    }\\n\\n    /**\\n     * @notice Set the swap fee percentage.\\n     * @dev This is a permissioned function, and disabled if the pool is paused. The swap fee must be within the\\n     * bounds set by MIN_SWAP_FEE_PERCENTAGE/MAX_SWAP_FEE_PERCENTAGE. Emits the SwapFeePercentageChanged event.\\n     */\\n    function setSwapFeePercentage(uint256 swapFeePercentage) public virtual override authenticate whenNotPaused {\\n        _setSwapFeePercentage(swapFeePercentage);\\n    }\\n\\n    function _setSwapFeePercentage(uint256 swapFeePercentage) internal virtual {\\n        _require(swapFeePercentage >= _getMinSwapFeePercentage(), Errors.MIN_SWAP_FEE_PERCENTAGE);\\n        _require(swapFeePercentage <= _getMaxSwapFeePercentage(), Errors.MAX_SWAP_FEE_PERCENTAGE);\\n\\n        _miscData = _miscData.insertUint(\\n            swapFeePercentage,\\n            _SWAP_FEE_PERCENTAGE_OFFSET,\\n            _SWAP_FEE_PERCENTAGE_BIT_LENGTH\\n        );\\n\\n        emit SwapFeePercentageChanged(swapFeePercentage);\\n    }\\n\\n    function _getMinSwapFeePercentage() internal pure virtual returns (uint256) {\\n        return _MIN_SWAP_FEE_PERCENTAGE;\\n    }\\n\\n    function _getMaxSwapFeePercentage() internal pure virtual returns (uint256) {\\n        return _MAX_SWAP_FEE_PERCENTAGE;\\n    }\\n\\n    /**\\n     * @notice Returns whether the pool is in Recovery Mode.\\n     */\\n    function inRecoveryMode() public view override returns (bool) {\\n        return _miscData.decodeBool(_RECOVERY_MODE_BIT_OFFSET);\\n    }\\n\\n    /**\\n     * @dev Sets the recoveryMode state, and emits the corresponding event.\\n     */\\n    function _setRecoveryMode(bool enabled) internal virtual override {\\n        _miscData = _miscData.insertBool(enabled, _RECOVERY_MODE_BIT_OFFSET);\\n\\n        emit RecoveryModeStateChanged(enabled);\\n\\n        // Some pools need to update their state when leaving recovery mode to ensure proper functioning of the Pool.\\n        // We do not allow an `_onEnableRecoveryMode()` hook as this may jeopardize the ability to enable Recovery mode.\\n        if (!enabled) _onDisableRecoveryMode();\\n    }\\n\\n    /**\\n     * @dev Performs any necessary actions on the disabling of Recovery Mode.\\n     * This is usually to reset any fee collection mechanisms to ensure that they operate correctly going forward.\\n     */\\n    function _onDisableRecoveryMode() internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @notice Pause the pool: an emergency action which disables all pool functions.\\n     * @dev This is a permissioned function that will only work during the Pause Window set during pool factory\\n     * deployment (see `TemporarilyPausable`).\\n     */\\n    function pause() external authenticate {\\n        _setPaused(true);\\n    }\\n\\n    /**\\n     * @notice Reverse a `pause` operation, and restore a pool to normal functionality.\\n     * @dev This is a permissioned function that will only work on a paused pool within the Buffer Period set during\\n     * pool factory deployment (see `TemporarilyPausable`). Note that any paused pools will automatically unpause\\n     * after the Buffer Period expires.\\n     */\\n    function unpause() external authenticate {\\n        _setPaused(false);\\n    }\\n\\n    function _isOwnerOnlyAction(bytes32 actionId) internal view virtual override returns (bool) {\\n        return (actionId == getActionId(this.setSwapFeePercentage.selector)) || super._isOwnerOnlyAction(actionId);\\n    }\\n\\n    function _getMiscData() internal view returns (bytes32) {\\n        return _miscData;\\n    }\\n\\n    /**\\n     * @dev Inserts data into the least-significant 192 bits of the misc data storage slot.\\n     * Note that the remaining 64 bits are used for the swap fee percentage and cannot be overloaded.\\n     */\\n    function _setMiscData(bytes32 newData) internal {\\n        _miscData = _miscData.insertBits192(newData, 0);\\n    }\\n\\n    // Join / Exit Hooks\\n\\n    modifier onlyVault(bytes32 poolId) {\\n        _require(msg.sender == address(getVault()), Errors.CALLER_NOT_VAULT);\\n        _require(poolId == getPoolId(), Errors.INVALID_POOL_ID);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Vault hook for adding liquidity to a pool (including the first time, \\\"initializing\\\" the pool).\\n     * @dev This function can only be called from the Vault, from `joinPool`.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        _beforeSwapJoinExit();\\n\\n        uint256[] memory scalingFactors = _scalingFactors();\\n\\n        if (totalSupply() == 0) {\\n            (uint256 bptAmountOut, uint256[] memory amountsIn) = _onInitializePool(\\n                poolId,\\n                sender,\\n                recipient,\\n                scalingFactors,\\n                userData\\n            );\\n\\n            // On initialization, we lock _getMinimumBpt() by minting it for the zero address. This BPT acts as a\\n            // minimum as it will never be burned, which reduces potential issues with rounding, and also prevents the\\n            // Pool from ever being fully drained.\\n            _require(bptAmountOut >= _getMinimumBpt(), Errors.MINIMUM_BPT);\\n            _mintPoolTokens(address(0), _getMinimumBpt());\\n            _mintPoolTokens(recipient, bptAmountOut - _getMinimumBpt());\\n\\n            // amountsIn are amounts entering the Pool, so we round up.\\n            _downscaleUpArray(amountsIn, scalingFactors);\\n\\n            return (amountsIn, new uint256[](balances.length));\\n        } else {\\n            _upscaleArray(balances, scalingFactors);\\n            (uint256 bptAmountOut, uint256[] memory amountsIn) = _onJoinPool(\\n                poolId,\\n                sender,\\n                recipient,\\n                balances,\\n                lastChangeBlock,\\n                inRecoveryMode() ? 0 : protocolSwapFeePercentage, // Protocol fees are disabled while in recovery mode\\n                scalingFactors,\\n                userData\\n            );\\n\\n            // Note we no longer use `balances` after calling `_onJoinPool`, which may mutate it.\\n\\n            _mintPoolTokens(recipient, bptAmountOut);\\n\\n            // amountsIn are amounts entering the Pool, so we round up.\\n            _downscaleUpArray(amountsIn, scalingFactors);\\n\\n            // This Pool ignores the `dueProtocolFees` return value, so we simply return a zeroed-out array.\\n            return (amountsIn, new uint256[](balances.length));\\n        }\\n    }\\n\\n    /**\\n     * @notice Vault hook for removing liquidity from a pool.\\n     * @dev This function can only be called from the Vault, from `exitPool`.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        uint256[] memory amountsOut;\\n        uint256 bptAmountIn;\\n\\n        // When a user calls `exitPool`, this is the first point of entry from the Vault.\\n        // We first check whether this is a Recovery Mode exit - if so, we proceed using this special lightweight exit\\n        // mechanism which avoids computing any complex values, interacting with external contracts, etc., and generally\\n        // should always work, even if the Pool's mathematics or a dependency break down.\\n        if (userData.isRecoveryModeExitKind()) {\\n            // This exit kind is only available in Recovery Mode.\\n            _ensureInRecoveryMode();\\n\\n            // Note that we don't upscale balances nor downscale amountsOut - we don't care about scaling factors during\\n            // a recovery mode exit.\\n            (bptAmountIn, amountsOut) = _doRecoveryModeExit(balances, totalSupply(), userData);\\n        } else {\\n            // Note that we only call this if we're not in a recovery mode exit.\\n            _beforeSwapJoinExit();\\n\\n            uint256[] memory scalingFactors = _scalingFactors();\\n            _upscaleArray(balances, scalingFactors);\\n\\n            (bptAmountIn, amountsOut) = _onExitPool(\\n                poolId,\\n                sender,\\n                recipient,\\n                balances,\\n                lastChangeBlock,\\n                inRecoveryMode() ? 0 : protocolSwapFeePercentage, // Protocol fees are disabled while in recovery mode\\n                scalingFactors,\\n                userData\\n            );\\n\\n            // amountsOut are amounts exiting the Pool, so we round down.\\n            _downscaleDownArray(amountsOut, scalingFactors);\\n        }\\n\\n        // Note we no longer use `balances` after calling `_onExitPool`, which may mutate it.\\n\\n        _burnPoolTokens(sender, bptAmountIn);\\n\\n        // This Pool ignores the `dueProtocolFees` return value, so we simply return a zeroed-out array.\\n        return (amountsOut, new uint256[](balances.length));\\n    }\\n\\n    // Query functions\\n\\n    /**\\n     * @notice \\\"Dry run\\\" `onJoinPool`.\\n     * @dev Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the\\n     * Vault with the same arguments, along with the number of tokens `sender` would have to supply.\\n     *\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\n     * data, such as the protocol swap fee percentage and Pool balances.\\n     *\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\n     * explicitly use eth_call instead of eth_sendTransaction.\\n     */\\n    function queryJoin(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override returns (uint256 bptOut, uint256[] memory amountsIn) {\\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\\n\\n        _queryAction(\\n            poolId,\\n            sender,\\n            recipient,\\n            balances,\\n            lastChangeBlock,\\n            protocolSwapFeePercentage,\\n            userData,\\n            _onJoinPool,\\n            _downscaleUpArray\\n        );\\n\\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\\n        // and we don't need to return anything here - it just silences compiler warnings.\\n        return (bptOut, amountsIn);\\n    }\\n\\n    /**\\n     * @notice \\\"Dry run\\\" `onExitPool`.\\n     * @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the\\n     * Vault with the same arguments, along with the number of tokens `recipient` would receive.\\n     *\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\n     * data, such as the protocol swap fee percentage and Pool balances.\\n     *\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\n     * explicitly use eth_call instead of eth_sendTransaction.\\n     */\\n    function queryExit(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override returns (uint256 bptIn, uint256[] memory amountsOut) {\\n        InputHelpers.ensureInputLengthMatch(balances.length, _getTotalTokens());\\n\\n        _queryAction(\\n            poolId,\\n            sender,\\n            recipient,\\n            balances,\\n            lastChangeBlock,\\n            protocolSwapFeePercentage,\\n            userData,\\n            _onExitPool,\\n            _downscaleDownArray\\n        );\\n\\n        // The `return` opcode is executed directly inside `_queryAction`, so execution never reaches this statement,\\n        // and we don't need to return anything here - it just silences compiler warnings.\\n        return (bptIn, amountsOut);\\n    }\\n\\n    // Internal hooks to be overridden by derived contracts - all token amounts (except BPT) in these interfaces are\\n    // upscaled.\\n\\n    /**\\n     * @dev Called when the Pool is joined for the first time; that is, when the BPT total supply is zero.\\n     *\\n     * Returns the amount of BPT to mint, and the token amounts the Pool will receive in return.\\n     *\\n     * Minted BPT will be sent to `recipient`, except for _getMinimumBpt(), which will be deducted from this amount and\\n     * sent to the zero address instead. This will cause that BPT to remain forever locked there, preventing total BTP\\n     * from ever dropping below that value, and ensuring `_onInitializePool` can only be called once in the entire\\n     * Pool's lifetime.\\n     *\\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\\n     * be downscaled (rounding up) before being returned to the Vault.\\n     */\\n    function _onInitializePool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal virtual returns (uint256 bptAmountOut, uint256[] memory amountsIn);\\n\\n    /**\\n     * @dev Called whenever the Pool is joined after the first initialization join (see `_onInitializePool`).\\n     *\\n     * Returns the amount of BPT to mint, the token amounts that the Pool will receive in return, and the number of\\n     * tokens to pay in protocol swap fees.\\n     *\\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\\n     *\\n     * Minted BPT will be sent to `recipient`.\\n     *\\n     * The tokens granted to the Pool will be transferred from `sender`. These amounts are considered upscaled and will\\n     * be downscaled (rounding up) before being returned to the Vault.\\n     *\\n     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onJoinPool`). These\\n     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.\\n     */\\n    function _onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal virtual returns (uint256 bptAmountOut, uint256[] memory amountsIn);\\n\\n    /**\\n     * @dev Called whenever the Pool is exited.\\n     *\\n     * Returns the amount of BPT to burn, the token amounts for each Pool token that the Pool will grant in return, and\\n     * the number of tokens to pay in protocol swap fees.\\n     *\\n     * Implementations of this function might choose to mutate the `balances` array to save gas (e.g. when\\n     * performing intermediate calculations, such as subtraction of due protocol fees). This can be done safely.\\n     *\\n     * BPT will be burnt from `sender`.\\n     *\\n     * The Pool will grant tokens to `recipient`. These amounts are considered upscaled and will be downscaled\\n     * (rounding down) before being returned to the Vault.\\n     *\\n     * Due protocol swap fees will be taken from the Pool's balance in the Vault (see `IBasePool.onExitPool`). These\\n     * amounts are considered upscaled and will be downscaled (rounding down) before being returned to the Vault.\\n     */\\n    function _onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal virtual returns (uint256 bptAmountIn, uint256[] memory amountsOut);\\n\\n    /**\\n     * @dev Called at the very beginning of swaps, joins and exits, even before the scaling factors are read. Derived\\n     * contracts can extend this implementation to perform any state-changing operations they might need (including e.g.\\n     * updating the scaling factors),\\n     *\\n     * The only scenario in which this function is not called is during a recovery mode exit. This makes it safe to\\n     * perform non-trivial computations or interact with external dependencies here, as recovery mode will not be\\n     * affected.\\n     *\\n     * Since this contract does not implement swaps, derived contracts must also make sure this function is called on\\n     * swap handlers.\\n     */\\n    function _beforeSwapJoinExit() internal virtual {\\n        // All joins, exits and swaps are disabled (except recovery mode exits).\\n        _ensureNotPaused();\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @dev Pays protocol fees by minting `bptAmount` to the Protocol Fee Collector.\\n     */\\n    function _payProtocolFees(uint256 bptAmount) internal {\\n        if (bptAmount > 0) {\\n            _mintPoolTokens(address(getProtocolFeesCollector()), bptAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds swap fee amount to `amount`, returning a higher value.\\n     */\\n    function _addSwapFeeAmount(uint256 amount) internal view returns (uint256) {\\n        // This returns amount + fee amount, so we round up (favoring a higher fee amount).\\n        return amount.divUp(getSwapFeePercentage().complement());\\n    }\\n\\n    /**\\n     * @dev Subtracts swap fee amount from `amount`, returning a lower value.\\n     */\\n    function _subtractSwapFeeAmount(uint256 amount) internal view returns (uint256) {\\n        // This returns amount - fee amount, so we round up (favoring a higher fee amount).\\n        uint256 feeAmount = amount.mulUp(getSwapFeePercentage());\\n        return amount.sub(feeAmount);\\n    }\\n\\n    // Scaling\\n\\n    /**\\n     * @dev Returns a scaling factor that, when multiplied to a token amount for `token`, normalizes its balance as if\\n     * it had 18 decimals.\\n     */\\n    function _computeScalingFactor(IERC20 token) internal view returns (uint256) {\\n        if (address(token) == address(this)) {\\n            return FixedPoint.ONE;\\n        }\\n\\n        // Tokens that don't implement the `decimals` method are not supported.\\n        uint256 tokenDecimals = ERC20(address(token)).decimals();\\n\\n        // Tokens with more than 18 decimals are not supported.\\n        uint256 decimalsDifference = Math.sub(18, tokenDecimals);\\n        return FixedPoint.ONE * 10**decimalsDifference;\\n    }\\n\\n    /**\\n     * @dev Returns the scaling factor for one of the Pool's tokens. Reverts if `token` is not a token registered by the\\n     * Pool.\\n     *\\n     * All scaling factors are fixed-point values with 18 decimals, to allow for this function to be overridden by\\n     * derived contracts that need to apply further scaling, making these factors potentially non-integer.\\n     *\\n     * The largest 'base' scaling factor (i.e. in tokens with less than 18 decimals) is 10**18, which in fixed-point is\\n     * 10**36. This value can be multiplied with a 112 bit Vault balance with no overflow by a factor of ~1e7, making\\n     * even relatively 'large' factors safe to use.\\n     *\\n     * The 1e7 figure is the result of 2**256 / (1e18 * 1e18 * 2**112).\\n     */\\n    function _scalingFactor(IERC20 token) internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Same as `_scalingFactor()`, except for all registered tokens (in the same order as registered). The Vault\\n     * will always pass balances in this order when calling any of the Pool hooks.\\n     */\\n    function _scalingFactors() internal view virtual returns (uint256[] memory);\\n\\n    function getScalingFactors() external view override returns (uint256[] memory) {\\n        return _scalingFactors();\\n    }\\n\\n    function _getAuthorizer() internal view override returns (IAuthorizer) {\\n        // Access control management is delegated to the Vault's Authorizer. This lets Balancer Governance manage which\\n        // accounts can call permissioned functions: for example, to perform emergency pauses.\\n        // If the owner is delegated, then *all* permissioned functions, including `setSwapFeePercentage`, will be under\\n        // Governance control.\\n        return getVault().getAuthorizer();\\n    }\\n\\n    function _queryAction(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData,\\n        function(bytes32, address, address, uint256[] memory, uint256, uint256, uint256[] memory, bytes memory)\\n            internal\\n            returns (uint256, uint256[] memory) _action,\\n        function(uint256[] memory, uint256[] memory) internal view _downscaleArray\\n    ) private {\\n        // This uses the same technique used by the Vault in queryBatchSwap. Refer to that function for a detailed\\n        // explanation.\\n\\n        if (msg.sender != address(this)) {\\n            // We perform an external call to ourselves, forwarding the same calldata. In this call, the else clause of\\n            // the preceding if statement will be executed instead.\\n\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = address(this).call(msg.data);\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // This call should always revert to decode the bpt and token amounts from the revert reason\\n                switch success\\n                    case 0 {\\n                        // Note we are manually writing the memory slot 0. We can safely overwrite whatever is\\n                        // stored there as we take full control of the execution and then immediately return.\\n\\n                        // We copy the first 4 bytes to check if it matches with the expected signature, otherwise\\n                        // there was another revert reason and we should forward it.\\n                        returndatacopy(0, 0, 0x04)\\n                        let error := and(mload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n\\n                        // If the first 4 bytes don't match with the expected signature, we forward the revert reason.\\n                        if eq(eq(error, 0x43adbafb00000000000000000000000000000000000000000000000000000000), 0) {\\n                            returndatacopy(0, 0, returndatasize())\\n                            revert(0, returndatasize())\\n                        }\\n\\n                        // The returndata contains the signature, followed by the raw memory representation of the\\n                        // `bptAmount` and `tokenAmounts` (array: length + data). We need to return an ABI-encoded\\n                        // representation of these.\\n                        // An ABI-encoded response will include one additional field to indicate the starting offset of\\n                        // the `tokenAmounts` array. The `bptAmount` will be laid out in the first word of the\\n                        // returndata.\\n                        //\\n                        // In returndata:\\n                        // [ signature ][ bptAmount ][ tokenAmounts length ][ tokenAmounts values ]\\n                        // [  4 bytes  ][  32 bytes ][       32 bytes      ][ (32 * length) bytes ]\\n                        //\\n                        // We now need to return (ABI-encoded values):\\n                        // [ bptAmount ][ tokeAmounts offset ][ tokenAmounts length ][ tokenAmounts values ]\\n                        // [  32 bytes ][       32 bytes     ][       32 bytes      ][ (32 * length) bytes ]\\n\\n                        // We copy 32 bytes for the `bptAmount` from returndata into memory.\\n                        // Note that we skip the first 4 bytes for the error signature\\n                        returndatacopy(0, 0x04, 32)\\n\\n                        // The offsets are 32-bytes long, so the array of `tokenAmounts` will start after\\n                        // the initial 64 bytes.\\n                        mstore(0x20, 64)\\n\\n                        // We now copy the raw memory array for the `tokenAmounts` from returndata into memory.\\n                        // Since bpt amount and offset take up 64 bytes, we start copying at address 0x40. We also\\n                        // skip the first 36 bytes from returndata, which correspond to the signature plus bpt amount.\\n                        returndatacopy(0x40, 0x24, sub(returndatasize(), 36))\\n\\n                        // We finally return the ABI-encoded uint256 and the array, which has a total length equal to\\n                        // the size of returndata, plus the 32 bytes of the offset but without the 4 bytes of the\\n                        // error signature.\\n                        return(0, add(returndatasize(), 28))\\n                    }\\n                    default {\\n                        // This call should always revert, but we fail nonetheless if that didn't happen\\n                        invalid()\\n                    }\\n            }\\n        } else {\\n            // This imitates the relevant parts of the bodies of onJoin and onExit. Since they're not virtual, we know\\n            // that their implementations will match this regardless of what derived contracts might do.\\n\\n            _beforeSwapJoinExit();\\n\\n            uint256[] memory scalingFactors = _scalingFactors();\\n            _upscaleArray(balances, scalingFactors);\\n\\n            (uint256 bptAmount, uint256[] memory tokenAmounts) = _action(\\n                poolId,\\n                sender,\\n                recipient,\\n                balances,\\n                lastChangeBlock,\\n                protocolSwapFeePercentage,\\n                scalingFactors,\\n                userData\\n            );\\n\\n            _downscaleArray(tokenAmounts, scalingFactors);\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // We will return a raw representation of `bptAmount` and `tokenAmounts` in memory, which is composed of\\n                // a 32-byte uint256, followed by a 32-byte for the array length, and finally the 32-byte uint256 values\\n                // Because revert expects a size in bytes, we multiply the array length (stored at `tokenAmounts`) by 32\\n                let size := mul(mload(tokenAmounts), 32)\\n\\n                // We store the `bptAmount` in the previous slot to the `tokenAmounts` array. We can make sure there\\n                // will be at least one available slot due to how the memory scratch space works.\\n                // We can safely overwrite whatever is stored in this slot as we will revert immediately after that.\\n                let start := sub(tokenAmounts, 0x20)\\n                mstore(start, bptAmount)\\n\\n                // We send one extra value for the error signature \\\"QueryError(uint256,uint256[])\\\" which is 0x43adbafb\\n                // We use the previous slot to `bptAmount`.\\n                mstore(sub(start, 0x20), 0x0000000000000000000000000000000000000000000000000000000043adbafb)\\n                start := sub(start, 0x04)\\n\\n                // When copying from `tokenAmounts` into returndata, we copy the additional 68 bytes to also return\\n                // the `bptAmount`, the array 's length, and the error signature.\\n                revert(start, add(size, 68))\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/BasePoolAuthorization.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol\\\";\\n\\n/**\\n * @dev Base authorization layer implementation for Pools.\\n *\\n * The owner account can call some of the permissioned functions - access control of the rest is delegated to the\\n * Authorizer. Note that this owner is immutable: more sophisticated permission schemes, such as multiple ownership,\\n * granular roles, etc., could be built on top of this by making the owner a smart contract.\\n *\\n * Access control of all other permissioned functions is delegated to an Authorizer. It is also possible to delegate\\n * control of *all* permissioned functions to the Authorizer by setting the owner address to `_DELEGATE_OWNER`.\\n */\\nabstract contract BasePoolAuthorization is Authentication {\\n    address private immutable _owner;\\n\\n    address internal constant _DELEGATE_OWNER = 0xBA1BA1ba1BA1bA1bA1Ba1BA1ba1BA1bA1ba1ba1B;\\n\\n    constructor(address owner) {\\n        _owner = owner;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function getAuthorizer() external view returns (IAuthorizer) {\\n        return _getAuthorizer();\\n    }\\n\\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\\n        if ((getOwner() != _DELEGATE_OWNER) && _isOwnerOnlyAction(actionId)) {\\n            // Only the owner can perform \\\"owner only\\\" actions, unless the owner is delegated.\\n            return msg.sender == getOwner();\\n        } else {\\n            // Non-owner actions are always processed via the Authorizer, as \\\"owner only\\\" ones are when delegated.\\n            return _getAuthorizer().canPerform(actionId, account, address(this));\\n        }\\n    }\\n\\n    function _isOwnerOnlyAction(bytes32) internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    function _getAuthorizer() internal view virtual returns (IAuthorizer);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/lib/BasePoolMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\n\\nlibrary BasePoolMath {\\n    using FixedPoint for uint256;\\n\\n    function computeProportionalAmountsIn(\\n        uint256[] memory balances,\\n        uint256 bptTotalSupply,\\n        uint256 bptAmountOut\\n    ) internal pure returns (uint256[] memory amountsIn) {\\n        /************************************************************************************\\n        // computeProportionalAmountsIn                                                    //\\n        // (per token)                                                                     //\\n        // aI = amountIn                   /      bptOut      \\\\                            //\\n        // b = balance           aI = b * | ----------------- |                            //\\n        // bptOut = bptAmountOut           \\\\  bptTotalSupply  /                            //\\n        // bpt = bptTotalSupply                                                            //\\n        ************************************************************************************/\\n\\n        // Since we're computing amounts in, we round up overall. This means rounding up on both the\\n        // multiplication and division.\\n\\n        uint256 bptRatio = bptAmountOut.divUp(bptTotalSupply);\\n\\n        amountsIn = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            amountsIn[i] = balances[i].mulUp(bptRatio);\\n        }\\n    }\\n\\n    function computeProportionalAmountsOut(\\n        uint256[] memory balances,\\n        uint256 bptTotalSupply,\\n        uint256 bptAmountIn\\n    ) internal pure returns (uint256[] memory amountsOut) {\\n        /**********************************************************************************************\\n        // computeProportionalAmountsOut                                                             //\\n        // (per token)                                                                               //\\n        // aO = tokenAmountOut             /        bptIn         \\\\                                  //\\n        // b = tokenBalance      a0 = b * | ---------------------  |                                 //\\n        // bptIn = bptAmountIn             \\\\     bptTotalSupply    /                                 //\\n        // bpt = bptTotalSupply                                                                      //\\n        **********************************************************************************************/\\n\\n        // Since we're computing an amount out, we round down overall. This means rounding down on both the\\n        // multiplication and division.\\n\\n        uint256 bptRatio = bptAmountIn.divDown(bptTotalSupply);\\n\\n        amountsOut = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            amountsOut[i] = balances[i].mulDown(bptRatio);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/lib/PoolRegistrationLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\\\";\\n\\nlibrary PoolRegistrationLib {\\n    function registerPool(\\n        IVault vault,\\n        IVault.PoolSpecialization specialization,\\n        IERC20[] memory tokens\\n    ) internal returns (bytes32) {\\n        return registerPoolWithAssetManagers(vault, specialization, tokens, new address[](tokens.length));\\n    }\\n\\n    function registerPoolWithAssetManagers(\\n        IVault vault,\\n        IVault.PoolSpecialization specialization,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) internal returns (bytes32) {\\n        // The Vault only requires the token list to be ordered for the Two Token Pools specialization. However,\\n        // to make the developer experience consistent, we are requiring this condition for all the native pools.\\n        //\\n        // Note that for Pools which can register and deregister tokens after deployment, this property may not hold\\n        // as tokens which are added to the Pool after deployment are always added to the end of the array.\\n        InputHelpers.ensureArrayIsSorted(tokens);\\n\\n        return _registerPool(vault, specialization, tokens, assetManagers);\\n    }\\n\\n    function registerComposablePool(\\n        IVault vault,\\n        IVault.PoolSpecialization specialization,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) internal returns (bytes32) {\\n        // The Vault only requires the token list to be ordered for the Two Token Pools specialization. However,\\n        // to make the developer experience consistent, we are requiring this condition for all the native pools.\\n        //\\n        // Note that for Pools which can register and deregister tokens after deployment, this property may not hold\\n        // as tokens which are added to the Pool after deployment are always added to the end of the array.\\n        InputHelpers.ensureArrayIsSorted(tokens);\\n\\n        IERC20[] memory composableTokens = new IERC20[](tokens.length + 1);\\n        // We insert the Pool's BPT address into the first position.\\n        // This allows us to know the position of the BPT token in the tokens array without explicitly tracking it.\\n        // When deregistering a token, the token at the end of the array is moved into the index of the deregistered\\n        // token, changing its index. By placing BPT at the beginning of the tokens array we can be sure that its index\\n        // will never change unless it is deregistered itself (something which composable pools must prevent anyway).\\n        composableTokens[0] = IERC20(address(this));\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            composableTokens[i + 1] = tokens[i];\\n        }\\n\\n        address[] memory composableAssetManagers = new address[](assetManagers.length + 1);\\n        // We do not allow an asset manager for the Pool's BPT.\\n        composableAssetManagers[0] = address(0);\\n        for (uint256 i = 0; i < assetManagers.length; i++) {\\n            composableAssetManagers[i + 1] = assetManagers[i];\\n        }\\n        return _registerPool(vault, specialization, composableTokens, composableAssetManagers);\\n    }\\n\\n    function _registerPool(\\n        IVault vault,\\n        IVault.PoolSpecialization specialization,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) private returns (bytes32) {\\n        bytes32 poolId = vault.registerPool(specialization);\\n\\n        // We don't need to check that tokens and assetManagers have the same length, since the Vault already performs\\n        // that check.\\n        vault.registerTokens(poolId, tokens, assetManagers);\\n\\n        return poolId;\\n    }\\n\\n    function registerToken(\\n        IVault vault,\\n        bytes32 poolId,\\n        IERC20 token,\\n        address assetManager\\n    ) internal {\\n        IERC20[] memory tokens = new IERC20[](1);\\n        tokens[0] = token;\\n\\n        address[] memory assetManagers = new address[](1);\\n        assetManagers[0] = assetManager;\\n\\n        vault.registerTokens(poolId, tokens, assetManagers);\\n    }\\n\\n    function deregisterToken(\\n        IVault vault,\\n        bytes32 poolId,\\n        IERC20 token\\n    ) internal {\\n        IERC20[] memory tokens = new IERC20[](1);\\n        tokens[0] = token;\\n\\n        vault.deregisterTokens(poolId, tokens);\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-pool-utils/contracts/RecoveryMode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/BasePoolUserData.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/pool-utils/IRecoveryMode.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\n\\nimport \\\"./BasePoolAuthorization.sol\\\";\\n\\n/**\\n * @notice Handle storage and state changes for pools that support \\\"Recovery Mode\\\".\\n *\\n * @dev This is intended to provide a safe way to exit any pool during some kind of emergency, to avoid locking funds\\n * in the event the pool enters a non-functional state (i.e., some code that normally runs during exits is causing\\n * them to revert).\\n *\\n * Recovery Mode is *not* the same as pausing the pool. The pause function is only available during a short window\\n * after factory deployment. Pausing can only be intentionally reversed during a buffer period, and the contract\\n * will permanently unpause itself thereafter. Paused pools are completely disabled, in a kind of suspended animation,\\n * until they are voluntarily or involuntarily unpaused.\\n *\\n * By contrast, a privileged account - typically a governance multisig - can place a pool in Recovery Mode at any\\n * time, and it is always reversible. The pool is *not* disabled while in this mode: though of course whatever\\n * condition prompted the transition to Recovery Mode has likely effectively disabled some functions. Rather,\\n * a special \\\"clean\\\" exit is enabled, which runs the absolute minimum code necessary to exit proportionally.\\n * In particular, stable pools do not attempt to compute the invariant (which is a complex, iterative calculation\\n * that can fail in extreme circumstances), and no protocol fees are collected.\\n *\\n * It is critical to ensure that turning on Recovery Mode would do no harm, if activated maliciously or in error.\\n */\\nabstract contract RecoveryMode is IRecoveryMode, BasePoolAuthorization {\\n    using FixedPoint for uint256;\\n    using BasePoolUserData for bytes;\\n\\n    IVault private immutable _vault;\\n\\n    /**\\n     * @dev Reverts if the contract is in Recovery Mode.\\n     */\\n    modifier whenNotInRecoveryMode() {\\n        _ensureNotInRecoveryMode();\\n        _;\\n    }\\n\\n    constructor(IVault vault) {\\n        _vault = vault;\\n    }\\n\\n    /**\\n     * @notice Enable recovery mode, which enables a special safe exit path for LPs.\\n     * @dev Does not otherwise affect pool operations (beyond deferring payment of protocol fees), though some pools may\\n     * perform certain operations in a \\\"safer\\\" manner that is less likely to fail, in an attempt to keep the pool\\n     * running, even in a pathological state. Unlike the Pause operation, which is only available during a short window\\n     * after factory deployment, Recovery Mode can always be enabled.\\n     */\\n    function enableRecoveryMode() external override authenticate {\\n        // Unlike when recovery mode is disabled, derived contracts should *not* do anything when it is enabled.\\n        // We do not want to make any calls that could fail and prevent the pool from entering recovery mode.\\n        // Accordingly, this should have no effect, but for consistency with `disableRecoveryMode`, revert if\\n        // recovery mode was already enabled.\\n        _ensureNotInRecoveryMode();\\n\\n        _setRecoveryMode(true);\\n\\n        emit RecoveryModeStateChanged(true);\\n    }\\n\\n    /**\\n     * @notice Disable recovery mode, which disables the special safe exit path for LPs.\\n     * @dev Protocol fees are not paid while in Recovery Mode, so it should only remain active for as long as strictly\\n     * necessary.\\n     */\\n    function disableRecoveryMode() external override authenticate {\\n        // Some derived contracts respond to disabling recovery mode with state changes (e.g., related to protocol fees,\\n        // or otherwise ensuring that enabling and disabling recovery mode has no ill effects on LPs). When called\\n        // outside of recovery mode, these state changes might lead to unexpected behavior.\\n        _ensureInRecoveryMode();\\n\\n        _setRecoveryMode(false);\\n\\n        emit RecoveryModeStateChanged(false);\\n    }\\n\\n    // Defer implementation for functions that require storage\\n\\n    /**\\n     * @notice Override to check storage and return whether the pool is in Recovery Mode\\n     */\\n    function inRecoveryMode() public view virtual override returns (bool);\\n\\n    /**\\n     * @dev Override to update storage and emit the event\\n     *\\n     * No complex code or external calls that could fail should be placed in the implementations,\\n     * which could jeopardize the ability to enable and disable Recovery Mode.\\n     */\\n    function _setRecoveryMode(bool enabled) internal virtual;\\n\\n    /**\\n     * @dev Reverts if the contract is not in Recovery Mode.\\n     */\\n    function _ensureInRecoveryMode() internal view {\\n        _require(inRecoveryMode(), Errors.NOT_IN_RECOVERY_MODE);\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is in Recovery Mode.\\n     */\\n    function _ensureNotInRecoveryMode() internal view {\\n        _require(!inRecoveryMode(), Errors.IN_RECOVERY_MODE);\\n    }\\n\\n    /**\\n     * @dev A minimal proportional exit, suitable as is for most pools: though not for pools with preminted BPT\\n     * or other special considerations. Designed to be overridden if a pool needs to do extra processing,\\n     * such as scaling a stored invariant, or caching the new total supply.\\n     *\\n     * No complex code or external calls should be made in derived contracts that override this!\\n     */\\n    function _doRecoveryModeExit(\\n        uint256[] memory balances,\\n        uint256 totalSupply,\\n        bytes memory userData\\n    ) internal virtual returns (uint256, uint256[] memory);\\n\\n    /**\\n     * @dev Keep a reference to the Vault, for use in reentrancy protection function calls that require it.\\n     */\\n    function _getVault() internal view returns (IVault) {\\n        return _vault;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/Authentication.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\\\";\\n\\n/**\\n * @dev Building block for performing access control on external functions.\\n *\\n * This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\\n * to external functions to only make them callable by authorized accounts.\\n *\\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\\n */\\nabstract contract Authentication is IAuthentication {\\n    bytes32 private immutable _actionIdDisambiguator;\\n\\n    /**\\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\\n     * multi contract systems.\\n     *\\n     * There are two main uses for it:\\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\\n     *    unique. The contract's own address is a good option.\\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\\n     *    shared by the entire family (and no other contract) should be used instead.\\n     */\\n    constructor(bytes32 actionIdDisambiguator) {\\n        _actionIdDisambiguator = actionIdDisambiguator;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\\n     */\\n    modifier authenticate() {\\n        _authenticateCaller();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call the entry point function.\\n     */\\n    function _authenticateCaller() internal view {\\n        bytes32 actionId = getActionId(msg.sig);\\n        _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\\n    }\\n\\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\\n        // multiple contracts.\\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\\n    }\\n\\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\\\";\\n\\nimport \\\"../openzeppelin/EIP712.sol\\\";\\n\\n/**\\n * @dev Utility for signing Solidity function calls.\\n */\\nabstract contract EOASignaturesValidator is ISignaturesValidator, EIP712 {\\n    // Replay attack prevention for each account.\\n    mapping(address => uint256) internal _nextNonce;\\n\\n    function getDomainSeparator() public view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    function getNextNonce(address account) public view override returns (uint256) {\\n        return _nextNonce[account];\\n    }\\n\\n    function _ensureValidSignature(\\n        address account,\\n        bytes32 structHash,\\n        bytes memory signature,\\n        uint256 errorCode\\n    ) internal {\\n        return _ensureValidSignature(account, structHash, signature, type(uint256).max, errorCode);\\n    }\\n\\n    function _ensureValidSignature(\\n        address account,\\n        bytes32 structHash,\\n        bytes memory signature,\\n        uint256 deadline,\\n        uint256 errorCode\\n    ) internal {\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n        _require(_isValidSignature(account, digest, signature), errorCode);\\n\\n        // We could check for the deadline before validating the signature, but this leads to saner error processing (as\\n        // we only care about expired deadlines if the signature is correct) and only affects the gas cost of the revert\\n        // scenario, which will only occur infrequently, if ever.\\n        // The deadline is timestamp-based: it should not be relied upon for sub-minute accuracy.\\n        // solhint-disable-next-line not-rely-on-time\\n        _require(deadline >= block.timestamp, Errors.EXPIRED_SIGNATURE);\\n\\n        // We only advance the nonce after validating the signature. This is irrelevant for this module, but it can be\\n        // important in derived contracts that override _isValidSignature (e.g. SignaturesValidator), as we want for\\n        // the observable state to still have the current nonce as the next valid one.\\n        _nextNonce[account] += 1;\\n    }\\n\\n    function _isValidSignature(\\n        address account,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view virtual returns (bool) {\\n        _require(signature.length == 65, Errors.MALFORMED_SIGNATURE);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the r, s and v signature parameters, and the only way to get them is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n        // ecrecover returns the zero address on recover failure, so we need to handle that explicitly.\\n        return (recoveredAddress != address(0) && recoveredAddress == account);\\n    }\\n\\n    function _toArraySignature(\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (bytes memory) {\\n        bytes memory signature = new bytes(65);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(add(signature, 32), r)\\n            mstore(add(signature, 64), s)\\n            mstore8(add(signature, 96), v)\\n        }\\n\\n        return signature;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nlibrary InputHelpers {\\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureInputLengthMatch(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure {\\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(address[] memory array) internal pure {\\n        if (array.length < 2) {\\n            return;\\n        }\\n\\n        address previous = array[0];\\n        for (uint256 i = 1; i < array.length; ++i) {\\n            address current = array[i];\\n            _require(previous < current, Errors.UNSORTED_ARRAY);\\n            previous = current;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/ScalingHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../math/FixedPoint.sol\\\";\\nimport \\\"../math/Math.sol\\\";\\nimport \\\"../openzeppelin/ERC20.sol\\\";\\nimport \\\"./InputHelpers.sol\\\";\\n\\n// solhint-disable\\n\\n// To simplify Pool logic, all token balances and amounts are normalized to behave as if the token had 18 decimals.\\n// e.g. When comparing DAI (18 decimals) and USDC (6 decimals), 1 USDC and 1 DAI would both be represented as 1e18,\\n// whereas without scaling 1 USDC would be represented as 1e6.\\n// This allows us to not consider differences in token decimals in the internal Pool maths, simplifying it greatly.\\n\\n// Single Value\\n\\n/**\\n * @dev Applies `scalingFactor` to `amount`, resulting in a larger or equal value depending on whether it needed\\n * scaling or not.\\n */\\nfunction _upscale(uint256 amount, uint256 scalingFactor) pure returns (uint256) {\\n    // Upscale rounding wouldn't necessarily always go in the same direction: in a swap for example the balance of\\n    // token in should be rounded up, and that of token out rounded down. This is the only place where we round in\\n    // the same direction for all amounts, as the impact of this rounding is expected to be minimal.\\n    return FixedPoint.mulDown(amount, scalingFactor);\\n}\\n\\n/**\\n * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\\n * whether it needed scaling or not. The result is rounded down.\\n */\\nfunction _downscaleDown(uint256 amount, uint256 scalingFactor) pure returns (uint256) {\\n    return FixedPoint.divDown(amount, scalingFactor);\\n}\\n\\n/**\\n * @dev Reverses the `scalingFactor` applied to `amount`, resulting in a smaller or equal value depending on\\n * whether it needed scaling or not. The result is rounded up.\\n */\\nfunction _downscaleUp(uint256 amount, uint256 scalingFactor) pure returns (uint256) {\\n    return FixedPoint.divUp(amount, scalingFactor);\\n}\\n\\n// Array\\n\\n/**\\n * @dev Same as `_upscale`, but for an entire array. This function does not return anything, but instead *mutates*\\n * the `amounts` array.\\n */\\nfunction _upscaleArray(uint256[] memory amounts, uint256[] memory scalingFactors) pure {\\n    uint256 length = amounts.length;\\n    InputHelpers.ensureInputLengthMatch(length, scalingFactors.length);\\n\\n    for (uint256 i = 0; i < length; ++i) {\\n        amounts[i] = FixedPoint.mulDown(amounts[i], scalingFactors[i]);\\n    }\\n}\\n\\n/**\\n * @dev Same as `_downscaleDown`, but for an entire array. This function does not return anything, but instead\\n * *mutates* the `amounts` array.\\n */\\nfunction _downscaleDownArray(uint256[] memory amounts, uint256[] memory scalingFactors) pure {\\n    uint256 length = amounts.length;\\n    InputHelpers.ensureInputLengthMatch(length, scalingFactors.length);\\n\\n    for (uint256 i = 0; i < length; ++i) {\\n        amounts[i] = FixedPoint.divDown(amounts[i], scalingFactors[i]);\\n    }\\n}\\n\\n/**\\n * @dev Same as `_downscaleUp`, but for an entire array. This function does not return anything, but instead\\n * *mutates* the `amounts` array.\\n */\\nfunction _downscaleUpArray(uint256[] memory amounts, uint256[] memory scalingFactors) pure {\\n    uint256 length = amounts.length;\\n    InputHelpers.ensureInputLengthMatch(length, scalingFactors.length);\\n\\n    for (uint256 i = 0; i < length; ++i) {\\n        amounts[i] = FixedPoint.divUp(amounts[i], scalingFactors[i]);\\n    }\\n}\\n\\nfunction _computeScalingFactor(IERC20 token) view returns (uint256) {\\n    // Tokens that don't implement the `decimals` method are not supported.\\n    uint256 tokenDecimals = ERC20(address(token)).decimals();\\n\\n    // Tokens with more than 18 decimals are not supported.\\n    uint256 decimalsDifference = Math.sub(18, tokenDecimals);\\n    return FixedPoint.ONE * 10**decimalsDifference;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/TemporarilyPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\\\";\\n\\n/**\\n * @dev Allows for a contract to be paused during an initial period after deployment, disabling functionality. Can be\\n * used as an emergency switch in case a security vulnerability or threat is identified.\\n *\\n * The contract can only be paused during the Pause Window, a period that starts at deployment. It can also be\\n * unpaused and repaused any number of times during this period. This is intended to serve as a safety measure: it lets\\n * system managers react quickly to potentially dangerous situations, knowing that this action is reversible if careful\\n * analysis later determines there was a false alarm.\\n *\\n * If the contract is paused when the Pause Window finishes, it will remain in the paused state through an additional\\n * Buffer Period, after which it will be automatically unpaused forever. This is to ensure there is always enough time\\n * to react to an emergency, even if the threat is discovered shortly before the Pause Window expires.\\n *\\n * Note that since the contract can only be paused within the Pause Window, unpausing during the Buffer Period is\\n * irreversible.\\n */\\nabstract contract TemporarilyPausable is ITemporarilyPausable {\\n    // The Pause Window and Buffer Period are timestamp-based: they should not be relied upon for sub-minute accuracy.\\n    // solhint-disable not-rely-on-time\\n\\n    uint256 private immutable _pauseWindowEndTime;\\n    uint256 private immutable _bufferPeriodEndTime;\\n\\n    bool private _paused;\\n\\n    constructor(uint256 pauseWindowDuration, uint256 bufferPeriodDuration) {\\n        _require(pauseWindowDuration <= PausableConstants.MAX_PAUSE_WINDOW_DURATION, Errors.MAX_PAUSE_WINDOW_DURATION);\\n        _require(\\n            bufferPeriodDuration <= PausableConstants.MAX_BUFFER_PERIOD_DURATION,\\n            Errors.MAX_BUFFER_PERIOD_DURATION\\n        );\\n\\n        uint256 pauseWindowEndTime = block.timestamp + pauseWindowDuration;\\n\\n        _pauseWindowEndTime = pauseWindowEndTime;\\n        _bufferPeriodEndTime = pauseWindowEndTime + bufferPeriodDuration;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is paused.\\n     */\\n    modifier whenNotPaused() {\\n        _ensureNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the current contract pause status, as well as the end times of the Pause Window and Buffer\\n     * Period.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        override\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        )\\n    {\\n        paused = !_isNotPaused();\\n        pauseWindowEndTime = _getPauseWindowEndTime();\\n        bufferPeriodEndTime = _getBufferPeriodEndTime();\\n    }\\n\\n    /**\\n     * @dev Sets the pause state to `paused`. The contract can only be paused until the end of the Pause Window, and\\n     * unpaused until the end of the Buffer Period.\\n     *\\n     * Once the Buffer Period expires, this function reverts unconditionally.\\n     */\\n    function _setPaused(bool paused) internal {\\n        if (paused) {\\n            _require(block.timestamp < _getPauseWindowEndTime(), Errors.PAUSE_WINDOW_EXPIRED);\\n        } else {\\n            _require(block.timestamp < _getBufferPeriodEndTime(), Errors.BUFFER_PERIOD_EXPIRED);\\n        }\\n\\n        _paused = paused;\\n        emit PausedStateChanged(paused);\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is paused.\\n     */\\n    function _ensureNotPaused() internal view {\\n        _require(_isNotPaused(), Errors.PAUSED);\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not paused.\\n     */\\n    function _ensurePaused() internal view {\\n        _require(!_isNotPaused(), Errors.NOT_PAUSED);\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is unpaused.\\n     *\\n     * Once the Buffer Period expires, the gas cost of calling this function is reduced dramatically, as storage is no\\n     * longer accessed.\\n     */\\n    function _isNotPaused() internal view returns (bool) {\\n        // After the Buffer Period, the (inexpensive) timestamp check short-circuits the storage access.\\n        return block.timestamp > _getBufferPeriodEndTime() || !_paused;\\n    }\\n\\n    // These getters lead to reduced bytecode size by inlining the immutable variables in a single place.\\n\\n    function _getPauseWindowEndTime() private view returns (uint256) {\\n        return _pauseWindowEndTime;\\n    }\\n\\n    function _getBufferPeriodEndTime() private view returns (uint256) {\\n        return _bufferPeriodEndTime;\\n    }\\n}\\n\\n/**\\n * @dev Keep the maximum durations in a single place.\\n */\\nlibrary PausableConstants {\\n    uint256 public constant MAX_PAUSE_WINDOW_DURATION = 270 days;\\n    uint256 public constant MAX_BUFFER_PERIOD_DURATION = 90 days;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/WordCodec.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev Library for encoding and decoding values stored inside a 256 bit word. Typically used to pack multiple values in\\n * a single storage slot, saving gas by performing less storage accesses.\\n *\\n * Each value is defined by its size and the least significant bit in the word, also known as offset. For example, two\\n * 128 bit values may be encoded in a word by assigning one an offset of 0, and the other an offset of 128.\\n *\\n * We could use Solidity structs to pack values together in a single storage slot instead of relying on a custom and\\n * error-prone library, but unfortunately Solidity only allows for structs to live in either storage, calldata or\\n * memory. Because a memory struct uses not just memory but also a slot in the stack (to store its memory location),\\n * using memory for word-sized values (i.e. of 256 bits or less) is strictly less gas performant, and doesn't even\\n * prevent stack-too-deep issues. This is compounded by the fact that Balancer contracts typically are memory-intensive,\\n * and the cost of accesing memory increases quadratically with the number of allocated words. Manual packing and\\n * unpacking is therefore the preferred approach.\\n */\\nlibrary WordCodec {\\n    // solhint-disable no-inline-assembly\\n\\n    // Masks are values with the least significant N bits set. They can be used to extract an encoded value from a word,\\n    // or to insert a new one replacing the old.\\n    uint256 private constant _MASK_1 = 2**(1) - 1;\\n    uint256 private constant _MASK_192 = 2**(192) - 1;\\n\\n    // In-place insertion\\n\\n    /**\\n     * @dev Inserts an unsigned integer of bitLength, shifted by an offset, into a 256 bit word,\\n     * replacing the old value. Returns the new word.\\n     */\\n    function insertUint(\\n        bytes32 word,\\n        uint256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (bytes32 result) {\\n        _validateEncodingParams(value, offset, bitLength);\\n        // Equivalent to:\\n        // uint256 mask = (1 << bitLength) - 1;\\n        // bytes32 clearedWord = bytes32(uint256(word) & ~(mask << offset));\\n        // result = clearedWord | bytes32(value << offset);\\n        assembly {\\n            let mask := sub(shl(bitLength, 1), 1)\\n            let clearedWord := and(word, not(shl(offset, mask)))\\n            result := or(clearedWord, shl(offset, value))\\n        }\\n    }\\n\\n    /**\\n     * @dev Inserts a signed integer shifted by an offset into a 256 bit word, replacing the old value. Returns\\n     * the new word.\\n     *\\n     * Assumes `value` can be represented using `bitLength` bits.\\n     */\\n    function insertInt(\\n        bytes32 word,\\n        int256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (bytes32) {\\n        _validateEncodingParams(value, offset, bitLength);\\n\\n        uint256 mask = (1 << bitLength) - 1;\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(mask << offset));\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return clearedWord | bytes32((uint256(value) & mask) << offset);\\n    }\\n\\n    // Encoding\\n\\n    /**\\n     * @dev Encodes an unsigned integer shifted by an offset. Ensures value fits within\\n     * `bitLength` bits.\\n     *\\n     * The return value can be ORed bitwise with other encoded values to form a 256 bit word.\\n     */\\n    function encodeUint(\\n        uint256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (bytes32) {\\n        _validateEncodingParams(value, offset, bitLength);\\n\\n        return bytes32(value << offset);\\n    }\\n\\n    /**\\n     * @dev Encodes a signed integer shifted by an offset.\\n     *\\n     * The return value can be ORed bitwise with other encoded values to form a 256 bit word.\\n     */\\n    function encodeInt(\\n        int256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (bytes32) {\\n        _validateEncodingParams(value, offset, bitLength);\\n\\n        uint256 mask = (1 << bitLength) - 1;\\n        // Integer values need masking to remove the upper bits of negative values.\\n        return bytes32((uint256(value) & mask) << offset);\\n    }\\n\\n    // Decoding\\n\\n    /**\\n     * @dev Decodes and returns an unsigned integer with `bitLength` bits, shifted by an offset, from a 256 bit word.\\n     */\\n    function decodeUint(\\n        bytes32 word,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (uint256 result) {\\n        // Equivalent to:\\n        // result = uint256(word >> offset) & ((1 << bitLength) - 1);\\n        assembly {\\n            result := and(shr(offset, word), sub(shl(bitLength, 1), 1))\\n        }\\n    }\\n\\n    /**\\n     * @dev Decodes and returns a signed integer with `bitLength` bits, shifted by an offset, from a 256 bit word.\\n     */\\n    function decodeInt(\\n        bytes32 word,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) internal pure returns (int256 result) {\\n        int256 maxInt = int256((1 << (bitLength - 1)) - 1);\\n        uint256 mask = (1 << bitLength) - 1;\\n\\n        int256 value = int256(uint256(word >> offset) & mask);\\n        // In case the decoded value is greater than the max positive integer that can be represented with bitLength\\n        // bits, we know it was originally a negative integer. Therefore, we mask it to restore the sign in the 256 bit\\n        // representation.\\n        //\\n        // Equivalent to:\\n        // result = value > maxInt ? (value | int256(~mask)) : value;\\n        assembly {\\n            result := or(mul(gt(value, maxInt), not(mask)), value)\\n        }\\n    }\\n\\n    // Special cases\\n\\n    /**\\n     * @dev Decodes and returns a boolean shifted by an offset from a 256 bit word.\\n     */\\n    function decodeBool(bytes32 word, uint256 offset) internal pure returns (bool result) {\\n        // Equivalent to:\\n        // result = (uint256(word >> offset) & 1) == 1;\\n        assembly {\\n            result := and(shr(offset, word), 1)\\n        }\\n    }\\n\\n    /**\\n     * @dev Inserts a 192 bit value shifted by an offset into a 256 bit word, replacing the old value.\\n     * Returns the new word.\\n     *\\n     * Assumes `value` can be represented using 192 bits.\\n     */\\n    function insertBits192(\\n        bytes32 word,\\n        bytes32 value,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        bytes32 clearedWord = bytes32(uint256(word) & ~(_MASK_192 << offset));\\n        return clearedWord | bytes32((uint256(value) & _MASK_192) << offset);\\n    }\\n\\n    /**\\n     * @dev Inserts a boolean value shifted by an offset into a 256 bit word, replacing the old value. Returns the new\\n     * word.\\n     */\\n    function insertBool(\\n        bytes32 word,\\n        bool value,\\n        uint256 offset\\n    ) internal pure returns (bytes32 result) {\\n        // Equivalent to:\\n        // bytes32 clearedWord = bytes32(uint256(word) & ~(1 << offset));\\n        // bytes32 referenceInsertBool = clearedWord | bytes32(uint256(value ? 1 : 0) << offset);\\n        assembly {\\n            let clearedWord := and(word, not(shl(offset, 1)))\\n            result := or(clearedWord, shl(offset, value))\\n        }\\n    }\\n\\n    // Helpers\\n\\n    function _validateEncodingParams(\\n        uint256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) private pure {\\n        _require(offset < 256, Errors.OUT_OF_BOUNDS);\\n        // We never accept 256 bit values (which would make the codec pointless), and the larger the offset the smaller\\n        // the maximum bit length.\\n        _require(bitLength >= 1 && bitLength <= Math.min(255, 256 - offset), Errors.OUT_OF_BOUNDS);\\n\\n        // Testing unsigned values for size is straightforward: their upper bits must be cleared.\\n        _require(value >> bitLength == 0, Errors.CODEC_OVERFLOW);\\n    }\\n\\n    function _validateEncodingParams(\\n        int256 value,\\n        uint256 offset,\\n        uint256 bitLength\\n    ) private pure {\\n        _require(offset < 256, Errors.OUT_OF_BOUNDS);\\n        // We never accept 256 bit values (which would make the codec pointless), and the larger the offset the smaller\\n        // the maximum bit length.\\n        _require(bitLength >= 1 && bitLength <= Math.min(255, 256 - offset), Errors.OUT_OF_BOUNDS);\\n\\n        // Testing signed values for size is a bit more involved.\\n        if (value >= 0) {\\n            // For positive values, we can simply check that the upper bits are clear. Notice we remove one bit from the\\n            // length for the sign bit.\\n            _require(value >> (bitLength - 1) == 0, Errors.CODEC_OVERFLOW);\\n        } else {\\n            // Negative values can receive the same treatment by making them positive, with the caveat that the range\\n            // for negative values in two's complement supports one more value than for the positive case.\\n            _require(Math.abs(value + 1) >> (bitLength - 1) == 0, Errors.CODEC_OVERFLOW);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"./LogExpMath.sol\\\";\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\nlibrary FixedPoint {\\n    // solhint-disable no-inline-assembly\\n\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    uint256 internal constant TWO = 2 * ONE;\\n    uint256 internal constant FOUR = 4 * ONE;\\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\\n\\n    // Minimum base for the power function when the exponent is 'free' (larger than ONE).\\n    uint256 internal constant MIN_POW_BASE_FREE_EXPONENT = 0.7e18;\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\\n\\n        return product / ONE;\\n    }\\n\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        uint256 product = a * b;\\n        _require(a == 0 || product / a == b, Errors.MUL_OVERFLOW);\\n\\n        // The traditional divUp formula is:\\n        // divUp(x, y) := (x + y - 1) / y\\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\\n        // divUp(x, y) := (x - 1) / y + 1\\n        // Note that this requires x != 0, if x == 0 then the result is zero\\n        //\\n        // Equivalent to:\\n        // result = product == 0 ? 0 : ((product - 1) / FixedPoint.ONE) + 1;\\n        assembly {\\n            result := mul(iszero(iszero(product)), add(div(sub(product, 1), ONE), 1))\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        uint256 aInflated = a * ONE;\\n        _require(a == 0 || aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\\n\\n        return aInflated / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        uint256 aInflated = a * ONE;\\n        _require(a == 0 || aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\\n\\n        // The traditional divUp formula is:\\n        // divUp(x, y) := (x + y - 1) / y\\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\\n        // divUp(x, y) := (x - 1) / y + 1\\n        // Note that this requires x != 0, if x == 0 then the result is zero\\n        //\\n        // Equivalent to:\\n        // result = a == 0 ? 0 : (a * FixedPoint.ONE - 1) / b + 1;\\n        assembly {\\n            result := mul(iszero(iszero(aInflated)), add(div(sub(aInflated, 1), b), 1))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\\n     * the true value (that is, the error function expected - actual is always positive).\\n     */\\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // Optimize for when y equals 1.0, 2.0 or 4.0, as those are very simple to implement and occur often in 50/50\\n        // and 80/20 Weighted Pools\\n        if (y == ONE) {\\n            return x;\\n        } else if (y == TWO) {\\n            return mulDown(x, x);\\n        } else if (y == FOUR) {\\n            uint256 square = mulDown(x, x);\\n            return mulDown(square, square);\\n        } else {\\n            uint256 raw = LogExpMath.pow(x, y);\\n            uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n            if (raw < maxError) {\\n                return 0;\\n            } else {\\n                return sub(raw, maxError);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\\n     * the true value (that is, the error function expected - actual is always negative).\\n     */\\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        // Optimize for when y equals 1.0, 2.0 or 4.0, as those are very simple to implement and occur often in 50/50\\n        // and 80/20 Weighted Pools\\n        if (y == ONE) {\\n            return x;\\n        } else if (y == TWO) {\\n            return mulUp(x, x);\\n        } else if (y == FOUR) {\\n            uint256 square = mulUp(x, x);\\n            return mulUp(square, square);\\n        } else {\\n            uint256 raw = LogExpMath.pow(x, y);\\n            uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n            return add(raw, maxError);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\\n     *\\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\\n     * prevents intermediate negative values.\\n     */\\n    function complement(uint256 x) internal pure returns (uint256 result) {\\n        // Equivalent to:\\n        // result = (x < ONE) ? (ONE - x) : 0;\\n        assembly {\\n            result := mul(lt(x, ONE), sub(ONE, x))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\\n// documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\\n// Software.\\n\\n// THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\n *\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\n * exponentiation and logarithm (where the base is Euler's number).\\n *\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\n    // two numbers, and multiply by ONE when dividing them.\\n\\n    // All arguments and return values are 18 decimal fixed point numbers.\\n    int256 constant ONE_18 = 1e18;\\n\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\n    // case of ln36, 36 decimals.\\n    int256 constant ONE_20 = 1e20;\\n    int256 constant ONE_36 = 1e36;\\n\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\n    //\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\n    // ln(10^(-18)) = -41.446531673892822312.\\n    // We use 130.0 and -41.0 to have some safety margin.\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\n\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\n    // 256 bit integer.\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\n\\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(ONE_20);\\n\\n    // 18 decimal constants\\n    int256 constant x0 = 128000000000000000000; // 2\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\u02c6(x0) (no decimals)\\n    int256 constant x1 = 64000000000000000000; // 2\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; // e\u02c6(x1) (no decimals)\\n\\n    // 20 decimal constants\\n    int256 constant x2 = 3200000000000000000000; // 2\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; // 2\u02c64\\n    int256 constant a3 = 888611052050787263676000000; // e\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; // 2\u02c63\\n    int256 constant a4 = 298095798704172827474000; // e\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; // 2\u02c62\\n    int256 constant a5 = 5459815003314423907810; // e\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; // 2\u02c61\\n    int256 constant a6 = 738905609893065022723; // e\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; // 2\u02c60\\n    int256 constant a7 = 271828182845904523536; // e\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; // 2\u02c6-1\\n    int256 constant a8 = 164872127070012814685; // e\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; // 2\u02c6-2\\n    int256 constant a9 = 128402541668774148407; // e\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; // 2\u02c6-3\\n    int256 constant a10 = 113314845306682631683; // e\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; // 2\u02c6-4\\n    int256 constant a11 = 106449445891785942956; // e\u02c6(x11)\\n\\n    /**\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\n     *\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) {\\n            // We solve the 0^0 indetermination by making it equal one.\\n            return uint256(ONE_18);\\n        }\\n\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\n        // x^y = exp(y * ln(x)).\\n\\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\n        _require(x >> 255 == 0, Errors.X_OUT_OF_BOUNDS);\\n        int256 x_int256 = int256(x);\\n\\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\n\\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\n        _require(y < MILD_EXPONENT_BOUND, Errors.Y_OUT_OF_BOUNDS);\\n        int256 y_int256 = int256(y);\\n\\n        int256 logx_times_y;\\n        if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\n            int256 ln_36_x = _ln_36(x_int256);\\n\\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\n            // (downscaled) last 18 decimals.\\n            logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\n        } else {\\n            logx_times_y = _ln(x_int256) * y_int256;\\n        }\\n        logx_times_y /= ONE_18;\\n\\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\\n        _require(\\n            MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\n            Errors.PRODUCT_OUT_OF_BOUNDS\\n        );\\n\\n        return uint256(exp(logx_times_y));\\n    }\\n\\n    /**\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\n     *\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function exp(int256 x) internal pure returns (int256) {\\n        _require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, Errors.INVALID_EXPONENT);\\n\\n        if (x < 0) {\\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\n            // Fixed point division requires multiplying by ONE_18.\\n            return ((ONE_18 * ONE_18) / exp(-x));\\n        }\\n\\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\n        // decomposition.\\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest x_n.\\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\n\\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\n        // decomposition.\\n\\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\n        // it and compute the accumulated product.\\n\\n        int256 firstAN;\\n        if (x >= x0) {\\n            x -= x0;\\n            firstAN = a0;\\n        } else if (x >= x1) {\\n            x -= x1;\\n            firstAN = a1;\\n        } else {\\n            firstAN = 1; // One with no decimal places\\n        }\\n\\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\n        // smaller terms.\\n        x *= 100;\\n\\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\\n        int256 product = ONE_20;\\n\\n        if (x >= x2) {\\n            x -= x2;\\n            product = (product * a2) / ONE_20;\\n        }\\n        if (x >= x3) {\\n            x -= x3;\\n            product = (product * a3) / ONE_20;\\n        }\\n        if (x >= x4) {\\n            x -= x4;\\n            product = (product * a4) / ONE_20;\\n        }\\n        if (x >= x5) {\\n            x -= x5;\\n            product = (product * a5) / ONE_20;\\n        }\\n        if (x >= x6) {\\n            x -= x6;\\n            product = (product * a6) / ONE_20;\\n        }\\n        if (x >= x7) {\\n            x -= x7;\\n            product = (product * a7) / ONE_20;\\n        }\\n        if (x >= x8) {\\n            x -= x8;\\n            product = (product * a8) / ONE_20;\\n        }\\n        if (x >= x9) {\\n            x -= x9;\\n            product = (product * a9) / ONE_20;\\n        }\\n\\n        // x10 and x11 are unnecessary here since we have high enough precision already.\\n\\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\n\\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\n\\n        // The first term is simply x.\\n        term = x;\\n        seriesSum += term;\\n\\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\n        // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\n\\n        term = ((term * x) / ONE_20) / 2;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 3;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 4;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 5;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 6;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 7;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 8;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 9;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 10;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 11;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 12;\\n        seriesSum += term;\\n\\n        // 12 Taylor terms are sufficient for 18 decimal precision.\\n\\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\n        // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\n        // and then drop two digits to return an 18 decimal value.\\n\\n        return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\n    }\\n\\n    /**\\n     * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\\n     */\\n    function log(int256 arg, int256 base) internal pure returns (int256) {\\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\\n\\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\\n        // upscaling.\\n\\n        int256 logBase;\\n        if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\\n            logBase = _ln_36(base);\\n        } else {\\n            logBase = _ln(base) * ONE_18;\\n        }\\n\\n        int256 logArg;\\n        if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\\n            logArg = _ln_36(arg);\\n        } else {\\n            logArg = _ln(arg) * ONE_18;\\n        }\\n\\n        // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\\n        return (logArg * ONE_18) / logBase;\\n    }\\n\\n    /**\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function ln(int256 a) internal pure returns (int256) {\\n        // The real natural logarithm is not defined for negative numbers or zero.\\n        _require(a > 0, Errors.OUT_OF_BOUNDS);\\n        if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\\n            return _ln_36(a) / ONE_18;\\n        } else {\\n            return _ln(a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function _ln(int256 a) private pure returns (int256) {\\n        if (a < ONE_18) {\\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\n            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\n            // Fixed point division requires multiplying by ONE_18.\\n            return (-_ln((ONE_18 * ONE_18) / a));\\n        }\\n\\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest a_n.\\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\n\\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\n        // ONE_18 to convert them to fixed point.\\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\n        // by it and compute the accumulated sum.\\n\\n        int256 sum = 0;\\n        if (a >= a0 * ONE_18) {\\n            a /= a0; // Integer, not fixed point division\\n            sum += x0;\\n        }\\n\\n        if (a >= a1 * ONE_18) {\\n            a /= a1; // Integer, not fixed point division\\n            sum += x1;\\n        }\\n\\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\n        sum *= 100;\\n        a *= 100;\\n\\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\n\\n        if (a >= a2) {\\n            a = (a * ONE_20) / a2;\\n            sum += x2;\\n        }\\n\\n        if (a >= a3) {\\n            a = (a * ONE_20) / a3;\\n            sum += x3;\\n        }\\n\\n        if (a >= a4) {\\n            a = (a * ONE_20) / a4;\\n            sum += x4;\\n        }\\n\\n        if (a >= a5) {\\n            a = (a * ONE_20) / a5;\\n            sum += x5;\\n        }\\n\\n        if (a >= a6) {\\n            a = (a * ONE_20) / a6;\\n            sum += x6;\\n        }\\n\\n        if (a >= a7) {\\n            a = (a * ONE_20) / a7;\\n            sum += x7;\\n        }\\n\\n        if (a >= a8) {\\n            a = (a * ONE_20) / a8;\\n            sum += x8;\\n        }\\n\\n        if (a >= a9) {\\n            a = (a * ONE_20) / a9;\\n            sum += x9;\\n        }\\n\\n        if (a >= a10) {\\n            a = (a * ONE_20) / a10;\\n            sum += x10;\\n        }\\n\\n        if (a >= a11) {\\n            a = (a * ONE_20) / a11;\\n            sum += x11;\\n        }\\n\\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\n        // Let z = (a - 1) / (a + 1).\\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\n        // division by ONE_20.\\n        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\n        int256 z_squared = (z * z) / ONE_20;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 11;\\n\\n        // 6 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\n        seriesSum *= 2;\\n\\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\n        // value.\\n\\n        return (sum + seriesSum) / 100;\\n    }\\n\\n    /**\\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\n     * for x close to one.\\n     *\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\n     */\\n    function _ln_36(int256 x) private pure returns (int256) {\\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\n        // worthwhile.\\n\\n        // First, we transform x to a 36 digit fixed point value.\\n        x *= ONE_18;\\n\\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\n        // division by ONE_36.\\n        int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\n        int256 z_squared = (z * z) / ONE_36;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 11;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 13;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 15;\\n\\n        // 8 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // All that remains is multiplying by 2 (non fixed point).\\n        return seriesSum * 2;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\n * Adapted from OpenZeppelin's SafeMath library.\\n */\\nlibrary Math {\\n    // solhint-disable no-inline-assembly\\n\\n    /**\\n     * @dev Returns the absolute value of a signed integer.\\n     */\\n    function abs(int256 a) internal pure returns (uint256 result) {\\n        // Equivalent to:\\n        // result = a > 0 ? uint256(a) : uint256(-a)\\n        assembly {\\n            let s := sar(255, a)\\n            result := sub(xor(a, s), s)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        _require((b >= 0 && c >= a) || (b < 0 && c < a), Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers of 256 bits.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        // Equivalent to:\\n        // result = (a < b) ? b : a;\\n        assembly {\\n            result := sub(a, mul(sub(a, b), lt(a, b)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers of 256 bits.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        // Equivalent to `result = (a < b) ? a : b`\\n        assembly {\\n            result := sub(a, mul(sub(a, b), gt(a, b)))\\n        }\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a * b;\\n        _require(a == 0 || c / a == b, Errors.MUL_OVERFLOW);\\n        return c;\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        bool roundUp\\n    ) internal pure returns (uint256) {\\n        return roundUp ? divUp(a, b) : divDown(a, b);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        // Equivalent to:\\n        // result = a == 0 ? 0 : 1 + (a - 1) / b;\\n        assembly {\\n            result := mul(iszero(iszero(a)), add(1, div(sub(a, 1), b)))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _HASHED_NAME = keccak256(bytes(name));\\n        _HASHED_VERSION = keccak256(bytes(version));\\n        _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    // solc-ignore-next-line func-mutability\\n    function _getChainId() private view returns (uint256 chainId) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}. The total supply should only be read using this function\\n     *\\n     * Can be overridden by derived contracts to store the total supply in a different way (e.g. packed with other\\n     * storage values).\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Sets a new value for the total supply. It should only be set using this function.\\n     *\\n     * * Can be overridden by derived contracts to store the total supply in a different way (e.g. packed with other\\n     * storage values).\\n     */\\n    function _setTotalSupply(uint256 value) internal virtual {\\n        _totalSupply = value;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_ALLOWANCE)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].sub(subtractedValue, Errors.ERC20_DECREASED_ALLOWANCE_BELOW_ZERO)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        _require(sender != address(0), Errors.ERC20_TRANSFER_FROM_ZERO_ADDRESS);\\n        _require(recipient != address(0), Errors.ERC20_TRANSFER_TO_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, Errors.ERC20_TRANSFER_EXCEEDS_BALANCE);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _setTotalSupply(totalSupply().add(amount));\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _require(account != address(0), Errors.ERC20_BURN_FROM_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, Errors.ERC20_BURN_EXCEEDS_BALANCE);\\n        _setTotalSupply(totalSupply().sub(amount));\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20Permit.sol\\\";\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../helpers/EOASignaturesValidator.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EOASignaturesValidator {\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH = keccak256(\\n        \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n    );\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        bytes32 structHash = keccak256(\\n            abi.encode(_PERMIT_TYPEHASH, owner, spender, value, getNextNonce(owner), deadline)\\n        );\\n\\n        _ensureValidSignature(owner, structHash, _toArraySignature(v, r, s), deadline, Errors.INVALID_SIGNATURE);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view override returns (uint256) {\\n        return getNextNonce(owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return getDomainSeparator();\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce bytecode size.\\n// Modifier code is inlined by the compiler, which causes its code to appear multiple times in the codebase. By using\\n// private functions, we achieve the same end result with slightly higher runtime gas costs, but reduced bytecode size.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _enterNonReentrant();\\n        _;\\n        _exitNonReentrant();\\n    }\\n\\n    function _enterNonReentrant() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        _require(_status != _ENTERED, Errors.REENTRANCY);\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _exitNonReentrant() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        _require(value >> 255 == 0, Errors.SAFE_CAST_VALUE_CANT_FIT_INT256);\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into an unsigned uint64.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxUint64.\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        _require(value <= type(uint64).max, Errors.SAFE_CAST_VALUE_CANT_FIT_UINT64);\\n        return uint64(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, Errors.SUB_OVERFLOW);\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        uint256 errorCode\\n    ) internal pure returns (uint256) {\\n        _require(b <= a, errorCode);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@swaap-labs/v2-errors/contracts/SwaapV2Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nlibrary SwaapV2Errors {\\n    // Safeguard Pool\\n    uint256 internal constant EXCEEDED_SWAP_AMOUNT_IN = 0;\\n    uint256 internal constant EXCEEDED_SWAP_AMOUNT_OUT = 1;\\n    uint256 internal constant UNFAIR_PRICE = 2;\\n    uint256 internal constant LOW_PERFORMANCE = 3;\\n    uint256 internal constant MIN_BALANCE_OUT_NOT_MET = 4;\\n    uint256 internal constant NOT_ENOUGH_PT_OUT = 5;\\n    uint256 internal constant EXCEEDED_BURNED_PT = 6;\\n    uint256 internal constant SIGNER_CANNOT_BE_NULL_ADDRESS = 7;\\n    uint256 internal constant PERFORMANCE_UPDATE_INTERVAL_TOO_LOW = 8;\\n    uint256 internal constant PERFORMANCE_UPDATE_INTERVAL_TOO_HIGH = 9;\\n    uint256 internal constant MAX_PERFORMANCE_DEV_TOO_LOW = 10;\\n    uint256 internal constant MAX_PERFORMANCE_DEV_TOO_HIGH = 11;\\n    uint256 internal constant MAX_TARGET_DEV_TOO_LOW = 12;\\n    uint256 internal constant MAX_TARGET_DEV_TOO_LARGE = 13;\\n    uint256 internal constant MAX_PRICE_DEV_TOO_LOW = 14;\\n    uint256 internal constant MAX_PRICE_DEV_TOO_LARGE = 15;\\n    uint256 internal constant PERFORMANCE_UPDATE_TOO_SOON = 16;\\n    uint256 internal constant BITMAP_SIGNATURE_NOT_VALID = 17;\\n    uint256 internal constant QUOTE_ALREADY_USED = 18;\\n    uint256 internal constant REPLAYABLE_SIGNATURE_NOT_VALID = 19;\\n    uint256 internal constant QUOTE_BALANCE_NO_LONGER_VALID = 20;\\n    uint256 internal constant WRONG_TOKEN_IN_IN_EXCESS = 21;\\n    uint256 internal constant WRONG_TOKEN_OUT_IN_EXCESS = 22;\\n    uint256 internal constant EXCEEDS_TIMEOUT = 23;\\n    uint256 internal constant NON_POSITIVE_PRICE = 24;\\n    uint256 internal constant FEES_TOO_HIGH = 25;\\n    uint256 internal constant LOW_INITIAL_BALANCE = 26;\\n    uint256 internal constant ORACLE_TIMEOUT_TOO_HIGH = 27;\\n    uint256 internal constant OUTDATED_ORACLE_ROUND_ID = 28;\\n    uint256 internal constant LOW_SWAP_AMOUNT_IN = 29;\\n    uint256 internal constant LOW_SWAP_AMOUNT_OUT = 30;\\n}\\n\\n/**\\n* @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 99 are\\n* supported.\\n*/\\nfunction _srequire(bool condition, uint256 errorCode) pure {\\n    if (!condition) _srevert(errorCode);\\n}\\n\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 99 are supported.\\n */\\nfunction _srevert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert uint256 based on the error code, with the following format:\\n    // 'SWAAP#{errorCode}'\\n    // where the code is left-padded with zeroes to two digits (so they range from 00 to 99).\\n    //\\n    // We don't have revert uint256s embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual uint256 characters.\\n    //\\n    // The dynamic uint256 creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-99\\n        // range, so we only need to convert two digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full uint256. The SWAAP# part is a known constant\\n        // (0x535741415023): we simply shift this by 16 (to provide space for the 2 bytes of the error code), and add\\n        // the characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 192 bits (256 minus the length of the uint256, 8 characters * 8\\n        // bits per character = 64) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(192, add(0x5357414150230000, add(units, shl(8, tenths))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ uint256 location offset ] [ uint256 length ] [ uint256 contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(uint256) function. We\\n        // also write zeroes to the next 29 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the uint256, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The uint256 length is fixed: 8 characters.\\n        mstore(0x24, 8)\\n        // Finally, the uint256 itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the uint256 is only 8 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\"\r\n    },\r\n    \"@swaap-labs/v2-interfaces/contracts/safeguard-pool/ISafeguardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IBasePool.sol\\\";\\nimport \\\"./ISignatureSafeguard.sol\\\";\\n\\ninterface ISafeguardPool is IBasePool, ISignatureSafeguard {\\n\\n    event PegStatesUpdated(bool isPegged0, bool isPegged1);\\n    event FlexibleOracleStatesUpdated(bool isFlexibleOracle0, bool isFlexibleOracle1);\\n    event SignerChanged(address indexed signer);\\n    event MustAllowlistLPsSet(bool mustAllowlistLPs);\\n    event PerfUpdateIntervalChanged(uint256 perfUpdateInterval);\\n    event MaxPerfDevChanged(uint256 maxPerfDev);\\n    event MaxTargetDevChanged(uint256 maxTargetDev);\\n    event MaxPriceDevChanged(uint256 maxPriceDev);\\n    event ManagementFeesUpdated(uint256 yearlyFees);\\n\\n    /// @dev the amountIn and amountOut are denominated in 18-decimals,\\n    /// irrespective of the specific decimal precision utilized by each token.\\n    event Quote(bytes32 indexed digest, uint256 amountIn18Decimals, uint256 amountOut18Decimals);\\n    \\n    /// @dev The target balances are denominated in 18-decimals,\\n    /// irrespective of the specific decimal precision utilized by each token.\\n    event InitialTargetBalancesSet(uint256 targetBalancePerPT0, uint256 targetBalancePerPT1);\\n\\n    /// @param feesClaimed corresponds to the minted pool tokens\\n    /// @param totalSupply corresponds to the total supply before minting the pool tokens\\n    event ManagementFeesClaimed(uint256 feesClaimed, uint256 totalSupply, uint256 yearlyRate, uint256 time);\\n    \\n    /// @dev The target balances are denominated in 18-decimals,\\n    /// irrespective of the specific decimal precision utilized by each token.\\n    event PerformanceUpdated(\\n        uint256 targetBalancePerPT0,\\n        uint256 targetBalancePerPT1,\\n        uint256 performance,\\n        uint256 amount0Per1,\\n        uint256 time\\n    );\\n    \\n    struct InitialSafeguardParams {\\n        address signer; // address that signs the quotes\\n        uint256 maxPerfDev; // maximum performance deviation\\n        uint256 maxTargetDev; // maximum balance deviation from hodl benchmark\\n        uint256 maxPriceDev; // maximum price deviation\\n        uint256 perfUpdateInterval; // performance update interval\\n        uint256 yearlyFees; // management fees in yearly %\\n        bool    mustAllowlistLPs; // must use allowlist flag\\n    }\\n\\n    struct InitialOracleParams {\\n        AggregatorV3Interface oracle;\\n        uint256 maxTimeout;\\n        bool isStable;\\n        bool isFlexibleOracle;\\n    }\\n\\n    struct OracleParams {\\n        AggregatorV3Interface oracle;\\n        uint256 maxTimeout;\\n        bool isStable;\\n        bool isFlexibleOracle;\\n        bool isPegged;\\n        uint256 priceScalingFactor;\\n    }\\n\\n    /*\\n    * Setters\\n    */\\n    \\n    /// @dev sets or removes flexible oracles\\n    function setFlexibleOracleStates(bool isFlexibleOracle0, bool isFlexibleOracle1) external;\\n\\n    /// @dev sets or removes allowlist \\n    function setMustAllowlistLPs(bool mustAllowlistLPs) external;\\n\\n    /// @dev sets the quote signer\\n    function setSigner(address signer) external;\\n\\n    /// @dev sets the performance update interval\\n    function setPerfUpdateInterval(uint256 perfUpdateInterval) external;\\n\\n    /// @dev sets the max performance deviation\\n    function setMaxPerfDev(uint256 maxPerfDev) external;\\n\\n    /// @dev sets the maximum deviation from target balances\\n    function setMaxTargetDev(uint256 maxTargetDev) external;\\n\\n    /// @dev sets the maximum quote price deviation from the oracles\\n    function setMaxPriceDev(uint256 maxPriceDev) external;\\n\\n    /// @dev sets yearly management fees\\n    function setManagementFees(uint256 yearlyFees) external;\\n\\n    /// @dev updates the performance and the hodl balances (should be permissionless)\\n    function updatePerformance() external;\\n\\n    /// @dev unpegs or repegs oracles based on the latest prices (should be permissionless)\\n    function evaluateStablesPegStates() external;\\n\\n    /// @dev claims accumulated management fees (can be permissionless)\\n    function claimManagementFees() external;\\n\\n    /*\\n    * Getters\\n    */\\n\\n    /// @dev returns the current pool's performance\\n    function getPoolPerformance() external view returns(uint256);\\n    \\n    /// @dev returns if the pool \\n    function isAllowlistEnabled() external view returns(bool);\\n    \\n    /// @dev returns the current target balances of the pool based on the hodl strategy and latest performance\\n    function getHodlBalancesPerPT() external view returns(uint256, uint256);\\n    \\n    /// @dev returns the on-chain oracle price of tokenIn such that price = amountIn / amountOut\\n    function getOnChainAmountInPerOut(address tokenIn) external view returns(uint256);\\n    \\n    /// @dev returns the current pool's safeguard parameters\\n    function getPoolParameters() external view returns(\\n        uint256 maxPerfDev,\\n        uint256 maxTargetDev,\\n        uint256 maxPriceDev,\\n        uint256 lastPerfUpdate,\\n        uint256 perfUpdateInterval\\n    );\\n    \\n    /// @dev returns the current pool oracle parameters\\n    function getOracleParams() external view returns(OracleParams[] memory);\\n\\n    /// @dev returns the yearly fees, yearly rate and the latest fee claim time\\n    function getManagementFeesParams() external view returns(uint256, uint256, uint256);\\n\\n}\"\r\n    },\r\n    \"@swaap-labs/v2-interfaces/contracts/safeguard-pool/ISignatureSafeguard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface ISignatureSafeguard {\\n\\n    event AllowlistJoinSignatureValidated(bytes32 indexed digest);\\n\\n    /// @dev returns quote signer's address\\n    function signer() external returns(address); \\n\\n    /// @dev returns the bitmap word value given the word's index (= index / 256)\\n    function getQuoteBitmapWord(uint256 wordIndex) external view returns(uint);\\n}\\n\"\r\n    },\r\n    \"@swaap-labs/v2-interfaces/contracts/safeguard-pool/SafeguardPoolUserData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ISafeguardPool.sol\\\";\\n\\nlibrary SafeguardPoolUserData {\\n    // In order to preserve backwards compatibility, make sure new join and exit kinds are added at the end of the enum.\\n    enum JoinKind { INIT, ALL_TOKENS_IN_FOR_EXACT_BPT_OUT, EXACT_TOKENS_IN_FOR_BPT_OUT }\\n    enum ExitKind { EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT }\\n\\n    uint256 private constant _MASK_128_BITS = 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 private constant _OFFSET_128_BITS = 128;\\n\\n    function joinKind(bytes memory self) internal pure returns (JoinKind) {\\n        return abi.decode(self, (JoinKind));\\n    }\\n\\n    function exitKind(bytes memory self) internal pure returns (ExitKind) {\\n        return abi.decode(self, (ExitKind));\\n    }\\n\\n    // Swaps\\n    \\n    function pricingParameters(bytes memory self) internal pure\\n    returns(\\n        address expectedOrigin,\\n        uint256 originBasedSlippage,\\n        bytes32 priceBasedParams,\\n        bytes32 quoteBalances,\\n        uint256 quoteTotalSupply,\\n        bytes32 balanceBasedParams,\\n        bytes32 timeBasedParams\\n    ) {\\n        return abi.decode(self, (address, uint256, bytes32, bytes32, uint256, bytes32, bytes32));\\n    }\\n\\n    function decodeSignedSwapData(bytes calldata self) internal pure \\n    returns(bytes memory swapData, bytes memory signature, uint256 quoteIndex, uint256 deadline) {\\n        (\\n            swapData,\\n            signature,\\n            quoteIndex,\\n            deadline\\n        ) = abi.decode(self, (bytes, bytes, uint256, uint256));\\n    }\\n\\n    function unpackPairedUints(bytes32 packedUint) internal pure returns(uint256 a, uint256 b) {\\n        assembly{\\n            a := shr(_OFFSET_128_BITS, packedUint)\\n            b := and(_MASK_128_BITS, packedUint)\\n        }\\n    }\\n\\n    // Joins\\n\\n    function allowlistData(bytes memory self) internal pure\\n    returns (uint256 deadline, bytes memory signature, bytes memory joinData) {\\n        (deadline, signature, joinData) = abi.decode(self, (uint256, bytes, bytes));\\n    }\\n\\n    function initJoin(bytes memory self) internal pure returns (JoinKind kind, uint256[] memory amountsIn) {\\n        (kind, amountsIn) = abi.decode(self, (JoinKind, uint256[]));\\n    }\\n\\n    function allTokensInForExactBptOut(bytes memory self) internal pure returns (uint256 bptAmountOut) {\\n        (, bptAmountOut) = abi.decode(self, (JoinKind, uint256));\\n    }\\n\\n    // Exits\\n\\n    function exactBptInForTokensOut(bytes memory self) internal pure returns (uint256 bptAmountIn) {\\n        (, bptAmountIn) = abi.decode(self, (ExitKind, uint256));\\n    }\\n\\n    function decodeSignedExitData(bytes memory self) internal pure \\n    returns(ExitKind kind, uint256 deadline, bytes memory exitData, bytes memory signature){\\n        (\\n            kind,\\n            deadline,\\n            exitData,\\n            signature\\n        ) = abi.decode(self, (ExitKind, uint256, bytes, bytes));\\n    }\\n\\n    // Join/Exit + Swap\\n    function exactJoinExitSwapData(bytes memory self) internal pure \\n    returns (bool swapTokenIn, bytes memory swapData, bytes memory signature, uint256 quoteIndex, uint256 deadline){\\n        (\\n            , // corresponds to join or exit kind\\n            , // minBptAmountOut or maxBptAmountIn\\n            , // join amountsIn or exit amounts Out\\n            swapTokenIn, // excess token in or limit token in\\n            swapData, // swap pricing data\\n            signature, // the signature based on swapData & other quote pricing information\\n            quoteIndex, // the index of the quote\\n            deadline // swap deadline\\n        ) = abi.decode(self, (uint8, uint, uint[], bool, bytes, bytes, uint256, uint256));\\n\\n    }\\n\\n    // Join/Exit + Swap\\n    function exactJoinExitAmountsData(bytes memory self) internal pure \\n    returns (uint256 limitBptAmount, uint256[] memory joinExitAmounts) {\\n        \\n        (\\n            , // corresponds to join or exit kind\\n            limitBptAmount, // minBptAmountOut or maxBptAmountIn\\n            joinExitAmounts // join amountsIn or exit amounts Out\\n        ) = abi.decode(self, (uint8, uint, uint[]));\\n\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/ChainlinkUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\\n// GNU Affero General Public License for more details.\\n\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program. If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\nimport \\\"@swaap-labs/v2-errors/contracts/SwaapV2Errors.sol\\\";\\n\\nlibrary ChainlinkUtils {\\n\\n    function getLatestPrice(AggregatorV3Interface oracle, uint256 maxTimeout) internal view returns (uint256) {\\n        (\\n            uint80 roundId, int256 latestPrice, , uint256 latestTimestamp, uint80 answeredInRound\\n        ) = AggregatorV3Interface(oracle).latestRoundData();\\n        // we assume that block.timestamp >= maxTimeout\\n        _srequire(latestTimestamp >= block.timestamp - maxTimeout, SwaapV2Errors.EXCEEDS_TIMEOUT);\\n        _srequire(latestPrice > 0, SwaapV2Errors.NON_POSITIVE_PRICE);\\n        _srequire(roundId == answeredInRound, SwaapV2Errors.OUTDATED_ORACLE_ROUND_ID);\\n        return uint256(latestPrice);\\n    }\\n\\n    function computePriceScalingFactor(AggregatorV3Interface oracle) internal view returns (uint256) {\\n        // Oracles that don't implement the `decimals` method are not supported.\\n        uint256 oracleDecimals = oracle.decimals();\\n\\n        // Oracles with more than 18 decimals are not supported.\\n        uint256 decimalsDifference = Math.sub(18, oracleDecimals);\\n        return FixedPoint.ONE * 10**decimalsDifference;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/SafeguardMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/SafeCast.sol\\\";\\nimport \\\"@swaap-labs/v2-errors/contracts/SwaapV2Errors.sol\\\";\\n\\nlibrary SafeguardMath {\\n\\n    using FixedPoint for uint256;\\n    using SafeCast for uint256;\\n\\n    uint256 private constant _ONE_YEAR = 365 days;\\n\\n    /**\\n    * @notice slippage based on the lag between quotation and execution time\\n    */\\n    function calcTimeBasedPenalty(\\n        uint256 currentTimestamp,\\n        uint256 startTime,\\n        uint256 timeBasedSlippage\\n    ) internal pure returns(uint256) {\\n\\n        if(currentTimestamp <= startTime) {\\n            return 0;\\n        }\\n\\n        return Math.mul(timeBasedSlippage, (currentTimestamp - startTime));\\n\\n    }\\n\\n    /**\\n    * @notice slippage based on the change of the pool's balance between quotation and execution time\\n    * @param balanceTokenIn actual balance of the token in before the swap\\n    * @param balanceTokenOut actual balance of the token out before the swap\\n    * @param totalSupply total supply of the pool during swap time\\n    * @param quoteBalanceIn expected balance of the token in at the time of the quote\\n    * @param quoteBalanceOut expected balance of the token out at the time of the quote\\n    * @param quoteTotalSupply expected total supply of the pool at the time of the quote\\n    * @param balanceChangeTolerance max percentage change of the pool's balance between quotation and execution\\n    * @param balanceBasedSlippage slope based on the change of the pool's balance between quotation and execution\\n    */\\n    function calcBalanceBasedPenalty(\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut,\\n        uint256 totalSupply,\\n        uint256 quoteBalanceIn,\\n        uint256 quoteBalanceOut,\\n        uint256 quoteTotalSupply,\\n        uint256 balanceChangeTolerance,\\n        uint256 balanceBasedSlippage\\n    ) internal pure returns (uint256) {\\n        \\n        // if the expected balance of the token in is lower than the actual balance, we apply a penalty\\n        uint256 balanceDevIn = Math.max(\\n            calcBalanceDeviation(balanceTokenIn, quoteBalanceIn),\\n            calcBalanceDeviation(balanceTokenIn.divDown(totalSupply), quoteBalanceIn.divDown(quoteTotalSupply))\\n        );\\n\\n        // if the expected balance of the token out is lower than the actual balance, we apply a penalty\\n        uint256 balanceDevOut = Math.max(\\n            calcBalanceDeviation(balanceTokenOut, quoteBalanceOut),\\n            calcBalanceDeviation(balanceTokenOut.divDown(totalSupply), quoteBalanceOut.divDown(quoteTotalSupply))\\n        );\\n\\n        uint256 maxDeviation = Math.max(balanceDevIn, balanceDevOut);\\n\\n        _srequire(maxDeviation <= balanceChangeTolerance, SwaapV2Errors.QUOTE_BALANCE_NO_LONGER_VALID);\\n\\n        return balanceBasedSlippage.mulUp(maxDeviation);\\n    }\\n\\n    function calcBalanceDeviation(uint256 currentBalance, uint256 quoteBalance) internal pure returns(uint256) {\\n        return currentBalance >= quoteBalance ? 0 : (quoteBalance - currentBalance).divDown(quoteBalance);\\n    }\\n\\n    /**\\n    * @notice slippage based on the transaction origin\\n    */\\n    function calcOriginBasedPenalty(\\n        address expectedOrigin,\\n        uint256 originBasedSlippage\\n    ) internal view returns(uint256) {\\n \\n        if(expectedOrigin != tx.origin) {\\n            return originBasedSlippage;\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**********************************************************************************************\\n    // aE = amountIn in excess                                                                   //\\n    // aL = limiting amountIn                                                                    //\\n    // bE = current balance of excess token                  /       aE * bL - aL * bE       \\\\   //\\n    // bL = current balance of limiting token         sIn = | ------------------------------- |  //\\n    // sIn = swap amount in needed before the join           \\\\ bL + aL + (1/p) * ( bE + aE ) /   //\\n    // sOut = swap amount out needed before the join                                             //\\n    // p = relative price such that: sIn = p * sOut                                              //\\n    **********************************************************************************************/\\n    function calcJoinSwapAmounts(\\n        uint256 excessTokenBalance,\\n        uint256 limitTokenBalance,\\n        uint256 excessTokenAmountIn,\\n        uint256 limitTokenAmountIn,\\n        uint256 quoteAmountInPerOut\\n    ) internal pure returns (uint256, uint256) {\\n\\n        uint256 foo = excessTokenAmountIn.mulDown(limitTokenBalance);\\n        uint256 bar = limitTokenAmountIn.mulDown(excessTokenBalance);\\n        _srequire(foo >= bar, SwaapV2Errors.WRONG_TOKEN_IN_IN_EXCESS);\\n        uint256 num = foo - bar;\\n\\n        uint256 denom = limitTokenBalance.add(limitTokenAmountIn);\\n        denom = denom.add((excessTokenBalance.add(excessTokenAmountIn)).divDown(quoteAmountInPerOut));\\n\\n        uint256 swapAmountIn = num.divDown(denom);\\n        uint256 swapAmountOut = swapAmountIn.divDown(quoteAmountInPerOut);\\n\\n        return (swapAmountIn, swapAmountOut);\\n    }\\n\\n    /**********************************************************************************************\\n    // aE = amountIn in excess                                                                   //\\n    // bE = current balance of excess token                        / aE - sIn  \\\\                 //\\n    // sIn = swap amount in needed before the join         rOpt = | ----------- |                //\\n    // rOpt = amountIn TV / current pool TVL                       \\\\ bE + sIn  /                 //\\n    **********************************************************************************************/\\n    function calcJoinSwapROpt(\\n        uint256 excessTokenBalance,\\n        uint256 excessTokenAmountIn,\\n        uint256 swapAmountIn\\n    ) internal pure returns (uint256) {\\n        uint256 num   = excessTokenAmountIn.sub(swapAmountIn);\\n        uint256 denom = excessTokenBalance.add(swapAmountIn);\\n\\n        // removing 1wei from the numerator and adding 1wei to the denominator to make up for rounding errors\\n        // that may have accumulated in previous calculations\\n        return (num.sub(1)).divDown(denom.add(1));\\n    }\\n\\n    /**********************************************************************************************\\n    // aE = amountOut in excess                                                                  //\\n    // aL = limiting amountOut                                                                   //\\n    // bE = current balance of excess token                   /     aE * bL - aL * bE     \\\\      //\\n    // bL = current balance of limiting token         sOut = | --------------------------- |     //\\n    // sIn = swap amount in needed before the exit            \\\\ bL - aL + p * ( bE - aE ) /      //\\n    // sOut = swap amount out needed before the exit                                             //\\n    // p = relative price such that: sIn = p * sOut                                              //\\n    **********************************************************************************************/\\n    function calcExitSwapAmounts(\\n        uint256 excessTokenBalance,\\n        uint256 limitTokenBalance,\\n        uint256 excessTokenAmountOut,\\n        uint256 limitTokenAmountOut,\\n        uint256 quoteAmountInPerOut\\n    ) internal pure returns (uint256, uint256) {\\n\\n        uint256 foo = excessTokenAmountOut.mulDown(limitTokenBalance);\\n        uint256 bar = limitTokenAmountOut.mulDown(excessTokenBalance);\\n        _srequire(foo >= bar, SwaapV2Errors.WRONG_TOKEN_OUT_IN_EXCESS);\\n        uint256 num = foo - bar;\\n\\n        uint256 denom = limitTokenBalance.sub(limitTokenAmountOut);\\n        denom = denom.add((excessTokenBalance.sub(excessTokenAmountOut)).mulDown(quoteAmountInPerOut));\\n\\n        uint256 swapAmountOut = num.divDown(denom);\\n\\n        uint256 swapAmountIn = quoteAmountInPerOut.mulDown(swapAmountOut);\\n\\n        return (swapAmountIn, swapAmountOut);\\n    }\\n\\n    /**********************************************************************************************\\n    // aE = amountOut in excess                                                                  //\\n    // bE = current balance of excess token                        / aE - sOut  \\\\                //\\n    // sOut = swap amount out needed before the exit       rOpt = | ----------- |                //\\n    // rOpt = amountOut TV / current pool TVL                      \\\\ bE - sOut  /                //\\n    **********************************************************************************************/\\n    function calcExitSwapROpt(\\n        uint256 excessTokenBalance,\\n        uint256 excessTokenAmountOut,\\n        uint256 swapAmountOut\\n    ) internal pure returns (uint256) {\\n        uint256 num   = excessTokenAmountOut.sub(swapAmountOut);\\n        uint256 denom = excessTokenBalance.sub(swapAmountOut);\\n        \\n        // adding 1wei to the numerator and removing 1wei from the denominator to make up for rounding errors\\n        // that may have accumulated in previous calculations\\n        return (num.add(1)).divDown(denom.sub(1));\\n    }\\n\\n    /**********************************************************************************************\\n    // f = yearly management fees percentage          /  ln(1 - f) \\\\                             //\\n    // 1y = 1 year                             a = - | ------------ |                            //\\n    // a = yearly rate constant                       \\\\     1y     /                             //\\n    **********************************************************************************************/\\n    function calcYearlyRate(uint256 yearlyFees) internal pure returns(uint256) {\\n        uint256 logInput = FixedPoint.ONE.sub(yearlyFees);\\n        // Since 0 < logInput <= 1 => logResult <= 0\\n        int256 logResult = LogExpMath.ln(int256(logInput));\\n        return(uint256(-logResult) / _ONE_YEAR);\\n    }\\n\\n    /**********************************************************************************************\\n    // bptOut = bpt tokens to be minted as fees                                                  //\\n    // TS = total supply                                   bptOut = TS * (e^(a*dT) -1)           //\\n    // a = yearly rate constant                                                                  //\\n    // dT = elapsed time between the previous and current claim                                  //\\n    **********************************************************************************************/\\n    function calcAccumulatedManagementFees(\\n        uint256 elapsedTime,\\n        uint256 yearlyRate,\\n        uint256 currentSupply\\n     ) internal pure returns(uint256) {\\n        uint256 expInput = Math.mul(yearlyRate, elapsedTime);\\n        uint256 expResult = uint256(LogExpMath.exp(expInput.toInt256()));\\n        return (currentSupply.mulDown(expResult.sub(FixedPoint.ONE)));\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/SafeguardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n/*\\n                                      s\u2588\u2588\u2588\\n                                    \u2588\u2588\u2588\u2588\u2588\u2588\\n                                   @\u2588\u2588\u2588\u2588\u2588\u2588\\n                              ,s\u2588\u2588\u2588`\\n                           ,\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n                          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588^@\u2588\u2588\u2588\u2588\u2588_\\n                         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588_ 7@\u2588\u2588\u2588_            \\\"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588M\\n                        @\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588_     `_              \\\"@\u2588\u2588\u2588\u2588\u2588b\\n                        ^^^^^^^^^^\\\"                         ^\\\"`\\n                         \\n                        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588p   _\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n                        @\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   @\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588WT@\u2588\u2588\u2588\u2588\u2588\u2588b\\n                         \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   @\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  ,\u2588\u2588\u2588\u2588\u2588\u2588\\n                         @\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   @\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588b\\n                          @\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   @\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588b\\n                           \\\"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   @\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588b\\n                             @\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   @\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n                               %\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   @\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588`\\n                                 ^%\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   @\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\\"\\n                                     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   @\u2588\u2588\u2588\u2588\u2588\u2588W\\\"`\\n                                     1\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n                                      \\\"@\u2588\u2588\u2588\u2588\u2588\\n                                         7W@\u2588\\n*/\\n\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ChainlinkUtils.sol\\\";\\nimport \\\"./SafeguardMath.sol\\\";\\nimport \\\"./SignatureSafeguard.sol\\\";\\nimport \\\"@balancer-labs/v2-pool-utils/contracts/BasePool.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IMinimalSwapInfoPool.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"@balancer-labs/v2-pool-utils/contracts/lib/BasePoolMath.sol\\\";\\nimport \\\"@swaap-labs/v2-interfaces/contracts/safeguard-pool/SafeguardPoolUserData.sol\\\";\\nimport \\\"@swaap-labs/v2-interfaces/contracts/safeguard-pool/ISafeguardPool.sol\\\";\\nimport \\\"@swaap-labs/v2-errors/contracts/SwaapV2Errors.sol\\\";\\n\\n/**\\n * @title Safeguard Pool\\n * @author Swaap-labs (https://github.com/swaap-labs/swaap-v2-monorepo)\\n * @notice Main contract that allows the use of a non-custodial RfQ market-making infrastructure that\\n * implements safety measures (i.e \\\"safeguards\\\") to prevent potential value extraction from the pool.\\n * For more details: https://www.swaap.finance/v2-whitepaper.pdf.\\n * @dev This contract is built on top of Balancer V2's infrastructure but is meant to be deployed with\\n * a modified version of Balancer V2 Vault. (refer to the comments in the `updatePerformance` function\\n * for more details).\\n */\\ncontract SafeguardPool is ISafeguardPool, SignatureSafeguard, BasePool, IMinimalSwapInfoPool, ReentrancyGuard {\\n\\n    using FixedPoint for uint256;\\n    using WordCodec for bytes32;\\n    using BasePoolUserData for bytes;\\n    using SafeguardPoolUserData for bytes32;\\n    using SafeguardPoolUserData for bytes;\\n\\n    uint256 private constant _NUM_TOKENS = 2;\\n    \\n    // initial BPT minted at the initialization of the pool\\n    uint256 private constant _INITIAL_BPT = 100 ether;\\n    // minimum acceptable balance at the initialization of the pool (balance upscaled to 18 decimals)\\n    uint256 private constant _MIN_INITIAL_BALANCE = 1e8;\\n\\n    // Pool parameters constants\\n    uint256 private constant _MIN_SWAP_AMOUNT_PERCENTAGE = 10e16; // 10% min swap amount\\n    uint256 private constant _MAX_PERFORMANCE_DEVIATION = 95e16; // 5% max tolerance\\n    uint256 private constant _MAX_TARGET_DEVIATION = 80e16; // 20% max tolerance\\n    uint256 private constant _MAX_PRICE_DEVIATION = 97e16; // 3% max tolerance\\n    uint256 private constant _MIN_PERFORMANCE_UPDATE_INTERVAL = 0.5 days;\\n    uint256 private constant _MAX_PERFORMANCE_UPDATE_INTERVAL = 1.5 days;\\n    uint256 private constant _MAX_ORACLE_TIMEOUT = 1.5 days;\\n\\n    // NB Max yearly fee should fit in a 32 bits slot\\n    uint256 private constant _MAX_YEARLY_FEES = 5e16; // corresponds to 5% fees\\n\\n    IERC20 internal immutable _token0;\\n    IERC20 internal immutable _token1;\\n    \\n    AggregatorV3Interface internal immutable _oracle0;\\n    AggregatorV3Interface internal immutable _oracle1;\\n\\n    uint256 internal immutable _maxOracleTimeout0;\\n    uint256 internal immutable _maxOracleTimeout1;\\n\\n    bool internal immutable _isStable0;\\n    bool internal immutable _isStable1;\\n\\n    uint256 internal constant _REPEG_PRICE_BOUND = 0.002e18; // repegs at 0.2%\\n    uint256 internal constant _UNPEG_PRICE_BOUND = 0.005e18; // unpegs at 0.5%\\n\\n    // tokens scale factor\\n    uint256 internal immutable _scaleFactor0;\\n    uint256 internal immutable _scaleFactor1;\\n\\n    // oracle price scale factor\\n    uint256 internal immutable _priceScaleFactor0;\\n    uint256 internal immutable _priceScaleFactor1;\\n\\n    // quote signer\\n    address private _signer;\\n\\n    // Allowlist enabled / disabled\\n    bool private _mustAllowlistLPs;\\n\\n    // Management fees related variables\\n    uint32 private _previousClaimTime;\\n    // NB For a max yearly fee of 10% it is safe to use 32 bits for the yearlyRate.\\n    // For higher fees more bits should be allocated.\\n    uint32 private _yearlyRate;\\n    // yearly management fees\\n    uint64 private _yearlyFees;\\n\\n    // solhint-disable max-line-length\\n    // [ isPegged0 | isPegged1 | flexibleOracle0 | flexibleOracle1 | max performance dev | max hodl dev | max price dev | perf update interval | last perf update ]\\n    // [   1 bit   |   1 bit   |      1 bit      |      1 bit      |       60 bits       |    64 bits   |    64 bits    |        32 bits       |      32 bits     ]\\n    // [ MSB                                                                                                                                                  LSB ]\\n    bytes32 private _packedPoolParams;\\n    // solhint-enable max-line-length\\n\\n    // used to determine if stable coin is holding the peg\\n    uint256 private constant _TOKEN_0_PEGGED_BIT_OFFSET = 255;\\n    uint256 private constant _TOKEN_1_PEGGED_BIT_OFFSET = 254;\\n\\n    // used to determine if the oracle can be pegged to a fixed value\\n    uint256 private constant _FLEXIBLE_ORACLE_0_BIT_OFFSET = 253;\\n    uint256 private constant _FLEXIBLE_ORACLE_1_BIT_OFFSET = 252;\\n\\n    // used to determine if the pool is underperforming compared to the last performance update\\n    uint256 private constant _MAX_PERF_DEV_BIT_OFFSET = 192;\\n    uint256 private constant _MAX_PERF_DEV_BIT_LENGTH = 60;\\n\\n    // used to determine if the pool balances deviated from the hodl reference\\n    uint256 private constant _MAX_TARGET_DEV_BIT_OFFSET = 128;\\n    uint256 private constant _MAX_TARGET_DEV_BIT_LENGTH = 64;\\n\\n    // used to determine if the quote's price is too low compared to the oracle's price\\n    uint256 private constant _MAX_PRICE_DEV_BIT_OFFSET = 64;\\n    uint256 private constant _MAX_PRICE_DEV_BIT_LENGTH = 64;\\n\\n    // used to determine if a performance update is needed before a swap / one-asset-join / one-asset-exit\\n    uint256 private constant _PERF_UPDATE_INTERVAL_BIT_OFFSET = 32;\\n    uint256 private constant _PERF_LAST_UPDATE_BIT_OFFSET = 0;\\n    uint256 private constant _PERF_TIME_BIT_LENGTH = 32;\\n    \\n    // [ min balance 0 per PT | min balance 1 per PT ]\\n    // [       128 bits       |       128 bits       ]\\n    // [ MSB                                     LSB ]\\n    bytes32 private _hodlBalancesPerPT; // benchmark target reserves based on performance\\n\\n    uint256 private constant _HODL_BALANCE_BIT_OFFSET_0 = 128;\\n    uint256 private constant _HODL_BALANCE_BIT_OFFSET_1 = 0;\\n    uint256 private constant _HODL_BALANCE_BIT_LENGTH   = 128;\\n\\n    constructor(\\n        IVault vault,\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers,\\n        uint256 pauseWindowDuration,\\n        uint256 bufferPeriodDuration,\\n        address owner,\\n        InitialOracleParams[] memory oracleParams,\\n        InitialSafeguardParams memory safeguardParameters\\n    )\\n        BasePool(\\n            vault,\\n            IVault.PoolSpecialization.TWO_TOKEN,\\n            name,\\n            symbol,\\n            tokens,\\n            assetManagers,\\n            _getMinSwapFeePercentage(),\\n            pauseWindowDuration,\\n            bufferPeriodDuration,\\n            owner\\n        )\\n    {\\n\\n        InputHelpers.ensureInputLengthMatch(tokens.length, _NUM_TOKENS);\\n        InputHelpers.ensureInputLengthMatch(oracleParams.length, _NUM_TOKENS);\\n\\n        // token related parameters\\n        _token0 = IERC20(address(tokens[0]));\\n        _token1 = IERC20(address(tokens[1]));\\n\\n        _scaleFactor0 = _computeScalingFactor(tokens[0]);\\n        _scaleFactor1 = _computeScalingFactor(tokens[1]);\\n\\n        // oracle related parameters\\n        _oracle0 = oracleParams[0].oracle;\\n        _oracle1 = oracleParams[1].oracle;\\n\\n        // oracles max price timeouts must be lower than 1.5 days\\n        _srequire(\\n            oracleParams[0].maxTimeout <= _MAX_ORACLE_TIMEOUT && oracleParams[1].maxTimeout <= _MAX_ORACLE_TIMEOUT,\\n            SwaapV2Errors.ORACLE_TIMEOUT_TOO_HIGH\\n        );\\n\\n        // setting oracles price max timeouts\\n        _maxOracleTimeout0 = oracleParams[0].maxTimeout;\\n        _maxOracleTimeout1 = oracleParams[1].maxTimeout;\\n\\n        // setting oracles price scale factors\\n        _priceScaleFactor0 = ChainlinkUtils.computePriceScalingFactor(oracleParams[0].oracle);\\n        _priceScaleFactor1 = ChainlinkUtils.computePriceScalingFactor(oracleParams[1].oracle);\\n\\n        _isStable0 = oracleParams[0].isStable;\\n        _isStable1 = oracleParams[1].isStable;\\n\\n        if(oracleParams[0].isStable && oracleParams[0].isFlexibleOracle) {\\n            _packedPoolParams = _packedPoolParams.insertBool(true, _FLEXIBLE_ORACLE_0_BIT_OFFSET);\\n        }\\n\\n        if(oracleParams[1].isStable && oracleParams[1].isFlexibleOracle) {\\n            _packedPoolParams = _packedPoolParams.insertBool(true, _FLEXIBLE_ORACLE_1_BIT_OFFSET);\\n        }\\n\\n        // pool related parameters\\n        _setSigner(safeguardParameters.signer);\\n        _setMaxPerfDev(safeguardParameters.maxPerfDev);\\n        _setMaxTargetDev(safeguardParameters.maxTargetDev);\\n        _setMaxPriceDev(safeguardParameters.maxPriceDev);\\n        _setPerfUpdateInterval(safeguardParameters.perfUpdateInterval);\\n        _previousClaimTime = uint32(block.timestamp); // _previousClaimTime is not updated in _setYearlyRate\\n        _setYearlyRate(safeguardParameters.yearlyFees);\\n        _setMustAllowlistLPs(safeguardParameters.mustAllowlistLPs);\\n\\n    }\\n\\n    function onSwap(\\n        SwapRequest calldata request,\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut\\n    ) external override onlyVault(request.poolId) returns (uint256) {\\n\\n        _beforeSwapJoinExit();\\n\\n        bool isTokenInToken0 = request.tokenIn == _token0;\\n\\n        (bytes memory swapData, bytes32 digest) = _swapSignatureSafeguard(\\n            request.kind,\\n            isTokenInToken0,\\n            request.from,\\n            request.to,\\n            request.userData\\n        );\\n        \\n        (uint256 scalingFactorTokenIn, uint256 scalingFactorTokenOut) = _scalingFactorsInAndOut(isTokenInToken0);\\n\\n        balanceTokenIn = _upscale(balanceTokenIn, scalingFactorTokenIn);\\n        balanceTokenOut = _upscale(balanceTokenOut, scalingFactorTokenOut);\\n\\n        (uint256 quoteAmountInPerOut, uint256 maxSwapAmount) = \\n            _getQuoteAmountInPerOut(swapData, balanceTokenIn, balanceTokenOut);\\n\\n        if (request.kind == IVault.SwapKind.GIVEN_IN) {\\n            uint256 amountIn = request.amount;\\n            return _onSwapGivenIn(\\n                digest,\\n                isTokenInToken0,\\n                balanceTokenIn,\\n                balanceTokenOut,\\n                amountIn,\\n                quoteAmountInPerOut,\\n                maxSwapAmount,\\n                scalingFactorTokenIn,\\n                scalingFactorTokenOut\\n            );\\n        } else {\\n            uint256 amountOut = request.amount;\\n            return _onSwapGivenOut(\\n                digest,\\n                isTokenInToken0,\\n                balanceTokenIn,\\n                balanceTokenOut,\\n                amountOut,\\n                quoteAmountInPerOut,\\n                maxSwapAmount,\\n                scalingFactorTokenIn,\\n                scalingFactorTokenOut\\n            );\\n        }\\n    }\\n\\n    /// @dev amountInPerOut = baseAmountInPerOut * (1 + slippagePenalty)\\n    function _getQuoteAmountInPerOut(\\n        bytes memory swapData,\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut\\n    ) internal view returns (uint256, uint256) {\\n        \\n        (\\n            address expectedOrigin,\\n            uint256 originBasedSlippage,\\n            bytes32 priceBasedParams,\\n            bytes32 quoteBalances,\\n            uint256 quoteTotalSupply,\\n            bytes32 balanceBasedParams,\\n            bytes32 timeBasedParams\\n        ) = swapData.pricingParameters();\\n        \\n        uint256 penalty = _getBalanceBasedPenalty(\\n            balanceTokenIn,\\n            balanceTokenOut,\\n            quoteBalances,\\n            quoteTotalSupply,\\n            balanceBasedParams\\n        );\\n        \\n        penalty = penalty.add(_getTimeBasedPenalty(timeBasedParams));\\n\\n        penalty = penalty.add(SafeguardMath.calcOriginBasedPenalty(expectedOrigin, originBasedSlippage));\\n\\n        (uint256 quoteAmountInPerOut, uint256 maxSwapAmount) = priceBasedParams.unpackPairedUints();\\n\\n        penalty = penalty.add(FixedPoint.ONE);\\n\\n        return (quoteAmountInPerOut.mulUp(penalty), maxSwapAmount);\\n    }\\n\\n    function _getBalanceBasedPenalty(\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut,\\n        bytes32 quoteBalances,\\n        uint256 quoteTotalSupply,\\n        bytes32 balanceBasedParams\\n    ) internal view returns(uint256) \\n    {\\n        (uint256 quoteBalanceIn, uint256 quoteBalanceOut) = quoteBalances.unpackPairedUints();\\n\\n        (uint256 balanceChangeTolerance, uint256 balanceBasedSlippage) \\n            = balanceBasedParams.unpackPairedUints();\\n\\n        return SafeguardMath.calcBalanceBasedPenalty(\\n            balanceTokenIn,\\n            balanceTokenOut,\\n            totalSupply(),\\n            quoteBalanceIn,\\n            quoteBalanceOut,\\n            quoteTotalSupply,\\n            balanceChangeTolerance,\\n            balanceBasedSlippage\\n        );\\n    }\\n\\n    function _getTimeBasedPenalty(bytes32 timeBasedParams) internal view returns(uint256) {\\n        (uint256 startTime, uint256 timeBasedSlippage) = timeBasedParams.unpackPairedUints();\\n        return SafeguardMath.calcTimeBasedPenalty(block.timestamp, startTime, timeBasedSlippage);\\n    }\\n\\n    function _onSwapGivenIn(\\n        bytes32 digest,\\n        bool    isTokenInToken0,\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut,\\n        uint256 amountIn,\\n        uint256 quoteAmountInPerOut,\\n        uint256 maxSwapAmount,\\n        uint256 scalingFactorTokenIn,\\n        uint256 scalingFactorTokenOut\\n    ) internal returns(uint256) {\\n        amountIn = _upscale(amountIn, scalingFactorTokenIn);\\n        uint256 amountOut = amountIn.divDown(quoteAmountInPerOut);\\n\\n        _validateSwap(\\n            digest,\\n            IVault.SwapKind.GIVEN_IN,\\n            isTokenInToken0,\\n            balanceTokenIn,\\n            balanceTokenOut,\\n            amountIn,\\n            amountOut,\\n            quoteAmountInPerOut,\\n            maxSwapAmount\\n        );\\n\\n        return _downscaleDown(amountOut, scalingFactorTokenOut);\\n    }\\n\\n    function _onSwapGivenOut(\\n        bytes32 digest,\\n        bool    isTokenInToken0,\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut,\\n        uint256 amountOut,\\n        uint256 quoteAmountInPerOut,\\n        uint256 maxSwapAmount,\\n        uint256 scalingFactorTokenIn,\\n        uint256 scalingFactorTokenOut\\n    ) internal returns(uint256) {\\n        amountOut = _upscale(amountOut, scalingFactorTokenOut);\\n        uint256 amountIn = amountOut.mulUp(quoteAmountInPerOut);\\n\\n        _validateSwap(\\n            digest,\\n            IVault.SwapKind.GIVEN_OUT,\\n            isTokenInToken0,\\n            balanceTokenIn,\\n            balanceTokenOut,\\n            amountIn,\\n            amountOut,\\n            quoteAmountInPerOut,\\n            maxSwapAmount\\n        );\\n\\n        return _downscaleUp(amountIn, scalingFactorTokenIn);\\n    }\\n\\n    /**\\n    * @dev all the inputs should be normalized to 18 decimals regardless of token decimals\\n    */\\n    function _validateSwap(\\n        bytes32 digest,\\n        IVault.SwapKind kind,\\n        bool    isTokenInToken0,\\n        uint256 balanceTokenIn,\\n        uint256 balanceTokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 quoteAmountInPerOut,\\n        uint256 maxSwapAmount\\n    ) internal {\\n\\n        if(kind == IVault.SwapKind.GIVEN_IN) {\\n            _srequire(amountIn <= maxSwapAmount, SwaapV2Errors.EXCEEDED_SWAP_AMOUNT_IN);\\n            _srequire(amountIn >= maxSwapAmount.mulDown(_MIN_SWAP_AMOUNT_PERCENTAGE), SwaapV2Errors.LOW_SWAP_AMOUNT_IN);\\n        } else {\\n            _srequire(amountOut <= maxSwapAmount, SwaapV2Errors.EXCEEDED_SWAP_AMOUNT_OUT);\\n            _srequire(amountOut >= maxSwapAmount.mulDown(_MIN_SWAP_AMOUNT_PERCENTAGE), SwaapV2Errors.LOW_SWAP_AMOUNT_OUT);\\n        }\\n\\n        bytes32 packedPoolParams = _packedPoolParams;\\n        uint256 onChainAmountInPerOut = _getOnChainAmountInPerOut(packedPoolParams, isTokenInToken0);\\n\\n        _fairPricingSafeguard(quoteAmountInPerOut, onChainAmountInPerOut, packedPoolParams);\\n\\n        uint256 totalSupply = totalSupply();\\n\\n        _updatePerformanceIfDue(\\n            isTokenInToken0,\\n            balanceTokenIn,\\n            balanceTokenOut,\\n            onChainAmountInPerOut,\\n            totalSupply,\\n            packedPoolParams\\n        );\\n\\n        _balancesSafeguard(\\n            isTokenInToken0,\\n            balanceTokenIn.add(amountIn),\\n            balanceTokenOut.sub(amountOut),\\n            onChainAmountInPerOut,\\n            totalSupply,\\n            packedPoolParams\\n        );\\n\\n        Quote(digest, amountIn, amountOut);\\n    }\\n\\n    // ensures that the quote has a fair price compared to the on-chain price\\n    function _fairPricingSafeguard(\\n        uint256 quoteAmountInPerOut,\\n        uint256 onChainAmountInPerOut,\\n        bytes32 packedPoolParams\\n    ) internal pure {\\n        _srequire(quoteAmountInPerOut.divDown(onChainAmountInPerOut) >= _getMaxPriceDev(packedPoolParams), SwaapV2Errors.UNFAIR_PRICE);\\n    }\\n\\n    // updates the pool target balances based on performance if needed\\n    function _updatePerformanceIfDue(\\n        bool    isTokenInToken0,\\n        uint256 currentBalanceIn,\\n        uint256 currentBalanceOut,\\n        uint256 onChainAmountInPerOut,\\n        uint256 totalSupply,\\n        bytes32 packedPoolParams\\n    ) internal {\\n\\n        (uint256 lastPerfUpdate, uint256 perfUpdateInterval) = _getPerformanceTimeParams(packedPoolParams);\\n\\n        // lastPerfUpdate & perfUpdateInterval are stored in 32 bits so they cannot overflow\\n        if(block.timestamp > lastPerfUpdate + perfUpdateInterval){\\n            if(isTokenInToken0){\\n                _updatePerformance(currentBalanceIn, currentBalanceOut, onChainAmountInPerOut, totalSupply);\\n            } else {\\n                _updatePerformance(\\n                    currentBalanceOut,\\n                    currentBalanceIn,\\n                    FixedPoint.ONE.divDown(onChainAmountInPerOut),\\n                    totalSupply\\n                );\\n            }\\n        }\\n    }\\n\\n    function _balancesSafeguard(\\n        bool    isTokenInToken0,\\n        uint256 newBalanceIn,\\n        uint256 newBalanceOut,\\n        uint256 onChainAmountInPerOut,\\n        uint256 totalSupply,\\n        bytes32 packedPoolParams\\n    ) internal view {\\n\\n        (uint256 newBalancePerPTIn, uint256 newBalancePerPTOut, uint256 hodlBalancePerPTIn, uint256 hodlBalancePerPTOut) \\n            = _getBalancesPerPT(isTokenInToken0, newBalanceIn, newBalanceOut, totalSupply);\\n        \\n        // we check for performance only if the pool is not being rebalanced by the current swap\\n        if (newBalancePerPTOut < hodlBalancePerPTOut || newBalancePerPTIn > hodlBalancePerPTIn) {\\n            _srequire(\\n                _getPerfFromBalancesPerPT(\\n                    newBalancePerPTIn,\\n                    newBalancePerPTOut,\\n                    hodlBalancePerPTIn,\\n                    hodlBalancePerPTOut,\\n                    onChainAmountInPerOut\\n                ) >= _getMaxPerfDev(packedPoolParams), \\n                SwaapV2Errors.LOW_PERFORMANCE\\n            );\\n        }\\n\\n        _srequire(\\n            newBalancePerPTOut.divDown(hodlBalancePerPTOut) >= _getMaxTargetDev(packedPoolParams), \\n            SwaapV2Errors.MIN_BALANCE_OUT_NOT_MET\\n        );\\n    }\\n\\n    function _onInitializePool(\\n        bytes32, // poolId,\\n        address sender,\\n        address, // recipient,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData\\n    ) internal override returns (uint256, uint256[] memory) {\\n\\n        if(isAllowlistEnabled()) {\\n            userData = _isLPAllowed(sender, userData);\\n        }\\n\\n        (SafeguardPoolUserData.JoinKind kind, uint256[] memory amountsIn) = userData.initJoin();\\n        \\n        _require(kind == SafeguardPoolUserData.JoinKind.INIT, Errors.UNINITIALIZED);\\n        _require(amountsIn.length == _NUM_TOKENS, Errors.TOKENS_LENGTH_MUST_BE_2);\\n        \\n        _upscaleArray(amountsIn, scalingFactors);\\n\\n        // prevents the pool from being initialized with a low balance (i.e. amountIn = 1 wei)\\n        // which will result in an usuable pool at initialization since hodlBalancePerPT will be equal to 0 \\n        // and targeDeviation = currentBalancePerPT / hodlBalancePerPT (illegal division by 0)\\n        _srequire(\\n            amountsIn[0] >= _MIN_INITIAL_BALANCE && amountsIn[1] >= _MIN_INITIAL_BALANCE,\\n            SwaapV2Errors.LOW_INITIAL_BALANCE\\n        );\\n\\n        // sets initial target balances\\n        uint256 initHodlBalancePerPT0 = amountsIn[0].divDown(_INITIAL_BPT);\\n        uint256 initHodlBalancePerPT1 = amountsIn[1].divDown(_INITIAL_BPT);\\n        _setHodlBalancesPerPT(initHodlBalancePerPT0, initHodlBalancePerPT1);\\n\\n        emit InitialTargetBalancesSet(initHodlBalancePerPT0, initHodlBalancePerPT1);\\n        \\n        return (_INITIAL_BPT, amountsIn);\\n        \\n    }\\n\\n    function _onJoinPool(\\n        bytes32, // poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256, // lastChangeBlock,\\n        uint256, // protocolSwapFeePercentage,\\n        uint256[] memory, // scalingFactors,\\n        bytes memory userData\\n    ) internal override returns (uint256 bptAmountOut, uint256[] memory amountsIn) {\\n\\n        _beforeJoinExit();\\n\\n        if(isAllowlistEnabled()) {\\n            userData = _isLPAllowed(sender, userData);\\n        }\\n\\n        SafeguardPoolUserData.JoinKind kind = userData.joinKind();\\n\\n        if(kind == SafeguardPoolUserData.JoinKind.ALL_TOKENS_IN_FOR_EXACT_BPT_OUT) {\\n\\n            return _joinAllTokensInForExactBPTOut(balances, totalSupply(), userData);\\n\\n        } else if (kind == SafeguardPoolUserData.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {\\n\\n            return _joinExactTokensInForBPTOut(sender, recipient, balances, userData);\\n\\n        } else {\\n            _revert(Errors.UNHANDLED_JOIN_KIND);\\n        }\\n    }\\n\\n    function _isLPAllowed(address sender, bytes memory userData) internal returns(bytes memory) {\\n        // we subtiture userData by the joinData\\n        return _validateAllowlistSignature(sender, userData);\\n    }\\n\\n    function _joinAllTokensInForExactBPTOut(\\n        uint256[] memory balances,\\n        uint256 totalSupply,\\n        bytes memory userData\\n    ) private  pure returns (uint256, uint256[] memory) {\\n              \\n        uint256 bptAmountOut = userData.allTokensInForExactBptOut();\\n        // Note that there is no maximum amountsIn parameter: this is handled by `IVault.joinPool`.\\n\\n        uint256[] memory amountsIn = BasePoolMath.computeProportionalAmountsIn(balances, totalSupply, bptAmountOut);\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    function _joinExactTokensInForBPTOut(\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        bytes memory userData\\n    ) internal returns (uint256, uint256[] memory) {\\n\\n        (\\n            uint256 minBptAmountOut,\\n            uint256[] memory joinAmounts,\\n            bool isExcessToken0,\\n            ValidatedQuoteData memory validatedQuoteData\\n        ) = _joinExitSwapSignatureSafeguard(sender, recipient, userData);\\n\\n        (uint256 excessTokenBalance, uint256 limitTokenBalance) = isExcessToken0?\\n            (balances[0], balances[1]) : (balances[1], balances[0]);\\n\\n        (uint256 quoteAmountInPerOut, uint256 maxSwapAmount) = _getQuoteAmountInPerOut(validatedQuoteData.swapData, excessTokenBalance, limitTokenBalance);\\n        \\n        (uint256 excessTokenAmountIn, uint256 limitTokenAmountIn) = isExcessToken0?\\n            (joinAmounts[0], joinAmounts[1]) : (joinAmounts[1], joinAmounts[0]);\\n        \\n        (\\n            uint256 swapAmountIn,\\n            uint256 swapAmountOut\\n        ) = SafeguardMath.calcJoinSwapAmounts(\\n            excessTokenBalance,\\n            limitTokenBalance,\\n            excessTokenAmountIn,\\n            limitTokenAmountIn,\\n            quoteAmountInPerOut\\n        );\\n\\n        _validateSwap(\\n            validatedQuoteData.digest,\\n            IVault.SwapKind.GIVEN_IN,\\n            isExcessToken0,\\n            excessTokenBalance,\\n            limitTokenBalance,\\n            swapAmountIn,\\n            swapAmountOut,\\n            quoteAmountInPerOut,\\n            maxSwapAmount\\n        );\\n\\n        uint256 rOpt = SafeguardMath.calcJoinSwapROpt(excessTokenBalance, excessTokenAmountIn, swapAmountIn);\\n        \\n        uint256 bptAmountOut = totalSupply().mulDown(rOpt);        \\n        _srequire(bptAmountOut >= minBptAmountOut, SwaapV2Errors.NOT_ENOUGH_PT_OUT);\\n        \\n        return (bptAmountOut, joinAmounts);\\n\\n    }\\n\\n    function _doRecoveryModeExit(\\n        uint256[] memory balances,\\n        uint256 totalSupply,\\n        bytes memory userData\\n    ) internal pure override returns (uint256 bptAmountIn, uint256[] memory amountsOut) {\\n        bptAmountIn = userData.recoveryModeExit();\\n        amountsOut = BasePoolMath.computeProportionalAmountsOut(balances, totalSupply, bptAmountIn);\\n    }\\n\\n    function _onExitPool(\\n        bytes32, // poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256, // lastChangeBlock,\\n        uint256, // protocolSwapFeePercentage,\\n        uint256[] memory, // scalingFactors,\\n        bytes memory userData\\n    ) internal override returns (uint256 bptAmountIn, uint256[] memory amountsOut) {\\n\\n        _beforeJoinExit();\\n\\n        (SafeguardPoolUserData.ExitKind kind) = userData.exitKind();\\n\\n        if(kind == SafeguardPoolUserData.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT) {\\n\\n            return _exitExactBPTInForTokensOut(balances, totalSupply(), userData);\\n\\n        } else if (kind == SafeguardPoolUserData.ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT) {\\n            \\n            return _exitBPTInForExactTokensOut(sender, recipient, balances, userData);\\n\\n        } else {\\n            _revert(Errors.UNHANDLED_EXIT_KIND);\\n        }\\n\\n    }\\n\\n    function _exitExactBPTInForTokensOut(\\n        uint256[] memory balances,\\n        uint256 totalSupply,\\n        bytes memory userData\\n    ) private returns (uint256, uint256[] memory) {\\n               \\n        // updates pool performance if necessary\\n        try this.updatePerformance() {} catch {}\\n        \\n        uint256 bptAmountIn = userData.exactBptInForTokensOut();\\n        // Note that there is no minimum amountOut parameter: this is handled by `IVault.exitPool`.\\n\\n        uint256[] memory amountsOut = BasePoolMath.computeProportionalAmountsOut(balances, totalSupply, bptAmountIn);\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    function _exitBPTInForExactTokensOut(\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        bytes memory userData\\n    ) internal returns (uint256, uint256[] memory) {\\n        \\n        (\\n            uint256 maxBptAmountIn,\\n            uint256[] memory exitAmounts,\\n            bool isLimitToken0,\\n            ValidatedQuoteData memory validatedQuoteData\\n        ) = _joinExitSwapSignatureSafeguard(sender, recipient, userData);\\n\\n        (uint256 excessTokenBalance, uint256 limitTokenBalance) = isLimitToken0?\\n            (balances[1], balances[0]) : (balances[0], balances[1]);\\n\\n        (uint256 quoteAmountInPerOut, uint256 maxSwapAmount) = _getQuoteAmountInPerOut(validatedQuoteData.swapData, limitTokenBalance, excessTokenBalance);\\n\\n        (uint256 excessTokenAmountOut, uint256 limitTokenAmountOut) = isLimitToken0?\\n            (exitAmounts[1], exitAmounts[0]) : (exitAmounts[0], exitAmounts[1]);\\n\\n        (\\n            uint256 swapAmountIn,\\n            uint256 swapAmountOut\\n        ) = SafeguardMath.calcExitSwapAmounts(\\n            excessTokenBalance,\\n            limitTokenBalance,\\n            excessTokenAmountOut,\\n            limitTokenAmountOut,\\n            quoteAmountInPerOut\\n        );\\n\\n        _validateSwap(\\n            validatedQuoteData.digest,\\n            IVault.SwapKind.GIVEN_IN,\\n            isLimitToken0,\\n            limitTokenBalance,\\n            excessTokenBalance,\\n            swapAmountIn,\\n            swapAmountOut,\\n            quoteAmountInPerOut,\\n            maxSwapAmount\\n        );\\n\\n        uint256 rOpt = SafeguardMath.calcExitSwapROpt(excessTokenBalance, excessTokenAmountOut, swapAmountOut);\\n                \\n        uint256 bptAmountOut = totalSupply().mulUp(rOpt);\\n        \\n        _srequire(bptAmountOut <= maxBptAmountIn, SwaapV2Errors.EXCEEDED_BURNED_PT);\\n        \\n        return (bptAmountOut, exitAmounts);\\n\\n    }\\n\\n    /**\\n    * Setters\\n    */\\n\\n    /// @inheritdoc ISafeguardPool\\n    function setFlexibleOracleStates(\\n        bool isFlexibleOracle0,\\n        bool isFlexibleOracle1\\n    ) external override authenticate whenNotPaused {\\n       \\n        bytes32 packedPoolParams = _packedPoolParams;\\n\\n        if(_isStable0) {\\n            if(!isFlexibleOracle0) {\\n                // if the oracle is no longer flexible we need to reset the peg state\\n                packedPoolParams = packedPoolParams.insertBool(false, _TOKEN_0_PEGGED_BIT_OFFSET);\\n            }\\n            packedPoolParams = packedPoolParams.insertBool(isFlexibleOracle0, _FLEXIBLE_ORACLE_0_BIT_OFFSET);\\n        }\\n\\n        if(_isStable1) {\\n            if(!isFlexibleOracle1) {\\n                // if the oracle is no longer flexible we need to reset the peg state\\n                packedPoolParams = packedPoolParams.insertBool(false, _TOKEN_1_PEGGED_BIT_OFFSET);\\n            }\\n            packedPoolParams = packedPoolParams.insertBool(isFlexibleOracle1, _FLEXIBLE_ORACLE_1_BIT_OFFSET);\\n        }\\n\\n        _packedPoolParams = packedPoolParams;\\n        // we do not use the inputs of the function because they may not me update the state if the token isn't stable\\n        emit FlexibleOracleStatesUpdated(_isFlexibleOracle0(packedPoolParams), _isFlexibleOracle1(packedPoolParams));\\n    }\\n\\n    /// @inheritdoc ISafeguardPool\\n    function setMustAllowlistLPs(bool mustAllowlistLPs) external override authenticate whenNotPaused {\\n        _setMustAllowlistLPs(mustAllowlistLPs);\\n    }\\n\\n    function _setMustAllowlistLPs(bool mustAllowlistLPs) private {\\n        _mustAllowlistLPs = mustAllowlistLPs;\\n        emit MustAllowlistLPsSet(mustAllowlistLPs);\\n    }\\n\\n    /// @inheritdoc ISafeguardPool\\n    function setSigner(address signer_) external override authenticate whenNotPaused {\\n        _setSigner(signer_);\\n    }\\n\\n    function _setSigner(address signer_) internal {\\n        _srequire(signer_ != address(0), SwaapV2Errors.SIGNER_CANNOT_BE_NULL_ADDRESS);\\n        _signer = signer_;\\n        emit SignerChanged(signer_);\\n    }\\n\\n    /// @inheritdoc ISafeguardPool\\n    function setPerfUpdateInterval(uint256 perfUpdateInterval) external override authenticate whenNotPaused {\\n        _setPerfUpdateInterval(perfUpdateInterval);\\n    }\\n\\n    function _setPerfUpdateInterval(uint256 perfUpdateInterval) internal {\\n\\n        _srequire(perfUpdateInterval >= _MIN_PERFORMANCE_UPDATE_INTERVAL, SwaapV2Errors.PERFORMANCE_UPDATE_INTERVAL_TOO_LOW);\\n        _srequire(perfUpdateInterval <= _MAX_PERFORMANCE_UPDATE_INTERVAL, SwaapV2Errors.PERFORMANCE_UPDATE_INTERVAL_TOO_HIGH);\\n\\n        _packedPoolParams = _packedPoolParams.insertUint(\\n            perfUpdateInterval,\\n            _PERF_UPDATE_INTERVAL_BIT_OFFSET,\\n            _PERF_TIME_BIT_LENGTH\\n        );\\n\\n        emit PerfUpdateIntervalChanged(perfUpdateInterval);\\n    }    \\n    \\n    /// @inheritdoc ISafeguardPool\\n    function setMaxPerfDev(uint256 maxPerfDev) external override authenticate whenNotPaused {\\n        _setMaxPerfDev(maxPerfDev);\\n    }\\n\\n    /// @dev for gas optimization purposes we store (1 - max tolerance)\\n    function _setMaxPerfDev(uint256 maxPerfDev) internal {\\n        \\n        // the lower maxPerfDev value is, the less strict the performance check is (more permitted deviation)\\n        _srequire(maxPerfDev <= FixedPoint.ONE, SwaapV2Errors.MAX_PERFORMANCE_DEV_TOO_LOW);\\n        _srequire(maxPerfDev >= _MAX_PERFORMANCE_DEVIATION, SwaapV2Errors.MAX_PERFORMANCE_DEV_TOO_HIGH);\\n        \\n        _packedPoolParams = _packedPoolParams.insertUint(\\n            maxPerfDev,\\n            _MAX_PERF_DEV_BIT_OFFSET,\\n            _MAX_PERF_DEV_BIT_LENGTH\\n        );\\n        emit MaxPerfDevChanged(maxPerfDev);\\n    }\\n\\n    /// @inheritdoc ISafeguardPool\\n    function setMaxTargetDev(uint256 maxTargetDev) external override authenticate whenNotPaused {\\n        _setMaxTargetDev(maxTargetDev);\\n    }\\n    \\n    /// @dev for gas optimization purposes we store (1 - max tolerance)\\n    function _setMaxTargetDev(uint256 maxTargetDev) internal {\\n\\n        // the lower maxTargetDev value is, the less strict the balances check is (more permitted deviation)  \\n        _srequire(maxTargetDev <= FixedPoint.ONE, SwaapV2Errors.MAX_TARGET_DEV_TOO_LOW);\\n        _srequire(maxTargetDev >= _MAX_TARGET_DEVIATION, SwaapV2Errors.MAX_TARGET_DEV_TOO_LARGE);\\n        \\n        _packedPoolParams = _packedPoolParams.insertUint(\\n            maxTargetDev,\\n            _MAX_TARGET_DEV_BIT_OFFSET,\\n            _MAX_TARGET_DEV_BIT_LENGTH\\n        );\\n        emit MaxTargetDevChanged(maxTargetDev);\\n    }\\n\\n    /// @inheritdoc ISafeguardPool\\n    function setMaxPriceDev(uint256 maxPriceDev) external override authenticate whenNotPaused {\\n        _setMaxPriceDev(maxPriceDev);\\n    }\\n\\n    /// @dev for gas optimization purposes we store (1 - max tolerance)\\n    function _setMaxPriceDev(uint256 maxPriceDev) internal {\\n\\n        // the lower maxPriceDev value is, the less strict the price check is (more permitted deviation)  \\n        _srequire(maxPriceDev <= FixedPoint.ONE, SwaapV2Errors.MAX_PRICE_DEV_TOO_LOW);\\n        _srequire(maxPriceDev >= _MAX_PRICE_DEVIATION, SwaapV2Errors.MAX_PRICE_DEV_TOO_LARGE);\\n\\n        _packedPoolParams = _packedPoolParams.insertUint(\\n            maxPriceDev,\\n            _MAX_PRICE_DEV_BIT_OFFSET,\\n            _MAX_PRICE_DEV_BIT_LENGTH\\n        );\\n        emit MaxPriceDevChanged(maxPriceDev);\\n    }\\n\\n    /**\\n     * @dev This function assumes that the pool is deployed with a modified version of the vault\\n     * that addresses a known reentrancy issue described here:\\n     * https://forum.balancer.fi/t/reentrancy-vulnerability-scope-expanded/4345.\\n     * The modified version of the vault is available here:\\n     * https://github.com/swaap-labs/swaap-v2-monorepo/commit/85e0ef66b460995129f196be42762186b3d3727d\\n     * If you're using an old version of the vault, you should add _ensureNotInVaultContext function\\n     * https://github.com/balancer/balancer-v2-monorepo/pull/2418/files\\n     * \\n    */\\n    /// @inheritdoc ISafeguardPool\\n    function updatePerformance() external override nonReentrant whenNotPaused {\\n\\n        bytes32 packedPoolParams = _packedPoolParams;\\n\\n        (uint256 lastPerfUpdate, uint256 perfUpdateInterval) = _getPerformanceTimeParams(packedPoolParams);\\n        \\n        _srequire(block.timestamp > lastPerfUpdate + perfUpdateInterval, SwaapV2Errors.PERFORMANCE_UPDATE_TOO_SOON);\\n\\n        (, uint256[] memory balances, ) = getVault().getPoolTokens(getPoolId());\\n\\n        _upscaleArray(balances, _scalingFactors());\\n\\n        uint256 amount0Per1 = _getOnChainAmountInPerOut(packedPoolParams, true);\\n\\n        _updatePerformance(balances[0], balances[1], amount0Per1, totalSupply()); \\n    }\\n\\n    function _updatePerformance(\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint256 amount0Per1,\\n        uint256 totalSupply\\n    ) private {\\n        \\n        uint256 currentTVLPerPT = (balance0.add(balance1.mulDown(amount0Per1))).divDown(totalSupply);\\n        \\n        (uint256 hodlBalancePerPT0, uint256 hodlBalancePerPT1) = getHodlBalancesPerPT();\\n        \\n        uint256 oldTVLPerPT = hodlBalancePerPT0.add(hodlBalancePerPT1.mulDown(amount0Per1));\\n        \\n        uint256 currentPerformance = currentTVLPerPT.divDown(oldTVLPerPT);\\n\\n        hodlBalancePerPT0 = hodlBalancePerPT0.mulDown(currentPerformance);\\n        hodlBalancePerPT1 = hodlBalancePerPT1.mulDown(currentPerformance);\\n\\n        _setHodlBalancesPerPT(hodlBalancePerPT0, hodlBalancePerPT1);\\n\\n        emit PerformanceUpdated(hodlBalancePerPT0, hodlBalancePerPT1, currentPerformance, amount0Per1, block.timestamp);\\n    }\\n\\n    function _setHodlBalancesPerPT(uint256 hodlBalancePerPT0, uint256 hodlBalancePerPT1) private {\\n        \\n        bytes32 hodlBalancesPerPT = WordCodec.encodeUint(\\n                hodlBalancePerPT0,\\n                _HODL_BALANCE_BIT_OFFSET_0,\\n                _HODL_BALANCE_BIT_LENGTH\\n        );\\n        \\n        hodlBalancesPerPT = hodlBalancesPerPT.insertUint(\\n                hodlBalancePerPT1,\\n                _HODL_BALANCE_BIT_OFFSET_1,\\n                _HODL_BALANCE_BIT_LENGTH\\n        );\\n\\n        _hodlBalancesPerPT = hodlBalancesPerPT;\\n\\n        _packedPoolParams = _packedPoolParams.insertUint(\\n            block.timestamp,\\n            _PERF_LAST_UPDATE_BIT_OFFSET,\\n            _PERF_TIME_BIT_LENGTH\\n        );\\n    }\\n\\n    /// @inheritdoc ISafeguardPool\\n    function evaluateStablesPegStates() external override nonReentrant whenNotPaused {\\n        bytes32 packedPoolParams = _packedPoolParams;\\n        \\n        if(_isStable0 && _isFlexibleOracle0(packedPoolParams)) {\\n            bool newPegState = _canBePegged(_isTokenPegged0(packedPoolParams), _oracle0, _maxOracleTimeout0, _priceScaleFactor0);\\n            packedPoolParams = packedPoolParams.insertBool(newPegState, _TOKEN_0_PEGGED_BIT_OFFSET);\\n        }\\n        \\n        if(_isStable1 && _isFlexibleOracle1(packedPoolParams)) {\\n            bool newPegState = _canBePegged(_isTokenPegged1(packedPoolParams), _oracle1, _maxOracleTimeout1, _priceScaleFactor1);\\n            packedPoolParams = packedPoolParams.insertBool(newPegState, _TOKEN_1_PEGGED_BIT_OFFSET);\\n        }\\n\\n        _packedPoolParams = packedPoolParams;\\n        emit PegStatesUpdated(_isTokenPegged0(packedPoolParams), _isTokenPegged1(packedPoolParams));\\n    }\\n\\n    /**\\n    * Getters\\n    */\\n\\n    /// @inheritdoc ISafeguardPool\\n    function getPoolPerformance() external view override returns(uint256 performance){\\n        (, uint256[] memory balances, ) = getVault().getPoolTokens(getPoolId());\\n\\n        _upscaleArray(balances, _scalingFactors());\\n\\n        uint256 onChainAmountInPerOut = _getOnChainAmountInPerOut(_packedPoolParams, true);\\n\\n        performance = _getPerf(true, balances[0], balances[1], onChainAmountInPerOut, totalSupply());\\n    }\\n\\n    function _getPerf(\\n        bool    isTokenInToken0,\\n        uint256 newBalanceIn,\\n        uint256 newBalanceOut,\\n        uint256 onChainAmountInPerOut,\\n        uint256 totalSupply\\n    ) internal view returns (uint256) {\\n        \\n        (uint256 newBalancePerPTIn, uint256 newBalancePerPTOut, uint256 hodlBalancePerPTIn, uint256 hodlBalancePerPTOut) = \\n            _getBalancesPerPT(isTokenInToken0, newBalanceIn, newBalanceOut, totalSupply);\\n        \\n        return _getPerfFromBalancesPerPT(\\n            newBalancePerPTIn,\\n            newBalancePerPTOut,\\n            hodlBalancePerPTIn,\\n            hodlBalancePerPTOut,\\n            onChainAmountInPerOut\\n        );\\n    }\\n\\n    function _getPerfFromBalancesPerPT(\\n        uint256 newBalancePerPTIn,\\n        uint256 newBalancePerPTOut,\\n        uint256 hodlBalancePerPTIn,\\n        uint256 hodlBalancePerPTOut,\\n        uint256 onChainAmountInPerOut\\n    ) internal pure returns (uint256) {\\n\\n        uint256 newTVLPerPT = (newBalancePerPTIn.divDown(onChainAmountInPerOut)).add(newBalancePerPTOut);\\n        uint256 oldTVLPerPT = (hodlBalancePerPTIn.divDown(onChainAmountInPerOut)).add(hodlBalancePerPTOut);\\n\\n        return newTVLPerPT.divDown(oldTVLPerPT);\\n    }\\n\\n    function _getBalancesPerPT(\\n        bool    isTokenInToken0,\\n        uint256 newBalanceIn,\\n        uint256 newBalanceOut,\\n        uint256 totalSupply\\n    ) internal view returns (uint256, uint256, uint256, uint256) {\\n\\n        (uint256 hodlBalancePerPT0, uint256 hodlBalancePerPT1) = getHodlBalancesPerPT();\\n\\n        (uint256 hodlBalancePerPTIn, uint256 hodlBalancePerPTOut) = isTokenInToken0?\\n            (hodlBalancePerPT0, hodlBalancePerPT1) :\\n            (hodlBalancePerPT1, hodlBalancePerPT0); \\n\\n        uint256 newBalancePerPTIn = newBalanceIn.divDown(totalSupply);\\n        uint256 newBalancePerPTOut = newBalanceOut.divDown(totalSupply);\\n\\n        return(newBalancePerPTIn, newBalancePerPTOut, hodlBalancePerPTIn, hodlBalancePerPTOut);\\n    }\\n\\n    function _isTokenPegged0(bytes32 packedPoolParams) internal pure returns(bool){\\n        return packedPoolParams.decodeBool(_TOKEN_0_PEGGED_BIT_OFFSET);\\n    }\\n\\n    function _isTokenPegged1(bytes32 packedPoolParams) internal pure returns(bool){\\n        return packedPoolParams.decodeBool(_TOKEN_1_PEGGED_BIT_OFFSET);\\n    }\\n\\n    /// @inheritdoc ISafeguardPool\\n    function isAllowlistEnabled() public view override returns(bool) {\\n        return _mustAllowlistLPs;\\n    }\\n\\n    /// @inheritdoc ISafeguardPool\\n    function getHodlBalancesPerPT() public view override returns(uint256 hodlBalancePerPT0, uint256 hodlBalancePerPT1) {\\n        \\n        bytes32 hodlBalancesPerPT = _hodlBalancesPerPT;\\n    \\n        hodlBalancePerPT0 = hodlBalancesPerPT.decodeUint(\\n                _HODL_BALANCE_BIT_OFFSET_0,\\n                _HODL_BALANCE_BIT_LENGTH\\n        );\\n        \\n        hodlBalancePerPT1 = hodlBalancesPerPT.decodeUint(\\n                _HODL_BALANCE_BIT_OFFSET_1,\\n                _HODL_BALANCE_BIT_LENGTH\\n        );\\n    \\n    }\\n\\n    /// @inheritdoc ISafeguardPool\\n    function getOnChainAmountInPerOut(address tokenIn) external view override returns(uint256) {\\n        return _getOnChainAmountInPerOut(_packedPoolParams, IERC20(tokenIn) == _token0);\\n    }\\n\\n    /**\\n    * @notice returns the relative price such as: amountIn = relativePrice * amountOut\\n    */\\n    function _getOnChainAmountInPerOut(bytes32 packedPoolParams, bool isTokenInToken0)\\n    internal view returns(uint256) {\\n        \\n        uint256 price0;\\n        \\n        if(_isStable0 && _isFlexibleOracle0(packedPoolParams) && _isTokenPegged0(packedPoolParams)) {\\n            price0 = FixedPoint.ONE;\\n        } else {\\n            price0 = _getPriceFromOracle(_oracle0, _maxOracleTimeout0, _priceScaleFactor0);\\n        }\\n\\n        uint256 price1;\\n        \\n        if(_isStable1 && _isFlexibleOracle1(packedPoolParams) && _isTokenPegged1(packedPoolParams)) {\\n            price1 = FixedPoint.ONE;\\n        } else {\\n            price1 = _getPriceFromOracle(_oracle1, _maxOracleTimeout1, _priceScaleFactor1);\\n        }\\n       \\n        return isTokenInToken0? price1.divDown(price0) : price0.divDown(price1); \\n    }\\n\\n    function _getPriceFromOracle(\\n        AggregatorV3Interface oracle,\\n        uint256 maxTimeout,\\n        uint256 priceScaleFactor\\n    ) internal view returns(uint256){\\n        return  _upscale(ChainlinkUtils.getLatestPrice(oracle, maxTimeout), priceScaleFactor);\\n    }\\n\\n    /// @inheritdoc ISafeguardPool\\n    function getPoolParameters() external view override\\n    returns (\\n        uint256 maxPerfDev,\\n        uint256 maxTargetDev,\\n        uint256 maxPriceDev,\\n        uint256 lastPerfUpdate,\\n        uint256 perfUpdateInterval\\n    ) {\\n\\n        bytes32 packedPoolParams = _packedPoolParams;\\n        \\n        maxPerfDev = _getMaxPerfDev(packedPoolParams);\\n\\n        maxTargetDev = _getMaxTargetDev(packedPoolParams);\\n        \\n        maxPriceDev = _getMaxPriceDev(packedPoolParams);\\n        \\n        (lastPerfUpdate, perfUpdateInterval) = _getPerformanceTimeParams(packedPoolParams);\\n\\n    }\\n\\n    function _isFlexibleOracle0(bytes32 packedPoolParams) internal pure returns(bool) {\\n        return packedPoolParams.decodeBool(_FLEXIBLE_ORACLE_0_BIT_OFFSET);\\n    }\\n    \\n    function _isFlexibleOracle1(bytes32 packedPoolParams) internal pure returns(bool) {\\n        return packedPoolParams.decodeBool(_FLEXIBLE_ORACLE_1_BIT_OFFSET);\\n    }\\n\\n    function _getMaxPerfDev(bytes32 packedPoolParams) internal pure returns (uint256 maxPerfDev) {\\n        maxPerfDev = packedPoolParams.decodeUint(_MAX_PERF_DEV_BIT_OFFSET, _MAX_PERF_DEV_BIT_LENGTH);\\n    }\\n\\n    function _getMaxTargetDev(bytes32 packedPoolParams) internal pure returns (uint256 maxTargetDev) {\\n        maxTargetDev = packedPoolParams.decodeUint(_MAX_TARGET_DEV_BIT_OFFSET, _MAX_TARGET_DEV_BIT_LENGTH);\\n    }\\n\\n    function _getMaxPriceDev(bytes32 packedPoolParams) internal pure returns (uint256 maxPriceDev) {\\n        maxPriceDev = packedPoolParams.decodeUint(_MAX_PRICE_DEV_BIT_OFFSET, _MAX_PRICE_DEV_BIT_LENGTH);\\n    }\\n\\n    function _getPerformanceTimeParams(bytes32 packedPoolParams) internal pure\\n    returns(uint256 lastPerfUpdate, uint256 perfUpdateInterval) {\\n        \\n        lastPerfUpdate = packedPoolParams.decodeUint(_PERF_LAST_UPDATE_BIT_OFFSET, _PERF_TIME_BIT_LENGTH);\\n\\n        perfUpdateInterval = packedPoolParams.decodeUint(_PERF_UPDATE_INTERVAL_BIT_OFFSET, _PERF_TIME_BIT_LENGTH);\\n    }\\n\\n    /// @inheritdoc ISafeguardPool\\n    function getOracleParams() external view override returns(OracleParams[] memory) {\\n        OracleParams[] memory oracleParams = new OracleParams[](2);\\n        bytes32 packedPoolParams = _packedPoolParams;\\n\\n        oracleParams[0] = OracleParams({\\n            oracle: _oracle0,\\n            maxTimeout: _maxOracleTimeout0,\\n            isStable: _isStable0,\\n            isFlexibleOracle: _isFlexibleOracle0(packedPoolParams),\\n            isPegged: _isTokenPegged0(packedPoolParams),\\n            priceScalingFactor: _priceScaleFactor0\\n        });\\n\\n        oracleParams[1] = OracleParams({\\n            oracle: _oracle1,\\n            maxTimeout: _maxOracleTimeout1,\\n            isStable: _isStable1,\\n            isFlexibleOracle: _isFlexibleOracle1(packedPoolParams),\\n            isPegged: _isTokenPegged1(packedPoolParams),\\n            priceScalingFactor: _priceScaleFactor1\\n        });\\n\\n        return oracleParams;\\n    }\\n\\n    function _canBePegged(\\n        bool isTokenPegged,\\n        AggregatorV3Interface oracle,\\n        uint256 maxOracleTimeout,\\n        uint256 priceScaleFactor\\n    ) internal view returns(bool) {\\n\\n        uint256 currentPrice = _getPriceFromOracle(oracle, maxOracleTimeout, priceScaleFactor);\\n        \\n        (uint256 priceMin, uint256 priceMax) = currentPrice < FixedPoint.ONE?\\n            (currentPrice, FixedPoint.ONE) : (FixedPoint.ONE, currentPrice);\\n\\n        uint256 relativePriceDifference = (priceMax - priceMin);\\n\\n        if(!isTokenPegged && relativePriceDifference <= _REPEG_PRICE_BOUND) {\\n            return true; // token should gain back peg \\n        } else if (isTokenPegged && relativePriceDifference >= _UNPEG_PRICE_BOUND) {\\n            return false; // token should be unpegged\\n        }\\n\\n        return isTokenPegged;\\n    }\\n\\n    /// @inheritdoc ISignatureSafeguard\\n    function signer() public view override(ISignatureSafeguard, SignatureSafeguard) returns(address){\\n        return _signer;\\n    }\\n\\n    function _getTotalTokens() internal pure override returns (uint256) {\\n        return _NUM_TOKENS;\\n    }\\n\\n    function _getMaxTokens() internal pure override returns (uint256) {\\n        return _NUM_TOKENS;\\n    }\\n\\n    function _scalingFactors() internal view override returns (uint256[] memory) {\\n        uint256[] memory scalingFactors = new uint256[](_NUM_TOKENS);\\n        scalingFactors[0] = _scaleFactor0;\\n        scalingFactors[1] = _scaleFactor1;\\n        return scalingFactors;\\n    }\\n\\n    function _scalingFactor(IERC20 token) internal view override returns (uint256) {\\n        if (token == _token0) {\\n            return _scaleFactor0;\\n        }\\n        return _scaleFactor1;\\n    }\\n\\n    function _scalingFactorsInAndOut(bool isToken0) internal view returns (uint256, uint256) {\\n        if (isToken0) {\\n            return (_scaleFactor0, _scaleFactor1);\\n        }\\n        return (_scaleFactor1, _scaleFactor0);\\n    }\\n\\n    /**\\n    * @dev Safeguard pool does not support on-chain swap fees. They should be included in the pricing\\n    * of the signed quotes. The following functions are overriden to reduce contract size and disable\\n    * on-chain swap fees.\\n    */\\n\\n    // Safeguard pool does not support on-chain swap fees.\\n    function _setSwapFeePercentage(uint256) internal pure override {\\n        return;\\n    }\\n\\n    // Safeguard pool does not support on-chain swap fees.\\n    function getSwapFeePercentage() public pure override(BasePool, IBasePool) returns (uint256) {\\n        return 0;\\n    }\\n\\n    // Safeguard pool does not support on-chain swap fees.\\n    function _getMinSwapFeePercentage() internal override pure returns (uint256) {\\n        return 0;\\n    }\\n\\n    // Safeguard pool does not support on-chain swap fees.\\n    function _getMaxSwapFeePercentage() internal override pure returns (uint256) {\\n        return 0;\\n    }\\n\\n    /*\\n    * Management fees\\n    */\\n\\n   function _onDisableRecoveryMode() internal override {\\n        // resets last claim time to the current time in order to prevent claiming fees accrued\\n        // when the pool was in recovery mode\\n        _previousClaimTime = uint32(block.timestamp);\\n    }\\n\\n    function _beforeJoinExit() private {\\n        _claimManagementFees();\\n    }\\n\\n    /// @inheritdoc ISafeguardPool\\n    function claimManagementFees() external override whenNotPaused {\\n        _claimManagementFees();\\n    }\\n\\n    function _claimManagementFees() internal {\\n\\n        uint256 currentTime = block.timestamp;\\n        uint256 elapsedTime = currentTime.sub(uint256(_previousClaimTime));\\n        \\n        if(elapsedTime > 0) {\\n            // update last claim time\\n            _previousClaimTime = uint32(currentTime);\\n            uint256 yearlyRate = uint256(_yearlyRate);\\n            uint256 previousTotalSupply = totalSupply();\\n\\n            if(yearlyRate > 0) {\\n                // returns bpt that needs to be minted\\n                uint256 protocolFees = SafeguardMath.calcAccumulatedManagementFees(\\n                    elapsedTime,\\n                    yearlyRate,\\n                    previousTotalSupply\\n                );\\n                \\n                _payProtocolFees(protocolFees);\\n                emit ManagementFeesClaimed(protocolFees, previousTotalSupply, yearlyRate, currentTime);\\n            }\\n        }\\n\\n    }\\n\\n    /// @inheritdoc ISafeguardPool\\n    function setManagementFees(uint256 yearlyFees) external override authenticate whenNotPaused {\\n        _setManagementFees(yearlyFees);\\n    }\\n\\n    function _setManagementFees(uint256 yearlyFees) private {               \\n        // claim previous manag\\n        _claimManagementFees();\\n        \\n        _setYearlyRate(yearlyFees);\\n    }\\n\\n    function _setYearlyRate(uint256 yearlyFees) private {\\n        _srequire(yearlyFees <= _MAX_YEARLY_FEES, SwaapV2Errors.FEES_TOO_HIGH);\\n        _yearlyFees = uint64(yearlyFees);\\n        _yearlyRate = uint32(SafeguardMath.calcYearlyRate(yearlyFees));\\n        emit ManagementFeesUpdated(yearlyFees);\\n    }\\n\\n    /// @inheritdoc ISafeguardPool\\n    function getManagementFeesParams() public view override returns(uint256, uint256, uint256) {\\n        return (_yearlyFees, _yearlyRate, _previousClaimTime);\\n    }\\n}\"\r\n    },\r\n    \"contracts/SignatureSafeguard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity =0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/EOASignaturesValidator.sol\\\";\\nimport \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\nimport \\\"@swaap-labs/v2-interfaces/contracts/safeguard-pool/SafeguardPoolUserData.sol\\\";\\nimport \\\"@swaap-labs/v2-interfaces/contracts/safeguard-pool/ISignatureSafeguard.sol\\\";\\nimport \\\"@swaap-labs/v2-errors/contracts/SwaapV2Errors.sol\\\";\\n\\n/**\\n * @dev Utility for verifying signed quotes and whitelisted lps. This module should only\\n * be used with pools with a fixed two token order that are similar to that in the vault.\\n */\\nabstract contract SignatureSafeguard is EOASignaturesValidator, ISignatureSafeguard {\\n\\n    struct ValidatedQuoteData {\\n        bytes swapData;\\n        bytes32 digest;\\n    }\\n\\n    using SafeguardPoolUserData for bytes;\\n\\n    // solhint-disable max-line-length\\n    bytes32 public constant SWAP_STRUCT_TYPEHASH =\\n        keccak256(\\n            \\\"SwapStruct(uint8 kind,bool isTokenInToken0,address sender,address recipient,bytes swapData,uint256 quoteIndex,uint256 deadline)\\\"\\n        );\\n    // solhint-enable max-line-length\\n\\n    bytes32 public constant ALLOWLIST_STRUCT_TYPEHASH = keccak256(\\\"AllowlistStruct(address sender,uint256 deadline)\\\");\\n\\n    // NB Do not assign a high value (e.g. max(uint256)) or else it will overflow when adding it to the block.timestamp\\n    uint256 private constant _MAX_REMAINING_SIGNATURE_VALIDITY = 5 minutes;\\n\\n    mapping(uint256 => uint256) internal _usedQuoteBitMap;\\n\\n    /**\\n     * @dev The inheriting pool contract must have one and immutable poolId and must\\n     * interact with one and immutable vault's address. Otherwise, it is unsafe to rely solely\\n     * on the pool's address as a domain seperator assuming that a quote is based on the pool's state.\\n     */\\n    function _swapSignatureSafeguard(\\n        IVault.SwapKind kind,\\n        bool isTokenInToken0,\\n        address sender,\\n        address recipient,\\n        bytes calldata userData\\n    ) internal returns (bytes memory, bytes32) {\\n        (bytes memory swapData, bytes memory signature, uint256 quoteIndex, uint256 deadline)\\n           = userData.decodeSignedSwapData();\\n\\n        bytes32 digest = _validateSwapSignature(kind, isTokenInToken0, sender, recipient, swapData, signature, quoteIndex, deadline);\\n\\n        return (swapData, digest);\\n    }\\n\\n    /**\\n     * @dev The inheriting pool contract must have one and immutable poolId and must\\n     * interact with one and immutable vault's address. Otherwise, it is unsafe to rely solely\\n     * on the pool's address as a domain seperator assuming that a quote is based on the pool's state.\\n     */\\n    function _joinExitSwapSignatureSafeguard(\\n        address sender,\\n        address recipient,\\n        bytes memory userData\\n    ) internal returns (uint256, uint256[] memory, bool, ValidatedQuoteData memory) {\\n        \\n        (\\n            bool isTokenInToken0, // excess token in or limit token in\\n            bytes memory swapData,\\n            bytes memory signature,\\n            uint256 quoteIndex,\\n            uint256 deadline // swap deadline\\n        ) = userData.exactJoinExitSwapData();\\n\\n        bytes32 digest = _validateSwapSignature(\\n            IVault.SwapKind.GIVEN_IN, isTokenInToken0, sender, recipient, swapData, signature, quoteIndex, deadline\\n        );\\n\\n        (uint256 limitBptAmountOut, uint256[] memory joinExitAmounts) = userData.exactJoinExitAmountsData();\\n\\n        return (limitBptAmountOut, joinExitAmounts, isTokenInToken0, ValidatedQuoteData(swapData, digest));\\n    }\\n\\n    function _validateSwapSignature(\\n        IVault.SwapKind kind,\\n        bool isTokenInToken0,\\n        address sender,\\n        address recipient,\\n        bytes memory swapData,\\n        bytes memory signature,\\n        uint256 quoteIndex,\\n        uint256 deadline\\n    ) internal returns (bytes32) {\\n        // For a two token pool,we can only include the tokenIn in the signature. For pools that has more than\\n        // two tokens the tokenOut must be specified to ensure the correctness of the trade.\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                SWAP_STRUCT_TYPEHASH, kind, isTokenInToken0, sender, recipient,keccak256(swapData), quoteIndex, deadline\\n            )\\n        );\\n\\n        bytes32 digest = _ensureValidBitmapSignature(\\n            structHash,\\n            signature,\\n            quoteIndex,\\n            deadline\\n        );\\n\\n        return digest;\\n    }\\n\\n    function _ensureValidBitmapSignature(\\n        bytes32 structHash,\\n        bytes memory signature,\\n        uint256 quoteIndex,\\n        uint256 deadline\\n    ) internal returns (bytes32) {\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n        _srequire(_isValidSignature(signer(), digest, signature), SwaapV2Errors.BITMAP_SIGNATURE_NOT_VALID);\\n\\n        // We could check for the deadline & quote index before validating the signature, but this leads to saner\\n        // error processing (as we only care about expired deadlines & quote if the signature is correct) and only\\n        // affects the gas cost of the revert scenario, which will only occur infrequently, if ever.\\n        // The deadline is timestamp-based: it should not be relied upon for sub-minute accuracy.\\n        // solhint-disable-next-line not-rely-on-time\\n        _require(deadline >= block.timestamp, Errors.EXPIRED_SIGNATURE);\\n\\n        _srequire(!_isQuoteUsed(quoteIndex), SwaapV2Errors.QUOTE_ALREADY_USED);\\n        _registerUsedQuote(quoteIndex);\\n\\n        return digest;\\n    }\\n\\n    function _isQuoteUsed(uint256 index) internal view returns (bool) {\\n        uint256 usedQuoteWordIndex = index / 256;\\n        uint256 usedQuoteBitIndex = index % 256;\\n        uint256 usedQuoteWord = _usedQuoteBitMap[usedQuoteWordIndex];\\n        uint256 mask = (1 << usedQuoteBitIndex);\\n        return usedQuoteWord & mask == mask;\\n    }\\n\\n    function _registerUsedQuote(uint256 index) private {\\n        uint256 usedQuoteWordIndex = index / 256;\\n        uint256 usedQuoteBitIndex = index % 256;\\n        _usedQuoteBitMap[usedQuoteWordIndex] = _usedQuoteBitMap[usedQuoteWordIndex] | (1 << usedQuoteBitIndex);\\n    }\\n\\n    function _validateAllowlistSignature(address sender, bytes memory userData) internal returns (bytes memory) {\\n        (uint256 deadline, bytes memory signature, bytes memory joinData) = userData.allowlistData();\\n\\n        bytes32 structHash = keccak256(abi.encode(ALLOWLIST_STRUCT_TYPEHASH, sender, deadline));\\n\\n        bytes32 digest = _ensureValidReplayableSignature(\\n            structHash,\\n            signature,\\n            deadline\\n        );\\n\\n        emit AllowlistJoinSignatureValidated(digest);\\n\\n        return joinData;\\n    }\\n\\n    function _ensureValidReplayableSignature(\\n        bytes32 structHash,\\n        bytes memory signature,\\n        uint256 deadline\\n    ) internal view returns (bytes32) {\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n        _srequire(_isValidSignature(signer(), digest, signature), SwaapV2Errors.REPLAYABLE_SIGNATURE_NOT_VALID);\\n\\n        // We could check for the deadline before validating the signature, but this leads to saner error processing (as\\n        // we only care about expired deadlines if the signature is correct) and only affects the gas cost of the revert\\n        // scenario, which will only occur infrequently, if ever.\\n        // The deadline is timestamp-based: it should not be relied upon for sub-minute accuracy.\\n        // solhint-disable-next-line not-rely-on-time\\n        _require(deadline >= block.timestamp, Errors.EXPIRED_SIGNATURE);\\n        _require(deadline <= block.timestamp + _MAX_REMAINING_SIGNATURE_VALIDITY, Errors.EXPIRED_SIGNATURE);\\n\\n        return digest;\\n    }\\n\\n    /// @inheritdoc ISignatureSafeguard\\n    function getQuoteBitmapWord(uint256 wordIndex) external view override returns(uint){\\n        return _usedQuoteBitMap[wordIndex];\\n    }\\n\\n    /// @inheritdoc ISignatureSafeguard\\n    function signer() public view override virtual returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1400\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeout\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFlexibleOracle\",\"type\":\"bool\"}],\"internalType\":\"struct ISafeguardPool.InitialOracleParams[]\",\"name\":\"oracleParams\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPerfDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTargetDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfUpdateInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yearlyFees\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mustAllowlistLPs\",\"type\":\"bool\"}],\"internalType\":\"struct ISafeguardPool.InitialSafeguardParams\",\"name\":\"safeguardParameters\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"name\":\"AllowlistJoinSignatureValidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFlexibleOracle0\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFlexibleOracle1\",\"type\":\"bool\"}],\"name\":\"FlexibleOracleStatesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetBalancePerPT0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetBalancePerPT1\",\"type\":\"uint256\"}],\"name\":\"InitialTargetBalancesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feesClaimed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yearlyRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ManagementFeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yearlyFees\",\"type\":\"uint256\"}],\"name\":\"ManagementFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPerfDev\",\"type\":\"uint256\"}],\"name\":\"MaxPerfDevChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPriceDev\",\"type\":\"uint256\"}],\"name\":\"MaxPriceDevChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTargetDev\",\"type\":\"uint256\"}],\"name\":\"MaxTargetDevChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mustAllowlistLPs\",\"type\":\"bool\"}],\"name\":\"MustAllowlistLPsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPegged0\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPegged1\",\"type\":\"bool\"}],\"name\":\"PegStatesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"perfUpdateInterval\",\"type\":\"uint256\"}],\"name\":\"PerfUpdateIntervalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetBalancePerPT0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetBalancePerPT1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Per1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PerformanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn18Decimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut18Decimals\",\"type\":\"uint256\"}],\"name\":\"Quote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"RecoveryModeStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALLOWLIST_STRUCT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_STRUCT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimManagementFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evaluateStablesPegStates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHodlBalancesPerPT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hodlBalancePerPT0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hodlBalancePerPT1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManagementFeesParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"}],\"name\":\"getOnChainAmountInPerOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleParams\",\"outputs\":[{\"components\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTimeout\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFlexibleOracle\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPegged\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"priceScalingFactor\",\"type\":\"uint256\"}],\"internalType\":\"struct ISafeguardPool.OracleParams[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPerfDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTargetDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPerfUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perfUpdateInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolPerformance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"performance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeesCollector\",\"outputs\":[{\"internalType\":\"contract IProtocolFeesCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wordIndex\",\"type\":\"uint256\"}],\"name\":\"getQuoteBitmapWord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScalingFactors\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAllowlistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onExitPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onJoinPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IPoolSwapStructs.SwapRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"balanceTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceTokenOut\",\"type\":\"uint256\"}],\"name\":\"onSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryExit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryJoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isFlexibleOracle0\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFlexibleOracle1\",\"type\":\"bool\"}],\"name\":\"setFlexibleOracleStates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yearlyFees\",\"type\":\"uint256\"}],\"name\":\"setManagementFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPerfDev\",\"type\":\"uint256\"}],\"name\":\"setMaxPerfDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPriceDev\",\"type\":\"uint256\"}],\"name\":\"setMaxPriceDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTargetDev\",\"type\":\"uint256\"}],\"name\":\"setMaxTargetDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"mustAllowlistLPs\",\"type\":\"bool\"}],\"name\":\"setMustAllowlistLPs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perfUpdateInterval\",\"type\":\"uint256\"}],\"name\":\"setPerfUpdateInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePerformance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SafeguardPool", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "1400", "ConstructorArguments": "000000000000000000000000d315a9c38ec871068fec378e4ce78af528c7629300000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000163ee34000000000000000000000000000000000000000000000000000000000076a700000000000000000000000000ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1ba1b0000000000000000000000000000000000000000000000000000000000000340000000000000000000000000b48090fb1565bf264982f36a59ed8618f5d5ba360000000000000000000000000000000000000000000000000d529ae9e86000000000000000000000000000000000000000000000000000000bcbce7f1b1500000000000000000000000000000000000000000000000000000dbd2fc137a300000000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019537761617020555344432d574554482053616665677561726400000000000000000000000000000000000000000000000000000000000000000000000000000e732d555344432d574554482d53610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000008fffffd4afb6115b954bd326cbe7b4ba576818f600000000000000000000000000000000000000000000000000000000000153d8000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000000000000000000000000000000000000001518000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}