{"SourceCode": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.10;\n\n\n\n\n\n\n\n\n\n\ncontract MainnetActionsUtilAddresses {\n    address internal constant DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576;\n    address internal constant REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b;\n    address internal constant DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3;\n    address internal constant SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90;\n    address internal constant PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70;\n    address internal constant LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e;\n    address internal constant TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2;\n}\n\n\n\n\n\n\n\ncontract ActionsUtilHelper is MainnetActionsUtilAddresses {\n}\n\n\n\n\n\n\n\ncontract MainnetAuthAddresses {\n    address internal constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;\n    address internal constant DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n    address internal constant ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9; // USED IN ADMIN VAULT CONSTRUCTOR\n    address internal constant PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70;\n    address internal constant MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D;\n}\n\n\n\n\n\n\n\ncontract AuthHelper is MainnetAuthAddresses {\n}\n\n\n\n\n\n\n\n\ncontract AdminVault is AuthHelper {\n    address public owner;\n    address public admin;\n\n    error SenderNotAdmin();\n\n    constructor() {\n        owner = msg.sender;\n        admin = ADMIN_ADDR;\n    }\n\n    /// @notice Admin is able to change owner\n    /// @param _owner Address of new owner\n    function changeOwner(address _owner) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        owner = _owner;\n    }\n\n    /// @notice Admin is able to set new admin\n    /// @param _admin Address of multisig that becomes new admin\n    function changeAdmin(address _admin) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        admin = _admin;\n    }\n\n}\n\n\n\n\n\n\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint256 digits);\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n\n\n\n\nlibrary Address {\n    //insufficient balance\n    error InsufficientBalance(uint256 available, uint256 required);\n    //unable to send value, recipient may have reverted\n    error SendingValueFail();\n    //insufficient balance for call\n    error InsufficientBalanceForCall(uint256 available, uint256 required);\n    //call to non-contract\n    error NonContractCall();\n    \n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        uint256 balance = address(this).balance;\n        if (balance < amount){\n            revert InsufficientBalance(balance, amount);\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!(success)){\n            revert SendingValueFail();\n        }\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        uint256 balance = address(this).balance;\n        if (balance < value){\n            revert InsufficientBalanceForCall(balance, value);\n        }\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        if (!(isContract(target))){\n            revert NonContractCall();\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n\n\n\n\n\n\n\n\n\n\ncontract AdminAuth is AuthHelper {\n    using SafeERC20 for IERC20;\n\n    AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);\n\n    error SenderNotOwner();\n    error SenderNotAdmin();\n\n    modifier onlyOwner() {\n        if (adminVault.owner() != msg.sender){\n            revert SenderNotOwner();\n        }\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (adminVault.admin() != msg.sender){\n            revert SenderNotAdmin();\n        }\n        _;\n    }\n\n    /// @notice withdraw stuck funds\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n            payable(_receiver).transfer(_amount);\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n\n    /// @notice Destroy the contract\n    /// @dev Deprecated method, selfdestruct will soon just send eth\n    function kill() public onlyAdmin {\n        selfdestruct(payable(msg.sender));\n    }\n}\n\n\n\n\n\n\n\n\ncontract DFSRegistry is AdminAuth {\n    error EntryAlreadyExistsError(bytes4);\n    error EntryNonExistentError(bytes4);\n    error EntryNotInChangeError(bytes4);\n    error ChangeNotReadyError(uint256,uint256);\n    error EmptyPrevAddrError(bytes4);\n    error AlreadyInContractChangeError(bytes4);\n    error AlreadyInWaitPeriodChangeError(bytes4);\n\n    event AddNewContract(address,bytes4,address,uint256);\n    event RevertToPreviousAddress(address,bytes4,address,address);\n    event StartContractChange(address,bytes4,address,address);\n    event ApproveContractChange(address,bytes4,address,address);\n    event CancelContractChange(address,bytes4,address,address);\n    event StartWaitPeriodChange(address,bytes4,uint256);\n    event ApproveWaitPeriodChange(address,bytes4,uint256,uint256);\n    event CancelWaitPeriodChange(address,bytes4,uint256,uint256);\n\n    struct Entry {\n        address contractAddr;\n        uint256 waitPeriod;\n        uint256 changeStartTime;\n        bool inContractChange;\n        bool inWaitPeriodChange;\n        bool exists;\n    }\n\n    mapping(bytes4 => Entry) public entries;\n    mapping(bytes4 => address) public previousAddresses;\n\n    mapping(bytes4 => address) public pendingAddresses;\n    mapping(bytes4 => uint256) public pendingWaitTimes;\n\n    /// @notice Given an contract id returns the registered address\n    /// @dev Id is keccak256 of the contract name\n    /// @param _id Id of contract\n    function getAddr(bytes4 _id) public view returns (address) {\n        return entries[_id].contractAddr;\n    }\n\n    /// @notice Helper function to easily query if id is registered\n    /// @param _id Id of contract\n    function isRegistered(bytes4 _id) public view returns (bool) {\n        return entries[_id].exists;\n    }\n\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\n\n    /// @notice Adds a new contract to the registry\n    /// @param _id Id of contract\n    /// @param _contractAddr Address of the contract\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\n    function addNewContract(\n        bytes4 _id,\n        address _contractAddr,\n        uint256 _waitPeriod\n    ) public onlyOwner {\n        if (entries[_id].exists){\n            revert EntryAlreadyExistsError(_id);\n        }\n\n        entries[_id] = Entry({\n            contractAddr: _contractAddr,\n            waitPeriod: _waitPeriod,\n            changeStartTime: 0,\n            inContractChange: false,\n            inWaitPeriodChange: false,\n            exists: true\n        });\n\n        emit AddNewContract(msg.sender, _id, _contractAddr, _waitPeriod);\n    }\n\n    /// @notice Reverts to the previous address immediately\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\n    /// @param _id Id of contract\n    function revertToPreviousAddress(bytes4 _id) public onlyOwner {\n        if (!(entries[_id].exists)){\n            revert EntryNonExistentError(_id);\n        }\n        if (previousAddresses[_id] == address(0)){\n            revert EmptyPrevAddrError(_id);\n        }\n\n        address currentAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = previousAddresses[_id];\n\n        emit RevertToPreviousAddress(msg.sender, _id, currentAddr, previousAddresses[_id]);\n    }\n\n    /// @notice Starts an address change for an existing entry\n    /// @dev Can override a change that is currently in progress\n    /// @param _id Id of contract\n    /// @param _newContractAddr Address of the new contract\n    function startContractChange(bytes4 _id, address _newContractAddr) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (entries[_id].inWaitPeriodChange){\n            revert AlreadyInWaitPeriodChangeError(_id);\n        }\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inContractChange = true;\n\n        pendingAddresses[_id] = _newContractAddr;\n\n        emit StartContractChange(msg.sender, _id, entries[_id].contractAddr, _newContractAddr);\n    }\n\n    /// @notice Changes new contract address, correct time must have passed\n    /// @param _id Id of contract\n    function approveContractChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inContractChange){\n            revert EntryNotInChangeError(_id);\n        }\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){// solhint-disable-line\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\n        }\n\n        address oldContractAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = pendingAddresses[_id];\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingAddresses[_id] = address(0);\n        previousAddresses[_id] = oldContractAddr;\n\n        emit ApproveContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\n    }\n\n    /// @notice Cancel pending change\n    /// @param _id Id of contract\n    function cancelContractChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inContractChange){\n            revert EntryNotInChangeError(_id);\n        }\n\n        address oldContractAddr = pendingAddresses[_id];\n\n        pendingAddresses[_id] = address(0);\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        emit CancelContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\n    }\n\n    /// @notice Starts the change for waitPeriod\n    /// @param _id Id of contract\n    /// @param _newWaitPeriod New wait time\n    function startWaitPeriodChange(bytes4 _id, uint256 _newWaitPeriod) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (entries[_id].inContractChange){\n            revert AlreadyInContractChangeError(_id);\n        }\n\n        pendingWaitTimes[_id] = _newWaitPeriod;\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inWaitPeriodChange = true;\n\n        emit StartWaitPeriodChange(msg.sender, _id, _newWaitPeriod);\n    }\n\n    /// @notice Changes new wait period, correct time must have passed\n    /// @param _id Id of contract\n    function approveWaitPeriodChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inWaitPeriodChange){\n            revert EntryNotInChangeError(_id);\n        }\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){ // solhint-disable-line\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\n        }\n\n        uint256 oldWaitTime = entries[_id].waitPeriod;\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\n        \n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingWaitTimes[_id] = 0;\n\n        emit ApproveWaitPeriodChange(msg.sender, _id, oldWaitTime, entries[_id].waitPeriod);\n    }\n\n    /// @notice Cancel wait period change\n    /// @param _id Id of contract\n    function cancelWaitPeriodChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inWaitPeriodChange){\n            revert EntryNotInChangeError(_id);\n        }\n\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\n\n        pendingWaitTimes[_id] = 0;\n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        emit CancelWaitPeriodChange(msg.sender, _id, oldWaitPeriod, entries[_id].waitPeriod);\n    }\n}\n\n\n\n\n\n\n\nabstract contract DSAuthority {\n    function canCall(\n        address src,\n        address dst,\n        bytes4 sig\n    ) public view virtual returns (bool);\n}\n\n\n\n\n\n\n\ncontract DSAuthEvents {\n    event LogSetAuthority(address indexed authority);\n    event LogSetOwner(address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority public authority;\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_) public auth {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_) public auth {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig), \"Not authorized\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(address(0))) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n\n\n\n\n\n\n\ncontract DSNote {\n    event LogNote(\n        bytes4 indexed sig,\n        address indexed guy,\n        bytes32 indexed foo,\n        bytes32 indexed bar,\n        uint256 wad,\n        bytes fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n\n\n\n\n\n\n\nabstract contract DSProxy is DSAuth, DSNote {\n    DSProxyCache public cache; // global cache for contracts\n\n    constructor(address _cacheAddr) {\n        if (!(setCache(_cacheAddr))){\n            require(isAuthorized(msg.sender, msg.sig), \"Not authorized\");\n        }\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    // use the proxy to execute calldata _data on contract _code\n    function execute(bytes memory _code, bytes memory _data)\n        public\n        payable\n        virtual\n        returns (address target, bytes32 response);\n\n    function execute(address _target, bytes memory _data)\n        public\n        payable\n        virtual\n        returns (bytes32 response);\n\n    //set new cache\n    function setCache(address _cacheAddr) public payable virtual returns (bool);\n}\n\ncontract DSProxyCache {\n    mapping(bytes32 => address) cache;\n\n    function read(bytes memory _code) public view returns (address) {\n        bytes32 hash = keccak256(_code);\n        return cache[hash];\n    }\n\n    function write(bytes memory _code) public returns (address target) {\n        assembly {\n            target := create(0, add(_code, 0x20), mload(_code))\n            switch iszero(extcodesize(target))\n                case 1 {\n                    // throw if contract failed to deploy\n                    revert(0, 0)\n                }\n        }\n        bytes32 hash = keccak256(_code);\n        cache[hash] = target;\n    }\n}\n\n\n\n\n\n\n\ninterface ISafe {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external;\n\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) external payable returns (bool success);\n\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Operation operation\n    ) external returns (bool success);\n\n    function checkSignatures(\n        bytes32 dataHash,\n        bytes memory data,\n        bytes memory signatures\n    ) external view;\n\n    function checkNSignatures(\n        address executor,\n        bytes32 dataHash,\n        bytes memory /* data */,\n        bytes memory signatures,\n        uint256 requiredSignatures\n    ) external view;\n\n    function approveHash(bytes32 hashToApprove) external;\n\n    function domainSeparator() external view returns (bytes32);\n\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) external view returns (bytes32);\n\n    function nonce() external view returns (uint256);\n\n    function setFallbackHandler(address handler) external;\n\n    function getOwners() external view returns (address[] memory);\n\n    function isOwner(address owner) external view returns (bool);\n\n    function getThreshold() external view returns (uint256);\n\n    function enableModule(address module) external;\n\n    function isModuleEnabled(address module) external view returns (bool);\n\n    function disableModule(address prevModule, address module) external;\n\n    function getModulesPaginated(\n        address start,\n        uint256 pageSize\n    ) external view returns (address[] memory array, address next);\n}\n\n\n\n\n\n\n\ninterface IDSProxyFactory {\n    function isProxy(address _proxy) external view returns (bool);\n}\n\n\n\n\n\n\n\ncontract MainnetProxyFactoryAddresses {\n    address internal constant PROXY_FACTORY_ADDR = 0xA26e15C895EFc0616177B7c1e7270A4C7D51C997;\n}\n\n\n\n\n\n\n\ncontract DSProxyFactoryHelper is MainnetProxyFactoryAddresses {\n}\n\n\n\n\n\n\n\n\n\ncontract CheckWalletType is DSProxyFactoryHelper {\n    function isDSProxy(address _proxy) public view returns (bool) {\n        return IDSProxyFactory(PROXY_FACTORY_ADDR).isProxy(_proxy);\n    }\n}\n\n\n\n\n\n\n\ncontract DefisaverLogger {\n    event RecipeEvent(\n        address indexed caller,\n        string indexed logName\n    );\n\n    event ActionDirectEvent(\n        address indexed caller,\n        string indexed logName,\n        bytes data\n    );\n\n    function logRecipeEvent(\n        string memory _logName\n    ) public {\n        emit RecipeEvent(msg.sender, _logName);\n    }\n\n    function logActionDirectEvent(\n        string memory _logName,\n        bytes memory _data\n    ) public {\n        emit ActionDirectEvent(msg.sender, _logName, _data);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nabstract contract ActionBase is AdminAuth, ActionsUtilHelper, CheckWalletType {\n    event ActionEvent(\n        string indexed logName,\n        bytes data\n    );\n\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n\n    DefisaverLogger public constant logger = DefisaverLogger(\n        DFS_LOGGER_ADDR\n    );\n\n    //Wrong sub index value\n    error SubIndexValueError();\n    //Wrong return index value\n    error ReturnIndexValueError();\n\n    /// @dev Subscription params index range [128, 255]\n    uint8 public constant SUB_MIN_INDEX_VALUE = 128;\n    uint8 public constant SUB_MAX_INDEX_VALUE = 255;\n\n    /// @dev Return params index range [1, 127]\n    uint8 public constant RETURN_MIN_INDEX_VALUE = 1;\n    uint8 public constant RETURN_MAX_INDEX_VALUE = 127;\n\n    /// @dev If the input value should not be replaced\n    uint8 public constant NO_PARAM_MAPPING = 0;\n\n    /// @dev We need to parse Flash loan actions in a different way\n    enum ActionType { FL_ACTION, STANDARD_ACTION, FEE_ACTION, CHECK_ACTION, CUSTOM_ACTION }\n\n    /// @notice Parses inputs and runs the implemented action through a user wallet\n    /// @dev Is called by the RecipeExecutor chaining actions together\n    /// @param _callData Array of input values each value encoded as bytes\n    /// @param _subData Array of subscribed vales, replaces input values if specified\n    /// @param _paramMapping Array that specifies how return and subscribed values are mapped in input\n    /// @param _returnValues Returns values from actions before, which can be injected in inputs\n    /// @return Returns a bytes32 value through user wallet, each actions implements what that value is\n    function executeAction(\n        bytes memory _callData,\n        bytes32[] memory _subData,\n        uint8[] memory _paramMapping,\n        bytes32[] memory _returnValues\n    ) public payable virtual returns (bytes32);\n\n    /// @notice Parses inputs and runs the single implemented action through a user wallet\n    /// @dev Used to save gas when executing a single action directly\n    function executeActionDirect(bytes memory _callData) public virtual payable;\n\n    /// @notice Returns the type of action we are implementing\n    function actionType() public pure virtual returns (uint8);\n\n\n    //////////////////////////// HELPER METHODS ////////////////////////////\n\n    /// @notice Given an uint256 input, injects return/sub values if specified\n    /// @param _param The original input value\n    /// @param _mapType Indicated the type of the input in paramMapping\n    /// @param _subData Array of subscription data we can replace the input value with\n    /// @param _returnValues Array of subscription data we can replace the input value with\n    function _parseParamUint(\n        uint _param,\n        uint8 _mapType,\n        bytes32[] memory _subData,\n        bytes32[] memory _returnValues\n    ) internal pure returns (uint) {\n        if (isReplaceable(_mapType)) {\n            if (isReturnInjection(_mapType)) {\n                _param = uint(_returnValues[getReturnIndex(_mapType)]);\n            } else {\n                _param = uint256(_subData[getSubIndex(_mapType)]);\n            }\n        }\n\n        return _param;\n    }\n\n\n    /// @notice Given an addr input, injects return/sub values if specified\n    /// @param _param The original input value\n    /// @param _mapType Indicated the type of the input in paramMapping\n    /// @param _subData Array of subscription data we can replace the input value with\n    /// @param _returnValues Array of subscription data we can replace the input value with\n    function _parseParamAddr(\n        address _param,\n        uint8 _mapType,\n        bytes32[] memory _subData,\n        bytes32[] memory _returnValues\n    ) internal view returns (address) {\n        if (isReplaceable(_mapType)) {\n            if (isReturnInjection(_mapType)) {\n                _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));\n            } else {\n                /// @dev The last two values are specially reserved for proxy addr and owner addr\n                if (_mapType == 254) return address(this); // wallet address\n                if (_mapType == 255) return fetchOwnersOrWallet(); // owner if 1/1 wallet or the wallet itself\n\n                _param = address(uint160(uint256(_subData[getSubIndex(_mapType)])));\n            }\n        }\n\n        return _param;\n    }\n\n    /// @notice Given an bytes32 input, injects return/sub values if specified\n    /// @param _param The original input value\n    /// @param _mapType Indicated the type of the input in paramMapping\n    /// @param _subData Array of subscription data we can replace the input value with\n    /// @param _returnValues Array of subscription data we can replace the input value with\n    function _parseParamABytes32(\n        bytes32 _param,\n        uint8 _mapType,\n        bytes32[] memory _subData,\n        bytes32[] memory _returnValues\n    ) internal pure returns (bytes32) {\n        if (isReplaceable(_mapType)) {\n            if (isReturnInjection(_mapType)) {\n                _param = (_returnValues[getReturnIndex(_mapType)]);\n            } else {\n                _param = _subData[getSubIndex(_mapType)];\n            }\n        }\n\n        return _param;\n    }\n\n    /// @notice Checks if the paramMapping value indicated that we need to inject values\n    /// @param _type Indicated the type of the input\n    function isReplaceable(uint8 _type) internal pure returns (bool) {\n        return _type != NO_PARAM_MAPPING;\n    }\n\n    /// @notice Checks if the paramMapping value is in the return value range\n    /// @param _type Indicated the type of the input\n    function isReturnInjection(uint8 _type) internal pure returns (bool) {\n        return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);\n    }\n\n    /// @notice Transforms the paramMapping value to the index in return array value\n    /// @param _type Indicated the type of the input\n    function getReturnIndex(uint8 _type) internal pure returns (uint8) {\n        if (!(isReturnInjection(_type))){\n            revert SubIndexValueError();\n        }\n\n        return (_type - RETURN_MIN_INDEX_VALUE);\n    }\n\n    /// @notice Transforms the paramMapping value to the index in sub array value\n    /// @param _type Indicated the type of the input\n    function getSubIndex(uint8 _type) internal pure returns (uint8) {\n        if (_type < SUB_MIN_INDEX_VALUE){\n            revert ReturnIndexValueError();\n        }\n        return (_type - SUB_MIN_INDEX_VALUE);\n    }\n\n    function fetchOwnersOrWallet() internal view returns (address) {\n        if (isDSProxy(address(this))) \n            return DSProxy(payable(address(this))).owner();\n\n        // if not DSProxy, we assume we are in context of Safe\n        address[] memory owners = ISafe(address(this)).getOwners();\n        return owners.length == 1 ? owners[0] : address(this);\n    }\n}\n\n\n\n\n\n\ncontract DSMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x + y;\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x - y;\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x * y;\n    }\n\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x / y;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x <= y ? x : y;\n    }\n\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    uint256 constant WAD = 10**18;\n    uint256 constant RAY = 10**27;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\ncontract FeeRecipient is AdminAuth {\n\n    address public wallet;\n\n    constructor(address _newWallet) {\n        wallet = _newWallet;\n    }\n\n    function getFeeAddr() public view returns (address) {\n        return wallet;\n    }\n\n    function changeWalletAddr(address _newWallet) public onlyOwner {\n        wallet = _newWallet;\n    }\n}\n\n\n\n\n\n\n\ninterface ILendingPoolAddressesProviderV2 {\n  event LendingPoolUpdated(address indexed newAddress);\n  event ConfigurationAdminUpdated(address indexed newAddress);\n  event EmergencyAdminUpdated(address indexed newAddress);\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n  event PriceOracleUpdated(address indexed newAddress);\n  event LendingRateOracleUpdated(address indexed newAddress);\n  event ProxyCreated(bytes32 id, address indexed newAddress);\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n  function setAddress(bytes32 id, address newAddress) external;\n\n  function setAddressAsProxy(bytes32 id, address impl) external;\n\n  function getAddress(bytes32 id) external view returns (address);\n\n  function getLendingPool() external view returns (address);\n\n  function setLendingPoolImpl(address pool) external;\n\n  function getLendingPoolConfigurator() external view returns (address);\n\n  function setLendingPoolConfiguratorImpl(address configurator) external;\n\n  function getLendingPoolCollateralManager() external view returns (address);\n\n  function setLendingPoolCollateralManager(address manager) external;\n\n  function getPoolAdmin() external view returns (address);\n\n  function setPoolAdmin(address admin) external;\n\n  function getEmergencyAdmin() external view returns (address);\n\n  function setEmergencyAdmin(address admin) external;\n\n  function getPriceOracle() external view returns (address);\n\n  function setPriceOracle(address priceOracle) external;\n\n  function getLendingRateOracle() external view returns (address);\n\n  function setLendingRateOracle(address lendingRateOracle) external;\n}\n\n\n\n\n\n\n\nabstract contract IPriceOracleGetterAave {\n    function getAssetPrice(address _asset) external virtual view returns (uint256);\n    function getAssetsPrices(address[] calldata _assets) external virtual view returns(uint256[] memory);\n    function getSourceOfAsset(address _asset) external virtual view returns(address);\n    function getFallbackOracle() external virtual view returns(address);\n}\n\n\n\n\n\n\ninterface IAggregatorV3 {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestAnswer() external view returns (uint256);\n\n    function getTimestamp(uint256 _roundId) external view returns (uint256);\n\n    function phaseId() external view returns (uint16);\n\n    function phaseAggregators(uint16 _phaseId) external view returns (address);\n}\n\n\n\n\n\n\ninterface IFeedRegistry {\n  struct Phase {\n    uint16 phaseId;\n    uint80 startingAggregatorRoundId;\n    uint80 endingAggregatorRoundId;\n  }\n\n  event FeedProposed(\n    address indexed asset,\n    address indexed denomination,\n    address indexed proposedAggregator,\n    address currentAggregator,\n    address sender\n  );\n  event FeedConfirmed(\n    address indexed asset,\n    address indexed denomination,\n    address indexed latestAggregator,\n    address previousAggregator,\n    uint16 nextPhaseId,\n    address sender\n  );\n\n  // V3 AggregatorV3Interface\n\n  function decimals(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint256\n    );\n\n  function latestRoundData(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function getRoundData(\n    address base,\n    address quote,\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  // V2 AggregatorInterface\n\n  function latestAnswer(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      int256 answer\n    );\n\n  function latestTimestamp(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint256 timestamp\n    );\n\n  function latestRound(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint256 roundId\n    );\n\n  function getAnswer(\n    address base,\n    address quote,\n    uint256 roundId\n  )\n    external\n    view\n    returns (\n      int256 answer\n    );\n\n  function getTimestamp(\n    address base,\n    address quote,\n    uint256 roundId\n  )\n    external\n    view\n    returns (\n      uint256 timestamp\n    );\n\n\n  function isFeedEnabled(\n    address aggregator\n  )\n    external\n    view\n    returns (\n      bool\n    );\n\n  function getPhase(\n    address base,\n    address quote,\n    uint16 phaseId\n  )\n    external\n    view\n    returns (\n      Phase memory phase\n    );\n\n  // Round helpers\n\n\n  function getPhaseRange(\n    address base,\n    address quote,\n    uint16 phaseId\n  )\n    external\n    view\n    returns (\n      uint80 startingRoundId,\n      uint80 endingRoundId\n    );\n\n  function getPreviousRoundId(\n    address base,\n    address quote,\n    uint80 roundId\n  ) external\n    view\n    returns (\n      uint80 previousRoundId\n    );\n\n  function getNextRoundId(\n    address base,\n    address quote,\n    uint80 roundId\n  ) external\n    view\n    returns (\n      uint80 nextRoundId\n    );\n\n  // Feed management\n\n  function proposeFeed(\n    address base,\n    address quote,\n    address aggregator\n  ) external;\n\n  function confirmFeed(\n    address base,\n    address quote,\n    address aggregator\n  ) external;\n\n  // Proposed aggregator\n\n  function proposedGetRoundData(\n    address base,\n    address quote,\n    uint80 roundId\n  )\n    external\n    view\n    returns (\n      uint80 id,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function proposedLatestRoundData(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint80 id,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  // Phases\n  function getCurrentPhaseId(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint16 currentPhaseId\n    );\n\n    function getFeed(address base, address quote) external view returns (address);\n}\n\n\n\n\n\n\n\n\ninterface IWStEth {\n    function wrap(uint256 _stETHAmount) external returns (uint256);\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\n    function stEthPerToken() external view returns (uint256);\n    function tokensPerStEth() external view returns (uint256);\n}\n\n\n\n\n\n\n\nlibrary Denominations {\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\n\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\n  address public constant USD = address(840);\n  address public constant GBP = address(826);\n  address public constant EUR = address(978);\n  address public constant JPY = address(392);\n  address public constant KRW = address(410);\n  address public constant CNY = address(156);\n  address public constant AUD = address(36);\n  address public constant CAD = address(124);\n  address public constant CHF = address(756);\n  address public constant ARS = address(32);\n  address public constant PHP = address(608);\n  address public constant NZD = address(554);\n  address public constant SGD = address(702);\n  address public constant NGN = address(566);\n  address public constant ZAR = address(710);\n  address public constant RUB = address(643);\n  address public constant INR = address(356);\n  address public constant BRL = address(986);\n}\n\n\n\n\n\n\n\ncontract MainnetUtilAddresses {\n    address internal refillCaller = 0x33fDb79aFB4456B604f376A45A546e7ae700e880;\n    address internal feeAddr = 0x76720aC2574631530eC8163e4085d6F98513fb27;\n\n    address internal constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;\n    address internal constant UNI_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address internal constant MKR_PROXY_REGISTRY = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\n    address internal constant AAVE_MARKET = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\n    address internal constant AAVE_V3_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e;\n    address internal constant SPARK_MARKET = 0x02C3eA4e34C0cBd694D2adFa2c690EECbC1793eE;\n\n    address internal constant DFS_PROXY_REGISTRY_ADDR = 0x29474FdaC7142f9aB7773B8e38264FA15E3805ed;\n\n    address internal constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address internal constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address internal constant WSTETH_ADDR = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\n    address internal constant STETH_ADDR = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\n    address internal constant WBTC_ADDR = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\n    address internal constant CHAINLINK_WBTC_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\n    address internal constant DAI_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\n    address internal constant FEE_RECEIVER_ADMIN_ADDR = 0xA74e9791D7D66c6a14B2C571BdA0F2A1f6D64E06;\n\n    address internal constant UNI_V3_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\n    address internal constant UNI_V3_QUOTER = 0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6;\n\n    address internal constant FEE_RECIPIENT = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A;\n\n    // not needed on mainnet\n    address internal constant DEFAULT_BOT = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    address public constant CHAINLINK_FEED_REGISTRY = 0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf;\n}\n\n\n\n\n\n\n\ncontract UtilHelper is MainnetUtilAddresses{\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TokenPriceHelper is DSMath, UtilHelper {\n    IFeedRegistry public constant feedRegistry = IFeedRegistry(CHAINLINK_FEED_REGISTRY);\n\n    /// @dev Helper function that returns chainlink price data\n    /// @param _inputTokenAddr Token address we are looking the usd price for\n    /// @param _roundId Chainlink roundId, if 0 uses the latest\n    function getRoundInfo(address _inputTokenAddr, uint80 _roundId, IAggregatorV3 aggregator)\n        public\n        view\n        returns (uint256, uint256 updateTimestamp)\n    {\n        int256 price;\n\n        /// @dev Price staleness not checked, the risk has been deemed acceptable\n        if (_roundId == 0) {\n            (, price, , updateTimestamp, ) = aggregator.latestRoundData();\n        } else {\n            (, price, , updateTimestamp, ) = aggregator.getRoundData(_roundId);\n        }\n\n        // no price for wsteth, can calculate from steth\n        if (_inputTokenAddr == WSTETH_ADDR) price = getWStEthPrice(price);\n\n        return (uint256(price), updateTimestamp);\n    }\n\n    /// @dev Helper function that returns chainlink price data\n    /// @param _inputTokenAddr Token address we are looking the usd price for\n    /// @param _roundId Chainlink roundId, if 0 uses the latest\n    function getRoundInfo(address _inputTokenAddr, uint80 _roundId)\n        public\n        view\n        returns (uint256, uint256 updateTimestamp)\n    {\n        address tokenAddr = getAddrForChainlinkOracle(_inputTokenAddr);\n        IAggregatorV3 aggregator = IAggregatorV3(feedRegistry.getFeed(tokenAddr, Denominations.USD));\n\n        return getRoundInfo(_inputTokenAddr, _roundId, aggregator);\n    }\n\n    /// @dev helper function that returns latest token price in USD\n    /// @dev 1. Chainlink USD feed\n    /// @dev 2. Chainlink ETH feed\n    /// @dev 3. Aave feed\n    /// @dev if no price found return 0\n    function getPriceInUSD(address _inputTokenAddr) public view returns (uint256) {\n        address chainlinkTokenAddr = getAddrForChainlinkOracle(_inputTokenAddr);\n\n        int256 price;\n        price = getChainlinkPriceInUSD(chainlinkTokenAddr, true);\n        if (price == 0){\n            price = int256(getAaveTokenPriceInUSD(_inputTokenAddr));\n        }\n        if (price == 0){\n            price = int256(getAaveV3TokenPriceInUSD(_inputTokenAddr));\n        }\n        if (price == 0){\n            price = int256(getSparkTokenPriceInUSD(_inputTokenAddr));\n        }\n        if (price == 0){\n            return 0;\n        }\n\n        if (_inputTokenAddr == WSTETH_ADDR) price = getWStEthPrice(price);\n        if (_inputTokenAddr == WBTC_ADDR) price = getWBtcPrice(price);\n        return uint256(price);\n    }\n\n    /// @dev helper function that returns latest token price in USD\n    /// @dev 1. Chainlink USD feed\n    /// @dev 2. Chainlink ETH feed\n    /// @dev 3. Aave feed\n    /// @dev if no price found return 0\n    /// @dev expect WBTC and WSTETH to have chainlink USD price\n    function getPriceInETH(address _inputTokenAddr) public view returns (uint256) {\n        address chainlinkTokenAddr = getAddrForChainlinkOracle(_inputTokenAddr);\n\n        uint256 chainlinkPriceInUSD = uint256(getChainlinkPriceInUSD(chainlinkTokenAddr, false));\n        if (chainlinkPriceInUSD != 0){\n            uint256 chainlinkETHPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\n            uint256 priceInEth = wdiv(chainlinkPriceInUSD, chainlinkETHPriceInUSD);\n            if (_inputTokenAddr == WSTETH_ADDR) return uint256(getWStEthPrice(int256(priceInEth)));\n            if (_inputTokenAddr == WBTC_ADDR) return uint256(getWBtcPrice(int256(priceInEth)));\n            return priceInEth;\n        }\n\n        uint256 chainlinkPriceInETH = uint256(getChainlinkPriceInETH(chainlinkTokenAddr));\n        if (chainlinkPriceInETH != 0) return chainlinkPriceInETH;\n\n        uint256 aavePriceInETH = getAaveTokenPriceInETH(_inputTokenAddr);\n        if (aavePriceInETH != 0) return aavePriceInETH;\n\n        uint256 aaveV3PriceInETH = getAaveV3TokenPriceInETH(_inputTokenAddr);\n        if (aaveV3PriceInETH != 0) return aaveV3PriceInETH;\n\n        uint256 sparkPriceInETH = getSparkTokenPriceInETH(_inputTokenAddr);\n        if (sparkPriceInETH != 0) return sparkPriceInETH;\n        \n        return 0;\n    }\n\n    /// @dev If there's no USD price feed can fallback to ETH price feed, if there's no USD or ETH price feed return 0\n    function getChainlinkPriceInUSD(address _inputTokenAddr, bool _useFallback) public view returns (int256 chainlinkPriceInUSD) {\n        try feedRegistry.latestRoundData(_inputTokenAddr, Denominations.USD) returns (uint80, int256 answer, uint256, uint256, uint80){\n            chainlinkPriceInUSD = answer;\n        } catch {\n            if (_useFallback){\n                uint256 chainlinkPriceInETH = uint256(getChainlinkPriceInETH(_inputTokenAddr));\n                uint256 chainlinkETHPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\n                chainlinkPriceInUSD = int256(wmul(chainlinkPriceInETH, chainlinkETHPriceInUSD));\n            } else {\n                chainlinkPriceInUSD = 0;\n            }\n        }\n    }\n\n    /// @dev If there's no ETH price feed returns 0\n    function getChainlinkPriceInETH(address _inputTokenAddr) public view returns (int256 chainlinkPriceInETH) {\n        try feedRegistry.latestRoundData(_inputTokenAddr, Denominations.ETH) returns (uint80, int256 answer, uint256, uint256, uint80){\n            chainlinkPriceInETH = answer;\n        } catch {\n            chainlinkPriceInETH = 0;\n        }\n    }\n    \n    /// @dev chainlink uses different addresses for WBTC and ETH\n    /// @dev there is only STETH price feed so we use that for WSTETH and handle later \n    function getAddrForChainlinkOracle(address _inputTokenAddr)\n        public\n        pure\n        returns (address tokenAddrForChainlinkUsage)\n    {\n        if (_inputTokenAddr == WETH_ADDR) {\n            tokenAddrForChainlinkUsage = ETH_ADDR;\n        } else if (_inputTokenAddr == WSTETH_ADDR) {\n            tokenAddrForChainlinkUsage = STETH_ADDR;\n        } else if (_inputTokenAddr == WBTC_ADDR) {\n            tokenAddrForChainlinkUsage = CHAINLINK_WBTC_ADDR;\n        } else {\n            tokenAddrForChainlinkUsage = _inputTokenAddr;\n        }\n    }\n\n    function getWStEthPrice(int256 _stEthPrice) public view returns (int256 wStEthPrice) {\n        wStEthPrice = int256(wmul(uint256(_stEthPrice), IWStEth(WSTETH_ADDR).stEthPerToken()));\n    }\n\n    function getWBtcPrice(int256 _btcPrice) public view returns (int256 wBtcPrice) {\n        (, int256 wBtcPriceToPeg, , , ) = feedRegistry.latestRoundData(WBTC_ADDR, CHAINLINK_WBTC_ADDR);\n        wBtcPrice = (_btcPrice * wBtcPriceToPeg + 1e8 / 2) / 1e8;\n    }\n\n    /// @dev if price isn't found this returns 0\n    function getAaveTokenPriceInETH(address _tokenAddr) public view returns (uint256 price) {\n        address priceOracleAddress = ILendingPoolAddressesProviderV2(AAVE_MARKET).getPriceOracle();\n\n        try IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_tokenAddr) returns (uint256 tokenPrice){\n            price = tokenPrice;\n        } catch {\n            price = 0;\n        }\n    }\n\n    /// @dev if price isn't found this returns 0\n    function getAaveTokenPriceInUSD(address _tokenAddr) public view returns (uint256) {\n        uint256 tokenAavePriceInETH = getAaveTokenPriceInETH(_tokenAddr);\n        uint256 ethPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\n\n        return wmul(tokenAavePriceInETH, ethPriceInUSD);\n    }\n\n    function getAaveV3TokenPriceInUSD(address _tokenAddr) public view returns (uint256 price) {\n        address priceOracleAddress = ILendingPoolAddressesProviderV2(AAVE_V3_MARKET).getPriceOracle();\n\n        try IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_tokenAddr) returns (uint256 tokenPrice) {\n            price = tokenPrice;\n        } catch {\n            price = 0;\n        }\n    }\n\n    /// @dev if price isn't found this returns 0\n    function getAaveV3TokenPriceInETH(address _tokenAddr) public view returns (uint256) {\n        uint256 tokenAavePriceInUSD = getAaveV3TokenPriceInUSD(_tokenAddr);\n        uint256 ethPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\n\n        return wdiv(tokenAavePriceInUSD, ethPriceInUSD);\n    }\n\n    function getSparkTokenPriceInUSD(address _tokenAddr) public view returns (uint256 price) {\n        address priceOracleAddress = ILendingPoolAddressesProviderV2(SPARK_MARKET).getPriceOracle();\n\n        try IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_tokenAddr) returns (uint256 tokenPrice) {\n            price = tokenPrice;\n        } catch {\n            price = 0;\n        }\n    }\n\n    /// @dev if price isn't found this returns 0\n    function getSparkTokenPriceInETH(address _tokenAddr) public view returns (uint256) {\n        uint256 tokenSparkPriceInUSD = getSparkTokenPriceInUSD(_tokenAddr);\n        uint256 ethPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\n\n        return wdiv(tokenSparkPriceInUSD, ethPriceInUSD);\n    }\n}\n\n\n\n\n\n\n\nabstract contract IWETH {\n    function allowance(address, address) public virtual view returns (uint256);\n\n    function balanceOf(address) public virtual view returns (uint256);\n\n    function approve(address, uint256) public virtual;\n\n    function transfer(address, uint256) public virtual returns (bool);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) public virtual returns (bool);\n\n    function deposit() public payable virtual;\n\n    function withdraw(uint256) public virtual;\n}\n\n\n\n\n\n\n\n\nlibrary TokenUtils {\n    using SafeERC20 for IERC20;\n\n    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    /// @dev Only approves the amount if allowance is lower than amount, does not decrease allowance\n    function approveToken(\n        address _tokenAddr,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_tokenAddr == ETH_ADDR) return;\n\n        if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {\n            IERC20(_tokenAddr).safeApprove(_to, _amount);\n        }\n    }\n\n    function pullTokensIfNeeded(\n        address _token,\n        address _from,\n        uint256 _amount\n    ) internal returns (uint256) {\n        // handle max uint amount\n        if (_amount == type(uint256).max) {\n            _amount = getBalance(_token, _from);\n        }\n\n        if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {\n            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\n        }\n\n        return _amount;\n    }\n\n    function withdrawTokens(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        if (_amount == type(uint256).max) {\n            _amount = getBalance(_token, address(this));\n        }\n\n        if (_to != address(0) && _to != address(this) && _amount != 0) {\n            if (_token != ETH_ADDR) {\n                IERC20(_token).safeTransfer(_to, _amount);\n            } else {\n                (bool success, ) = _to.call{value: _amount}(\"\");\n                require(success, \"Eth send fail\");\n            }\n        }\n\n        return _amount;\n    }\n\n    function depositWeth(uint256 _amount) internal {\n        IWETH(WETH_ADDR).deposit{value: _amount}();\n    }\n\n    function withdrawWeth(uint256 _amount) internal {\n        IWETH(WETH_ADDR).withdraw(_amount);\n    }\n\n    function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {\n        if (_tokenAddr == ETH_ADDR) {\n            return _acc.balance;\n        } else {\n            return IERC20(_tokenAddr).balanceOf(_acc);\n        }\n    }\n\n    function getTokenDecimals(address _token) internal view returns (uint256) {\n        if (_token == ETH_ADDR) return 18;\n\n        return IERC20(_token).decimals();\n    }\n}\n\n\n\n\n\n\n\n\n\n\ncontract GasFeeHelper is DSMath, TokenPriceHelper {\n    using TokenUtils for address;\n\n    FeeRecipient public constant feeRecipient = FeeRecipient(FEE_RECIPIENT);\n\n    uint256 public constant SANITY_GAS_PRICE = 1000 gwei;\n\n    /// @dev Divider for input amount, 5 bps\n    uint256 public constant MAX_DFS_FEE = 2000;\n\n    function calcGasCost(uint256 _gasUsed, address _feeToken, uint256 _l1GasCostInEth) public view returns (uint256 txCost) {\n        uint256 gasPrice = tx.gasprice;\n\n        // gas price must be in a reasonable range\n        if (tx.gasprice > SANITY_GAS_PRICE) {\n            gasPrice = SANITY_GAS_PRICE;\n        }\n\n        // can't use more gas than the block gas limit\n        if (_gasUsed > block.gaslimit) {\n            _gasUsed = block.gaslimit;\n        }\n\n        // calc gas used\n        txCost = (_gasUsed * gasPrice) + _l1GasCostInEth;\n\n        // convert to token amount\n        if (_feeToken != TokenUtils.WETH_ADDR) {\n            uint256 price = getPriceInETH(_feeToken);\n            uint256 tokenDecimals = _feeToken.getTokenDecimals();\n\n            require(tokenDecimals <= 18, \"Token decimal too big\");\n\n            if (price > 0) {\n                txCost = wdiv(txCost, uint256(price)) / (10**(18 - tokenDecimals));\n            } else {\n                txCost = 0;\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\ncontract MainnetLlamaLendAddresses {\n    address internal constant BYTES_TRANSIENT_STORAGE = 0xB3FE6f712c8B8c64CD2780ce714A36e7640DDf0f;\n    address internal constant LLAMALEND_FACTORY = 0xeA6876DDE9e3467564acBeE1Ed5bac88783205E0;\n}\n\n\n\n\n\n\nabstract contract IBytesTransientStorage {\n    function setBytesTransiently(bytes calldata) public virtual;\n    function getBytesTransiently() public virtual returns (bytes memory);\n}\n\n\n\n\n\n\n\ninterface IAGG {\n    function rate() external view returns (uint256);\n    function rate(address) external view returns (uint256);\n    function rate0() external view returns (uint256);\n    function target_debt_fraction() external view returns (uint256);\n    function sigma() external view returns (int256);\n    function peg_keepers(uint256) external view returns (address); \n}\n\n\n\n\n\n\ninterface ILLAMMA {\n    function active_band_with_skip() external view returns (int256);\n    function get_sum_xy(address) external view returns (uint256[2] memory);\n    function get_xy(address) external view returns (uint256[][2] memory);\n    function get_p() external view returns (uint256);\n    function read_user_tick_numbers(address) external view returns (int256[2] memory);\n    function p_oracle_up(int256) external view returns (uint256);\n    function p_oracle_down(int256) external view returns (uint256);\n    function p_current_up(int256) external view returns (uint256);\n    function p_current_down(int256) external view returns (uint256);\n    function bands_x(int256) external view returns (uint256);\n    function bands_y(int256) external view returns (uint256);\n    function get_base_price() external view returns (uint256);\n    function price_oracle() external view returns (uint256);\n    function active_band() external view returns (int256);\n    function A() external view returns (uint256);\n    function min_band() external view returns (int256);\n    function max_band() external view returns (int256);\n    function rate() external view returns (uint256);\n    function exchange(uint256 i, uint256 j, uint256 in_amount, uint256 min_amount) external returns (uint256[2] memory);\n    function coins(uint256 i) external view returns (address);\n    function user_state(address _user) external view returns (uint256[4] memory);\n}\n\n\n\n\n\n\ninterface ILlamaLendController {\n    function create_loan(uint256 _collateralAmount, uint256 _debtAmount, uint256 _nBands) external payable;\n    function create_loan_extended(uint256 _collateralAmount, uint256 _debtAmount, uint256 _nBands, address _callbacker, uint256[] memory _callbackArgs) external payable;\n\n    /// @dev all functions below: if _collateralAmount is 0 will just return\n    function add_collateral(uint256 _collateralAmount) external payable;\n    function add_collateral(uint256 _collateralAmount, address _for) external payable;\n\n    function remove_collateral(uint256 _collateralAmount) external;\n    /// @param _useEth relevant only for ETH collateral pools (currently not deployed)\n    function remove_collateral(uint256 _collateralAmount, bool _useEth) external;\n\n    /// @dev all functions below: if _debtAmount is 0 will just return\n    function borrow_more(uint256 _collateralAmount, uint256 _debtAmount) external payable;\n    function borrow_more_extended(uint256 _collateralAmount, uint256 _debt, address _callbacker, uint256[] memory _callbackArgs) external payable;\n\n    /// @dev if _debtAmount > debt will do full repay\n    function repay(uint256 _debtAmount) external payable;\n    function repay(uint256 _debtAmount, address _for) external payable;\n    /// @param _maxActiveBand Don't allow active band to be higher than this (to prevent front-running the repay)\n    function repay(uint256 _debtAmount, address _for, int256 _maxActiveBand) external payable;\n    function repay(uint256 _debtAmount, address _for, int256 _maxActiveBand, bool _useEth) external payable;\n    function repay_extended(address _callbacker, uint256[] memory _callbackArgs) external;\n\n    function liquidate(address user, uint256 min_x) external;\n    function liquidate(address user, uint256 min_x, bool _useEth) external;\n    function liquidate_extended(address user, uint256 min_x, uint256 frac, bool use_eth, address callbacker, uint256[] memory _callbackArgs) external;\n\n\n    /// GETTERS\n    function amm() external view returns (address);\n    function monetary_policy() external view returns (address);\n    function collateral_token() external view returns (address);\n    function borrowed_token() external view returns (address);\n    function debt(address) external view returns (uint256);\n    function total_debt() external view returns (uint256);\n    function health_calculator(address, int256, int256, bool, uint256) external view returns (int256);\n    function health_calculator(address, int256, int256, bool) external view returns (int256);\n    function health(address) external view returns (int256);\n    function health(address, bool) external view returns (int256);\n    function max_borrowable(uint256 collateralAmount, uint256 nBands) external view returns (uint256);\n    function min_collateral(uint256 debtAmount, uint256 nBands) external view returns (uint256);\n    function calculate_debt_n1(uint256, uint256, uint256) external view returns (int256);\n    function minted() external view returns (uint256);\n    function redeemed() external view returns (uint256);\n    function amm_price() external view returns (uint256);\n    function user_state(address) external view returns (uint256[4] memory);\n    function user_prices(address) external view returns (uint256[2] memory);\n    function loan_exists(address) external view returns (bool);\n    function liquidation_discount() external view returns (uint256);\n    function factory() external view returns (address);\n    function loan_discount() external view returns (uint256);\n}\n\n\n\n\n\n\n\ninterface ILlamaLendFactory {\n    function controllers(uint256) external view returns (address);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract LlamaLendHelper is MainnetLlamaLendAddresses, DSMath {\n    using TokenUtils for address;\n\n    error InvalidLlamaLendController();\n\n    IBytesTransientStorage constant transientStorage = IBytesTransientStorage(BYTES_TRANSIENT_STORAGE);\n    ILlamaLendFactory constant factory = ILlamaLendFactory(LLAMALEND_FACTORY);\n\n    bytes4 constant LLAMALEND_SWAPPER_ID = bytes4(keccak256(\"LlamaLendSwapper\"));\n\n    function isControllerValid(address _controllerAddr, uint256 _controllerId) public view returns (bool) {\n        return (factory.controllers(_controllerId) == _controllerAddr);\n    }\n\n    function getCollateralRatio(address _user, address _controllerAddr) public view returns (uint256 collRatio, bool isInSoftLiquidation) {\n        // fetch users debt\n        uint256 debt = ILlamaLendController(_controllerAddr).debt(_user);\n        // no position can exist without debt\n        if (debt == 0) return (0, false);\n        (uint256 debtAssetCollAmount, uint256 collAmount) = getCollAmountsFromAMM(_controllerAddr, _user);\n        // if user has debt asset as coll he is currently underwater\n        if (debtAssetCollAmount > 0) isInSoftLiquidation = true;\n\n        // fetch collToken oracle price\n        address amm = ILlamaLendController(_controllerAddr).amm();\n        uint256 oraclePrice = ILLAMMA(amm).price_oracle();\n        // calculate collAmount as WAD (18 decimals)\n        address collToken = ILlamaLendController(_controllerAddr).collateral_token();\n        uint256 assetDec = IERC20(collToken).decimals();\n        uint256 collAmountWAD = assetDec > 18 ? (collAmount / 10 ** (assetDec - 18)) : (collAmount * 10 ** (18 - assetDec));\n        \n        collRatio = wdiv(wmul(collAmountWAD, oraclePrice) + debtAssetCollAmount, debt);\n    }\n\n    function _sendLeftoverFunds(\n        address _collToken,\n        address _debtToken,\n        uint256 _collStartingBalance,\n        uint256 _debtStartingBalance,\n        address _to\n    ) internal returns (uint256 collTokenReceived, uint256 debtTokenReceived) {\n        collTokenReceived = _collToken.getBalance(address(this)) - _collStartingBalance;\n        debtTokenReceived = _debtToken.getBalance(address(this)) - _debtStartingBalance;\n        _collToken.withdrawTokens(_to, collTokenReceived);\n        _debtToken.withdrawTokens(_to, debtTokenReceived);\n    }\n\n    function userMaxWithdraw(\n        address _controllerAddress,\n        address _user\n    ) public view returns (uint256 maxWithdraw) {\n        uint256[4] memory userState = ILlamaLendController(_controllerAddress).user_state(_user);\n        return\n            userState[0] -\n            ILlamaLendController(_controllerAddress).min_collateral(userState[2], userState[3]);\n    }\n\n    function getCollAmountsFromAMM(\n        address _controllerAddress,\n        address _user\n    ) public view returns (uint256 debtAssetCollAmount, uint256 collAssetCollAmount) {\n        address llammaAddress = ILlamaLendController(_controllerAddress).amm();\n        uint256[2] memory xy = ILLAMMA(llammaAddress).get_sum_xy(_user);\n        debtAssetCollAmount = xy[0];\n        collAssetCollAmount = xy[1];\n    }\n}\n\n\n\n\n\n\ncontract DFSExchangeData {\n\n    struct OffchainData {\n        address wrapper; // dfs wrapper address for the aggregator (must be in WrapperExchangeRegistry)\n        address exchangeAddr; // exchange address we are calling to execute the order (must be in ExchangeAggregatorRegistry)\n        address allowanceTarget; // exchange aggregator contract we give allowance to\n        uint256 price; // expected price that the aggregator sent us\n        uint256 protocolFee; // deprecated (used as a separate fee amount for 0x v1)\n        bytes callData; // 0ff-chain calldata the aggregator gives to perform the swap\n    }\n\n    struct ExchangeData {\n        address srcAddr; // source token address (which we're selling)\n        address destAddr; // destination token address (which we're buying)\n        uint256 srcAmount; // amount of source token in token decimals\n        uint256 destAmount; // amount of bought token in token decimals\n        uint256 minPrice; // minPrice we are expecting (checked in DFSExchangeCore)\n        uint256 dfsFeeDivider; // service fee divider\n        address user; // currently deprecated (used to check custom fees for the user)\n        address wrapper; // on-chain wrapper address (must be in WrapperExchangeRegistry)\n        bytes wrapperData; // on-chain additional data for on-chain (uniswap route for example)\n        OffchainData offchainData; // offchain aggregator order\n    }\n}\n\n\n\n\n\n\n\ncontract Discount is AdminAuth{\n    mapping(address => bool) public serviceFeesDisabled;\n\n    function reenableServiceFee(address _wallet) public onlyOwner{\n        serviceFeesDisabled[_wallet] = false;\n    }\n\n    function disableServiceFee(address _wallet) public onlyOwner{\n        serviceFeesDisabled[_wallet] = true;\n    }\n}\n\n\n\n\n\n\n\n\ncontract DFSExchangeHelper {\n    \n    using TokenUtils for address;\n    \n    error InvalidOffchainData();\n    error OutOfRangeSlicingError();\n    //Order success but amount 0\n    error ZeroTokensSwapped();\n\n    using SafeERC20 for IERC20;\n\n    function sendLeftover(\n        address _srcAddr,\n        address _destAddr,\n        address payable _to\n    ) internal {\n        // clean out any eth leftover\n        TokenUtils.ETH_ADDR.withdrawTokens(_to, type(uint256).max);\n\n        _srcAddr.withdrawTokens(_to, type(uint256).max);\n        _destAddr.withdrawTokens(_to, type(uint256).max);\n    }\n\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\n        if (bs.length < start + 32){\n            revert OutOfRangeSlicingError();\n        }\n\n        uint256 x;\n        assembly {\n            x := mload(add(bs, add(0x20, start)))\n        }\n\n        return x;\n    }\n\n    function writeUint256(\n        bytes memory _b,\n        uint256 _index,\n        uint256 _input\n    ) internal pure {\n        if (_b.length < _index + 32) {\n            revert InvalidOffchainData();\n        }\n\n        bytes32 input = bytes32(_input);\n\n        _index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(_b, _index), input)\n        }\n    }\n}\n\n\n\n\n\n\n\ncontract MainnetExchangeAddresses {\n\n    address internal constant FEE_RECIPIENT_ADDRESS = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A;\n    address internal constant DISCOUNT_ADDRESS = 0x84fE6D4aaD0CA1ce3af7153eecd11729fa7a74f0;\n    address internal constant WRAPPER_EXCHANGE_REGISTRY = 0x653893375dD1D942D2C429caB51641F2bf14d426;\n    address internal constant EXCHANGE_AGGREGATOR_REGISTRY_ADDR = 0x7b67D9D7993A258C4b2C31CDD9E6cbD5Fb674985;\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address internal constant TOKEN_GROUP_REGISTRY = 0xcA49e64FE1FE8be40ED30F682edA1b27a6c8611c;\n}\n\n\n\n\n\n\n\ncontract ExchangeHelper is MainnetExchangeAddresses {\n}\n\n\n\n\n\n\n\ncontract ExchangeAggregatorRegistry is AdminAuth {\n    mapping(address => bool) public exchangeTargetAddresses;\n\n    error EmptyAddrError();\n\n    function setExchangeTargetAddr(address _exchangeAddr, bool _state) public onlyOwner {\n        if(_exchangeAddr == address(0)) {\n\t\t\trevert EmptyAddrError();\n\t\t}\n\n        exchangeTargetAddresses[_exchangeAddr] = _state;\n    }\n\n    function isExchangeAggregatorAddr(address _exchangeAddr) public view returns (bool) {\n        return exchangeTargetAddresses[_exchangeAddr];\n    }\n}\n\n\n\n\n\n\ncontract WrapperExchangeRegistry is AdminAuth {\n\tmapping(address => bool) private wrappers;\n\n\terror EmptyAddrError();\n\n\tfunction addWrapper(address _wrapper) public onlyOwner {\n\t\tif(_wrapper == address(0)) {\n\t\t\trevert EmptyAddrError();\n\t\t}\n\n\t\twrappers[_wrapper] = true;\n\t}\n\n\tfunction removeWrapper(address _wrapper) public onlyOwner {\n\t\twrappers[_wrapper] = false;\n\t}\n\n\tfunction isWrapper(address _wrapper) public view returns(bool) {\n\t\treturn wrappers[_wrapper];\n\t}\n}\n\n\n\n\n\n\n\ninterface IExchangeV3 {\n    function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\n    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\n}\n\n\n\n\n\n\n\nabstract contract IOffchainWrapper is DFSExchangeData {\n    function takeOrder(\n        ExchangeData memory _exData\n    ) virtual public payable returns (bool success, uint256);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract DFSExchangeCore is DFSExchangeHelper, DSMath, DFSExchangeData, ExchangeHelper {\n    using SafeERC20 for IERC20;\n    using TokenUtils for address;\n\n    error SlippageHitError(uint256 amountBought, uint256 amountExpected);\n    error InvalidWrapperError(address wrapperAddr);\n\n    ExchangeAggregatorRegistry internal constant exchangeAggRegistry = ExchangeAggregatorRegistry(EXCHANGE_AGGREGATOR_REGISTRY_ADDR);\n    WrapperExchangeRegistry internal constant wrapperRegistry = WrapperExchangeRegistry(WRAPPER_EXCHANGE_REGISTRY);\n\n    /// @notice Internal method that performs a sell on offchain aggregator/on-chain\n    /// @dev Useful for other DFS contract to integrate for exchanging\n    /// @param exData Exchange data struct\n    function _sell(ExchangeData memory exData) internal returns (address wrapperAddress, uint256 destAmount) {\n        (wrapperAddress, destAmount, ) = _sell(exData, address(this));\n    }\n\n    /// @notice Internal method that performs a sell on offchain aggregator/on-chain\n    /// @dev Useful for other DFS contract to integrate for exchanging\n    /// @param exData Exchange data struct\n    /// @return (address, uint, bool) Address of the wrapper used and destAmount and if there was fee\n    function _sell(ExchangeData memory exData, address smartWallet) internal returns (address, uint256, bool) {\n        uint256 amountWithoutFee = exData.srcAmount;\n        address wrapperAddr = exData.offchainData.wrapper;\n        bool offChainSwapSuccess;\n\n        uint256 destBalanceBefore = exData.destAddr.getBalance(address(this));\n\n        // Takes DFS exchange fee\n        if (exData.dfsFeeDivider != 0) {\n            exData.srcAmount = sub(exData.srcAmount, getFee(\n                exData.srcAmount,\n                smartWallet,\n                exData.srcAddr,\n                exData.dfsFeeDivider\n            ));\n        }\n\n        // Try offchain aggregator first and then fallback on specific wrapper\n        if (exData.offchainData.price > 0) {\n            (offChainSwapSuccess, ) = offChainSwap(exData);\n        }\n\n        // fallback to desired wrapper if offchain aggregator failed\n        if (!offChainSwapSuccess) {\n            onChainSwap(exData);\n            wrapperAddr = exData.wrapper;\n        }\n\n        uint256 destBalanceAfter = exData.destAddr.getBalance(address(this));\n        uint256 amountBought = destBalanceAfter - destBalanceBefore;\n\n        // check slippage\n        if (amountBought < wmul(exData.minPrice, exData.srcAmount)){\n            revert SlippageHitError(amountBought, wmul(exData.minPrice, exData.srcAmount));\n        }\n\n        bool hasFee = exData.srcAmount != amountWithoutFee;\n        // revert back exData changes to keep it consistent\n        exData.srcAmount = amountWithoutFee;\n\n        return (wrapperAddr, amountBought, hasFee);\n    }\n\n    /// @notice Takes order from exchange aggregator and returns bool indicating if it is successful\n    /// @param _exData Exchange data\n    function offChainSwap(ExchangeData memory _exData)\n        internal\n        returns (bool success, uint256)\n    {\n        /// @dev Check if exchange address is in our registry to not call an untrusted contract\n        if (!exchangeAggRegistry.isExchangeAggregatorAddr(_exData.offchainData.exchangeAddr)) {\n            return (false, 0);\n        }\n\n        /// @dev Check if we have the address is a registered wrapper\n        if (!wrapperRegistry.isWrapper(_exData.offchainData.wrapper)) {\n            return (false, 0);\n        }\n\n        // send src amount\n        IERC20(_exData.srcAddr).safeTransfer(_exData.offchainData.wrapper, _exData.srcAmount);\n\n        return IOffchainWrapper(_exData.offchainData.wrapper).takeOrder(_exData);\n    }\n\n    /// @notice Calls wrapper contract for exchange to preform an on-chain swap\n    /// @param _exData Exchange data struct\n    /// @return swappedTokens Dest amount of tokens we get after sell\n    function onChainSwap(ExchangeData memory _exData)\n        internal\n        returns (uint256 swappedTokens)\n    {\n        if (!(WrapperExchangeRegistry(WRAPPER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper))){\n            revert InvalidWrapperError(_exData.wrapper);\n        }\n\n        IERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\n\n        swappedTokens = IExchangeV3(_exData.wrapper).sell(\n            _exData.srcAddr,\n            _exData.destAddr,\n            _exData.srcAmount,\n            _exData.wrapperData\n        );\n    }\n\n    /// @notice Takes a feePercentage and sends it to wallet\n    /// @param _amount Amount of the whole trade\n    /// @param _wallet Address of the users wallet (safe or dsproxy)\n    /// @param _token Address of the token\n    /// @param _dfsFeeDivider Dfs fee divider\n    /// @return feeAmount Amount owner earned on the fee\n    function getFee(\n        uint256 _amount,\n        address _wallet,\n        address _token,\n        uint256 _dfsFeeDivider\n    ) internal returns (uint256 feeAmount) {\n        if (_dfsFeeDivider != 0 && Discount(DISCOUNT_ADDRESS).serviceFeesDisabled(_wallet)) {\n            _dfsFeeDivider = 0;\n        }\n\n        if (_dfsFeeDivider == 0) {\n            feeAmount = 0;\n        } else {\n            feeAmount = _amount / _dfsFeeDivider;\n            address walletAddr = FeeRecipient(FEE_RECIPIENT_ADDRESS).getFeeAddr();\n            _token.withdrawTokens(walletAddr, feeAmount);\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\ncontract LlamaLendSwapper is LlamaLendHelper, DFSExchangeCore, GasFeeHelper, AdminAuth {\n    using SafeERC20 for IERC20;\n    using TokenUtils for address;\n\n    /// @dev Divider for automation fee, 5 bps\n    uint256 internal constant AUTOMATION_DFS_FEE = 2000;\n\n    struct CallbackData {\n        uint256 stablecoins;\n        uint256 collateral;\n    }\n\n\n    ///@dev called by llamalend controller after repay_extended\n    ///@dev sends all collateral the user has to this contract, we swap a part or all of it\n    ///@dev after swapping, llamalend will either recreate the position or close it fully\n    function callback_repay(\n        address _user,\n        uint256,\n        uint256,\n        uint256,\n        uint256[] memory info\n    ) external returns (CallbackData memory cb) {\n        uint256 gasUsed = info[0];\n        if (!isControllerValid(msg.sender, info[1])) revert InvalidLlamaLendController();\n\n        ExchangeData memory exData = abi.decode(transientStorage.getBytesTransiently(), (DFSExchangeData.ExchangeData));\n        address collToken = exData.srcAddr;\n        address debtToken = exData.destAddr;\n\n        (, uint256 receivedAmount, bool hasFee) = _sell(exData, _user);\n        \n        if (gasUsed > 0){\n            receivedAmount -= _takeAutomationFee(receivedAmount, debtToken, gasUsed, hasFee);\n        }\n\n        // if receivedAmount > current debt, leftover coll will be returned and receivedAmount-currentDebt will be returned\n        // if receivedAmount < current debt, new position will be created with leftover coll and currentDebt-receivedAmount\n        cb.stablecoins = receivedAmount;\n        cb.collateral = collToken.getBalance(address(this));\n\n        // approve the controller to create new position\n        IERC20(collToken).safeApprove(msg.sender, cb.collateral);\n        IERC20(debtToken).safeApprove(msg.sender, cb.stablecoins);\n    }\n\n    ///@dev called by llamalend controller after create_loan_extended and borrow_more_extended\n    ///@dev sends exData.srcAmount of debt token to this contract for us to sell then pulls received coll token\n    function callback_deposit(\n        address _user,\n        uint256,\n        uint256,\n        uint256,\n        uint256[] memory info\n    ) external returns (CallbackData memory cb) {\n        uint256 gasUsed = info[0];\n        if (!isControllerValid(msg.sender, info[1])) revert InvalidLlamaLendController();\n        ExchangeData memory exData = abi.decode(transientStorage.getBytesTransiently(), (DFSExchangeData.ExchangeData));\n\n        address collToken = exData.destAddr;\n\n        (, uint256 receivedAmount, bool hasFee) = _sell(exData, _user);\n\n        if (gasUsed > 0){\n            receivedAmount -= _takeAutomationFee(receivedAmount, collToken, gasUsed, hasFee);\n        }\n\n        cb.collateral = receivedAmount;\n\n        // approve the controller to create new position\n        IERC20(collToken).safeApprove(msg.sender, cb.collateral);\n    }\n\n    ///@dev called by llamalend controller after liquidate_extended\n    ///@dev if users debtTokenCollateralAmount is higher than debt, this won'te be called at all\n    ///@dev this will send all marketCollateralAmount from users position to this contract, which we can sell all or a part of it\n    function callback_liquidate(\n        address _user,\n        uint256,\n        uint256,\n        uint256,\n        uint256[] memory info\n    ) external returns (CallbackData memory cb) {\n        uint256 gasUsed = info[0];\n        if (!isControllerValid(msg.sender, info[1])) revert InvalidLlamaLendController();\n        bool sellMax = info[2] > 0;\n        ExchangeData memory exData = abi.decode(transientStorage.getBytesTransiently(), (DFSExchangeData.ExchangeData));\n        \n        address collToken = exData.srcAddr;\n        address debtToken = exData.destAddr;\n        if (sellMax) {\n            exData.srcAmount = collToken.getBalance(address(this));\n        }\n        (, uint256 receivedAmount, bool hasFee) = _sell(exData, _user);\n\n        if (gasUsed > 0){\n            receivedAmount -= _takeAutomationFee(receivedAmount, debtToken, gasUsed, hasFee);\n        }\n        cb.stablecoins = receivedAmount;\n        cb.collateral = collToken.getBalance(address(this));\n\n        IERC20(collToken).safeApprove(msg.sender, cb.collateral);\n        IERC20(debtToken).safeApprove(msg.sender, cb.stablecoins);\n\n    }\n\n    /// @dev No funds should be stored on this contract, but if anything is left send back to the user\n    function withdrawAll(address _controllerAddress) external {\n        address collToken = ILlamaLendController(_controllerAddress).collateral_token();\n        address debtToken = ILlamaLendController(_controllerAddress).borrowed_token();\n\n        debtToken.withdrawTokens(msg.sender, type(uint256).max);\n        collToken.withdrawTokens(msg.sender, type(uint256).max);\n    }\n\n    function _takeAutomationFee(\n        uint256 _destTokenAmount,\n        address _token,\n        uint256 _gasUsed,\n        bool hasFee\n    ) internal returns (uint256 feeAmount) {\n        // we need to take the fee for tx cost as well, as it's in a strategy\n        feeAmount += calcGasCost(_gasUsed, _token, 0);\n        \n        // gas fee can't go over 20% of the whole amount\n        if (feeAmount > (_destTokenAmount / 5)) {\n            feeAmount = _destTokenAmount / 5;\n        }\n        // if user has been whitelisted we don't take 0.05% fee\n        if (hasFee) {\n            feeAmount += _destTokenAmount / AUTOMATION_DFS_FEE;\n        }\n\n        address walletAddr = FeeRecipient(FEE_RECIPIENT_ADDRESS).getFeeAddr();\n        _token.withdrawTokens(walletAddr, feeAmount);\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\ncontract LlamaLendLevCreate is ActionBase, LlamaLendHelper {\n    using TokenUtils for address;\n\n    /// @param controllerAddress Address of the llamalend market controller\n    /// @param controllerId id that matches controller number in factory\n    /// @param from address from which collAmount of collToken will be pulled\n    /// @param collAmount amount of collateral that the user is providing at first\n    /// @param nBands number of bands the created position will have\n    /// @param exData exchange data for swapping (srcAmount will be amount of debt token generated and sold)\n    /// @param gasUsed info for automated strategy gas reimbursement\n    struct Params {\n        address controllerAddress;\n        uint256 controllerId;\n        address from;\n        uint256 collAmount;\n        uint256 nBands;\n        DFSExchangeData.ExchangeData exData;\n        uint32 gasUsed;\n    }\n\n    /// @inheritdoc ActionBase\n    function executeAction(\n        bytes memory _callData,\n        bytes32[] memory _subData,\n        uint8[] memory _paramMapping,\n        bytes32[] memory _returnValues\n    ) public payable virtual override returns (bytes32) {\n        Params memory params = parseInputs(_callData);\n\n        params.controllerAddress = _parseParamAddr(params.controllerAddress, _paramMapping[0], _subData, _returnValues);\n        params.from = _parseParamAddr(params.from, _paramMapping[1], _subData, _returnValues);\n        params.collAmount = _parseParamUint(params.collAmount, _paramMapping[2], _subData, _returnValues);\n        params.nBands = _parseParamUint(params.nBands, _paramMapping[3], _subData, _returnValues);\n\n        (uint256 debtGeneratedAndSold, bytes memory logData) = _create(params);\n        emit ActionEvent(\"LlamaLendLevCreate\", logData);\n        return bytes32(debtGeneratedAndSold);\n    }\n\n    /// @inheritdoc ActionBase\n    function executeActionDirect(bytes memory _callData) public payable virtual override {\n        Params memory params = parseInputs(_callData);\n\n        (, bytes memory logData) = _create(params);\n        logger.logActionDirectEvent(\"LlamaLendLevCreate\", logData);\n    }\n\n    /// @inheritdoc ActionBase\n    function actionType() public pure virtual override returns (uint8) {\n        return uint8(ActionType.STANDARD_ACTION);\n    }\n\n    //////////////////////////// ACTION LOGIC ////////////////////////////\n\n    function _create(Params memory _params) internal returns (uint256, bytes memory) {\n        if (_params.collAmount == 0 || _params.exData.srcAmount == 0) revert();\n        if (!isControllerValid(_params.controllerAddress, _params.controllerId)) revert InvalidLlamaLendController();\n\n        address collAddr = ILlamaLendController(_params.controllerAddress).collateral_token();\n        _params.collAmount = collAddr.pullTokensIfNeeded(_params.from, _params.collAmount);\n\n        address llamalendSwapper = registry.getAddr(LLAMALEND_SWAPPER_ID);\n        uint256[] memory info = new uint256[](5);\n        info[0] = _params.gasUsed;\n        info[1] = _params.controllerId;\n\n        transientStorage.setBytesTransiently(abi.encode(_params.exData));\n\n\n        collAddr.approveToken(_params.controllerAddress, _params.collAmount);\n        // create loan\n        ILlamaLendController(_params.controllerAddress).create_loan_extended(\n            _params.collAmount,\n            _params.exData.srcAmount,\n            _params.nBands,\n            llamalendSwapper,\n            info\n        );\n\n        return (\n            _params.exData.srcAmount,\n            abi.encode(_params)\n        );\n    }\n\n    function parseInputs(bytes memory _callData) public pure returns (Params memory params) {\n        params = abi.decode(_callData, (Params));\n    }\n}\n", "ABI": "[{\"inputs\":[],\"name\":\"InvalidLlamaLendController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonContractCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReturnIndexValueError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubIndexValueError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"logName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ActionEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NO_PARAM_MAPPING\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETURN_MAX_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETURN_MIN_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_MAX_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_MIN_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminVault\",\"outputs\":[{\"internalType\":\"contract AdminVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_subData\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_paramMapping\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_returnValues\",\"type\":\"bytes32[]\"}],\"name\":\"executeAction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"executeActionDirect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCollAmountsFromAMM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtAssetCollAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collAssetCollAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controllerAddr\",\"type\":\"address\"}],\"name\":\"getCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInSoftLiquidation\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_controllerId\",\"type\":\"uint256\"}],\"name\":\"isControllerValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"isDSProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract DefisaverLogger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"parseInputs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"controllerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nBands\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"exData\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"gasUsed\",\"type\":\"uint32\"}],\"internalType\":\"struct LlamaLendLevCreate.Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DFSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userMaxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LlamaLendLevCreate", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}